{
  "api/LinqToDB.DataProvider.Firebird.FirebirdDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdDataProvider.html",
    "title": "Class FirebirdDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdDataProvider Inheritance Object DataProviderBase DynamicDataProviderBase FirebirdDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase.SyncRoot DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, Type, String) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source FirebirdDataProvider() Declaration public FirebirdDataProvider() | Improve this Doc View Source FirebirdDataProvider(ISqlOptimizer) Declaration public FirebirdDataProvider(ISqlOptimizer sqlOptimizer) Parameters Type Name Description ISqlOptimizer sqlOptimizer | Improve this Doc View Source FirebirdDataProvider(String, MappingSchema, ISqlOptimizer) Declaration protected FirebirdDataProvider(string name, MappingSchema mappingSchema, ISqlOptimizer sqlOptimizer) Parameters Type Name Description String name MappingSchema mappingSchema ISqlOptimizer sqlOptimizer Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Declaration protected override BasicMergeBuilder<TTarget, TSource> GetMergeBuilder<TTarget, TSource>(DataConnection connection, IMergeable<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description DataConnection connection IMergeable <TTarget, TSource> merge Returns Type Description BasicMergeBuilder <TTarget, TSource> Type Parameters Name Description TTarget TSource Overrides LinqToDB.DataProvider.DataProviderBase.GetMergeBuilder<TTarget, TSource>(LinqToDB.Data.DataConnection, LinqToDB.IMergeable<TTarget, TSource>) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public override bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader Int32 idx Returns Type Description Nullable < Boolean > Overrides DataProviderBase.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public override int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName Returns Type Description Int32 Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.Merge<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String) | Improve this Doc View Source MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) Declaration public override Task<int> MergeAsync<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName, CancellationToken token) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.MergeAsync<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String, System.Threading.CancellationToken) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdConfiguration.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdConfiguration.html",
    "title": "Class FirebirdConfiguration | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdConfiguration Inheritance Object FirebirdConfiguration Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public static class FirebirdConfiguration Fields | Improve this Doc View Source IsLiteralEncodingSupported Specifies that Firebird supports literal encoding. Availiable from version 2.5. Declaration public static bool IsLiteralEncodingSupported Field Value Type Description Boolean Properties | Improve this Doc View Source QuoteIdentifiers Declaration [Obsolete(\"Use FirebirdSqlBuilder.IdentifierQuoteMode instead.\")] public static bool QuoteIdentifiers { get; set; } Property Value Type Description Boolean"
  },
  "api/LinqToDB.DataProvider.DynamicDataProviderBase.html": {
    "href": "api/LinqToDB.DataProvider.DynamicDataProviderBase.html",
    "title": "Class DynamicDataProviderBase | Linq To DB (aka linq2db)",
    "keywords": "Class DynamicDataProviderBase Inheritance Object DataProviderBase DynamicDataProviderBase DB2DataProvider FirebirdDataProvider InformixDataProvider MySqlDataProvider OracleDataProvider PostgreSQLDataProvider SapHanaDataProvider SqlCeDataProvider SQLiteDataProvider SybaseDataProvider Implements IDataProvider Inherited Members DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.ConnectionNamespace DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.CreateSqlBuilder() DataProviderBase.GetSqlOptimizer() DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.GetSchemaProvider() DataProviderBase.SetParameterType(IDbDataParameter, DataType) DataProviderBase.BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) DataProviderBase.MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) DataProviderBase.GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public abstract class DynamicDataProviderBase : DataProviderBase, IDataProvider Constructors | Improve this Doc View Source DynamicDataProviderBase(String, MappingSchema) Declaration protected DynamicDataProviderBase(string name, MappingSchema mappingSchema) Parameters Type Name Description String name MappingSchema mappingSchema Fields | Improve this Doc View Source SyncRoot Declaration protected static readonly object SyncRoot Field Value Type Description Object Properties | Improve this Doc View Source ConnectionTypeName Declaration protected abstract string ConnectionTypeName { get; } Property Value Type Description String | Improve this Doc View Source DataReaderType Declaration public override Type DataReaderType { get; } Property Value Type Description Type Overrides DataProviderBase.DataReaderType | Improve this Doc View Source DataReaderTypeName Declaration protected abstract string DataReaderTypeName { get; } Property Value Type Description String Methods | Improve this Doc View Source CreateConnectionExpression(Type) Declaration public static Expression<Func<string, IDbConnection>> CreateConnectionExpression(Type connectionType) Parameters Type Name Description Type connectionType Returns Type Description Expression < Func < String , IDbConnection >> | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected override IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description String connectionString Returns Type Description IDbConnection Overrides DataProviderBase.CreateConnectionInternal(String) | Improve this Doc View Source EnsureConnection() Declaration protected void EnsureConnection() | Improve this Doc View Source GetConnectionType() Declaration protected virtual Type GetConnectionType() Returns Type Description Type | Improve this Doc View Source GetSetParameter(Type, String, String, String, String) Declaration protected Action<IDbDataParameter> GetSetParameter(Type connectionType, string parameterTypeName, string propertyName, string dbTypeName, string valueName) Parameters Type Name Description Type connectionType String parameterTypeName String propertyName String dbTypeName String valueName Returns Type Description Action < IDbDataParameter > | Improve this Doc View Source GetSetParameter(Type, String, String, Type, String) Declaration protected Action<IDbDataParameter> GetSetParameter(Type connectionType, string parameterTypeName, string propertyName, Type dbType, string valueName) Parameters Type Name Description Type connectionType String parameterTypeName String propertyName Type dbType String valueName Returns Type Description Action < IDbDataParameter > | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration public override bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description Boolean Overrides DataProviderBase.IsCompatibleConnection(IDbConnection) | Improve this Doc View Source IsGetParameter(Type, String, String, String, String) Declaration protected Func<IDbDataParameter, bool> IsGetParameter(Type connectionType, string parameterTypeName, string propertyName, string dbTypeName, string valueName) Parameters Type Name Description Type connectionType String parameterTypeName String propertyName String dbTypeName String valueName Returns Type Description Func < IDbDataParameter , Boolean > | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected abstract void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description Type connectionType | Improve this Doc View Source SetField(Type, String, String) Declaration protected void SetField(Type fieldType, string dataTypeName, string methodName) Parameters Type Name Description Type fieldType String dataTypeName String methodName | Improve this Doc View Source SetProviderField(Type, String) Declaration protected void SetProviderField(Type fieldType, string methodName) Parameters Type Name Description Type fieldType String methodName | Improve this Doc View Source SetProviderField(Type, Type, String) Declaration protected void SetProviderField(Type toType, Type fieldType, string methodName) Parameters Type Name Description Type toType Type fieldType String methodName | Improve this Doc View Source SetToTypeField(Type, String) Declaration protected void SetToTypeField(Type toType, string methodName) Parameters Type Name Description Type toType String methodName Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.html": {
    "href": "api/LinqToDB.DataProvider.DB2.html",
    "title": "Namespace LinqToDB.DataProvider.DB2 | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.DB2 Classes ConnectionTypeTypeCreator<T> DB2DataProvider DB2LUWMappingSchema DB2MappingSchema DB2Tools DB2Types DB2zOSMappingSchema TypeCreator TypeCreator<T> TypeCreator<T1, T> TypeCreator<T1, T2, T> TypeCreatorBase TypeCreatorNoDefault<T> Enums DB2IdentifierQuoteMode DB2Version"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreatorNoDefault-1.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreatorNoDefault-1.html",
    "title": "Class TypeCreatorNoDefault<T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreatorNoDefault<T> Inheritance Object TypeCreatorBase TypeCreatorNoDefault<T> ConnectionTypeTypeCreator<T> Inherited Members TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class TypeCreatorNoDefault<T> : TypeCreatorBase Type Parameters Name Description T Methods | Improve this Doc View Source CreateInstance(T) Declaration public dynamic CreateInstance(T value) Parameters Type Name Description T value Returns Type Description Object Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreatorBase.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreatorBase.html",
    "title": "Class TypeCreatorBase | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreatorBase Inheritance Object TypeCreatorBase TypeCreator TypeCreatorNoDefault<T> Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public abstract class TypeCreatorBase Fields | Improve this Doc View Source Type Declaration public Type Type Field Value Type Description Type Properties | Improve this Doc View Source IsSupported Declaration public bool IsSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source GetCreator<T>() Declaration protected Func<T, object> GetCreator<T>() Returns Type Description Func <T, Object > Type Parameters Name Description T | Improve this Doc View Source GetCreator<T>(Type) Declaration protected Func<T, object> GetCreator<T>(Type paramType) Parameters Type Name Description Type paramType Returns Type Description Func <T, Object > Type Parameters Name Description T Operators | Improve this Doc View Source Implicit(TypeCreatorBase to Type) Declaration public static implicit operator Type(TypeCreatorBase typeCreator) Parameters Type Name Description TypeCreatorBase typeCreator Returns Type Description Type Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreator.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreator.html",
    "title": "Class TypeCreator | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreator Inheritance Object TypeCreatorBase TypeCreator TypeCreator<T> Inherited Members TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class TypeCreator : TypeCreatorBase Methods | Improve this Doc View Source CreateInstance() Declaration public dynamic CreateInstance() Returns Type Description Object Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreator-3.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreator-3.html",
    "title": "Class TypeCreator<T1, T2, T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreator<T1, T2, T> Inheritance Object TypeCreatorBase TypeCreator TypeCreator <T1> TypeCreator <T1, T2> TypeCreator<T1, T2, T> Inherited Members TypeCreator<T1, T2>.CreateInstance(T2) TypeCreator<T1>.CreateInstance(T1) TypeCreator.CreateInstance() TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class TypeCreator<T1, T2, T> : TypeCreator<T1, T2> Type Parameters Name Description T1 T2 T Methods | Improve this Doc View Source CreateInstance(T) Declaration public dynamic CreateInstance(T value) Parameters Type Name Description T value Returns Type Description Object Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2Types.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2Types.html",
    "title": "Class DB2Types | Linq To DB (aka linq2db)",
    "keywords": "Class DB2Types Inheritance Object DB2Types Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2Types Fields | Improve this Doc View Source DB2Binary Declaration public static readonly TypeCreator<byte[]> DB2Binary Field Value Type Description TypeCreator < Byte []> | Improve this Doc View Source DB2Blob Declaration public static readonly ConnectionTypeTypeCreator<byte[]> DB2Blob Field Value Type Description ConnectionTypeTypeCreator < Byte []> | Improve this Doc View Source DB2Clob Declaration public static readonly ConnectionTypeTypeCreator<string> DB2Clob Field Value Type Description ConnectionTypeTypeCreator < String > | Improve this Doc View Source DB2Date Declaration public static readonly TypeCreator<DateTime> DB2Date Field Value Type Description TypeCreator < DateTime > | Improve this Doc View Source DB2DateTime Declaration public static readonly TypeCreator<DateTime, long> DB2DateTime Field Value Type Description TypeCreator < DateTime , Int64 > | Improve this Doc View Source DB2Decimal Declaration public static readonly TypeCreator<decimal> DB2Decimal Field Value Type Description TypeCreator < Decimal > | Improve this Doc View Source DB2DecimalFloat Declaration public static readonly TypeCreator<decimal, double, long> DB2DecimalFloat Field Value Type Description TypeCreator < Decimal , Double , Int64 > | Improve this Doc View Source DB2Double Declaration public static readonly TypeCreator<double> DB2Double Field Value Type Description TypeCreator < Double > | Improve this Doc View Source DB2Int16 Declaration public static readonly TypeCreator<short> DB2Int16 Field Value Type Description TypeCreator < Int16 > | Improve this Doc View Source DB2Int32 Declaration public static readonly TypeCreator<int> DB2Int32 Field Value Type Description TypeCreator < Int32 > | Improve this Doc View Source DB2Int64 Declaration public static readonly TypeCreator<long> DB2Int64 Field Value Type Description TypeCreator < Int64 > | Improve this Doc View Source DB2Real Declaration public static readonly TypeCreator<float> DB2Real Field Value Type Description TypeCreator < Single > | Improve this Doc View Source DB2Real370 Declaration public static readonly TypeCreator<double> DB2Real370 Field Value Type Description TypeCreator < Double > | Improve this Doc View Source DB2RowId Declaration public static readonly TypeCreator DB2RowId Field Value Type Description TypeCreator | Improve this Doc View Source DB2String Declaration public static readonly TypeCreator<string> DB2String Field Value Type Description TypeCreator < String > | Improve this Doc View Source DB2Time Declaration public static readonly TypeCreator<TimeSpan> DB2Time Field Value Type Description TypeCreator < TimeSpan > | Improve this Doc View Source DB2TimeStamp Declaration public static readonly TypeCreator<DateTime> DB2TimeStamp Field Value Type Description TypeCreator < DateTime > | Improve this Doc View Source DB2Xml Declaration public static Type DB2Xml Field Value Type Description Type Properties | Improve this Doc View Source ConnectionType Declaration public static Type ConnectionType { get; } Property Value Type Description Type Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2Tools.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2Tools.html",
    "title": "Class DB2Tools | Linq To DB (aka linq2db)",
    "keywords": "Class DB2Tools Inheritance Object DB2Tools Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public static class DB2Tools Fields | Improve this Doc View Source AssemblyName Declaration public static string AssemblyName Field Value Type Description String | Improve this Doc View Source IsCore Declaration public static bool IsCore Field Value Type Description Boolean Properties | Improve this Doc View Source AutoDetectProvider Declaration public static bool AutoDetectProvider { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source AfterInitialized(Action) Declaration public static void AfterInitialized(Action action) Parameters Type Name Description Action action | Improve this Doc View Source CreateDataConnection(IDbConnection, DB2Version) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, DB2Version version = DB2Version.LUW) Parameters Type Name Description IDbConnection connection DB2Version version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, DB2Version) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, DB2Version version = DB2Version.LUW) Parameters Type Name Description IDbTransaction transaction DB2Version version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, DB2Version) Declaration public static DataConnection CreateDataConnection(string connectionString, DB2Version version = DB2Version.LUW) Parameters Type Name Description String connectionString DB2Version version Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider(DB2Version) Declaration public static IDataProvider GetDataProvider(DB2Version version = DB2Version.LUW) Parameters Type Name Description DB2Version version Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Int32 maxBatchSize Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ProviderSpecificBulkCopy<T>(DataConnection, IEnumerable<T>, Nullable<Int32>, Boolean, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied ProviderSpecificBulkCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int? bulkCopyTimeout = default(int? ), bool keepIdentity = false, int notifyAfter = 0, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Nullable < Int32 > bulkCopyTimeout Boolean keepIdentity Int32 notifyAfter Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveDB2(Assembly) Declaration public static void ResolveDB2(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveDB2(String) Declaration public static void ResolveDB2(string path) Parameters Type Name Description String path"
  },
  "api/LinqToDB.DataProvider.DB2.DB2MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2MappingSchema.html",
    "title": "Class DB2MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DB2MappingSchema Inheritance Object MappingSchema DB2MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2MappingSchema : MappingSchema Constructors | Improve this Doc View Source DB2MappingSchema() Declaration public DB2MappingSchema() | Improve this Doc View Source DB2MappingSchema(String) Declaration protected DB2MappingSchema(string configuration) Parameters Type Name Description String configuration Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2LUWMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2LUWMappingSchema.html",
    "title": "Class DB2LUWMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DB2LUWMappingSchema Inheritance Object MappingSchema DB2LUWMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2LUWMappingSchema : MappingSchema Constructors | Improve this Doc View Source DB2LUWMappingSchema() Declaration public DB2LUWMappingSchema() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DataProviderBase.html": {
    "href": "api/LinqToDB.DataProvider.DataProviderBase.html",
    "title": "Class DataProviderBase | Linq To DB (aka linq2db)",
    "keywords": "Class DataProviderBase Inheritance Object DataProviderBase AccessDataProvider DynamicDataProviderBase SapHanaOdbcDataProvider SqlServerDataProvider Implements IDataProvider Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public abstract class DataProviderBase : IDataProvider Constructors | Improve this Doc View Source DataProviderBase(String, MappingSchema) Declaration protected DataProviderBase(string name, MappingSchema mappingSchema) Parameters Type Name Description String name MappingSchema mappingSchema Fields | Improve this Doc View Source DefaultMaxRetryCount The default number of retry attempts. Declaration protected static readonly int DefaultMaxRetryCount Field Value Type Description Int32 | Improve this Doc View Source ReaderExpressions Declaration public readonly ConcurrentDictionary<ReaderInfo, Expression> ReaderExpressions Field Value Type Description ConcurrentDictionary < ReaderInfo , Expression > Properties | Improve this Doc View Source ConnectionNamespace Declaration public abstract string ConnectionNamespace { get; } Property Value Type Description String | Improve this Doc View Source DataReaderType Declaration public abstract Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source MappingSchema Declaration public virtual MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source MaxRetryCount The maximum number of retry attempts. Declaration protected virtual int MaxRetryCount { get; } Property Value Type Description Int32 | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source OnConnectionCreated Declaration public static Func<IDataProvider, IDbConnection, IDbConnection> OnConnectionCreated { get; set; } Property Value Type Description Func < IDataProvider , IDbConnection , IDbConnection > | Improve this Doc View Source SqlProviderFlags Declaration public SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public virtual BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ConvertParameterType(Type, DataType) Declaration public virtual Type ConvertParameterType(Type type, DataType dataType) Parameters Type Name Description Type type DataType dataType Returns Type Description Type | Improve this Doc View Source CreateConnection(String) Declaration public IDbConnection CreateConnection(string connectionString) Parameters Type Name Description String connectionString Returns Type Description IDbConnection | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected abstract IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description String connectionString Returns Type Description IDbConnection | Improve this Doc View Source CreateSqlBuilder() Declaration public abstract ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder | Improve this Doc View Source DisposeCommand(DataConnection) Declaration public virtual void DisposeCommand(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection | Improve this Doc View Source ExecuteScope() Declaration public virtual IDisposable ExecuteScope() Returns Type Description IDisposable | Improve this Doc View Source FindExpression(ReaderInfo, out Expression) Declaration protected bool FindExpression(ReaderInfo info, out Expression expr) Parameters Type Name Description ReaderInfo info Expression expr Returns Type Description Boolean | Improve this Doc View Source GetCommandBehavior(CommandBehavior) Declaration public virtual CommandBehavior GetCommandBehavior(CommandBehavior commandBehavior) Parameters Type Name Description CommandBehavior commandBehavior Returns Type Description CommandBehavior | Improve this Doc View Source GetConnectionInfo(DataConnection, String) Declaration public virtual object GetConnectionInfo(DataConnection dataConnection, string parameterName) Parameters Type Name Description DataConnection dataConnection String parameterName Returns Type Description Object | Improve this Doc View Source GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Declaration protected virtual BasicMergeBuilder<TTarget, TSource> GetMergeBuilder<TTarget, TSource>(DataConnection connection, IMergeable<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description DataConnection connection IMergeable <TTarget, TSource> merge Returns Type Description BasicMergeBuilder <TTarget, TSource> Type Parameters Name Description TTarget TSource | Improve this Doc View Source GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration public virtual Expression GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema IDataReader reader Int32 idx Expression readerExpression Type toType Returns Type Description Expression | Improve this Doc View Source GetSchemaProvider() Declaration public abstract ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider | Improve this Doc View Source GetSqlOptimizer() Declaration public abstract ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[]) Declaration public virtual void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection CommandType commandType String commandText DataParameter [] parameters | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration public abstract bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description Boolean | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public virtual bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader Int32 idx Returns Type Description Nullable < Boolean > | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public virtual int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Declaration public int Merge<TTarget, TSource>(DataConnection dataConnection, IMergeable<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description DataConnection dataConnection IMergeable <TTarget, TSource> merge Returns Type Description Int32 Type Parameters Name Description TTarget TSource | Improve this Doc View Source MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) Declaration public virtual Task<int> MergeAsync<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName, CancellationToken token) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description T | Improve this Doc View Source MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) Declaration public Task<int> MergeAsync<TTarget, TSource>(DataConnection dataConnection, IMergeable<TTarget, TSource> merge, CancellationToken token) where TTarget : class where TSource : class Parameters Type Name Description DataConnection dataConnection IMergeable <TTarget, TSource> merge CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description TTarget TSource | Improve this Doc View Source NormalizeTypeName(String) Declaration protected virtual string NormalizeTypeName(string typeName) Parameters Type Name Description String typeName Returns Type Description String | Improve this Doc View Source SetCharField(String, Expression<Func<IDataReader, Int32, String>>) Declaration protected void SetCharField(string dataTypeName, Expression<Func<IDataReader, int, string>> expr) Parameters Type Name Description String dataTypeName Expression < Func < IDataReader , Int32 , String >> expr | Improve this Doc View Source SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) Declaration protected void SetCharFieldToType<T>(string dataTypeName, Expression<Func<IDataReader, int, string>> expr) Parameters Type Name Description String dataTypeName Expression < Func < IDataReader , Int32 , String >> expr Type Parameters Name Description T | Improve this Doc View Source SetField<TP, T>(Expression<Func<TP, Int32, T>>) Declaration protected void SetField<TP, T>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description Expression < Func <TP, Int32 , T>> expr Type Parameters Name Description TP T | Improve this Doc View Source SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) Declaration protected void SetField<TP, T>(string dataTypeName, Expression<Func<TP, int, T>> expr) Parameters Type Name Description String dataTypeName Expression < Func <TP, Int32 , T>> expr Type Parameters Name Description TP T | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public virtual void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected virtual void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType | Improve this Doc View Source SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) Declaration protected void SetProviderField<TP, T>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description Expression < Func <TP, Int32 , T>> expr Type Parameters Name Description TP T | Improve this Doc View Source SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) Declaration protected void SetProviderField<TP, T, TS>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description Expression < Func <TP, Int32 , T>> expr Type Parameters Name Description TP T TS | Improve this Doc View Source SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) Declaration protected void SetToType<TP, T, TF>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description Expression < Func <TP, Int32 , T>> expr Type Parameters Name Description TP T TF Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.BulkCopyReader.html": {
    "href": "api/LinqToDB.DataProvider.BulkCopyReader.html",
    "title": "Class BulkCopyReader | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyReader Inheritance Object MarshalByRefObject DbDataReader BulkCopyReader Implements IEnumerable IDataReader IDisposable IDataRecord Inherited Members DbDataReader.Dispose(Boolean) DbDataReader.IDataRecord.GetData(Int32) DbDataReader.GetDbDataReader(Int32) DbDataReader.GetStream(Int32) DbDataReader.GetTextReader(Int32) DbDataReader.GetFieldValue<T>(Int32) DbDataReader.GetFieldValueAsync<T>(Int32) DbDataReader.GetFieldValueAsync<T>(Int32, CancellationToken) DbDataReader.IsDBNullAsync(Int32) DbDataReader.IsDBNullAsync(Int32, CancellationToken) DbDataReader.ReadAsync() DbDataReader.ReadAsync(CancellationToken) DbDataReader.NextResultAsync() DbDataReader.NextResultAsync(CancellationToken) DbDataReader.VisibleFieldCount MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class BulkCopyReader : DbDataReader, IEnumerable, IDataReader, IDisposable, IDataRecord Constructors | Improve this Doc View Source BulkCopyReader(IDataProvider, MappingSchema, List<ColumnDescriptor>, IEnumerable) Declaration public BulkCopyReader(IDataProvider dataProvider, MappingSchema mappingSchema, List<ColumnDescriptor> columns, IEnumerable collection) Parameters Type Name Description IDataProvider dataProvider MappingSchema mappingSchema List < ColumnDescriptor > columns IEnumerable collection Fields | Improve this Doc View Source Count Declaration public int Count Field Value Type Description Int32 Properties | Improve this Doc View Source Depth Declaration public override int Depth { get; } Property Value Type Description Int32 Overrides DbDataReader.Depth | Improve this Doc View Source FieldCount Declaration public override int FieldCount { get; } Property Value Type Description Int32 Overrides DbDataReader.FieldCount | Improve this Doc View Source HasRows Declaration public override bool HasRows { get; } Property Value Type Description Boolean Overrides DbDataReader.HasRows | Improve this Doc View Source IsClosed Declaration public override bool IsClosed { get; } Property Value Type Description Boolean Overrides DbDataReader.IsClosed | Improve this Doc View Source Item[Int32] Declaration public override object this[int i] { get; } Parameters Type Name Description Int32 i Property Value Type Description Object Overrides DbDataReader.Item[Int32] | Improve this Doc View Source Item[String] Declaration public override object this[string name] { get; } Parameters Type Name Description String name Property Value Type Description Object Overrides DbDataReader.Item[String] | Improve this Doc View Source RecordsAffected Declaration public override int RecordsAffected { get; } Property Value Type Description Int32 Overrides DbDataReader.RecordsAffected Methods | Improve this Doc View Source Close() Declaration public override void Close() Overrides DbDataReader.Close() | Improve this Doc View Source GetBoolean(Int32) Declaration public override bool GetBoolean(int i) Parameters Type Name Description Int32 i Returns Type Description Boolean Overrides DbDataReader.GetBoolean(Int32) | Improve this Doc View Source GetByte(Int32) Declaration public override byte GetByte(int i) Parameters Type Name Description Int32 i Returns Type Description Byte Overrides DbDataReader.GetByte(Int32) | Improve this Doc View Source GetBytes(Int32, Int64, Byte[], Int32, Int32) Declaration public override long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) Parameters Type Name Description Int32 i Int64 fieldOffset Byte [] buffer Int32 bufferoffset Int32 length Returns Type Description Int64 Overrides DbDataReader.GetBytes(Int32, Int64, Byte[], Int32, Int32) | Improve this Doc View Source GetChar(Int32) Declaration public override char GetChar(int i) Parameters Type Name Description Int32 i Returns Type Description Char Overrides DbDataReader.GetChar(Int32) | Improve this Doc View Source GetChars(Int32, Int64, Char[], Int32, Int32) Declaration public override long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) Parameters Type Name Description Int32 i Int64 fieldoffset Char [] buffer Int32 bufferoffset Int32 length Returns Type Description Int64 Overrides DbDataReader.GetChars(Int32, Int64, Char[], Int32, Int32) | Improve this Doc View Source GetDataTypeName(Int32) Declaration public override string GetDataTypeName(int i) Parameters Type Name Description Int32 i Returns Type Description String Overrides DbDataReader.GetDataTypeName(Int32) | Improve this Doc View Source GetDateTime(Int32) Declaration public override DateTime GetDateTime(int i) Parameters Type Name Description Int32 i Returns Type Description DateTime Overrides DbDataReader.GetDateTime(Int32) | Improve this Doc View Source GetDecimal(Int32) Declaration public override decimal GetDecimal(int i) Parameters Type Name Description Int32 i Returns Type Description Decimal Overrides DbDataReader.GetDecimal(Int32) | Improve this Doc View Source GetDouble(Int32) Declaration public override double GetDouble(int i) Parameters Type Name Description Int32 i Returns Type Description Double Overrides DbDataReader.GetDouble(Int32) | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator GetEnumerator() Returns Type Description IEnumerator Overrides DbDataReader.GetEnumerator() | Improve this Doc View Source GetFieldType(Int32) Declaration public override Type GetFieldType(int i) Parameters Type Name Description Int32 i Returns Type Description Type Overrides DbDataReader.GetFieldType(Int32) | Improve this Doc View Source GetFloat(Int32) Declaration public override float GetFloat(int i) Parameters Type Name Description Int32 i Returns Type Description Single Overrides DbDataReader.GetFloat(Int32) | Improve this Doc View Source GetGuid(Int32) Declaration public override Guid GetGuid(int i) Parameters Type Name Description Int32 i Returns Type Description Guid Overrides DbDataReader.GetGuid(Int32) | Improve this Doc View Source GetInt16(Int32) Declaration public override short GetInt16(int i) Parameters Type Name Description Int32 i Returns Type Description Int16 Overrides DbDataReader.GetInt16(Int32) | Improve this Doc View Source GetInt32(Int32) Declaration public override int GetInt32(int i) Parameters Type Name Description Int32 i Returns Type Description Int32 Overrides DbDataReader.GetInt32(Int32) | Improve this Doc View Source GetInt64(Int32) Declaration public override long GetInt64(int i) Parameters Type Name Description Int32 i Returns Type Description Int64 Overrides DbDataReader.GetInt64(Int32) | Improve this Doc View Source GetName(Int32) Declaration public override string GetName(int i) Parameters Type Name Description Int32 i Returns Type Description String Overrides DbDataReader.GetName(Int32) | Improve this Doc View Source GetOrdinal(String) Declaration public override int GetOrdinal(string name) Parameters Type Name Description String name Returns Type Description Int32 Overrides DbDataReader.GetOrdinal(String) | Improve this Doc View Source GetSchemaTable() Declaration public override DataTable GetSchemaTable() Returns Type Description DataTable Overrides DbDataReader.GetSchemaTable() | Improve this Doc View Source GetString(Int32) Declaration public override string GetString(int i) Parameters Type Name Description Int32 i Returns Type Description String Overrides DbDataReader.GetString(Int32) | Improve this Doc View Source GetValue(Int32) Declaration public override object GetValue(int i) Parameters Type Name Description Int32 i Returns Type Description Object Overrides DbDataReader.GetValue(Int32) | Improve this Doc View Source GetValues(Object[]) Declaration public override int GetValues(object[] values) Parameters Type Name Description Object [] values Returns Type Description Int32 Overrides DbDataReader.GetValues(Object[]) | Improve this Doc View Source IsDBNull(Int32) Declaration public override bool IsDBNull(int i) Parameters Type Name Description Int32 i Returns Type Description Boolean Overrides DbDataReader.IsDBNull(Int32) | Improve this Doc View Source NextResult() Declaration public override bool NextResult() Returns Type Description Boolean Overrides DbDataReader.NextResult() | Improve this Doc View Source Read() Declaration public override bool Read() Returns Type Description Boolean Overrides DbDataReader.Read() Implements IEnumerable IDataReader IDisposable IDataRecord Extension Methods ReflectionExtensions.GetListItemType(IEnumerable) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlFunction.html": {
    "href": "api/LinqToDB.SqlQuery.SqlFunction.html",
    "title": "Class SqlFunction | Linq To DB (aka linq2db)",
    "keywords": "Class SqlFunction Inheritance Object SqlFunction Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlFunction : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlFunction(Type, String, ISqlExpression[]) Declaration public SqlFunction(Type systemType, string name, params ISqlExpression[] parameters) Parameters Type Name Description Type systemType String name ISqlExpression [] parameters | Improve this Doc View Source SqlFunction(Type, String, Boolean, ISqlExpression[]) Declaration public SqlFunction(Type systemType, string name, bool isAggregate, params ISqlExpression[] parameters) Parameters Type Name Description Type systemType String name Boolean isAggregate ISqlExpression [] parameters | Improve this Doc View Source SqlFunction(Type, String, Boolean, Int32, ISqlExpression[]) Declaration public SqlFunction(Type systemType, string name, bool isAggregate, int precedence, params ISqlExpression[] parameters) Parameters Type Name Description Type systemType String name Boolean isAggregate Int32 precedence ISqlExpression [] parameters Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsAggregate Declaration public bool IsAggregate { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Parameters Declaration public ISqlExpression[] Parameters { get; } Property Value Type Description ISqlExpression [] | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source CreateAll(SelectQuery) Declaration public static SqlFunction CreateAll(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source CreateAny(SelectQuery) Declaration public static SqlFunction CreateAny(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source CreateCount(Type, ISqlTableSource) Declaration public static SqlFunction CreateCount(Type type, ISqlTableSource table) Parameters Type Name Description Type type ISqlTableSource table Returns Type Description SqlFunction | Improve this Doc View Source CreateExists(SelectQuery) Declaration public static SqlFunction CreateExists(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source CreateSome(SelectQuery) Declaration public static SqlFunction CreateSome(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> action) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > action Returns Type Description ISqlExpression | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlFromClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlFromClause.html",
    "title": "Class SqlFromClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlFromClause Inheritance Object ClauseBase SqlFromClause Implements IQueryElement ISqlExpressionWalkable Inherited Members ClauseBase.Select ClauseBase.From ClauseBase.Where ClauseBase.GroupBy ClauseBase.Having ClauseBase.OrderBy ClauseBase.End() ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlFromClause : ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Item[ISqlTableSource] Declaration public SqlTableSource this[ISqlTableSource table] { get; } Parameters Type Name Description ISqlTableSource table Property Value Type Description SqlTableSource | Improve this Doc View Source Item[ISqlTableSource, String] Declaration public SqlTableSource this[ISqlTableSource table, string alias] { get; } Parameters Type Name Description ISqlTableSource table String alias Property Value Type Description SqlTableSource | Improve this Doc View Source Tables Declaration public List<SqlTableSource> Tables { get; } Property Value Type Description List < SqlTableSource > Methods | Improve this Doc View Source FindTableSource(SqlTable) Declaration public ISqlTableSource FindTableSource(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlTableSource | Improve this Doc View Source IsChild(ISqlTableSource) Declaration public bool IsChild(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description Boolean | Improve this Doc View Source Table(ISqlTableSource, SqlFromClause.Join[]) Declaration public SqlFromClause Table(ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause | Improve this Doc View Source Table(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public SqlFromClause Table(ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Implements IQueryElement ISqlExpressionWalkable Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlFromClause.Join.html": {
    "href": "api/LinqToDB.SqlQuery.SqlFromClause.Join.html",
    "title": "Class SqlFromClause.Join | Linq To DB (aka linq2db)",
    "keywords": "Class SqlFromClause.Join Inheritance Object ConditionBase < SqlFromClause.Join , SqlFromClause.Join.Next > SqlFromClause.Join Inherited Members ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Search ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.GetNext() ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.SetOr(Boolean) ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Not ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Expr(ISqlExpression) ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Field(SqlField) ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.SubQuery(SelectQuery) ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Value(Object) ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Join : ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>, IConditionExpr<ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Expr_> Properties | Improve this Doc View Source JoinedTable Declaration public SqlJoinedTable JoinedTable { get; } Property Value Type Description SqlJoinedTable | Improve this Doc View Source Search Declaration protected override SqlSearchCondition Search { get; } Property Value Type Description SqlSearchCondition Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlFromClause.Join, LinqToDB.SqlQuery.SqlFromClause.Join.Next>.Search Methods | Improve this Doc View Source GetNext() Declaration protected override SqlFromClause.Join.Next GetNext() Returns Type Description SqlFromClause.Join.Next Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlFromClause.Join, LinqToDB.SqlQuery.SqlFromClause.Join.Next>.GetNext() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlFromClause.Join.Next.html": {
    "href": "api/LinqToDB.SqlQuery.SqlFromClause.Join.Next.html",
    "title": "Class SqlFromClause.Join.Next | Linq To DB (aka linq2db)",
    "keywords": "Class SqlFromClause.Join.Next Inheritance Object SqlFromClause.Join.Next Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Next Properties | Improve this Doc View Source And Declaration public SqlFromClause.Join And { get; } Property Value Type Description SqlFromClause.Join | Improve this Doc View Source Or Declaration public SqlFromClause.Join Or { get; } Property Value Type Description SqlFromClause.Join Operators | Improve this Doc View Source Implicit(SqlFromClause.Join.Next to SqlFromClause.Join) Declaration public static implicit operator SqlFromClause.Join(SqlFromClause.Join.Next next) Parameters Type Name Description SqlFromClause.Join.Next next Returns Type Description SqlFromClause.Join Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlField.html": {
    "href": "api/LinqToDB.SqlQuery.SqlField.html",
    "title": "Class SqlField | Linq To DB (aka linq2db)",
    "keywords": "Class SqlField Inheritance Object SqlField Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlField : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlField() Declaration public SqlField() | Improve this Doc View Source SqlField(SqlField) Declaration public SqlField(SqlField field) Parameters Type Name Description SqlField field Properties | Improve this Doc View Source Alias Declaration public string Alias { get; set; } Property Value Type Description String | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ColumnDescriptor Declaration public ColumnDescriptor ColumnDescriptor { get; set; } Property Value Type Description ColumnDescriptor | Improve this Doc View Source CreateFormat Declaration public string CreateFormat { get; set; } Property Value Type Description String | Improve this Doc View Source DataType Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source DbType Declaration public string DbType { get; set; } Property Value Type Description String | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsIdentity Declaration public bool IsIdentity { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsInsertable Declaration public bool IsInsertable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsPrimaryKey Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsUpdatable Declaration public bool IsUpdatable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Length Declaration public int? Length { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source PhysicalName Declaration public string PhysicalName { get; set; } Property Value Type Description String | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source Precision Declaration public int? Precision { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source PrimaryKeyOrder Declaration public int PrimaryKeyOrder { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Scale Declaration public int? Scale { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source SystemType Declaration public Type SystemType { get; set; } Property Value Type Description Type | Improve this Doc View Source Table Declaration public ISqlTableSource Table { get; set; } Property Value Type Description ISqlTableSource Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlExtensions.html": {
    "href": "api/LinqToDB.SqlQuery.SqlExtensions.html",
    "title": "Class SqlExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class SqlExtensions This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Inheritance Object SqlExtensions Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class SqlExtensions Methods | Improve this Doc View Source Clone<T>(T) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static T Clone<T>(this T cloneable) where T : ICloneableElement Parameters Type Name Description T cloneable Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Clone<T>(T, Predicate<ICloneableElement>) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static T Clone<T>(this T cloneable, Predicate<ICloneableElement> doClone) where T : ICloneableElement Parameters Type Name Description T cloneable Predicate < ICloneableElement > doClone Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source EnsureQuery(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SelectQuery EnsureQuery(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SelectQuery | Improve this Doc View Source GetIdentityField(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SqlField GetIdentityField(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlField | Improve this Doc View Source GetInsertClause(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SqlInsertClause GetInsertClause(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlInsertClause | Improve this Doc View Source GetUpdateClause(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SqlUpdateClause GetUpdateClause(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlUpdateClause | Improve this Doc View Source GetWithClause(SqlStatement) Declaration public static SqlWithClause GetWithClause(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlWithClause | Improve this Doc View Source IsInsert(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static bool IsInsert(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description Boolean | Improve this Doc View Source IsUpdate(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static bool IsUpdate(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description Boolean | Improve this Doc View Source NeedsIdentity(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static bool NeedsIdentity(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description Boolean | Improve this Doc View Source RequireInsertClause(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SqlInsertClause RequireInsertClause(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlInsertClause | Improve this Doc View Source RequireUpdateClause(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SqlUpdateClause RequireUpdateClause(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlUpdateClause"
  },
  "api/LinqToDB.SqlQuery.SqlExpression.html": {
    "href": "api/LinqToDB.SqlQuery.SqlExpression.html",
    "title": "Class SqlExpression | Linq To DB (aka linq2db)",
    "keywords": "Class SqlExpression Inheritance Object SqlExpression ObjectSqlExpression Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlExpression : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlExpression(String, ISqlExpression[]) Declaration public SqlExpression(string expr, params ISqlExpression[] parameters) Parameters Type Name Description String expr ISqlExpression [] parameters | Improve this Doc View Source SqlExpression(String, Int32, ISqlExpression[]) Declaration public SqlExpression(string expr, int precedence, params ISqlExpression[] parameters) Parameters Type Name Description String expr Int32 precedence ISqlExpression [] parameters | Improve this Doc View Source SqlExpression(Type, String, ISqlExpression[]) Declaration public SqlExpression(Type systemType, string expr, params ISqlExpression[] parameters) Parameters Type Name Description Type systemType String expr ISqlExpression [] parameters | Improve this Doc View Source SqlExpression(Type, String, Int32, ISqlExpression[]) Declaration public SqlExpression(Type systemType, string expr, int precedence, params ISqlExpression[] parameters) Parameters Type Name Description Type systemType String expr Int32 precedence ISqlExpression [] parameters | Improve this Doc View Source SqlExpression(Type, String, Int32, Boolean, ISqlExpression[]) Declaration public SqlExpression(Type systemType, string expr, int precedence, bool isAggregate, params ISqlExpression[] parameters) Parameters Type Name Description Type systemType String expr Int32 precedence Boolean isAggregate ISqlExpression [] parameters Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Expr Declaration public string Expr { get; } Property Value Type Description String | Improve this Doc View Source IsAggregate Declaration public bool IsAggregate { get; } Property Value Type Description Boolean | Improve this Doc View Source Parameters Declaration public ISqlExpression[] Parameters { get; } Property Value Type Description ISqlExpression [] | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean | Improve this Doc View Source NeedsEqual(IQueryElement) Declaration public static bool NeedsEqual(IQueryElement ex) Parameters Type Name Description IQueryElement ex Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlException.html": {
    "href": "api/LinqToDB.SqlQuery.SqlException.html",
    "title": "Class SqlException | Linq To DB (aka linq2db)",
    "keywords": "Class SqlException Inheritance Object Exception SqlException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source SqlException() Declaration public SqlException() | Improve this Doc View Source SqlException(Exception) Declaration public SqlException(Exception innerException) Parameters Type Name Description Exception innerException | Improve this Doc View Source SqlException(SerializationInfo, StreamingContext) Declaration protected SqlException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context | Improve this Doc View Source SqlException(String) Declaration public SqlException(string message) Parameters Type Name Description String message | Improve this Doc View Source SqlException(String, Exception) Declaration public SqlException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException | Improve this Doc View Source SqlException(String, Object[]) Declaration public SqlException(string message, params object[] args) Parameters Type Name Description String message Object [] args Implements ISerializable _Exception Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlDropTableStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlDropTableStatement.html",
    "title": "Class SqlDropTableStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlDropTableStatement Inheritance Object SqlStatement SqlDropTableStatement Implements IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlStatement.SqlText SqlStatement.Parameters SqlStatement.ProcessParameters(MappingSchema) SqlStatement.CollectParameters() SqlStatement.EnumClauses() SqlStatement.RemoveAlias(String) SqlStatement.GetAlias(String, String) SqlStatement.GetTempAliases(Int32, String) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlDropTableStatement : SqlStatement, IQueryElement, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description Boolean Overrides SqlStatement.IsParameterDependent | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source SelectQuery Declaration public override SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery Overrides SqlStatement.SelectQuery | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlStatement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatement.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Overrides SqlStatement.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source WalkQueries(Func<SelectQuery, SelectQuery>) Declaration public override void WalkQueries(Func<SelectQuery, SelectQuery> func) Parameters Type Name Description Func < SelectQuery , SelectQuery > func Overrides SqlStatement.WalkQueries(Func<SelectQuery, SelectQuery>) Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlDeleteStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlDeleteStatement.html",
    "title": "Class SqlDeleteStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlDeleteStatement Inheritance Object SqlStatement SqlStatementWithQueryBase SqlDeleteStatement Implements IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlStatementWithQueryBase.SelectQuery SqlStatementWithQueryBase.With SqlStatementWithQueryBase.GetTableSource(ISqlTableSource) SqlStatement.SqlText SqlStatement.Parameters SqlStatement.ProcessParameters(MappingSchema) SqlStatement.CollectParameters() SqlStatement.EnumClauses() SqlStatement.RemoveAlias(String) SqlStatement.GetAlias(String, String) SqlStatement.GetTempAliases(Int32, String) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlDeleteStatement : SqlStatementWithQueryBase, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlDeleteStatement() Declaration public SqlDeleteStatement() | Improve this Doc View Source SqlDeleteStatement(SelectQuery) Declaration public SqlDeleteStatement(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description Boolean Overrides SqlStatementWithQueryBase.IsParameterDependent | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable | Improve this Doc View Source Top Declaration public ISqlExpression Top { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlStatement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Overrides SqlStatement.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source WalkQueries(Func<SelectQuery, SelectQuery>) Declaration public override void WalkQueries(Func<SelectQuery, SelectQuery> func) Parameters Type Name Description Func < SelectQuery , SelectQuery > func Overrides SqlStatementWithQueryBase.WalkQueries(Func<SelectQuery, SelectQuery>) Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlDeleteClause2.html": {
    "href": "api/LinqToDB.SqlQuery.SqlDeleteClause2.html",
    "title": "Class SqlDeleteClause2 | Linq To DB (aka linq2db)",
    "keywords": "Class SqlDeleteClause2 Inheritance Object SqlDeleteClause2 Implements IQueryElement ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlDeleteClause2 : IQueryElement, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration [Obsolete] ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlDataType.html": {
    "href": "api/LinqToDB.SqlQuery.SqlDataType.html",
    "title": "Class SqlDataType | Linq To DB (aka linq2db)",
    "keywords": "Class SqlDataType Inheritance Object SqlDataType Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlDataType : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlDataType(DataType) Declaration public SqlDataType(DataType dbType) Parameters Type Name Description DataType dbType | Improve this Doc View Source SqlDataType(DataType, Nullable<Int32>) Declaration public SqlDataType(DataType dbType, int? length) Parameters Type Name Description DataType dbType Nullable < Int32 > length | Improve this Doc View Source SqlDataType(DataType, Nullable<Int32>, Nullable<Int32>) Declaration public SqlDataType(DataType dbType, int? precision, int? scale) Parameters Type Name Description DataType dbType Nullable < Int32 > precision Nullable < Int32 > scale | Improve this Doc View Source SqlDataType(DataType, Type) Declaration public SqlDataType(DataType dbType, Type type) Parameters Type Name Description DataType dbType Type type | Improve this Doc View Source SqlDataType(DataType, Type, Int32) Declaration public SqlDataType(DataType dbType, Type type, int length) Parameters Type Name Description DataType dbType Type type Int32 length | Improve this Doc View Source SqlDataType(DataType, Type, Int32, Int32) Declaration public SqlDataType(DataType dbType, Type type, int precision, int scale) Parameters Type Name Description DataType dbType Type type Int32 precision Int32 scale | Improve this Doc View Source SqlDataType(Type) Declaration public SqlDataType(Type type) Parameters Type Name Description Type type | Improve this Doc View Source SqlDataType(Type, Int32) Declaration public SqlDataType(Type type, int length) Parameters Type Name Description Type type Int32 length | Improve this Doc View Source SqlDataType(Type, Int32, Int32) Declaration public SqlDataType(Type type, int precision, int scale) Parameters Type Name Description Type type Int32 precision Int32 scale Fields | Improve this Doc View Source Boolean Declaration public static readonly SqlDataType Boolean Field Value Type Description SqlDataType | Improve this Doc View Source Byte Declaration public static readonly SqlDataType Byte Field Value Type Description SqlDataType | Improve this Doc View Source ByteArray Declaration public static readonly SqlDataType ByteArray Field Value Type Description SqlDataType | Improve this Doc View Source Char Declaration public static readonly SqlDataType Char Field Value Type Description SqlDataType | Improve this Doc View Source CharArray Declaration public static readonly SqlDataType CharArray Field Value Type Description SqlDataType | Improve this Doc View Source DateTime Declaration public static readonly SqlDataType DateTime Field Value Type Description SqlDataType | Improve this Doc View Source DateTimeOffset Declaration public static readonly SqlDataType DateTimeOffset Field Value Type Description SqlDataType | Improve this Doc View Source DbBinary Declaration public static readonly SqlDataType DbBinary Field Value Type Description SqlDataType | Improve this Doc View Source DbBinaryJson Declaration public static readonly SqlDataType DbBinaryJson Field Value Type Description SqlDataType | Improve this Doc View Source DbBitArray Declaration public static readonly SqlDataType DbBitArray Field Value Type Description SqlDataType | Improve this Doc View Source DbBoolean Declaration public static readonly SqlDataType DbBoolean Field Value Type Description SqlDataType | Improve this Doc View Source DbByte Declaration public static readonly SqlDataType DbByte Field Value Type Description SqlDataType | Improve this Doc View Source DbChar Declaration public static readonly SqlDataType DbChar Field Value Type Description SqlDataType | Improve this Doc View Source DbDate Declaration public static readonly SqlDataType DbDate Field Value Type Description SqlDataType | Improve this Doc View Source DbDateTime Declaration public static readonly SqlDataType DbDateTime Field Value Type Description SqlDataType | Improve this Doc View Source DbDateTime2 Declaration public static readonly SqlDataType DbDateTime2 Field Value Type Description SqlDataType | Improve this Doc View Source DbDateTimeOffset Declaration public static readonly SqlDataType DbDateTimeOffset Field Value Type Description SqlDataType | Improve this Doc View Source DbDecimal Declaration public static readonly SqlDataType DbDecimal Field Value Type Description SqlDataType | Improve this Doc View Source DbDictionary Declaration public static readonly SqlDataType DbDictionary Field Value Type Description SqlDataType | Improve this Doc View Source DbDouble Declaration public static readonly SqlDataType DbDouble Field Value Type Description SqlDataType | Improve this Doc View Source DbGuid Declaration public static readonly SqlDataType DbGuid Field Value Type Description SqlDataType | Improve this Doc View Source DbImage Declaration public static readonly SqlDataType DbImage Field Value Type Description SqlDataType | Improve this Doc View Source DbInt16 Declaration public static readonly SqlDataType DbInt16 Field Value Type Description SqlDataType | Improve this Doc View Source DbInt32 Declaration public static readonly SqlDataType DbInt32 Field Value Type Description SqlDataType | Improve this Doc View Source DbInt64 Declaration public static readonly SqlDataType DbInt64 Field Value Type Description SqlDataType | Improve this Doc View Source DbJson Declaration public static readonly SqlDataType DbJson Field Value Type Description SqlDataType | Improve this Doc View Source DbMoney Declaration public static readonly SqlDataType DbMoney Field Value Type Description SqlDataType | Improve this Doc View Source DbNChar Declaration public static readonly SqlDataType DbNChar Field Value Type Description SqlDataType | Improve this Doc View Source DbNText Declaration public static readonly SqlDataType DbNText Field Value Type Description SqlDataType | Improve this Doc View Source DbNVarChar Declaration public static readonly SqlDataType DbNVarChar Field Value Type Description SqlDataType | Improve this Doc View Source DbSByte Declaration public static readonly SqlDataType DbSByte Field Value Type Description SqlDataType | Improve this Doc View Source DbSingle Declaration public static readonly SqlDataType DbSingle Field Value Type Description SqlDataType | Improve this Doc View Source DbSmallDateTime Declaration public static readonly SqlDataType DbSmallDateTime Field Value Type Description SqlDataType | Improve this Doc View Source DbSmallMoney Declaration public static readonly SqlDataType DbSmallMoney Field Value Type Description SqlDataType | Improve this Doc View Source DbText Declaration public static readonly SqlDataType DbText Field Value Type Description SqlDataType | Improve this Doc View Source DbTime Declaration public static readonly SqlDataType DbTime Field Value Type Description SqlDataType | Improve this Doc View Source DbTimestamp Declaration public static readonly SqlDataType DbTimestamp Field Value Type Description SqlDataType | Improve this Doc View Source DbUdt Declaration public static readonly SqlDataType DbUdt Field Value Type Description SqlDataType | Improve this Doc View Source DbUInt16 Declaration public static readonly SqlDataType DbUInt16 Field Value Type Description SqlDataType | Improve this Doc View Source DbUInt32 Declaration public static readonly SqlDataType DbUInt32 Field Value Type Description SqlDataType | Improve this Doc View Source DbUInt64 Declaration public static readonly SqlDataType DbUInt64 Field Value Type Description SqlDataType | Improve this Doc View Source DbVarBinary Declaration public static readonly SqlDataType DbVarBinary Field Value Type Description SqlDataType | Improve this Doc View Source DbVarChar Declaration public static readonly SqlDataType DbVarChar Field Value Type Description SqlDataType | Improve this Doc View Source DbVariant Declaration public static readonly SqlDataType DbVariant Field Value Type Description SqlDataType | Improve this Doc View Source DbXml Declaration public static readonly SqlDataType DbXml Field Value Type Description SqlDataType | Improve this Doc View Source Decimal Declaration public static readonly SqlDataType Decimal Field Value Type Description SqlDataType | Improve this Doc View Source Double Declaration public static readonly SqlDataType Double Field Value Type Description SqlDataType | Improve this Doc View Source Guid Declaration public static readonly SqlDataType Guid Field Value Type Description SqlDataType | Improve this Doc View Source Int16 Declaration public static readonly SqlDataType Int16 Field Value Type Description SqlDataType | Improve this Doc View Source Int32 Declaration public static readonly SqlDataType Int32 Field Value Type Description SqlDataType | Improve this Doc View Source LinqBinary Declaration public static readonly SqlDataType LinqBinary Field Value Type Description SqlDataType | Improve this Doc View Source SByte Declaration public static readonly SqlDataType SByte Field Value Type Description SqlDataType | Improve this Doc View Source Single Declaration public static readonly SqlDataType Single Field Value Type Description SqlDataType | Improve this Doc View Source SqlBinary Declaration public static readonly SqlDataType SqlBinary Field Value Type Description SqlDataType | Improve this Doc View Source SqlBoolean Declaration public static readonly SqlDataType SqlBoolean Field Value Type Description SqlDataType | Improve this Doc View Source SqlByte Declaration public static readonly SqlDataType SqlByte Field Value Type Description SqlDataType | Improve this Doc View Source SqlBytes Declaration public static readonly SqlDataType SqlBytes Field Value Type Description SqlDataType | Improve this Doc View Source SqlChars Declaration public static readonly SqlDataType SqlChars Field Value Type Description SqlDataType | Improve this Doc View Source SqlDateTime Declaration public static readonly SqlDataType SqlDateTime Field Value Type Description SqlDataType | Improve this Doc View Source SqlDecimal Declaration public static readonly SqlDataType SqlDecimal Field Value Type Description SqlDataType | Improve this Doc View Source SqlDouble Declaration public static readonly SqlDataType SqlDouble Field Value Type Description SqlDataType | Improve this Doc View Source SqlGuid Declaration public static readonly SqlDataType SqlGuid Field Value Type Description SqlDataType | Improve this Doc View Source SqlInt16 Declaration public static readonly SqlDataType SqlInt16 Field Value Type Description SqlDataType | Improve this Doc View Source SqlInt32 Declaration public static readonly SqlDataType SqlInt32 Field Value Type Description SqlDataType | Improve this Doc View Source SqlInt64 Declaration public static readonly SqlDataType SqlInt64 Field Value Type Description SqlDataType | Improve this Doc View Source SqlMoney Declaration public static readonly SqlDataType SqlMoney Field Value Type Description SqlDataType | Improve this Doc View Source SqlSingle Declaration public static readonly SqlDataType SqlSingle Field Value Type Description SqlDataType | Improve this Doc View Source SqlString Declaration public static readonly SqlDataType SqlString Field Value Type Description SqlDataType | Improve this Doc View Source SqlXml Declaration public static readonly SqlDataType SqlXml Field Value Type Description SqlDataType | Improve this Doc View Source String Declaration public static readonly SqlDataType String Field Value Type Description SqlDataType | Improve this Doc View Source TimeSpan Declaration public static readonly SqlDataType TimeSpan Field Value Type Description SqlDataType | Improve this Doc View Source UInt16 Declaration public static readonly SqlDataType UInt16 Field Value Type Description SqlDataType | Improve this Doc View Source UInt32 Declaration public static readonly SqlDataType UInt32 Field Value Type Description SqlDataType | Improve this Doc View Source UInt64 Declaration public static readonly SqlDataType UInt64 Field Value Type Description SqlDataType | Improve this Doc View Source Undefined Declaration public static readonly SqlDataType Undefined Field Value Type Description SqlDataType Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source DataType Declaration public DataType DataType { get; } Property Value Type Description DataType | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsCharDataType Declaration public bool IsCharDataType { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Declaration public int? Length { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source Precision Declaration public int? Precision { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source Scale Declaration public int? Scale { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type | Improve this Doc View Source Type Declaration public Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean | Improve this Doc View Source GetDataType(DataType) Declaration public static SqlDataType GetDataType(DataType type) Parameters Type Name Description DataType type Returns Type Description SqlDataType | Improve this Doc View Source GetDataType(Type) Declaration public static SqlDataType GetDataType(Type type) Parameters Type Name Description Type type Returns Type Description SqlDataType | Improve this Doc View Source GetMaxDisplaySize(DataType) Declaration public static int GetMaxDisplaySize(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description Int32 | Improve this Doc View Source GetMaxLength(DataType) Declaration public static int GetMaxLength(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description Int32 | Improve this Doc View Source GetMaxPrecision(DataType) Declaration public static int GetMaxPrecision(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description Int32 | Improve this Doc View Source GetMaxScale(DataType) Declaration public static int GetMaxScale(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description Int32 | Improve this Doc View Source TypeCanBeNull(Type) Declaration public static bool TypeCanBeNull(Type type) Parameters Type Name Description Type type Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlCteTable.html": {
    "href": "api/LinqToDB.SqlQuery.SqlCteTable.html",
    "title": "Class SqlCteTable | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCteTable Inheritance Object SqlTable SqlCteTable Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Inherited Members SqlTable.ToString() SqlTable.Item[String] SqlTable.Alias SqlTable.Database SqlTable.Schema SqlTable.ObjectType SqlTable.TableArguments SqlTable.Fields SqlTable.SequenceAttributes SqlTable.All SqlTable.GetIdentityField() SqlTable.Add(SqlField) SqlTable.AddRange(IEnumerable<SqlField>) SqlTable.SourceID SqlTable.GetKeys(Boolean) SqlTable.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlTable.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) SqlTable.ISqlExpression.CanBeNull SqlTable.ISqlExpression.Precedence SqlTable.ISqlExpression.SystemType SqlTable.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) SqlTable.IEquatable<ISqlExpression>.Equals(ISqlExpression) SqlTable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlCteTable : SqlTable, ISqlTableSource, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlCteTable(MappingSchema, CteClause) Declaration public SqlCteTable(MappingSchema mappingSchema, CteClause cte) Parameters Type Name Description MappingSchema mappingSchema CteClause cte | Improve this Doc View Source SqlCteTable(SqlCteTable, IEnumerable<SqlField>, CteClause) Declaration public SqlCteTable(SqlCteTable table, IEnumerable<SqlField> fields, CteClause cte) Parameters Type Name Description SqlCteTable table IEnumerable < SqlField > fields CteClause cte Properties | Improve this Doc View Source Cte Declaration public CteClause Cte { get; } Property Value Type Description CteClause | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlTable.ElementType | Improve this Doc View Source Name Declaration public override string Name { get; set; } Property Value Type Description String Overrides SqlTable.Name | Improve this Doc View Source PhysicalName Declaration public override string PhysicalName { get; set; } Property Value Type Description String Overrides SqlTable.PhysicalName | Improve this Doc View Source SqlTableType Declaration public override SqlTableType SqlTableType { get; } Property Value Type Description SqlTableType Overrides SqlTable.SqlTableType | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description String Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods Extensions.InnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, String, SqlFromClause.Join[]) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlCreateTableStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlCreateTableStatement.html",
    "title": "Class SqlCreateTableStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCreateTableStatement Inheritance Object SqlStatement SqlCreateTableStatement Implements IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlStatement.SqlText SqlStatement.Parameters SqlStatement.ProcessParameters(MappingSchema) SqlStatement.CollectParameters() SqlStatement.EnumClauses() SqlStatement.RemoveAlias(String) SqlStatement.GetAlias(String, String) SqlStatement.GetTempAliases(Int32, String) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlCreateTableStatement : SqlStatement, IQueryElement, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source DefaultNullable Declaration public DefaultNullable DefaultNullable { get; set; } Property Value Type Description DefaultNullable | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description Boolean Overrides SqlStatement.IsParameterDependent | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source SelectQuery Declaration public override SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery Overrides SqlStatement.SelectQuery | Improve this Doc View Source StatementFooter Declaration public string StatementFooter { get; set; } Property Value Type Description String | Improve this Doc View Source StatementHeader Declaration public string StatementHeader { get; set; } Property Value Type Description String | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlStatement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatement.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Overrides SqlStatement.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source WalkQueries(Func<SelectQuery, SelectQuery>) Declaration public override void WalkQueries(Func<SelectQuery, SelectQuery> func) Parameters Type Name Description Func < SelectQuery , SelectQuery > func Overrides SqlStatement.WalkQueries(Func<SelectQuery, SelectQuery>) Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlCondition.html": {
    "href": "api/LinqToDB.SqlQuery.SqlCondition.html",
    "title": "Class SqlCondition | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCondition Inheritance Object SqlCondition Implements IQueryElement ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlCondition : IQueryElement, ICloneableElement Constructors | Improve this Doc View Source SqlCondition(Boolean, ISqlPredicate) Declaration public SqlCondition(bool isNot, ISqlPredicate predicate) Parameters Type Name Description Boolean isNot ISqlPredicate predicate | Improve this Doc View Source SqlCondition(Boolean, ISqlPredicate, Boolean) Declaration public SqlCondition(bool isNot, ISqlPredicate predicate, bool isOr) Parameters Type Name Description Boolean isNot ISqlPredicate predicate Boolean isOr Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsNot Declaration public bool IsNot { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsOr Declaration public bool IsOr { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source Predicate Declaration public ISqlPredicate Predicate { get; set; } Property Value Type Description ISqlPredicate Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements IQueryElement ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlColumn.html": {
    "href": "api/LinqToDB.SqlQuery.SqlColumn.html",
    "title": "Class SqlColumn | Linq To DB (aka linq2db)",
    "keywords": "Class SqlColumn Inheritance Object SqlColumn Implements IEquatable < SqlColumn > ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlColumn : IEquatable<SqlColumn>, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlColumn(SelectQuery, ISqlExpression) Declaration public SqlColumn(SelectQuery builder, ISqlExpression expression) Parameters Type Name Description SelectQuery builder ISqlExpression expression | Improve this Doc View Source SqlColumn(SelectQuery, ISqlExpression, String) Declaration public SqlColumn(SelectQuery parent, ISqlExpression expression, string alias) Parameters Type Name Description SelectQuery parent ISqlExpression expression String alias Properties | Improve this Doc View Source Alias Declaration public string Alias { get; set; } Property Value Type Description String | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source Parent Declaration public SelectQuery Parent { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type | Improve this Doc View Source UnderlyingColumn Declaration public SqlColumn UnderlyingColumn { get; } Property Value Type Description SqlColumn Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean | Improve this Doc View Source Equals(SqlColumn) Declaration public bool Equals(SqlColumn other) Parameters Type Name Description SqlColumn other Returns Type Description Boolean | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements IEquatable<T> ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ISqlExpressionWalkable.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlExpressionWalkable.html",
    "title": "Interface ISqlExpressionWalkable | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlExpressionWalkable Methods | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ISqlExpression.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlExpression.html",
    "title": "Interface ISqlExpression | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlExpression Inherited Members IQueryElement.ElementType IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) IEquatable<ISqlExpression>.Equals(ISqlExpression) ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlExpression : IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source CanBeNull Declaration bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source Precedence Declaration int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source SystemType Declaration Type SystemType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.RemoteDataContextBase.html": {
    "href": "api/LinqToDB.ServiceModel.RemoteDataContextBase.html",
    "title": "Class RemoteDataContextBase | Linq To DB (aka linq2db)",
    "keywords": "Class RemoteDataContextBase Inheritance Object RemoteDataContextBase ServiceModelDataContext SoapDataContext Implements IDataContext IDisposable IEntityServices Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public abstract class RemoteDataContextBase : IDataContext, IDisposable, IEntityServices Properties | Improve this Doc View Source CloseAfterUse Declaration public bool CloseAfterUse { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source ContextIDPrefix Declaration protected abstract string ContextIDPrefix { get; } Property Value Type Description String | Improve this Doc View Source Disposed Declaration protected bool Disposed { get; } Property Value Type Description Boolean | Improve this Doc View Source GetSqlOptimizer Declaration public Func<ISqlOptimizer> GetSqlOptimizer { get; } Property Value Type Description Func < ISqlOptimizer > | Improve this Doc View Source InlineParameters Declaration public bool InlineParameters { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; set; } Property Value Type Description MappingSchema | Improve this Doc View Source NextQueryHints Declaration public List<string> NextQueryHints { get; } Property Value Type Description List < String > | Improve this Doc View Source OnEntityCreated Occurs when a new entity is created. Declaration public Action<EntityCreatedEventArgs> OnEntityCreated { get; set; } Property Value Type Description Action < EntityCreatedEventArgs > | Improve this Doc View Source QueryHints Declaration public List<string> QueryHints { get; } Property Value Type Description List < String > | Improve this Doc View Source SqlOptimizerType Declaration public virtual Type SqlOptimizerType { get; set; } Property Value Type Description Type | Improve this Doc View Source SqlProviderType Declaration public virtual Type SqlProviderType { get; set; } Property Value Type Description Type Methods | Improve this Doc View Source BeginBatch() Declaration public void BeginBatch() | Improve this Doc View Source Clone() Declaration protected abstract IDataContext Clone() Returns Type Description IDataContext | Improve this Doc View Source CommitBatch() Declaration public void CommitBatch() | Improve this Doc View Source CommitBatchAsync() Declaration public Task CommitBatchAsync() Returns Type Description Task | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetClient() Declaration protected abstract ILinqClient GetClient() Returns Type Description ILinqClient | Improve this Doc View Source ThrowOnDisposed() Declaration protected void ThrowOnDisposed() Events | Improve this Doc View Source OnClosing Declaration public event EventHandler OnClosing Event Type Type Description EventHandler Explicit Interface Implementations | Improve this Doc View Source IDataContext.Clone(Boolean) Declaration IDataContext IDataContext.Clone(bool forNestedQuery) Parameters Type Name Description Boolean forNestedQuery Returns Type Description IDataContext | Improve this Doc View Source IDataContext.Close() Declaration void IDataContext.Close() | Improve this Doc View Source IDataContext.ContextID Declaration string IDataContext.ContextID { get; } Returns Type Description String | Improve this Doc View Source IDataContext.CreateSqlProvider Declaration Func<ISqlBuilder> IDataContext.CreateSqlProvider { get; } Returns Type Description Func < ISqlBuilder > | Improve this Doc View Source IDataContext.DataReaderType Declaration Type IDataContext.DataReaderType { get; } Returns Type Description Type | Improve this Doc View Source IDataContext.GetQueryRunner(Query, Int32, Expression, Object[]) Declaration IQueryRunner IDataContext.GetQueryRunner(Query query, int queryNumber, Expression expression, object[] parameters) Parameters Type Name Description Query query Int32 queryNumber Expression expression Object [] parameters Returns Type Description IQueryRunner | Improve this Doc View Source IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration Expression IDataContext.GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema IDataReader reader Int32 idx Expression readerExpression Type toType Returns Type Description Expression | Improve this Doc View Source IDataContext.IsDBNullAllowed(IDataReader, Int32) Declaration bool? IDataContext.IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader Int32 idx Returns Type Description Nullable < Boolean > | Improve this Doc View Source IDataContext.SqlProviderFlags Declaration SqlProviderFlags IDataContext.SqlProviderFlags { get; } Returns Type Description SqlProviderFlags Implements IDataContext IDisposable IEntityServices Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertOrReplace<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplaceAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt32Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt64Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithDecimalIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt32IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt64IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithDecimalIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Update<T>(IDataContext, T, String, String, String) DataExtensions.UpdateAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Delete<T>(IDataContext, T, String, String, String) DataExtensions.DeleteAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaultNullable) DataExtensions.CreateTableAsync<T>(IDataContext, String, String, String, String, String, DefaultNullable, CancellationToken) DataExtensions.DropTable<T>(IDataContext, String, String, String, Boolean) DataExtensions.DropTableAsync<T>(IDataContext, String, String, String, Boolean, CancellationToken) DataExtensions.GetCte<T>(IDataContext, Func<IQueryable<T>, IQueryable<T>>, String) DataExtensions.GetCte<T>(IDataContext, String, Func<IQueryable<T>, IQueryable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IEnumerable<T>, BulkCopyOptions, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, String, IEnumerable<T>, BulkCopyOptions, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, Action<ITable<T>>) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.SelectAsync<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>)"
  },
  "api/LinqToDB.ServiceModel.LinqServiceResult.html": {
    "href": "api/LinqToDB.ServiceModel.LinqServiceResult.html",
    "title": "Class LinqServiceResult | Linq To DB (aka linq2db)",
    "keywords": "Class LinqServiceResult Inheritance Object LinqServiceResult Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class LinqServiceResult Properties | Improve this Doc View Source Data Declaration public List<string[]> Data { get; set; } Property Value Type Description List < String []> | Improve this Doc View Source FieldCount Declaration public int FieldCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source FieldNames Declaration public string[] FieldNames { get; set; } Property Value Type Description String [] | Improve this Doc View Source FieldTypes Declaration public Type[] FieldTypes { get; set; } Property Value Type Description Type [] | Improve this Doc View Source QueryID Declaration public Guid QueryID { get; set; } Property Value Type Description Guid | Improve this Doc View Source RowCount Declaration public int RowCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source VaryingTypes Declaration public Type[] VaryingTypes { get; set; } Property Value Type Description Type [] Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.LinqServiceQuery.html": {
    "href": "api/LinqToDB.ServiceModel.LinqServiceQuery.html",
    "title": "Class LinqServiceQuery | Linq To DB (aka linq2db)",
    "keywords": "Class LinqServiceQuery Inheritance Object LinqServiceQuery Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class LinqServiceQuery Properties | Improve this Doc View Source Parameters Declaration public SqlParameter[] Parameters { get; set; } Property Value Type Description SqlParameter [] | Improve this Doc View Source QueryHints Declaration public List<string> QueryHints { get; set; } Property Value Type Description List < String > | Improve this Doc View Source Statement Declaration public SqlStatement Statement { get; set; } Property Value Type Description SqlStatement Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.LinqServiceInfo.html": {
    "href": "api/LinqToDB.ServiceModel.LinqServiceInfo.html",
    "title": "Class LinqServiceInfo | Linq To DB (aka linq2db)",
    "keywords": "Class LinqServiceInfo Inheritance Object LinqServiceInfo Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class LinqServiceInfo Properties | Improve this Doc View Source ConfigurationList Declaration public string[] ConfigurationList { get; set; } Property Value Type Description String [] | Improve this Doc View Source MappingSchemaType Declaration public string MappingSchemaType { get; set; } Property Value Type Description String | Improve this Doc View Source SqlBuilderType Declaration public string SqlBuilderType { get; set; } Property Value Type Description String | Improve this Doc View Source SqlOptimizerType Declaration public string SqlOptimizerType { get; set; } Property Value Type Description String | Improve this Doc View Source SqlProviderFlags Declaration public SqlProviderFlags SqlProviderFlags { get; set; } Property Value Type Description SqlProviderFlags Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.LinqService.html": {
    "href": "api/LinqToDB.ServiceModel.LinqService.html",
    "title": "Class LinqService | Linq To DB (aka linq2db)",
    "keywords": "Class LinqService Inheritance Object LinqService Implements ILinqService Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Multiple)] [WebService(Namespace = \"http://tempuri.org/\")] [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)] public class LinqService : ILinqService Fields | Improve this Doc View Source TypeResolver Declaration public static Func<string, Type> TypeResolver Field Value Type Description Func < String , Type > Properties | Improve this Doc View Source AllowUpdates Declaration public bool AllowUpdates { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source CreateDataContext(String) Declaration public virtual DataConnection CreateDataContext(string configuration) Parameters Type Name Description String configuration Returns Type Description DataConnection | Improve this Doc View Source ExecuteBatch(String, String) Declaration [WebMethod] public int ExecuteBatch(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Int32 | Improve this Doc View Source ExecuteNonQuery(String, String) Declaration [WebMethod] public int ExecuteNonQuery(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Int32 | Improve this Doc View Source ExecuteReader(String, String) Declaration [WebMethod] public string ExecuteReader(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description String | Improve this Doc View Source ExecuteScalar(String, String) Declaration [WebMethod] public object ExecuteScalar(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Object | Improve this Doc View Source GetInfo(String) Declaration [WebMethod] public virtual LinqServiceInfo GetInfo(string configuration) Parameters Type Name Description String configuration Returns Type Description LinqServiceInfo | Improve this Doc View Source HandleException(Exception) Declaration protected virtual void HandleException(Exception exception) Parameters Type Name Description Exception exception | Improve this Doc View Source ValidateQuery(LinqServiceQuery) Declaration protected virtual void ValidateQuery(LinqServiceQuery query) Parameters Type Name Description LinqServiceQuery query Implements ILinqService Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.ILinqSoapClient.html": {
    "href": "api/LinqToDB.ServiceModel.ILinqSoapClient.html",
    "title": "Interface ILinqSoapClient | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqSoapClient Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax [ServiceContract] public interface ILinqSoapClient Methods | Improve this Doc View Source ExecuteBatch(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteBatch\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteBatchResponse\")] int ExecuteBatch(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Int32 | Improve this Doc View Source ExecuteBatchAsync(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteBatch\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteBatchResponse\")] Task<int> ExecuteBatchAsync(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Task < Int32 > | Improve this Doc View Source ExecuteNonQuery(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteNonQuery\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteNonQueryResponse\")] int ExecuteNonQuery(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Int32 | Improve this Doc View Source ExecuteNonQueryAsync(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteNonQuery\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteNonQueryResponse\")] Task<int> ExecuteNonQueryAsync(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Task < Int32 > | Improve this Doc View Source ExecuteReader(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteReader\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteReaderResponse\")] string ExecuteReader(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description String | Improve this Doc View Source ExecuteReaderAsync(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteReader\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteReaderResponse\")] Task<string> ExecuteReaderAsync(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Task < String > | Improve this Doc View Source ExecuteScalar(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteScalar\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteScalarResponse\")] object ExecuteScalar(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Object | Improve this Doc View Source ExecuteScalarAsync(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteScalar\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteScalarResponse\")] Task<object> ExecuteScalarAsync(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Task < Object > | Improve this Doc View Source GetInfo(String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/GetInfo\", ReplyAction = \"http://tempuri.org/ILinqService/GetInfoResponse\")] LinqServiceInfo GetInfo(string configuration) Parameters Type Name Description String configuration Returns Type Description LinqServiceInfo | Improve this Doc View Source GetInfoAsync(String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/GetInfo\", ReplyAction = \"http://tempuri.org/ILinqService/GetInfoResponse\")] Task<LinqServiceInfo> GetInfoAsync(string configuration) Parameters Type Name Description String configuration Returns Type Description Task < LinqServiceInfo > Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.ILinqService.html": {
    "href": "api/LinqToDB.ServiceModel.ILinqService.html",
    "title": "Interface ILinqService | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqService Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax [ServiceContract] public interface ILinqService Methods | Improve this Doc View Source ExecuteBatch(String, String) Declaration [OperationContract] int ExecuteBatch(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Int32 | Improve this Doc View Source ExecuteNonQuery(String, String) Declaration [OperationContract] int ExecuteNonQuery(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Int32 | Improve this Doc View Source ExecuteReader(String, String) Declaration [OperationContract] string ExecuteReader(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description String | Improve this Doc View Source ExecuteScalar(String, String) Declaration [OperationContract] object ExecuteScalar(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Object | Improve this Doc View Source GetInfo(String) Declaration [OperationContract] LinqServiceInfo GetInfo(string configuration) Parameters Type Name Description String configuration Returns Type Description LinqServiceInfo Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.ILinqClient.html": {
    "href": "api/LinqToDB.ServiceModel.ILinqClient.html",
    "title": "Interface ILinqClient | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqClient Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax [ServiceContract] [ServiceKnownType(typeof(LinqServiceQuery))] [ServiceKnownType(typeof(LinqServiceResult))] public interface ILinqClient Methods | Improve this Doc View Source ExecuteBatch(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteBatch\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteBatchResponse\")] int ExecuteBatch(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Int32 | Improve this Doc View Source ExecuteBatchAsync(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteBatch\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteBatchResponse\")] Task<int> ExecuteBatchAsync(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Task < Int32 > | Improve this Doc View Source ExecuteNonQuery(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteNonQuery\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteNonQueryResponse\")] int ExecuteNonQuery(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Int32 | Improve this Doc View Source ExecuteNonQueryAsync(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteNonQuery\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteNonQueryResponse\")] Task<int> ExecuteNonQueryAsync(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Task < Int32 > | Improve this Doc View Source ExecuteReader(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteReader\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteReaderResponse\")] string ExecuteReader(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description String | Improve this Doc View Source ExecuteReaderAsync(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteReader\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteReaderResponse\")] Task<string> ExecuteReaderAsync(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Task < String > | Improve this Doc View Source ExecuteScalar(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteScalar\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteScalarResponse\")] object ExecuteScalar(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Object | Improve this Doc View Source ExecuteScalarAsync(String, String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/ExecuteScalar\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteScalarResponse\")] Task<object> ExecuteScalarAsync(string configuration, string queryData) Parameters Type Name Description String configuration String queryData Returns Type Description Task < Object > | Improve this Doc View Source GetInfo(String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/GetInfo\", ReplyAction = \"http://tempuri.org/ILinqService/GetInfoResponse\")] LinqServiceInfo GetInfo(string configuration) Parameters Type Name Description String configuration Returns Type Description LinqServiceInfo | Improve this Doc View Source GetInfoAsync(String) Declaration [OperationContract(Action = \"http://tempuri.org/ILinqService/GetInfo\", ReplyAction = \"http://tempuri.org/ILinqService/GetInfoResponse\")] Task<LinqServiceInfo> GetInfoAsync(string configuration) Parameters Type Name Description String configuration Returns Type Description Task < LinqServiceInfo > Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.DataService-1.html": {
    "href": "api/LinqToDB.ServiceModel.DataService-1.html",
    "title": "Class DataService<T> | Linq To DB (aka linq2db)",
    "keywords": "Class DataService<T> Inheritance Object DataService <T> DataService<T> Implements IRequestHandler IServiceProvider Inherited Members DataService<T>.AttachHost(IDataServiceHost) DataService<T>.ProcessRequestForMessage(Stream) DataService<T>.ProcessRequest() DataService<T>.CreateDataSource() DataService<T>.HandleException(HandleExceptionArgs) DataService<T>.OnStartProcessingRequest(ProcessRequestArgs) DataService<T>.ProcessingPipeline DataService<T>.CurrentDataSource Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class DataService<T> : DataService<T>, IRequestHandler, IServiceProvider where T : IDataContext Type Parameters Name Description T Constructors | Improve this Doc View Source DataService() Declaration public DataService() | Improve this Doc View Source DataService(MappingSchema) Declaration public DataService(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Methods | Improve this Doc View Source GetService(Type) Declaration public object GetService(Type serviceType) Parameters Type Name Description Type serviceType Returns Type Description Object Implements IRequestHandler IServiceProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.Async.html": {
    "href": "api/LinqToDB.ServiceModel.Async.html",
    "title": "Namespace LinqToDB.ServiceModel.Async | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.ServiceModel.Async Interfaces ILinqService ILinqSoapService"
  },
  "api/LinqToDB.ServiceModel.Async.ILinqSoapService.html": {
    "href": "api/LinqToDB.ServiceModel.Async.ILinqSoapService.html",
    "title": "Interface ILinqSoapService | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqSoapService Namespace : LinqToDB.ServiceModel.Async Assembly : linq2db.dll Syntax [ServiceContract] [ServiceKnownType(typeof(LinqServiceQuery))] [ServiceKnownType(typeof(LinqServiceResult))] public interface ILinqSoapService Methods | Improve this Doc View Source BeginExecuteBatch(String, String, AsyncCallback, Object) Declaration [OperationContract(AsyncPattern = true, Action = \"http://tempuri.org/ExecuteBatch\", ReplyAction = \"http://tempuri.org/ExecuteBatchResponse\")] IAsyncResult BeginExecuteBatch(string configuration, string queryData, AsyncCallback callback, object asyncState) Parameters Type Name Description String configuration String queryData AsyncCallback callback Object asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteNonQuery(String, String, AsyncCallback, Object) Declaration [OperationContract(AsyncPattern = true, Action = \"http://tempuri.org/ExecuteNonQuery\", ReplyAction = \"http://tempuri.org/ExecuteNonQueryResponse\")] IAsyncResult BeginExecuteNonQuery(string configuration, string queryData, AsyncCallback callback, object asyncState) Parameters Type Name Description String configuration String queryData AsyncCallback callback Object asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteReader(String, String, AsyncCallback, Object) Declaration [OperationContract(AsyncPattern = true, Action = \"http://tempuri.org/ExecuteReader\", ReplyAction = \"http://tempuri.org/ExecuteReaderResponse\")] IAsyncResult BeginExecuteReader(string configuration, string queryData, AsyncCallback callback, object asyncState) Parameters Type Name Description String configuration String queryData AsyncCallback callback Object asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteScalar(String, String, AsyncCallback, Object) Declaration [OperationContract(AsyncPattern = true, Action = \"http://tempuri.org/ExecuteScalar\", ReplyAction = \"http://tempuri.org/ExecuteScalarResponse\")] IAsyncResult BeginExecuteScalar(string configuration, string queryData, AsyncCallback callback, object asyncState) Parameters Type Name Description String configuration String queryData AsyncCallback callback Object asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginGetInfo(String, AsyncCallback, Object) Declaration [OperationContract(AsyncPattern = true, Action = \"http://tempuri.org/GetInfo\", ReplyAction = \"http://tempuri.org/GetInfo\")] IAsyncResult BeginGetInfo(string configuration, AsyncCallback callback, object asyncState) Parameters Type Name Description String configuration AsyncCallback callback Object asyncState Returns Type Description IAsyncResult | Improve this Doc View Source EndExecuteBatch(IAsyncResult) Declaration int EndExecuteBatch(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description Int32 | Improve this Doc View Source EndExecuteNonQuery(IAsyncResult) Declaration int EndExecuteNonQuery(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description Int32 | Improve this Doc View Source EndExecuteReader(IAsyncResult) Declaration string EndExecuteReader(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description String | Improve this Doc View Source EndExecuteScalar(IAsyncResult) Declaration object EndExecuteScalar(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description Object | Improve this Doc View Source EndGetInfo(IAsyncResult) Declaration LinqServiceInfo EndGetInfo(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description LinqServiceInfo Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.Async.ILinqService.html": {
    "href": "api/LinqToDB.ServiceModel.Async.ILinqService.html",
    "title": "Interface ILinqService | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqService Namespace : LinqToDB.ServiceModel.Async Assembly : linq2db.dll Syntax [ServiceContract] [ServiceKnownType(typeof(LinqServiceQuery))] [ServiceKnownType(typeof(LinqServiceResult))] public interface ILinqService Methods | Improve this Doc View Source BeginExecuteBatch(String, String, AsyncCallback, Object) Declaration [OperationContract(AsyncPattern = true, Action = \"http://tempuri.org/ILinqService/ExecuteBatch\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteBatchResponse\")] IAsyncResult BeginExecuteBatch(string configuration, string queryData, AsyncCallback callback, object asyncState) Parameters Type Name Description String configuration String queryData AsyncCallback callback Object asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteNonQuery(String, String, AsyncCallback, Object) Declaration [OperationContract(AsyncPattern = true, Action = \"http://tempuri.org/ILinqService/ExecuteNonQuery\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteNonQueryResponse\")] IAsyncResult BeginExecuteNonQuery(string configuration, string queryData, AsyncCallback callback, object asyncState) Parameters Type Name Description String configuration String queryData AsyncCallback callback Object asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteReader(String, String, AsyncCallback, Object) Declaration [OperationContract(AsyncPattern = true, Action = \"http://tempuri.org/ILinqService/ExecuteReader\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteReaderResponse\")] IAsyncResult BeginExecuteReader(string configuration, string queryData, AsyncCallback callback, object asyncState) Parameters Type Name Description String configuration String queryData AsyncCallback callback Object asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteScalar(String, String, AsyncCallback, Object) Declaration [OperationContract(AsyncPattern = true, Action = \"http://tempuri.org/ILinqService/ExecuteScalar\", ReplyAction = \"http://tempuri.org/ILinqService/ExecuteScalarResponse\")] IAsyncResult BeginExecuteScalar(string configuration, string queryData, AsyncCallback callback, object asyncState) Parameters Type Name Description String configuration String queryData AsyncCallback callback Object asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginGetInfo(String, AsyncCallback, Object) Declaration [OperationContract(AsyncPattern = true, Action = \"http://tempuri.org/ILinqService/GetInfo\", ReplyAction = \"http://tempuri.org/ILinqService/GetSqlInfoResponse\")] IAsyncResult BeginGetInfo(string configuration, AsyncCallback callback, object asyncState) Parameters Type Name Description String configuration AsyncCallback callback Object asyncState Returns Type Description IAsyncResult | Improve this Doc View Source EndExecuteBatch(IAsyncResult) Declaration int EndExecuteBatch(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description Int32 | Improve this Doc View Source EndExecuteNonQuery(IAsyncResult) Declaration int EndExecuteNonQuery(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description Int32 | Improve this Doc View Source EndExecuteReader(IAsyncResult) Declaration string EndExecuteReader(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description String | Improve this Doc View Source EndExecuteScalar(IAsyncResult) Declaration object EndExecuteScalar(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description Object | Improve this Doc View Source EndGetInfo(IAsyncResult) Declaration LinqServiceInfo EndGetInfo(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description LinqServiceInfo Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.html": {
    "href": "api/LinqToDB.SchemaProvider.html",
    "title": "Namespace LinqToDB.SchemaProvider | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.SchemaProvider Classes ColumnInfo ColumnSchema Describes table column. DatabaseSchema DataTypeInfo Database data type descriptor. Implements subset of DataTypes schema collection: https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/common-schema-collections . ForeignKeyInfo ForeignKeySchema GetSchemaOptions Defines schema load options. ParameterSchema Describes database procedure or function parameter. PrimaryKeyInfo ProcedureInfo Database procedure or function description. ProcedureParameterInfo Database procedure or function parameter description. ProcedureSchema Describes database procedure or function. SchemaProviderBase TableInfo TableSchema Describes table-like objects such as tables, views, procedure or function results. Interfaces ISchemaProvider Database schema provider. Enums AssociationType"
  },
  "api/LinqToDB.SchemaProvider.TableSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.TableSchema.html",
    "title": "Class TableSchema | Linq To DB (aka linq2db)",
    "keywords": "Class TableSchema Describes table-like objects such as tables, views, procedure or function results. Inheritance Object TableSchema ViewWithParametersTableSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class TableSchema Properties | Improve this Doc View Source CatalogName Gets table database (catalog) name. Declaration public string CatalogName { get; set; } Property Value Type Description String | Improve this Doc View Source Columns Gets list of table columns. Declaration public List<ColumnSchema> Columns { get; set; } Property Value Type Description List < ColumnSchema > | Improve this Doc View Source Description Gets table description. Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source ForeignKeys Gets list of table foreign keys. Declaration public List<ForeignKeySchema> ForeignKeys { get; set; } Property Value Type Description List < ForeignKeySchema > | Improve this Doc View Source ID Gets unique table identifier, based on name, schema and database names. Declaration public string ID { get; set; } Property Value Type Description String | Improve this Doc View Source IsDefaultSchema Gets flag indicating that table defined with default owner/schema or not. Declaration public bool IsDefaultSchema { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsProcedureResult Gets flag indicating that table describes procedure or function result set. Declaration public bool IsProcedureResult { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsProviderSpecific Gets flag indicating that it is not a user-defined table. Declaration public bool IsProviderSpecific { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsView Gets flag indicating that table describes view. Declaration public bool IsView { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SchemaName Gets table owner/schema name. Declaration public string SchemaName { get; set; } Property Value Type Description String | Improve this Doc View Source TableName Gets database table name. Declaration public string TableName { get; set; } Property Value Type Description String | Improve this Doc View Source TypeName Gets C# friendly table name. Declaration public string TypeName { get; set; } Property Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.TableInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.TableInfo.html",
    "title": "Class TableInfo | Linq To DB (aka linq2db)",
    "keywords": "Class TableInfo Inheritance Object TableInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class TableInfo Fields | Improve this Doc View Source CatalogName Declaration public string CatalogName Field Value Type Description String | Improve this Doc View Source Description Declaration public string Description Field Value Type Description String | Improve this Doc View Source IsDefaultSchema Declaration public bool IsDefaultSchema Field Value Type Description Boolean | Improve this Doc View Source IsProviderSpecific Declaration public bool IsProviderSpecific Field Value Type Description Boolean | Improve this Doc View Source IsView Declaration public bool IsView Field Value Type Description Boolean | Improve this Doc View Source SchemaName Declaration public string SchemaName Field Value Type Description String | Improve this Doc View Source TableID Declaration public string TableID Field Value Type Description String | Improve this Doc View Source TableName Declaration public string TableName Field Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.SchemaProviderBase.html": {
    "href": "api/LinqToDB.SchemaProvider.SchemaProviderBase.html",
    "title": "Class SchemaProviderBase | Linq To DB (aka linq2db)",
    "keywords": "Class SchemaProviderBase Inheritance Object SchemaProviderBase Implements ISchemaProvider Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public abstract class SchemaProviderBase : ISchemaProvider Fields | Improve this Doc View Source DataTypes Declaration protected List<DataTypeInfo> DataTypes Field Value Type Description List < DataTypeInfo > | Improve this Doc View Source DataTypesDic Declaration protected Dictionary<string, DataTypeInfo> DataTypesDic Field Value Type Description Dictionary < String , DataTypeInfo > | Improve this Doc View Source DataTypesSchema Declaration protected DataTable DataTypesSchema Field Value Type Description DataTable | Improve this Doc View Source ExcludedCatalogs Declaration protected HashSet<string> ExcludedCatalogs Field Value Type Description HashSet < String > | Improve this Doc View Source ExcludedSchemas Declaration protected HashSet<string> ExcludedSchemas Field Value Type Description HashSet < String > | Improve this Doc View Source GenerateChar1AsString Declaration protected bool GenerateChar1AsString Field Value Type Description Boolean | Improve this Doc View Source IncludedCatalogs Declaration protected HashSet<string> IncludedCatalogs Field Value Type Description HashSet < String > | Improve this Doc View Source IncludedSchemas Declaration protected HashSet<string> IncludedSchemas Field Value Type Description HashSet < String > Properties | Improve this Doc View Source GetProcedureSchemaExecutesProcedure If true, provider doesn't support schema-only procedure execution and will execute procedure for real. Declaration protected virtual bool GetProcedureSchemaExecutesProcedure { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema, String) Builds table function call command. Declaration protected virtual string BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema procedure, string commandText) Parameters Type Name Description ProcedureSchema procedure String commandText Returns Type Description String | Improve this Doc View Source GetColumns(DataConnection) Declaration protected abstract List<ColumnInfo> GetColumns(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description List < ColumnInfo > | Improve this Doc View Source GetDatabaseName(DbConnection) Declaration protected virtual string GetDatabaseName(DbConnection dbConnection) Parameters Type Name Description DbConnection dbConnection Returns Type Description String | Improve this Doc View Source GetDataSourceName(DbConnection) Declaration protected virtual string GetDataSourceName(DbConnection dbConnection) Parameters Type Name Description DbConnection dbConnection Returns Type Description String | Improve this Doc View Source GetDataType(String) Declaration protected DataTypeInfo GetDataType(string typeName) Parameters Type Name Description String typeName Returns Type Description DataTypeInfo | Improve this Doc View Source GetDataType(String, String, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>) Declaration protected abstract DataType GetDataType(string dataType, string columnType, long? length, int? prec, int? scale) Parameters Type Name Description String dataType String columnType Nullable < Int64 > length Nullable < Int32 > prec Nullable < Int32 > scale Returns Type Description DataType | Improve this Doc View Source GetDataTypes(DataConnection) Returns list of database data types. Declaration protected virtual List<DataTypeInfo> GetDataTypes(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Database connection instance. Returns Type Description List < DataTypeInfo > List of database data types. | Improve this Doc View Source GetDbType(String, DataTypeInfo, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>) Declaration protected virtual string GetDbType(string columnType, DataTypeInfo dataType, long? length, int? prec, int? scale) Parameters Type Name Description String columnType DataTypeInfo dataType Nullable < Int64 > length Nullable < Int32 > prec Nullable < Int32 > scale Returns Type Description String | Improve this Doc View Source GetForeignKeys(DataConnection) Declaration protected abstract List<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description List < ForeignKeyInfo > | Improve this Doc View Source GetHashSet(String[], IEqualityComparer<String>) Declaration protected static HashSet<string> GetHashSet(string[] data, IEqualityComparer<string> comparer) Parameters Type Name Description String [] data IEqualityComparer < String > comparer Returns Type Description HashSet < String > | Improve this Doc View Source GetPrimaryKeys(DataConnection) Declaration protected abstract List<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description List < PrimaryKeyInfo > | Improve this Doc View Source GetProcedureParameters(DataConnection) Declaration protected virtual List<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description List < ProcedureParameterInfo > | Improve this Doc View Source GetProcedureResultColumns(DataTable) Declaration protected virtual List<ColumnSchema> GetProcedureResultColumns(DataTable resultTable) Parameters Type Name Description DataTable resultTable Returns Type Description List < ColumnSchema > | Improve this Doc View Source GetProcedures(DataConnection) Declaration protected virtual List<ProcedureInfo> GetProcedures(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description List < ProcedureInfo > | Improve this Doc View Source GetProcedureSchema(DataConnection, String, CommandType, DataParameter[]) Declaration protected virtual DataTable GetProcedureSchema(DataConnection dataConnection, string commandText, CommandType commandType, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection String commandText CommandType commandType DataParameter [] parameters Returns Type Description DataTable | Improve this Doc View Source GetProviderSpecificProcedures(DataConnection) Declaration protected virtual List<ProcedureSchema> GetProviderSpecificProcedures(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description List < ProcedureSchema > | Improve this Doc View Source GetProviderSpecificTables(DataConnection) Declaration protected virtual List<TableSchema> GetProviderSpecificTables(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description List < TableSchema > | Improve this Doc View Source GetProviderSpecificType(String) Declaration protected virtual string GetProviderSpecificType(string dataType) Parameters Type Name Description String dataType Returns Type Description String | Improve this Doc View Source GetProviderSpecificTypeNamespace() Declaration protected abstract string GetProviderSpecificTypeNamespace() Returns Type Description String | Improve this Doc View Source GetSchema(DataConnection, GetSchemaOptions) Declaration public virtual DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options = null) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options Returns Type Description DatabaseSchema | Improve this Doc View Source GetSystemType(String, String, DataTypeInfo, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>) Declaration protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, long? length, int? precision, int? scale) Parameters Type Name Description String dataType String columnType DataTypeInfo dataTypeInfo Nullable < Int64 > length Nullable < Int32 > precision Nullable < Int32 > scale Returns Type Description Type | Improve this Doc View Source GetTables(DataConnection) Declaration protected abstract List<TableInfo> GetTables(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description List < TableInfo > | Improve this Doc View Source InitProvider(DataConnection) Declaration protected virtual void InitProvider(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection | Improve this Doc View Source LoadProcedureTableSchema(DataConnection, ProcedureSchema, String, List<TableSchema>) Declaration protected virtual void LoadProcedureTableSchema(DataConnection dataConnection, ProcedureSchema procedure, string commandText, List<TableSchema> tables) Parameters Type Name Description DataConnection dataConnection ProcedureSchema procedure String commandText List < TableSchema > tables | Improve this Doc View Source ProcessSchema(DatabaseSchema, GetSchemaOptions) Declaration protected virtual DatabaseSchema ProcessSchema(DatabaseSchema databaseSchema, GetSchemaOptions schemaOptions) Parameters Type Name Description DatabaseSchema databaseSchema GetSchemaOptions schemaOptions Returns Type Description DatabaseSchema | Improve this Doc View Source ToTypeName(Type, Boolean) Declaration public static string ToTypeName(Type type, bool isNullable) Parameters Type Name Description Type type Boolean isNullable Returns Type Description String | Improve this Doc View Source ToValidName(String) Declaration public static string ToValidName(string name) Parameters Type Name Description String name Returns Type Description String Implements ISchemaProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Reflection.TypeAccessor-1.html": {
    "href": "api/LinqToDB.Reflection.TypeAccessor-1.html",
    "title": "Class TypeAccessor<T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeAccessor<T> Inheritance Object TypeAccessor TypeAccessor<T> Inherited Members TypeAccessor.AddMember(MemberAccessor) TypeAccessor.CreateInstanceEx() TypeAccessor.ObjectFactory TypeAccessor.Members TypeAccessor.Item[String] TypeAccessor.Item[Int32] TypeAccessor.GetAccessor(Type) TypeAccessor.GetAccessor<T>() Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public class TypeAccessor<T> : TypeAccessor Type Parameters Name Description T Properties | Improve this Doc View Source DynamicColumnsStoreAccessor Declaration public override MemberAccessor DynamicColumnsStoreAccessor { get; } Property Value Type Description MemberAccessor Overrides TypeAccessor.DynamicColumnsStoreAccessor | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description Type Overrides TypeAccessor.Type Methods | Improve this Doc View Source Create() Declaration public T Create() Returns Type Description T | Improve this Doc View Source CreateInstance() Declaration public override object CreateInstance() Returns Type Description Object Overrides TypeAccessor.CreateInstance() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Reflection.ObjectFactoryAttribute.html": {
    "href": "api/LinqToDB.Reflection.ObjectFactoryAttribute.html",
    "title": "Class ObjectFactoryAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ObjectFactoryAttribute Inheritance Object Attribute ObjectFactoryAttribute Implements _Attribute Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface)] public class ObjectFactoryAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ObjectFactoryAttribute(Type) Declaration public ObjectFactoryAttribute(Type type) Parameters Type Name Description Type type Properties | Improve this Doc View Source ObjectFactory Declaration public IObjectFactory ObjectFactory { get; } Property Value Type Description IObjectFactory Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Reflection.MemberAccessor.html": {
    "href": "api/LinqToDB.Reflection.MemberAccessor.html",
    "title": "Class MemberAccessor | Linq To DB (aka linq2db)",
    "keywords": "Class MemberAccessor Inheritance Object MemberAccessor Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public class MemberAccessor Constructors | Improve this Doc View Source MemberAccessor(TypeAccessor, MemberInfo) Declaration public MemberAccessor(TypeAccessor typeAccessor, MemberInfo memberInfo) Parameters Type Name Description TypeAccessor typeAccessor MemberInfo memberInfo Properties | Improve this Doc View Source Getter Declaration public Func<object, object> Getter { get; } Property Value Type Description Func < Object , Object > | Improve this Doc View Source GetterExpression Declaration public LambdaExpression GetterExpression { get; } Property Value Type Description LambdaExpression | Improve this Doc View Source HasGetter Declaration public bool HasGetter { get; } Property Value Type Description Boolean | Improve this Doc View Source HasSetter Declaration public bool HasSetter { get; } Property Value Type Description Boolean | Improve this Doc View Source IsComplex Declaration public bool IsComplex { get; } Property Value Type Description Boolean | Improve this Doc View Source MemberInfo Declaration public MemberInfo MemberInfo { get; } Property Value Type Description MemberInfo | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Setter Declaration public Action<object, object> Setter { get; } Property Value Type Description Action < Object , Object > | Improve this Doc View Source SetterExpression Declaration public LambdaExpression SetterExpression { get; } Property Value Type Description LambdaExpression | Improve this Doc View Source Type Declaration public Type Type { get; } Property Value Type Description Type | Improve this Doc View Source TypeAccessor Declaration public TypeAccessor TypeAccessor { get; } Property Value Type Description TypeAccessor Methods | Improve this Doc View Source GetAttribute<T>() Declaration public T GetAttribute<T>() where T : Attribute Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetAttributes() Declaration public object[] GetAttributes() Returns Type Description Object [] | Improve this Doc View Source GetAttributes<T>() Declaration public T[] GetAttributes<T>() where T : Attribute Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetTypeAttributes<T>() Declaration public T[] GetTypeAttributes<T>() where T : Attribute Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetValue(Object) Declaration public virtual object GetValue(object o) Parameters Type Name Description Object o Returns Type Description Object | Improve this Doc View Source SetValue(Object, Object) Declaration public virtual void SetValue(object o, object value) Parameters Type Name Description Object o Object value Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Reflection.IObjectFactory.html": {
    "href": "api/LinqToDB.Reflection.IObjectFactory.html",
    "title": "Interface IObjectFactory | Linq To DB (aka linq2db)",
    "keywords": "Interface IObjectFactory Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public interface IObjectFactory Methods | Improve this Doc View Source CreateInstance(TypeAccessor) Declaration object CreateInstance(TypeAccessor typeAccessor) Parameters Type Name Description TypeAccessor typeAccessor Returns Type Description Object Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ProviderName.html": {
    "href": "api/LinqToDB.ProviderName.html",
    "title": "Class ProviderName | Linq To DB (aka linq2db)",
    "keywords": "Class ProviderName Default names for providers. Inheritance Object ProviderName Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class ProviderName Fields | Improve this Doc View Source Access Microsoft Access provider. Used as configuration name for Access mapping schema AccessMappingSchema . Declaration public const string Access = \"Access\" Field Value Type Description String | Improve this Doc View Source DB2 IBM DB2 default provider (DB2 LUW). Used as configuration name for both DB2 base mapping schema DB2MappingSchema . Declaration public const string DB2 = \"DB2\" Field Value Type Description String | Improve this Doc View Source DB2LUW IBM DB2 LUW provider. Used as configuration name for DB2 LUW mapping schema DB2LUWMappingSchema . Declaration public const string DB2LUW = \"DB2.LUW\" Field Value Type Description String | Improve this Doc View Source DB2zOS IBM DB2 for z/OS provider. Used as configuration name for DB2 z/OS mapping schema DB2zOSMappingSchema . Declaration public const string DB2zOS = \"DB2.z/OS\" Field Value Type Description String | Improve this Doc View Source Firebird Firebird provider. Used as configuration name for Firebird mapping schema FirebirdMappingSchema . Declaration public const string Firebird = \"Firebird\" Field Value Type Description String | Improve this Doc View Source Informix Informix provider. Used as configuration name for Informix mapping schema InformixMappingSchema . Declaration public const string Informix = \"Informix\" Field Value Type Description String | Improve this Doc View Source MySql MySql provider. Used as configuration name for MySql mapping schema MySqlMappingSchema . Declaration public const string MySql = \"MySql\" Field Value Type Description String | Improve this Doc View Source Oracle Oracle ODP.NET autodetected provider (native or managed). Used as configuration name for Oracle base mapping schema OracleMappingSchema . Declaration public const string Oracle = \"Oracle\" Field Value Type Description String | Improve this Doc View Source OracleManaged Oracle ODP.NET managed provider. Used as configuration name for Oracle managed provider mapping schema OracleMappingSchema.ManagedMappingSchema . Declaration public const string OracleManaged = \"Oracle.Managed\" Field Value Type Description String | Improve this Doc View Source OracleNative Oracle ODP.NET native provider. Used as configuration name for Oracle native provider mapping schema OracleMappingSchema.NativeMappingSchema . Declaration public const string OracleNative = \"Oracle.Native\" Field Value Type Description String | Improve this Doc View Source PostgreSQL PostgreSQL 9.2- data provider. Used as configuration name for PostgreSQL mapping schema PostgreSQLMappingSchema . Declaration public const string PostgreSQL = \"PostgreSQL\" Field Value Type Description String | Improve this Doc View Source PostgreSQL92 PostgreSQL 9.2- data provider. Declaration public const string PostgreSQL92 = \"PostgreSQL.9.2\" Field Value Type Description String | Improve this Doc View Source PostgreSQL93 PostgreSQL 9.3+ data provider. Declaration public const string PostgreSQL93 = \"PostgreSQL.9.3\" Field Value Type Description String | Improve this Doc View Source PostgreSQL95 PostgreSQL 9.5+ data provider. Declaration public const string PostgreSQL95 = \"PostgreSQL.9.5\" Field Value Type Description String | Improve this Doc View Source SapHana SAP HANA provider. Used as configuration name for SAP HANA mapping schema SapHanaMappingSchema . Declaration public const string SapHana = \"SapHana\" Field Value Type Description String | Improve this Doc View Source SqlCe Microsoft SQL Server Compact Edition provider. Used as configuration name for SQL CE mapping schema SqlCeMappingSchema . Declaration public const string SqlCe = \"SqlCe\" Field Value Type Description String | Improve this Doc View Source SQLite SQLite provider. Used as configuration name for SQLite mapping schema SQLiteMappingSchema . Declaration public const string SQLite = \"SQLite\" Field Value Type Description String | Improve this Doc View Source SQLiteClassic System.Data.Sqlite provider. Declaration public const string SQLiteClassic = \"SQLite.Classic\" Field Value Type Description String | Improve this Doc View Source SQLiteMS Microsoft.Data.Sqlite provider. Declaration public const string SQLiteMS = \"SQLite.MS\" Field Value Type Description String | Improve this Doc View Source SqlServer Microsoft SQL Server default provider (SQL Server 2008). Used as configuration name for SQL Server base mapping schema SqlServerMappingSchema . Declaration public const string SqlServer = \"SqlServer\" Field Value Type Description String | Improve this Doc View Source SqlServer2000 Microsoft SQL Server 2000 provider. Used as configuration name for SQL Server 2000 mapping schema SqlServer2000MappingSchema . Declaration public const string SqlServer2000 = \"SqlServer.2000\" Field Value Type Description String | Improve this Doc View Source SqlServer2005 Microsoft SQL Server 2005 provider. Used as configuration name for SQL Server 2005 mapping schema SqlServer2005MappingSchema . Declaration public const string SqlServer2005 = \"SqlServer.2005\" Field Value Type Description String | Improve this Doc View Source SqlServer2008 Microsoft SQL Server 2008 provider. Used as configuration name for SQL Server 2008 mapping schema SqlServer2008MappingSchema . Declaration public const string SqlServer2008 = \"SqlServer.2008\" Field Value Type Description String | Improve this Doc View Source SqlServer2012 Microsoft SQL Server 2012 provider. Used as configuration name for SQL Server 2012 mapping schema SqlServer2012MappingSchema . Declaration public const string SqlServer2012 = \"SqlServer.2012\" Field Value Type Description String | Improve this Doc View Source SqlServer2014 Microsoft SQL Server 2012 provider. Declaration public const string SqlServer2014 = \"SqlServer.2014\" Field Value Type Description String | Improve this Doc View Source Sybase Native SAP/Sybase ASE provider. Used as configuration name for Sybase ASE mapping schema SybaseMappingSchema.NativeMappingSchema . Declaration public const string Sybase = \"Sybase\" Field Value Type Description String | Improve this Doc View Source SybaseManaged Managed Sybase/SAP ASE provider from DataAction . Used as configuration name for Sybase ASE mapping schema SybaseMappingSchema.ManagedMappingSchema . Declaration public const string SybaseManaged = \"Sybase.Managed\" Field Value Type Description String"
  },
  "api/LinqToDB.Metadata.html": {
    "href": "api/LinqToDB.Metadata.html",
    "title": "Namespace LinqToDB.Metadata | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Metadata Classes AttributeReader FluentMetadataReader MetadataException Defines the base class for the namespace exceptions. MetadataReader Aggregation metadata reader, that just delegates all calls to nested readers. SystemDataLinqAttributeReader SystemDataSqlServerAttributeReader XmlAttributeReader Interfaces IMetadataReader"
  },
  "api/LinqToDB.Metadata.XmlAttributeReader.html": {
    "href": "api/LinqToDB.Metadata.XmlAttributeReader.html",
    "title": "Class XmlAttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class XmlAttributeReader Inheritance Object XmlAttributeReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class XmlAttributeReader : IMetadataReader Constructors | Improve this Doc View Source XmlAttributeReader(Stream) Declaration public XmlAttributeReader(Stream xmlDocStream) Parameters Type Name Description Stream xmlDocStream | Improve this Doc View Source XmlAttributeReader(String) Declaration public XmlAttributeReader(string xmlFile) Parameters Type Name Description String xmlFile | Improve this Doc View Source XmlAttributeReader(String, Assembly) Declaration public XmlAttributeReader(string xmlFile, Assembly assembly) Parameters Type Name Description String xmlFile Assembly assembly Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type Returns Type Description MemberInfo [] Implements IMetadataReader Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.SystemDataSqlServerAttributeReader.html": {
    "href": "api/LinqToDB.Metadata.SystemDataSqlServerAttributeReader.html",
    "title": "Class SystemDataSqlServerAttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class SystemDataSqlServerAttributeReader Inheritance Object SystemDataSqlServerAttributeReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class SystemDataSqlServerAttributeReader : IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit) where T : Attribute Parameters Type Name Description Type type Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type Returns Type Description MemberInfo [] Implements IMetadataReader Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.SystemDataLinqAttributeReader.html": {
    "href": "api/LinqToDB.Metadata.SystemDataLinqAttributeReader.html",
    "title": "Class SystemDataLinqAttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class SystemDataLinqAttributeReader Inheritance Object SystemDataLinqAttributeReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class SystemDataLinqAttributeReader : IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit) where T : Attribute Parameters Type Name Description Type type Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type Returns Type Description MemberInfo [] Implements IMetadataReader Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.MetadataReader.html": {
    "href": "api/LinqToDB.Metadata.MetadataReader.html",
    "title": "Class MetadataReader | Linq To DB (aka linq2db)",
    "keywords": "Class MetadataReader Aggregation metadata reader, that just delegates all calls to nested readers. Inheritance Object MetadataReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class MetadataReader : IMetadataReader Constructors | Improve this Doc View Source MetadataReader(IMetadataReader[]) Declaration public MetadataReader(params IMetadataReader[] readers) Parameters Type Name Description IMetadataReader [] readers Fields | Improve this Doc View Source Default Declaration public static MetadataReader Default Field Value Type Description MetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit) where T : Attribute Parameters Type Name Description Type type Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type Returns Type Description MemberInfo [] Implements IMetadataReader Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.MetadataException.html": {
    "href": "api/LinqToDB.Metadata.MetadataException.html",
    "title": "Class MetadataException | Linq To DB (aka linq2db)",
    "keywords": "Class MetadataException Defines the base class for the namespace exceptions. Inheritance Object Exception MetadataException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax [Serializable] public class MetadataException : Exception, ISerializable, _Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source MetadataException() Initializes a new instance of the MetadataException class. Declaration public MetadataException() Remarks This constructor initializes the Message property of the new instance such as \"A Build Type exception has occurred.\" | Improve this Doc View Source MetadataException(Exception) Initializes a new instance of the MetadataException class with the specified InnerException property. Declaration public MetadataException(Exception innerException) Parameters Type Name Description Exception innerException The InnerException, if any, that threw the current exception. See Also InnerException | Improve this Doc View Source MetadataException(SerializationInfo, StreamingContext) Initializes a new instance of the MetadataException class with serialized data. Declaration protected MetadataException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source MetadataException(String) Initializes a new instance of the MetadataException class with the specified error message. Declaration public MetadataException(string message) Parameters Type Name Description String message The message to display to the client when the exception is thrown. See Also Message | Improve this Doc View Source MetadataException(String, Exception) Initializes a new instance of the MetadataException class with the specified error message and InnerException property. Declaration public MetadataException(string message, Exception innerException) Parameters Type Name Description String message The message to display to the client when the exception is thrown. Exception innerException The InnerException, if any, that threw the current exception. See Also Message InnerException Implements ISerializable _Exception Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.IMetadataReader.html": {
    "href": "api/LinqToDB.Metadata.IMetadataReader.html",
    "title": "Interface IMetadataReader | Linq To DB (aka linq2db)",
    "keywords": "Interface IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public interface IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration T[] GetAttributes<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Gets the dynamic columns defined on given type. Declaration MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type The type. Returns Type Description MemberInfo [] All dynamic columns defined on given type. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.FluentMetadataReader.html": {
    "href": "api/LinqToDB.Metadata.FluentMetadataReader.html",
    "title": "Class FluentMetadataReader | Linq To DB (aka linq2db)",
    "keywords": "Class FluentMetadataReader Inheritance Object FluentMetadataReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class FluentMetadataReader : IMetadataReader Methods | Improve this Doc View Source AddAttribute(MemberInfo, Attribute) Declaration public void AddAttribute(MemberInfo memberInfo, Attribute attribute) Parameters Type Name Description MemberInfo memberInfo Attribute attribute | Improve this Doc View Source AddAttribute(Type, Attribute) Declaration public void AddAttribute(Type type, Attribute attribute) Parameters Type Name Description Type type Attribute attribute | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type Returns Type Description MemberInfo [] Implements IMetadataReader Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.AttributeReader.html": {
    "href": "api/LinqToDB.Metadata.AttributeReader.html",
    "title": "Class AttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class AttributeReader Inheritance Object AttributeReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class AttributeReader : IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type Returns Type Description MemberInfo [] Implements IMetadataReader Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.SqlInfo.html": {
    "href": "api/LinqToDB.Linq.Builder.SqlInfo.html",
    "title": "Class SqlInfo | Linq To DB (aka linq2db)",
    "keywords": "Class SqlInfo Inheritance Object SqlInfo Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class SqlInfo Constructors | Improve this Doc View Source SqlInfo() Declaration public SqlInfo() | Improve this Doc View Source SqlInfo(IEnumerable<MemberInfo>) Declaration public SqlInfo(IEnumerable<MemberInfo> mi) Parameters Type Name Description IEnumerable < MemberInfo > mi | Improve this Doc View Source SqlInfo(MemberInfo) Declaration public SqlInfo(MemberInfo mi) Parameters Type Name Description MemberInfo mi Fields | Improve this Doc View Source Index Declaration public int Index Field Value Type Description Int32 | Improve this Doc View Source Members Declaration public readonly List<MemberInfo> Members Field Value Type Description List < MemberInfo > | Improve this Doc View Source Query Declaration public SelectQuery Query Field Value Type Description SelectQuery | Improve this Doc View Source Sql Declaration public ISqlExpression Sql Field Value Type Description ISqlExpression Methods | Improve this Doc View Source Clone() Declaration public SqlInfo Clone() Returns Type Description SqlInfo | Improve this Doc View Source Clone(MemberInfo) Declaration public SqlInfo Clone(MemberInfo mi) Parameters Type Name Description MemberInfo mi Returns Type Description SqlInfo | Improve this Doc View Source CompareLastMember(SqlInfo) Declaration public bool CompareLastMember(SqlInfo info) Parameters Type Name Description SqlInfo info Returns Type Description Boolean | Improve this Doc View Source CompareMembers(SqlInfo) Declaration public bool CompareMembers(SqlInfo info) Parameters Type Name Description SqlInfo info Returns Type Description Boolean Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.SequenceConvertPath.html": {
    "href": "api/LinqToDB.Linq.Builder.SequenceConvertPath.html",
    "title": "Class SequenceConvertPath | Linq To DB (aka linq2db)",
    "keywords": "Class SequenceConvertPath Inheritance Object SequenceConvertPath Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class SequenceConvertPath Fields | Improve this Doc View Source Expr Declaration public Expression Expr Field Value Type Description Expression | Improve this Doc View Source Level Declaration public int Level Field Value Type Description Int32 | Improve this Doc View Source Path Declaration public Expression Path Field Value Type Description Expression Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.IMergeable-2.html": {
    "href": "api/LinqToDB.IMergeable-2.html",
    "title": "Interface IMergeable<TTarget, TSource> | Linq To DB (aka linq2db)",
    "keywords": "Interface IMergeable<TTarget, TSource> Merge command builder that have target table, source, match (ON) condition and at least one operation configured. You can add more operations to this type of builder or execute command. Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IMergeable<TTarget, TSource> : IMergeableSource<TTarget, TSource> Type Parameters Name Description TTarget Target record type. TSource Source record type. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.IExtensionsAdapter.html": {
    "href": "api/LinqToDB.IExtensionsAdapter.html",
    "title": "Interface IExtensionsAdapter | Linq To DB (aka linq2db)",
    "keywords": "Interface IExtensionsAdapter Interface to override default implementation of LINQ To DB async operations. Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IExtensionsAdapter Methods | Improve this Doc View Source AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<bool> AllAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task < Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<bool> AnyAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task < Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<bool> AnyAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync(IQueryable<Decimal>, CancellationToken) Declaration Task<decimal> AverageAsync(IQueryable<decimal> source, CancellationToken token) Parameters Type Name Description IQueryable < Decimal > source CancellationToken token Returns Type Description Task < Decimal > | Improve this Doc View Source AverageAsync(IQueryable<Double>, CancellationToken) Declaration Task<double> AverageAsync(IQueryable<double> source, CancellationToken token) Parameters Type Name Description IQueryable < Double > source CancellationToken token Returns Type Description Task < Double > | Improve this Doc View Source AverageAsync(IQueryable<Int32>, CancellationToken) Declaration Task<double> AverageAsync(IQueryable<int> source, CancellationToken token) Parameters Type Name Description IQueryable < Int32 > source CancellationToken token Returns Type Description Task < Double > | Improve this Doc View Source AverageAsync(IQueryable<Int64>, CancellationToken) Declaration Task<double> AverageAsync(IQueryable<long> source, CancellationToken token) Parameters Type Name Description IQueryable < Int64 > source CancellationToken token Returns Type Description Task < Double > | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration Task<decimal? > AverageAsync(IQueryable<decimal? > source, CancellationToken token) Parameters Type Name Description IQueryable < Nullable < Decimal >> source CancellationToken token Returns Type Description Task < Nullable < Decimal >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration Task<double? > AverageAsync(IQueryable<double? > source, CancellationToken token) Parameters Type Name Description IQueryable < Nullable < Double >> source CancellationToken token Returns Type Description Task < Nullable < Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration Task<double? > AverageAsync(IQueryable<int? > source, CancellationToken token) Parameters Type Name Description IQueryable < Nullable < Int32 >> source CancellationToken token Returns Type Description Task < Nullable < Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration Task<double? > AverageAsync(IQueryable<long? > source, CancellationToken token) Parameters Type Name Description IQueryable < Nullable < Int64 >> source CancellationToken token Returns Type Description Task < Nullable < Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration Task<float? > AverageAsync(IQueryable<float? > source, CancellationToken token) Parameters Type Name Description IQueryable < Nullable < Single >> source CancellationToken token Returns Type Description Task < Nullable < Single >> | Improve this Doc View Source AverageAsync(IQueryable<Single>, CancellationToken) Declaration Task<float> AverageAsync(IQueryable<float> source, CancellationToken token) Parameters Type Name Description IQueryable < Single > source CancellationToken token Returns Type Description Task < Single > | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration Task<decimal> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Decimal >> selector CancellationToken token Returns Type Description Task < Decimal > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Double >> selector CancellationToken token Returns Type Description Task < Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Int32 >> selector CancellationToken token Returns Type Description Task < Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Int64 >> selector CancellationToken token Returns Type Description Task < Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration Task<decimal? > AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal? >> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Decimal >>> selector CancellationToken token Returns Type Description Task < Nullable < Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration Task<double? > AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double? >> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Double >>> selector CancellationToken token Returns Type Description Task < Nullable < Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration Task<double? > AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int? >> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Int32 >>> selector CancellationToken token Returns Type Description Task < Nullable < Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration Task<double? > AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long? >> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Int64 >>> selector CancellationToken token Returns Type Description Task < Nullable < Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration Task<float? > AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float? >> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Single >>> selector CancellationToken token Returns Type Description Task < Nullable < Single >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration Task<float> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Single >> selector CancellationToken token Returns Type Description Task < Single > Type Parameters Name Description TSource | Improve this Doc View Source ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken) Declaration Task<bool> ContainsAsync<TSource>(IQueryable<TSource> source, TSource item, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source TSource item CancellationToken token Returns Type Description Task < Boolean > Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<int> CountAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<int> CountAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<TSource> FirstAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> FirstAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<TSource> FirstOrDefaultAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> FirstOrDefaultAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) Declaration Task ForEachAsync<TSource>(IQueryable<TSource> source, Action<TSource> action, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Action <TSource> action CancellationToken token Returns Type Description Task Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<long> LongCountAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task < Int64 > Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<long> LongCountAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < Int64 > Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> MaxAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration Task<TResult> MaxAsync<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source MinAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> MinAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration Task<TResult> MinAsync<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<TSource> SingleAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> SingleAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<TSource> SingleOrDefaultAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> SingleOrDefaultAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync(IQueryable<Decimal>, CancellationToken) Declaration Task<decimal> SumAsync(IQueryable<decimal> source, CancellationToken token) Parameters Type Name Description IQueryable < Decimal > source CancellationToken token Returns Type Description Task < Decimal > | Improve this Doc View Source SumAsync(IQueryable<Double>, CancellationToken) Declaration Task<double> SumAsync(IQueryable<double> source, CancellationToken token) Parameters Type Name Description IQueryable < Double > source CancellationToken token Returns Type Description Task < Double > | Improve this Doc View Source SumAsync(IQueryable<Int32>, CancellationToken) Declaration Task<int> SumAsync(IQueryable<int> source, CancellationToken token) Parameters Type Name Description IQueryable < Int32 > source CancellationToken token Returns Type Description Task < Int32 > | Improve this Doc View Source SumAsync(IQueryable<Int64>, CancellationToken) Declaration Task<long> SumAsync(IQueryable<long> source, CancellationToken token) Parameters Type Name Description IQueryable < Int64 > source CancellationToken token Returns Type Description Task < Int64 > | Improve this Doc View Source SumAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration Task<decimal? > SumAsync(IQueryable<decimal? > source, CancellationToken token) Parameters Type Name Description IQueryable < Nullable < Decimal >> source CancellationToken token Returns Type Description Task < Nullable < Decimal >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration Task<double? > SumAsync(IQueryable<double? > source, CancellationToken token) Parameters Type Name Description IQueryable < Nullable < Double >> source CancellationToken token Returns Type Description Task < Nullable < Double >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration Task<int? > SumAsync(IQueryable<int? > source, CancellationToken token) Parameters Type Name Description IQueryable < Nullable < Int32 >> source CancellationToken token Returns Type Description Task < Nullable < Int32 >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration Task<long? > SumAsync(IQueryable<long? > source, CancellationToken token) Parameters Type Name Description IQueryable < Nullable < Int64 >> source CancellationToken token Returns Type Description Task < Nullable < Int64 >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration Task<float? > SumAsync(IQueryable<float? > source, CancellationToken token) Parameters Type Name Description IQueryable < Nullable < Single >> source CancellationToken token Returns Type Description Task < Nullable < Single >> | Improve this Doc View Source SumAsync(IQueryable<Single>, CancellationToken) Declaration Task<float> SumAsync(IQueryable<float> source, CancellationToken token) Parameters Type Name Description IQueryable < Single > source CancellationToken token Returns Type Description Task < Single > | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration Task<decimal> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Decimal >> selector CancellationToken token Returns Type Description Task < Decimal > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration Task<double> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Double >> selector CancellationToken token Returns Type Description Task < Double > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration Task<int> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Int32 >> selector CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration Task<long> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Int64 >> selector CancellationToken token Returns Type Description Task < Int64 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration Task<decimal? > SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal? >> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Decimal >>> selector CancellationToken token Returns Type Description Task < Nullable < Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration Task<double? > SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double? >> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Double >>> selector CancellationToken token Returns Type Description Task < Nullable < Double >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration Task<int? > SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int? >> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Int32 >>> selector CancellationToken token Returns Type Description Task < Nullable < Int32 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration Task<long? > SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long? >> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Int64 >>> selector CancellationToken token Returns Type Description Task < Nullable < Int64 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration Task<float? > SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float? >> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Single >>> selector CancellationToken token Returns Type Description Task < Nullable < Single >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration Task<float> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Single >> selector CancellationToken token Returns Type Description Task < Single > Type Parameters Name Description TSource | Improve this Doc View Source ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource[]> ToArrayAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource[]> Type Parameters Name Description TSource | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) Declaration Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector IEqualityComparer <TKey> comparer CancellationToken token Returns Type Description Task < Dictionary <TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) Declaration Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector CancellationToken token Returns Type Description Task < Dictionary <TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) Declaration Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector Func <TSource, TElement> elementSelector IEqualityComparer <TKey> comparer CancellationToken token Returns Type Description Task < Dictionary <TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) Declaration Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector Func <TSource, TElement> elementSelector CancellationToken token Returns Type Description Task < Dictionary <TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<List<TSource>> ToListAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < List <TSource>> Type Parameters Name Description TSource Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.IEntityServices.html": {
    "href": "api/LinqToDB.IEntityServices.html",
    "title": "Interface IEntityServices | Linq To DB (aka linq2db)",
    "keywords": "Interface IEntityServices Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IEntityServices Properties | Improve this Doc View Source OnEntityCreated Occurs when a new entity is created. Declaration Action<EntityCreatedEventArgs> OnEntityCreated { get; set; } Property Value Type Description Action < EntityCreatedEventArgs > Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.IDataContext.html": {
    "href": "api/LinqToDB.IDataContext.html",
    "title": "Interface IDataContext | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataContext Database connection abstraction interface. Inherited Members IDisposable.Dispose() Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IDataContext : IDisposable Properties | Improve this Doc View Source CloseAfterUse Gets or sets flag to close context after query execution or leave it open. Declaration bool CloseAfterUse { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ContextID Provider identifier. Declaration string ContextID { get; } Property Value Type Description String | Improve this Doc View Source CreateSqlProvider Gets SQL builder service factory method for current context data provider. Declaration Func<ISqlBuilder> CreateSqlProvider { get; } Property Value Type Description Func < ISqlBuilder > | Improve this Doc View Source DataReaderType Gets data reader implementation type for current context data provider. Declaration Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source GetSqlOptimizer Gets SQL optimizer service factory method for current context data provider. Declaration Func<ISqlOptimizer> GetSqlOptimizer { get; } Property Value Type Description Func < ISqlOptimizer > | Improve this Doc View Source InlineParameters Gets or sets option to force inline parameter values as literals into command text. If parameter inlining not supported for specific value type, it will be used as parameter. Declaration bool InlineParameters { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MappingSchema Gets maping schema, used for current context. Declaration MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source NextQueryHints Gets list of query hints (writable collection), that will be used only for next query, executed using current context. Declaration List<string> NextQueryHints { get; } Property Value Type Description List < String > | Improve this Doc View Source QueryHints Gets list of query hints (writable collection), that will be used for all queries, executed using current context. Declaration List<string> QueryHints { get; } Property Value Type Description List < String > | Improve this Doc View Source SqlProviderFlags Gets SQL support flags for current context data provider. Declaration SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags Methods | Improve this Doc View Source Clone(Boolean) Clones current context. Declaration IDataContext Clone(bool forNestedQuery) Parameters Type Name Description Boolean forNestedQuery Returns Type Description IDataContext Cloned context. | Improve this Doc View Source Close() Closes context connection and disposes underlying resources. Declaration void Close() | Improve this Doc View Source GetQueryRunner(Query, Int32, Expression, Object[]) Returns query runner service for current context. Declaration IQueryRunner GetQueryRunner(Query query, int queryNumber, Expression expression, object[] parameters) Parameters Type Name Description Query query Query batch object. Int32 queryNumber Index of query in query batch. Expression expression Query results mapping expression. Object [] parameters Query parameters. Returns Type Description IQueryRunner Query runner service. | Improve this Doc View Source GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Returns column value reader expression. Declaration Expression GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema Current mapping schema. IDataReader reader Data reader instance. Int32 idx Column index. Expression readerExpression Data reader accessor expression. Type toType Expected value type. Returns Type Description Expression Column read expression. | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Returns true, of data reader column could contain DBNull value. Declaration bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader Data reader instance. Int32 idx Column index. Returns Type Description Nullable < Boolean > true or null if column could contain DBNull . Events | Improve this Doc View Source OnClosing Event, triggered before context connection closed using Close() method. Declaration event EventHandler OnClosing Event Type Type Description EventHandler Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertOrReplace<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplaceAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt32Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt64Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithDecimalIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt32IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt64IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithDecimalIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Update<T>(IDataContext, T, String, String, String) DataExtensions.UpdateAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Delete<T>(IDataContext, T, String, String, String) DataExtensions.DeleteAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaultNullable) DataExtensions.CreateTableAsync<T>(IDataContext, String, String, String, String, String, DefaultNullable, CancellationToken) DataExtensions.DropTable<T>(IDataContext, String, String, String, Boolean) DataExtensions.DropTableAsync<T>(IDataContext, String, String, String, Boolean, CancellationToken) DataExtensions.GetCte<T>(IDataContext, Func<IQueryable<T>, IQueryable<T>>, String) DataExtensions.GetCte<T>(IDataContext, String, Func<IQueryable<T>, IQueryable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IEnumerable<T>, BulkCopyOptions, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, String, IEnumerable<T>, BulkCopyOptions, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, Action<ITable<T>>) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.SelectAsync<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>)"
  },
  "api/LinqToDB.Extensions.html": {
    "href": "api/LinqToDB.Extensions.html",
    "title": "Namespace LinqToDB.Extensions | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Extensions Classes ReflectionExtensions"
  },
  "api/LinqToDB.Extensions.ReflectionExtensions.html": {
    "href": "api/LinqToDB.Extensions.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class ReflectionExtensions Inheritance Object ReflectionExtensions Namespace : LinqToDB.Extensions Assembly : linq2db.dll Syntax public static class ReflectionExtensions Methods | Improve this Doc View Source AsNullable(Type) Wraps type into Nullable<T> class. Declaration public static Type AsNullable(this Type type) Parameters Type Name Description Type type Value type to wrap. Returns Type Description Type Type, wrapped by Nullable<T> . | Improve this Doc View Source AssemblyEx(Type) Declaration public static Assembly AssemblyEx(this Type type) Parameters Type Name Description Type type Returns Type Description Assembly | Improve this Doc View Source BaseTypeEx(Type) Declaration public static Type BaseTypeEx(this Type type) Parameters Type Name Description Type type Returns Type Description Type | Improve this Doc View Source CanConvertTo(Type, Type) Declaration public static bool CanConvertTo(this Type fromType, Type toType) Parameters Type Name Description Type fromType Type toType Returns Type Description Boolean | Improve this Doc View Source EqualsTo(MemberInfo, MemberInfo, Type) Declaration public static bool EqualsTo(this MemberInfo member1, MemberInfo member2, Type declaringType = null) Parameters Type Name Description MemberInfo member1 MemberInfo member2 Type declaringType Returns Type Description Boolean | Improve this Doc View Source GetAttributes<T>(Type) Returns an array of custom attributes applied to a type. Declaration public static T[] GetAttributes<T>(this Type type) where T : Attribute Parameters Type Name Description Type type A type instance. Returns Type Description T[] An array of custom attributes applied to this type, or an array with zero (0) elements if no attributes have been applied. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. | Improve this Doc View Source GetConstructorEx(Type, Type[]) Declaration public static ConstructorInfo GetConstructorEx(this Type type, Type[] parameterTypes) Parameters Type Name Description Type type Type [] parameterTypes Returns Type Description ConstructorInfo | Improve this Doc View Source GetConstructorsEx(Type) Declaration public static ConstructorInfo[] GetConstructorsEx(this Type type) Parameters Type Name Description Type type Returns Type Description ConstructorInfo [] | Improve this Doc View Source GetCustomAttributesEx(MemberInfo, Boolean) Declaration public static object[] GetCustomAttributesEx(this MemberInfo memberInfo, bool inherit) Parameters Type Name Description MemberInfo memberInfo Boolean inherit Returns Type Description Object [] | Improve this Doc View Source GetCustomAttributesEx(MemberInfo, Type, Boolean) Declaration public static object[] GetCustomAttributesEx(this MemberInfo memberInfo, Type attributeType, bool inherit) Parameters Type Name Description MemberInfo memberInfo Type attributeType Boolean inherit Returns Type Description Object [] | Improve this Doc View Source GetCustomAttributesEx(ParameterInfo, Boolean) Declaration public static object[] GetCustomAttributesEx(this ParameterInfo parameterInfo, bool inherit) Parameters Type Name Description ParameterInfo parameterInfo Boolean inherit Returns Type Description Object [] | Improve this Doc View Source GetCustomAttributesEx(Type, Boolean) Declaration public static object[] GetCustomAttributesEx(this Type type, bool inherit) Parameters Type Name Description Type type Boolean inherit Returns Type Description Object [] | Improve this Doc View Source GetCustomAttributesEx(Type, Type, Boolean) Declaration public static object[] GetCustomAttributesEx(this Type type, Type attributeType, bool inherit) Parameters Type Name Description Type type Type attributeType Boolean inherit Returns Type Description Object [] | Improve this Doc View Source GetDefaultConstructorEx(Type) Declaration public static ConstructorInfo GetDefaultConstructorEx(this Type type) Parameters Type Name Description Type type Returns Type Description ConstructorInfo | Improve this Doc View Source GetDefaultValue(Type) Declaration public static object GetDefaultValue(this Type type) Parameters Type Name Description Type type Returns Type Description Object | Improve this Doc View Source GetDefiningTypes(Type, MemberInfo) Declaration public static IEnumerable<Type> GetDefiningTypes(this Type child, MemberInfo member) Parameters Type Name Description Type child MemberInfo member Returns Type Description IEnumerable < Type > | Improve this Doc View Source GetEventEx(Type, String) Declaration public static EventInfo GetEventEx(this Type type, string eventName) Parameters Type Name Description Type type String eventName Returns Type Description EventInfo | Improve this Doc View Source GetFieldEx(Type, String) Declaration public static FieldInfo GetFieldEx(this Type type, string propertyName) Parameters Type Name Description Type type String propertyName Returns Type Description FieldInfo | Improve this Doc View Source GetFieldsEx(Type) Declaration public static FieldInfo[] GetFieldsEx(this Type type) Parameters Type Name Description Type type Returns Type Description FieldInfo [] | Improve this Doc View Source GetFirstAttribute<T>(Type) Retrieves a custom attribute applied to a type. Declaration public static T GetFirstAttribute<T>(this Type type) where T : Attribute Parameters Type Name Description Type type A type instance. Returns Type Description T A reference to the first custom attribute of type attributeType that is applied to element, or null if there is no such attribute. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. | Improve this Doc View Source GetGenericArguments(Type, Type) Returns an array of Type objects that represent the type arguments of a generic type or the type parameters of a generic type definition. Declaration public static Type[] GetGenericArguments(this Type type, Type baseType) Parameters Type Name Description Type type A Type instance. Type baseType Non generic base type. Returns Type Description Type [] An array of Type objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type. | Improve this Doc View Source GetGenericArgumentsEx(Type) Declaration public static Type[] GetGenericArgumentsEx(this Type type) Parameters Type Name Description Type type Returns Type Description Type [] | Improve this Doc View Source GetGenericType(Type, Type) Declaration public static Type GetGenericType(this Type genericType, Type type) Parameters Type Name Description Type genericType Type type Returns Type Description Type | Improve this Doc View Source GetGetMethodEx(PropertyInfo) Declaration public static MethodInfo GetGetMethodEx(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo Returns Type Description MethodInfo | Improve this Doc View Source GetGetMethodEx(PropertyInfo, Boolean) Declaration public static MethodInfo GetGetMethodEx(this PropertyInfo propertyInfo, bool nonPublic) Parameters Type Name Description PropertyInfo propertyInfo Boolean nonPublic Returns Type Description MethodInfo | Improve this Doc View Source GetInstanceMemberEx(Type, String) Declaration public static MemberInfo[] GetInstanceMemberEx(this Type type, string name) Parameters Type Name Description Type type String name Returns Type Description MemberInfo [] | Improve this Doc View Source GetInterfaceMapEx(Type, Type) Declaration public static InterfaceMapping GetInterfaceMapEx(this Type type, Type interfaceType) Parameters Type Name Description Type type Type interfaceType Returns Type Description InterfaceMapping | Improve this Doc View Source GetInterfacesEx(Type) Declaration public static Type[] GetInterfacesEx(this Type type) Parameters Type Name Description Type type Returns Type Description Type [] | Improve this Doc View Source GetItemType(Type) Declaration public static Type GetItemType(this Type type) Parameters Type Name Description Type type Returns Type Description Type | Improve this Doc View Source GetListItemType(IEnumerable) Gets the Type of a list item. Declaration public static Type GetListItemType(this IEnumerable list) Parameters Type Name Description IEnumerable list A Object instance. Returns Type Description Type The Type instance that represents the exact runtime type of a list item. | Improve this Doc View Source GetListItemType(Type) Gets the Type of a list item. Declaration public static Type GetListItemType(this Type listType) Parameters Type Name Description Type listType A Type instance. Returns Type Description Type The Type instance that represents the exact runtime type of a list item. | Improve this Doc View Source GetMemberEx(Type, MemberInfo) Returns MemberInfo of type described by memberInfo It us useful when member's declared and reflected types are not the same Declaration public static MemberInfo GetMemberEx(this Type type, MemberInfo memberInfo) Parameters Type Name Description Type type Type to find member info MemberInfo memberInfo MemberInfo Returns Type Description MemberInfo MemberInfo or null Remarks This method searches only properties, fields and methods | Improve this Doc View Source GetMemberType(MemberInfo) Declaration public static Type GetMemberType(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo Returns Type Description Type | Improve this Doc View Source GetMethodEx(Type, String) Declaration public static MethodInfo GetMethodEx(this Type type, string name) Parameters Type Name Description Type type String name Returns Type Description MethodInfo | Improve this Doc View Source GetMethodEx(Type, String, Type[]) Declaration public static MethodInfo GetMethodEx(this Type type, string name, params Type[] types) Parameters Type Name Description Type type String name Type [] types Returns Type Description MethodInfo | Improve this Doc View Source GetMethodsEx(Type) Declaration public static MethodInfo[] GetMethodsEx(this Type type) Parameters Type Name Description Type type Returns Type Description MethodInfo [] | Improve this Doc View Source GetNonPublicPropertiesEx(Type) Declaration public static PropertyInfo[] GetNonPublicPropertiesEx(this Type type) Parameters Type Name Description Type type Returns Type Description PropertyInfo [] | Improve this Doc View Source GetPropertiesEx(Type) Declaration public static PropertyInfo[] GetPropertiesEx(this Type type) Parameters Type Name Description Type type Returns Type Description PropertyInfo [] | Improve this Doc View Source GetPropertiesEx(Type, BindingFlags) Declaration public static PropertyInfo[] GetPropertiesEx(this Type type, BindingFlags flags) Parameters Type Name Description Type type BindingFlags flags Returns Type Description PropertyInfo [] | Improve this Doc View Source GetPropertyEx(Type, String) Declaration public static PropertyInfo GetPropertyEx(this Type type, string propertyName) Parameters Type Name Description Type type String propertyName Returns Type Description PropertyInfo | Improve this Doc View Source GetPropertyInfo(MethodInfo) Declaration public static PropertyInfo GetPropertyInfo(this MethodInfo method) Parameters Type Name Description MethodInfo method Returns Type Description PropertyInfo | Improve this Doc View Source GetPublicInstanceMembersEx(Type) Declaration public static MemberInfo[] GetPublicInstanceMembersEx(this Type type) Parameters Type Name Description Type type Returns Type Description MemberInfo [] | Improve this Doc View Source GetPublicMemberEx(Type, String) Declaration public static MemberInfo[] GetPublicMemberEx(this Type type, string name) Parameters Type Name Description Type type String name Returns Type Description MemberInfo [] | Improve this Doc View Source GetSetMethodEx(PropertyInfo) Declaration public static MethodInfo GetSetMethodEx(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo Returns Type Description MethodInfo | Improve this Doc View Source GetSetMethodEx(PropertyInfo, Boolean) Declaration public static MethodInfo GetSetMethodEx(this PropertyInfo propertyInfo, bool nonPublic) Parameters Type Name Description PropertyInfo propertyInfo Boolean nonPublic Returns Type Description MethodInfo | Improve this Doc View Source GetStaticMembersEx(Type, String) Declaration public static MemberInfo[] GetStaticMembersEx(this Type type, string name) Parameters Type Name Description Type type String name Returns Type Description MemberInfo [] | Improve this Doc View Source GetTypeCodeEx(Type) Declaration public static TypeCode GetTypeCodeEx(this Type type) Parameters Type Name Description Type type Returns Type Description TypeCode | Improve this Doc View Source IsAbstractEx(Type) Declaration public static bool IsAbstractEx(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsAnonymous(Type) Declaration public static bool IsAnonymous(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsAssignableFromEx(Type, Type) Declaration public static bool IsAssignableFromEx(this Type type, Type c) Parameters Type Name Description Type type Type c Returns Type Description Boolean | Improve this Doc View Source IsClassEx(Type) Declaration public static bool IsClassEx(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsDynamicColumnPropertyEx(MemberInfo) Determines whether member info is dynamic column property. Declaration public static bool IsDynamicColumnPropertyEx(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo The member information. Returns Type Description Boolean true if member info is dynamic column property; otherwise, false . | Improve this Doc View Source IsEnumEx(Type) Declaration public static bool IsEnumEx(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsFieldEx(MemberInfo) Declaration public static bool IsFieldEx(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo Returns Type Description Boolean | Improve this Doc View Source IsFloatType(Type) Declaration public static bool IsFloatType(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsGenericTypeDefinitionEx(Type) Declaration public static bool IsGenericTypeDefinitionEx(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsGenericTypeEx(Type) Declaration public static bool IsGenericTypeEx(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsIntegerType(Type) Declaration public static bool IsIntegerType(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsInterfaceEx(Type) Declaration public static bool IsInterfaceEx(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsMethodEx(MemberInfo) Declaration public static bool IsMethodEx(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo Returns Type Description Boolean | Improve this Doc View Source IsNullable(Type) Gets a value indicating whether a type (or type's element type) instance can be null in the underlying data store. Declaration public static bool IsNullable(this Type type) Parameters Type Name Description Type type A Type instance. Returns Type Description Boolean True, if the type parameter is a closed generic nullable type; otherwise, False. Remarks Arrays of Nullable types are treated as Nullable types. | Improve this Doc View Source IsNullableHasValueMember(MemberInfo) Declaration public static bool IsNullableHasValueMember(this MemberInfo member) Parameters Type Name Description MemberInfo member Returns Type Description Boolean | Improve this Doc View Source IsNullableValueMember(MemberInfo) Declaration public static bool IsNullableValueMember(this MemberInfo member) Parameters Type Name Description MemberInfo member Returns Type Description Boolean | Improve this Doc View Source IsPrimitiveEx(Type) Declaration public static bool IsPrimitiveEx(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsPropertyEx(MemberInfo) Declaration public static bool IsPropertyEx(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo Returns Type Description Boolean | Improve this Doc View Source IsPublicEx(Type) Declaration public static bool IsPublicEx(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source IsSameOrParentOf(Type, Type) Determines whether the specified types are considered equal. Declaration public static bool IsSameOrParentOf(this Type parent, Type child) Parameters Type Name Description Type parent A Type instance. Type child A type possible derived from the parent type Returns Type Description Boolean True, when an object instance of the type child can be used as an object of the type parent ; otherwise, false. Remarks Note that nullable types does not have a parent-child relation to it's underlying type. For example, the 'int?' type (nullable int) and the 'int' type aren't a parent and it's child. | Improve this Doc View Source IsScalar(Type, Boolean) Gets a value indicating whether a type can be used as a db primitive. Declaration public static bool IsScalar(this Type type, bool checkArrayElementType = true) Parameters Type Name Description Type type A Type instance. Boolean checkArrayElementType True if needed to check element type for arrays Returns Type Description Boolean True, if the type parameter is a primitive type; otherwise, False. Remarks String . Stream . XmlReader . XmlDocument . are specially handled by the library and, therefore, can be treated as scalar types. | Improve this Doc View Source IsSqlPropertyMethodEx(MemberInfo) Determines whether member info represent a Sql.Property method. Declaration public static bool IsSqlPropertyMethodEx(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo The member information. Returns Type Description Boolean true if member info is Sql.Property method; otherwise, false . | Improve this Doc View Source IsSubclassOfEx(Type, Type) Declaration public static bool IsSubclassOfEx(this Type type, Type c) Parameters Type Name Description Type type Type c Returns Type Description Boolean | Improve this Doc View Source IsValueTypeEx(Type) Declaration public static bool IsValueTypeEx(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source ReflectedTypeEx(MemberInfo) Declaration public static Type ReflectedTypeEx(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo Returns Type Description Type | Improve this Doc View Source ToNullableUnderlying(Type) Declaration public static Type ToNullableUnderlying(this Type type) Parameters Type Name Description Type type Returns Type Description Type | Improve this Doc View Source ToUnderlying(Type) Returns the underlying type argument of the specified type. Declaration public static Type ToUnderlying(this Type type) Parameters Type Name Description Type type A Type instance. Returns Type Description Type"
  },
  "api/LinqToDB.ExtensionlBuilderExtensions.html": {
    "href": "api/LinqToDB.ExtensionlBuilderExtensions.html",
    "title": "Class ExtensionlBuilderExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class ExtensionlBuilderExtensions Inheritance Object ExtensionlBuilderExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class ExtensionlBuilderExtensions Methods | Improve this Doc View Source Add(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Add(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Type type Returns Type Description ISqlExpression | Improve this Doc View Source Add(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Add(this Sql.ISqExtensionBuilder builder, ISqlExpression left, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Add<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Add<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source AddExpression(Sql.ISqExtensionBuilder, String, String) Declaration public static Sql.SqlExtensionParam AddExpression(this Sql.ISqExtensionBuilder builder, string name, string expr) Parameters Type Name Description Sql.ISqExtensionBuilder builder String name String expr Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source AddParameter(Sql.ISqExtensionBuilder, String, String) Declaration public static Sql.SqlExtensionParam AddParameter(this Sql.ISqExtensionBuilder builder, string name, string value) Parameters Type Name Description Sql.ISqExtensionBuilder builder String name String value Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source Dec(Sql.ISqExtensionBuilder, ISqlExpression) Declaration public static ISqlExpression Dec(this Sql.ISqExtensionBuilder builder, ISqlExpression expr) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr Returns Type Description ISqlExpression | Improve this Doc View Source Div(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Div(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 ISqlExpression expr2 Type type Returns Type Description ISqlExpression | Improve this Doc View Source Div(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Div(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Div<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Div<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source Inc(Sql.ISqExtensionBuilder, ISqlExpression) Declaration public static ISqlExpression Inc(this Sql.ISqExtensionBuilder builder, ISqlExpression expr) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr Returns Type Description ISqlExpression | Improve this Doc View Source Mul(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Mul(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Type type Returns Type Description ISqlExpression | Improve this Doc View Source Mul(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Mul(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Mul<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Mul<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source Sub(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Sub(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Type type Returns Type Description ISqlExpression | Improve this Doc View Source Sub(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Sub(this Sql.ISqExtensionBuilder builder, ISqlExpression left, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Sub<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Sub<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Returns Type Description ISqlExpression Type Parameters Name Description T"
  },
  "api/LinqToDB.ExprParameterAttribute.html": {
    "href": "api/LinqToDB.ExprParameterAttribute.html",
    "title": "Class ExprParameterAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ExprParameterAttribute Inheritance Object Attribute ExprParameterAttribute Implements _Attribute Namespace : LinqToDB Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class ExprParameterAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ExprParameterAttribute() Declaration public ExprParameterAttribute() | Improve this Doc View Source ExprParameterAttribute(String) Declaration public ExprParameterAttribute(string name) Parameters Type Name Description String name Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityCreatedEventArgs.html": {
    "href": "api/LinqToDB.EntityCreatedEventArgs.html",
    "title": "Class EntityCreatedEventArgs | Linq To DB (aka linq2db)",
    "keywords": "Class EntityCreatedEventArgs Provides data for the OnEntityCreated event. Inheritance Object EntityCreatedEventArgs Namespace : LinqToDB Assembly : linq2db.dll Syntax public class EntityCreatedEventArgs Properties | Improve this Doc View Source DataContext DataContext that created a new entity. Declaration public IDataContext DataContext { get; set; } Property Value Type Description IDataContext | Improve this Doc View Source Entity Get or sets the entity that created. Declaration public object Entity { get; set; } Property Value Type Description Object Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataType.html": {
    "href": "api/LinqToDB.DataType.html",
    "title": "Enum DataType | Linq To DB (aka linq2db)",
    "keywords": "Enum DataType List of data types, supported by linq2db. Provider-level support depends on database capabilities and current implementation support level and could vary for different providers. Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum DataType Fields Name Description Binary A fixed-length stream of binary data ranging between 1 and 8,000 bytes. BinaryJson Binary type utilized postgres provider (jsonb). BitArray Array of bits. Blob Binary large object. Boolean A simple type representing Boolean values of true or false. Byte An 8-bit unsigned integer ranging in value from 0 to 255. Char A fixed-length stream of non-Unicode characters ranging between 1 and 8,000 characters. Cursor Result set (for example OracleDbType.RefCursor). Date A type representing a date value. DateTime Date and time data ranging in value from January 1, 1753 to December 31, 9999 to an accuracy of 3.33 milliseconds. DateTime2 Date and time data. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds. DateTimeOffset Date and time data with time zone awareness. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds. Time zone value range is -14:00 through +14:00. Decimal A simple type representing values with fixed precision and scale numbers. When maximum precision is used, valid values are from -10^38+1 through 10^38-1. Dictionary Dictionary type for key-value pairs. Double A floating point number within the range of -1.79E +308 through 1.79E +308. Guid A globally unique identifier (or GUID). Image A variable-length stream of binary data ranging from 0 to 2 31 -1 (or 2,147,483,647) bytes. Int16 An integral type representing signed 16-bit integers with values between -32768 and 32767. Int32 An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647. Int64 An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807. Json Json type utilized in postgres provider. Money A currency value ranging from -2 63 (or -9,223,372,036,854,775,808) to 2 63 -1 (or +9,223,372,036,854,775,807) with an accuracy to a ten-thousandth of a currency unit. NChar A fixed-length stream of Unicode characters ranging between 1 and 4,000 characters. NText A variable-length stream of Unicode data with a maximum length of 2 30 - 1 (or 1,073,741,823) characters. NVarChar A variable-length stream of Unicode characters ranging between 1 and 4,000 characters. Implicit conversion fails if the string is greater than 4,000 characters. Oracle: We need NVarChar2 in order to insert UTF8 string values. The default Odp VarChar2 dbtype doesnt work with UTF8 values. Note : Microsoft oracle client uses NVarChar value by default. Same as VARCHAR2 except that the column stores values in the National CS , ie you can store values in Bangla if your National CS is BN8BSCII .If the National CS is of fixed width CS (all characters are represented by a fixed byte ,say 2 bytes for JA16EUCFIXED) , then NVARCHAR2(30) stores 30 Characters. Varchar2 works with 8 bit characters where as Nvarchar2 works ith 16 bit characters. If you have to store data other than english prefer Nvarchar2 or viceversa. NCHAR and NVARCHAR2 are Unicode datatypes that store Unicode character data. The character set of NCHAR and NVARCHAR2 datatypes can only be either AL16UTF16 or UTF8 and is specified at database creation time as the national character set. AL16UTF16 and UTF8 are both Unicode encoding. The NCHAR datatype stores fixed-length character strings that correspond to the national character set.The NVARCHAR2 datatype stores variable length character strings. When you create a table with an NCHAR or NVARCHAR2 column, the maximum size specified is always in character length semantics. Character length semantics is the default and only length semantics for NCHAR or NVARCHAR2. For example, if national character set is UTF8, then the following statement defines the maximum byte length of 90 bytes: CREATE TABLE tab1 (col1 NCHAR(30)); This statement creates a column with maximum character length of 30. The maximum byte length is the multiple of the maximum character length and the maximum number of bytes in each character. The maximum length of an NVARCHAR2 column is 4000 bytes. It can hold up to 4000 characters. The actual data is subject to the maximum byte limit of 4000. The two size constraints must be satisfied simultaneously at run time. SByte An integral type representing signed 8-bit integers with values between -128 and 127. Single A floating point number within the range of -3.40E +38 through 3.40E +38. SmallDateTime Date and time data ranging in value from January 1, 1900 to June 6, 2079 to an accuracy of one minute. SmallMoney A currency value ranging from -214,748.3648 to +214,748.3647 with an accuracy to a ten-thousandth of a currency unit. Text A variable-length stream of non-Unicode data with a maximum length of 2 31 -1 (or 2,147,483,647) characters. Time A type representing a time value. Timestamp Array of type Byte. Automatically generated binary numbers, which are guaranteed to be unique within a database. timestamp is used typically as a mechanism for version-stamping table rows. The storage size is 8 bytes. Udt A SQL Server 2005 user-defined type (UDT). UInt16 An integral type representing unsigned 16-bit integers with values between 0 and 65535. UInt32 An integral type representing unsigned 32-bit integers with values between 0 and 4294967295. UInt64 An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615. Undefined Undefined data type. VarBinary A variable-length stream of binary data ranging between 1 and 8,000 bytes. Implicit conversion fails if the byte array is greater than 8,000 bytes. VarChar A variable-length stream of non-Unicode characters ranging between 1 and 8,000 characters. Use VarChar when the database column is varchar(max). Variant A general type representing any reference or value type not explicitly represented by another DataType value. VarNumeric A variable-length numeric value. Xml An XML value. Obtain the XML as a string using the GetValue method or Value property, or as an XmlReader by calling the CreateReader method. Extension Methods Sql.Between<DataType>(DataType, DataType) Sql.NotBetween<DataType>(DataType, DataType) SqlExtensions.In<DataType>(IEnumerable<DataType>) SqlExtensions.In<DataType>(IQueryable<DataType>) SqlExtensions.In<DataType>(DataType[]) SqlExtensions.In<DataType>(DataType, DataType) SqlExtensions.In<DataType>(DataType, DataType, DataType) SqlExtensions.NotIn<DataType>(IEnumerable<DataType>) SqlExtensions.NotIn<DataType>(IQueryable<DataType>) SqlExtensions.NotIn<DataType>(DataType[]) SqlExtensions.NotIn<DataType>(DataType, DataType) SqlExtensions.NotIn<DataType>(DataType, DataType, DataType)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2012MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2012MappingSchema.html",
    "title": "Class SqlServer2012MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2012MappingSchema Inheritance Object MappingSchema SqlServer2012MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2012MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2012MappingSchema() Declaration public SqlServer2012MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2008MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2008MappingSchema.html",
    "title": "Class SqlServer2008MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2008MappingSchema Inheritance Object MappingSchema SqlServer2008MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2008MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2008MappingSchema() Declaration public SqlServer2008MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2005MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2005MappingSchema.html",
    "title": "Class SqlServer2005MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2005MappingSchema Inheritance Object MappingSchema SqlServer2005MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2005MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2005MappingSchema() Declaration public SqlServer2005MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2000MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2000MappingSchema.html",
    "title": "Class SqlServer2000MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2000MappingSchema Inheritance Object MappingSchema SqlServer2000MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2000MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2000MappingSchema() Declaration public SqlServer2000MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2zOSMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2zOSMappingSchema.html",
    "title": "Class DB2zOSMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DB2zOSMappingSchema Inheritance Object MappingSchema DB2zOSMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2zOSMappingSchema : MappingSchema Constructors | Improve this Doc View Source DB2zOSMappingSchema() Declaration public DB2zOSMappingSchema() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2Version.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2Version.html",
    "title": "Enum DB2Version | Linq To DB (aka linq2db)",
    "keywords": "Enum DB2Version Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public enum DB2Version Fields Name Description LUW zOS Extension Methods Sql.Between<DB2Version>(DB2Version, DB2Version) Sql.NotBetween<DB2Version>(DB2Version, DB2Version) SqlExtensions.In<DB2Version>(IEnumerable<DB2Version>) SqlExtensions.In<DB2Version>(IQueryable<DB2Version>) SqlExtensions.In<DB2Version>(DB2Version[]) SqlExtensions.In<DB2Version>(DB2Version, DB2Version) SqlExtensions.In<DB2Version>(DB2Version, DB2Version, DB2Version) SqlExtensions.NotIn<DB2Version>(IEnumerable<DB2Version>) SqlExtensions.NotIn<DB2Version>(IQueryable<DB2Version>) SqlExtensions.NotIn<DB2Version>(DB2Version[]) SqlExtensions.NotIn<DB2Version>(DB2Version, DB2Version) SqlExtensions.NotIn<DB2Version>(DB2Version, DB2Version, DB2Version)"
  },
  "api/LinqToDB.SqlQuery.SqlTable.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTable.html",
    "title": "Class SqlTable | Linq To DB (aka linq2db)",
    "keywords": "Class SqlTable Inheritance Object SqlTable SqlCteTable SqlTable<T> Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlTable : ISqlTableSource, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlTable() Declaration public SqlTable() | Improve this Doc View Source SqlTable(MappingSchema, Type, String) Declaration public SqlTable(MappingSchema mappingSchema, Type objectType, string physicalName = null) Parameters Type Name Description MappingSchema mappingSchema Type objectType String physicalName | Improve this Doc View Source SqlTable(SqlTable) Declaration public SqlTable(SqlTable table) Parameters Type Name Description SqlTable table | Improve this Doc View Source SqlTable(SqlTable, IEnumerable<SqlField>, ISqlExpression[]) Declaration public SqlTable(SqlTable table, IEnumerable<SqlField> fields, ISqlExpression[] tableArguments) Parameters Type Name Description SqlTable table IEnumerable < SqlField > fields ISqlExpression [] tableArguments | Improve this Doc View Source SqlTable(Type) Declaration public SqlTable(Type objectType) Parameters Type Name Description Type objectType Properties | Improve this Doc View Source Alias Declaration public string Alias { get; set; } Property Value Type Description String | Improve this Doc View Source All Declaration public SqlField All { get; } Property Value Type Description SqlField | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description String | Improve this Doc View Source ElementType Declaration public virtual QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Fields Declaration public Dictionary<string, SqlField> Fields { get; } Property Value Type Description Dictionary < String , SqlField > | Improve this Doc View Source Item[String] Declaration public SqlField this[string fieldName] { get; } Parameters Type Name Description String fieldName Property Value Type Description SqlField | Improve this Doc View Source Name Declaration public virtual string Name { get; set; } Property Value Type Description String | Improve this Doc View Source ObjectType Declaration public Type ObjectType { get; set; } Property Value Type Description Type | Improve this Doc View Source PhysicalName Declaration public virtual string PhysicalName { get; set; } Property Value Type Description String | Improve this Doc View Source Schema Declaration public string Schema { get; set; } Property Value Type Description String | Improve this Doc View Source SequenceAttributes Declaration public SequenceNameAttribute[] SequenceAttributes { get; protected set; } Property Value Type Description SequenceNameAttribute [] | Improve this Doc View Source SourceID Declaration public int SourceID { get; protected set; } Property Value Type Description Int32 | Improve this Doc View Source SqlTableType Declaration public virtual SqlTableType SqlTableType { get; set; } Property Value Type Description SqlTableType | Improve this Doc View Source TableArguments Declaration public ISqlExpression[] TableArguments { get; set; } Property Value Type Description ISqlExpression [] Methods | Improve this Doc View Source Add(SqlField) Declaration public void Add(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source AddRange(IEnumerable<SqlField>) Declaration public void AddRange(IEnumerable<SqlField> collection) Parameters Type Name Description IEnumerable < SqlField > collection | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean | Improve this Doc View Source GetIdentityField() Declaration public SqlField GetIdentityField() Returns Type Description SqlField | Improve this Doc View Source GetKeys(Boolean) Declaration public IList<ISqlExpression> GetKeys(bool allIfEmpty) Parameters Type Name Description Boolean allIfEmpty Returns Type Description IList < ISqlExpression > | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public virtual ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpression.CanBeNull Declaration bool ISqlExpression.CanBeNull { get; } Returns Type Description Boolean | Improve this Doc View Source ISqlExpression.Precedence Declaration int ISqlExpression.Precedence { get; } Returns Type Description Int32 | Improve this Doc View Source ISqlExpression.SystemType Declaration Type ISqlExpression.SystemType { get; } Returns Type Description Type | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods Extensions.InnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, String, SqlFromClause.Join[]) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlTable-1.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTable-1.html",
    "title": "Class SqlTable<T> | Linq To DB (aka linq2db)",
    "keywords": "Class SqlTable<T> Inheritance Object SqlTable SqlTable<T> Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Inherited Members SqlTable.ToString() SqlTable.Item[String] SqlTable.Name SqlTable.Alias SqlTable.Database SqlTable.Schema SqlTable.ObjectType SqlTable.PhysicalName SqlTable.SqlTableType SqlTable.TableArguments SqlTable.Fields SqlTable.SequenceAttributes SqlTable.All SqlTable.GetIdentityField() SqlTable.Add(SqlField) SqlTable.AddRange(IEnumerable<SqlField>) SqlTable.SourceID SqlTable.GetKeys(Boolean) SqlTable.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlTable.ElementType SqlTable.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) SqlTable.ISqlExpression.CanBeNull SqlTable.ISqlExpression.Precedence SqlTable.ISqlExpression.SystemType SqlTable.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) SqlTable.IEquatable<ISqlExpression>.Equals(ISqlExpression) SqlTable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlTable<T> : SqlTable, ISqlTableSource, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Type Parameters Name Description T Constructors | Improve this Doc View Source SqlTable() Declaration public SqlTable() | Improve this Doc View Source SqlTable(MappingSchema) Declaration public SqlTable(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods Extensions.InnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, String, SqlFromClause.Join[]) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlStatementWithQueryBase.html": {
    "href": "api/LinqToDB.SqlQuery.SqlStatementWithQueryBase.html",
    "title": "Class SqlStatementWithQueryBase | Linq To DB (aka linq2db)",
    "keywords": "Class SqlStatementWithQueryBase Inheritance Object SqlStatement SqlStatementWithQueryBase SqlDeleteStatement SqlInsertOrUpdateStatement SqlInsertStatement SqlSelectStatement SqlUpdateStatement Implements IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlStatement.SqlText SqlStatement.QueryType SqlStatement.Parameters SqlStatement.ProcessParameters(MappingSchema) SqlStatement.CollectParameters() SqlStatement.ElementType SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) SqlStatement.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlStatement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlStatement.EnumClauses() SqlStatement.RemoveAlias(String) SqlStatement.GetAlias(String, String) SqlStatement.GetTempAliases(Int32, String) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class SqlStatementWithQueryBase : SqlStatement, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlStatementWithQueryBase(SelectQuery) Declaration public SqlStatementWithQueryBase(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description Boolean Overrides SqlStatement.IsParameterDependent | Improve this Doc View Source SelectQuery Declaration public override SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery Overrides SqlStatement.SelectQuery | Improve this Doc View Source With Declaration public SqlWithClause With { get; set; } Property Value Type Description SqlWithClause Methods | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatement.GetTableSource(ISqlTableSource) | Improve this Doc View Source WalkQueries(Func<SelectQuery, SelectQuery>) Declaration public override void WalkQueries(Func<SelectQuery, SelectQuery> func) Parameters Type Name Description Func < SelectQuery , SelectQuery > func Overrides SqlStatement.WalkQueries(Func<SelectQuery, SelectQuery>) Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlStatement.html",
    "title": "Class SqlStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlStatement Inheritance Object SqlStatement SqlCreateTableStatement SqlDropTableStatement SqlStatementWithQueryBase SqlTruncateTableStatement Implements IQueryElement ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class SqlStatement : IQueryElement, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source ElementType Declaration public abstract QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsParameterDependent Declaration public abstract bool IsParameterDependent { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Parameters Declaration public List<SqlParameter> Parameters { get; } Property Value Type Description List < SqlParameter > | Improve this Doc View Source QueryType Declaration public abstract QueryType QueryType { get; } Property Value Type Description QueryType | Improve this Doc View Source SelectQuery Declaration public abstract SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description String Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public abstract ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source CollectParameters() Declaration protected void CollectParameters() | Improve this Doc View Source EnumClauses() Declaration public virtual IEnumerable<IQueryElement> EnumClauses() Returns Type Description IEnumerable < IQueryElement > | Improve this Doc View Source GetAlias(String, String) Declaration public string GetAlias(string desiredAlias, string defaultAlias) Parameters Type Name Description String desiredAlias String defaultAlias Returns Type Description String | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public abstract ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource | Improve this Doc View Source GetTempAliases(Int32, String) Declaration public string[] GetTempAliases(int n, string defaultAlias) Parameters Type Name Description Int32 n String defaultAlias Returns Type Description String [] | Improve this Doc View Source ProcessParameters(MappingSchema) Declaration public SqlStatement ProcessParameters(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description SqlStatement | Improve this Doc View Source RemoveAlias(String) Declaration public void RemoveAlias(string alias) Parameters Type Name Description String alias | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public abstract StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public abstract ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression | Improve this Doc View Source WalkQueries(Func<SelectQuery, SelectQuery>) Declaration public abstract void WalkQueries(Func<SelectQuery, SelectQuery> func) Parameters Type Name Description Func < SelectQuery , SelectQuery > func Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlSetExpression.html": {
    "href": "api/LinqToDB.SqlQuery.SqlSetExpression.html",
    "title": "Class SqlSetExpression | Linq To DB (aka linq2db)",
    "keywords": "Class SqlSetExpression Inheritance Object SqlSetExpression Implements IQueryElement ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlSetExpression : IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlSetExpression(ISqlExpression, ISqlExpression) Declaration public SqlSetExpression(ISqlExpression column, ISqlExpression expression) Parameters Type Name Description ISqlExpression column ISqlExpression expression Properties | Improve this Doc View Source Column Declaration public ISqlExpression Column { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlSelectStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlSelectStatement.html",
    "title": "Class SqlSelectStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlSelectStatement Inheritance Object SqlStatement SqlStatementWithQueryBase SqlSelectStatement Implements IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlStatementWithQueryBase.IsParameterDependent SqlStatementWithQueryBase.SelectQuery SqlStatementWithQueryBase.With SqlStatementWithQueryBase.GetTableSource(ISqlTableSource) SqlStatementWithQueryBase.WalkQueries(Func<SelectQuery, SelectQuery>) SqlStatement.SqlText SqlStatement.Parameters SqlStatement.ProcessParameters(MappingSchema) SqlStatement.CollectParameters() SqlStatement.EnumClauses() SqlStatement.RemoveAlias(String) SqlStatement.GetAlias(String, String) SqlStatement.GetTempAliases(Int32, String) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlSelectStatement : SqlStatementWithQueryBase, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlSelectStatement() Declaration public SqlSelectStatement() | Improve this Doc View Source SqlSelectStatement(SelectQuery) Declaration public SqlSelectStatement(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlStatement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Overrides SqlStatement.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlSelectClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlSelectClause.html",
    "title": "Class SqlSelectClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlSelectClause Inheritance Object ClauseBase SqlSelectClause Implements IQueryElement ISqlExpressionWalkable Inherited Members ClauseBase.Select ClauseBase.From ClauseBase.Where ClauseBase.GroupBy ClauseBase.Having ClauseBase.OrderBy ClauseBase.End() ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlSelectClause : ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source Columns Declaration public List<SqlColumn> Columns { get; } Property Value Type Description List < SqlColumn > | Improve this Doc View Source Distinct Declaration public SqlSelectClause Distinct { get; } Property Value Type Description SqlSelectClause | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source HasModifier Declaration public bool HasModifier { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDistinct Declaration public bool IsDistinct { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SkipValue Declaration public ISqlExpression SkipValue { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source TakeHints Declaration public TakeHints? TakeHints { get; } Property Value Type Description Nullable < TakeHints > | Improve this Doc View Source TakeValue Declaration public ISqlExpression TakeValue { get; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Add(ISqlExpression) Declaration public int Add(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description Int32 | Improve this Doc View Source Add(ISqlExpression, String) Declaration public int Add(ISqlExpression expr, string alias) Parameters Type Name Description ISqlExpression expr String alias Returns Type Description Int32 | Improve this Doc View Source AddNew(ISqlExpression) Declaration public int AddNew(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description Int32 | Improve this Doc View Source Expr(ISqlExpression) Declaration public SqlSelectClause Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(ISqlExpression, String) Declaration public SqlSelectClause Expr(ISqlExpression expr, string alias) Parameters Type Name Description ISqlExpression expr String alias Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(String, ISqlExpression[]) Declaration public SqlSelectClause Expr(string expr, params ISqlExpression[] values) Parameters Type Name Description String expr ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(String, Int32, ISqlExpression[]) Declaration public SqlSelectClause Expr(string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description String expr Int32 priority ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(String, String, Int32, ISqlExpression[]) Declaration public SqlSelectClause Expr(string alias, string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description String alias String expr Int32 priority ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(Type, String, ISqlExpression[]) Declaration public SqlSelectClause Expr(Type systemType, string expr, params ISqlExpression[] values) Parameters Type Name Description Type systemType String expr ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(Type, String, Int32, ISqlExpression[]) Declaration public SqlSelectClause Expr(Type systemType, string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description Type systemType String expr Int32 priority ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(Type, String, String, Int32, ISqlExpression[]) Declaration public SqlSelectClause Expr(Type systemType, string alias, string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description Type systemType String alias String expr Int32 priority ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr<T>(ISqlExpression, String, ISqlExpression) Declaration public SqlSelectClause Expr<T>(ISqlExpression expr1, string operation, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 String operation ISqlExpression expr2 Returns Type Description SqlSelectClause Type Parameters Name Description T | Improve this Doc View Source Expr<T>(ISqlExpression, String, ISqlExpression, Int32) Declaration public SqlSelectClause Expr<T>(ISqlExpression expr1, string operation, ISqlExpression expr2, int priority) Parameters Type Name Description ISqlExpression expr1 String operation ISqlExpression expr2 Int32 priority Returns Type Description SqlSelectClause Type Parameters Name Description T | Improve this Doc View Source Expr<T>(String, ISqlExpression, String, ISqlExpression, Int32) Declaration public SqlSelectClause Expr<T>(string alias, ISqlExpression expr1, string operation, ISqlExpression expr2, int priority) Parameters Type Name Description String alias ISqlExpression expr1 String operation ISqlExpression expr2 Int32 priority Returns Type Description SqlSelectClause Type Parameters Name Description T | Improve this Doc View Source Field(SqlField) Declaration public SqlSelectClause Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SqlSelectClause | Improve this Doc View Source Field(SqlField, String) Declaration public SqlSelectClause Field(SqlField field, string alias) Parameters Type Name Description SqlField field String alias Returns Type Description SqlSelectClause | Improve this Doc View Source Skip(ISqlExpression) Declaration public SqlSelectClause Skip(ISqlExpression value) Parameters Type Name Description ISqlExpression value Returns Type Description SqlSelectClause | Improve this Doc View Source Skip(Int32) Declaration public SqlSelectClause Skip(int value) Parameters Type Name Description Int32 value Returns Type Description SqlSelectClause | Improve this Doc View Source SubQuery(SelectQuery) Declaration public SqlSelectClause SubQuery(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlSelectClause | Improve this Doc View Source SubQuery(SelectQuery, String) Declaration public SqlSelectClause SubQuery(SelectQuery selectQuery, string alias) Parameters Type Name Description SelectQuery selectQuery String alias Returns Type Description SqlSelectClause | Improve this Doc View Source Take(ISqlExpression, Nullable<TakeHints>) Declaration public SqlSelectClause Take(ISqlExpression value, TakeHints? hints) Parameters Type Name Description ISqlExpression value Nullable < TakeHints > hints Returns Type Description SqlSelectClause | Improve this Doc View Source Take(Int32, Nullable<TakeHints>) Declaration public SqlSelectClause Take(int value, TakeHints? hints) Parameters Type Name Description Int32 value Nullable < TakeHints > hints Returns Type Description SqlSelectClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Implements IQueryElement ISqlExpressionWalkable Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlSearchCondition.html": {
    "href": "api/LinqToDB.SqlQuery.SqlSearchCondition.html",
    "title": "Class SqlSearchCondition | Linq To DB (aka linq2db)",
    "keywords": "Class SqlSearchCondition Inheritance Object ConditionBase < SqlSearchCondition , SqlSearchCondition.Next > SqlSearchCondition Implements ISqlPredicate ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Inherited Members ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Search ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.GetNext() ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.SetOr(Boolean) ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Not ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Expr(ISqlExpression) ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Field(SqlField) ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.SubQuery(SelectQuery) ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Value(Object) ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlSearchCondition : ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>, IConditionExpr<ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Expr_>, ISqlPredicate, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlSearchCondition() Declaration public SqlSearchCondition() | Improve this Doc View Source SqlSearchCondition(SqlCondition[]) Declaration public SqlSearchCondition(params SqlCondition[] list) Parameters Type Name Description SqlCondition [] list | Improve this Doc View Source SqlSearchCondition(IEnumerable<SqlCondition>) Declaration public SqlSearchCondition(IEnumerable<SqlCondition> list) Parameters Type Name Description IEnumerable < SqlCondition > list Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source Conditions Declaration public List<SqlCondition> Conditions { get; } Property Value Type Description List < SqlCondition > | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source Search Declaration protected override SqlSearchCondition Search { get; } Property Value Type Description SqlSearchCondition Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlSearchCondition, LinqToDB.SqlQuery.SqlSearchCondition.Next>.Search | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean | Improve this Doc View Source GetNext() Declaration protected override SqlSearchCondition.Next GetNext() Returns Type Description SqlSearchCondition.Next Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlSearchCondition, LinqToDB.SqlQuery.SqlSearchCondition.Next>.GetNext() Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements ISqlPredicate ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlSearchCondition.Next.html": {
    "href": "api/LinqToDB.SqlQuery.SqlSearchCondition.Next.html",
    "title": "Class SqlSearchCondition.Next | Linq To DB (aka linq2db)",
    "keywords": "Class SqlSearchCondition.Next Inheritance Object SqlSearchCondition.Next Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Next Properties | Improve this Doc View Source And Declaration public SqlSearchCondition And { get; } Property Value Type Description SqlSearchCondition | Improve this Doc View Source Or Declaration public SqlSearchCondition Or { get; } Property Value Type Description SqlSearchCondition Methods | Improve this Doc View Source ToExpr() Declaration public ISqlExpression ToExpr() Returns Type Description ISqlExpression Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.html",
    "title": "Class SqlPredicate | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate Inheritance Object SqlPredicate SqlPredicate.Expr SqlPredicate.FuncLike Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class SqlPredicate : ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlPredicate(Int32) Declaration protected SqlPredicate(int precedence) Parameters Type Name Description Int32 precedence Properties | Improve this Doc View Source CanBeNull Declaration public abstract bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source ElementType Declaration public abstract QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected abstract ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected abstract void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected abstract void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> action) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > action Explicit Interface Implementations | Improve this Doc View Source ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration ICloneableElement ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.Operator.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.Operator.html",
    "title": "Enum SqlPredicate.Operator | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlPredicate.Operator Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum Operator Fields Name Description Equal Greater GreaterOrEqual Less LessOrEqual NotEqual NotGreater NotLess Extension Methods Sql.Between<SqlPredicate.Operator>(SqlPredicate.Operator, SqlPredicate.Operator) Sql.NotBetween<SqlPredicate.Operator>(SqlPredicate.Operator, SqlPredicate.Operator) SqlExtensions.In<SqlPredicate.Operator>(IEnumerable<SqlPredicate.Operator>) SqlExtensions.In<SqlPredicate.Operator>(IQueryable<SqlPredicate.Operator>) SqlExtensions.In<SqlPredicate.Operator>(SqlPredicate.Operator[]) SqlExtensions.In<SqlPredicate.Operator>(SqlPredicate.Operator, SqlPredicate.Operator) SqlExtensions.In<SqlPredicate.Operator>(SqlPredicate.Operator, SqlPredicate.Operator, SqlPredicate.Operator) SqlExtensions.NotIn<SqlPredicate.Operator>(IEnumerable<SqlPredicate.Operator>) SqlExtensions.NotIn<SqlPredicate.Operator>(IQueryable<SqlPredicate.Operator>) SqlExtensions.NotIn<SqlPredicate.Operator>(SqlPredicate.Operator[]) SqlExtensions.NotIn<SqlPredicate.Operator>(SqlPredicate.Operator, SqlPredicate.Operator) SqlExtensions.NotIn<SqlPredicate.Operator>(SqlPredicate.Operator, SqlPredicate.Operator, SqlPredicate.Operator)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.NotExpr.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.NotExpr.html",
    "title": "Class SqlPredicate.NotExpr | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.NotExpr Inheritance Object SqlPredicate SqlPredicate.Expr SqlPredicate.NotExpr SqlPredicate.Between SqlPredicate.InList SqlPredicate.InSubQuery SqlPredicate.IsNull SqlPredicate.Like Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlPredicate.Expr.Expr1 SqlPredicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlPredicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class NotExpr : SqlPredicate.Expr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source NotExpr(ISqlExpression, Boolean, Int32) Declaration public NotExpr(ISqlExpression exp1, bool isNot, int precedence) Parameters Type Name Description ISqlExpression exp1 Boolean isNot Int32 precedence Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType | Improve this Doc View Source IsNot Declaration public bool IsNot { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlPredicate.Expr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.Expr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.Like.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.Like.html",
    "title": "Class SqlPredicate.Like | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.Like Inheritance Object SqlPredicate SqlPredicate.Expr SqlPredicate.NotExpr SqlPredicate.Like Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlPredicate.NotExpr.IsNot SqlPredicate.Expr.Expr1 SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlPredicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Like : SqlPredicate.NotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source Like(ISqlExpression, Boolean, ISqlExpression, ISqlExpression) Declaration public Like(ISqlExpression exp1, bool isNot, ISqlExpression exp2, ISqlExpression escape) Parameters Type Name Description ISqlExpression exp1 Boolean isNot ISqlExpression exp2 ISqlExpression escape Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.NotExpr.ElementType | Improve this Doc View Source Escape Declaration public ISqlExpression Escape { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlPredicate.NotExpr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.NotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Overrides SqlPredicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.IsNull.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.IsNull.html",
    "title": "Class SqlPredicate.IsNull | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.IsNull Inheritance Object SqlPredicate SqlPredicate.Expr SqlPredicate.NotExpr SqlPredicate.IsNull Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlPredicate.NotExpr.IsNot SqlPredicate.Expr.Expr1 SqlPredicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlPredicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class IsNull : SqlPredicate.NotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source IsNull(ISqlExpression, Boolean) Declaration public IsNull(ISqlExpression exp1, bool isNot) Parameters Type Name Description ISqlExpression exp1 Boolean isNot Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.NotExpr.ElementType Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlPredicate.NotExpr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.NotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.InSubQuery.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.InSubQuery.html",
    "title": "Class SqlPredicate.InSubQuery | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.InSubQuery Inheritance Object SqlPredicate SqlPredicate.Expr SqlPredicate.NotExpr SqlPredicate.InSubQuery Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlPredicate.NotExpr.IsNot SqlPredicate.Expr.Expr1 SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlPredicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class InSubQuery : SqlPredicate.NotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source InSubQuery(ISqlExpression, Boolean, SelectQuery) Declaration public InSubQuery(ISqlExpression exp1, bool isNot, SelectQuery subQuery) Parameters Type Name Description ISqlExpression exp1 Boolean isNot SelectQuery subQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.NotExpr.ElementType | Improve this Doc View Source SubQuery Declaration public SelectQuery SubQuery { get; } Property Value Type Description SelectQuery Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlPredicate.NotExpr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.NotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Overrides SqlPredicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.IQueryElement.html": {
    "href": "api/LinqToDB.SqlQuery.IQueryElement.html",
    "title": "Interface IQueryElement | Linq To DB (aka linq2db)",
    "keywords": "Interface IQueryElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface IQueryElement Properties | Improve this Doc View Source ElementType Declaration QueryElementType ElementType { get; } Property Value Type Description QueryElementType Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ICloneableElement.html": {
    "href": "api/LinqToDB.SqlQuery.ICloneableElement.html",
    "title": "Interface ICloneableElement | Linq To DB (aka linq2db)",
    "keywords": "Interface ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ICloneableElement Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.Extensions.html": {
    "href": "api/LinqToDB.SqlQuery.Extensions.html",
    "title": "Class Extensions | Linq To DB (aka linq2db)",
    "keywords": "Class Extensions Inheritance Object Extensions Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class Extensions Methods | Improve this Doc View Source CrossApply(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join CrossApply(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source CrossApply(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join CrossApply(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source FullJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join FullJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source FullJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join FullJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source InnerJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join InnerJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source InnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join InnerJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source Join(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join Join(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source Join(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join Join(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source LeftJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join LeftJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source LeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join LeftJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source OuterApply(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join OuterApply(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source OuterApply(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join OuterApply(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source RightJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join RightJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source RightJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join RightJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakInnerJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakInnerJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakInnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakInnerJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakLeftJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakLeftJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakLeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakLeftJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join"
  },
  "api/LinqToDB.SqlQuery.DefaultNullable.html": {
    "href": "api/LinqToDB.SqlQuery.DefaultNullable.html",
    "title": "Enum DefaultNullable | Linq To DB (aka linq2db)",
    "keywords": "Enum DefaultNullable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum DefaultNullable Fields Name Description None NotNull Null Extension Methods Sql.Between<DefaultNullable>(DefaultNullable, DefaultNullable) Sql.NotBetween<DefaultNullable>(DefaultNullable, DefaultNullable) SqlExtensions.In<DefaultNullable>(IEnumerable<DefaultNullable>) SqlExtensions.In<DefaultNullable>(IQueryable<DefaultNullable>) SqlExtensions.In<DefaultNullable>(DefaultNullable[]) SqlExtensions.In<DefaultNullable>(DefaultNullable, DefaultNullable) SqlExtensions.In<DefaultNullable>(DefaultNullable, DefaultNullable, DefaultNullable) SqlExtensions.NotIn<DefaultNullable>(IEnumerable<DefaultNullable>) SqlExtensions.NotIn<DefaultNullable>(IQueryable<DefaultNullable>) SqlExtensions.NotIn<DefaultNullable>(DefaultNullable[]) SqlExtensions.NotIn<DefaultNullable>(DefaultNullable, DefaultNullable) SqlExtensions.NotIn<DefaultNullable>(DefaultNullable, DefaultNullable, DefaultNullable)"
  },
  "api/LinqToDB.SqlQuery.CteClause.html": {
    "href": "api/LinqToDB.SqlQuery.CteClause.html",
    "title": "Class CteClause | Linq To DB (aka linq2db)",
    "keywords": "Class CteClause Inheritance Object CteClause Implements IQueryElement ICloneableElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class CteClause : IQueryElement, ICloneableElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source CteClause(SelectQuery, Type, Boolean, String) Declaration public CteClause(SelectQuery body, Type objectType, bool isRecursive, string name) Parameters Type Name Description SelectQuery body Type objectType Boolean isRecursive String name Fields | Improve this Doc View Source CteIDCounter Declaration public static int CteIDCounter Field Value Type Description Int32 Properties | Improve this Doc View Source Body Declaration public SelectQuery Body { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source CteID Declaration public int CteID { get; } Property Value Type Description Int32 | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Fields Declaration public Dictionary<string, SqlField> Fields { get; } Property Value Type Description Dictionary < String , SqlField > | Improve this Doc View Source IsRecursive Declaration public bool IsRecursive { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source ObjectType Declaration public Type ObjectType { get; set; } Property Value Type Description Type Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source RegisterFieldMapping(SqlField) Declaration public void RegisterFieldMapping(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Implements IQueryElement ICloneableElement ISqlExpressionWalkable Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ConditionBase-2.html": {
    "href": "api/LinqToDB.SqlQuery.ConditionBase-2.html",
    "title": "Class ConditionBase<T1, T2> | Linq To DB (aka linq2db)",
    "keywords": "Class ConditionBase<T1, T2> Inheritance Object ConditionBase<T1, T2> ClauseBase<T1, T2> SqlFromClause.Join SqlSearchCondition Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class ConditionBase<T1, T2> : IConditionExpr<ConditionBase<T1, T2>.Expr_> where T1 : ConditionBase<T1, T2> Type Parameters Name Description T1 T2 Properties | Improve this Doc View Source Not Declaration public ConditionBase<T1, T2>.Not_ Not { get; } Property Value Type Description ConditionBase.Not_ <> | Improve this Doc View Source Search Declaration protected abstract SqlSearchCondition Search { get; } Property Value Type Description SqlSearchCondition Methods | Improve this Doc View Source Exists(SelectQuery) Declaration public T2 Exists(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Expr(ISqlExpression) Declaration public ConditionBase<T1, T2>.Expr_ Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source Field(SqlField) Declaration public ConditionBase<T1, T2>.Expr_ Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source GetNext() Declaration protected abstract T2 GetNext() Returns Type Description T2 | Improve this Doc View Source SetOr(Boolean) Declaration protected T1 SetOr(bool value) Parameters Type Name Description Boolean value Returns Type Description T1 | Improve this Doc View Source SubQuery(SelectQuery) Declaration public ConditionBase<T1, T2>.Expr_ SubQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source Value(Object) Declaration public ConditionBase<T1, T2>.Expr_ Value(object value) Parameters Type Name Description Object value Returns Type Description ConditionBase.Expr_ <> Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.ExtensionAttribute.ConvertHelper.html": {
    "href": "api/LinqToDB.Sql.ExtensionAttribute.ConvertHelper.html",
    "title": "Class Sql.ExtensionAttribute.ConvertHelper | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ExtensionAttribute.ConvertHelper Inheritance Object Sql.ExtensionAttribute.ConvertHelper Namespace : LinqToDB Assembly : linq2db.dll Syntax protected class ConvertHelper Constructors | Improve this Doc View Source ConvertHelper(Func<Expression, ISqlExpression>) Declaration public ConvertHelper(Func<Expression, ISqlExpression> converter) Parameters Type Name Description Func < Expression , ISqlExpression > converter Methods | Improve this Doc View Source Convert(Expression) Declaration public ISqlExpression Convert(Expression exp) Parameters Type Name Description Expression exp Returns Type Description ISqlExpression Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.ExpressionAttribute.html": {
    "href": "api/LinqToDB.Sql.ExpressionAttribute.html",
    "title": "Class Sql.ExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ExpressionAttribute Inheritance Object Attribute Sql.ExpressionAttribute Sql.DatePartAttribute Sql.ExtensionAttribute Sql.FunctionAttribute Sql.PropertyAttribute Implements _Attribute Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true, Inherited = false)] public class ExpressionAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ExpressionAttribute(String) Declaration public ExpressionAttribute(string expression) Parameters Type Name Description String expression | Improve this Doc View Source ExpressionAttribute(String, Int32[]) Declaration public ExpressionAttribute(string expression, params int[] argIndices) Parameters Type Name Description String expression Int32 [] argIndices | Improve this Doc View Source ExpressionAttribute(String, String) Declaration public ExpressionAttribute(string configuration, string expression) Parameters Type Name Description String configuration String expression | Improve this Doc View Source ExpressionAttribute(String, String, Int32[]) Declaration public ExpressionAttribute(string configuration, string expression, params int[] argIndices) Parameters Type Name Description String configuration String expression Int32 [] argIndices Properties | Improve this Doc View Source ArgIndices Declaration public int[] ArgIndices { get; set; } Property Value Type Description Int32 [] | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source ExpectExpression Declaration public bool ExpectExpression { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Expression Declaration public string Expression { get; set; } Property Value Type Description String | Improve this Doc View Source InlineParameters Declaration public bool InlineParameters { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsAggregate Declaration public bool IsAggregate { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsPredicate Declaration public bool IsPredicate { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Precedence Declaration public int Precedence { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PreferServerSide Declaration public bool PreferServerSide { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ServerSideOnly Declaration public bool ServerSideOnly { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source ConvertArgs(MemberInfo, ISqlExpression[]) Declaration protected ISqlExpression[] ConvertArgs(MemberInfo member, ISqlExpression[] args) Parameters Type Name Description MemberInfo member ISqlExpression [] args Returns Type Description ISqlExpression [] | Improve this Doc View Source GetExpression(MappingSchema, SelectQuery, Expression, Func<Expression, ISqlExpression>) Declaration public virtual ISqlExpression GetExpression(MappingSchema mapping, SelectQuery query, Expression expression, Func<Expression, ISqlExpression> converter) Parameters Type Name Description MappingSchema mapping SelectQuery query Expression expression Func < Expression , ISqlExpression > converter Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(MemberInfo, ISqlExpression[]) Declaration public virtual ISqlExpression GetExpression(MemberInfo member, params ISqlExpression[] args) Parameters Type Name Description MemberInfo member ISqlExpression [] args Returns Type Description ISqlExpression Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.EnumAttribute.html": {
    "href": "api/LinqToDB.Sql.EnumAttribute.html",
    "title": "Class Sql.EnumAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.EnumAttribute Inheritance Object Attribute Sql.EnumAttribute Implements _Attribute Namespace : LinqToDB Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Enum, AllowMultiple = false, Inherited = false)] public class EnumAttribute : Attribute, _Attribute Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.DateParts.html": {
    "href": "api/LinqToDB.Sql.DateParts.html",
    "title": "Enum Sql.DateParts | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.DateParts Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum DateParts Fields Name Description Day DayOfYear Hour Millisecond Minute Month Quarter Second Week WeekDay Year Extension Methods Sql.Between<Sql.DateParts>(Sql.DateParts, Sql.DateParts) Sql.NotBetween<Sql.DateParts>(Sql.DateParts, Sql.DateParts) SqlExtensions.In<Sql.DateParts>(IEnumerable<Sql.DateParts>) SqlExtensions.In<Sql.DateParts>(IQueryable<Sql.DateParts>) SqlExtensions.In<Sql.DateParts>(Sql.DateParts[]) SqlExtensions.In<Sql.DateParts>(Sql.DateParts, Sql.DateParts) SqlExtensions.In<Sql.DateParts>(Sql.DateParts, Sql.DateParts, Sql.DateParts) SqlExtensions.NotIn<Sql.DateParts>(IEnumerable<Sql.DateParts>) SqlExtensions.NotIn<Sql.DateParts>(IQueryable<Sql.DateParts>) SqlExtensions.NotIn<Sql.DateParts>(Sql.DateParts[]) SqlExtensions.NotIn<Sql.DateParts>(Sql.DateParts, Sql.DateParts) SqlExtensions.NotIn<Sql.DateParts>(Sql.DateParts, Sql.DateParts, Sql.DateParts)"
  },
  "api/LinqToDB.Sql.DatePartAttribute.html": {
    "href": "api/LinqToDB.Sql.DatePartAttribute.html",
    "title": "Class Sql.DatePartAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.DatePartAttribute Inheritance Object Attribute Sql.ExpressionAttribute Sql.DatePartAttribute Implements _Attribute Inherited Members Sql.ExpressionAttribute.Expression Sql.ExpressionAttribute.ArgIndices Sql.ExpressionAttribute.Precedence Sql.ExpressionAttribute.Configuration Sql.ExpressionAttribute.ServerSideOnly Sql.ExpressionAttribute.PreferServerSide Sql.ExpressionAttribute.InlineParameters Sql.ExpressionAttribute.ExpectExpression Sql.ExpressionAttribute.IsPredicate Sql.ExpressionAttribute.IsAggregate Sql.ExpressionAttribute.CanBeNull Sql.ExpressionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Sql.ExpressionAttribute.GetExpression(MappingSchema, SelectQuery, Expression, Func<Expression, ISqlExpression>) Namespace : LinqToDB Assembly : linq2db.dll Syntax [CLSCompliant(false)] public class DatePartAttribute : Sql.ExpressionAttribute, _Attribute Constructors | Improve this Doc View Source DatePartAttribute(String, String, Boolean, Int32, Int32[]) Declaration public DatePartAttribute(string sqlProvider, string expression, bool isExpression, int datePartIndex, params int[] argIndices) Parameters Type Name Description String sqlProvider String expression Boolean isExpression Int32 datePartIndex Int32 [] argIndices | Improve this Doc View Source DatePartAttribute(String, String, Boolean, String[], Int32, Int32[]) Declaration public DatePartAttribute(string sqlProvider, string expression, bool isExpression, string[] partMapping, int datePartIndex, params int[] argIndices) Parameters Type Name Description String sqlProvider String expression Boolean isExpression String [] partMapping Int32 datePartIndex Int32 [] argIndices | Improve this Doc View Source DatePartAttribute(String, String, Int32, Boolean, String[], Int32, Int32[]) Declaration public DatePartAttribute(string sqlProvider, string expression, int precedence, bool isExpression, string[] partMapping, int datePartIndex, params int[] argIndices) Parameters Type Name Description String sqlProvider String expression Int32 precedence Boolean isExpression String [] partMapping Int32 datePartIndex Int32 [] argIndices | Improve this Doc View Source DatePartAttribute(String, String, Int32, Int32[]) Declaration public DatePartAttribute(string sqlProvider, string expression, int datePartIndex, params int[] argIndices) Parameters Type Name Description String sqlProvider String expression Int32 datePartIndex Int32 [] argIndices Methods | Improve this Doc View Source GetExpression(MemberInfo, ISqlExpression[]) Declaration public override ISqlExpression GetExpression(MemberInfo member, params ISqlExpression[] args) Parameters Type Name Description MemberInfo member ISqlExpression [] args Returns Type Description ISqlExpression Overrides Sql.ExpressionAttribute.GetExpression(MemberInfo, ISqlExpression[]) Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.ConvertTo-1.html": {
    "href": "api/LinqToDB.Sql.ConvertTo-1.html",
    "title": "Class Sql.ConvertTo<TTo> | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ConvertTo<TTo> Inheritance Object Sql.ConvertTo<TTo> Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class ConvertTo<TTo> Type Parameters Name Description TTo Methods | Improve this Doc View Source From<TFrom>(TFrom) Declaration [CLSCompliant(false)] [Sql.Function(\"$Convert$\", new int[]{1, 2, 0})] public static TTo From<TFrom>(TFrom obj) Parameters Type Name Description TFrom obj Returns Type Description TTo Type Parameters Name Description TFrom"
  },
  "api/LinqToDB.Sql.AggregateModifier.html": {
    "href": "api/LinqToDB.Sql.AggregateModifier.html",
    "title": "Enum Sql.AggregateModifier | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.AggregateModifier Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum AggregateModifier Fields Name Description All Distinct None Extension Methods Sql.Between<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier) Sql.NotBetween<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier) SqlExtensions.In<Sql.AggregateModifier>(IEnumerable<Sql.AggregateModifier>) SqlExtensions.In<Sql.AggregateModifier>(IQueryable<Sql.AggregateModifier>) SqlExtensions.In<Sql.AggregateModifier>(Sql.AggregateModifier[]) SqlExtensions.In<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier) SqlExtensions.In<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier, Sql.AggregateModifier) SqlExtensions.NotIn<Sql.AggregateModifier>(IEnumerable<Sql.AggregateModifier>) SqlExtensions.NotIn<Sql.AggregateModifier>(IQueryable<Sql.AggregateModifier>) SqlExtensions.NotIn<Sql.AggregateModifier>(Sql.AggregateModifier[]) SqlExtensions.NotIn<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier) SqlExtensions.NotIn<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier, Sql.AggregateModifier)"
  },
  "api/LinqToDB.ServiceModel.html": {
    "href": "api/LinqToDB.ServiceModel.html",
    "title": "Namespace LinqToDB.ServiceModel | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.ServiceModel Classes DataService<T> LinqService LinqServiceInfo LinqServiceQuery LinqServiceResult RemoteDataContextBase ServiceModelDataContext SoapDataContext Interfaces ILinqClient ILinqService ILinqSoapClient"
  },
  "api/LinqToDB.html": {
    "href": "api/LinqToDB.html",
    "title": "Namespace LinqToDB | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB Classes AnalyticFunctions AsyncExtensions Provides helper methods for asynchronous operations. CompiledQuery Provides API for compilation and caching of queries for reuse. DataContext Implements abstraction over non-persistent database connection that could be released after query or transaction execution. DataContextTransaction Explicit data context DataContext transaction wrapper. DataExtensions Data context extension methods. EntityCreatedEventArgs Provides data for the OnEntityCreated event. ExpressionMethodAttribute When applied to method or property, tells linq2db to replace them in queryable LINQ expression with another expression, returned by method, specified in this attribute. Requirements to expression method: expression method should be in the same class and replaced property of method; method could be private. When applied to property, expression: method should return function expression with the same return type as property type; expression method could take up to two parameters in any order - current object parameter and database connection context object. When applied to method: expression method should return function expression with the same return type as method return type; method cannot have void return type; parameters in expression method should go in the same order as in substituted method; expression could take method instance object as first parameter; expression could take database connection context object as last parameter; last method parameters could be ommited from expression method, but only if you don't add database connection context parameter. ExprParameterAttribute ExtensionlBuilderExtensions KeepConnectionAliveScope Explicit DataContext connection reuse scope. See KeepConnectionAlive for more details. LinqExtensions Contains extension methods for LINQ queries. LinqToDBConstants LinqToDBException Defines the base class for the namespace exceptions. MergeDefinition<TTarget, TSource> MergeDefinition<TTarget, TSource>.Operation MergeExtensions Contains extension methods for merge API. ProviderName Default names for providers. Sql Sql.ConvertTo<TTo> Sql.DatePartAttribute Sql.EnumAttribute Sql.ExpressionAttribute Sql.ExtensionAttribute Sql.ExtensionAttribute.ConvertHelper Sql.ExtensionAttribute.ExtensionBuilder Sql.FunctionAttribute Sql.PropertyAttribute Sql.SqlExtension Sql.SqlExtensionParam Sql.TableExpressionAttribute Sql.TableFunctionAttribute TempTable<T> Temporary table. Temporary table is a table, created when you create instance of this class and deleted when you dispose it. It uses regular tables even if underlying database supports temporary tables concept. Interfaces IDataContext Database connection abstraction interface. IEntityServices IExtensionsAdapter Interface to override default implementation of LINQ To DB async operations. IMergeable<TTarget, TSource> Merge command builder that have target table, source, match (ON) condition and at least one operation configured. You can add more operations to this type of builder or execute command. IMergeableOn<TTarget, TSource> Merge command builder that have only target table and source configured. Only operation available for this type of builder is match (ON) condition configuration. IMergeableSource<TTarget, TSource> Merge command builder that have target table, source and match (ON) condition configured. You can only add operations to this type of builder. IMergeableUsing<TTarget> Merge command builder that have only target table configured. Only operation available for this type of builder is source configuration. ITable<T> Table-like queryable source, e.g. table, view or table-valued function. Sql.IExtensionCallBuilder Sql.ISqExtensionBuilder Sql.ISqlExtension Enums DataType List of data types, supported by linq2db. Provider-level support depends on database capabilities and current implementation support level and could vary for different providers. MergeOperationType Sql.AggregateModifier Sql.DateParts Sql.From Sql.GroupBy Sql.Nulls Sql.NullsPosition SqlJoinType Defines join type. Used with join LINQ helpers. TakeHints Hints for Take Take<TSource>(IQueryable<TSource>, Int32, TakeHints) Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, TakeHints) ."
  },
  "api/LinqToDB.Tools.html": {
    "href": "api/LinqToDB.Tools.html",
    "title": "Namespace LinqToDB.Tools | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Tools Classes DataExtensions SqlExtensions"
  },
  "api/LinqToDB.Tools.SqlExtensions.html": {
    "href": "api/LinqToDB.Tools.SqlExtensions.html",
    "title": "Class SqlExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class SqlExtensions Inheritance Object SqlExtensions Namespace : LinqToDB.Tools Assembly : linq2db.dll Syntax public static class SqlExtensions Methods | Improve this Doc View Source In<T>(T, T, T) Declaration [ExpressionMethod(\"InImpl4\")] public static bool In<T>(this T value, T cmp1, T cmp2) Parameters Type Name Description T value T cmp1 T cmp2 Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source In<T>(T, T, T, T) Declaration [ExpressionMethod(\"InImpl5\")] public static bool In<T>(this T value, T cmp1, T cmp2, T cmp3) Parameters Type Name Description T value T cmp1 T cmp2 T cmp3 Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source In<T>(T, T[]) Declaration [ExpressionMethod(\"InImpl3\")] public static bool In<T>(this T value, params T[] sequence) Parameters Type Name Description T value T[] sequence Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source In<T>(T, IEnumerable<T>) Declaration [ExpressionMethod(\"InImpl1\")] public static bool In<T>(this T value, IEnumerable<T> sequence) Parameters Type Name Description T value IEnumerable <T> sequence Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source In<T>(T, IQueryable<T>) Declaration [ExpressionMethod(\"InImpl2\")] public static bool In<T>(this T value, IQueryable<T> sequence) Parameters Type Name Description T value IQueryable <T> sequence Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source NotIn<T>(T, T, T) Declaration [ExpressionMethod(\"NotInImpl4\")] public static bool NotIn<T>(this T value, T cmp1, T cmp2) Parameters Type Name Description T value T cmp1 T cmp2 Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source NotIn<T>(T, T, T, T) Declaration [ExpressionMethod(\"NotInImpl5\")] public static bool NotIn<T>(this T value, T cmp1, T cmp2, T cmp3) Parameters Type Name Description T value T cmp1 T cmp2 T cmp3 Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source NotIn<T>(T, T[]) Declaration [ExpressionMethod(\"NotInImpl3\")] public static bool NotIn<T>(this T value, params T[] sequence) Parameters Type Name Description T value T[] sequence Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source NotIn<T>(T, IEnumerable<T>) Declaration [ExpressionMethod(\"NotInImpl1\")] public static bool NotIn<T>(this T value, IEnumerable<T> sequence) Parameters Type Name Description T value IEnumerable <T> sequence Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source NotIn<T>(T, IQueryable<T>) Declaration [ExpressionMethod(\"NotInImpl2\")] public static bool NotIn<T>(this T value, IQueryable<T> sequence) Parameters Type Name Description T value IQueryable <T> sequence Returns Type Description Boolean Type Parameters Name Description T"
  },
  "api/LinqToDB.SqlQuery.ClauseBase.html": {
    "href": "api/LinqToDB.SqlQuery.ClauseBase.html",
    "title": "Class ClauseBase | Linq To DB (aka linq2db)",
    "keywords": "Class ClauseBase Inheritance Object ClauseBase SqlFromClause SqlGroupByClause SqlOrderByClause SqlSelectClause SqlWhereClause.Next Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class ClauseBase Constructors | Improve this Doc View Source ClauseBase(SelectQuery) Declaration protected ClauseBase(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source From Declaration public SqlFromClause From { get; } Property Value Type Description SqlFromClause | Improve this Doc View Source GroupBy Declaration public SqlGroupByClause GroupBy { get; } Property Value Type Description SqlGroupByClause | Improve this Doc View Source Having Declaration public SqlWhereClause Having { get; } Property Value Type Description SqlWhereClause | Improve this Doc View Source OrderBy Declaration public SqlOrderByClause OrderBy { get; } Property Value Type Description SqlOrderByClause | Improve this Doc View Source Select Declaration public SqlSelectClause Select { get; } Property Value Type Description SqlSelectClause | Improve this Doc View Source SelectQuery Declaration protected SelectQuery SelectQuery { get; } Property Value Type Description SelectQuery | Improve this Doc View Source Where Declaration public SqlWhereClause Where { get; } Property Value Type Description SqlWhereClause Methods | Improve this Doc View Source End() Declaration public SelectQuery End() Returns Type Description SelectQuery Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ClauseBase-2.html": {
    "href": "api/LinqToDB.SqlQuery.ClauseBase-2.html",
    "title": "Class ClauseBase<T1, T2> | Linq To DB (aka linq2db)",
    "keywords": "Class ClauseBase<T1, T2> Inheritance Object ConditionBase <T1, T2> ClauseBase<T1, T2> SqlWhereClause Inherited Members ConditionBase<T1, T2>.Search ConditionBase<T1, T2>.GetNext() ConditionBase<T1, T2>.SetOr(Boolean) ConditionBase<T1, T2>.Not ConditionBase<T1, T2>.Expr(ISqlExpression) ConditionBase<T1, T2>.Field(SqlField) ConditionBase<T1, T2>.SubQuery(SelectQuery) ConditionBase<T1, T2>.Value(Object) ConditionBase<T1, T2>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class ClauseBase<T1, T2> : ConditionBase<T1, T2>, IConditionExpr<ConditionBase<T1, T2>.Expr_> where T1 : ClauseBase<T1, T2> Type Parameters Name Description T1 T2 Constructors | Improve this Doc View Source ClauseBase(SelectQuery) Declaration protected ClauseBase(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source From Declaration public SqlFromClause From { get; } Property Value Type Description SqlFromClause | Improve this Doc View Source GroupBy Declaration public SqlGroupByClause GroupBy { get; } Property Value Type Description SqlGroupByClause | Improve this Doc View Source Having Declaration public SqlWhereClause Having { get; } Property Value Type Description SqlWhereClause | Improve this Doc View Source OrderBy Declaration public SqlOrderByClause OrderBy { get; } Property Value Type Description SqlOrderByClause | Improve this Doc View Source Select Declaration public SqlSelectClause Select { get; } Property Value Type Description SqlSelectClause | Improve this Doc View Source SelectQuery Declaration protected SelectQuery SelectQuery { get; } Property Value Type Description SelectQuery Methods | Improve this Doc View Source End() Declaration public SelectQuery End() Returns Type Description SelectQuery Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.html": {
    "href": "api/LinqToDB.SqlProvider.html",
    "title": "Namespace LinqToDB.SqlProvider | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.SqlProvider Classes BasicSqlBuilder BasicSqlOptimizer SqlProviderFlags ValueToSqlConverter Interfaces ISqlBuilder ISqlOptimizer Enums BasicSqlBuilder.Step ConvertType Delegates BasicSqlBuilder.ColumnSelector"
  },
  "api/LinqToDB.SqlProvider.ValueToSqlConverter.html": {
    "href": "api/LinqToDB.SqlProvider.ValueToSqlConverter.html",
    "title": "Class ValueToSqlConverter | Linq To DB (aka linq2db)",
    "keywords": "Class ValueToSqlConverter Inheritance Object ValueToSqlConverter Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public class ValueToSqlConverter Constructors | Improve this Doc View Source ValueToSqlConverter(ValueToSqlConverter[]) Declaration public ValueToSqlConverter(params ValueToSqlConverter[] converters) Parameters Type Name Description ValueToSqlConverter [] converters Methods | Improve this Doc View Source Convert(StringBuilder, SqlDataType, Object) Declaration public StringBuilder Convert(StringBuilder stringBuilder, SqlDataType dataType, object value) Parameters Type Name Description StringBuilder stringBuilder SqlDataType dataType Object value Returns Type Description StringBuilder | Improve this Doc View Source Convert(StringBuilder, Object) Declaration public StringBuilder Convert(StringBuilder stringBuilder, object value) Parameters Type Name Description StringBuilder stringBuilder Object value Returns Type Description StringBuilder | Improve this Doc View Source SetConverter(Type, Action<StringBuilder, SqlDataType, Object>) Declaration public void SetConverter(Type type, Action<StringBuilder, SqlDataType, object> converter) Parameters Type Name Description Type type Action < StringBuilder , SqlDataType , Object > converter | Improve this Doc View Source TryConvert(StringBuilder, SqlDataType, Object) Declaration public bool TryConvert(StringBuilder stringBuilder, SqlDataType dataType, object value) Parameters Type Name Description StringBuilder stringBuilder SqlDataType dataType Object value Returns Type Description Boolean | Improve this Doc View Source TryConvert(StringBuilder, Object) Declaration public bool TryConvert(StringBuilder stringBuilder, object value) Parameters Type Name Description StringBuilder stringBuilder Object value Returns Type Description Boolean Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.SqlProviderFlags.html": {
    "href": "api/LinqToDB.SqlProvider.SqlProviderFlags.html",
    "title": "Class SqlProviderFlags | Linq To DB (aka linq2db)",
    "keywords": "Class SqlProviderFlags Inheritance Object SqlProviderFlags Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public class SqlProviderFlags Properties | Improve this Doc View Source AcceptsTakeAsParameter Declaration public bool AcceptsTakeAsParameter { get; set; } Property Value Type Description Boolean | Improve this Doc View Source AcceptsTakeAsParameterIfSkip Declaration public bool AcceptsTakeAsParameterIfSkip { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CanCombineParameters Declaration public bool CanCombineParameters { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CustomFlags Flags for use by external providers. Declaration public List<string> CustomFlags { get; } Property Value Type Description List < String > | Improve this Doc View Source IsApplyJoinSupported Declaration public bool IsApplyJoinSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsCommonTableExpressionsSupported Provider supports CTE expressions. If provider does not support CTE, unsuported exception will be thrown when using CTE. Declaration public bool IsCommonTableExpressionsSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsCountSubQuerySupported Declaration public bool IsCountSubQuerySupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsCrossJoinSupported Provider supports: CROSS JOIN a Supported Declaration public bool IsCrossJoinSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsDistinctOrderBySupported Provider supports DISTINCT and ORDER BY with fields that are not in projection. Declaration public bool IsDistinctOrderBySupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsGroupByExpressionSupported Declaration public bool IsGroupByExpressionSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsIdentityParameterRequired Declaration public bool IsIdentityParameterRequired { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsInnerJoinAsCrossSupported Provider supports: INNER JOIN a ON 1 = 1 Declaration public bool IsInnerJoinAsCrossSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsInsertOrUpdateSupported Declaration public bool IsInsertOrUpdateSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsOrderByAggregateFunctionsSupported Provider supports aggregate functions in ORDER BY statement. Declaration public bool IsOrderByAggregateFunctionsSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsParameterOrderDependent Declaration public bool IsParameterOrderDependent { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSkipSupported Declaration public bool IsSkipSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSkipSupportedIfTake Declaration public bool IsSkipSupportedIfTake { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSubQueryColumnSupported Declaration public bool IsSubQueryColumnSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSubQueryOrderBySupported Declaration public bool IsSubQueryOrderBySupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSubQueryTakeSupported Declaration public bool IsSubQueryTakeSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSybaseBuggyGroupBy Declaration public bool IsSybaseBuggyGroupBy { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsTakeSupported Declaration public bool IsTakeSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsUpdateSetTableAliasSupported Declaration public bool IsUpdateSetTableAliasSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MaxInListValuesCount Declaration public int MaxInListValuesCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source TakeHintsSupported Declaration public TakeHints? TakeHintsSupported { get; set; } Property Value Type Description Nullable < TakeHints > Methods | Improve this Doc View Source GetAcceptsTakeAsParameterFlag(SelectQuery) Declaration public bool GetAcceptsTakeAsParameterFlag(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description Boolean | Improve this Doc View Source GetIsSkipSupportedFlag(SelectQuery) Declaration public bool GetIsSkipSupportedFlag(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description Boolean | Improve this Doc View Source GetIsTakeHintsSupported(TakeHints) Declaration public bool GetIsTakeHintsSupported(TakeHints hints) Parameters Type Name Description TakeHints hints Returns Type Description Boolean Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.ISqlOptimizer.html": {
    "href": "api/LinqToDB.SqlProvider.ISqlOptimizer.html",
    "title": "Interface ISqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlOptimizer Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public interface ISqlOptimizer Methods | Improve this Doc View Source ConvertExpression(ISqlExpression) Declaration ISqlExpression ConvertExpression(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description ISqlExpression | Improve this Doc View Source ConvertPredicate(SelectQuery, ISqlPredicate) Declaration ISqlPredicate ConvertPredicate(SelectQuery selectQuery, ISqlPredicate predicate) Parameters Type Name Description SelectQuery selectQuery ISqlPredicate predicate Returns Type Description ISqlPredicate | Improve this Doc View Source Finalize(SqlStatement) Declaration SqlStatement Finalize(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.ISqlBuilder.html": {
    "href": "api/LinqToDB.SqlProvider.ISqlBuilder.html",
    "title": "Interface ISqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlBuilder Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public interface ISqlBuilder Properties | Improve this Doc View Source Name Declaration string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source ApplyQueryHints(String, List<String>) Declaration string ApplyQueryHints(string sqlText, List<string> queryHints) Parameters Type Name Description String sqlText List < String > queryHints Returns Type Description String | Improve this Doc View Source BuildSql(Int32, SqlStatement, StringBuilder, Int32) Declaration void BuildSql(int commandNumber, SqlStatement statement, StringBuilder sb, int startIndent = 0) Parameters Type Name Description Int32 commandNumber SqlStatement statement StringBuilder sb Int32 startIndent | Improve this Doc View Source BuildTableName(StringBuilder, String, String, String) Declaration StringBuilder BuildTableName(StringBuilder sb, string database, string schema, string table) Parameters Type Name Description StringBuilder sb String database String schema String table Returns Type Description StringBuilder | Improve this Doc View Source CommandCount(SqlStatement) Declaration int CommandCount(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description Int32 | Improve this Doc View Source Convert(Object, ConvertType) Declaration object Convert(object value, ConvertType convertType) Parameters Type Name Description Object value ConvertType convertType Returns Type Description Object | Improve this Doc View Source ConvertTableName(StringBuilder, String, String, String) Declaration StringBuilder ConvertTableName(StringBuilder sb, string database, string schema, string table) Parameters Type Name Description StringBuilder sb String database String schema String table Returns Type Description StringBuilder | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression | Improve this Doc View Source GetMaxValueSql(EntityDescriptor, ColumnDescriptor) Declaration string GetMaxValueSql(EntityDescriptor entity, ColumnDescriptor column) Parameters Type Name Description EntityDescriptor entity ColumnDescriptor column Returns Type Description String | Improve this Doc View Source GetReserveSequenceValuesSql(Int32, String) Declaration string GetReserveSequenceValuesSql(int count, string sequenceName) Parameters Type Name Description Int32 count String sequenceName Returns Type Description String | Improve this Doc View Source PrintParameters(StringBuilder, IDbDataParameter[]) Declaration StringBuilder PrintParameters(StringBuilder sb, IDbDataParameter[] parameters) Parameters Type Name Description StringBuilder sb IDbDataParameter [] parameters Returns Type Description StringBuilder Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.ConvertType.html": {
    "href": "api/LinqToDB.SqlProvider.ConvertType.html",
    "title": "Enum ConvertType | Linq To DB (aka linq2db)",
    "keywords": "Enum ConvertType Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public enum ConvertType Fields Name Description ExceptionToErrorMessage Gets error message from a native exception. For example: SqlException -> SqlException.Message, OleDbException -> OleDbException.Errors[0].Message ExceptionToErrorNumber Gets error number from a native exception. For example: SqlException -> SqlException.Number, OleDbException -> OleDbException.Errors[0].NativeError NameToCommandParameter Provided name should be converted to command parameter name. For example: firstName -> @firstName for the following query: db.Parameter(&quot;@firstName&quot;) = \"John\"; ^ here NameToDatabase Provided name should be converted to query database. For example: MyDatabase -> [MyDatabase] for the following query: SELECT * FROM [MyDatabase]..[Person] ^ and ^ NameToOwner NameToQueryField Provided name should be converted to query field name. For example: FirstName -> [FirstName] for the following query: SELECT [FirstName] FROM Person WHERE ID = 1 ^ and ^ NameToQueryFieldAlias Provided name should be converted to query field alias. For example: ID -> \"ID\" for the following query: SELECT \"ID\" as \"ID\" FROM Person WHERE \"ID\" = 1 ^ ^ here NameToQueryParameter Provided name should be converted to query parameter name. For example: firstName -> @firstName for the following query: SELECT * FROM Person WHERE FirstName = @firstName ^ here NameToQueryTable Provided name should be converted to query table name. For example: Person -> [Person] for the following query: SELECT * FROM [Person] ^ and ^ NameToQueryTableAlias Provided name should be converted to query table alias. For example: table1 -> [table1] for the following query: SELECT * FROM [Person] [table1] ^ and ^ NameToSchema Provided name should be converted to query database. For example: dbo -> [dbo] for the following query: SELECT * FROM [ dbo ].[Person] ^ and ^ NameToSprocParameter Provided name should be converted to stored procedure parameter name. For example: firstName -> @firstName for the following query: db.Parameter(&quot;@firstName&quot;) = \"John\"; ^ here SprocParameterToName Provided stored procedure parameter name should be converted to name. For example: @firstName -> firstName for the following query: db.Parameter(&quot;@firstName&quot;) = \"John\"; ^ &apos;@' has to be removed Extension Methods Sql.Between<ConvertType>(ConvertType, ConvertType) Sql.NotBetween<ConvertType>(ConvertType, ConvertType) SqlExtensions.In<ConvertType>(IEnumerable<ConvertType>) SqlExtensions.In<ConvertType>(IQueryable<ConvertType>) SqlExtensions.In<ConvertType>(ConvertType[]) SqlExtensions.In<ConvertType>(ConvertType, ConvertType) SqlExtensions.In<ConvertType>(ConvertType, ConvertType, ConvertType) SqlExtensions.NotIn<ConvertType>(IEnumerable<ConvertType>) SqlExtensions.NotIn<ConvertType>(IQueryable<ConvertType>) SqlExtensions.NotIn<ConvertType>(ConvertType[]) SqlExtensions.NotIn<ConvertType>(ConvertType, ConvertType) SqlExtensions.NotIn<ConvertType>(ConvertType, ConvertType, ConvertType)"
  },
  "api/LinqToDB.SqlProvider.BasicSqlOptimizer.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlOptimizer.html",
    "title": "Class BasicSqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Class BasicSqlOptimizer Inheritance Object BasicSqlOptimizer FirebirdSqlOptimizer OracleSqlOptimizer Implements ISqlOptimizer Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public class BasicSqlOptimizer : ISqlOptimizer Constructors | Improve this Doc View Source BasicSqlOptimizer(SqlProviderFlags) Declaration protected BasicSqlOptimizer(SqlProviderFlags sqlProviderFlags) Parameters Type Name Description SqlProviderFlags sqlProviderFlags Properties | Improve this Doc View Source SqlProviderFlags Declaration public SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags Methods | Improve this Doc View Source Add(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Add(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Type type Returns Type Description ISqlExpression | Improve this Doc View Source Add(ISqlExpression, Int32) Declaration public ISqlExpression Add(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Add<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Add<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source AlternativeConvertToBoolean(SqlFunction, Int32) Declaration protected ISqlExpression AlternativeConvertToBoolean(SqlFunction func, int paramNumber) Parameters Type Name Description SqlFunction func Int32 paramNumber Returns Type Description ISqlExpression | Improve this Doc View Source CheckAliases(SqlStatement, Int32) Declaration protected void CheckAliases(SqlStatement statement, int maxLen) Parameters Type Name Description SqlStatement statement Int32 maxLen | Improve this Doc View Source ConvertConvertion(SqlFunction) Declaration protected virtual ISqlExpression ConvertConvertion(SqlFunction func) Parameters Type Name Description SqlFunction func Returns Type Description ISqlExpression | Improve this Doc View Source ConvertCountSubQuery(SelectQuery) Declaration public virtual bool ConvertCountSubQuery(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description Boolean | Improve this Doc View Source ConvertEqualPredicate(SqlPredicate.ExprExpr) Declaration protected ISqlPredicate ConvertEqualPredicate(SqlPredicate.ExprExpr expr) Parameters Type Name Description SqlPredicate.ExprExpr expr Returns Type Description ISqlPredicate | Improve this Doc View Source ConvertExpression(ISqlExpression) Declaration public virtual ISqlExpression ConvertExpression(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description ISqlExpression | Improve this Doc View Source ConvertPredicate(SelectQuery, ISqlPredicate) Declaration public virtual ISqlPredicate ConvertPredicate(SelectQuery selectQuery, ISqlPredicate predicate) Parameters Type Name Description SelectQuery selectQuery ISqlPredicate predicate Returns Type Description ISqlPredicate | Improve this Doc View Source Dec(ISqlExpression) Declaration public ISqlExpression Dec(ISqlExpression expr1) Parameters Type Name Description ISqlExpression expr1 Returns Type Description ISqlExpression | Improve this Doc View Source Div(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Div(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Type type Returns Type Description ISqlExpression | Improve this Doc View Source Div(ISqlExpression, Int32) Declaration public ISqlExpression Div(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Div<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Div<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source Finalize(SqlStatement) Declaration public virtual SqlStatement Finalize(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement | Improve this Doc View Source FloorBeforeConvert(SqlFunction) Declaration protected ISqlExpression FloorBeforeConvert(SqlFunction func) Parameters Type Name Description SqlFunction func Returns Type Description ISqlExpression | Improve this Doc View Source GetAlternativeDelete(SqlDeleteStatement) Declaration protected SqlDeleteStatement GetAlternativeDelete(SqlDeleteStatement deleteStatement) Parameters Type Name Description SqlDeleteStatement deleteStatement Returns Type Description SqlDeleteStatement | Improve this Doc View Source GetAlternativeUpdate(SqlUpdateStatement) Declaration protected SqlStatement GetAlternativeUpdate(SqlUpdateStatement updateStatement) Parameters Type Name Description SqlUpdateStatement updateStatement Returns Type Description SqlStatement | Improve this Doc View Source GetMaxDisplaySize(SqlDataType) Declaration protected virtual int GetMaxDisplaySize(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description Int32 | Improve this Doc View Source GetMaxLength(SqlDataType) Declaration protected virtual int GetMaxLength(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description Int32 | Improve this Doc View Source GetMaxPrecision(SqlDataType) Declaration protected virtual int GetMaxPrecision(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description Int32 | Improve this Doc View Source GetMaxScale(SqlDataType) Declaration protected virtual int GetMaxScale(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description Int32 | Improve this Doc View Source Inc(ISqlExpression) Declaration public ISqlExpression Inc(ISqlExpression expr1) Parameters Type Name Description ISqlExpression expr1 Returns Type Description ISqlExpression | Improve this Doc View Source IsDateDataType(ISqlExpression, String) Declaration protected static bool IsDateDataType(ISqlExpression expr, string dateName) Parameters Type Name Description ISqlExpression expr String dateName Returns Type Description Boolean | Improve this Doc View Source IsTimeDataType(ISqlExpression) Declaration protected static bool IsTimeDataType(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description Boolean | Improve this Doc View Source Mul(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Mul(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Type type Returns Type Description ISqlExpression | Improve this Doc View Source Mul(ISqlExpression, Int32) Declaration public ISqlExpression Mul(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Mul<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Mul<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source OptimizeJoins(SqlStatement) Declaration public void OptimizeJoins(SqlStatement statement) Parameters Type Name Description SqlStatement statement | Improve this Doc View Source Sub(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Sub(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Type type Returns Type Description ISqlExpression | Improve this Doc View Source Sub(ISqlExpression, Int32) Declaration public ISqlExpression Sub(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Sub<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Sub<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T Implements ISqlOptimizer Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.BasicSqlBuilder.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlBuilder.html",
    "title": "Class BasicSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class BasicSqlBuilder Inheritance Object BasicSqlBuilder FirebirdSqlBuilder PostgreSQLSqlBuilder SQLiteSqlBuilder Implements ISqlBuilder Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public abstract class BasicSqlBuilder : ISqlBuilder Constructors | Improve this Doc View Source BasicSqlBuilder(ISqlOptimizer, SqlProviderFlags, ValueToSqlConverter) Declaration protected BasicSqlBuilder(ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags, ValueToSqlConverter valueToSqlConverter) Parameters Type Name Description ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags ValueToSqlConverter valueToSqlConverter Fields | Improve this Doc View Source BuildStep Declaration protected BasicSqlBuilder.Step BuildStep Field Value Type Description BasicSqlBuilder.Step | Improve this Doc View Source EndLine Declaration protected static readonly char[] EndLine Field Value Type Description Char [] | Improve this Doc View Source Indent Declaration protected int Indent Field Value Type Description Int32 | Improve this Doc View Source SkipAlias Declaration protected bool SkipAlias Field Value Type Description Boolean | Improve this Doc View Source SqlOptimizer Declaration protected ISqlOptimizer SqlOptimizer Field Value Type Description ISqlOptimizer | Improve this Doc View Source SqlProviderFlags Declaration protected SqlProviderFlags SqlProviderFlags Field Value Type Description SqlProviderFlags | Improve this Doc View Source Statement Declaration protected SqlStatement Statement Field Value Type Description SqlStatement | Improve this Doc View Source StringBuilder Declaration protected StringBuilder StringBuilder Field Value Type Description StringBuilder | Improve this Doc View Source ValueToSqlConverter Declaration protected ValueToSqlConverter ValueToSqlConverter Field Value Type Description ValueToSqlConverter Properties | Improve this Doc View Source IsNestedJoinParenthesisRequired Declaration public virtual bool IsNestedJoinParenthesisRequired { get; } Property Value Type Description Boolean | Improve this Doc View Source IsNestedJoinSupported Declaration public virtual bool IsNestedJoinSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRecursiveCteKeywordRequired Declaration protected virtual bool IsRecursiveCteKeywordRequired { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Declaration public virtual string Name { get; } Property Value Type Description String | Improve this Doc View Source OffsetFirst Declaration protected virtual bool OffsetFirst { get; } Property Value Type Description Boolean | Improve this Doc View Source SkipFirst Declaration protected virtual bool SkipFirst { get; } Property Value Type Description Boolean | Improve this Doc View Source SkipFormat Declaration protected virtual string SkipFormat { get; } Property Value Type Description String | Improve this Doc View Source TakePercent Declaration protected virtual string TakePercent { get; } Property Value Type Description String | Improve this Doc View Source TakeTies Declaration protected virtual string TakeTies { get; } Property Value Type Description String | Improve this Doc View Source WrapJoinCondition True if it is needed to wrap join condition with () Declaration public virtual bool WrapJoinCondition { get; } Property Value Type Description Boolean Examples INNER JOIN Table2 t2 ON (t1.Value = t2.Value) Methods | Improve this Doc View Source Add<T>(ISqlExpression, ISqlExpression) Declaration protected ISqlExpression Add<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source AlternativeBuildSql(Boolean, Action, String) Declaration protected void AlternativeBuildSql(bool implementOrderBy, Action buildSql, string emptyOrderByValue) Parameters Type Name Description Boolean implementOrderBy Action buildSql String emptyOrderByValue | Improve this Doc View Source AlternativeBuildSql2(Action) Declaration protected void AlternativeBuildSql2(Action buildSql) Parameters Type Name Description Action buildSql | Improve this Doc View Source AlternativeGetSelectedColumns(SelectQuery, BasicSqlBuilder.ColumnSelector) Declaration protected IEnumerable<SqlColumn> AlternativeGetSelectedColumns(SelectQuery selectQuery, BasicSqlBuilder.ColumnSelector columnSelector) Parameters Type Name Description SelectQuery selectQuery BasicSqlBuilder.ColumnSelector columnSelector Returns Type Description IEnumerable < SqlColumn > | Improve this Doc View Source AppendIndent() Declaration protected StringBuilder AppendIndent() Returns Type Description StringBuilder | Improve this Doc View Source ApplyQueryHints(String, List<String>) Declaration public string ApplyQueryHints(string sql, List<string> queryHints) Parameters Type Name Description String sql List < String > queryHints Returns Type Description String | Improve this Doc View Source BuildBinaryExpression(SqlBinaryExpression) Declaration protected virtual void BuildBinaryExpression(SqlBinaryExpression expr) Parameters Type Name Description SqlBinaryExpression expr | Improve this Doc View Source BuildColumnExpression(SelectQuery, ISqlExpression, String, ref Boolean) Declaration protected virtual void BuildColumnExpression(SelectQuery selectQuery, ISqlExpression expr, string alias, ref bool addAlias) Parameters Type Name Description SelectQuery selectQuery ISqlExpression expr String alias Boolean addAlias | Improve this Doc View Source BuildColumns(SelectQuery) Declaration protected virtual void BuildColumns(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildCommand(SqlStatement, Int32) Declaration protected virtual void BuildCommand(SqlStatement statement, int commandNumber) Parameters Type Name Description SqlStatement statement Int32 commandNumber | Improve this Doc View Source BuildCreateTableFieldType(SqlField) Declaration protected virtual void BuildCreateTableFieldType(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source BuildCreateTableIdentityAttribute1(SqlField) Declaration protected virtual void BuildCreateTableIdentityAttribute1(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source BuildCreateTableIdentityAttribute2(SqlField) Declaration protected virtual void BuildCreateTableIdentityAttribute2(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source BuildCreateTableNullAttribute(SqlField, DefaultNullable) Declaration protected virtual void BuildCreateTableNullAttribute(SqlField field, DefaultNullable defaultNullable) Parameters Type Name Description SqlField field DefaultNullable defaultNullable | Improve this Doc View Source BuildCreateTablePrimaryKey(SqlCreateTableStatement, String, IEnumerable<String>) Declaration protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable<string> fieldNames) Parameters Type Name Description SqlCreateTableStatement createTable String pkName IEnumerable < String > fieldNames | Improve this Doc View Source BuildCreateTableStatement(SqlCreateTableStatement) Declaration protected virtual void BuildCreateTableStatement(SqlCreateTableStatement createTable) Parameters Type Name Description SqlCreateTableStatement createTable | Improve this Doc View Source BuildCteBody(SelectQuery) Declaration protected virtual void BuildCteBody(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildDataType(SqlDataType, Boolean) Declaration protected virtual void BuildDataType(SqlDataType type, bool createDbType) Parameters Type Name Description SqlDataType type Boolean createDbType | Improve this Doc View Source BuildDeleteClause(SqlDeleteStatement) Declaration protected virtual void BuildDeleteClause(SqlDeleteStatement deleteStatement) Parameters Type Name Description SqlDeleteStatement deleteStatement | Improve this Doc View Source BuildDeleteQuery(SqlDeleteStatement) Declaration protected virtual void BuildDeleteQuery(SqlDeleteStatement deleteStatement) Parameters Type Name Description SqlDeleteStatement deleteStatement | Improve this Doc View Source BuildDeleteQuery2(SqlDeleteStatement) Declaration protected void BuildDeleteQuery2(SqlDeleteStatement deleteStatement) Parameters Type Name Description SqlDeleteStatement deleteStatement | Improve this Doc View Source BuildDropTableStatement(SqlDropTableStatement) Declaration protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable) Parameters Type Name Description SqlDropTableStatement dropTable | Improve this Doc View Source BuildEmptyInsert(SqlInsertClause) Declaration protected virtual void BuildEmptyInsert(SqlInsertClause insertClause) Parameters Type Name Description SqlInsertClause insertClause | Improve this Doc View Source BuildEndCreateTableStatement(SqlCreateTableStatement) Declaration protected virtual void BuildEndCreateTableStatement(SqlCreateTableStatement createTable) Parameters Type Name Description SqlCreateTableStatement createTable | Improve this Doc View Source BuildExpression(ISqlExpression) Declaration protected StringBuilder BuildExpression(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description StringBuilder | Improve this Doc View Source BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) Declaration protected void BuildExpression(ISqlExpression expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound = true) Parameters Type Name Description ISqlExpression expr Boolean buildTableName Boolean checkParentheses Boolean throwExceptionIfTableNotFound | Improve this Doc View Source BuildExpression(ISqlExpression, Boolean, Boolean, String, ref Boolean, Boolean) Declaration protected virtual StringBuilder BuildExpression(ISqlExpression expr, bool buildTableName, bool checkParentheses, string alias, ref bool addAlias, bool throwExceptionIfTableNotFound = true) Parameters Type Name Description ISqlExpression expr Boolean buildTableName Boolean checkParentheses String alias Boolean addAlias Boolean throwExceptionIfTableNotFound Returns Type Description StringBuilder | Improve this Doc View Source BuildExpression(Int32, ISqlExpression) Declaration protected void BuildExpression(int precedence, ISqlExpression expr) Parameters Type Name Description Int32 precedence ISqlExpression expr | Improve this Doc View Source BuildFromClause(SqlStatement, SelectQuery) Declaration protected virtual void BuildFromClause(SqlStatement statement, SelectQuery selectQuery) Parameters Type Name Description SqlStatement statement SelectQuery selectQuery | Improve this Doc View Source BuildFunction(SqlFunction) Declaration protected virtual void BuildFunction(SqlFunction func) Parameters Type Name Description SqlFunction func | Improve this Doc View Source BuildGetIdentity(SqlInsertClause) Declaration protected virtual void BuildGetIdentity(SqlInsertClause insertClause) Parameters Type Name Description SqlInsertClause insertClause | Improve this Doc View Source BuildGroupByClause(SelectQuery) Declaration protected virtual void BuildGroupByClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildHavingClause(SelectQuery) Declaration protected virtual void BuildHavingClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildInsertClause(SqlStatement, SqlInsertClause, Boolean) Declaration protected void BuildInsertClause(SqlStatement statement, SqlInsertClause insertClause, bool addAlias) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause Boolean addAlias | Improve this Doc View Source BuildInsertClause(SqlStatement, SqlInsertClause, String, Boolean, Boolean) Declaration protected virtual void BuildInsertClause(SqlStatement statement, SqlInsertClause insertClause, string insertText, bool appendTableName, bool addAlias) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause String insertText Boolean appendTableName Boolean addAlias | Improve this Doc View Source BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) Declaration protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate) Parameters Type Name Description SqlInsertOrUpdateStatement insertOrUpdate | Improve this Doc View Source BuildInsertOrUpdateQueryAsMerge(SqlInsertOrUpdateStatement, String) Declaration protected virtual void BuildInsertOrUpdateQueryAsMerge(SqlInsertOrUpdateStatement insertOrUpdate, string fromDummyTable) Parameters Type Name Description SqlInsertOrUpdateStatement insertOrUpdate String fromDummyTable | Improve this Doc View Source BuildInsertOrUpdateQueryAsUpdateInsert(SqlInsertOrUpdateStatement) Declaration protected void BuildInsertOrUpdateQueryAsUpdateInsert(SqlInsertOrUpdateStatement insertOrUpdate) Parameters Type Name Description SqlInsertOrUpdateStatement insertOrUpdate | Improve this Doc View Source BuildInsertQuery(SqlStatement, SqlInsertClause, Boolean) Declaration protected virtual void BuildInsertQuery(SqlStatement statement, SqlInsertClause insertClause, bool addAlias) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause Boolean addAlias | Improve this Doc View Source BuildInsertQuery2(SqlStatement, SqlInsertClause, Boolean) Declaration protected void BuildInsertQuery2(SqlStatement statement, SqlInsertClause insertClause, bool addAlias) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause Boolean addAlias | Improve this Doc View Source BuildJoinType(SqlJoinedTable) Declaration protected virtual bool BuildJoinType(SqlJoinedTable join) Parameters Type Name Description SqlJoinedTable join Returns Type Description Boolean | Improve this Doc View Source BuildLikePredicate(SqlPredicate.Like) Declaration protected virtual void BuildLikePredicate(SqlPredicate.Like predicate) Parameters Type Name Description SqlPredicate.Like predicate | Improve this Doc View Source BuildOffsetLimit(SelectQuery) Declaration protected virtual void BuildOffsetLimit(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildOrderByClause(SelectQuery) Declaration protected virtual void BuildOrderByClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildOutputSubclause(SqlStatement, SqlInsertClause) Declaration protected virtual void BuildOutputSubclause(SqlStatement statement, SqlInsertClause insertClause) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause | Improve this Doc View Source BuildPhysicalTable(ISqlTableSource, String) Declaration protected void BuildPhysicalTable(ISqlTableSource table, string alias) Parameters Type Name Description ISqlTableSource table String alias | Improve this Doc View Source BuildPredicate(ISqlPredicate) Declaration protected virtual void BuildPredicate(ISqlPredicate predicate) Parameters Type Name Description ISqlPredicate predicate | Improve this Doc View Source BuildPredicate(Int32, ISqlPredicate) Declaration protected void BuildPredicate(int parentPrecedence, ISqlPredicate predicate) Parameters Type Name Description Int32 parentPrecedence ISqlPredicate predicate | Improve this Doc View Source BuildPredicate(Int32, Int32, ISqlPredicate) Declaration protected void BuildPredicate(int parentPrecedence, int precedence, ISqlPredicate predicate) Parameters Type Name Description Int32 parentPrecedence Int32 precedence ISqlPredicate predicate | Improve this Doc View Source BuildSearchCondition(SqlSearchCondition) Declaration protected virtual void BuildSearchCondition(SqlSearchCondition condition) Parameters Type Name Description SqlSearchCondition condition | Improve this Doc View Source BuildSearchCondition(Int32, SqlSearchCondition) Declaration protected virtual void BuildSearchCondition(int parentPrecedence, SqlSearchCondition condition) Parameters Type Name Description Int32 parentPrecedence SqlSearchCondition condition | Improve this Doc View Source BuildSelectClause(SelectQuery) Declaration protected virtual void BuildSelectClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildSelectQuery(SqlSelectStatement) Declaration protected virtual void BuildSelectQuery(SqlSelectStatement selectStatement) Parameters Type Name Description SqlSelectStatement selectStatement | Improve this Doc View Source BuildSkipFirst(SelectQuery) Declaration protected virtual void BuildSkipFirst(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildSql() Declaration protected virtual void BuildSql() | Improve this Doc View Source BuildSql(Int32, SqlStatement, StringBuilder, Int32) Declaration public void BuildSql(int commandNumber, SqlStatement statement, StringBuilder sb, int startIndent = 0) Parameters Type Name Description Int32 commandNumber SqlStatement statement StringBuilder sb Int32 startIndent | Improve this Doc View Source BuildSql(Int32, SqlStatement, StringBuilder, Int32, Boolean) Declaration protected virtual void BuildSql(int commandNumber, SqlStatement statement, StringBuilder sb, int indent, bool skipAlias) Parameters Type Name Description Int32 commandNumber SqlStatement statement StringBuilder sb Int32 indent Boolean skipAlias | Improve this Doc View Source BuildSqlBuilder(SelectQuery, Int32, Boolean) Declaration protected virtual void BuildSqlBuilder(SelectQuery selectQuery, int indent, bool skipAlias) Parameters Type Name Description SelectQuery selectQuery Int32 indent Boolean skipAlias | Improve this Doc View Source BuildStartCreateTableStatement(SqlCreateTableStatement) Declaration protected virtual void BuildStartCreateTableStatement(SqlCreateTableStatement createTable) Parameters Type Name Description SqlCreateTableStatement createTable | Improve this Doc View Source BuildTableName(SqlTableSource, Boolean, Boolean) Declaration protected void BuildTableName(SqlTableSource ts, bool buildName, bool buildAlias) Parameters Type Name Description SqlTableSource ts Boolean buildName Boolean buildAlias | Improve this Doc View Source BuildTableName(StringBuilder, String, String, String) Declaration public virtual StringBuilder BuildTableName(StringBuilder sb, string database, string schema, string table) Parameters Type Name Description StringBuilder sb String database String schema String table Returns Type Description StringBuilder | Improve this Doc View Source BuildTakeHints(SelectQuery) Declaration protected virtual void BuildTakeHints(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildTruncateTable(SqlTruncateTableStatement) Declaration protected virtual void BuildTruncateTable(SqlTruncateTableStatement truncateTable) Parameters Type Name Description SqlTruncateTableStatement truncateTable | Improve this Doc View Source BuildTruncateTableStatement(SqlTruncateTableStatement) Declaration protected virtual void BuildTruncateTableStatement(SqlTruncateTableStatement truncateTable) Parameters Type Name Description SqlTruncateTableStatement truncateTable | Improve this Doc View Source BuildUnknownQuery() Declaration protected virtual void BuildUnknownQuery() | Improve this Doc View Source BuildUpdateClause(SqlStatement, SelectQuery, SqlUpdateClause) Declaration protected virtual void BuildUpdateClause(SqlStatement statement, SelectQuery selectQuery, SqlUpdateClause updateClause) Parameters Type Name Description SqlStatement statement SelectQuery selectQuery SqlUpdateClause updateClause | Improve this Doc View Source BuildUpdateQuery(SqlStatement, SelectQuery, SqlUpdateClause) Declaration protected virtual void BuildUpdateQuery(SqlStatement statement, SelectQuery selectQuery, SqlUpdateClause updateClause) Parameters Type Name Description SqlStatement statement SelectQuery selectQuery SqlUpdateClause updateClause | Improve this Doc View Source BuildUpdateSet(SelectQuery, SqlUpdateClause) Declaration protected virtual void BuildUpdateSet(SelectQuery selectQuery, SqlUpdateClause updateClause) Parameters Type Name Description SelectQuery selectQuery SqlUpdateClause updateClause | Improve this Doc View Source BuildUpdateTable(SelectQuery, SqlUpdateClause) Declaration protected virtual void BuildUpdateTable(SelectQuery selectQuery, SqlUpdateClause updateClause) Parameters Type Name Description SelectQuery selectQuery SqlUpdateClause updateClause | Improve this Doc View Source BuildUpdateTableName(SelectQuery, SqlUpdateClause) Declaration protected virtual void BuildUpdateTableName(SelectQuery selectQuery, SqlUpdateClause updateClause) Parameters Type Name Description SelectQuery selectQuery SqlUpdateClause updateClause | Improve this Doc View Source BuildValue(SqlDataType, Object) Declaration protected void BuildValue(SqlDataType dataType, object value) Parameters Type Name Description SqlDataType dataType Object value | Improve this Doc View Source BuildWhere(SelectQuery) Declaration protected virtual bool BuildWhere(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description Boolean | Improve this Doc View Source BuildWhereClause(SelectQuery) Declaration protected virtual void BuildWhereClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildWhereSearchCondition(SelectQuery, SqlSearchCondition) Declaration protected virtual void BuildWhereSearchCondition(SelectQuery selectQuery, SqlSearchCondition condition) Parameters Type Name Description SelectQuery selectQuery SqlSearchCondition condition | Improve this Doc View Source BuildWithClause(SqlWithClause) Declaration protected virtual void BuildWithClause(SqlWithClause with) Parameters Type Name Description SqlWithClause with | Improve this Doc View Source CommandCount(SqlStatement) Declaration public virtual int CommandCount(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description Int32 | Improve this Doc View Source Convert(Object, ConvertType) Declaration public virtual object Convert(object value, ConvertType convertType) Parameters Type Name Description Object value ConvertType convertType Returns Type Description Object | Improve this Doc View Source ConvertFunctionParameters(SqlFunction) Declaration protected SqlFunction ConvertFunctionParameters(SqlFunction func) Parameters Type Name Description SqlFunction func Returns Type Description SqlFunction | Improve this Doc View Source ConvertTableName(StringBuilder, String, String, String) Declaration public virtual StringBuilder ConvertTableName(StringBuilder sb, string database, string schema, string table) Parameters Type Name Description StringBuilder sb String database String schema String table Returns Type Description StringBuilder | Improve this Doc View Source CreateSqlBuilder() Declaration protected abstract ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder | Improve this Doc View Source ExtractMergeParametersIfCannotCombine(SqlInsertOrUpdateStatement, List<SqlSetExpression>) Declaration protected void ExtractMergeParametersIfCannotCombine(SqlInsertOrUpdateStatement insertOrUpdate, List<SqlSetExpression> keys) Parameters Type Name Description SqlInsertOrUpdateStatement insertOrUpdate List < SqlSetExpression > keys | Improve this Doc View Source FirstFormat(SelectQuery) Declaration protected virtual string FirstFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description String | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration public virtual ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression | Improve this Doc View Source GetMaxValueSql(EntityDescriptor, ColumnDescriptor) Declaration public virtual string GetMaxValueSql(EntityDescriptor entity, ColumnDescriptor column) Parameters Type Name Description EntityDescriptor entity ColumnDescriptor column Returns Type Description String | Improve this Doc View Source GetPrecedence(ISqlPredicate) Declaration protected static int GetPrecedence(ISqlPredicate predicate) Parameters Type Name Description ISqlPredicate predicate Returns Type Description Int32 | Improve this Doc View Source GetProviderTypeName(IDbDataParameter) Declaration protected virtual string GetProviderTypeName(IDbDataParameter parameter) Parameters Type Name Description IDbDataParameter parameter Returns Type Description String | Improve this Doc View Source GetReserveSequenceValuesSql(Int32, String) Declaration public virtual string GetReserveSequenceValuesSql(int count, string sequenceName) Parameters Type Name Description Int32 count String sequenceName Returns Type Description String | Improve this Doc View Source GetSelectedColumns(SelectQuery) Declaration protected virtual IEnumerable<SqlColumn> GetSelectedColumns(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description IEnumerable < SqlColumn > | Improve this Doc View Source GetSequenceNameAttribute(SqlTable, Boolean) Declaration protected SequenceNameAttribute GetSequenceNameAttribute(SqlTable table, bool throwException) Parameters Type Name Description SqlTable table Boolean throwException Returns Type Description SequenceNameAttribute | Improve this Doc View Source GetTableAlias(ISqlTableSource) Declaration protected static string GetTableAlias(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description String | Improve this Doc View Source GetTableDatabaseName(SqlTable) Declaration protected virtual string GetTableDatabaseName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description String | Improve this Doc View Source GetTableOwnerName(SqlTable) Declaration [Obsolete(\"Use GetTableSchemaName instead.\")] protected virtual string GetTableOwnerName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description String | Improve this Doc View Source GetTablePhysicalName(SqlTable) Declaration protected virtual string GetTablePhysicalName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description String | Improve this Doc View Source GetTableSchemaName(SqlTable) Declaration protected virtual string GetTableSchemaName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description String | Improve this Doc View Source GetTempAliases(Int32, String) Declaration protected string[] GetTempAliases(int n, string defaultAlias) Parameters Type Name Description Int32 n String defaultAlias Returns Type Description String [] | Improve this Doc View Source GetTypeName(IDbDataParameter) Declaration protected virtual string GetTypeName(IDbDataParameter parameter) Parameters Type Name Description IDbDataParameter parameter Returns Type Description String | Improve this Doc View Source GetUdtTypeName(IDbDataParameter) Declaration protected virtual string GetUdtTypeName(IDbDataParameter parameter) Parameters Type Name Description IDbDataParameter parameter Returns Type Description String | Improve this Doc View Source IsDateDataType(ISqlExpression, String) Declaration protected static bool IsDateDataType(ISqlExpression expr, string dateName) Parameters Type Name Description ISqlExpression expr String dateName Returns Type Description Boolean | Improve this Doc View Source IsReserved(String) Declaration protected virtual bool IsReserved(string word) Parameters Type Name Description String word Returns Type Description Boolean | Improve this Doc View Source IsTimeDataType(ISqlExpression) Declaration protected static bool IsTimeDataType(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description Boolean | Improve this Doc View Source LimitFormat(SelectQuery) Declaration protected virtual string LimitFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description String | Improve this Doc View Source NeedSkip(SelectQuery) Declaration protected bool NeedSkip(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description Boolean | Improve this Doc View Source NeedTake(SelectQuery) Declaration protected bool NeedTake(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description Boolean | Improve this Doc View Source OffsetFormat(SelectQuery) Declaration protected virtual string OffsetFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description String | Improve this Doc View Source ParenthesizeJoin(List<SqlJoinedTable>) Declaration protected virtual bool ParenthesizeJoin(List<SqlJoinedTable> joins) Parameters Type Name Description List < SqlJoinedTable > joins Returns Type Description Boolean | Improve this Doc View Source PrintParameterName(StringBuilder, IDbDataParameter) Declaration protected virtual void PrintParameterName(StringBuilder sb, IDbDataParameter parameter) Parameters Type Name Description StringBuilder sb IDbDataParameter parameter | Improve this Doc View Source PrintParameters(StringBuilder, IDbDataParameter[]) Declaration public virtual StringBuilder PrintParameters(StringBuilder sb, IDbDataParameter[] parameters) Parameters Type Name Description StringBuilder sb IDbDataParameter [] parameters Returns Type Description StringBuilder | Improve this Doc View Source PrintParameterType(StringBuilder, IDbDataParameter) Declaration protected virtual void PrintParameterType(StringBuilder sb, IDbDataParameter parameter) Parameters Type Name Description StringBuilder sb IDbDataParameter parameter | Improve this Doc View Source PrintParameterValue(StringBuilder, IDbDataParameter) Declaration protected virtual void PrintParameterValue(StringBuilder sb, IDbDataParameter parameter) Parameters Type Name Description StringBuilder sb IDbDataParameter parameter | Improve this Doc View Source WithStringBuilder<T>(StringBuilder, Func<T>) Declaration protected T WithStringBuilder<T>(StringBuilder sb, Func<T> func) Parameters Type Name Description StringBuilder sb Func <T> func Returns Type Description T Type Parameters Name Description T Implements ISqlBuilder Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.BasicSqlBuilder.Step.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlBuilder.Step.html",
    "title": "Enum BasicSqlBuilder.Step | Linq To DB (aka linq2db)",
    "keywords": "Enum BasicSqlBuilder.Step Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax protected enum Step Fields Name Description DeleteClause FromClause GroupByClause HavingClause InsertClause OffsetLimit OrderByClause SelectClause UpdateClause WhereClause WithClause Extension Methods Sql.Between<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step) Sql.NotBetween<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step) SqlExtensions.In<BasicSqlBuilder.Step>(IEnumerable<BasicSqlBuilder.Step>) SqlExtensions.In<BasicSqlBuilder.Step>(IQueryable<BasicSqlBuilder.Step>) SqlExtensions.In<BasicSqlBuilder.Step>(BasicSqlBuilder.Step[]) SqlExtensions.In<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step) SqlExtensions.In<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step, BasicSqlBuilder.Step) SqlExtensions.NotIn<BasicSqlBuilder.Step>(IEnumerable<BasicSqlBuilder.Step>) SqlExtensions.NotIn<BasicSqlBuilder.Step>(IQueryable<BasicSqlBuilder.Step>) SqlExtensions.NotIn<BasicSqlBuilder.Step>(BasicSqlBuilder.Step[]) SqlExtensions.NotIn<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step) SqlExtensions.NotIn<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step, BasicSqlBuilder.Step)"
  },
  "api/LinqToDB.SqlProvider.BasicSqlBuilder.ColumnSelector.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlBuilder.ColumnSelector.html",
    "title": "Delegate BasicSqlBuilder.ColumnSelector | Linq To DB (aka linq2db)",
    "keywords": "Delegate BasicSqlBuilder.ColumnSelector Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax protected delegate IEnumerable<SqlColumn> ColumnSelector(); Returns Type Description IEnumerable < SqlColumn > Extension Methods MethodHelper.GetMethodInfo(Delegate) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlJoinType.html": {
    "href": "api/LinqToDB.SqlJoinType.html",
    "title": "Enum SqlJoinType | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlJoinType Defines join type. Used with join LINQ helpers. Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum SqlJoinType Fields Name Description Full Full outer join. Inner Inner join. Left Left outer join. Right Right outer join. Extension Methods Sql.Between<SqlJoinType>(SqlJoinType, SqlJoinType) Sql.NotBetween<SqlJoinType>(SqlJoinType, SqlJoinType) SqlExtensions.In<SqlJoinType>(IEnumerable<SqlJoinType>) SqlExtensions.In<SqlJoinType>(IQueryable<SqlJoinType>) SqlExtensions.In<SqlJoinType>(SqlJoinType[]) SqlExtensions.In<SqlJoinType>(SqlJoinType, SqlJoinType) SqlExtensions.In<SqlJoinType>(SqlJoinType, SqlJoinType, SqlJoinType) SqlExtensions.NotIn<SqlJoinType>(IEnumerable<SqlJoinType>) SqlExtensions.NotIn<SqlJoinType>(IQueryable<SqlJoinType>) SqlExtensions.NotIn<SqlJoinType>(SqlJoinType[]) SqlExtensions.NotIn<SqlJoinType>(SqlJoinType, SqlJoinType) SqlExtensions.NotIn<SqlJoinType>(SqlJoinType, SqlJoinType, SqlJoinType)"
  },
  "api/LinqToDB.Sql.html": {
    "href": "api/LinqToDB.Sql.html",
    "title": "Class Sql | Linq To DB (aka linq2db)",
    "keywords": "Class Sql Inheritance Object Sql Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class Sql Properties | Improve this Doc View Source BigInt Declaration [Sql.Property(\"Oracle\", \"Number(19)\", ServerSideOnly = true)] [Sql.Property(\"BigInt\", ServerSideOnly = true)] public static long BigInt { get; } Property Value Type Description Int64 | Improve this Doc View Source Bit Declaration [Sql.Property(\"Informix\", \"Boolean\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"Boolean\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"Boolean\", ServerSideOnly = true)] [Sql.Property(\"SQLite\", \"Boolean\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"TinyInt\", ServerSideOnly = true)] [Sql.Property(\"Bit\", ServerSideOnly = true)] public static bool Bit { get; } Property Value Type Description Boolean | Improve this Doc View Source CurrentTimestamp Declaration [Sql.Property(\"CURRENT_TIMESTAMP\", ServerSideOnly = true)] [Sql.Property(\"Informix\", \"CURRENT\", ServerSideOnly = true)] [Sql.Property(\"Access\", \"Now\", ServerSideOnly = true)] [Sql.Function(\"SqlCe\", \"GetDate\", ServerSideOnly = true)] [Sql.Function(\"Sybase\", \"GetDate\", ServerSideOnly = true)] public static DateTime CurrentTimestamp { get; } Property Value Type Description DateTime | Improve this Doc View Source CurrentTimestamp2 Declaration [Sql.Property(\"CURRENT_TIMESTAMP\")] [Sql.Property(\"Informix\", \"CURRENT\")] [Sql.Property(\"Access\", \"Now\")] [Sql.Function(\"SqlCe\", \"GetDate\")] [Sql.Function(\"Sybase\", \"GetDate\")] public static DateTime CurrentTimestamp2 { get; } Property Value Type Description DateTime | Improve this Doc View Source Date Declaration [Sql.Property(\"SqlServer.2000\", \"Datetime\", ServerSideOnly = true)] [Sql.Property(\"SqlServer.2005\", \"Datetime\", ServerSideOnly = true)] [Sql.Property(\"SqlCe\", \"Datetime\", ServerSideOnly = true)] [Sql.Property(\"Date\", ServerSideOnly = true)] public static DateTime Date { get; } Property Value Type Description DateTime | Improve this Doc View Source DateFirst Declaration [Sql.Property(\"@@DATEFIRST\")] public static int DateFirst { get; } Property Value Type Description Int32 | Improve this Doc View Source DateTime Declaration [Sql.Property(\"PostgreSQL\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"DateTime\", ServerSideOnly = true)] public static DateTime DateTime { get; } Property Value Type Description DateTime | Improve this Doc View Source DateTime2 Declaration [Sql.Property(\"SqlServer.2000\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"SqlServer.2005\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"SqlCe\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"Sybase\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"DateTime2\", ServerSideOnly = true)] public static DateTime DateTime2 { get; } Property Value Type Description DateTime | Improve this Doc View Source DateTimeOffset Declaration [Sql.Property(\"PostgreSQL\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"SqlServer.2012\", \"DateTimeOffset\", ServerSideOnly = true)] [Sql.Property(\"SqlServer.2008\", \"DateTimeOffset\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"DateTime\", ServerSideOnly = true)] public static DateTimeOffset DateTimeOffset { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source DefaultChar Declaration [Sql.Property(\"SqlCe\", \"NChar\", ServerSideOnly = true)] [Sql.Property(\"Char\", ServerSideOnly = true)] public static string DefaultChar { get; } Property Value Type Description String | Improve this Doc View Source DefaultDecimal Declaration [Sql.Property(\"Decimal\", ServerSideOnly = true)] public static decimal DefaultDecimal { get; } Property Value Type Description Decimal | Improve this Doc View Source DefaultNChar Declaration [Sql.Property(\"DB2\", \"Char\", ServerSideOnly = true)] [Sql.Property(\"NChar\", ServerSideOnly = true)] public static string DefaultNChar { get; } Property Value Type Description String | Improve this Doc View Source DefaultNVarChar Declaration [Sql.Property(\"DB2\", \"Char\", ServerSideOnly = true)] [Sql.Property(\"Oracle\", \"VarChar2\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"VarChar\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"VarChar\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"Char\", ServerSideOnly = true)] [Sql.Property(\"NVarChar\", ServerSideOnly = true)] public static string DefaultNVarChar { get; } Property Value Type Description String | Improve this Doc View Source DefaultVarChar Declaration [Sql.Property(\"MySql\", \"Char\", ServerSideOnly = true)] [Sql.Property(\"SqlCe\", \"NVarChar\", ServerSideOnly = true)] [Sql.Property(\"VarChar\", ServerSideOnly = true)] public static string DefaultVarChar { get; } Property Value Type Description String | Improve this Doc View Source Ext Declaration public static Sql.ISqlExtension Ext { get; } Property Value Type Description Sql.ISqlExtension | Improve this Doc View Source Float Declaration [Sql.Property(\"MySql\", \"Decimal(29,10)\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"Double\", ServerSideOnly = true)] [Sql.Property(\"Float\", ServerSideOnly = true)] public static double Float { get; } Property Value Type Description Double | Improve this Doc View Source Int Declaration [Sql.Property(\"MySql\", \"Signed\", ServerSideOnly = true)] [Sql.Property(\"Int\", ServerSideOnly = true)] public static int Int { get; } Property Value Type Description Int32 | Improve this Doc View Source Money Declaration [Sql.Property(\"Oracle\", \"Number(19,4)\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"Decimal(18,4)\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"Decimal(19,4)\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"Decimal(19,4)\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"Decimal(19,4)\", ServerSideOnly = true)] [Sql.Property(\"Money\", ServerSideOnly = true)] public static decimal Money { get; } Property Value Type Description Decimal | Improve this Doc View Source Real Declaration [Sql.Property(\"MySql\", \"Decimal(29,10)\", ServerSideOnly = true)] [Sql.Property(\"Real\", ServerSideOnly = true)] public static float Real { get; } Property Value Type Description Single | Improve this Doc View Source SmallDateTime Declaration [Sql.Property(\"PostgreSQL\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"SqlCe\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"SecondDate\", ServerSideOnly = true)] [Sql.Property(\"SmallDateTime\", ServerSideOnly = true)] public static DateTime SmallDateTime { get; } Property Value Type Description DateTime | Improve this Doc View Source SmallInt Declaration [Sql.Property(\"MySql\", \"Signed\", ServerSideOnly = true)] [Sql.Property(\"SmallInt\", ServerSideOnly = true)] public static short SmallInt { get; } Property Value Type Description Int16 | Improve this Doc View Source SmallMoney Declaration [Sql.Property(\"Informix\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"Oracle\", \"Number(10,4)\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"SqlCe\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"SmallMoney\", ServerSideOnly = true)] public static decimal SmallMoney { get; } Property Value Type Description Decimal | Improve this Doc View Source Time Declaration [Sql.Property(\"Time\", ServerSideOnly = true)] public static DateTime Time { get; } Property Value Type Description DateTime | Improve this Doc View Source TinyInt Declaration [Sql.Property(\"DB2\", \"SmallInt\", ServerSideOnly = true)] [Sql.Property(\"Informix\", \"SmallInt\", ServerSideOnly = true)] [Sql.Property(\"Oracle\", \"Number(3)\", ServerSideOnly = true)] [Sql.Property(\"DB2\", \"SmallInt\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"SmallInt\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"SmallInt\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"Unsigned\", ServerSideOnly = true)] [Sql.Property(\"TinyInt\", ServerSideOnly = true)] public static byte TinyInt { get; } Property Value Type Description Byte Methods | Improve this Doc View Source Abs(Nullable<Decimal>) Declaration [Sql.Function] public static decimal? Abs(decimal? value) Parameters Type Name Description Nullable < Decimal > value Returns Type Description Nullable < Decimal > | Improve this Doc View Source Abs(Nullable<Double>) Declaration [Sql.Function] public static double? Abs(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Abs(Nullable<Int16>) Declaration [Sql.Function] public static short? Abs(short? value) Parameters Type Name Description Nullable < Int16 > value Returns Type Description Nullable < Int16 > | Improve this Doc View Source Abs(Nullable<Int32>) Declaration [Sql.Function] public static int? Abs(int? value) Parameters Type Name Description Nullable < Int32 > value Returns Type Description Nullable < Int32 > | Improve this Doc View Source Abs(Nullable<Int64>) Declaration [Sql.Function] public static long? Abs(long? value) Parameters Type Name Description Nullable < Int64 > value Returns Type Description Nullable < Int64 > | Improve this Doc View Source Abs(Nullable<SByte>) Declaration [CLSCompliant(false)] [Sql.Function] public static sbyte? Abs(sbyte? value) Parameters Type Name Description Nullable < SByte > value Returns Type Description Nullable < SByte > | Improve this Doc View Source Abs(Nullable<Single>) Declaration [Sql.Function] public static float? Abs(float? value) Parameters Type Name Description Nullable < Single > value Returns Type Description Nullable < Single > | Improve this Doc View Source Acos(Nullable<Double>) Declaration [Sql.Function] public static double? Acos(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source AllColumns() Declaration [Sql.Expression(\"*\", ServerSideOnly = true)] public static object[] AllColumns() Returns Type Description Object [] | Improve this Doc View Source Asin(Nullable<Double>) Declaration [Sql.Function] public static double? Asin(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source AsNotNull<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0}, CanBeNull = false)] public static T AsNotNull<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AsNotNullable<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0}, CanBeNull = false)] public static T AsNotNullable<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AsNullable<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0}, CanBeNull = true)] public static T AsNullable<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AsSql<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0}, ServerSideOnly = true)] public static T AsSql<T>(T obj) Parameters Type Name Description T obj Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Atan(Nullable<Double>) Declaration [Sql.Function(\"Access\", \"Atn\")] [Sql.Function] public static double? Atan(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Atan2(Nullable<Double>, Nullable<Double>) Declaration [CLSCompliant(false)] [Sql.Function(\"SqlServer\", \"Atn2\")] [Sql.Function(\"DB2\", \"Atan2\", new int[]{1, 0})] [Sql.Function(\"SqlCe\", \"Atn2\")] [Sql.Function(\"Sybase\", \"Atn2\")] [Sql.Function] public static double? Atan2(double? x, double? y) Parameters Type Name Description Nullable < Double > x Nullable < Double > y Returns Type Description Nullable < Double > | Improve this Doc View Source Between<T>(T, T, T) Declaration [Sql.Expression(\"{0} BETWEEN {1} AND {2}\", PreferServerSide = true, IsPredicate = true)] public static bool Between<T>(this T value, T low, T high) where T : IComparable Parameters Type Name Description T value T low T high Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source Between<T>(Nullable<T>, Nullable<T>, Nullable<T>) Declaration [Sql.Expression(\"{0} BETWEEN {1} AND {2}\", PreferServerSide = true, IsPredicate = true)] public static bool Between<T>(this T? value, T? low, T? high) where T : struct, IComparable Parameters Type Name Description Nullable <T> value Nullable <T> low Nullable <T> high Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source Ceiling(Nullable<Decimal>) Declaration [Sql.Function(\"Informix\", \"Ceil\")] [Sql.Function(\"Oracle\", \"Ceil\")] [Sql.Function(\"SapHana\", \"Ceil\")] [Sql.Function] public static decimal? Ceiling(decimal? value) Parameters Type Name Description Nullable < Decimal > value Returns Type Description Nullable < Decimal > | Improve this Doc View Source Ceiling(Nullable<Double>) Declaration [Sql.Function(\"Informix\", \"Ceil\")] [Sql.Function(\"Oracle\", \"Ceil\")] [Sql.Function(\"SapHana\", \"Ceil\")] [Sql.Function] public static double? Ceiling(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Char(Int32) Declaration [Sql.Function(\"SqlCe\", \"NChar\", ServerSideOnly = true)] [Sql.Function(ServerSideOnly = true)] public static string Char(int length) Parameters Type Name Description Int32 length Returns Type Description String | Improve this Doc View Source CharIndex(Nullable<Char>, String) Declaration [Sql.Function] [Sql.Function(\"DB2\", \"Locate\")] [Sql.Function(\"MySql\", \"Locate\")] [Sql.Function(\"SapHana\", \"Locate\")] public static int? CharIndex(char? value, string str) Parameters Type Name Description Nullable < Char > value String str Returns Type Description Nullable < Int32 > | Improve this Doc View Source CharIndex(Nullable<Char>, String, Nullable<Int32>) Declaration [Sql.Function] [Sql.Function(\"DB2\", \"Locate\")] [Sql.Function(\"MySql\", \"Locate\")] [Sql.Function(\"SapHana\", \"Locate\")] public static int? CharIndex(char? value, string str, int? startLocation) Parameters Type Name Description Nullable < Char > value String str Nullable < Int32 > startLocation Returns Type Description Nullable < Int32 > | Improve this Doc View Source CharIndex(String, String) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.Function(\"DB2\", \"Locate\")] [Sql.Function(\"MySql\", \"Locate\")] [Sql.Function(\"SapHana\", \"Locate\", new int[]{1, 0})] [Sql.Function(\"Firebird\", \"Position\")] public static int? CharIndex(string value, string str) Parameters Type Name Description String value String str Returns Type Description Nullable < Int32 > | Improve this Doc View Source CharIndex(String, String, Nullable<Int32>) Declaration [Sql.Function] [Sql.Function(\"DB2\", \"Locate\")] [Sql.Function(\"MySql\", \"Locate\")] [Sql.Function(\"Firebird\", \"Position\")] [Sql.Expression(\"SapHana\", \"Locate(Substring({1},{2} + 1),{0}) + {2}\")] public static int? CharIndex(string value, string str, int? startLocation) Parameters Type Name Description String value String str Nullable < Int32 > startLocation Returns Type Description Nullable < Int32 > | Improve this Doc View Source Concat(Object[]) Declaration public static string Concat(params object[] args) Parameters Type Name Description Object [] args Returns Type Description String | Improve this Doc View Source Concat(String[]) Declaration public static string Concat(params string[] args) Parameters Type Name Description String [] args Returns Type Description String | Improve this Doc View Source Convert<TTo, TFrom>(TTo, TFrom) Declaration [CLSCompliant(false)] [Sql.Function(\"Convert\", new int[]{0, 1}, ServerSideOnly = true)] public static TTo Convert<TTo, TFrom>(TTo to, TFrom from) Parameters Type Name Description TTo to TFrom from Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source Convert<TTo, TFrom>(TTo, TFrom, Int32) Declaration [CLSCompliant(false)] [Sql.Function(\"Convert\", new int[]{0, 1, 2}, ServerSideOnly = true)] public static TTo Convert<TTo, TFrom>(TTo to, TFrom from, int format) Parameters Type Name Description TTo to TFrom from Int32 format Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source Convert<TTo, TFrom>(TFrom) Declaration [CLSCompliant(false)] [Sql.Function(\"$Convert$\", new int[]{1, 2, 0})] public static TTo Convert<TTo, TFrom>(TFrom obj) Parameters Type Name Description TFrom obj Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source Convert2<TTo, TFrom>(TTo, TFrom) Declaration [CLSCompliant(false)] [Sql.Function(\"Convert\", new int[]{0, 1})] public static TTo Convert2<TTo, TFrom>(TTo to, TFrom from) Parameters Type Name Description TTo to TFrom from Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source ConvertNullable<T>(Nullable<T>) Declaration [Obsolete(\"Use ToNotNullable instead.\")] [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0})] public static T ConvertNullable<T>(T? value) where T : struct Parameters Type Name Description Nullable <T> value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Cos(Nullable<Double>) Declaration [Sql.Function] public static double? Cos(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Cosh(Nullable<Double>) Declaration [Sql.Function] public static double? Cosh(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Cot(Nullable<Double>) Declaration [Sql.Function] public static double? Cot(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source DateAdd(Sql.DateParts, Nullable<Double>, Nullable<DateTime>) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.DatePart(\"Oracle\", \"Add{0}\", false, 0, new int[]{2, 1})] [Sql.DatePart(\"DB2\", \"{{1}} + {0}\", 60, true, new string[]{\"{0} Year\", \"({0} * 3) Month\", \"{0} Month\", \"{0} Day\", \"{0} Day\", \"({0} * 7) Day\", \"{0} Day\", \"{0} Hour\", \"{0} Minute\", \"{0} Second\", \"({0} * 1000) Microsecond\"}, 0, new int[]{1, 2})] [Sql.DatePart(\"Informix\", \"{{1}} + Interval({0}\", 60, true, new string[]{\"{0}) Year to Year\", \"{0}) Month to Month * 3\", \"{0}) Month to Month\", \"{0}) Day to Day\", \"{0}) Day to Day\", \"{0}) Day to Day * 7\", \"{0}) Day to Day\", \"{0}) Hour to Hour\", \"{0}) Minute to Minute\", \"{0}) Second to Second\", null}, 0, new int[]{1, 2})] [Sql.DatePart(\"PostgreSQL\", \"{{1}} + {{0}} * Interval '1 {0}\", 60, true, new string[]{\"Year'\", \"Month' * 3\", \"Month'\", \"Day'\", \"Day'\", \"Day' * 7\", \"Day'\", \"Hour'\", \"Minute'\", \"Second'\", \"Millisecond'\"}, 0, new int[]{1, 2})] [Sql.DatePart(\"MySql\", \"Date_Add({{1}}, Interval {{0}} {0})\", true, new string[]{null, null, null, \"Day\", null, null, \"Day\", null, null, null, null}, 0, new int[]{1, 2})] [Sql.DatePart(\"SQLite\", \"DateTime({{1}}, {{0}} || ' {0}')\", true, new string[]{null, null, null, \"Day\", null, null, \"Day\", null, null, null, null}, 0, new int[]{1, 2})] [Sql.DatePart(\"Access\", \"DateAdd({0}, {{0}}, {{1}})\", true, new string[]{\"'yyyy'\", \"'q'\", \"'m'\", \"'y'\", \"'d'\", \"'ww'\", \"'w'\", \"'h'\", \"'n'\", \"'s'\", null}, 0, new int[]{1, 2})] [Sql.DatePart(\"SapHana\", \"Add_{0}\", true, new string[]{\"Years({1}, {0})\", \"Months({1}, {0} * 3)\", \"Months({1}, {0})\", \"Days({1}, {0})\", \"Days({1}, {0})\", \"Days({1}, {0} * 7)\", \"Days({1}, {0})\", \"Seconds({1}, {0} * 3600)\", \"Seconds({1}, {0} * 60)\", \"Seconds({1}, {0})\", null}, 0, new int[]{1, 2})] public static DateTime? DateAdd(Sql.DateParts part, double? number, DateTime? date) Parameters Type Name Description Sql.DateParts part Nullable < Double > number Nullable < DateTime > date Returns Type Description Nullable < DateTime > | Improve this Doc View Source DateDiff(Sql.DateParts, Nullable<DateTime>, Nullable<DateTime>) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.Function(\"MySql\", \"TIMESTAMPDIFF\")] [Sql.DatePart(\"SapHana\", \"{0}\", true, new string[]{null, null, null, null, \"Days_Between({0}, {1})\", null, null, \"Seconds_Between({0}, {1}) / 3600\", \"Seconds_Between({0}, {1}) / 60\", \"Seconds_Between({0}, {1})\", \"Nano100_Between({0}, {1}) / 10000\"}, 0, new int[]{1, 2})] public static int? DateDiff(Sql.DateParts part, DateTime? startDate, DateTime? endDate) Parameters Type Name Description Sql.DateParts part Nullable < DateTime > startDate Nullable < DateTime > endDate Returns Type Description Nullable < Int32 > | Improve this Doc View Source DatePart(Sql.DateParts, Nullable<DateTime>) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.DatePart(\"DB2\", \"{0}\", false, new string[]{null, null, null, null, null, null, \"DayOfWeek\", null, null, null, null}, 0, new int[]{1})] [Sql.DatePart(\"Informix\", \"{0}\", 0, new int[]{1})] [Sql.DatePart(\"MySql\", \"Extract({0} from {{0}})\", true, 0, new int[]{1})] [Sql.DatePart(\"PostgreSQL\", \"Cast(Floor(Extract({0} from {{0}})) as int)\", true, new string[]{null, null, null, \"DOY\", null, null, \"DOW\", null, null, null, null}, 0, new int[]{1})] [Sql.DatePart(\"Firebird\", \"Cast(Floor(Extract({0} from {{0}})) as int)\", true, new string[]{null, null, null, \"YearDay\", null, null, null, null, null, null, null}, 0, new int[]{1})] [Sql.DatePart(\"SQLite\", \"Cast(StrFTime({0}, {{0}}) as int)\", true, new string[]{\"'%Y'\", null, \"'%m'\", \"'%j'\", \"'%d'\", \"'%W'\", \"'%w'\", \"'%H'\", \"'%M'\", \"'%S'\", \"'%f'\"}, 0, new int[]{1})] [Sql.DatePart(\"Access\", \"DatePart({0}, {{0}})\", true, new string[]{\"'yyyy'\", \"'q'\", \"'m'\", \"'y'\", \"'d'\", \"'ww'\", \"'w'\", \"'h'\", \"'n'\", \"'s'\", null}, 0, new int[]{1})] [Sql.DatePart(\"SapHana\", \"{0}\", true, new string[]{\"Year({0})\", \"Floor((Month({0})-1) / 3) + 1\", \"Month({0})\", \"DayOfYear({0})\", \"DayOfMonth({0})\", \"Week({0})\", \"MOD(Weekday({0}) + 1, 7) + 1\", \"Hour({0})\", \"Minute({0})\", \"Second({0})\", null}, 0, new int[]{1})] [Sql.DatePart(\"Oracle\", \"{0}\", true, new string[]{\"To_Number(To_Char({0}, 'YYYY'))\", \"To_Number(To_Char({0}, 'Q'))\", \"To_Number(To_Char({0}, 'MM'))\", \"To_Number(To_Char({0}, 'DDD'))\", \"To_Number(To_Char({0}, 'DD'))\", \"To_Number(To_Char({0}, 'WW'))\", \"Mod(1 + Trunc({0}) - Trunc({0}, 'IW'), 7) + 1\", \"To_Number(To_Char({0}, 'HH24'))\", \"To_Number(To_Char({0}, 'MI'))\", \"To_Number(To_Char({0}, 'SS'))\", \"To_Number(To_Char({0}, 'FF'))\"}, 0, new int[]{1})] public static int? DatePart(Sql.DateParts part, DateTime? date) Parameters Type Name Description Sql.DateParts part Nullable < DateTime > date Returns Type Description Nullable < Int32 > | Improve this Doc View Source DateToTime(Nullable<DateTime>) Declaration [Sql.Expression(\"{0}\")] public static TimeSpan? DateToTime(DateTime? date) Parameters Type Name Description Nullable < DateTime > date Returns Type Description Nullable < TimeSpan > | Improve this Doc View Source Decimal(Int32) Declaration [Sql.Expression(\"SapHana\", \"Decimal({0},4)\", ServerSideOnly = true)] [Sql.Function(ServerSideOnly = true)] public static decimal Decimal(int precision) Parameters Type Name Description Int32 precision Returns Type Description Decimal | Improve this Doc View Source Decimal(Int32, Int32) Declaration [Sql.Function(ServerSideOnly = true)] public static decimal Decimal(int precision, int scale) Parameters Type Name Description Int32 precision Int32 scale Returns Type Description Decimal | Improve this Doc View Source Degrees(Nullable<Decimal>) Declaration [Sql.Function] public static decimal? Degrees(decimal? value) Parameters Type Name Description Nullable < Decimal > value Returns Type Description Nullable < Decimal > | Improve this Doc View Source Degrees(Nullable<Double>) Declaration [Sql.Function] public static double? Degrees(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Degrees(Nullable<Int16>) Declaration [Sql.Function] public static short? Degrees(short? value) Parameters Type Name Description Nullable < Int16 > value Returns Type Description Nullable < Int16 > | Improve this Doc View Source Degrees(Nullable<Int32>) Declaration [Sql.Function] public static int? Degrees(int? value) Parameters Type Name Description Nullable < Int32 > value Returns Type Description Nullable < Int32 > | Improve this Doc View Source Degrees(Nullable<Int64>) Declaration [Sql.Function] public static long? Degrees(long? value) Parameters Type Name Description Nullable < Int64 > value Returns Type Description Nullable < Int64 > | Improve this Doc View Source Degrees(Nullable<SByte>) Declaration [CLSCompliant(false)] [Sql.Function] public static sbyte? Degrees(sbyte? value) Parameters Type Name Description Nullable < SByte > value Returns Type Description Nullable < SByte > | Improve this Doc View Source Degrees(Nullable<Single>) Declaration [Sql.Function] public static float? Degrees(float? value) Parameters Type Name Description Nullable < Single > value Returns Type Description Nullable < Single > | Improve this Doc View Source Exp(Nullable<Double>) Declaration [Sql.Function] public static double? Exp(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Floor(Nullable<Decimal>) Declaration [Sql.Function(\"Access\", \"Int\")] [Sql.Function] public static decimal? Floor(decimal? value) Parameters Type Name Description Nullable < Decimal > value Returns Type Description Nullable < Decimal > | Improve this Doc View Source Floor(Nullable<Double>) Declaration [Sql.Function(\"Access\", \"Int\")] [Sql.Function] public static double? Floor(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source FreeText(Object, String) Declaration [Sql.Expression(\"FREETEXT({0}, {1})\", ServerSideOnly = true, IsPredicate = true)] public static bool FreeText(object table, string text) Parameters Type Name Description Object table String text Returns Type Description Boolean | Improve this Doc View Source GetDate() Declaration [Sql.Property(\"CURRENT_TIMESTAMP\")] [Sql.Property(\"Informix\", \"CURRENT\")] [Sql.Property(\"Access\", \"Now\")] public static DateTime GetDate() Returns Type Description DateTime | Improve this Doc View Source Left(String, Nullable<Int32>) Declaration [Sql.Function(PreferServerSide = true)] [Sql.Function(\"SQLite\", \"LeftStr\", PreferServerSide = true)] public static string Left(string str, int? length) Parameters Type Name Description String str Nullable < Int32 > length Returns Type Description String | Improve this Doc View Source Length(Binary) Declaration [Sql.Function(PreferServerSide = true)] [Sql.Function(\"Access\", \"Len\", PreferServerSide = true)] [Sql.Function(\"Firebird\", \"Octet_Length\", PreferServerSide = true)] [Sql.Function(\"SqlServer\", \"DataLength\", PreferServerSide = true)] [Sql.Function(\"SqlCe\", \"DataLength\", PreferServerSide = true)] [Sql.Function(\"Sybase\", \"DataLength\", PreferServerSide = true)] public static int? Length(Binary value) Parameters Type Name Description Binary value Returns Type Description Nullable < Int32 > | Improve this Doc View Source Length(String) Declaration [Sql.Function(PreferServerSide = true)] [Sql.Function(\"Access\", \"Len\", PreferServerSide = true)] [Sql.Function(\"Firebird\", \"Char_Length\", PreferServerSide = true)] [Sql.Function(\"SqlServer\", \"Len\", PreferServerSide = true)] [Sql.Function(\"SqlCe\", \"Len\", PreferServerSide = true)] [Sql.Function(\"Sybase\", \"Len\", PreferServerSide = true)] [Sql.Function(\"MySql\", \"Char_Length\", PreferServerSide = true)] [Sql.Expression(\"DB2.LUW\", \"CHARACTER_LENGTH({0},CODEUNITS32)\", PreferServerSide = true)] public static int? Length(string str) Parameters Type Name Description String str Returns Type Description Nullable < Int32 > | Improve this Doc View Source Like(String, String) Declaration [Sql.Function(ServerSideOnly = true)] public static bool Like(string matchExpression, string pattern) Parameters Type Name Description String matchExpression String pattern Returns Type Description Boolean | Improve this Doc View Source Like(String, String, Nullable<Char>) Declaration [Sql.Function(ServerSideOnly = true)] public static bool Like(string matchExpression, string pattern, char? escapeCharacter) Parameters Type Name Description String matchExpression String pattern Nullable < Char > escapeCharacter Returns Type Description Boolean | Improve this Doc View Source Log(Nullable<Decimal>) Declaration [Sql.Function(\"Informix\", \"LogN\")] [Sql.Function(\"Oracle\", \"Ln\")] [Sql.Function(\"Firebird\", \"Ln\")] [Sql.Function(\"PostgreSQL\", \"Ln\")] [Sql.Function(\"SapHana\", \"Ln\")] [Sql.Function] public static decimal? Log(decimal? value) Parameters Type Name Description Nullable < Decimal > value Returns Type Description Nullable < Decimal > | Improve this Doc View Source Log(Nullable<Decimal>, Nullable<Decimal>) Declaration [Sql.Function] public static decimal? Log(decimal? newBase, decimal? value) Parameters Type Name Description Nullable < Decimal > newBase Nullable < Decimal > value Returns Type Description Nullable < Decimal > | Improve this Doc View Source Log(Nullable<Double>) Declaration [Sql.Function(\"Informix\", \"LogN\")] [Sql.Function(\"Oracle\", \"Ln\")] [Sql.Function(\"Firebird\", \"Ln\")] [Sql.Function(\"PostgreSQL\", \"Ln\")] [Sql.Function(\"SapHana\", \"Ln\")] [Sql.Function] public static double? Log(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Log(Nullable<Double>, Nullable<Double>) Declaration [Sql.Function] public static double? Log(double? newBase, double? value) Parameters Type Name Description Nullable < Double > newBase Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Log10(Nullable<Double>) Declaration [Sql.Function(\"PostgreSQL\", \"Log\")] [Sql.Expression(\"SapHana\", \"Log(10,{0})\")] [Sql.Function] public static double? Log10(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Lower(String) Declaration [Sql.Function(ServerSideOnly = true)] [Sql.Function(\"Access\", \"LCase\", ServerSideOnly = true)] public static string Lower(string str) Parameters Type Name Description String str Returns Type Description String | Improve this Doc View Source MakeDateTime(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? MakeDateTime(int? year, int? month, int? day) Parameters Type Name Description Nullable < Int32 > year Nullable < Int32 > month Nullable < Int32 > day Returns Type Description Nullable < DateTime > | Improve this Doc View Source MakeDateTime(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? MakeDateTime(int? year, int? month, int? day, int? hour, int? minute, int? second) Parameters Type Name Description Nullable < Int32 > year Nullable < Int32 > month Nullable < Int32 > day Nullable < Int32 > hour Nullable < Int32 > minute Nullable < Int32 > second Returns Type Description Nullable < DateTime > | Improve this Doc View Source NChar(Int32) Declaration [Sql.Function(\"DB2\", \"Char\", ServerSideOnly = true)] [Sql.Function(ServerSideOnly = true)] public static string NChar(int length) Parameters Type Name Description Int32 length Returns Type Description String | Improve this Doc View Source NewGuid() Declaration [Sql.Function(\"Oracle\", \"Sys_Guid\", ServerSideOnly = true)] [Sql.Function(\"Firebird\", \"Gen_Uuid\", ServerSideOnly = true)] [Sql.Function(\"MySql\", \"Uuid\", ServerSideOnly = true)] [Sql.Expression(\"Sybase\", \"NewID(1)\", ServerSideOnly = true)] [Sql.Expression(\"SapHana\", \"SYSUUID\", ServerSideOnly = true)] [Sql.Function(\"NewID\", ServerSideOnly = true)] public static Guid NewGuid() Returns Type Description Guid | Improve this Doc View Source NoConvert<T>(T) Declaration [Sql.Extension(\"\", BuilderType = typeof(Sql.NoConvertBuilder), ServerSideOnly = true)] public static T NoConvert<T>(T expr) Parameters Type Name Description T expr Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source NotBetween<T>(T, T, T) Declaration [Sql.Expression(\"{0} NOT BETWEEN {1} AND {2}\", PreferServerSide = true, IsPredicate = true)] public static bool NotBetween<T>(this T value, T low, T high) where T : IComparable Parameters Type Name Description T value T low T high Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source NotBetween<T>(Nullable<T>, Nullable<T>, Nullable<T>) Declaration [Sql.Expression(\"{0} NOT BETWEEN {1} AND {2}\", PreferServerSide = true, IsPredicate = true)] public static bool NotBetween<T>(this T? value, T? low, T? high) where T : struct, IComparable Parameters Type Name Description Nullable <T> value Nullable <T> low Nullable <T> high Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source NVarChar(Int32) Declaration [Sql.Function(\"DB2\", \"Char\", ServerSideOnly = true)] [Sql.Function(\"Oracle\", \"VarChar2\", ServerSideOnly = true)] [Sql.Function(\"Firebird\", \"VarChar\", ServerSideOnly = true)] [Sql.Function(\"PostgreSQL\", \"VarChar\", ServerSideOnly = true)] [Sql.Function(\"MySql\", \"Char\", ServerSideOnly = true)] [Sql.Function(ServerSideOnly = true)] public static string NVarChar(int length) Parameters Type Name Description Int32 length Returns Type Description String | Improve this Doc View Source PadLeft(String, Nullable<Int32>, Nullable<Char>) Declaration [Sql.Function(Name = \"LPad\")] public static string PadLeft(string str, int? totalWidth, char? paddingChar) Parameters Type Name Description String str Nullable < Int32 > totalWidth Nullable < Char > paddingChar Returns Type Description String | Improve this Doc View Source PadRight(String, Nullable<Int32>, Nullable<Char>) Declaration [Sql.Function(Name = \"RPad\")] public static string PadRight(string str, int? totalWidth, char? paddingChar) Parameters Type Name Description String str Nullable < Int32 > totalWidth Nullable < Char > paddingChar Returns Type Description String | Improve this Doc View Source Power(Nullable<Double>, Nullable<Double>) Declaration [Sql.Expression(\"Access\", \"{0} ^ {1}\", Precedence = 80)] [Sql.Function] public static double? Power(double? x, double? y) Parameters Type Name Description Nullable < Double > x Nullable < Double > y Returns Type Description Nullable < Double > | Improve this Doc View Source Property<T>(Object, String) Allows access to entity property via name. Property can be dynamic or non-dynamic. Declaration public static T Property<T>(object entity, string propertyName) Parameters Type Name Description Object entity The entity. String propertyName Name of the property. Returns Type Description T Type Parameters Name Description T Property type. Exceptions Type Condition LinqException 'Property' is only server-side method. | Improve this Doc View Source Replace(String, Nullable<Char>, Nullable<Char>) Declaration [Sql.Function] [Sql.Function(\"Sybase\", \"Str_Replace\")] public static string Replace(string str, char? oldValue, char? newValue) Parameters Type Name Description String str Nullable < Char > oldValue Nullable < Char > newValue Returns Type Description String | Improve this Doc View Source Replace(String, String, String) Declaration [Sql.Function] [Sql.Function(\"Sybase\", \"Str_Replace\")] public static string Replace(string str, string oldValue, string newValue) Parameters Type Name Description String str String oldValue String newValue Returns Type Description String | Improve this Doc View Source Reverse(String) Declaration [Sql.Function] public static string Reverse(string str) Parameters Type Name Description String str Returns Type Description String | Improve this Doc View Source Right(String, Nullable<Int32>) Declaration [Sql.Function(PreferServerSide = true)] [Sql.Function(\"SQLite\", \"RightStr\", PreferServerSide = true)] public static string Right(string str, int? length) Parameters Type Name Description String str Nullable < Int32 > length Returns Type Description String | Improve this Doc View Source Round(Nullable<Decimal>) Declaration [Sql.Function] public static decimal? Round(decimal? value) Parameters Type Name Description Nullable < Decimal > value Returns Type Description Nullable < Decimal > | Improve this Doc View Source Round(Nullable<Decimal>, Nullable<Int32>) Declaration [Sql.Function] public static decimal? Round(decimal? value, int? precision) Parameters Type Name Description Nullable < Decimal > value Nullable < Int32 > precision Returns Type Description Nullable < Decimal > | Improve this Doc View Source Round(Nullable<Double>) Declaration [Sql.Function] public static double? Round(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Round(Nullable<Double>, Nullable<Int32>) Declaration [Sql.Function] public static double? Round(double? value, int? precision) Parameters Type Name Description Nullable < Double > value Nullable < Int32 > precision Returns Type Description Nullable < Double > | Improve this Doc View Source RoundToEven(Nullable<Decimal>) Declaration [Sql.Function] public static decimal? RoundToEven(decimal? value) Parameters Type Name Description Nullable < Decimal > value Returns Type Description Nullable < Decimal > | Improve this Doc View Source RoundToEven(Nullable<Decimal>, Nullable<Int32>) Declaration [Sql.Function] public static decimal? RoundToEven(decimal? value, int? precision) Parameters Type Name Description Nullable < Decimal > value Nullable < Int32 > precision Returns Type Description Nullable < Decimal > | Improve this Doc View Source RoundToEven(Nullable<Double>) Declaration [Sql.Function] public static double? RoundToEven(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source RoundToEven(Nullable<Double>, Nullable<Int32>) Declaration [Sql.Function] public static double? RoundToEven(double? value, int? precision) Parameters Type Name Description Nullable < Double > value Nullable < Int32 > precision Returns Type Description Nullable < Double > | Improve this Doc View Source Sign(Nullable<Decimal>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int? Sign(decimal? value) Parameters Type Name Description Nullable < Decimal > value Returns Type Description Nullable < Int32 > | Improve this Doc View Source Sign(Nullable<Double>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int? Sign(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Int32 > | Improve this Doc View Source Sign(Nullable<Int16>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int? Sign(short? value) Parameters Type Name Description Nullable < Int16 > value Returns Type Description Nullable < Int32 > | Improve this Doc View Source Sign(Nullable<Int32>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int? Sign(int? value) Parameters Type Name Description Nullable < Int32 > value Returns Type Description Nullable < Int32 > | Improve this Doc View Source Sign(Nullable<Int64>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int? Sign(long? value) Parameters Type Name Description Nullable < Int64 > value Returns Type Description Nullable < Int32 > | Improve this Doc View Source Sign(Nullable<SByte>) Declaration [CLSCompliant(false)] [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int? Sign(sbyte? value) Parameters Type Name Description Nullable < SByte > value Returns Type Description Nullable < Int32 > | Improve this Doc View Source Sign(Nullable<Single>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int? Sign(float? value) Parameters Type Name Description Nullable < Single > value Returns Type Description Nullable < Int32 > | Improve this Doc View Source Sin(Nullable<Double>) Declaration [Sql.Function] public static double? Sin(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Sinh(Nullable<Double>) Declaration [Sql.Function] public static double? Sinh(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Space(Nullable<Int32>) Declaration [Sql.Function] [Sql.Expression(\"SapHana\", \"Lpad('',{0},' ')\")] public static string Space(int? length) Parameters Type Name Description Nullable < Int32 > length Returns Type Description String | Improve this Doc View Source Sqrt(Nullable<Double>) Declaration [Sql.Function(\"Access\", \"Sqr\")] [Sql.Function] public static double? Sqrt(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Stuff(IEnumerable<String>, Nullable<Int32>, Nullable<Int32>, String) Declaration [Sql.Function(ServerSideOnly = true)] public static string Stuff(IEnumerable<string> characterExpression, int? start, int? length, string replaceWithExpression) Parameters Type Name Description IEnumerable < String > characterExpression Nullable < Int32 > start Nullable < Int32 > length String replaceWithExpression Returns Type Description String | Improve this Doc View Source Stuff(String, Nullable<Int32>, Nullable<Int32>, String) Declaration [Sql.Function] public static string Stuff(string str, int? startLocation, int? length, string value) Parameters Type Name Description String str Nullable < Int32 > startLocation Nullable < Int32 > length String value Returns Type Description String | Improve this Doc View Source Substring(String, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function(PreferServerSide = true)] [Sql.Function(\"Access\", \"Mid\", PreferServerSide = true)] [Sql.Function(\"DB2\", \"Substr\", PreferServerSide = true)] [Sql.Function(\"Informix\", \"Substr\", PreferServerSide = true)] [Sql.Function(\"Oracle\", \"Substr\", PreferServerSide = true)] [Sql.Function(\"SQLite\", \"Substr\", PreferServerSide = true)] [Sql.Expression(\"Firebird\", \"Substring({0} from {1} for {2})\", PreferServerSide = true)] [Sql.Function(\"SapHana\", \"Substring\", PreferServerSide = true)] public static string Substring(string str, int? startIndex, int? length) Parameters Type Name Description String str Nullable < Int32 > startIndex Nullable < Int32 > length Returns Type Description String | Improve this Doc View Source Tan(Nullable<Double>) Declaration [Sql.Function] public static double? Tan(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Tanh(Nullable<Double>) Declaration [Sql.Function] public static double? Tanh(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source ToDate(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? ToDate(int? year, int? month, int? day) Parameters Type Name Description Nullable < Int32 > year Nullable < Int32 > month Nullable < Int32 > day Returns Type Description Nullable < DateTime > | Improve this Doc View Source ToDate(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? ToDate(int? year, int? month, int? day, int? hour, int? minute, int? second) Parameters Type Name Description Nullable < Int32 > year Nullable < Int32 > month Nullable < Int32 > day Nullable < Int32 > hour Nullable < Int32 > minute Nullable < Int32 > second Returns Type Description Nullable < DateTime > | Improve this Doc View Source ToDate(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? ToDate(int? year, int? month, int? day, int? hour, int? minute, int? second, int? millisecond) Parameters Type Name Description Nullable < Int32 > year Nullable < Int32 > month Nullable < Int32 > day Nullable < Int32 > hour Nullable < Int32 > minute Nullable < Int32 > second Nullable < Int32 > millisecond Returns Type Description Nullable < DateTime > | Improve this Doc View Source ToNotNull<T>(Nullable<T>) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0})] public static T ToNotNull<T>(T? value) where T : struct Parameters Type Name Description Nullable <T> value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ToNotNullable<T>(Nullable<T>) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0})] public static T ToNotNullable<T>(T? value) where T : struct Parameters Type Name Description Nullable <T> value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ToNullable<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0})] public static T? ToNullable<T>(T value) where T : struct Parameters Type Name Description T value Returns Type Description Nullable <T> Type Parameters Name Description T | Improve this Doc View Source ToSql<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0}, ServerSideOnly = true, InlineParameters = true)] public static T ToSql<T>(T obj) Parameters Type Name Description T obj Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Trim(String) Declaration [Sql.Function] public static string Trim(string str) Parameters Type Name Description String str Returns Type Description String | Improve this Doc View Source Trim(String, Nullable<Char>) Declaration [Sql.Expression(\"DB2\", \"Strip({0}, B, {1})\")] [Sql.Function] public static string Trim(string str, char? ch) Parameters Type Name Description String str Nullable < Char > ch Returns Type Description String | Improve this Doc View Source TrimLeft(String) Declaration [Sql.Function(\"LTrim\")] public static string TrimLeft(string str) Parameters Type Name Description String str Returns Type Description String | Improve this Doc View Source TrimLeft(String, Nullable<Char>) Declaration [Sql.Expression(\"DB2\", \"Strip({0}, L, {1})\")] [Sql.Function(\"LTrim\")] public static string TrimLeft(string str, char? ch) Parameters Type Name Description String str Nullable < Char > ch Returns Type Description String | Improve this Doc View Source TrimRight(String) Declaration [Sql.Function(\"RTrim\")] public static string TrimRight(string str) Parameters Type Name Description String str Returns Type Description String | Improve this Doc View Source TrimRight(String, Nullable<Char>) Declaration [Sql.Expression(\"DB2\", \"Strip({0}, T, {1})\")] [Sql.Function(\"RTrim\")] public static string TrimRight(string str, char? ch) Parameters Type Name Description String str Nullable < Char > ch Returns Type Description String | Improve this Doc View Source Truncate(Nullable<Decimal>) Declaration [Sql.Expression(\"SqlServer\", \"Round({0}, 0, 1)\")] [Sql.Expression(\"DB2\", \"Truncate({0}, 0)\")] [Sql.Expression(\"Informix\", \"Trunc({0}, 0)\")] [Sql.Expression(\"Oracle\", \"Trunc({0}, 0)\")] [Sql.Expression(\"Firebird\", \"Trunc({0}, 0)\")] [Sql.Expression(\"PostgreSQL\", \"Trunc({0}, 0)\")] [Sql.Expression(\"MySql\", \"Truncate({0}, 0)\")] [Sql.Expression(\"SqlCe\", \"Round({0}, 0, 1)\")] [Sql.Expression(\"SapHana\", \"Round({0}, 0, ROUND_DOWN)\")] [Sql.Function] public static decimal? Truncate(decimal? value) Parameters Type Name Description Nullable < Decimal > value Returns Type Description Nullable < Decimal > | Improve this Doc View Source Truncate(Nullable<Double>) Declaration [Sql.Expression(\"SqlServer\", \"Round({0}, 0, 1)\")] [Sql.Expression(\"DB2\", \"Truncate({0}, 0)\")] [Sql.Expression(\"Informix\", \"Trunc({0}, 0)\")] [Sql.Expression(\"Oracle\", \"Trunc({0}, 0)\")] [Sql.Expression(\"Firebird\", \"Trunc({0}, 0)\")] [Sql.Expression(\"PostgreSQL\", \"Trunc({0}, 0)\")] [Sql.Expression(\"MySql\", \"Truncate({0}, 0)\")] [Sql.Expression(\"SqlCe\", \"Round({0}, 0, 1)\")] [Sql.Expression(\"SapHana\", \"Round({0}, 0, ROUND_DOWN)\")] [Sql.Function] public static double? Truncate(double? value) Parameters Type Name Description Nullable < Double > value Returns Type Description Nullable < Double > | Improve this Doc View Source Upper(String) Declaration [Sql.Function(ServerSideOnly = true)] [Sql.Function(\"Access\", \"UCase\", ServerSideOnly = true)] public static string Upper(string str) Parameters Type Name Description String str Returns Type Description String | Improve this Doc View Source VarChar(Int32) Declaration [Sql.Function(\"MySql\", \"Char\", ServerSideOnly = true)] [Sql.Function(\"SqlCe\", \"NVarChar\", ServerSideOnly = true)] [Sql.Function(ServerSideOnly = true)] public static string VarChar(int length) Parameters Type Name Description Int32 length Returns Type Description String"
  },
  "api/LinqToDB.Sql.TableFunctionAttribute.html": {
    "href": "api/LinqToDB.Sql.TableFunctionAttribute.html",
    "title": "Class Sql.TableFunctionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.TableFunctionAttribute Inheritance Object Attribute Sql.TableFunctionAttribute Sql.TableExpressionAttribute Implements _Attribute Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)] public class TableFunctionAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source TableFunctionAttribute() Declaration public TableFunctionAttribute() | Improve this Doc View Source TableFunctionAttribute(String) Declaration public TableFunctionAttribute(string name) Parameters Type Name Description String name | Improve this Doc View Source TableFunctionAttribute(String, Int32[]) Declaration public TableFunctionAttribute(string name, params int[] argIndices) Parameters Type Name Description String name Int32 [] argIndices | Improve this Doc View Source TableFunctionAttribute(String, String) Declaration public TableFunctionAttribute(string configuration, string name) Parameters Type Name Description String configuration String name | Improve this Doc View Source TableFunctionAttribute(String, String, Int32[]) Declaration public TableFunctionAttribute(string configuration, string name, params int[] argIndices) Parameters Type Name Description String configuration String name Int32 [] argIndices Properties | Improve this Doc View Source ArgIndices Declaration public int[] ArgIndices { get; set; } Property Value Type Description Int32 [] | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description String | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Schema Declaration public string Schema { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ConvertArgs(MemberInfo, ISqlExpression[]) Declaration protected ISqlExpression[] ConvertArgs(MemberInfo member, ISqlExpression[] args) Parameters Type Name Description MemberInfo member ISqlExpression [] args Returns Type Description ISqlExpression [] | Improve this Doc View Source SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>) Declaration public virtual void SetTable(MappingSchema mappingSchema, SqlTable table, MemberInfo member, IEnumerable<Expression> arguments, IEnumerable<ISqlExpression> sqlArgs) Parameters Type Name Description MappingSchema mappingSchema SqlTable table MemberInfo member IEnumerable < Expression > arguments IEnumerable < ISqlExpression > sqlArgs Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.TableExpressionAttribute.html": {
    "href": "api/LinqToDB.Sql.TableExpressionAttribute.html",
    "title": "Class Sql.TableExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.TableExpressionAttribute Inheritance Object Attribute Sql.TableFunctionAttribute Sql.TableExpressionAttribute CalculationViewInputParametersExpressionAttribute FreeTextTableExpressionAttribute Implements _Attribute Inherited Members Sql.TableFunctionAttribute.Configuration Sql.TableFunctionAttribute.Schema Sql.TableFunctionAttribute.Database Sql.TableFunctionAttribute.ArgIndices Sql.TableFunctionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)] public class TableExpressionAttribute : Sql.TableFunctionAttribute, _Attribute Constructors | Improve this Doc View Source TableExpressionAttribute(String) Declaration public TableExpressionAttribute(string expression) Parameters Type Name Description String expression | Improve this Doc View Source TableExpressionAttribute(String, Int32[]) Declaration public TableExpressionAttribute(string expression, params int[] argIndices) Parameters Type Name Description String expression Int32 [] argIndices | Improve this Doc View Source TableExpressionAttribute(String, String) Declaration public TableExpressionAttribute(string sqlProvider, string expression) Parameters Type Name Description String sqlProvider String expression | Improve this Doc View Source TableExpressionAttribute(String, String, Int32[]) Declaration public TableExpressionAttribute(string sqlProvider, string expression, params int[] argIndices) Parameters Type Name Description String sqlProvider String expression Int32 [] argIndices Properties | Improve this Doc View Source Expression Declaration public string Expression { get; set; } Property Value Type Description String | Improve this Doc View Source Name Declaration protected string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>) Declaration public override void SetTable(MappingSchema mappingSchema, SqlTable table, MemberInfo member, IEnumerable<Expression> arguments, IEnumerable<ISqlExpression> sqlArgs) Parameters Type Name Description MappingSchema mappingSchema SqlTable table MemberInfo member IEnumerable < Expression > arguments IEnumerable < ISqlExpression > sqlArgs Overrides Sql.TableFunctionAttribute.SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>) Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.SqlExtensionParam.html": {
    "href": "api/LinqToDB.Sql.SqlExtensionParam.html",
    "title": "Class Sql.SqlExtensionParam | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.SqlExtensionParam Inheritance Object Sql.SqlExtensionParam Namespace : LinqToDB Assembly : linq2db.dll Syntax public class SqlExtensionParam Constructors | Improve this Doc View Source SqlExtensionParam(String, Sql.SqlExtension) Declaration public SqlExtensionParam(string name, Sql.SqlExtension extension) Parameters Type Name Description String name Sql.SqlExtension extension | Improve this Doc View Source SqlExtensionParam(String, ISqlExpression) Declaration public SqlExtensionParam(string name, ISqlExpression expression) Parameters Type Name Description String name ISqlExpression expression Properties | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source Extension Declaration public Sql.SqlExtension Extension { get; set; } Property Value Type Description Sql.SqlExtension | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.SqlExtension.html": {
    "href": "api/LinqToDB.Sql.SqlExtension.html",
    "title": "Class Sql.SqlExtension | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.SqlExtension Inheritance Object Sql.SqlExtension Namespace : LinqToDB Assembly : linq2db.dll Syntax public class SqlExtension Constructors | Improve this Doc View Source SqlExtension(String, Sql.SqlExtensionParam[]) Declaration public SqlExtension(string expr, params Sql.SqlExtensionParam[] parameters) Parameters Type Name Description String expr Sql.SqlExtensionParam [] parameters | Improve this Doc View Source SqlExtension(Type, String, Int32, Int32, Boolean, Sql.SqlExtensionParam[]) Declaration public SqlExtension(Type systemType, string expr, int precedence, int chainPrecedence, bool isAggregate, params Sql.SqlExtensionParam[] parameters) Parameters Type Name Description Type systemType String expr Int32 precedence Int32 chainPrecedence Boolean isAggregate Sql.SqlExtensionParam [] parameters Properties | Improve this Doc View Source ChainPrecedence Declaration public int ChainPrecedence { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Expr Declaration public string Expr { get; set; } Property Value Type Description String | Improve this Doc View Source IsAggregate Declaration public bool IsAggregate { get; set; } Property Value Type Description Boolean | Improve this Doc View Source NamedParameters Declaration public Dictionary<string, List<Sql.SqlExtensionParam>> NamedParameters { get; } Property Value Type Description Dictionary < String , List < Sql.SqlExtensionParam >> | Improve this Doc View Source Precedence Declaration public int Precedence { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SystemType Declaration public Type SystemType { get; set; } Property Value Type Description Type Methods | Improve this Doc View Source AddParameter(Sql.SqlExtensionParam) Declaration public Sql.SqlExtensionParam AddParameter(Sql.SqlExtensionParam param) Parameters Type Name Description Sql.SqlExtensionParam param Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source AddParameter(String, ISqlExpression) Declaration public Sql.SqlExtensionParam AddParameter(string name, ISqlExpression sqlExpression) Parameters Type Name Description String name ISqlExpression sqlExpression Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source GetParameters() Declaration public Sql.SqlExtensionParam[] GetParameters() Returns Type Description Sql.SqlExtensionParam [] | Improve this Doc View Source GetParametersByName(String) Declaration public IEnumerable<Sql.SqlExtensionParam> GetParametersByName(string name) Parameters Type Name Description String name Returns Type Description IEnumerable < Sql.SqlExtensionParam > Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.PropertyAttribute.html": {
    "href": "api/LinqToDB.Sql.PropertyAttribute.html",
    "title": "Class Sql.PropertyAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.PropertyAttribute Inheritance Object Attribute Sql.ExpressionAttribute Sql.PropertyAttribute Implements _Attribute Inherited Members Sql.ExpressionAttribute.Expression Sql.ExpressionAttribute.ArgIndices Sql.ExpressionAttribute.Precedence Sql.ExpressionAttribute.Configuration Sql.ExpressionAttribute.ServerSideOnly Sql.ExpressionAttribute.PreferServerSide Sql.ExpressionAttribute.InlineParameters Sql.ExpressionAttribute.ExpectExpression Sql.ExpressionAttribute.IsPredicate Sql.ExpressionAttribute.IsAggregate Sql.ExpressionAttribute.CanBeNull Sql.ExpressionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Sql.ExpressionAttribute.GetExpression(MappingSchema, SelectQuery, Expression, Func<Expression, ISqlExpression>) Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true, Inherited = false)] public class PropertyAttribute : Sql.ExpressionAttribute, _Attribute Constructors | Improve this Doc View Source PropertyAttribute() Declaration public PropertyAttribute() | Improve this Doc View Source PropertyAttribute(String) Declaration public PropertyAttribute(string name) Parameters Type Name Description String name | Improve this Doc View Source PropertyAttribute(String, String) Declaration public PropertyAttribute(string configuraion, string name) Parameters Type Name Description String configuraion String name Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source GetExpression(MemberInfo, ISqlExpression[]) Declaration public override ISqlExpression GetExpression(MemberInfo member, params ISqlExpression[] args) Parameters Type Name Description MemberInfo member ISqlExpression [] args Returns Type Description ISqlExpression Overrides Sql.ExpressionAttribute.GetExpression(MemberInfo, ISqlExpression[]) Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.NullsPosition.html": {
    "href": "api/LinqToDB.Sql.NullsPosition.html",
    "title": "Enum Sql.NullsPosition | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.NullsPosition Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum NullsPosition Fields Name Description First Last None Extension Methods Sql.Between<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition) Sql.NotBetween<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition) SqlExtensions.In<Sql.NullsPosition>(IEnumerable<Sql.NullsPosition>) SqlExtensions.In<Sql.NullsPosition>(IQueryable<Sql.NullsPosition>) SqlExtensions.In<Sql.NullsPosition>(Sql.NullsPosition[]) SqlExtensions.In<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition) SqlExtensions.In<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition, Sql.NullsPosition) SqlExtensions.NotIn<Sql.NullsPosition>(IEnumerable<Sql.NullsPosition>) SqlExtensions.NotIn<Sql.NullsPosition>(IQueryable<Sql.NullsPosition>) SqlExtensions.NotIn<Sql.NullsPosition>(Sql.NullsPosition[]) SqlExtensions.NotIn<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition) SqlExtensions.NotIn<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition, Sql.NullsPosition)"
  },
  "api/LinqToDB.Sql.Nulls.html": {
    "href": "api/LinqToDB.Sql.Nulls.html",
    "title": "Enum Sql.Nulls | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.Nulls Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum Nulls Fields Name Description Ignore None Respect Extension Methods Sql.Between<Sql.Nulls>(Sql.Nulls, Sql.Nulls) Sql.NotBetween<Sql.Nulls>(Sql.Nulls, Sql.Nulls) SqlExtensions.In<Sql.Nulls>(IEnumerable<Sql.Nulls>) SqlExtensions.In<Sql.Nulls>(IQueryable<Sql.Nulls>) SqlExtensions.In<Sql.Nulls>(Sql.Nulls[]) SqlExtensions.In<Sql.Nulls>(Sql.Nulls, Sql.Nulls) SqlExtensions.In<Sql.Nulls>(Sql.Nulls, Sql.Nulls, Sql.Nulls) SqlExtensions.NotIn<Sql.Nulls>(IEnumerable<Sql.Nulls>) SqlExtensions.NotIn<Sql.Nulls>(IQueryable<Sql.Nulls>) SqlExtensions.NotIn<Sql.Nulls>(Sql.Nulls[]) SqlExtensions.NotIn<Sql.Nulls>(Sql.Nulls, Sql.Nulls) SqlExtensions.NotIn<Sql.Nulls>(Sql.Nulls, Sql.Nulls, Sql.Nulls)"
  },
  "api/LinqToDB.Sql.ISqlExtension.html": {
    "href": "api/LinqToDB.Sql.ISqlExtension.html",
    "title": "Interface Sql.ISqlExtension | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.ISqlExtension Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ISqlExtension Extension Methods AnalyticFunctions.Average<T>(Sql.ISqlExtension, Object) AnalyticFunctions.Average<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier) AnalyticFunctions.Corr<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.Count(Sql.ISqlExtension) AnalyticFunctions.Count<T>(Sql.ISqlExtension, T) AnalyticFunctions.Count(Sql.ISqlExtension, Object, Sql.AggregateModifier) AnalyticFunctions.CovarPop<T>(Sql.ISqlExtension, T, T) AnalyticFunctions.CovarSamp<T>(Sql.ISqlExtension, T, T) AnalyticFunctions.CumeDist<TR>(Sql.ISqlExtension, Object[]) AnalyticFunctions.CumeDist<TR>(Sql.ISqlExtension) AnalyticFunctions.DenseRank(Sql.ISqlExtension, Object, Object) AnalyticFunctions.DenseRank(Sql.ISqlExtension) AnalyticFunctions.FirstValue<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lag<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lag<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) AnalyticFunctions.LastValue<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lead<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lead<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) AnalyticFunctions.ListAgg<T>(Sql.ISqlExtension, T) AnalyticFunctions.ListAgg<T>(Sql.ISqlExtension, T, String) AnalyticFunctions.Max<T>(Sql.ISqlExtension, T) AnalyticFunctions.Max<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) AnalyticFunctions.Median<T>(Sql.ISqlExtension, T) AnalyticFunctions.Min<T>(Sql.ISqlExtension, T) AnalyticFunctions.Min<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) AnalyticFunctions.NthValue<T>(Sql.ISqlExtension, T, Int64) AnalyticFunctions.NthValue<T>(Sql.ISqlExtension, T, Int64, Sql.From, Sql.Nulls) AnalyticFunctions.NTile<T>(Sql.ISqlExtension, T) AnalyticFunctions.PercentRank<T>(Sql.ISqlExtension, Object[]) AnalyticFunctions.PercentRank<T>(Sql.ISqlExtension) AnalyticFunctions.PercentileCont<T>(Sql.ISqlExtension, Object) AnalyticFunctions.PercentileDisc<T>(Sql.ISqlExtension, Object) AnalyticFunctions.Rank(Sql.ISqlExtension, Object[]) AnalyticFunctions.Rank(Sql.ISqlExtension) AnalyticFunctions.RatioToReport<TR>(Sql.ISqlExtension, Object) AnalyticFunctions.RegrSlope<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrIntercept<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrCount(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrR2<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrAvgX<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrAvgY<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrSXX<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrSYY<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrSXY<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RowNumber(Sql.ISqlExtension) AnalyticFunctions.StdDev<T>(Sql.ISqlExtension, Object) AnalyticFunctions.StdDev<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier) AnalyticFunctions.StdDevPop<T>(Sql.ISqlExtension, Object) AnalyticFunctions.StdDevSamp<T>(Sql.ISqlExtension, Object) AnalyticFunctions.Sum<T>(Sql.ISqlExtension, T) AnalyticFunctions.Sum<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) AnalyticFunctions.VarPop<T>(Sql.ISqlExtension, Object) AnalyticFunctions.VarSamp<T>(Sql.ISqlExtension, Object) AnalyticFunctions.Variance<T>(Sql.ISqlExtension, Object) AnalyticFunctions.Variance<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.ISqExtensionBuilder.html": {
    "href": "api/LinqToDB.Sql.ISqExtensionBuilder.html",
    "title": "Interface Sql.ISqExtensionBuilder | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.ISqExtensionBuilder Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ISqExtensionBuilder Properties | Improve this Doc View Source Arguments Declaration Expression[] Arguments { get; } Property Value Type Description Expression [] | Improve this Doc View Source Configuration Declaration string Configuration { get; } Property Value Type Description String | Improve this Doc View Source Expression Declaration string Expression { get; set; } Property Value Type Description String | Improve this Doc View Source Extension Declaration Sql.SqlExtension Extension { get; } Property Value Type Description Sql.SqlExtension | Improve this Doc View Source Mapping Declaration MappingSchema Mapping { get; } Property Value Type Description MappingSchema | Improve this Doc View Source Member Declaration MemberInfo Member { get; } Property Value Type Description MemberInfo | Improve this Doc View Source Query Declaration SelectQuery Query { get; } Property Value Type Description SelectQuery | Improve this Doc View Source ResultExpression Declaration ISqlExpression ResultExpression { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source AddParameter(String, ISqlExpression) Declaration Sql.SqlExtensionParam AddParameter(string name, ISqlExpression expr) Parameters Type Name Description String name ISqlExpression expr Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source ConvertExpressionToSql(Expression) Declaration ISqlExpression ConvertExpressionToSql(Expression expression) Parameters Type Name Description Expression expression Returns Type Description ISqlExpression | Improve this Doc View Source ConvertToSqlExpression() Declaration ISqlExpression ConvertToSqlExpression() Returns Type Description ISqlExpression | Improve this Doc View Source ConvertToSqlExpression(Int32) Declaration ISqlExpression ConvertToSqlExpression(int precedence) Parameters Type Name Description Int32 precedence Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(Int32) Declaration ISqlExpression GetExpression(int index) Parameters Type Name Description Int32 index Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(String) Declaration ISqlExpression GetExpression(string argName) Parameters Type Name Description String argName Returns Type Description ISqlExpression | Improve this Doc View Source GetValue<T>(Int32) Declaration T GetValue<T>(int index) Parameters Type Name Description Int32 index Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValue<T>(String) Declaration T GetValue<T>(string argName) Parameters Type Name Description String argName Returns Type Description T Type Parameters Name Description T Extension Methods ExtensionlBuilderExtensions.AddParameter(Sql.ISqExtensionBuilder, String, String) ExtensionlBuilderExtensions.AddExpression(Sql.ISqExtensionBuilder, String, String) ExtensionlBuilderExtensions.Add(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Add<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Add(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Inc(Sql.ISqExtensionBuilder, ISqlExpression) ExtensionlBuilderExtensions.Sub(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Sub<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Sub(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Dec(Sql.ISqExtensionBuilder, ISqlExpression) ExtensionlBuilderExtensions.Mul(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Mul<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Mul(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Div(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Div<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Div(Sql.ISqExtensionBuilder, ISqlExpression, Int32) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.IExtensionCallBuilder.html": {
    "href": "api/LinqToDB.Sql.IExtensionCallBuilder.html",
    "title": "Interface Sql.IExtensionCallBuilder | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.IExtensionCallBuilder Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IExtensionCallBuilder Methods | Improve this Doc View Source Build(Sql.ISqExtensionBuilder) Declaration void Build(Sql.ISqExtensionBuilder builder) Parameters Type Name Description Sql.ISqExtensionBuilder builder Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.GroupBy.html": {
    "href": "api/LinqToDB.Sql.GroupBy.html",
    "title": "Enum Sql.GroupBy | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.GroupBy Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum GroupBy Fields Name Description None Extension Methods Sql.Between<Sql.GroupBy>(Sql.GroupBy, Sql.GroupBy) Sql.NotBetween<Sql.GroupBy>(Sql.GroupBy, Sql.GroupBy) SqlExtensions.In<Sql.GroupBy>(IEnumerable<Sql.GroupBy>) SqlExtensions.In<Sql.GroupBy>(IQueryable<Sql.GroupBy>) SqlExtensions.In<Sql.GroupBy>(Sql.GroupBy[]) SqlExtensions.In<Sql.GroupBy>(Sql.GroupBy, Sql.GroupBy) SqlExtensions.In<Sql.GroupBy>(Sql.GroupBy, Sql.GroupBy, Sql.GroupBy) SqlExtensions.NotIn<Sql.GroupBy>(IEnumerable<Sql.GroupBy>) SqlExtensions.NotIn<Sql.GroupBy>(IQueryable<Sql.GroupBy>) SqlExtensions.NotIn<Sql.GroupBy>(Sql.GroupBy[]) SqlExtensions.NotIn<Sql.GroupBy>(Sql.GroupBy, Sql.GroupBy) SqlExtensions.NotIn<Sql.GroupBy>(Sql.GroupBy, Sql.GroupBy, Sql.GroupBy)"
  },
  "api/LinqToDB.Sql.FunctionAttribute.html": {
    "href": "api/LinqToDB.Sql.FunctionAttribute.html",
    "title": "Class Sql.FunctionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.FunctionAttribute Inheritance Object Attribute Sql.ExpressionAttribute Sql.FunctionAttribute Implements _Attribute Inherited Members Sql.ExpressionAttribute.Expression Sql.ExpressionAttribute.ArgIndices Sql.ExpressionAttribute.Precedence Sql.ExpressionAttribute.Configuration Sql.ExpressionAttribute.ServerSideOnly Sql.ExpressionAttribute.PreferServerSide Sql.ExpressionAttribute.InlineParameters Sql.ExpressionAttribute.ExpectExpression Sql.ExpressionAttribute.IsPredicate Sql.ExpressionAttribute.IsAggregate Sql.ExpressionAttribute.CanBeNull Sql.ExpressionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Sql.ExpressionAttribute.GetExpression(MappingSchema, SelectQuery, Expression, Func<Expression, ISqlExpression>) Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true, Inherited = false)] public class FunctionAttribute : Sql.ExpressionAttribute, _Attribute Constructors | Improve this Doc View Source FunctionAttribute() Declaration public FunctionAttribute() | Improve this Doc View Source FunctionAttribute(String) Declaration public FunctionAttribute(string name) Parameters Type Name Description String name | Improve this Doc View Source FunctionAttribute(String, Int32[]) Declaration public FunctionAttribute(string name, params int[] argIndices) Parameters Type Name Description String name Int32 [] argIndices | Improve this Doc View Source FunctionAttribute(String, String) Declaration public FunctionAttribute(string configuration, string name) Parameters Type Name Description String configuration String name | Improve this Doc View Source FunctionAttribute(String, String, Int32[]) Declaration public FunctionAttribute(string configuration, string name, params int[] argIndices) Parameters Type Name Description String configuration String name Int32 [] argIndices Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source GetExpression(MemberInfo, ISqlExpression[]) Declaration public override ISqlExpression GetExpression(MemberInfo member, params ISqlExpression[] args) Parameters Type Name Description MemberInfo member ISqlExpression [] args Returns Type Description ISqlExpression Overrides Sql.ExpressionAttribute.GetExpression(MemberInfo, ISqlExpression[]) Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.From.html": {
    "href": "api/LinqToDB.Sql.From.html",
    "title": "Enum Sql.From | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.From Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum From Fields Name Description First Last None Extension Methods Sql.Between<Sql.From>(Sql.From, Sql.From) Sql.NotBetween<Sql.From>(Sql.From, Sql.From) SqlExtensions.In<Sql.From>(IEnumerable<Sql.From>) SqlExtensions.In<Sql.From>(IQueryable<Sql.From>) SqlExtensions.In<Sql.From>(Sql.From[]) SqlExtensions.In<Sql.From>(Sql.From, Sql.From) SqlExtensions.In<Sql.From>(Sql.From, Sql.From, Sql.From) SqlExtensions.NotIn<Sql.From>(IEnumerable<Sql.From>) SqlExtensions.NotIn<Sql.From>(IQueryable<Sql.From>) SqlExtensions.NotIn<Sql.From>(Sql.From[]) SqlExtensions.NotIn<Sql.From>(Sql.From, Sql.From) SqlExtensions.NotIn<Sql.From>(Sql.From, Sql.From, Sql.From)"
  },
  "api/LinqToDB.Sql.ExtensionAttribute.html": {
    "href": "api/LinqToDB.Sql.ExtensionAttribute.html",
    "title": "Class Sql.ExtensionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ExtensionAttribute Inheritance Object Attribute Sql.ExpressionAttribute Sql.ExtensionAttribute Implements _Attribute Inherited Members Sql.ExpressionAttribute.Expression Sql.ExpressionAttribute.ArgIndices Sql.ExpressionAttribute.Precedence Sql.ExpressionAttribute.Configuration Sql.ExpressionAttribute.ServerSideOnly Sql.ExpressionAttribute.PreferServerSide Sql.ExpressionAttribute.InlineParameters Sql.ExpressionAttribute.ExpectExpression Sql.ExpressionAttribute.IsPredicate Sql.ExpressionAttribute.IsAggregate Sql.ExpressionAttribute.CanBeNull Sql.ExpressionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Sql.ExpressionAttribute.GetExpression(MemberInfo, ISqlExpression[]) Namespace : LinqToDB Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)] public class ExtensionAttribute : Sql.ExpressionAttribute, _Attribute Constructors | Improve this Doc View Source ExtensionAttribute(String) Declaration public ExtensionAttribute(string expression) Parameters Type Name Description String expression | Improve this Doc View Source ExtensionAttribute(String, String) Declaration public ExtensionAttribute(string configuration, string expression) Parameters Type Name Description String configuration String expression | Improve this Doc View Source ExtensionAttribute(Type) Declaration public ExtensionAttribute(Type builderType) Parameters Type Name Description Type builderType Properties | Improve this Doc View Source BuilderType Declaration public Type BuilderType { get; set; } Property Value Type Description Type | Improve this Doc View Source ChainPrecedence Declaration public int ChainPrecedence { get; set; } Property Value Type Description Int32 | Improve this Doc View Source TokenName Declaration public string TokenName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source BuildFunctionsChain(MappingSchema, SelectQuery, Expression, Sql.ExtensionAttribute.ConvertHelper) Declaration protected List<Sql.SqlExtensionParam> BuildFunctionsChain(MappingSchema mapping, SelectQuery query, Expression expr, Sql.ExtensionAttribute.ConvertHelper convertHelper) Parameters Type Name Description MappingSchema mapping SelectQuery query Expression expr Sql.ExtensionAttribute.ConvertHelper convertHelper Returns Type Description List < Sql.SqlExtensionParam > | Improve this Doc View Source BuildSqlExpression(Sql.SqlExtension, Type, Int32, Boolean) Declaration public static SqlExpression BuildSqlExpression(Sql.SqlExtension root, Type systemType, int precedence, bool isAggregate) Parameters Type Name Description Sql.SqlExtension root Type systemType Int32 precedence Boolean isAggregate Returns Type Description SqlExpression | Improve this Doc View Source GetExpression(MappingSchema, SelectQuery, Expression, Func<Expression, ISqlExpression>) Declaration public override ISqlExpression GetExpression(MappingSchema mapping, SelectQuery query, Expression expression, Func<Expression, ISqlExpression> converter) Parameters Type Name Description MappingSchema mapping SelectQuery query Expression expression Func < Expression , ISqlExpression > converter Returns Type Description ISqlExpression Overrides Sql.ExpressionAttribute.GetExpression(MappingSchema, SelectQuery, Expression, Func<Expression, ISqlExpression>) | Improve this Doc View Source ResolveExpressionValues(String, Func<String, String, String>) Declaration public static string ResolveExpressionValues(string expression, Func<string, string, string> valueProvider) Parameters Type Name Description String expression Func < String , String , String > valueProvider Returns Type Description String Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder.html": {
    "href": "api/LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder.html",
    "title": "Class Sql.ExtensionAttribute.ExtensionBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ExtensionAttribute.ExtensionBuilder Inheritance Object Sql.ExtensionAttribute.ExtensionBuilder Implements Sql.ISqExtensionBuilder Namespace : LinqToDB Assembly : linq2db.dll Syntax protected class ExtensionBuilder : Sql.ISqExtensionBuilder Constructors | Improve this Doc View Source ExtensionBuilder(String, MappingSchema, SelectQuery, Sql.SqlExtension, Sql.ExtensionAttribute.ConvertHelper, MemberInfo, Expression[]) Declaration public ExtensionBuilder(string configuration, MappingSchema mapping, SelectQuery query, Sql.SqlExtension extension, Sql.ExtensionAttribute.ConvertHelper convertHeper, MemberInfo member, Expression[] arguments) Parameters Type Name Description String configuration MappingSchema mapping SelectQuery query Sql.SqlExtension extension Sql.ExtensionAttribute.ConvertHelper convertHeper MemberInfo member Expression [] arguments Properties | Improve this Doc View Source Arguments Declaration public Expression[] Arguments { get; } Property Value Type Description Expression [] | Improve this Doc View Source Configuration Declaration public string Configuration { get; } Property Value Type Description String | Improve this Doc View Source Expression Declaration public string Expression { get; set; } Property Value Type Description String | Improve this Doc View Source Extension Declaration public Sql.SqlExtension Extension { get; } Property Value Type Description Sql.SqlExtension | Improve this Doc View Source Mapping Declaration public MappingSchema Mapping { get; } Property Value Type Description MappingSchema | Improve this Doc View Source Member Declaration public MemberInfo Member { get; } Property Value Type Description MemberInfo | Improve this Doc View Source Method Declaration public MethodInfo Method { get; } Property Value Type Description MethodInfo | Improve this Doc View Source Query Declaration public SelectQuery Query { get; } Property Value Type Description SelectQuery | Improve this Doc View Source ResultExpression Declaration public ISqlExpression ResultExpression { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source AddParameter(String, ISqlExpression) Declaration public Sql.SqlExtensionParam AddParameter(string name, ISqlExpression expr) Parameters Type Name Description String name ISqlExpression expr Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source ConvertExpression(Expression) Declaration public ISqlExpression ConvertExpression(Expression expr) Parameters Type Name Description Expression expr Returns Type Description ISqlExpression | Improve this Doc View Source ConvertExpressionToSql(Expression) Declaration public ISqlExpression ConvertExpressionToSql(Expression expression) Parameters Type Name Description Expression expression Returns Type Description ISqlExpression | Improve this Doc View Source ConvertToSqlExpression() Declaration public ISqlExpression ConvertToSqlExpression() Returns Type Description ISqlExpression | Improve this Doc View Source ConvertToSqlExpression(Int32) Declaration public ISqlExpression ConvertToSqlExpression(int precedence) Parameters Type Name Description Int32 precedence Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(Int32) Declaration public ISqlExpression GetExpression(int index) Parameters Type Name Description Int32 index Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(String) Declaration public ISqlExpression GetExpression(string argName) Parameters Type Name Description String argName Returns Type Description ISqlExpression | Improve this Doc View Source GetValue<T>(Int32) Declaration public T GetValue<T>(int index) Parameters Type Name Description Int32 index Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValue<T>(String) Declaration public T GetValue<T>(string argName) Parameters Type Name Description String argName Returns Type Description T Type Parameters Name Description T Implements Sql.ISqExtensionBuilder Extension Methods ExtensionlBuilderExtensions.AddParameter(Sql.ISqExtensionBuilder, String, String) ExtensionlBuilderExtensions.AddExpression(Sql.ISqExtensionBuilder, String, String) ExtensionlBuilderExtensions.Add(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Add<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Add(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Inc(Sql.ISqExtensionBuilder, ISqlExpression) ExtensionlBuilderExtensions.Sub(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Sub<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Sub(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Dec(Sql.ISqExtensionBuilder, ISqlExpression) ExtensionlBuilderExtensions.Mul(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Mul<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Mul(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Div(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Div<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Div(Sql.ISqExtensionBuilder, ISqlExpression, Int32) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.ScalarTypeAttribute.html": {
    "href": "api/LinqToDB.Mapping.ScalarTypeAttribute.html",
    "title": "Class ScalarTypeAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ScalarTypeAttribute Overrides default scalar detection for target class or structure. By default linq2db treats primitives and structs as scalar types. This attribute allows you to mark class or struct as scalar type or mark struct as non-scalar type. Also see IsStructIsScalarType . Note that if you marks some type as scalar, you will need to define custom mapping logic between object of that type and data parameter using SetConvertExpression(Type, Type, LambdaExpression, Boolean) methods. Inheritance Object Attribute ScalarTypeAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true, Inherited = true)] public class ScalarTypeAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ScalarTypeAttribute() Creates attribute instance. Declaration public ScalarTypeAttribute() | Improve this Doc View Source ScalarTypeAttribute(Boolean) Creates attribute instance. Declaration public ScalarTypeAttribute(bool isScalar) Parameters Type Name Description Boolean isScalar Should target type be treated as scalar type or not. | Improve this Doc View Source ScalarTypeAttribute(String) Creates attribute instance. Declaration public ScalarTypeAttribute(string configuration) Parameters Type Name Description String configuration Mapping schema configuration name. See Configuration . | Improve this Doc View Source ScalarTypeAttribute(String, Boolean) Creates attribute instance. Declaration public ScalarTypeAttribute(string configuration, bool isScalar) Parameters Type Name Description String configuration Mapping schema configuration name. See Configuration . Boolean isScalar Should target type be treated as scalar type or not. Properties | Improve this Doc View Source Configuration Mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source IsScalar Gets or sets scalar type flag. Default value: true . Declaration public bool IsScalar { get; set; } Property Value Type Description Boolean Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.Relationship.html": {
    "href": "api/LinqToDB.Mapping.Relationship.html",
    "title": "Enum Relationship | Linq To DB (aka linq2db)",
    "keywords": "Enum Relationship Defines relationship types for associations. See Relationship for more details. Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public enum Relationship Fields Name Description ManyToOne Many-to-one relationship. OneToMany One-to-many relationship. OneToOne One-to-one relationship. Extension Methods Sql.Between<Relationship>(Relationship, Relationship) Sql.NotBetween<Relationship>(Relationship, Relationship) SqlExtensions.In<Relationship>(IEnumerable<Relationship>) SqlExtensions.In<Relationship>(IQueryable<Relationship>) SqlExtensions.In<Relationship>(Relationship[]) SqlExtensions.In<Relationship>(Relationship, Relationship) SqlExtensions.In<Relationship>(Relationship, Relationship, Relationship) SqlExtensions.NotIn<Relationship>(IEnumerable<Relationship>) SqlExtensions.NotIn<Relationship>(IQueryable<Relationship>) SqlExtensions.NotIn<Relationship>(Relationship[]) SqlExtensions.NotIn<Relationship>(Relationship, Relationship) SqlExtensions.NotIn<Relationship>(Relationship, Relationship, Relationship)"
  },
  "api/LinqToDB.Mapping.PropertyMappingBuilder-1.html": {
    "href": "api/LinqToDB.Mapping.PropertyMappingBuilder-1.html",
    "title": "Class PropertyMappingBuilder<T> | Linq To DB (aka linq2db)",
    "keywords": "Class PropertyMappingBuilder<T> Column or association fluent mapping builder. Inheritance Object PropertyMappingBuilder<T> Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class PropertyMappingBuilder<T> Type Parameters Name Description T Column or asociation member type. Constructors | Improve this Doc View Source PropertyMappingBuilder(EntityMappingBuilder<T>, Expression<Func<T, Object>>) Creates column or association fluent mapping builder. Declaration public PropertyMappingBuilder(EntityMappingBuilder<T> entity, Expression<Func<T, object>> memberGetter) Parameters Type Name Description EntityMappingBuilder <T> entity Entity fluent mapping builder. Expression < Func <T, Object >> memberGetter Column or association member getter expression. Methods | Improve this Doc View Source Association<S, ID1, ID2>(Expression<Func<T, S>>, Expression<Func<T, ID1>>, Expression<Func<S, ID2>>) Adds association mapping to current column's entity. Declaration public PropertyMappingBuilder<T> Association<S, ID1, ID2>(Expression<Func<T, S>> prop, Expression<Func<T, ID1>> thisKey, Expression<Func<S, ID2>> otherKey) Parameters Type Name Description Expression < Func <T, S>> prop Association member getter expression. Expression < Func <T, ID1>> thisKey This association key getter expression. Expression < Func <S, ID2>> otherKey Other association key getter expression. Returns Type Description PropertyMappingBuilder <T> Returns association mapping builder. Type Parameters Name Description S Association member type. ID1 This association side key type. ID2 Other association side key type. | Improve this Doc View Source Entity<TE>(String) Creates entity builder for specified mapping type. Declaration public EntityMappingBuilder<TE> Entity<TE>(string configuration = null) Parameters Type Name Description String configuration Optional mapping schema configuration name, for which this entity builder should be taken into account. ProviderName for standard configuration names. Returns Type Description EntityMappingBuilder <TE> Returns entity mapping builder. Type Parameters Name Description TE Mapping type. | Improve this Doc View Source HasAttribute(Attribute) Adds attribute to current mapping member. Declaration public PropertyMappingBuilder<T> HasAttribute(Attribute attribute) Parameters Type Name Description Attribute attribute Mapping attribute to add to specified member. Returns Type Description PropertyMappingBuilder <T> Returns current column or association mapping builder. | Improve this Doc View Source HasColumnName(String) Sets name for current column. Declaration public PropertyMappingBuilder<T> HasColumnName(string columnName) Parameters Type Name Description String columnName Column name. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source HasCreateFormat(String) Sets custom column create SQL template. Declaration public PropertyMappingBuilder<T> HasCreateFormat(string format) Parameters Type Name Description String format Custom template for column definition in create table SQL expression, generated using CreateTable<T>(IDataContext, String, String, String, String, String, DefaultNullable) methods. Template accepts following string parameters: {0} - column name; {1} - column type; {2} - NULL specifier; {3} - identity specification. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source HasDataType(DataType) Sets LINQ to DB type for current column. Declaration public PropertyMappingBuilder<T> HasDataType(DataType dataType) Parameters Type Name Description DataType dataType Data type. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source HasDbType(String) Sets database type for current column. Declaration public PropertyMappingBuilder<T> HasDbType(string dbType) Parameters Type Name Description String dbType Column type. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source HasLength(Int32) Sets the length of the database column. Declaration public PropertyMappingBuilder<T> HasLength(int length) Parameters Type Name Description Int32 length Column length. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source HasPrecision(Int32) Sets the precision of the database column. Declaration public PropertyMappingBuilder<T> HasPrecision(int precision) Parameters Type Name Description Int32 precision Column precision. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source HasScale(Int32) Sets the Scale of the database column. Declaration public PropertyMappingBuilder<T> HasScale(int scale) Parameters Type Name Description Int32 scale Column scale. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source HasSkipOnInsert(Boolean) Sets whether a column is insertable. This flag will affect only insert operations with implicit columns specification like Insert<T>(IDataContext, T, String, String, String) method and will be ignored when user explicitly specifies value for this column. Declaration public PropertyMappingBuilder<T> HasSkipOnInsert(bool skipOnInsert = true) Parameters Type Name Description Boolean skipOnInsert If true - column will be ignored for implicit insert operations. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source HasSkipOnUpdate(Boolean) Sets whether a column is updatable. This flag will affect only update operations with implicit columns specification like Update<T>(IDataContext, T, String, String, String) method and will be ignored when user explicitly specifies value for this column. Declaration public PropertyMappingBuilder<T> HasSkipOnUpdate(bool skipOnUpdate = true) Parameters Type Name Description Boolean skipOnUpdate If true - column will be ignored for implicit update operations. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source HasStorage(String) Adds data storage property or field for current column. Declaration public PropertyMappingBuilder<T> HasStorage(string storage) Parameters Type Name Description String storage Name of storage property or field for current column. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source IsColumn() Sets current member to be included into mapping as column. Declaration public PropertyMappingBuilder<T> IsColumn() Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source IsDiscriminator(Boolean) Marks current column as discriminator column for inheritance mapping. Declaration public PropertyMappingBuilder<T> IsDiscriminator(bool isDiscriminator = true) Parameters Type Name Description Boolean isDiscriminator If true - column is used as inheritance mapping discriminator. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source IsIdentity() Marks current column as identity column. Declaration public PropertyMappingBuilder<T> IsIdentity() Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source IsNotColumn() Sets current member to be excluded from mapping. Declaration public PropertyMappingBuilder<T> IsNotColumn() Returns Type Description PropertyMappingBuilder <T> Returns current mapping builder. | Improve this Doc View Source IsNullable(Boolean) Sets whether a column can contain NULL values. Declaration public PropertyMappingBuilder<T> IsNullable(bool isNullable = true) Parameters Type Name Description Boolean isNullable If true - column could contain NULL values. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source IsPrimaryKey(Int32) Marks current column as primary key member. Declaration public PropertyMappingBuilder<T> IsPrimaryKey(int order = -1) Parameters Type Name Description Int32 order Order of property in primary key. Returns Type Description PropertyMappingBuilder <T> Returns current column mapping builder. | Improve this Doc View Source Property(Expression<Func<T, Object>>) Adds new column mapping to current column's entity. Declaration public PropertyMappingBuilder<T> Property(Expression<Func<T, object>> func) Parameters Type Name Description Expression < Func <T, Object >> func Column mapping property or field getter expression. Returns Type Description PropertyMappingBuilder <T> Returns property mapping builder. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.PrimaryKeyAttribute.html": {
    "href": "api/LinqToDB.Mapping.PrimaryKeyAttribute.html",
    "title": "Class PrimaryKeyAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class PrimaryKeyAttribute Marks property or field as a member of primary key for current mapping type. Inheritance Object Attribute PrimaryKeyAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)] public sealed class PrimaryKeyAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source PrimaryKeyAttribute() Creates attribute instance. Declaration public PrimaryKeyAttribute() | Improve this Doc View Source PrimaryKeyAttribute(Int32) Creates attribute instance. Declaration public PrimaryKeyAttribute(int order) Parameters Type Name Description Int32 order Column order in composite primary key. | Improve this Doc View Source PrimaryKeyAttribute(String, Int32) Creates attribute instance. Declaration public PrimaryKeyAttribute(string configuration, int order) Parameters Type Name Description String configuration Mapping schema configuration name. See Configuration . Int32 order Column order in composite primary key. Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source Order Gets or sets order of current column in composite primary key. Order is used for query generation to define in which order primary key columns must be mentioned in query from columns with smallest order value to greatest. Default value: -1 . Declaration public int Order { get; set; } Property Value Type Description Int32 Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.NullableAttribute.html": {
    "href": "api/LinqToDB.Mapping.NullableAttribute.html",
    "title": "Class NullableAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class NullableAttribute Explicitly specifies that associated column could contain NULL values. Overrides default nullability flag from current mapping schema for property/field type. Has lower priority over CanBeNull . Using this attribute, you can allow NULL values for identity columns. Inheritance Object Attribute NullableAttribute NotNullAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)] public class NullableAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source NullableAttribute() Creates attribute isntance. Declaration public NullableAttribute() | Improve this Doc View Source NullableAttribute(Boolean) Creates attribute isntance. Declaration public NullableAttribute(bool isNullable) Parameters Type Name Description Boolean isNullable Nullability flag for current column. | Improve this Doc View Source NullableAttribute(String, Boolean) Creates attribute isntance. Declaration public NullableAttribute(string configuration, bool isNullable) Parameters Type Name Description String configuration Mapping schema configuration name. See Configuration . Boolean isNullable Nullability flag for current column. Properties | Improve this Doc View Source CanBeNull Gets or sets nullability flag for current column. Default value: true . Declaration public bool CanBeNull { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.NotNullAttribute.html": {
    "href": "api/LinqToDB.Mapping.NotNullAttribute.html",
    "title": "Class NotNullAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class NotNullAttribute Sets nullability flag for current column to false . See NullableAttribute for more details. Inheritance Object Attribute NullableAttribute NotNullAttribute Implements _Attribute Inherited Members NullableAttribute.Configuration NullableAttribute.CanBeNull Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public sealed class NotNullAttribute : NullableAttribute, _Attribute Constructors | Improve this Doc View Source NotNullAttribute() Creates attribute isntance. Declaration public NotNullAttribute() | Improve this Doc View Source NotNullAttribute(String) Creates attribute isntance. Declaration public NotNullAttribute(string configuration) Parameters Type Name Description String configuration Mapping schema configuration name. See LinqToDB.Configuration . Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.NotColumnAttribute.html": {
    "href": "api/LinqToDB.Mapping.NotColumnAttribute.html",
    "title": "Class NotColumnAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class NotColumnAttribute Marks current property or column to be ignored for mapping when explicit column mapping disabled. See IsColumnAttributeRequired . Inheritance Object Attribute ColumnAttribute NotColumnAttribute Implements _Attribute Inherited Members ColumnAttribute.Configuration ColumnAttribute.Name ColumnAttribute.MemberName ColumnAttribute.DataType ColumnAttribute.DbType ColumnAttribute.IsColumn ColumnAttribute.Storage ColumnAttribute.IsDiscriminator ColumnAttribute.SkipOnInsert ColumnAttribute.HasSkipOnInsert() ColumnAttribute.SkipOnUpdate ColumnAttribute.HasSkipOnUpdate() ColumnAttribute.IsIdentity ColumnAttribute.HasIsIdentity() ColumnAttribute.IsPrimaryKey ColumnAttribute.HasIsPrimaryKey() ColumnAttribute.PrimaryKeyOrder ColumnAttribute.CanBeNull ColumnAttribute.HasCanBeNull() ColumnAttribute.Length ColumnAttribute.HasLength() ColumnAttribute.Precision ColumnAttribute.HasPrecision() ColumnAttribute.Scale ColumnAttribute.HasScale() ColumnAttribute.CreateFormat Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true, Inherited = true)] public class NotColumnAttribute : ColumnAttribute, _Attribute Constructors | Improve this Doc View Source NotColumnAttribute() Creates attribute instance. Declaration public NotColumnAttribute() Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.MapValueAttribute.html": {
    "href": "api/LinqToDB.Mapping.MapValueAttribute.html",
    "title": "Class MapValueAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class MapValueAttribute Defines bidirectional mapping between enum field value, used on client and database value, stored in database and used in queries. Enumeration field could have multiple MapValueAttribute attributes. Mapping from database value to enumeration performed when you load data from database. Linq2db will search for enumeration field with MapValueAttribute with required value. If attribute with such value is not found, you will receive LinqToDBException error. If you cannot specify all possible values using MapValueAttribute , you can specify custom mapping using methods like SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) . Mapping from enumeration value performed when you save it to database or use in query. If your enum field has multiple MapValueAttribute attributes, you should mark one of them as default using IsDefault property. Inheritance Object Attribute MapValueAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = true)] public class MapValueAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source MapValueAttribute() Adds MapValueAttribute mapping to enum field. If you don't specify Value property, null value will be used. Declaration public MapValueAttribute() | Improve this Doc View Source MapValueAttribute(Object) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(object value) Parameters Type Name Description Object value Database value, mapped to current enumeration field. | Improve this Doc View Source MapValueAttribute(Object, Boolean) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(object value, bool isDefault) Parameters Type Name Description Object value Database value, mapped to current enumeration field. Boolean isDefault If true , database value from this attribute will be used for mapping to database value. | Improve this Doc View Source MapValueAttribute(String, Object) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(string configuration, object value) Parameters Type Name Description String configuration Name of configuration, for which this attribute instance will be used. Object value Database value, mapped to current enumeration field. | Improve this Doc View Source MapValueAttribute(String, Object, Boolean) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(string configuration, object value, bool isDefault) Parameters Type Name Description String configuration Name of configuration, for which this attribute instance will be used. Object value Database value, mapped to current enumeration field. Boolean isDefault If true , database value from this attribute will be used for mapping to database value. Properties | Improve this Doc View Source Configuration Mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source IsDefault If true , Value property value will be used for conversion from enumeration to database value. Declaration public bool IsDefault { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Value Database value, to which current enumeration field will be mapped when used in query or saved to database. This value, when loaded from database, will be converted to current enumeration field. Declaration public object Value { get; set; } Property Value Type Description Object Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.MapValue.html": {
    "href": "api/LinqToDB.Mapping.MapValue.html",
    "title": "Class MapValue | Linq To DB (aka linq2db)",
    "keywords": "Class MapValue Stores enum mapping information for single enum value. Inheritance Object MapValue Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class MapValue Constructors | Improve this Doc View Source MapValue(Object, MapValueAttribute[]) Creates instance of class. Declaration public MapValue(object origValue, params MapValueAttribute[] mapValues) Parameters Type Name Description Object origValue Mapped enum value. MapValueAttribute [] mapValues Enum value mappings. Properties | Improve this Doc View Source MapValues Gets enum value mappings. Declaration public MapValueAttribute[] MapValues { get; } Property Value Type Description MapValueAttribute [] | Improve this Doc View Source OrigValue Gets enum value. Declaration public object OrigValue { get; } Property Value Type Description Object Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.MappingSchema.html": {
    "href": "api/LinqToDB.Mapping.MappingSchema.html",
    "title": "Class MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class MappingSchema Mapping schema. Inheritance Object MappingSchema AccessMappingSchema DB2LUWMappingSchema DB2MappingSchema DB2zOSMappingSchema FirebirdMappingSchema InformixMappingSchema MySqlMappingSchema OracleMappingSchema OracleMappingSchema.ManagedMappingSchema OracleMappingSchema.NativeMappingSchema PostgreSQLMappingSchema SapHanaMappingSchema SqlCeMappingSchema SQLiteMappingSchema SQLiteMappingSchema.ClassicMappingSchema SQLiteMappingSchema.MicrosoftMappingSchema SqlServer2000MappingSchema SqlServer2005MappingSchema SqlServer2008MappingSchema SqlServer2012MappingSchema SqlServerMappingSchema SybaseMappingSchema SybaseMappingSchema.ManagedMappingSchema SybaseMappingSchema.NativeMappingSchema Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class MappingSchema Constructors | Improve this Doc View Source MappingSchema() Creates mapping schema instance. Declaration public MappingSchema() | Improve this Doc View Source MappingSchema(MappingSchema[]) Creates mapping schema, derived from other mapping schemas. Declaration public MappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Base mapping schemas. | Improve this Doc View Source MappingSchema(String) Creates mapping schema for specified configuration name. Declaration public MappingSchema(string configuration) Parameters Type Name Description String configuration Mapping schema configuration name. ProviderName for standard names. | Improve this Doc View Source MappingSchema(String, MappingSchema[]) Creates mapping schema with specified configuration name and base mapping schemas. Declaration public MappingSchema(string configuration, params MappingSchema[] schemas) Parameters Type Name Description String configuration Mapping schema configuration name. ProviderName for standard names. MappingSchema [] schemas Base mapping schemas. Fields | Improve this Doc View Source Default Default mapping schema, used by LINQ to DB, when more specific mapping schema not provided. Declaration public static MappingSchema Default Field Value Type Description MappingSchema Properties | Improve this Doc View Source ColumnNameComparer Gets or sets column name comparison rules for comparison of column names in mapping with column name, returned by provider's data reader. Declaration public StringComparer ColumnNameComparer { get; set; } Property Value Type Description StringComparer | Improve this Doc View Source ConfigurationID Unique schema configuration identifier. For internal use only. Declaration public string ConfigurationID { get; } Property Value Type Description String | Improve this Doc View Source ConfigurationList Gets configurations, associated with current mapping schema. Declaration public string[] ConfigurationList { get; } Property Value Type Description String [] | Improve this Doc View Source EntityDescriptorCreatedCallback Gets or sets action, called when the EntityDescriptor is created. Could be used to adjust created descriptor before use. Declaration public Action<MappingSchema, IEntityChangeDescriptor> EntityDescriptorCreatedCallback { get; set; } Property Value Type Description Action < MappingSchema , IEntityChangeDescriptor > | Improve this Doc View Source MetadataReader Gets or sets metadata attributes provider for current schema. Metadata providers, shipped with LINQ to DB: MetadataReader - aggregation metadata provider over collection of other providers; AttributeReader - .NET attributes provider; FluentMetadataReader - fluent mappings metadata provider; SystemDataLinqAttributeReader - metadata provider that converts System.Data.Linq.Mapping attributes to LINQ to DB mapping attributes; SystemDataSqlServerAttributeReader - metadata provider that converts Microsoft.SqlServer.Server attributes to LINQ to DB mapping attributes; XmlAttributeReader - XML-based mappings metadata provider. Declaration public IMetadataReader MetadataReader { get; set; } Property Value Type Description IMetadataReader | Improve this Doc View Source ValueToSqlConverter Gets value to SQL (usually literal) converter. Declaration public ValueToSqlConverter ValueToSqlConverter { get; } Property Value Type Description ValueToSqlConverter Methods | Improve this Doc View Source AddMetadataReader(IMetadataReader) Adds additional metadata attributes provider to current schema. Declaration public void AddMetadataReader(IMetadataReader reader) Parameters Type Name Description IMetadataReader reader Metadata attributes provider. | Improve this Doc View Source AddScalarType(Type, DataType) Configure provided type mapping to scalar database type. Declaration public void AddScalarType(Type type, DataType dataType = DataType.Undefined) Parameters Type Name Description Type type Type to configure. DataType dataType Optional scalar data type. | Improve this Doc View Source AddScalarType(Type, SqlDataType) Configure provided type mapping to scalar database type. Declaration public void AddScalarType(Type type, SqlDataType dataType) Parameters Type Name Description Type type Type to configure. SqlDataType dataType Database data type. | Improve this Doc View Source AddScalarType(Type, Object, DataType) Configure provided type mapping to scalar database type. Declaration public void AddScalarType(Type type, object defaultValue, DataType dataType = DataType.Undefined) Parameters Type Name Description Type type Type to configure. Object defaultValue Default value. See SetDefaultValue(Type, Object) for more details. DataType dataType Optional scalar data type. | Improve this Doc View Source AddScalarType(Type, Object, Boolean, DataType) Configure provided type mapping to scalar database type. Declaration public void AddScalarType(Type type, object defaultValue, bool canBeNull, DataType dataType = DataType.Undefined) Parameters Type Name Description Type type Type to configure. Object defaultValue Default value. See SetDefaultValue(Type, Object) for more details. Boolean canBeNull Set null value support flag. See SetCanBeNull(Type, Boolean) for more details. DataType dataType Optional scalar data type. | Improve this Doc View Source ChangeType(Object, Type) Converts value to specified type. Declaration public object ChangeType(object value, Type conversionType) Parameters Type Name Description Object value Value to convert. Type conversionType Target type. Returns Type Description Object Converted value. | Improve this Doc View Source ChangeTypeTo<T>(Object) Converts value to specified type. Declaration public T ChangeTypeTo<T>(object value) Parameters Type Name Description Object value Value to convert. Returns Type Description T Converted value. Type Parameters Name Description T Target type. | Improve this Doc View Source EnumToValue(Enum) Converts enum value to database value. Declaration public object EnumToValue(Enum value) Parameters Type Name Description Enum value Enum value. Returns Type Description Object Database value. | Improve this Doc View Source GetAttribute<T>(Type, Boolean) Gets attribute of specified type, associated with specified type. Declaration public T GetAttribute<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Attribute owner type. Boolean inherit If true - include inherited attribute. Returns Type Description T First found attribute of specified type or null , if no attributes found. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttribute<T>(Type, Func<T, String>, Boolean) Gets attribute of specified type, associated with specified type. Attributes filtered by schema's configuration names (see ConfigurationList ). Declaration public T GetAttribute<T>(Type type, Func<T, string> configGetter, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Attribute owner type. Func <T, String > configGetter Attribute configuration name provider. Boolean inherit If true - include inherited attribute. Returns Type Description T First found attribute of specified type or null , if no attributes found. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttribute<T>(Type, MemberInfo, Boolean) Gets attribute of specified type, associated with specified type member. Declaration public T GetAttribute<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Member's owner type. MemberInfo memberInfo Attribute owner member. Boolean inherit If true - include inherited attribute. Returns Type Description T First found attribute of specified type or null , if no attributes found. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) Gets attribute of specified type, associated with specified type member. Attributes filtered by schema's configuration names (see ConfigurationList ). Declaration public T GetAttribute<T>(Type type, MemberInfo memberInfo, Func<T, string> configGetter, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Member's owner type. MemberInfo memberInfo Attribute owner member. Func <T, String > configGetter Attribute configuration name provider. Boolean inherit If true - include inherited attribute. Returns Type Description T First found attribute of specified type or null , if no attributes found. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Gets attributes of specified type, associated with specified type. Declaration public T[] GetAttributes<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Attributes owner type. Boolean inherit If true - include inherited attributes. Returns Type Description T[] Attributes of specified type. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttributes<T>(Type, Func<T, String>, Boolean) Gets attributes of specified type, associated with specified type. Attributes filtered by schema's configuration names (see ConfigurationList ). Declaration public T[] GetAttributes<T>(Type type, Func<T, string> configGetter, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Attributes owner type. Func <T, String > configGetter Attribute configuration name provider. Boolean inherit If true - include inherited attributes. Returns Type Description T[] Attributes of specified type. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Gets attributes of specified type, associated with specified type member. Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Member's owner type. MemberInfo memberInfo Attributes owner member. Boolean inherit If true - include inherited attributes. Returns Type Description T[] Attributes of specified type. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) Gets attributes of specified type, associated with specified type member. Attributes filtered by schema's configuration names (see ConfigurationList ). Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, Func<T, string> configGetter, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Member's owner type. MemberInfo memberInfo Attributes owner member. Func <T, String > configGetter Attribute configuration name provider. Boolean inherit If true - include inherited attributes. Returns Type Description T[] Attributes of specified type. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetCanBeNull(Type) Returns true , if value of specified type could contain null . Declaration public bool GetCanBeNull(Type type) Parameters Type Name Description Type type Value type. Returns Type Description Boolean Returns true if specified type supports null values. | Improve this Doc View Source GetConverter<TFrom, TTo>() Returns conversion delegate for conversion from TFrom type to TTo type. Declaration public Func<TFrom, TTo> GetConverter<TFrom, TTo>() Returns Type Description Func <TFrom, TTo> Conversion delegate. Type Parameters Name Description TFrom Source type. TTo Target type. | Improve this Doc View Source GetConvertExpression(Type, Type, Boolean, Boolean) Returns conversion expression from from type to to type. Declaration public LambdaExpression GetConvertExpression(Type from, Type to, bool checkNull = true, bool createDefault = true) Parameters Type Name Description Type from Source type. Type to Target type. Boolean checkNull If true , and source type could contain null , conversion expression will check converted value for null and replace it with default value. SetDefaultValue(Type, Object) for more details. Boolean createDefault Create new conversion expression, if conversion is not defined. Returns Type Description LambdaExpression Conversion expression or null , if there is no such conversion and createDefault is false . | Improve this Doc View Source GetConvertExpression<TFrom, TTo>(Boolean, Boolean) Returns conversion expression from TFrom type to TTo type. Declaration public Expression<Func<TFrom, TTo>> GetConvertExpression<TFrom, TTo>(bool checkNull = true, bool createDefault = true) Parameters Type Name Description Boolean checkNull If true , and source type could contain null , conversion expression will check converted value for null and replace it with default value. SetDefaultValue(Type, Object) for more details. Boolean createDefault Create new conversion expression, if conversion is not defined. Returns Type Description Expression < Func <TFrom, TTo>> Conversion expression or null , if there is no such conversion and createDefault is false . Type Parameters Name Description TFrom Source type. TTo Target type. | Improve this Doc View Source GetDataType(Type) Returns database type mapping information for specified type. Declaration public SqlDataType GetDataType(Type type) Parameters Type Name Description Type type Mapped type. Returns Type Description SqlDataType Database type information. | Improve this Doc View Source GetDefaultFromEnumType(Type) Returns type, to which provided enumeration type is mapped or null , if type is not configured. See SetDefaultFromEnumType(Type, Type) . Declaration public Type GetDefaultFromEnumType(Type enumType) Parameters Type Name Description Type enumType Enumeration type. Returns Type Description Type Mapped type or null . | Improve this Doc View Source GetDefaultValue(Type) Returns default value for specified type. Default value is a value, used instead of NULL value, read from database. Declaration public object GetDefaultValue(Type type) Parameters Type Name Description Type type Value type. Returns Type Description Object Returns default value for type. | Improve this Doc View Source GetDynamicColumns(Type) Gets the dynamic columns defined on given type. Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type The type. Returns Type Description MemberInfo [] All dynamic columns defined on given type. | Improve this Doc View Source GetEntites() Returns types for cached EntityDescriptor s. Declaration public Type[] GetEntites() Returns Type Description Type [] Mapping types. See Also GetEntityDescriptor(Type) | Improve this Doc View Source GetEntityDescriptor(Type) Returns mapped entity descriptor. Declaration public EntityDescriptor GetEntityDescriptor(Type type) Parameters Type Name Description Type type Mapped type. Returns Type Description EntityDescriptor Mapping descriptor. | Improve this Doc View Source GetFluentMappingBuilder() Gets fluent mapping builder for current schema. Declaration public FluentMappingBuilder GetFluentMappingBuilder() Returns Type Description FluentMappingBuilder Fluent mapping builder. | Improve this Doc View Source GetMapValues(Type) Returns enum type mapping information or null for non-enum types. Declaration public virtual MapValue[] GetMapValues(Type type) Parameters Type Name Description Type type Mapped type. Returns Type Description MapValue [] Mapping values for enum type and null for non-enum types. | Improve this Doc View Source GetUnderlyingDataType(Type, ref Boolean) Returns scalar database type mapping information for provided type. Declaration public SqlDataType GetUnderlyingDataType(Type type, ref bool canBeNull) Parameters Type Name Description Type type Mapped type. Boolean canBeNull Returns true , if type type is enum with mapping to null value. Initial parameter value, passed to this method is not used. Returns Type Description SqlDataType Scalar database type information. | Improve this Doc View Source InitGenericConvertProvider(Type[]) Initialize generic conversions for specific type parameters. Declaration public bool InitGenericConvertProvider(params Type[] types) Parameters Type Name Description Type [] types Generic type parameters. Returns Type Description Boolean Returns true if new generic type conversions could have added to mapping schema. | Improve this Doc View Source InitGenericConvertProvider<T>() Initialize generic conversions for specific type parameter. Declaration public void InitGenericConvertProvider<T>() Type Parameters Name Description T Generic type parameter, for which converters should be initialized. | Improve this Doc View Source IsScalarType(Type) Returns true , if provided type mapped to scalar database type in current schema. Declaration public bool IsScalarType(Type type) Parameters Type Name Description Type type Type to check. Returns Type Description Boolean true , if type mapped to scalar database type. | Improve this Doc View Source SetCanBeNull(Type, Boolean) Sets null value support flag for specified type. Declaration public void SetCanBeNull(Type type, bool value) Parameters Type Name Description Type type Value type. Boolean value If true , specified type value could contain null . | Improve this Doc View Source SetConverter<TFrom, TTo>(Func<TFrom, TTo>) Specify conversion delegate for conversion from TFrom type to TTo type. Declaration public void SetConverter<TFrom, TTo>(Func<TFrom, TTo> func) Parameters Type Name Description Func <TFrom, TTo> func Conversion delegate. Type Parameters Name Description TFrom Source type. TTo Target type. | Improve this Doc View Source SetConvertExpression(Type, Type, LambdaExpression, Boolean) Specify conversion expression for conversion from fromType type to toType type. Declaration public void SetConvertExpression(Type fromType, Type toType, LambdaExpression expr, bool addNullCheck = true) Parameters Type Name Description Type fromType Source type. Type toType Target type. LambdaExpression expr Conversion expression. Boolean addNullCheck If true , conversion expression will be wrapped with default value substitution logic for null values. Wrapper will be added only if source type can have null values and conversion expression doesn't use default value provider. See DefaultValue<T> and DefaultValue types for more details. | Improve this Doc View Source SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) Specify conversion expression for conversion from TFrom type to TTo type. Declaration public void SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>> expr, bool addNullCheck = true) Parameters Type Name Description Expression < Func <TFrom, TTo>> expr Conversion expression. Boolean addNullCheck If true , conversion expression will be wrapped with default value substitution logic for null values. Wrapper will be added only if source type can have null values and conversion expression doesn't use default value provider. See DefaultValue<T> and DefaultValue types for more details. Type Parameters Name Description TFrom Source type. TTo Target type. | Improve this Doc View Source SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) Specify conversion expression for conversion from TFrom type to TTo type. Declaration public void SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>> checkNullExpr, Expression<Func<TFrom, TTo>> expr) Parameters Type Name Description Expression < Func <TFrom, TTo>> checkNullExpr null values conversion expression. Expression < Func <TFrom, TTo>> expr Conversion expression. Type Parameters Name Description TFrom Source type. TTo Target type. | Improve this Doc View Source SetCultureInfo(CultureInfo) Set conversion expressions for conversion from and to string for basic types ( byte , sbyte , short , ushort , int , uint , long , ulong , float , double , decimal , DateTime , DateTimeOffset ) using provided culture format providers. Declaration public void SetCultureInfo(CultureInfo info) Parameters Type Name Description CultureInfo info Culture with format providers for conversions. | Improve this Doc View Source SetDataType(Type, DataType) Associate specified type with LINQ to DB data type. Declaration public void SetDataType(Type type, DataType dataType) Parameters Type Name Description Type type Mapped type. DataType dataType LINQ to DB data type. | Improve this Doc View Source SetDataType(Type, SqlDataType) Associate specified type with database data type. Declaration public void SetDataType(Type type, SqlDataType dataType) Parameters Type Name Description Type type Mapped type. SqlDataType dataType Database data type. | Improve this Doc View Source SetDefaultFromEnumType(Type, Type) Sets type, to which provided enumeration type should be mapped. Declaration public void SetDefaultFromEnumType(Type enumType, Type defaultFromType) Parameters Type Name Description Type enumType Enumeration type. Type defaultFromType Mapped type. | Improve this Doc View Source SetDefaultValue(Type, Object) Sets default value for specific type. Default value is a value, used instead of NULL value, read from database. Declaration public void SetDefaultValue(Type type, object value) Parameters Type Name Description Type type Value type. Object value Default value. | Improve this Doc View Source SetGenericConvertProvider(Type) Adds generic type conversions provider. Type converter must implement IGenericInfoProvider interface. IGenericInfoProvider for more details and examples. Declaration public void SetGenericConvertProvider(Type type) Parameters Type Name Description Type type Generic type conversions provider. | Improve this Doc View Source SetScalarType(Type, Boolean) Configure how provided type should be handled during mapping to database - as scalar value or composite type. Declaration public void SetScalarType(Type type, bool isScalarType = true) Parameters Type Name Description Type type Type to configure. Boolean isScalarType true , if provided type should be mapped to scalar database value. | Improve this Doc View Source SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) Sets value to SQL converter action for specific value type. Declaration public void SetValueToSqlConverter(Type type, Action<StringBuilder, SqlDataType, object> converter) Parameters Type Name Description Type type Value type. Action < StringBuilder , SqlDataType , Object > converter Converter action. Action accepts three parameters: SQL string builder to write generated value SQL to; value SQL type descriptor; value. | Improve this Doc View Source TryGetConvertExpression(Type, Type) Returns custom value conversion expression from from type to to type if it is defined in mapping schema, or null otherwise. Declaration public virtual LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Source type. Type to Target type. Returns Type Description LambdaExpression Conversion expression or null , if conversion is not defined. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.LinqToDBException.html": {
    "href": "api/LinqToDB.LinqToDBException.html",
    "title": "Class LinqToDBException | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBException Defines the base class for the namespace exceptions. Inheritance Object Exception LinqToDBException LinqToDBConvertException RetryLimitExceededException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] public class LinqToDBException : Exception, ISerializable, _Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source LinqToDBException() Initializes a new instance of the LinqToDBException class. Declaration public LinqToDBException() Remarks This constructor initializes the Message property of the new instance such as \"A Build Type exception has occurred.\". | Improve this Doc View Source LinqToDBException(Exception) Initializes a new instance of the LinqToDBException class with the specified InnerException property. Declaration public LinqToDBException(Exception innerException) Parameters Type Name Description Exception innerException The InnerException, if any, that threw the current exception. See Also InnerException | Improve this Doc View Source LinqToDBException(SerializationInfo, StreamingContext) Initializes a new instance of the LinqToDBException class with serialized data. Declaration protected LinqToDBException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source LinqToDBException(String) Initializes a new instance of the LinqToDBException class with the specified error message. Declaration public LinqToDBException(string message) Parameters Type Name Description String message The message to display to the client when the exception is thrown. See Also Message | Improve this Doc View Source LinqToDBException(String, Exception) Initializes a new instance of the LinqToDBException class with the specified error message and InnerException property. Declaration public LinqToDBException(string message, Exception innerException) Parameters Type Name Description String message The message to display to the client when the exception is thrown. Exception innerException The InnerException, if any, that threw the current exception. See Also Message InnerException Implements ISerializable _Exception Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.LinqToDBConstants.html": {
    "href": "api/LinqToDB.LinqToDBConstants.html",
    "title": "Class LinqToDBConstants | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBConstants Inheritance Object LinqToDBConstants Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class LinqToDBConstants Fields | Improve this Doc View Source Copyright Declaration public const string Copyright = \"© 2011-2018 linq2db.com\" Field Value Type Description String | Improve this Doc View Source ProductDescription Declaration public const string ProductDescription = \"Linq to DB\" Field Value Type Description String | Improve this Doc View Source ProductName Declaration public const string ProductName = \"Linq to DB\" Field Value Type Description String"
  },
  "api/LinqToDB.LinqExtensions.html": {
    "href": "api/LinqToDB.LinqExtensions.html",
    "title": "Class LinqExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class LinqExtensions Contains extension methods for LINQ queries. Inheritance Object LinqExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class LinqExtensions Properties | Improve this Doc View Source ExtensionsAdapter Declaration public static IExtensionsAdapter ExtensionsAdapter { get; set; } Property Value Type Description IExtensionsAdapter | Improve this Doc View Source ProcessSourceQueryable Gets or sets callback for preprocessing query before execution. Useful for intercepting queries. Declaration public static Func<IQueryable, IQueryable> ProcessSourceQueryable { get; set; } Property Value Type Description Func < IQueryable , IQueryable > Methods | Improve this Doc View Source AsCte<TSource>(IQueryable<TSource>) Specifies a temporary named result set, known as a common table expression (CTE). Declaration public static IQueryable<TSource> AsCte<TSource>(this IQueryable<TSource> source) Parameters Type Name Description IQueryable <TSource> source Source query. Returns Type Description IQueryable <TSource> Common table expression. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source AsCte<TSource>(IQueryable<TSource>, String) Specifies a temporary named result set, known as a common table expression (CTE). Declaration public static IQueryable<TSource> AsCte<TSource>(this IQueryable<TSource> source, string name) Parameters Type Name Description IQueryable <TSource> source Source query. String name Common table expression name. Returns Type Description IQueryable <TSource> Common table expression. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source AsUpdatable<T>(IQueryable<T>) Casts IQueryable<T> query to IUpdatable<T> query. Declaration public static IUpdatable<T> AsUpdatable<T>(this IQueryable<T> source) Parameters Type Name Description IQueryable <T> source Source IQueryable<T> query. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Query record type. | Improve this Doc View Source CrossJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, TResult>>) Defines cross join between two sub-queries or tables. Declaration public static IQueryable<TResult> CrossJoin<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source DatabaseName<T>(ITable<T>, String) Overrides database name with new name for current query. This call will have effect only for databases that support database name in fully-qualified table name. Supported by: Access, DB2, MySQL, PostgreSQL, SAP HANA, SQLite, Informix, SQL Server, Sybase ASE. Requires schema name (see SchemaName<T>(ITable<T>, String) ): DB2, SAP HANA, PostgreSQL. PostgreSQL supports only name of current database. Declaration public static ITable<T> DatabaseName<T>(this ITable<T> table, string name) Parameters Type Name Description ITable <T> table Table-like query source. String name Name of database. Returns Type Description ITable <T> Table-like query source with new database name. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source Delete<T>(IQueryable<T>) Executes delete operation, using source query as filter for records, that should be deleted. Declaration public static int Delete<T>(this IQueryable<T> source) Parameters Type Name Description IQueryable <T> source Query that returns records to delete. Returns Type Description Int32 Number of deleted records. Type Parameters Name Description T Mapping class for delete operation target table. | Improve this Doc View Source Delete<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Executes delete operation, using source query as initial filter for records, that should be deleted, and predicate expression as additional filter. Declaration public static int Delete<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate) Parameters Type Name Description IQueryable <T> source Query that returns records to delete. Expression < Func <T, Boolean >> predicate Filter expression, to specify what records from source should be deleted. Returns Type Description Int32 Number of deleted records. Type Parameters Name Description T Mapping class for delete operation target table. | Improve this Doc View Source DeleteAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, CancellationToken) Executes delete operation asynchronously, using source query as initial filter for records, that should be deleted, and predicate expression as additional filter. Declaration public static Task<int> DeleteAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <T> source Query that returns records to delete. Expression < Func <T, Boolean >> predicate Filter expression, to specify what records from source should be deleted. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of deleted records. Type Parameters Name Description T Mapping class for delete operation target table. | Improve this Doc View Source DeleteAsync<T>(IQueryable<T>, CancellationToken) Executes delete operation asynchronously, using source query as filter for records, that should be deleted. Declaration public static Task<int> DeleteAsync<T>(this IQueryable<T> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <T> source Query that returns records to delete. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of deleted records. Type Parameters Name Description T Mapping class for delete operation target table. | Improve this Doc View Source Drop<T>(ITable<T>, Boolean) Drops database table. Declaration public static int Drop<T>(this ITable<T> target, bool throwExceptionIfNotExists = true) Parameters Type Name Description ITable <T> target Dropped table. Boolean throwExceptionIfNotExists If false , any exception during drop operation will be silently catched and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . Returns Type Description Int32 Number of affected records. Usually -1 as it is not data modification operation. Type Parameters Name Description T Table record type. | Improve this Doc View Source DropAsync<T>(ITable<T>, Boolean, CancellationToken) Drops database table asynchronously. Declaration public static Task<int> DropAsync<T>(this ITable<T> target, bool throwExceptionIfNotExists = true, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ITable <T> target Dropped table. Boolean throwExceptionIfNotExists If false , any exception during drop operation will be silently catched and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Usually -1 as it is not data modification operation. Type Parameters Name Description T Table record type. | Improve this Doc View Source ElementAt<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Selects record at specified position from source query. If query doesn't return enough records, InvalidOperationException will be thrown. Declaration public static TSource ElementAt<TSource>(this IQueryable<TSource> source, Expression<Func<int>> index) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < Int32 >> index Expression that defines index of record to select. Returns Type Description TSource Record at specified position. Type Parameters Name Description TSource Source table record type. Exceptions Type Condition InvalidOperationException Source query doesn't have record with specified index. | Improve this Doc View Source ElementAtAsync<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, CancellationToken) Selects record at specified position from source query asynchronously. If query doesn't return enough records, InvalidOperationException will be thrown. Declaration public static Task<TSource> ElementAtAsync<TSource>(this IQueryable<TSource> source, Expression<Func<int>> index, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < Int32 >> index Expression that defines index of record to select. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TSource> Record at specified position. Type Parameters Name Description TSource Source table record type. Exceptions Type Condition InvalidOperationException Source query doesn't have record with specified index. | Improve this Doc View Source ElementAtOrDefault<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Selects record at specified position from source query. Declaration public static TSource ElementAtOrDefault<TSource>(this IQueryable<TSource> source, Expression<Func<int>> index) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < Int32 >> index Expression that defines index of record to select. Returns Type Description TSource Record at specified position or default value, if source query doesn't have record with such index. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source ElementAtOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, CancellationToken) Selects record at specified position from source query asynchronously. Declaration public static Task<TSource> ElementAtOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<int>> index, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < Int32 >> index Expression that defines index of record to select. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TSource> Record at specified position or default value, if source query doesn't have record with such index. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source FullJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Defines full outer join between two sub-queries or tables. Declaration public static IQueryable<TSource> FullJoin<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Right join operand. Expression < Func <TSource, Boolean >> predicate Join predicate. Returns Type Description IQueryable <TSource> Right operand. Type Parameters Name Description TSource Type of record for right join operand. | Improve this Doc View Source FullJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) Defines full outer join between two sub-queries or tables. Declaration public static IQueryable<TResult> FullJoin<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, Expression<Func<TOuter, TInner, bool>> predicate, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. Expression < Func <TOuter, TInner, Boolean >> predicate Join predicate. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source GenerateTestString(IQueryable, Boolean) Generates test source code for specified query. This method could be usefull to debug queries and attach test code to linq2db issue reports. Declaration public static string GenerateTestString(this IQueryable query, bool mangleNames = false) Parameters Type Name Description IQueryable query Query to test. Boolean mangleNames Should we use real names for used types, members and namespace or generate obfuscated names. Returns Type Description String Test source code. | Improve this Doc View Source Having<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Filters source query using HAVING SQL clause. In general you don't need to use this method as linq2db is able to propely identify current context for Where<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) method and generate HAVING clause. More details . Declaration public static IQueryable<TSource> Having<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Source query to filter. Expression < Func <TSource, Boolean >> predicate Filtering expression. Returns Type Description IQueryable <TSource> Filtered query. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source InnerJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Defines inner join between two sub-queries or tables. Declaration public static IQueryable<TSource> InnerJoin<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Right join operand. Expression < Func <TSource, Boolean >> predicate Join predicate. Returns Type Description IQueryable <TSource> Right operand. Type Parameters Name Description TSource Type of record for right join operand. | Improve this Doc View Source InnerJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) Defines inner or outer join between two sub-queries or tables. Declaration public static IQueryable<TResult> InnerJoin<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, Expression<Func<TOuter, TInner, bool>> predicate, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. Expression < Func <TOuter, TInner, Boolean >> predicate Join predicate. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source Insert<T>(ITable<T>, Expression<Func<T>>) Inserts single record into target table. Declaration public static int Insert<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. Returns Type Description Int32 Number of affected records. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source Insert<T>(IValueInsertable<T>) Executes insert query. Declaration public static int Insert<T>(this IValueInsertable<T> source) Parameters Type Name Description IValueInsertable <T> source Insert query. Returns Type Description Int32 Number of affected records. Type Parameters Name Description T Target table record type. | Improve this Doc View Source Insert<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Executes configured insert query. Declaration public static int Insert<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Returns Type Description Int32 Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source Insert<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Inserts records from source query into target table. Declaration public static int Insert<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Returns Type Description Int32 Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) Inserts single record into target table asynchronously. Declaration public static Task<int> InsertAsync<T>(this ITable<T> target, Expression<Func<T>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertAsync<T>(IValueInsertable<T>, CancellationToken) Executes insert query asynchronously. Declaration public static Task<int> InsertAsync<T>(this IValueInsertable<T> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IValueInsertable <T> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) Executes configured insert query asynchronously. Declaration public static Task<int> InsertAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Inserts records from source query into target table asynchronously. Declaration public static Task<int> InsertAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>) Inserts new record into target table or updates existing record if record with the same primary key value already exists in target table. Declaration public static int InsertOrUpdate<T>(this ITable<T> target, Expression<Func<T>> insertSetter, Expression<Func<T, T>> onDuplicateKeyUpdateSetter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> insertSetter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Expression < Func <T, T>> onDuplicateKeyUpdateSetter Updated record constructor expression. Expression supports only target table record new expression with field initializers. Accepts updated record as parameter. Returns Type Description Int32 Number of affected records. Type Parameters Name Description T Table record type. | Improve this Doc View Source InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>, Expression<Func<T>>) Inserts new record into target table or updates existing record if record with the same key value already exists in target table. Declaration public static int InsertOrUpdate<T>(this ITable<T> target, Expression<Func<T>> insertSetter, Expression<Func<T, T>> onDuplicateKeyUpdateSetter, Expression<Func<T>> keySelector) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> insertSetter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Expression < Func <T, T>> onDuplicateKeyUpdateSetter Updated record constructor expression. Expression supports only target table record new expression with field initializers. Accepts updated record as parameter. Expression < Func <T>> keySelector Key fields selector to specify what fields and values must be used as key fields for selection between insert and update operations. Expression supports only target table record new expression with field initializers for each key field. Assigned key field value will be used as key value by operation type selector. Returns Type Description Int32 Number of affected records. Type Parameters Name Description T Table record type. | Improve this Doc View Source InsertOrUpdateAsync<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>, Expression<Func<T>>, CancellationToken) Asynchronously inserts new record into target table or updates existing record if record with the same key value already exists in target table. Declaration public static Task<int> InsertOrUpdateAsync<T>(this ITable<T> target, Expression<Func<T>> insertSetter, Expression<Func<T, T>> onDuplicateKeyUpdateSetter, Expression<Func<T>> keySelector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> insertSetter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Expression < Func <T, T>> onDuplicateKeyUpdateSetter Updated record constructor expression. Expression supports only target table record new expression with field initializers. Accepts updated record as parameter. Expression < Func <T>> keySelector Key fields selector to specify what fields and values must be used as key fields for selection between insert and update operations. Expression supports only target table record new expression with field initializers for each key field. Assigned key field value will be used as key value by operation type selector. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Type Parameters Name Description T Table record type. | Improve this Doc View Source InsertOrUpdateAsync<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>, CancellationToken) Asynchronously inserts new record into target table or updates existing record if record with the same primary key value already exists in target table. Declaration public static Task<int> InsertOrUpdateAsync<T>(this ITable<T> target, Expression<Func<T>> insertSetter, Expression<Func<T, T>> onDuplicateKeyUpdateSetter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> insertSetter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Expression < Func <T, T>> onDuplicateKeyUpdateSetter Updated record constructor expression. Expression supports only target table record new expression with field initializers. Accepts updated record as parameter. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Type Parameters Name Description T Table record type. | Improve this Doc View Source InsertWithDecimalIdentity<T>(ITable<T>, Expression<Func<T>>) Inserts single record into target table and returns identity value of inserted record as Decimal value. Declaration public static decimal InsertWithDecimalIdentity<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. Returns Type Description Decimal Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithDecimalIdentity<T>(IValueInsertable<T>) Executes insert query and returns identity value of inserted record as Decimal value. Declaration public static decimal? InsertWithDecimalIdentity<T>(this IValueInsertable<T> source) Parameters Type Name Description IValueInsertable <T> source Insert query. Returns Type Description Nullable < Decimal > Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithDecimalIdentity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Executes configured insert query and returns identity value of last inserted record as Decimal value. Declaration public static decimal? InsertWithDecimalIdentity<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Returns Type Description Nullable < Decimal > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithDecimalIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Inserts records from source query into target table and returns identity value of last inserted record as Decimal value. Declaration public static decimal? InsertWithDecimalIdentity<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Returns Type Description Nullable < Decimal > Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithDecimalIdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) Inserts single record into target table asynchronously and returns identity value of inserted record as Decimal value. Declaration public static Task<decimal> InsertWithDecimalIdentityAsync<T>(this ITable<T> target, Expression<Func<T>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Decimal > Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithDecimalIdentityAsync<T>(IValueInsertable<T>, CancellationToken) Executes insert query asynchronously and returns identity value of inserted record as Decimal value. Declaration public static Task<decimal? > InsertWithDecimalIdentityAsync<T>(this IValueInsertable<T> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IValueInsertable <T> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Nullable < Decimal >> Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithDecimalIdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) Executes configured insert query asynchronously and returns identity value of last inserted record as Decimal value. Declaration public static Task<decimal? > InsertWithDecimalIdentityAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Nullable < Decimal >> Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithDecimalIdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Inserts records from source query into target table asynchronously and returns identity value of last inserted record as Decimal value. Declaration public static Task<decimal? > InsertWithDecimalIdentityAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Nullable < Decimal >> Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithIdentity<T>(ITable<T>, Expression<Func<T>>) Inserts single record into target table and returns identity value of inserted record. Declaration public static object InsertWithIdentity<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. Returns Type Description Object Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithIdentity<T>(IValueInsertable<T>) Executes insert query and returns identity value of inserted record. Declaration public static object InsertWithIdentity<T>(this IValueInsertable<T> source) Parameters Type Name Description IValueInsertable <T> source Insert query. Returns Type Description Object Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithIdentity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Executes configured insert query and returns identity value of last inserted record. Declaration public static object InsertWithIdentity<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Returns Type Description Object Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Inserts records from source query into target table and returns identity value of last inserted record. Declaration public static object InsertWithIdentity<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Returns Type Description Object Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithIdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) Inserts single record into target table asynchronously and returns identity value of inserted record. Declaration public static Task<object> InsertWithIdentityAsync<T>(this ITable<T> target, Expression<Func<T>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Object > Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithIdentityAsync<T>(IValueInsertable<T>, CancellationToken) Executes insert query asynchronously and returns identity value of inserted record. Declaration public static Task<object> InsertWithIdentityAsync<T>(this IValueInsertable<T> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IValueInsertable <T> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Object > Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithIdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) Executes configured insert query asynchronously and returns identity value of last inserted record. Declaration public static Task<object> InsertWithIdentityAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Object > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithIdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Inserts records from source query into target table asynchronously and returns identity value of last inserted record. Declaration public static Task<object> InsertWithIdentityAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Object > Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithInt32Identity<T>(ITable<T>, Expression<Func<T>>) Inserts single record into target table and returns identity value of inserted record as Int32 value. Declaration public static int InsertWithInt32Identity<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. Returns Type Description Int32 Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithInt32Identity<T>(IValueInsertable<T>) Executes insert query and returns identity value of inserted record as Int32 value. Declaration public static int? InsertWithInt32Identity<T>(this IValueInsertable<T> source) Parameters Type Name Description IValueInsertable <T> source Insert query. Returns Type Description Nullable < Int32 > Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithInt32Identity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Executes configured insert query and returns identity value of last inserted record as Int32 value. Declaration public static int? InsertWithInt32Identity<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Returns Type Description Nullable < Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithInt32Identity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Inserts records from source query into target table and returns identity value of last inserted record as Int32 value. Declaration public static int? InsertWithInt32Identity<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Returns Type Description Nullable < Int32 > Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithInt32IdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) Inserts single record into target table asynchronously and returns identity value of inserted record as Int32 value. Declaration public static Task<int> InsertWithInt32IdentityAsync<T>(this ITable<T> target, Expression<Func<T>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithInt32IdentityAsync<T>(IValueInsertable<T>, CancellationToken) Executes insert query asynchronously and returns identity value of inserted record as Int32 value. Declaration public static Task<int? > InsertWithInt32IdentityAsync<T>(this IValueInsertable<T> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IValueInsertable <T> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Nullable < Int32 >> Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithInt32IdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) Executes configured insert query asynchronously and returns identity value of last inserted record as Int32 value. Declaration public static Task<int? > InsertWithInt32IdentityAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Nullable < Int32 >> Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithInt32IdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Inserts records from source query into target table asynchronously and returns identity value of last inserted record as Int32 value. Declaration public static Task<int? > InsertWithInt32IdentityAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Nullable < Int32 >> Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithInt64Identity<T>(ITable<T>, Expression<Func<T>>) Inserts single record into target table and returns identity value of inserted record as Int64 value. Declaration public static long InsertWithInt64Identity<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. Returns Type Description Int64 Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithInt64Identity<T>(IValueInsertable<T>) Executes insert query and returns identity value of inserted record as Int64 value. Declaration public static long? InsertWithInt64Identity<T>(this IValueInsertable<T> source) Parameters Type Name Description IValueInsertable <T> source Insert query. Returns Type Description Nullable < Int64 > Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithInt64Identity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Executes configured insert query and returns identity value of last inserted record as Int64 value. Declaration public static long? InsertWithInt64Identity<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Returns Type Description Nullable < Int64 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithInt64Identity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Inserts records from source query into target table and returns identity value of last inserted record as Int64 value. Declaration public static long? InsertWithInt64Identity<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Returns Type Description Nullable < Int64 > Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithInt64IdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) Inserts single record into target table asynchronously and returns identity value of inserted record as Int64 value. Declaration public static Task<long> InsertWithInt64IdentityAsync<T>(this ITable<T> target, Expression<Func<T>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int64 > Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithInt64IdentityAsync<T>(IValueInsertable<T>, CancellationToken) Executes insert query asynchronously and returns identity value of inserted record as Int64 value. Declaration public static Task<long? > InsertWithInt64IdentityAsync<T>(this IValueInsertable<T> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IValueInsertable <T> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Nullable < Int64 >> Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithInt64IdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) Executes configured insert query asynchronously and returns identity value of last inserted record as Int64 value. Declaration public static Task<long? > InsertWithInt64IdentityAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Nullable < Int64 >> Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithInt64IdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Inserts records from source query into target table asynchronously and returns identity value of last inserted record as Int64 value. Declaration public static Task<long? > InsertWithInt64IdentityAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Nullable < Int64 >> Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source Into<T>(IDataContext, ITable<T>) Starts insert operation LINQ query definition. Declaration public static IValueInsertable<T> Into<T>(this IDataContext dataContext, ITable<T> target) Parameters Type Name Description IDataContext dataContext Database connection context. ITable <T> target Target table. Returns Type Description IValueInsertable <T> Insertable source query. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Into<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>) Converts LINQ query into insert query with source query data as data to insert. Declaration public static ISelectInsertable<TSource, TTarget> Into<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target) Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Returns Type Description ISelectInsertable <TSource, TTarget> Insertable source query. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. | Improve this Doc View Source Join<TSource>(IQueryable<TSource>, SqlJoinType, Expression<Func<TSource, Boolean>>) Defines inner or outer join between two sub-queries or tables. Declaration public static IQueryable<TSource> Join<TSource>(this IQueryable<TSource> source, SqlJoinType joinType, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Right join operand. SqlJoinType joinType Type of join. Expression < Func <TSource, Boolean >> predicate Join predicate. Returns Type Description IQueryable <TSource> Right operand. Type Parameters Name Description TSource Type of record for right join operand. | Improve this Doc View Source Join<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, SqlJoinType, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) Defines inner or outer join between two sub-queries or tables. Declaration public static IQueryable<TResult> Join<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, SqlJoinType joinType, Expression<Func<TOuter, TInner, bool>> predicate, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. SqlJoinType joinType Type of join. Expression < Func <TOuter, TInner, Boolean >> predicate Join predicate. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source LeftJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Defines left outer join between two sub-queries or tables. Declaration public static IQueryable<TSource> LeftJoin<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Right join operand. Expression < Func <TSource, Boolean >> predicate Join predicate. Returns Type Description IQueryable <TSource> Right operand. Type Parameters Name Description TSource Type of record for right join operand. | Improve this Doc View Source LeftJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) Defines left outer join between two sub-queries or tables. Declaration public static IQueryable<TResult> LeftJoin<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, Expression<Func<TOuter, TInner, bool>> predicate, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. Expression < Func <TOuter, TInner, Boolean >> predicate Join predicate. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source LoadWith<T>(ITable<T>, Expression<Func<T, Object>>) Specifies associations, that should be loaded for each loaded record from current table. All associations, specified in selector expression, will be loaded. Take into account that use of this method could require multiple queries to load all requested associations. Some usage examples: // loads records from Table1 with Reference association loaded for each Table1 record db.Table1.LoadWith(r => r.Reference); // loads records from Table1 with Reference1 association loaded for each Table1 record // loads records from Reference2 association for each loaded Reference1 record db.Table1.LoadWith(r => r.Reference1.Reference2); // loads records from Table1 with References collection association loaded for each Table1 record db.Table1.LoadWith(r => r.References); // loads records from Table1 with Reference1 collection association loaded for each Table1 record // loads records from Reference2 collection association for each loaded Reference1 record // loads records from Reference3 association for each loaded Reference2 record // note that a way you access collection association record (by index, using First() method) doesn't affect // query results and allways select all records db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3); Declaration public static ITable<T> LoadWith<T>(this ITable<T> table, Expression<Func<T, object>> selector) Parameters Type Name Description ITable <T> table Table-like query source. Expression < Func <T, Object >> selector Association selection expression. Returns Type Description ITable <T> Table-like query source. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source OwnerName<T>(ITable<T>, String) Overrides owner/schema name with new name for current query. This call will have effect only for databases that support owner/schema name in fully-qualified table name. SchemaName<T>(ITable<T>, String) method is a synonym of this method. Supported by: DB2, Oracle, PostgreSQL, SAP HANA, Informix, SQL Server, Sybase ASE. Declaration [Obsolete(\"Use SchemaName instead.\")] public static ITable<T> OwnerName<T>(this ITable<T> table, string name) Parameters Type Name Description ITable <T> table Table-like query source. String name Name of owner/schema. Returns Type Description ITable <T> Table-like query source with new owner/schema name. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source RightJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Defines right outer join between two sub-queries or tables. Declaration public static IQueryable<TSource> RightJoin<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Right join operand. Expression < Func <TSource, Boolean >> predicate Join predicate. Returns Type Description IQueryable <TSource> Right operand. Type Parameters Name Description TSource Type of record for right join operand. | Improve this Doc View Source RightJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) Defines right outer join between two sub-queries or tables. Declaration public static IQueryable<TResult> RightJoin<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, Expression<Func<TOuter, TInner, bool>> predicate, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. Expression < Func <TOuter, TInner, Boolean >> predicate Join predicate. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source SchemaName<T>(ITable<T>, String) Overrides owner/schema name with new name for current query. This call will have effect only for databases that support owner/schema name in fully-qualified table name. Supported by: DB2, Oracle, PostgreSQL, SAP HANA, Informix, SQL Server, Sybase ASE. Declaration public static ITable<T> SchemaName<T>(this ITable<T> table, string name) Parameters Type Name Description ITable <T> table Table-like query source. String name Name of owner/schema. Returns Type Description ITable <T> Table-like query source with new owner/schema name. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source Select<T>(IDataContext, Expression<Func<T>>) Loads scalar value or record from database without explicit table source. Could be usefull for function calls, querying of database variables or properties, subqueries, execution of code on server side. Declaration public static T Select<T>(this IDataContext dataContext, Expression<Func<T>> selector) Parameters Type Name Description IDataContext dataContext Database connection context. Expression < Func <T>> selector Value selection expression. Returns Type Description T Requested value. Type Parameters Name Description T Type of result. | Improve this Doc View Source SelectAsync<T>(IDataContext, Expression<Func<T>>) Loads scalar value or record from database without explicit table source asynchronously. Could be usefull for function calls, querying of database variables or properties, subqueries, execution of code on server side. Declaration public static Task<T> SelectAsync<T>(this IDataContext dataContext, Expression<Func<T>> selector) Parameters Type Name Description IDataContext dataContext Database connection context. Expression < Func <T>> selector Value selection expression. Returns Type Description Task <T> Requested value. Type Parameters Name Description T Type of result. | Improve this Doc View Source Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, TV) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IUpdatable<T> source, Expression<Func<T, TV>> extract, TV value) Parameters Type Name Description IUpdatable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. TV value Value, assigned to updated field. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IUpdatable<T> source, Expression<Func<T, TV>> extract, Expression<Func<T, TV>> update) Parameters Type Name Description IUpdatable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. Expression < Func <T, TV>> update Updated field setter expression. Uses updated record as parameter. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IUpdatable<T> source, Expression<Func<T, TV>> extract, Expression<Func<TV>> update) Parameters Type Name Description IUpdatable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. Expression < Func <TV>> update Updated field setter expression. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, TV) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IQueryable<T> source, Expression<Func<T, TV>> extract, TV value) Parameters Type Name Description IQueryable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. TV value Value, assigned to updated field. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IQueryable<T> source, Expression<Func<T, TV>> extract, Expression<Func<T, TV>> update) Parameters Type Name Description IQueryable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. Expression < Func <T, TV>> update Updated field setter expression. Uses updated record as parameter. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IQueryable<T> source, Expression<Func<T, TV>> extract, Expression<Func<TV>> update) Parameters Type Name Description IQueryable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. Expression < Func <TV>> update Updated field setter expression. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Skip<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Ignores first N records from source query. Declaration public static IQueryable<TSource> Skip<TSource>(this IQueryable<TSource> source, Expression<Func<int>> count) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < Int32 >> count Expression that defines number of records to skip. Returns Type Description IQueryable <TSource> Query without skipped records. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source TableName<T>(ITable<T>, String) Overrides table or view name with new name for current query. Declaration public static ITable<T> TableName<T>(this ITable<T> table, string name) Parameters Type Name Description ITable <T> table Table-like query source. String name Name of table. Returns Type Description ITable <T> Table-like query source with new name. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source Take<TSource>(IQueryable<TSource>, Int32, TakeHints) Limits number of records, returned from query. Allows to specify TAKE clause hints. Using this method may cause runtime LinqException if take hints are not supported by database. Declaration public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, int count, TakeHints hints) Parameters Type Name Description IQueryable <TSource> source Source query. Int32 count SQL TAKE parameter value. TakeHints hints TakeHints hints for SQL TAKE clause. Returns Type Description IQueryable <TSource> Query with limit applied. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Limits number of records, returned from query. Declaration public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, Expression<Func<int>> count) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < Int32 >> count Expression that defines number of records to select. Returns Type Description IQueryable <TSource> Query with limit applied. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, TakeHints) Limits number of records, returned from query. Allows to specify TAKE clause hints. Using this method may cause runtime LinqException if take hints are not supported by database. Declaration public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, Expression<Func<int>> count, TakeHints hints) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < Int32 >> count Expression that defines SQL TAKE parameter value. TakeHints hints TakeHints hints for SQL TAKE clause. Returns Type Description IQueryable <TSource> Query with limit applied. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source ThenOrBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) Adds ascending sort expression to a query. If query already sorted, existing sorting will be preserved and updated with new sort. Declaration public static IOrderedQueryable<TSource> ThenOrBy<TSource, TKey>(this IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func <TSource, TKey>> keySelector Sort expression selector. Returns Type Description IOrderedQueryable <TSource> Sorted query. Type Parameters Name Description TSource Source query record type. TKey Sort expression type. | Improve this Doc View Source ThenOrByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) Adds descending sort expression to a query. If query already sorted, existing sorting will be preserved and updated with new sort. Declaration public static IOrderedQueryable<TSource> ThenOrByDescending<TSource, TKey>(this IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func <TSource, TKey>> keySelector Sort expression selector. Returns Type Description IOrderedQueryable <TSource> Sorted query. Type Parameters Name Description TSource Source query record type. TKey Sort expression type. | Improve this Doc View Source Truncate<T>(ITable<T>, Boolean) Truncates database table. Declaration public static int Truncate<T>(this ITable<T> target, bool resetIdentity = true) Parameters Type Name Description ITable <T> target Truncated table. Boolean resetIdentity Performs reset identity column. Returns Type Description Int32 Number of affected records. Usually -1 as it is not data modification operation. Type Parameters Name Description T Table record type. | Improve this Doc View Source TruncateAsync<T>(ITable<T>, Boolean, CancellationToken) Truncates database table asynchronously. Declaration public static Task<int> TruncateAsync<T>(this ITable<T> target, bool resetIdentity = true, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ITable <T> target Truncated table. Boolean resetIdentity Performs reset identity column. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Usually -1 as it is not data modification operation. Type Parameters Name Description T Table record type. | Improve this Doc View Source Update<T>(IUpdatable<T>) Executes update operation for already configured update query. Declaration public static int Update<T>(this IUpdatable<T> source) Parameters Type Name Description IUpdatable <T> source Update query. Returns Type Description Int32 Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source Update<T>(IQueryable<T>, Expression<Func<T, T>>) Executes update operation using source query as record filter. Declaration public static int Update<T>(this IQueryable<T> source, Expression<Func<T, T>> setter) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description Int32 Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source Update<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>) Executes update operation using source query as record filter with additional filter expression. Declaration public static int Update<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, Expression<Func<T, T>> setter) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, Boolean >> predicate Filter expression, to specify what records from source query should be updated. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description Int32 Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source Update<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Executes update-from-source operation against target table. Declaration public static int Update<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description Int32 Number of updated records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. | Improve this Doc View Source Update<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>) Executes update-from-source operation against target table. Also see Update<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) method. Declaration public static int Update<TSource, TTarget>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table selection expression. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description Int32 Number of updated records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. | Improve this Doc View Source UpdateAsync<T>(IUpdatable<T>, CancellationToken) Executes update operation asynchronously for already configured update query. Declaration public static Task<int> UpdateAsync<T>(this IUpdatable<T> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IUpdatable <T> source Update query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source UpdateAsync<T>(IQueryable<T>, Expression<Func<T, T>>, CancellationToken) Executes update operation asynchronously using source query as record filter. Declaration public static Task<int> UpdateAsync<T>(this IQueryable<T> source, Expression<Func<T, T>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source UpdateAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>, CancellationToken) Executes update operation asynchronously using source query as record filter with additional filter expression. Declaration public static Task<int> UpdateAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, Expression<Func<T, T>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, Boolean >> predicate Filter expression, to specify what records from source query should be updated. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source UpdateAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Executes update-from-source operation asynchronously against target table. Declaration public static Task<int> UpdateAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of updated records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. | Improve this Doc View Source UpdateAsync<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, CancellationToken) Executes update-from-source operation asynchronously against target table. Also see UpdateAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) method. Declaration public static Task<int> UpdateAsync<TSource, TTarget>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table selection expression. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of updated records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. | Improve this Doc View Source Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, TV) Starts insert operation LINQ query definition from field setter expression. Declaration public static IValueInsertable<T> Value<T, TV>(this ITable<T> source, Expression<Func<T, TV>> field, TV value) Parameters Type Name Description ITable <T> source Source table to insert to. Expression < Func <T, TV>> field Setter field selector expression. TV value Setter field value. Returns Type Description IValueInsertable <T> Insert query. Type Parameters Name Description T Target table record type. TV Setter field type. | Improve this Doc View Source Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Starts insert operation LINQ query definition from field setter expression. Declaration public static IValueInsertable<T> Value<T, TV>(this ITable<T> source, Expression<Func<T, TV>> field, Expression<Func<TV>> value) Parameters Type Name Description ITable <T> source Source table to insert to. Expression < Func <T, TV>> field Setter field selector expression. Expression < Func <TV>> value Setter field value expression. Returns Type Description IValueInsertable <T> Insert query. Type Parameters Name Description T Target table record type. TV Setter field type. | Improve this Doc View Source Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, TV) Add field setter to insert operation LINQ query. Declaration public static IValueInsertable<T> Value<T, TV>(this IValueInsertable<T> source, Expression<Func<T, TV>> field, TV value) Parameters Type Name Description IValueInsertable <T> source Insert query. Expression < Func <T, TV>> field Setter field selector expression. TV value Setter field value. Returns Type Description IValueInsertable <T> Insert query. Type Parameters Name Description T Target table record type. TV Setter field type. | Improve this Doc View Source Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Add field setter to insert operation LINQ query. Declaration public static IValueInsertable<T> Value<T, TV>(this IValueInsertable<T> source, Expression<Func<T, TV>> field, Expression<Func<TV>> value) Parameters Type Name Description IValueInsertable <T> source Insert query. Expression < Func <T, TV>> field Setter field selector expression. Expression < Func <TV>> value Setter field value expression. Returns Type Description IValueInsertable <T> Insert query. Type Parameters Name Description T Target table record type. TV Setter field type. | Improve this Doc View Source Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, TValue) Add field setter to insert operation LINQ query. Declaration public static ISelectInsertable<TSource, TTarget> Value<TSource, TTarget, TValue>(this ISelectInsertable<TSource, TTarget> source, Expression<Func<TTarget, TValue>> field, TValue value) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Expression < Func <TTarget, TValue>> field Setter field selector expression. TValue value Setter field value. Returns Type Description ISelectInsertable <TSource, TTarget> Insert query. Type Parameters Name Description TSource Source record type. TTarget Target record type TValue Field type. | Improve this Doc View Source Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TSource, TValue>>) Add field setter to insert operation LINQ query. Declaration public static ISelectInsertable<TSource, TTarget> Value<TSource, TTarget, TValue>(this ISelectInsertable<TSource, TTarget> source, Expression<Func<TTarget, TValue>> field, Expression<Func<TSource, TValue>> value) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Expression < Func <TTarget, TValue>> field Setter field selector expression. Expression < Func <TSource, TValue>> value Setter field value expression. Accepts source record as parameter. Returns Type Description ISelectInsertable <TSource, TTarget> Insert query. Type Parameters Name Description TSource Source record type. TTarget Target record type TValue Field type. | Improve this Doc View Source Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TValue>>) Add field setter to insert operation LINQ query. Declaration public static ISelectInsertable<TSource, TTarget> Value<TSource, TTarget, TValue>(this ISelectInsertable<TSource, TTarget> source, Expression<Func<TTarget, TValue>> field, Expression<Func<TValue>> value) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Expression < Func <TTarget, TValue>> field Setter field selector expression. Expression < Func <TValue>> value Setter field value expression. Returns Type Description ISelectInsertable <TSource, TTarget> Insert query. Type Parameters Name Description TSource Source record type. TTarget Target record type TValue Field type. | Improve this Doc View Source With<T>(ITable<T>, String) Adds table hints to a table in generated query. Also see WithTableExpression<T>(ITable<T>, String) method. // will produce following SQL code in generated query: table tablealias with(UpdLock) var tableWithHint = db.Table.With(\"UpdLock\"); Declaration public static ITable<T> With<T>(this ITable<T> table, string args) Parameters Type Name Description ITable <T> table Table-like query source. String args SQL text, added to WITH({0}) after table name in generated query. Returns Type Description ITable <T> Table-like query source with table hints. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source WithTableExpression<T>(ITable<T>, String) Replaces access to a table in generated query with SQL expression. Example below adds hint to a table. Also see With<T>(ITable<T>, String) method. var tableWithHint = db.Table.WithTableExpression(\"{0} {1} with (UpdLock)\"); Declaration public static ITable<T> WithTableExpression<T>(this ITable<T> table, string expression) Parameters Type Name Description ITable <T> table Table-like query source. String expression SQL template to use instead of table name. Template supports two parameters: - {0} original table name; - {1} table alias. Returns Type Description ITable <T> Table-like query source with new table source expression. Type Parameters Name Description T Table record mapping class."
  },
  "api/LinqToDB.Linq.html": {
    "href": "api/LinqToDB.Linq.html",
    "title": "Namespace LinqToDB.Linq | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Linq Classes Expressions Expressions.LazyExpressionInfo Internals LinqException Defines the base class for the namespace exceptions. MethodHelper NoLinqCache Provides a scope, in which LINQ queries will not be added to a LINQ query cache. This could be used to tell linq2db to not cache queries that operate with big parametes. More details could be found here . Take into account that this class only disables adding of new query, created in its scope, to a cache. If query already present in cache - linq2db will use cached query. Query Interfaces IDataReaderAsync IExpressionInfo IExpressionPreprocessor IExpressionQuery IExpressionQuery<T> IQueryContext IQueryRunner ISelectInsertable<TSource, TTarget> IUpdatable<T> IValueInsertable<T>"
  },
  "api/LinqToDB.Linq.Query.html": {
    "href": "api/LinqToDB.Linq.Query.html",
    "title": "Class Query | Linq To DB (aka linq2db)",
    "keywords": "Class Query Inheritance Object Query Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public abstract class Query Constructors | Improve this Doc View Source Query(IDataContext, Expression) Declaration protected Query(IDataContext dataContext, Expression expression) Parameters Type Name Description IDataContext dataContext Expression expression Fields | Improve this Doc View Source GetElement Declaration public Func<IDataContext, Expression, object[], object> GetElement Field Value Type Description Func < IDataContext , Expression , Object [], Object > | Improve this Doc View Source GetElementAsync Declaration public Func<IDataContext, Expression, object[], CancellationToken, Task<object>> GetElementAsync Field Value Type Description Func < IDataContext , Expression , Object [], CancellationToken , Task < Object >> Methods | Improve this Doc View Source ClearCaches() Clears query caches for all typed queries. Declaration public static void ClearCaches() | Improve this Doc View Source Compare(IDataContext, Expression) Declaration protected bool Compare(IDataContext dataContext, Expression expr) Parameters Type Name Description IDataContext dataContext Expression expr Returns Type Description Boolean Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.NoLinqCache.html": {
    "href": "api/LinqToDB.Linq.NoLinqCache.html",
    "title": "Class NoLinqCache | Linq To DB (aka linq2db)",
    "keywords": "Class NoLinqCache Provides a scope, in which LINQ queries will not be added to a LINQ query cache. This could be used to tell linq2db to not cache queries that operate with big parametes. More details could be found here . Take into account that this class only disables adding of new query, created in its scope, to a cache. If query already present in cache - linq2db will use cached query. Inheritance Object NoLinqCache Implements IDisposable Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public class NoLinqCache : IDisposable Methods | Improve this Doc View Source Scope() Creates disposable no-cache scope. Declaration public static IDisposable Scope() Returns Type Description IDisposable Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements IDisposable Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.MethodHelper.html": {
    "href": "api/LinqToDB.Linq.MethodHelper.html",
    "title": "Class MethodHelper | Linq To DB (aka linq2db)",
    "keywords": "Class MethodHelper Inheritance Object MethodHelper Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public static class MethodHelper Methods | Improve this Doc View Source GetMethodInfo(Delegate) Declaration public static MethodInfo GetMethodInfo(this Delegate del) Parameters Type Name Description Delegate del Returns Type Description MethodInfo | Improve this Doc View Source GetMethodInfo<T1, T2>(Func<T1, T2>, T1) Declaration public static MethodInfo GetMethodInfo<T1, T2>(Func<T1, T2> f, T1 unused1) Parameters Type Name Description Func <T1, T2> f T1 unused1 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 | Improve this Doc View Source GetMethodInfo<T1, T2, T3>(Func<T1, T2, T3>, T1, T2) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3>(Func<T1, T2, T3> f, T1 unused1, T2 unused2) Parameters Type Name Description Func <T1, T2, T3> f T1 unused1 T2 unused2 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 | Improve this Doc View Source GetMethodInfo<T1, T2, T3, T4>(Func<T1, T2, T3, T4>, T1, T2, T3) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4>(Func<T1, T2, T3, T4> f, T1 unused1, T2 unused2, T3 unused3) Parameters Type Name Description Func <T1, T2, T3, T4> f T1 unused1 T2 unused2 T3 unused3 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 T4 | Improve this Doc View Source GetMethodInfo<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5>, T1, T2, T3, T4) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5> f, T1 unused1, T2 unused2, T3 unused3, T4 unused4) Parameters Type Name Description Func <T1, T2, T3, T4, T5> f T1 unused1 T2 unused2 T3 unused3 T4 unused4 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 T4 T5 | Improve this Doc View Source GetMethodInfo<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6> f, T1 unused1, T2 unused2, T3 unused3, T4 unused4, T5 unused5) Parameters Type Name Description Func <T1, T2, T3, T4, T5, T6> f T1 unused1 T2 unused2 T3 unused3 T4 unused4 T5 unused5 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 T4 T5 T6 | Improve this Doc View Source GetMethodInfo<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7> f, T1 unused1, T2 unused2, T3 unused3, T4 unused4, T5 unused5, T6 unused6) Parameters Type Name Description Func <T1, T2, T3, T4, T5, T6, T7> f T1 unused1 T2 unused2 T3 unused3 T4 unused4 T5 unused5 T6 unused6 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7"
  },
  "api/LinqToDB.Linq.LinqException.html": {
    "href": "api/LinqToDB.Linq.LinqException.html",
    "title": "Class LinqException | Linq To DB (aka linq2db)",
    "keywords": "Class LinqException Defines the base class for the namespace exceptions. Inheritance Object Exception LinqException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax [Serializable] public class LinqException : Exception, ISerializable, _Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source LinqException() Initializes a new instance of the LinqException class. Declaration public LinqException() Remarks This constructor initializes the Message property of the new instance to a system-supplied message that describes the error, such as \"LinqToDB Linq error has occurred.\" | Improve this Doc View Source LinqException(Exception) Initializes a new instance of the LinqException class with the InnerException property. Declaration public LinqException(Exception innerException) Parameters Type Name Description Exception innerException The InnerException, if any, that threw the current exception. See Also InnerException | Improve this Doc View Source LinqException(SerializationInfo, StreamingContext) Initializes a new instance of the LinqException class with serialized data. Declaration protected LinqException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source LinqException(String, Exception) Initializes a new instance of the LinqException class with the specified error message and InnerException property. Declaration public LinqException(string message, Exception innerException) Parameters Type Name Description String message The message to display to the client when the exception is thrown. Exception innerException The InnerException, if any, that threw the current exception. See Also Message InnerException | Improve this Doc View Source LinqException(String, Object[]) Initializes a new instance of the LinqException class with the specified error message. Declaration public LinqException(string message, params object[] args) Parameters Type Name Description String message The message to display to the client when the exception is thrown. Object [] args An System.Object array containing zero or more objects to format. See Also Message Implements ISerializable _Exception Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IValueInsertable-1.html": {
    "href": "api/LinqToDB.Linq.IValueInsertable-1.html",
    "title": "Interface IValueInsertable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IValueInsertable<T> Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IValueInsertable<T> Type Parameters Name Description T Extension Methods LinqExtensions.Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Insert<T>(IValueInsertable<T>) LinqExtensions.InsertAsync<T>(IValueInsertable<T>, CancellationToken) LinqExtensions.InsertWithIdentity<T>(IValueInsertable<T>) LinqExtensions.InsertWithInt32Identity<T>(IValueInsertable<T>) LinqExtensions.InsertWithInt64Identity<T>(IValueInsertable<T>) LinqExtensions.InsertWithDecimalIdentity<T>(IValueInsertable<T>) LinqExtensions.InsertWithIdentityAsync<T>(IValueInsertable<T>, CancellationToken) LinqExtensions.InsertWithInt32IdentityAsync<T>(IValueInsertable<T>, CancellationToken) LinqExtensions.InsertWithInt64IdentityAsync<T>(IValueInsertable<T>, CancellationToken) LinqExtensions.InsertWithDecimalIdentityAsync<T>(IValueInsertable<T>, CancellationToken) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IUpdatable-1.html": {
    "href": "api/LinqToDB.Linq.IUpdatable-1.html",
    "title": "Interface IUpdatable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IUpdatable<T> Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IUpdatable<T> Type Parameters Name Description T Extension Methods LinqExtensions.Update<T>(IUpdatable<T>) LinqExtensions.UpdateAsync<T>(IUpdatable<T>, CancellationToken) LinqExtensions.Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) LinqExtensions.Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, TV) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.ISelectInsertable-2.html": {
    "href": "api/LinqToDB.Linq.ISelectInsertable-2.html",
    "title": "Interface ISelectInsertable<TSource, TTarget> | Linq To DB (aka linq2db)",
    "keywords": "Interface ISelectInsertable<TSource, TTarget> Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface ISelectInsertable<TSource, TTarget> Type Parameters Name Description TSource TTarget Extension Methods LinqExtensions.Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TSource, TValue>>) LinqExtensions.Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TValue>>) LinqExtensions.Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, TValue) LinqExtensions.Insert<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) LinqExtensions.InsertWithIdentity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertWithInt32Identity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertWithInt64Identity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertWithDecimalIdentity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertWithIdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) LinqExtensions.InsertWithInt32IdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) LinqExtensions.InsertWithInt64IdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) LinqExtensions.InsertWithDecimalIdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IQueryRunner.html": {
    "href": "api/LinqToDB.Linq.IQueryRunner.html",
    "title": "Interface IQueryRunner | Linq To DB (aka linq2db)",
    "keywords": "Interface IQueryRunner Inherited Members IDisposable.Dispose() Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IQueryRunner : IDisposable Properties | Improve this Doc View Source DataContext Declaration IDataContext DataContext { get; set; } Property Value Type Description IDataContext | Improve this Doc View Source Expression Declaration Expression Expression { get; set; } Property Value Type Description Expression | Improve this Doc View Source MapperExpression Declaration Expression MapperExpression { get; set; } Property Value Type Description Expression | Improve this Doc View Source Parameters Declaration object[] Parameters { get; set; } Property Value Type Description Object [] | Improve this Doc View Source QueryNumber Declaration int QueryNumber { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RowsCount Declaration int RowsCount { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source ExecuteNonQuery() Executes query and returns number of affected records. Declaration int ExecuteNonQuery() Returns Type Description Int32 Number of affected records. | Improve this Doc View Source ExecuteNonQueryAsync(CancellationToken) Executes query asynchronously and returns number of affected records. Declaration Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. | Improve this Doc View Source ExecuteReader() Executes query and returns data reader. Declaration IDataReader ExecuteReader() Returns Type Description IDataReader Data reader with query results. | Improve this Doc View Source ExecuteReaderAsync(CancellationToken) Executes query asynchronously and returns data reader. Declaration Task<IDataReaderAsync> ExecuteReaderAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IDataReaderAsync > Data reader with query results. | Improve this Doc View Source ExecuteScalar() Executes query and returns scalar value. Declaration object ExecuteScalar() Returns Type Description Object Scalar value. | Improve this Doc View Source ExecuteScalarAsync(CancellationToken) Executes query asynchronously and returns scalar value. Declaration Task<object> ExecuteScalarAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < Object > Scalar value. | Improve this Doc View Source GetSqlText() Returns SQL text for query. Declaration string GetSqlText() Returns Type Description String Query SQL text. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IQueryContext.html": {
    "href": "api/LinqToDB.Linq.IQueryContext.html",
    "title": "Interface IQueryContext | Linq To DB (aka linq2db)",
    "keywords": "Interface IQueryContext Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IQueryContext Properties | Improve this Doc View Source Context Declaration object Context { get; set; } Property Value Type Description Object | Improve this Doc View Source QueryHints Declaration List<string> QueryHints { get; set; } Property Value Type Description List < String > | Improve this Doc View Source Statement Declaration SqlStatement Statement { get; } Property Value Type Description SqlStatement Methods | Improve this Doc View Source GetParameters() Declaration SqlParameter[] GetParameters() Returns Type Description SqlParameter [] Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Internals.html": {
    "href": "api/LinqToDB.Linq.Internals.html",
    "title": "Class Internals | Linq To DB (aka linq2db)",
    "keywords": "Class Internals Inheritance Object Internals Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public static class Internals Methods | Improve this Doc View Source CreateExpressionQueryInstance<T>(IDataContext, Expression) Declaration public static IQueryable<T> CreateExpressionQueryInstance<T>(IDataContext dataContext, Expression expression) Parameters Type Name Description IDataContext dataContext Expression expression Returns Type Description IQueryable <T> Type Parameters Name Description T"
  },
  "api/LinqToDB.Linq.IExpressionQuery.html": {
    "href": "api/LinqToDB.Linq.IExpressionQuery.html",
    "title": "Interface IExpressionQuery | Linq To DB (aka linq2db)",
    "keywords": "Interface IExpressionQuery Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IExpressionQuery Properties | Improve this Doc View Source DataContext Declaration IDataContext DataContext { get; } Property Value Type Description IDataContext | Improve this Doc View Source Expression Declaration Expression Expression { get; } Property Value Type Description Expression | Improve this Doc View Source SqlText Declaration string SqlText { get; } Property Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IExpressionQuery-1.html": {
    "href": "api/LinqToDB.Linq.IExpressionQuery-1.html",
    "title": "Interface IExpressionQuery<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IExpressionQuery<T> Inherited Members IEnumerable<T>.GetEnumerator() IQueryable.ElementType IQueryable.Provider IQueryProviderAsync.ExecuteAsync<TResult>(Expression) IQueryProviderAsync.ExecuteAsync<TResult>(Expression, CancellationToken) IQueryProvider.CreateQuery(Expression) IQueryProvider.CreateQuery<TElement>(Expression) IQueryProvider.Execute(Expression) IQueryProvider.Execute<TResult>(Expression) IExpressionQuery.SqlText IExpressionQuery.DataContext Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IExpressionQuery<out T> : IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable, IQueryProviderAsync, IQueryProvider, IExpressionQuery Type Parameters Name Description T Properties | Improve this Doc View Source Expression Declaration Expression Expression { get; set; } Property Value Type Description Expression Extension Methods AsyncExtensions.ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) AsyncExtensions.ForEachUntilAsync<TSource>(IQueryable<TSource>, Func<TSource, Boolean>, CancellationToken) AsyncExtensions.ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.MinAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) AsyncExtensions.MaxAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) LinqExtensions.Delete<T>(IQueryable<T>) LinqExtensions.DeleteAsync<T>(IQueryable<T>, CancellationToken) LinqExtensions.Delete<T>(IQueryable<T>, Expression<Func<T, Boolean>>) LinqExtensions.DeleteAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, CancellationToken) LinqExtensions.Update<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.UpdateAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.Update<T>(IQueryable<T>, Expression<Func<T, T>>) LinqExtensions.UpdateAsync<T>(IQueryable<T>, Expression<Func<T, T>>, CancellationToken) LinqExtensions.Update<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>) LinqExtensions.UpdateAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>, CancellationToken) LinqExtensions.Update<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>) LinqExtensions.UpdateAsync<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.AsUpdatable<T>(IQueryable<T>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Insert<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithInt32Identity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithInt64Identity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithDecimalIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithIdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithInt32IdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithInt64IdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithDecimalIdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.Into<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>) LinqExtensions.Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, TakeHints) LinqExtensions.Take<TSource>(IQueryable<TSource>, Int32, TakeHints) LinqExtensions.Skip<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAt<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAtAsync<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, CancellationToken) LinqExtensions.ElementAtOrDefault<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAtOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, CancellationToken) LinqExtensions.Having<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.ThenOrBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) LinqExtensions.ThenOrByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) LinqExtensions.Join<TSource>(IQueryable<TSource>, SqlJoinType, Expression<Func<TSource, Boolean>>) LinqExtensions.Join<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, SqlJoinType, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.InnerJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.InnerJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.LeftJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.LeftJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.RightJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.RightJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.FullJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.FullJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.CrossJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.AsCte<TSource>(IQueryable<TSource>) LinqExtensions.AsCte<TSource>(IQueryable<TSource>, String) LinqExtensions.GenerateTestString(IQueryable, Boolean) AnalyticFunctions.Average<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Average<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.Corr<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) AnalyticFunctions.Corr<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) AnalyticFunctions.CountExt<TEntity>(IEnumerable<TEntity>, Func<TEntity, Object>) AnalyticFunctions.CountExt<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.CountExt<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.CovarPop<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) AnalyticFunctions.CovarPop<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) AnalyticFunctions.CovarSamp<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) AnalyticFunctions.CovarSamp<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) AnalyticFunctions.Max<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Max<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.Median<TEntity, T>(IEnumerable<TEntity>, Func<TEntity, T>) AnalyticFunctions.Median<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.Min<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Min<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.StdDev<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.StdDev<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.StdDev<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.StdDevPop<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.StdDevPop<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.StdDevSamp<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.StdDevSamp<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.VarPop<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.VarPop<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.VarSamp<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.VarSamp<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.Variance<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.Variance<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Variance<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AsyncExtensions.AsAsyncEnumerable<TSource>(IQueryable<TSource>, CancellationToken) ReflectionExtensions.GetListItemType(IEnumerable) DataExtensions.RetrieveIdentity<T>(IEnumerable<T>, DataConnection, Boolean) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.SequenceConvertInfo.html": {
    "href": "api/LinqToDB.Linq.Builder.SequenceConvertInfo.html",
    "title": "Class SequenceConvertInfo | Linq To DB (aka linq2db)",
    "keywords": "Class SequenceConvertInfo Inheritance Object SequenceConvertInfo Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class SequenceConvertInfo Fields | Improve this Doc View Source Expression Declaration public Expression Expression Field Value Type Description Expression | Improve this Doc View Source ExpressionsToReplace Declaration public List<SequenceConvertPath> ExpressionsToReplace Field Value Type Description List < SequenceConvertPath > | Improve this Doc View Source Parameter Declaration public ParameterExpression Parameter Field Value Type Description ParameterExpression Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.RequestFor.html": {
    "href": "api/LinqToDB.Linq.Builder.RequestFor.html",
    "title": "Enum RequestFor | Linq To DB (aka linq2db)",
    "keywords": "Enum RequestFor Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public enum RequestFor Fields Name Description Association Checks the sequence if the expression is an association. Expression Checks the sequence if the expression contains an SQL expression. Field Checks the sequence if the expression is a field. GroupJoin Checks the sequence if the expression is a group join. Object Checks the sequence if the expression is a table, an association, new {}, or new MyClass {}. Root Checks the context if it's a root of the expression. SubQuery Checks the context if it's a subquery. Table Checks the sequence if the expression is a table or an association. Extension Methods Sql.Between<RequestFor>(RequestFor, RequestFor) Sql.NotBetween<RequestFor>(RequestFor, RequestFor) SqlExtensions.In<RequestFor>(IEnumerable<RequestFor>) SqlExtensions.In<RequestFor>(IQueryable<RequestFor>) SqlExtensions.In<RequestFor>(RequestFor[]) SqlExtensions.In<RequestFor>(RequestFor, RequestFor) SqlExtensions.In<RequestFor>(RequestFor, RequestFor, RequestFor) SqlExtensions.NotIn<RequestFor>(IEnumerable<RequestFor>) SqlExtensions.NotIn<RequestFor>(IQueryable<RequestFor>) SqlExtensions.NotIn<RequestFor>(RequestFor[]) SqlExtensions.NotIn<RequestFor>(RequestFor, RequestFor) SqlExtensions.NotIn<RequestFor>(RequestFor, RequestFor, RequestFor)"
  },
  "api/LinqToDB.Linq.Builder.ConvertFlags.html": {
    "href": "api/LinqToDB.Linq.Builder.ConvertFlags.html",
    "title": "Enum ConvertFlags | Linq To DB (aka linq2db)",
    "keywords": "Enum ConvertFlags Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public enum ConvertFlags Fields Name Description All Field Key Extension Methods Sql.Between<ConvertFlags>(ConvertFlags, ConvertFlags) Sql.NotBetween<ConvertFlags>(ConvertFlags, ConvertFlags) SqlExtensions.In<ConvertFlags>(IEnumerable<ConvertFlags>) SqlExtensions.In<ConvertFlags>(IQueryable<ConvertFlags>) SqlExtensions.In<ConvertFlags>(ConvertFlags[]) SqlExtensions.In<ConvertFlags>(ConvertFlags, ConvertFlags) SqlExtensions.In<ConvertFlags>(ConvertFlags, ConvertFlags, ConvertFlags) SqlExtensions.NotIn<ConvertFlags>(IEnumerable<ConvertFlags>) SqlExtensions.NotIn<ConvertFlags>(IQueryable<ConvertFlags>) SqlExtensions.NotIn<ConvertFlags>(ConvertFlags[]) SqlExtensions.NotIn<ConvertFlags>(ConvertFlags, ConvertFlags) SqlExtensions.NotIn<ConvertFlags>(ConvertFlags, ConvertFlags, ConvertFlags)"
  },
  "api/LinqToDB.KeepConnectionAliveScope.html": {
    "href": "api/LinqToDB.KeepConnectionAliveScope.html",
    "title": "Class KeepConnectionAliveScope | Linq To DB (aka linq2db)",
    "keywords": "Class KeepConnectionAliveScope Explicit DataContext connection reuse scope. See KeepConnectionAlive for more details. Inheritance Object KeepConnectionAliveScope Implements IDisposable Namespace : LinqToDB Assembly : linq2db.dll Syntax public class KeepConnectionAliveScope : IDisposable Constructors | Improve this Doc View Source KeepConnectionAliveScope(DataContext) Creates connection reuse scope for DataContext . Declaration public KeepConnectionAliveScope(DataContext dataContext) Parameters Type Name Description DataContext dataContext Data context. Methods | Improve this Doc View Source Dispose() Restores old connection reuse option. Declaration public void Dispose() Implements IDisposable Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ITable-1.html": {
    "href": "api/LinqToDB.ITable-1.html",
    "title": "Interface ITable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface ITable<T> Table-like queryable source, e.g. table, view or table-valued function. Inherited Members IExpressionQuery<T>.Expression IEnumerable<T>.GetEnumerator() IQueryable.ElementType IQueryable.Provider IQueryProviderAsync.ExecuteAsync<TResult>(Expression) IQueryProviderAsync.ExecuteAsync<TResult>(Expression, CancellationToken) IQueryProvider.CreateQuery(Expression) IQueryProvider.CreateQuery<TElement>(Expression) IQueryProvider.Execute(Expression) IQueryProvider.Execute<TResult>(Expression) IExpressionQuery.SqlText IExpressionQuery.DataContext Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ITable<out T> : IExpressionQuery<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable, IQueryProviderAsync, IQueryProvider, IExpressionQuery Type Parameters Name Description T Record mapping type. Properties | Improve this Doc View Source DatabaseName Declaration string DatabaseName { get; } Property Value Type Description String | Improve this Doc View Source SchemaName Declaration string SchemaName { get; } Property Value Type Description String | Improve this Doc View Source TableName Declaration string TableName { get; } Property Value Type Description String Methods | Improve this Doc View Source GetTableName() Declaration string GetTableName() Returns Type Description String Extension Methods AsyncExtensions.ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) AsyncExtensions.ForEachUntilAsync<TSource>(IQueryable<TSource>, Func<TSource, Boolean>, CancellationToken) AsyncExtensions.ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.MinAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) AsyncExtensions.MaxAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) DataExtensions.DropTable<T>(ITable<T>, String, String, String, Boolean) DataExtensions.DropTableAsync<T>(ITable<T>, String, String, String, Boolean, CancellationToken) LinqExtensions.TableName<T>(ITable<T>, String) LinqExtensions.DatabaseName<T>(ITable<T>, String) LinqExtensions.OwnerName<T>(ITable<T>, String) LinqExtensions.SchemaName<T>(ITable<T>, String) LinqExtensions.WithTableExpression<T>(ITable<T>, String) LinqExtensions.With<T>(ITable<T>, String) LinqExtensions.LoadWith<T>(ITable<T>, Expression<Func<T, Object>>) LinqExtensions.Delete<T>(IQueryable<T>) LinqExtensions.DeleteAsync<T>(IQueryable<T>, CancellationToken) LinqExtensions.Delete<T>(IQueryable<T>, Expression<Func<T, Boolean>>) LinqExtensions.DeleteAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, CancellationToken) LinqExtensions.Update<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.UpdateAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.Update<T>(IQueryable<T>, Expression<Func<T, T>>) LinqExtensions.UpdateAsync<T>(IQueryable<T>, Expression<Func<T, T>>, CancellationToken) LinqExtensions.Update<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>) LinqExtensions.UpdateAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>, CancellationToken) LinqExtensions.Update<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>) LinqExtensions.UpdateAsync<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.AsUpdatable<T>(IQueryable<T>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Insert<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithIdentity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithInt32Identity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithInt64Identity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithDecimalIdentity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithIdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithInt32IdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithInt64IdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithDecimalIdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Insert<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithInt32Identity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithInt64Identity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithDecimalIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithIdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithInt32IdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithInt64IdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithDecimalIdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.Into<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>) LinqExtensions.InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>) LinqExtensions.InsertOrUpdateAsync<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>, CancellationToken) LinqExtensions.InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>, Expression<Func<T>>) LinqExtensions.InsertOrUpdateAsync<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>, Expression<Func<T>>, CancellationToken) LinqExtensions.Drop<T>(ITable<T>, Boolean) LinqExtensions.DropAsync<T>(ITable<T>, Boolean, CancellationToken) LinqExtensions.Truncate<T>(ITable<T>, Boolean) LinqExtensions.TruncateAsync<T>(ITable<T>, Boolean, CancellationToken) LinqExtensions.Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, TakeHints) LinqExtensions.Take<TSource>(IQueryable<TSource>, Int32, TakeHints) LinqExtensions.Skip<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAt<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAtAsync<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, CancellationToken) LinqExtensions.ElementAtOrDefault<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAtOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, CancellationToken) LinqExtensions.Having<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.ThenOrBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) LinqExtensions.ThenOrByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) LinqExtensions.Join<TSource>(IQueryable<TSource>, SqlJoinType, Expression<Func<TSource, Boolean>>) LinqExtensions.Join<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, SqlJoinType, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.InnerJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.InnerJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.LeftJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.LeftJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.RightJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.RightJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.FullJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.FullJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.CrossJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.AsCte<TSource>(IQueryable<TSource>) LinqExtensions.AsCte<TSource>(IQueryable<TSource>, String) LinqExtensions.GenerateTestString(IQueryable, Boolean) AnalyticFunctions.Average<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Average<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.Corr<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) AnalyticFunctions.Corr<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) AnalyticFunctions.CountExt<TEntity>(IEnumerable<TEntity>, Func<TEntity, Object>) AnalyticFunctions.CountExt<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.CountExt<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.CovarPop<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) AnalyticFunctions.CovarPop<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) AnalyticFunctions.CovarSamp<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) AnalyticFunctions.CovarSamp<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) AnalyticFunctions.Max<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Max<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.Median<TEntity, T>(IEnumerable<TEntity>, Func<TEntity, T>) AnalyticFunctions.Median<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.Min<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Min<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.StdDev<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.StdDev<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.StdDev<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.StdDevPop<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.StdDevPop<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.StdDevSamp<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.StdDevSamp<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.VarPop<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.VarPop<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.VarSamp<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.VarSamp<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.Variance<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.Variance<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Variance<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AsyncExtensions.AsAsyncEnumerable<TSource>(IQueryable<TSource>, CancellationToken) DataConnectionExtensions.BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(ITable<T>, Int32, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(ITable<T>, IEnumerable<T>) ReflectionExtensions.GetListItemType(IEnumerable) DataExtensions.RetrieveIdentity<T>(IEnumerable<T>, DataConnection, Boolean) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.IMergeableUsing-1.html": {
    "href": "api/LinqToDB.IMergeableUsing-1.html",
    "title": "Interface IMergeableUsing<TTarget> | Linq To DB (aka linq2db)",
    "keywords": "Interface IMergeableUsing<TTarget> Merge command builder that have only target table configured. Only operation available for this type of builder is source configuration. Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IMergeableUsing<TTarget> Type Parameters Name Description TTarget Target record type. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.ReaderInfo.html": {
    "href": "api/LinqToDB.DataProvider.ReaderInfo.html",
    "title": "Class ReaderInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ReaderInfo Inheritance Object ReaderInfo Implements IEquatable < ReaderInfo > Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class ReaderInfo : IEquatable<ReaderInfo> Properties | Improve this Doc View Source DataTypeName Declaration public string DataTypeName { get; set; } Property Value Type Description String | Improve this Doc View Source FieldType Declaration public Type FieldType { get; set; } Property Value Type Description Type | Improve this Doc View Source ProviderFieldType Declaration public Type ProviderFieldType { get; set; } Property Value Type Description Type | Improve this Doc View Source ToType Declaration public Type ToType { get; set; } Property Value Type Description Type Methods | Improve this Doc View Source Equals(ReaderInfo) Declaration public bool Equals(ReaderInfo other) Parameters Type Name Description ReaderInfo other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() Implements IEquatable<T> Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.html",
    "title": "Namespace LinqToDB.DataProvider.PostgreSQL | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.PostgreSQL Classes PostgreSQLDataProvider PostgreSQLMappingSchema PostgreSQLSqlBuilder PostgreSQLTools Enums PostgreSQLIdentifierQuoteMode PostgreSQLVersion"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.html",
    "title": "Enum PostgreSQLVersion | Linq To DB (aka linq2db)",
    "keywords": "Enum PostgreSQLVersion Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public enum PostgreSQLVersion Fields Name Description v92 v93 v95 Extension Methods Sql.Between<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion) Sql.NotBetween<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion) SqlExtensions.In<PostgreSQLVersion>(IEnumerable<PostgreSQLVersion>) SqlExtensions.In<PostgreSQLVersion>(IQueryable<PostgreSQLVersion>) SqlExtensions.In<PostgreSQLVersion>(PostgreSQLVersion[]) SqlExtensions.In<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion) SqlExtensions.In<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion, PostgreSQLVersion) SqlExtensions.NotIn<PostgreSQLVersion>(IEnumerable<PostgreSQLVersion>) SqlExtensions.NotIn<PostgreSQLVersion>(IQueryable<PostgreSQLVersion>) SqlExtensions.NotIn<PostgreSQLVersion>(PostgreSQLVersion[]) SqlExtensions.NotIn<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion) SqlExtensions.NotIn<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion, PostgreSQLVersion)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.html",
    "title": "Class PostgreSQLTools | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLTools Inheritance Object PostgreSQLTools Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public static class PostgreSQLTools Properties | Improve this Doc View Source AutoDetectProvider Declaration public static bool AutoDetectProvider { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection, PostgreSQLVersion) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description IDbConnection connection PostgreSQLVersion version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, PostgreSQLVersion) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description IDbTransaction transaction PostgreSQLVersion version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, PostgreSQLVersion) Declaration public static DataConnection CreateDataConnection(string connectionString, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description String connectionString PostgreSQLVersion version Returns Type Description DataConnection | Improve this Doc View Source GetBitStringType() Declaration public static Type GetBitStringType() Returns Type Description Type | Improve this Doc View Source GetDataProvider(PostgreSQLVersion) Declaration public static IDataProvider GetDataProvider(PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description PostgreSQLVersion version Returns Type Description IDataProvider | Improve this Doc View Source GetNpgsqlBoxType() Declaration public static Type GetNpgsqlBoxType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlCircleType() Declaration public static Type GetNpgsqlCircleType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlDateTimeType() Declaration public static Type GetNpgsqlDateTimeType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlDateType() Declaration public static Type GetNpgsqlDateType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlInetType() Declaration public static Type GetNpgsqlInetType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlIntervalType() Declaration public static Type GetNpgsqlIntervalType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlLineType() Declaration public static Type GetNpgsqlLineType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlLSegType() Declaration public static Type GetNpgsqlLSegType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlMacAddressType() Declaration public static Type GetNpgsqlMacAddressType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlPathType() Declaration public static Type GetNpgsqlPathType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlPointType() Declaration public static Type GetNpgsqlPointType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlPolygonType() Declaration public static Type GetNpgsqlPolygonType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlTimeType() Declaration public static Type GetNpgsqlTimeType() Returns Type Description Type | Improve this Doc View Source GetNpgsqlTimeTZType() Declaration public static Type GetNpgsqlTimeTZType() Returns Type Description Type | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Int32 maxBatchSize Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolvePostgreSQL(Assembly) Declaration public static void ResolvePostgreSQL(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolvePostgreSQL(String) Declaration public static void ResolvePostgreSQL(string path) Parameters Type Name Description String path"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.html",
    "title": "Class PostgreSQLSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLSqlBuilder Inheritance Object BasicSqlBuilder PostgreSQLSqlBuilder Implements ISqlBuilder Inherited Members BasicSqlBuilder.Statement BasicSqlBuilder.Indent BasicSqlBuilder.BuildStep BasicSqlBuilder.SqlOptimizer BasicSqlBuilder.SqlProviderFlags BasicSqlBuilder.ValueToSqlConverter BasicSqlBuilder.StringBuilder BasicSqlBuilder.SkipAlias BasicSqlBuilder.IsNestedJoinSupported BasicSqlBuilder.IsNestedJoinParenthesisRequired BasicSqlBuilder.WrapJoinCondition BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, Int32) BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, Int32, Boolean) BasicSqlBuilder.BuildSqlBuilder(SelectQuery, Int32, Boolean) BasicSqlBuilder.WithStringBuilder<T>(StringBuilder, Func<T>) BasicSqlBuilder.ParenthesizeJoin(List<SqlJoinedTable>) BasicSqlBuilder.BuildSql() BasicSqlBuilder.BuildDeleteQuery(SqlDeleteStatement) BasicSqlBuilder.BuildDeleteQuery2(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateQuery(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildSelectQuery(SqlSelectStatement) BasicSqlBuilder.BuildCteBody(SelectQuery) BasicSqlBuilder.BuildInsertQuery(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildInsertQuery2(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildUnknownQuery() BasicSqlBuilder.ConvertTableName(StringBuilder, String, String, String) BasicSqlBuilder.BuildWithClause(SqlWithClause) BasicSqlBuilder.BuildSelectClause(SelectQuery) BasicSqlBuilder.GetSelectedColumns(SelectQuery) BasicSqlBuilder.BuildColumns(SelectQuery) BasicSqlBuilder.BuildColumnExpression(SelectQuery, ISqlExpression, String, Boolean) BasicSqlBuilder.BuildDeleteClause(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateClause(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTable(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTableName(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateSet(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildEmptyInsert(SqlInsertClause) BasicSqlBuilder.BuildOutputSubclause(SqlStatement, SqlInsertClause) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, String, Boolean, Boolean) BasicSqlBuilder.BuildGetIdentity(SqlInsertClause) BasicSqlBuilder.BuildInsertOrUpdateQueryAsMerge(SqlInsertOrUpdateStatement, String) BasicSqlBuilder.ExtractMergeParametersIfCannotCombine(SqlInsertOrUpdateStatement, List<SqlSetExpression>) BasicSqlBuilder.EndLine BasicSqlBuilder.BuildInsertOrUpdateQueryAsUpdateInsert(SqlInsertOrUpdateStatement) BasicSqlBuilder.BuildTruncateTable(SqlTruncateTableStatement) BasicSqlBuilder.BuildDropTableStatement(SqlDropTableStatement) BasicSqlBuilder.BuildStartCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildEndCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildCreateTableNullAttribute(SqlField, DefaultNullable) BasicSqlBuilder.BuildCreateTableIdentityAttribute1(SqlField) BasicSqlBuilder.BuildCreateTableIdentityAttribute2(SqlField) BasicSqlBuilder.BuildCreateTablePrimaryKey(SqlCreateTableStatement, String, IEnumerable<String>) BasicSqlBuilder.BuildPhysicalTable(ISqlTableSource, String) BasicSqlBuilder.BuildTableName(SqlTableSource, Boolean, Boolean) BasicSqlBuilder.BuildWhere(SelectQuery) BasicSqlBuilder.BuildWhereClause(SelectQuery) BasicSqlBuilder.BuildGroupByClause(SelectQuery) BasicSqlBuilder.BuildHavingClause(SelectQuery) BasicSqlBuilder.BuildOrderByClause(SelectQuery) BasicSqlBuilder.SkipFirst BasicSqlBuilder.SkipFormat BasicSqlBuilder.FirstFormat(SelectQuery) BasicSqlBuilder.OffsetFirst BasicSqlBuilder.TakePercent BasicSqlBuilder.TakeTies BasicSqlBuilder.NeedSkip(SelectQuery) BasicSqlBuilder.NeedTake(SelectQuery) BasicSqlBuilder.BuildSkipFirst(SelectQuery) BasicSqlBuilder.BuildTakeHints(SelectQuery) BasicSqlBuilder.BuildOffsetLimit(SelectQuery) BasicSqlBuilder.BuildWhereSearchCondition(SelectQuery, SqlSearchCondition) BasicSqlBuilder.BuildSearchCondition(SqlSearchCondition) BasicSqlBuilder.BuildSearchCondition(Int32, SqlSearchCondition) BasicSqlBuilder.BuildPredicate(ISqlPredicate) BasicSqlBuilder.BuildPredicate(Int32, ISqlPredicate) BasicSqlBuilder.BuildPredicate(Int32, Int32, ISqlPredicate) BasicSqlBuilder.BuildLikePredicate(SqlPredicate.Like) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, String, Boolean, Boolean) BasicSqlBuilder.BuildExpression(ISqlExpression) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) BasicSqlBuilder.BuildExpression(Int32, ISqlExpression) BasicSqlBuilder.BuildValue(SqlDataType, Object) BasicSqlBuilder.BuildBinaryExpression(SqlBinaryExpression) BasicSqlBuilder.BuildFunction(SqlFunction) BasicSqlBuilder.GetPrecedence(ISqlPredicate) BasicSqlBuilder.AlternativeBuildSql(Boolean, Action, String) BasicSqlBuilder.AlternativeBuildSql2(Action) BasicSqlBuilder.AlternativeGetSelectedColumns(SelectQuery, BasicSqlBuilder.ColumnSelector) BasicSqlBuilder.IsDateDataType(ISqlExpression, String) BasicSqlBuilder.IsTimeDataType(ISqlExpression) BasicSqlBuilder.ConvertFunctionParameters(SqlFunction) BasicSqlBuilder.GetSequenceNameAttribute(SqlTable, Boolean) BasicSqlBuilder.GetTempAliases(Int32, String) BasicSqlBuilder.GetTableAlias(ISqlTableSource) BasicSqlBuilder.GetTableDatabaseName(SqlTable) BasicSqlBuilder.GetTableOwnerName(SqlTable) BasicSqlBuilder.GetTableSchemaName(SqlTable) BasicSqlBuilder.GetTablePhysicalName(SqlTable) BasicSqlBuilder.AppendIndent() BasicSqlBuilder.Add<T>(ISqlExpression, ISqlExpression) BasicSqlBuilder.PrintParameterName(StringBuilder, IDbDataParameter) BasicSqlBuilder.GetTypeName(IDbDataParameter) BasicSqlBuilder.GetUdtTypeName(IDbDataParameter) BasicSqlBuilder.PrintParameterType(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameterValue(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameters(StringBuilder, IDbDataParameter[]) BasicSqlBuilder.ApplyQueryHints(String, List<String>) BasicSqlBuilder.GetReserveSequenceValuesSql(Int32, String) BasicSqlBuilder.GetMaxValueSql(EntityDescriptor, ColumnDescriptor) BasicSqlBuilder.Name Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQLSqlBuilder : BasicSqlBuilder, ISqlBuilder Constructors | Improve this Doc View Source PostgreSQLSqlBuilder(PostgreSQLDataProvider, ISqlOptimizer, SqlProviderFlags, ValueToSqlConverter) Declaration public PostgreSQLSqlBuilder(PostgreSQLDataProvider provider, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags, ValueToSqlConverter valueToSqlConverter) Parameters Type Name Description PostgreSQLDataProvider provider ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags ValueToSqlConverter valueToSqlConverter | Improve this Doc View Source PostgreSQLSqlBuilder(ISqlOptimizer, SqlProviderFlags, ValueToSqlConverter) Declaration public PostgreSQLSqlBuilder(ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags, ValueToSqlConverter valueToSqlConverter) Parameters Type Name Description ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags ValueToSqlConverter valueToSqlConverter Fields | Improve this Doc View Source IdentifierQuoteMode Declaration public static PostgreSQLIdentifierQuoteMode IdentifierQuoteMode Field Value Type Description PostgreSQLIdentifierQuoteMode Properties | Improve this Doc View Source IsRecursiveCteKeywordRequired Declaration protected override bool IsRecursiveCteKeywordRequired { get; } Property Value Type Description Boolean Overrides BasicSqlBuilder.IsRecursiveCteKeywordRequired Methods | Improve this Doc View Source BuildCommand(SqlStatement, Int32) Declaration protected override void BuildCommand(SqlStatement statement, int commandNumber) Parameters Type Name Description SqlStatement statement Int32 commandNumber Overrides BasicSqlBuilder.BuildCommand(SqlStatement, Int32) | Improve this Doc View Source BuildCreateTableFieldType(SqlField) Declaration protected override void BuildCreateTableFieldType(SqlField field) Parameters Type Name Description SqlField field Overrides BasicSqlBuilder.BuildCreateTableFieldType(SqlField) | Improve this Doc View Source BuildDataType(SqlDataType, Boolean) Declaration protected override void BuildDataType(SqlDataType type, bool createDbType) Parameters Type Name Description SqlDataType type Boolean createDbType Overrides BasicSqlBuilder.BuildDataType(SqlDataType, Boolean) | Improve this Doc View Source BuildFromClause(SqlStatement, SelectQuery) Declaration protected override void BuildFromClause(SqlStatement statement, SelectQuery selectQuery) Parameters Type Name Description SqlStatement statement SelectQuery selectQuery Overrides BasicSqlBuilder.BuildFromClause(SqlStatement, SelectQuery) | Improve this Doc View Source BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) Declaration protected override void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate) Parameters Type Name Description SqlInsertOrUpdateStatement insertOrUpdate Overrides BasicSqlBuilder.BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) | Improve this Doc View Source BuildJoinType(SqlJoinedTable) Declaration protected override bool BuildJoinType(SqlJoinedTable join) Parameters Type Name Description SqlJoinedTable join Returns Type Description Boolean Overrides BasicSqlBuilder.BuildJoinType(SqlJoinedTable) | Improve this Doc View Source BuildTableName(StringBuilder, String, String, String) Declaration public override StringBuilder BuildTableName(StringBuilder sb, string database, string schema, string table) Parameters Type Name Description StringBuilder sb String database String schema String table Returns Type Description StringBuilder Overrides BasicSqlBuilder.BuildTableName(StringBuilder, String, String, String) | Improve this Doc View Source BuildTruncateTableStatement(SqlTruncateTableStatement) Declaration protected override void BuildTruncateTableStatement(SqlTruncateTableStatement truncateTable) Parameters Type Name Description SqlTruncateTableStatement truncateTable Overrides BasicSqlBuilder.BuildTruncateTableStatement(SqlTruncateTableStatement) | Improve this Doc View Source CommandCount(SqlStatement) Declaration public override int CommandCount(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description Int32 Overrides BasicSqlBuilder.CommandCount(SqlStatement) | Improve this Doc View Source Convert(Object, ConvertType) Declaration public override object Convert(object value, ConvertType convertType) Parameters Type Name Description Object value ConvertType convertType Returns Type Description Object Overrides BasicSqlBuilder.Convert(Object, ConvertType) | Improve this Doc View Source CreateSqlBuilder() Declaration protected override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides BasicSqlBuilder.CreateSqlBuilder() | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration public override ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression Overrides BasicSqlBuilder.GetIdentityExpression(SqlTable) | Improve this Doc View Source GetProviderTypeName(IDbDataParameter) Declaration protected override string GetProviderTypeName(IDbDataParameter parameter) Parameters Type Name Description IDbDataParameter parameter Returns Type Description String Overrides BasicSqlBuilder.GetProviderTypeName(IDbDataParameter) | Improve this Doc View Source IsReserved(String) Declaration protected override sealed bool IsReserved(string word) Parameters Type Name Description String word Returns Type Description Boolean Overrides BasicSqlBuilder.IsReserved(String) | Improve this Doc View Source LimitFormat(SelectQuery) Declaration protected override string LimitFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description String Overrides BasicSqlBuilder.LimitFormat(SelectQuery) | Improve this Doc View Source OffsetFormat(SelectQuery) Declaration protected override string OffsetFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description String Overrides BasicSqlBuilder.OffsetFormat(SelectQuery) Implements ISqlBuilder Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLMappingSchema.html",
    "title": "Class PostgreSQLMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLMappingSchema Inheritance Object MappingSchema PostgreSQLMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQLMappingSchema : MappingSchema Constructors | Improve this Doc View Source PostgreSQLMappingSchema() Declaration public PostgreSQLMappingSchema() | Improve this Doc View Source PostgreSQLMappingSchema(String) Declaration protected PostgreSQLMappingSchema(string configuration) Parameters Type Name Description String configuration Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode.html",
    "title": "Enum PostgreSQLIdentifierQuoteMode | Linq To DB (aka linq2db)",
    "keywords": "Enum PostgreSQLIdentifierQuoteMode Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public enum PostgreSQLIdentifierQuoteMode Fields Name Description Auto Needed None Quote Extension Methods Sql.Between<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode) Sql.NotBetween<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode) SqlExtensions.In<PostgreSQLIdentifierQuoteMode>(IEnumerable<PostgreSQLIdentifierQuoteMode>) SqlExtensions.In<PostgreSQLIdentifierQuoteMode>(IQueryable<PostgreSQLIdentifierQuoteMode>) SqlExtensions.In<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode[]) SqlExtensions.In<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode) SqlExtensions.In<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode) SqlExtensions.NotIn<PostgreSQLIdentifierQuoteMode>(IEnumerable<PostgreSQLIdentifierQuoteMode>) SqlExtensions.NotIn<PostgreSQLIdentifierQuoteMode>(IQueryable<PostgreSQLIdentifierQuoteMode>) SqlExtensions.NotIn<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode[]) SqlExtensions.NotIn<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode) SqlExtensions.NotIn<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider.html",
    "title": "Class PostgreSQLDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLDataProvider Inheritance Object DataProviderBase DynamicDataProviderBase PostgreSQLDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase.SyncRoot DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, Type, String) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) DataProviderBase.MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) DataProviderBase.GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQLDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source PostgreSQLDataProvider(PostgreSQLVersion) Declaration public PostgreSQLDataProvider(PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description PostgreSQLVersion version | Improve this Doc View Source PostgreSQLDataProvider(String, PostgreSQLVersion) Declaration public PostgreSQLDataProvider(string providerName, PostgreSQLVersion version) Parameters Type Name Description String providerName PostgreSQLVersion version | Improve this Doc View Source PostgreSQLDataProvider(String, MappingSchema, PostgreSQLVersion) Declaration protected PostgreSQLDataProvider(string name, MappingSchema mappingSchema, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description String name MappingSchema mappingSchema PostgreSQLVersion version Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.DataReaderTypeName | Improve this Doc View Source Version Declaration public PostgreSQLVersion Version { get; } Property Value Type Description PostgreSQLVersion Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetCommandBehavior(CommandBehavior) Declaration public override CommandBehavior GetCommandBehavior(CommandBehavior commandBehavior) Parameters Type Name Description CommandBehavior commandBehavior Returns Type Description CommandBehavior Overrides DataProviderBase.GetCommandBehavior(CommandBehavior) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.html",
    "title": "Namespace LinqToDB.DataProvider.Oracle | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Oracle Classes OracleDataProvider OracleMappingSchema OracleMappingSchema.ManagedMappingSchema OracleMappingSchema.NativeMappingSchema OracleSqlOptimizer OracleTools Enums AlternativeBulkCopy"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleTools.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleTools.html",
    "title": "Class OracleTools | Linq To DB (aka linq2db)",
    "keywords": "Class OracleTools Inheritance Object OracleTools Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public static class OracleTools Fields | Improve this Doc View Source AssemblyName Declaration public static string AssemblyName Field Value Type Description String | Improve this Doc View Source DataReaderGetDecimal Declaration public static Func<IDataReader, int, decimal> DataReaderGetDecimal Field Value Type Description Func < IDataReader , Int32 , Decimal > | Improve this Doc View Source UseAlternativeBulkCopy Declaration public static AlternativeBulkCopy UseAlternativeBulkCopy Field Value Type Description AlternativeBulkCopy Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source DetectedProviderName Declaration public static string DetectedProviderName { get; } Property Value Type Description String | Improve this Doc View Source DontEscapeLowercaseIdentifiers Gets or sets flag to tell LinqToDB to quote identifiers, if they contain lowercase letters. Default value: true . This flag added for backward compatibility and will be removed later, so it is recommended to set it to false and and fix mappings to use uppercase letters for non-quoted identifiers. Declaration public static bool DontEscapeLowercaseIdentifiers { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsXmlTypeSupported Declaration public static bool IsXmlTypeSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source GetXmlData<T>(MappingSchema, IEnumerable<T>) Declaration public static string GetXmlData<T>(MappingSchema mappingSchema, IEnumerable<T> data) Parameters Type Name Description MappingSchema mappingSchema IEnumerable <T> data Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(this DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Int32 maxBatchSize Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source OracleXmlTable<T>(IDataContext, IEnumerable<T>) Declaration public static ITable<T> OracleXmlTable<T>(this IDataContext dataContext, IEnumerable<T> data) where T : class Parameters Type Name Description IDataContext dataContext IEnumerable <T> data Returns Type Description ITable <T> Type Parameters Name Description T | Improve this Doc View Source OracleXmlTable<T>(IDataContext, Func<String>) Declaration public static ITable<T> OracleXmlTable<T>(this IDataContext dataContext, Func<string> xmlData) where T : class Parameters Type Name Description IDataContext dataContext Func < String > xmlData Returns Type Description ITable <T> Type Parameters Name Description T | Improve this Doc View Source OracleXmlTable<T>(IDataContext, String) Declaration public static ITable<T> OracleXmlTable<T>(this IDataContext dataContext, string xmlData) where T : class Parameters Type Name Description IDataContext dataContext String xmlData Returns Type Description ITable <T> Type Parameters Name Description T | Improve this Doc View Source ProviderSpecificBulkCopy<T>(DataConnection, IEnumerable<T>, Nullable<Int32>, Nullable<Int32>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied ProviderSpecificBulkCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int? maxBatchSize = default(int? ), int? bulkCopyTimeout = default(int? ), int notifyAfter = 0, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Nullable < Int32 > maxBatchSize Nullable < Int32 > bulkCopyTimeout Int32 notifyAfter Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveOracle(Assembly) Declaration public static void ResolveOracle(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveOracle(String) Declaration public static void ResolveOracle(string path) Parameters Type Name Description String path"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleSqlOptimizer.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleSqlOptimizer.html",
    "title": "Class OracleSqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Class OracleSqlOptimizer Inheritance Object BasicSqlOptimizer OracleSqlOptimizer Implements ISqlOptimizer Inherited Members BasicSqlOptimizer.SqlProviderFlags BasicSqlOptimizer.ConvertCountSubQuery(SelectQuery) BasicSqlOptimizer.ConvertPredicate(SelectQuery, ISqlPredicate) BasicSqlOptimizer.ConvertEqualPredicate(SqlPredicate.ExprExpr) BasicSqlOptimizer.GetMaxLength(SqlDataType) BasicSqlOptimizer.GetMaxPrecision(SqlDataType) BasicSqlOptimizer.GetMaxScale(SqlDataType) BasicSqlOptimizer.GetMaxDisplaySize(SqlDataType) BasicSqlOptimizer.ConvertConvertion(SqlFunction) BasicSqlOptimizer.AlternativeConvertToBoolean(SqlFunction, Int32) BasicSqlOptimizer.IsDateDataType(ISqlExpression, String) BasicSqlOptimizer.IsTimeDataType(ISqlExpression) BasicSqlOptimizer.FloorBeforeConvert(SqlFunction) BasicSqlOptimizer.GetAlternativeDelete(SqlDeleteStatement) BasicSqlOptimizer.GetAlternativeUpdate(SqlUpdateStatement) BasicSqlOptimizer.CheckAliases(SqlStatement, Int32) BasicSqlOptimizer.Add(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Add<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Add(ISqlExpression, Int32) BasicSqlOptimizer.Inc(ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Sub<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, Int32) BasicSqlOptimizer.Dec(ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Mul<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, Int32) BasicSqlOptimizer.Div(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Div<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Div(ISqlExpression, Int32) BasicSqlOptimizer.OptimizeJoins(SqlStatement) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleSqlOptimizer : BasicSqlOptimizer, ISqlOptimizer Constructors | Improve this Doc View Source OracleSqlOptimizer(SqlProviderFlags) Declaration public OracleSqlOptimizer(SqlProviderFlags sqlProviderFlags) Parameters Type Name Description SqlProviderFlags sqlProviderFlags Methods | Improve this Doc View Source ConvertExpression(ISqlExpression) Declaration public override ISqlExpression ConvertExpression(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description ISqlExpression Overrides BasicSqlOptimizer.ConvertExpression(ISqlExpression) | Improve this Doc View Source Finalize(SqlStatement) Declaration public override SqlStatement Finalize(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement Overrides BasicSqlOptimizer.Finalize(SqlStatement) Implements ISqlOptimizer Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.html",
    "title": "Class OracleMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class OracleMappingSchema Inheritance Object MappingSchema OracleMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleMappingSchema : MappingSchema Constructors | Improve this Doc View Source OracleMappingSchema() Declaration public OracleMappingSchema() | Improve this Doc View Source OracleMappingSchema(String) Declaration protected OracleMappingSchema(string configuration) Parameters Type Name Description String configuration Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.NativeMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.NativeMappingSchema.html",
    "title": "Class OracleMappingSchema.NativeMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class OracleMappingSchema.NativeMappingSchema Inheritance Object MappingSchema OracleMappingSchema.NativeMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class NativeMappingSchema : MappingSchema Constructors | Improve this Doc View Source NativeMappingSchema() Declaration public NativeMappingSchema() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.ManagedMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.ManagedMappingSchema.html",
    "title": "Class OracleMappingSchema.ManagedMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class OracleMappingSchema.ManagedMappingSchema Inheritance Object MappingSchema OracleMappingSchema.ManagedMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class ManagedMappingSchema : MappingSchema Constructors | Improve this Doc View Source ManagedMappingSchema() Declaration public ManagedMappingSchema() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleDataProvider.html",
    "title": "Class OracleDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class OracleDataProvider Inheritance Object DataProviderBase DynamicDataProviderBase OracleDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase.SyncRoot DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, Type, String) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source OracleDataProvider() Declaration public OracleDataProvider() | Improve this Doc View Source OracleDataProvider(String) Declaration public OracleDataProvider(string name) Parameters Type Name Description String name Properties | Improve this Doc View Source AssemblyName Declaration public string AssemblyName { get; } Property Value Type Description String | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.DataReaderTypeName | Improve this Doc View Source IsXmlTypeSupported Declaration public bool IsXmlTypeSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source MappingSchema Declaration public override MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Overrides DataProviderBase.MappingSchema Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source ConvertParameterType(Type, DataType) Declaration public override Type ConvertParameterType(Type type, DataType dataType) Parameters Type Name Description Type type DataType dataType Returns Type Description Type Overrides DataProviderBase.ConvertParameterType(Type, DataType) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source DisposeCommand(DataConnection) Declaration public override void DisposeCommand(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Overrides DataProviderBase.DisposeCommand(DataConnection) | Improve this Doc View Source GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Declaration protected override BasicMergeBuilder<TTarget, TSource> GetMergeBuilder<TTarget, TSource>(DataConnection connection, IMergeable<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description DataConnection connection IMergeable <TTarget, TSource> merge Returns Type Description BasicMergeBuilder <TTarget, TSource> Type Parameters Name Description TTarget TSource Overrides LinqToDB.DataProvider.DataProviderBase.GetMergeBuilder<TTarget, TSource>(LinqToDB.Data.DataConnection, LinqToDB.IMergeable<TTarget, TSource>) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[]) Declaration public override void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection CommandType commandType String commandText DataParameter [] parameters Overrides DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public override int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName Returns Type Description Int32 Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.Merge<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String) | Improve this Doc View Source MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) Declaration public override Task<int> MergeAsync<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName, CancellationToken token) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.MergeAsync<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String, System.Threading.CancellationToken) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.html",
    "title": "Enum AlternativeBulkCopy | Linq To DB (aka linq2db)",
    "keywords": "Enum AlternativeBulkCopy Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public enum AlternativeBulkCopy Fields Name Description InsertAll InsertDual InsertInto Extension Methods Sql.Between<AlternativeBulkCopy>(AlternativeBulkCopy, AlternativeBulkCopy) Sql.NotBetween<AlternativeBulkCopy>(AlternativeBulkCopy, AlternativeBulkCopy) SqlExtensions.In<AlternativeBulkCopy>(IEnumerable<AlternativeBulkCopy>) SqlExtensions.In<AlternativeBulkCopy>(IQueryable<AlternativeBulkCopy>) SqlExtensions.In<AlternativeBulkCopy>(AlternativeBulkCopy[]) SqlExtensions.In<AlternativeBulkCopy>(AlternativeBulkCopy, AlternativeBulkCopy) SqlExtensions.In<AlternativeBulkCopy>(AlternativeBulkCopy, AlternativeBulkCopy, AlternativeBulkCopy) SqlExtensions.NotIn<AlternativeBulkCopy>(IEnumerable<AlternativeBulkCopy>) SqlExtensions.NotIn<AlternativeBulkCopy>(IQueryable<AlternativeBulkCopy>) SqlExtensions.NotIn<AlternativeBulkCopy>(AlternativeBulkCopy[]) SqlExtensions.NotIn<AlternativeBulkCopy>(AlternativeBulkCopy, AlternativeBulkCopy) SqlExtensions.NotIn<AlternativeBulkCopy>(AlternativeBulkCopy, AlternativeBulkCopy, AlternativeBulkCopy)"
  },
  "api/LinqToDB.DataProvider.MySql.html": {
    "href": "api/LinqToDB.DataProvider.MySql.html",
    "title": "Namespace LinqToDB.DataProvider.MySql | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.MySql Classes MySqlDataProvider MySqlMappingSchema MySqlTools"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlTools.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlTools.html",
    "title": "Class MySqlTools | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlTools Inheritance Object MySqlTools Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public static class MySqlTools Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Int32 maxBatchSize Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveMySql(Assembly) Declaration public static void ResolveMySql(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveMySql(String) Declaration public static void ResolveMySql(string path) Parameters Type Name Description String path"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlMappingSchema.html",
    "title": "Class MySqlMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlMappingSchema Inheritance Object MappingSchema MySqlMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public class MySqlMappingSchema : MappingSchema Constructors | Improve this Doc View Source MySqlMappingSchema() Declaration public MySqlMappingSchema() | Improve this Doc View Source MySqlMappingSchema(String) Declaration protected MySqlMappingSchema(string configuration) Parameters Type Name Description String configuration Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlDataProvider.html",
    "title": "Class MySqlDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlDataProvider Inheritance Object DataProviderBase DynamicDataProviderBase MySqlDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase.SyncRoot DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, Type, String) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) DataProviderBase.MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) DataProviderBase.GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public class MySqlDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source MySqlDataProvider() Declaration public MySqlDataProvider() | Improve this Doc View Source MySqlDataProvider(String, MappingSchema) Declaration protected MySqlDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.MultipleRowsHelper-1.html": {
    "href": "api/LinqToDB.DataProvider.MultipleRowsHelper-1.html",
    "title": "Class MultipleRowsHelper<T> | Linq To DB (aka linq2db)",
    "keywords": "Class MultipleRowsHelper<T> Inheritance Object MultipleRowsHelper<T> Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class MultipleRowsHelper<T> Type Parameters Name Description T Constructors | Improve this Doc View Source MultipleRowsHelper(DataConnection, BulkCopyOptions) Declaration public MultipleRowsHelper(DataConnection dataConnection, BulkCopyOptions options) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options Fields | Improve this Doc View Source BatchSize Declaration public int BatchSize Field Value Type Description Int32 | Improve this Doc View Source Columns Declaration public readonly ColumnDescriptor[] Columns Field Value Type Description ColumnDescriptor [] | Improve this Doc View Source ColumnTypes Declaration public readonly SqlDataType[] ColumnTypes Field Value Type Description SqlDataType [] | Improve this Doc View Source CurrentCount Declaration public int CurrentCount Field Value Type Description Int32 | Improve this Doc View Source DataConnection Declaration public readonly DataConnection DataConnection Field Value Type Description DataConnection | Improve this Doc View Source Descriptor Declaration public readonly EntityDescriptor Descriptor Field Value Type Description EntityDescriptor | Improve this Doc View Source HeaderSize Declaration public int HeaderSize Field Value Type Description Int32 | Improve this Doc View Source Options Declaration public readonly BulkCopyOptions Options Field Value Type Description BulkCopyOptions | Improve this Doc View Source ParameterIndex Declaration public int ParameterIndex Field Value Type Description Int32 | Improve this Doc View Source ParameterName Declaration public readonly string ParameterName Field Value Type Description String | Improve this Doc View Source Parameters Declaration public readonly List<DataParameter> Parameters Field Value Type Description List < DataParameter > | Improve this Doc View Source RowsCopied Declaration public readonly BulkCopyRowsCopied RowsCopied Field Value Type Description BulkCopyRowsCopied | Improve this Doc View Source SqlBuilder Declaration public readonly ISqlBuilder SqlBuilder Field Value Type Description ISqlBuilder | Improve this Doc View Source StringBuilder Declaration public readonly StringBuilder StringBuilder Field Value Type Description StringBuilder | Improve this Doc View Source TableName Declaration public readonly string TableName Field Value Type Description String | Improve this Doc View Source ValueConverter Declaration public readonly ValueToSqlConverter ValueConverter Field Value Type Description ValueToSqlConverter Methods | Improve this Doc View Source BuildColumns(Object, Func<ColumnDescriptor, Boolean>) Declaration public virtual void BuildColumns(object item, Func<ColumnDescriptor, bool> skipConvert = null) Parameters Type Name Description Object item Func < ColumnDescriptor , Boolean > skipConvert | Improve this Doc View Source Execute() Declaration public bool Execute() Returns Type Description Boolean | Improve this Doc View Source SetHeader() Declaration public void SetHeader() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.html": {
    "href": "api/LinqToDB.DataProvider.Informix.html",
    "title": "Namespace LinqToDB.DataProvider.Informix | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Informix Classes InformixConfiguration InformixDataProvider InformixMappingSchema InformixTools"
  },
  "api/LinqToDB.DataProvider.Informix.InformixTools.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixTools.html",
    "title": "Class InformixTools | Linq To DB (aka linq2db)",
    "keywords": "Class InformixTools Inheritance Object InformixTools Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public static class InformixTools Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Int32 maxBatchSize Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveInformix(Assembly) Declaration public static void ResolveInformix(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveInformix(String) Declaration public static void ResolveInformix(string path) Parameters Type Name Description String path"
  },
  "api/LinqToDB.DataProvider.Informix.InformixMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixMappingSchema.html",
    "title": "Class InformixMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class InformixMappingSchema Inheritance Object MappingSchema InformixMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class InformixMappingSchema : MappingSchema Constructors | Improve this Doc View Source InformixMappingSchema() Declaration public InformixMappingSchema() | Improve this Doc View Source InformixMappingSchema(String) Declaration protected InformixMappingSchema(string configuration) Parameters Type Name Description String configuration Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixDataProvider.html",
    "title": "Class InformixDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class InformixDataProvider Inheritance Object DataProviderBase DynamicDataProviderBase InformixDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase.SyncRoot DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, Type, String) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class InformixDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source InformixDataProvider() Declaration public InformixDataProvider() | Improve this Doc View Source InformixDataProvider(String, MappingSchema) Declaration protected InformixDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source ExecuteScope() Declaration public override IDisposable ExecuteScope() Returns Type Description IDisposable Overrides DataProviderBase.ExecuteScope() | Improve this Doc View Source GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Declaration protected override BasicMergeBuilder<TTarget, TSource> GetMergeBuilder<TTarget, TSource>(DataConnection connection, IMergeable<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description DataConnection connection IMergeable <TTarget, TSource> merge Returns Type Description BasicMergeBuilder <TTarget, TSource> Type Parameters Name Description TTarget TSource Overrides LinqToDB.DataProvider.DataProviderBase.GetMergeBuilder<TTarget, TSource>(LinqToDB.Data.DataConnection, LinqToDB.IMergeable<TTarget, TSource>) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public override int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName Returns Type Description Int32 Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.Merge<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String) | Improve this Doc View Source MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) Declaration public override Task<int> MergeAsync<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName, CancellationToken token) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.MergeAsync<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String, System.Threading.CancellationToken) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixConfiguration.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixConfiguration.html",
    "title": "Class InformixConfiguration | Linq To DB (aka linq2db)",
    "keywords": "Class InformixConfiguration Inheritance Object InformixConfiguration Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public static class InformixConfiguration Fields | Improve this Doc View Source ExplicitFractionalSecondsSeparator Enables use of explicit fractional seconds separator in datetime values. Must be enabled for Informix starting from v11.70.xC8 and v12.10.xC2. More details at: https://www.ibm.com/support/knowledgecenter/SSGU8G_12.1.0/com.ibm.po.doc/new_features_ce.htm#newxc2__xc2_datetime Declaration public static bool ExplicitFractionalSecondsSeparator Field Value Type Description Boolean"
  },
  "api/LinqToDB.DataProvider.IDataProviderFactory.html": {
    "href": "api/LinqToDB.DataProvider.IDataProviderFactory.html",
    "title": "Interface IDataProviderFactory | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataProviderFactory Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public interface IDataProviderFactory Methods | Improve this Doc View Source GetDataProvider(IEnumerable<NamedValue>) Declaration IDataProvider GetDataProvider(IEnumerable<NamedValue> attributes) Parameters Type Name Description IEnumerable < NamedValue > attributes Returns Type Description IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.IDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.IDataProvider.html",
    "title": "Interface IDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataProvider Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public interface IDataProvider Properties | Improve this Doc View Source ConnectionNamespace Declaration string ConnectionNamespace { get; } Property Value Type Description String | Improve this Doc View Source DataReaderType Declaration Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source MappingSchema Declaration MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source Name Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source SqlProviderFlags Declaration SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ConvertParameterType(Type, DataType) Declaration Type ConvertParameterType(Type type, DataType dataType) Parameters Type Name Description Type type DataType dataType Returns Type Description Type | Improve this Doc View Source CreateConnection(String) Declaration IDbConnection CreateConnection(string connectionString) Parameters Type Name Description String connectionString Returns Type Description IDbConnection | Improve this Doc View Source CreateSqlBuilder() Declaration ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder | Improve this Doc View Source DisposeCommand(DataConnection) Declaration void DisposeCommand(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection | Improve this Doc View Source ExecuteScope() Returns conext object to wrap calls of Execute* methods. Using this, provider could e.g. change thread culture during Execute* calls. Following calls wrapped right now: DataConnection.ExecuteNonQuery DataConnection.ExecuteReader. Declaration IDisposable ExecuteScope() Returns Type Description IDisposable Returns disposable scope object. Cannot be null. | Improve this Doc View Source GetCommandBehavior(CommandBehavior) Declaration CommandBehavior GetCommandBehavior(CommandBehavior commandBehavior) Parameters Type Name Description CommandBehavior commandBehavior Returns Type Description CommandBehavior | Improve this Doc View Source GetConnectionInfo(DataConnection, String) Declaration object GetConnectionInfo(DataConnection dataConnection, string parameterName) Parameters Type Name Description DataConnection dataConnection String parameterName Returns Type Description Object | Improve this Doc View Source GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration Expression GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema IDataReader reader Int32 idx Expression readerExpression Type toType Returns Type Description Expression | Improve this Doc View Source GetSchemaProvider() Declaration ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider | Improve this Doc View Source GetSqlOptimizer() Declaration ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[]) Declaration void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection CommandType commandType String commandText DataParameter [] parameters | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description Boolean | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader Int32 idx Returns Type Description Nullable < Boolean > | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> predicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> predicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Declaration int Merge<TTarget, TSource>(DataConnection dataConnection, IMergeable<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description DataConnection dataConnection IMergeable <TTarget, TSource> merge Returns Type Description Int32 Type Parameters Name Description TTarget TSource | Improve this Doc View Source MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) Declaration Task<int> MergeAsync<T>(DataConnection dataConnection, Expression<Func<T, bool>> predicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName, CancellationToken token) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> predicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description T | Improve this Doc View Source MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) Declaration Task<int> MergeAsync<TTarget, TSource>(DataConnection dataConnection, IMergeable<TTarget, TSource> merge, CancellationToken token) where TTarget : class where TSource : class Parameters Type Name Description DataConnection dataConnection IMergeable <TTarget, TSource> merge CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description TTarget TSource | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Firebird.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.html",
    "title": "Namespace LinqToDB.DataProvider.Firebird | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Firebird Classes FirebirdConfiguration FirebirdDataProvider FirebirdMappingSchema FirebirdSqlBuilder FirebirdSqlOptimizer FirebirdTools Enums FirebirdIdentifierQuoteMode Possible modes for Firebird identifier quotes. This enumeration covers only identifier quotation logic and don't handle identifier length limits."
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdTools.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdTools.html",
    "title": "Class FirebirdTools | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdTools Inheritance Object FirebirdTools Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public static class FirebirdTools Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Int32 maxBatchSize Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveFirebird(Assembly) Declaration public static void ResolveFirebird(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveFirebird(String) Declaration public static void ResolveFirebird(string path) Parameters Type Name Description String path"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.html",
    "title": "Class FirebirdSqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdSqlOptimizer Inheritance Object BasicSqlOptimizer FirebirdSqlOptimizer Implements ISqlOptimizer Inherited Members BasicSqlOptimizer.SqlProviderFlags BasicSqlOptimizer.ConvertCountSubQuery(SelectQuery) BasicSqlOptimizer.ConvertPredicate(SelectQuery, ISqlPredicate) BasicSqlOptimizer.ConvertEqualPredicate(SqlPredicate.ExprExpr) BasicSqlOptimizer.GetMaxLength(SqlDataType) BasicSqlOptimizer.GetMaxPrecision(SqlDataType) BasicSqlOptimizer.GetMaxScale(SqlDataType) BasicSqlOptimizer.GetMaxDisplaySize(SqlDataType) BasicSqlOptimizer.ConvertConvertion(SqlFunction) BasicSqlOptimizer.AlternativeConvertToBoolean(SqlFunction, Int32) BasicSqlOptimizer.IsDateDataType(ISqlExpression, String) BasicSqlOptimizer.IsTimeDataType(ISqlExpression) BasicSqlOptimizer.FloorBeforeConvert(SqlFunction) BasicSqlOptimizer.GetAlternativeDelete(SqlDeleteStatement) BasicSqlOptimizer.GetAlternativeUpdate(SqlUpdateStatement) BasicSqlOptimizer.CheckAliases(SqlStatement, Int32) BasicSqlOptimizer.Add(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Add<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Add(ISqlExpression, Int32) BasicSqlOptimizer.Inc(ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Sub<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, Int32) BasicSqlOptimizer.Dec(ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Mul<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, Int32) BasicSqlOptimizer.Div(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Div<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Div(ISqlExpression, Int32) BasicSqlOptimizer.OptimizeJoins(SqlStatement) Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdSqlOptimizer : BasicSqlOptimizer, ISqlOptimizer Constructors | Improve this Doc View Source FirebirdSqlOptimizer(SqlProviderFlags) Declaration public FirebirdSqlOptimizer(SqlProviderFlags sqlProviderFlags) Parameters Type Name Description SqlProviderFlags sqlProviderFlags Methods | Improve this Doc View Source ConvertExpression(ISqlExpression) Declaration public override ISqlExpression ConvertExpression(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description ISqlExpression Overrides BasicSqlOptimizer.ConvertExpression(ISqlExpression) | Improve this Doc View Source Finalize(SqlStatement) Declaration public override SqlStatement Finalize(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement Overrides BasicSqlOptimizer.Finalize(SqlStatement) Implements ISqlOptimizer Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.html",
    "title": "Class FirebirdSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdSqlBuilder Inheritance Object BasicSqlBuilder FirebirdSqlBuilder Implements ISqlBuilder Inherited Members BasicSqlBuilder.Statement BasicSqlBuilder.Indent BasicSqlBuilder.BuildStep BasicSqlBuilder.SqlOptimizer BasicSqlBuilder.SqlProviderFlags BasicSqlBuilder.ValueToSqlConverter BasicSqlBuilder.StringBuilder BasicSqlBuilder.SkipAlias BasicSqlBuilder.IsNestedJoinSupported BasicSqlBuilder.IsNestedJoinParenthesisRequired BasicSqlBuilder.WrapJoinCondition BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, Int32) BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, Int32, Boolean) BasicSqlBuilder.BuildSqlBuilder(SelectQuery, Int32, Boolean) BasicSqlBuilder.WithStringBuilder<T>(StringBuilder, Func<T>) BasicSqlBuilder.ParenthesizeJoin(List<SqlJoinedTable>) BasicSqlBuilder.BuildSql() BasicSqlBuilder.BuildDeleteQuery2(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateQuery(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildSelectQuery(SqlSelectStatement) BasicSqlBuilder.BuildCteBody(SelectQuery) BasicSqlBuilder.BuildInsertQuery2(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildUnknownQuery() BasicSqlBuilder.ConvertTableName(StringBuilder, String, String, String) BasicSqlBuilder.BuildWithClause(SqlWithClause) BasicSqlBuilder.GetSelectedColumns(SelectQuery) BasicSqlBuilder.BuildColumns(SelectQuery) BasicSqlBuilder.BuildDeleteClause(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateClause(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTable(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTableName(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateSet(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildEmptyInsert(SqlInsertClause) BasicSqlBuilder.BuildOutputSubclause(SqlStatement, SqlInsertClause) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, String, Boolean, Boolean) BasicSqlBuilder.BuildInsertOrUpdateQueryAsMerge(SqlInsertOrUpdateStatement, String) BasicSqlBuilder.ExtractMergeParametersIfCannotCombine(SqlInsertOrUpdateStatement, List<SqlSetExpression>) BasicSqlBuilder.EndLine BasicSqlBuilder.BuildInsertOrUpdateQueryAsUpdateInsert(SqlInsertOrUpdateStatement) BasicSqlBuilder.BuildTruncateTableStatement(SqlTruncateTableStatement) BasicSqlBuilder.BuildTruncateTable(SqlTruncateTableStatement) BasicSqlBuilder.BuildStartCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildEndCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildCreateTableFieldType(SqlField) BasicSqlBuilder.BuildCreateTableIdentityAttribute1(SqlField) BasicSqlBuilder.BuildCreateTableIdentityAttribute2(SqlField) BasicSqlBuilder.BuildCreateTablePrimaryKey(SqlCreateTableStatement, String, IEnumerable<String>) BasicSqlBuilder.BuildPhysicalTable(ISqlTableSource, String) BasicSqlBuilder.BuildTableName(SqlTableSource, Boolean, Boolean) BasicSqlBuilder.BuildJoinType(SqlJoinedTable) BasicSqlBuilder.BuildWhere(SelectQuery) BasicSqlBuilder.BuildWhereClause(SelectQuery) BasicSqlBuilder.BuildGroupByClause(SelectQuery) BasicSqlBuilder.BuildHavingClause(SelectQuery) BasicSqlBuilder.BuildOrderByClause(SelectQuery) BasicSqlBuilder.LimitFormat(SelectQuery) BasicSqlBuilder.OffsetFormat(SelectQuery) BasicSqlBuilder.OffsetFirst BasicSqlBuilder.TakePercent BasicSqlBuilder.TakeTies BasicSqlBuilder.NeedSkip(SelectQuery) BasicSqlBuilder.NeedTake(SelectQuery) BasicSqlBuilder.BuildSkipFirst(SelectQuery) BasicSqlBuilder.BuildTakeHints(SelectQuery) BasicSqlBuilder.BuildOffsetLimit(SelectQuery) BasicSqlBuilder.BuildWhereSearchCondition(SelectQuery, SqlSearchCondition) BasicSqlBuilder.BuildSearchCondition(SqlSearchCondition) BasicSqlBuilder.BuildSearchCondition(Int32, SqlSearchCondition) BasicSqlBuilder.BuildPredicate(ISqlPredicate) BasicSqlBuilder.BuildPredicate(Int32, ISqlPredicate) BasicSqlBuilder.BuildPredicate(Int32, Int32, ISqlPredicate) BasicSqlBuilder.BuildLikePredicate(SqlPredicate.Like) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, String, Boolean, Boolean) BasicSqlBuilder.BuildExpression(ISqlExpression) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) BasicSqlBuilder.BuildExpression(Int32, ISqlExpression) BasicSqlBuilder.BuildValue(SqlDataType, Object) BasicSqlBuilder.BuildBinaryExpression(SqlBinaryExpression) BasicSqlBuilder.GetPrecedence(ISqlPredicate) BasicSqlBuilder.AlternativeBuildSql(Boolean, Action, String) BasicSqlBuilder.AlternativeBuildSql2(Action) BasicSqlBuilder.AlternativeGetSelectedColumns(SelectQuery, BasicSqlBuilder.ColumnSelector) BasicSqlBuilder.IsDateDataType(ISqlExpression, String) BasicSqlBuilder.IsTimeDataType(ISqlExpression) BasicSqlBuilder.ConvertFunctionParameters(SqlFunction) BasicSqlBuilder.GetSequenceNameAttribute(SqlTable, Boolean) BasicSqlBuilder.GetTempAliases(Int32, String) BasicSqlBuilder.GetTableAlias(ISqlTableSource) BasicSqlBuilder.GetTableDatabaseName(SqlTable) BasicSqlBuilder.GetTableOwnerName(SqlTable) BasicSqlBuilder.GetTableSchemaName(SqlTable) BasicSqlBuilder.GetTablePhysicalName(SqlTable) BasicSqlBuilder.AppendIndent() BasicSqlBuilder.Add<T>(ISqlExpression, ISqlExpression) BasicSqlBuilder.PrintParameterName(StringBuilder, IDbDataParameter) BasicSqlBuilder.GetTypeName(IDbDataParameter) BasicSqlBuilder.GetUdtTypeName(IDbDataParameter) BasicSqlBuilder.PrintParameterType(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameterValue(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameters(StringBuilder, IDbDataParameter[]) BasicSqlBuilder.ApplyQueryHints(String, List<String>) BasicSqlBuilder.GetReserveSequenceValuesSql(Int32, String) BasicSqlBuilder.GetMaxValueSql(EntityDescriptor, ColumnDescriptor) BasicSqlBuilder.Name Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdSqlBuilder : BasicSqlBuilder, ISqlBuilder Constructors | Improve this Doc View Source FirebirdSqlBuilder(ISqlOptimizer, SqlProviderFlags, ValueToSqlConverter) Declaration public FirebirdSqlBuilder(ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags, ValueToSqlConverter valueToSqlConverter) Parameters Type Name Description ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags ValueToSqlConverter valueToSqlConverter Fields | Improve this Doc View Source IdentifierQuoteMode Specifies how identifiers like table and field names should be quoted. Declaration public static FirebirdIdentifierQuoteMode IdentifierQuoteMode Field Value Type Description FirebirdIdentifierQuoteMode Remarks Default value: Auto . Properties | Improve this Doc View Source IsRecursiveCteKeywordRequired Declaration protected override bool IsRecursiveCteKeywordRequired { get; } Property Value Type Description Boolean Overrides BasicSqlBuilder.IsRecursiveCteKeywordRequired | Improve this Doc View Source SkipFirst Declaration protected override bool SkipFirst { get; } Property Value Type Description Boolean Overrides BasicSqlBuilder.SkipFirst | Improve this Doc View Source SkipFormat Declaration protected override string SkipFormat { get; } Property Value Type Description String Overrides BasicSqlBuilder.SkipFormat Methods | Improve this Doc View Source BuildColumnExpression(SelectQuery, ISqlExpression, String, ref Boolean) Declaration protected override void BuildColumnExpression(SelectQuery selectQuery, ISqlExpression expr, string alias, ref bool addAlias) Parameters Type Name Description SelectQuery selectQuery ISqlExpression expr String alias Boolean addAlias Overrides BasicSqlBuilder.BuildColumnExpression(SelectQuery, ISqlExpression, String, ref Boolean) | Improve this Doc View Source BuildCommand(SqlStatement, Int32) Declaration protected override void BuildCommand(SqlStatement statement, int commandNumber) Parameters Type Name Description SqlStatement statement Int32 commandNumber Overrides BasicSqlBuilder.BuildCommand(SqlStatement, Int32) | Improve this Doc View Source BuildCreateTableNullAttribute(SqlField, DefaultNullable) Declaration protected override void BuildCreateTableNullAttribute(SqlField field, DefaultNullable defaultNullable) Parameters Type Name Description SqlField field DefaultNullable defaultNullable Overrides BasicSqlBuilder.BuildCreateTableNullAttribute(SqlField, DefaultNullable) | Improve this Doc View Source BuildDataType(SqlDataType, Boolean) Declaration protected override void BuildDataType(SqlDataType type, bool createDbType) Parameters Type Name Description SqlDataType type Boolean createDbType Overrides BasicSqlBuilder.BuildDataType(SqlDataType, Boolean) | Improve this Doc View Source BuildDeleteQuery(SqlDeleteStatement) Declaration protected override void BuildDeleteQuery(SqlDeleteStatement deleteStatement) Parameters Type Name Description SqlDeleteStatement deleteStatement Overrides BasicSqlBuilder.BuildDeleteQuery(SqlDeleteStatement) | Improve this Doc View Source BuildDropTableStatement(SqlDropTableStatement) Declaration protected override void BuildDropTableStatement(SqlDropTableStatement dropTable) Parameters Type Name Description SqlDropTableStatement dropTable Overrides BasicSqlBuilder.BuildDropTableStatement(SqlDropTableStatement) | Improve this Doc View Source BuildFromClause(SqlStatement, SelectQuery) Declaration protected override void BuildFromClause(SqlStatement statement, SelectQuery selectQuery) Parameters Type Name Description SqlStatement statement SelectQuery selectQuery Overrides BasicSqlBuilder.BuildFromClause(SqlStatement, SelectQuery) | Improve this Doc View Source BuildFunction(SqlFunction) Declaration protected override void BuildFunction(SqlFunction func) Parameters Type Name Description SqlFunction func Overrides BasicSqlBuilder.BuildFunction(SqlFunction) | Improve this Doc View Source BuildGetIdentity(SqlInsertClause) Declaration protected override void BuildGetIdentity(SqlInsertClause insertClause) Parameters Type Name Description SqlInsertClause insertClause Overrides BasicSqlBuilder.BuildGetIdentity(SqlInsertClause) | Improve this Doc View Source BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) Declaration protected override void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate) Parameters Type Name Description SqlInsertOrUpdateStatement insertOrUpdate Overrides BasicSqlBuilder.BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) | Improve this Doc View Source BuildInsertQuery(SqlStatement, SqlInsertClause, Boolean) Declaration protected override void BuildInsertQuery(SqlStatement statement, SqlInsertClause insertClause, bool addAlias) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause Boolean addAlias Overrides BasicSqlBuilder.BuildInsertQuery(SqlStatement, SqlInsertClause, Boolean) | Improve this Doc View Source BuildSelectClause(SelectQuery) Declaration protected override void BuildSelectClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Overrides BasicSqlBuilder.BuildSelectClause(SelectQuery) | Improve this Doc View Source BuildTableName(StringBuilder, String, String, String) Declaration public override StringBuilder BuildTableName(StringBuilder sb, string database, string schema, string table) Parameters Type Name Description StringBuilder sb String database String schema String table Returns Type Description StringBuilder Overrides BasicSqlBuilder.BuildTableName(StringBuilder, String, String, String) | Improve this Doc View Source CommandCount(SqlStatement) Declaration public override int CommandCount(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description Int32 Overrides BasicSqlBuilder.CommandCount(SqlStatement) | Improve this Doc View Source Convert(Object, ConvertType) Declaration public override object Convert(object value, ConvertType convertType) Parameters Type Name Description Object value ConvertType convertType Returns Type Description Object Overrides BasicSqlBuilder.Convert(Object, ConvertType) | Improve this Doc View Source CreateSqlBuilder() Declaration protected override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides BasicSqlBuilder.CreateSqlBuilder() | Improve this Doc View Source FirstFormat(SelectQuery) Declaration protected override string FirstFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description String Overrides BasicSqlBuilder.FirstFormat(SelectQuery) | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration public override ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression Overrides BasicSqlBuilder.GetIdentityExpression(SqlTable) | Improve this Doc View Source GetProviderTypeName(IDbDataParameter) Declaration protected override string GetProviderTypeName(IDbDataParameter parameter) Parameters Type Name Description IDbDataParameter parameter Returns Type Description String Overrides BasicSqlBuilder.GetProviderTypeName(IDbDataParameter) | Improve this Doc View Source IsReserved(String) Declaration protected override sealed bool IsReserved(string word) Parameters Type Name Description String word Returns Type Description Boolean Overrides BasicSqlBuilder.IsReserved(String) Implements ISqlBuilder Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdMappingSchema.html",
    "title": "Class FirebirdMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdMappingSchema Inheritance Object MappingSchema FirebirdMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdMappingSchema : MappingSchema Constructors | Improve this Doc View Source FirebirdMappingSchema() Declaration public FirebirdMappingSchema() | Improve this Doc View Source FirebirdMappingSchema(String) Declaration protected FirebirdMappingSchema(string configuration) Parameters Type Name Description String configuration Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.html",
    "title": "Enum FirebirdIdentifierQuoteMode | Linq To DB (aka linq2db)",
    "keywords": "Enum FirebirdIdentifierQuoteMode Possible modes for Firebird identifier quotes. This enumeration covers only identifier quotation logic and don't handle identifier length limits. Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public enum FirebirdIdentifierQuoteMode Fields Name Description Auto Quote identifiers if needed. LINQ To DB will quote identifiers, if they are not valid without quotation. This includes: use of reserved words; use of any characters except latin letters, digits, _ and $; use digit, _ or $ as first character. This is default mode. Note that if you need to preserve casing of identifiers, you should use Quote mode. Quoted identifiers not supported by SQL Dialect < 3. None Do not quote identifiers. LINQ To DB will not check identifiers for validity (spaces, reserved words) is this mode. This mode should be used only for SQL Dialect < 3 and it is developer's responsibility to ensure that there is no identifiers in use that require quotation. Quote Always quote identifiers. LINQ To DB will quote all identifiers, even if it is not required. Select this mode, if you need to preserve identifiers casing. Quoted identifiers not supported by SQL Dialect < 3. Extension Methods Sql.Between<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode) Sql.NotBetween<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode) SqlExtensions.In<FirebirdIdentifierQuoteMode>(IEnumerable<FirebirdIdentifierQuoteMode>) SqlExtensions.In<FirebirdIdentifierQuoteMode>(IQueryable<FirebirdIdentifierQuoteMode>) SqlExtensions.In<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode[]) SqlExtensions.In<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode) SqlExtensions.In<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode) SqlExtensions.NotIn<FirebirdIdentifierQuoteMode>(IEnumerable<FirebirdIdentifierQuoteMode>) SqlExtensions.NotIn<FirebirdIdentifierQuoteMode>(IQueryable<FirebirdIdentifierQuoteMode>) SqlExtensions.NotIn<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode[]) SqlExtensions.NotIn<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode) SqlExtensions.NotIn<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode)"
  },
  "articles/Source/LinqToDB.Templates/README.html": {
    "href": "articles/Source/LinqToDB.Templates/README.html",
    "title": "T4 Models | Linq To DB (aka linq2db)",
    "keywords": "T4 Models T4 models are used to generate POCO's C# code using your database structure. Installation Firstly you should install one of tools packages into your project: Install-Package linq2db.XXX Where XXX is one of supported databases, for example: Install-Package linq2db.SqlServer This also will install needed linq2db packages: linq2db.t4models linq2db But not data provider packages (install them only if needed to compile your project, T4 models ships it's own data provider assemblies). .Net Core specific Because of .Net Core projects do not support NuGet content files all stuff is not copied into project's folder, so to run T4 templates you'll need: open $(SolutionDir).tools\\linq2db.t4models in Explorer copy CopyMe.XXX.Core.tt.txt to your project's folder or subfolder, then you should use it instead of CopyMe.XXX.tt.txt Running After package installing you will see new LinqToDB.Templates folder in your project, this folder contains all needed T4 stuff to generate your model. Also would be created new folder in tour solution: $(SolutionDir).tools\\linq2db.t4models , it is used to store and link assemblies, needed for generation (linq2db.dll and data provider assemblies). To create a data model template take a look at one of the CopyMe.XXX.tt.txt file in your LinqToDB.Templates project folder. Copy this file to needed project location and rename it, like MyModel.tt There are few main steps in this file: Configuring generation process (read below) Loading metadata - this is a call to LoadMatadata() function - it connects to your database and fetches all needed metadata (table structure, views, and so on) Customizing generation process (read below) Calling GenerateModel() - this will run model generation Configuring generation process Use the following initialization before you call the LoadMetadata() method. NamespaceName = \"DataModels\"; // Namespace of the generated classes. DataContextName = null; // DataContext class name. If null - database name + \"DB\". BaseDataContextClass = null; // Base DataContext class name. If null - LinqToDB.Data.DataConnection. GenerateConstructors = true; // Enforce generating DataContext constructors. DefaultConfiguration = null; // Defines default configuration for default DataContext constructor. BaseEntityClass = null; // Base Entity class name. If null - none. DatabaseName = null; // Table database name - [Table(Database=\"DatabaseName\")]. GenerateDatabaseName = false; // Always generate table database name, even though DatabaseName is null. IncludeDefaultSchema = true; // Default schema name is generated - [Table(Database=\"Northwind\", Schema=\"dbo\", Name=\"Customers\")] OneToManyAssociationType = \"IEnumerable<{0}>\"; // One To Many association type (for members only). Change it to \"List<{0}>\" if needed. GenerateAssociations = true; // Enforce generating associations as type members. GenerateBackReferences = true; // Enforce generating backreference associations (affects both members and extensions). GenerateAssociationExtensions = false; // Enforce generating associations as extension methods. NB: this option does not affect GenerateAssociations. This will require linq2db 1.9.0 and above ReplaceSimilarTables = true; // Replaces stored procedure result class names with similar to existing table class names. GenerateFindExtensions = true; // Generates find extension methods based on PKs information. IsCompactColumns = true; // If true, column compact view. PluralizeClassNames = false; // If true, pluralizes table class names. SingularizeClassNames = true; // If true, singularizes table class names. PluralizeDataContextPropertyNames = true; // If true, pluralizes DataContext property names. SingularizeDataContextPropertyNames = false; // If true, singularizes DataContex pProperty names. GenerateDataTypes = false; // If true, generates the DataType/Length/Precision/Scale properties of the Column attribute (unless overriden by the properties below). GenerateDataTypeProperty = null; // If true, generates the DataType property of the Column attribute. If false, excludes generation on the DataType property even if GenerateDataTypes == true. GenerateLengthProperty = null; // If true, generates the Length property of the Column attribute. If false, excludes generation on the Length property even if GenerateDataTypes == true. GeneratePrecisionProperty = null; // If true, generates the Precision property of the Column attribute. If false, excludes generation on the Precision property even if GenerateDataTypes == true. GenerateScaleProperty = null; // If true, generates the Scale property of the Column attribute. If false, excludes generation on the Scale property even if GenerateDataTypes == true. GenerateDbTypes = false; // If true, generates the DbType property of the Column attribute. GenerateObsoleteAttributeForAliases = false; // If true, generates [Obsolete] attribute for aliases. IsCompactColumnAliases = true; // If true, column alias compact view. NormalizeNames = false; // convert some_name to SomeName for types and members GetSchemaOptions.ExcludedSchemas = new[] { \"TestUser\", \"SYSSTAT\" }; // Defines excluded schemas. GetSchemaOptions.IncludedSchemas = new[] { \"TestUser\", \"SYS\" }; // Defines only included schemas. GetSchemaOptions.ExcludedCatalogs = new[] { \"TestUser\", \"SYSSTAT\" }; // Defines excluded catalogs. GetSchemaOptions.IncludedCatalogs = new[] { \"TestUser\", \"SYS\" }; // Defines only included catalogs. GetSchemaOptions.GetAssociationMemberName = key => \"Association_\" + key.MemberName; // Defines custom naming logic for generated associations. // check GetSchemaOptions class for more options Func<string, bool, string> ToValidName = ToValidNameDefault; // Defines function to convert names to valid (My_Table to MyTable) Func<string, bool, string> ConvertToCompilable = ConvertToCompilableDefault; // Converts name to c# compatible. By default removes uncompatible symbols and converts result with ToValidName Func<ForeignKey, string> GetAssociationExtensionSinglularName = GetAssociationExtensionSinglularNameDefault; // Gets singular method extension method name for association Func<ForeignKey, string> GetAssociationExtensionPluralName = GetAssociationExtensionPluralNameDefault; // Gets plural method extension method name for association Provider specific configurations SQL Server bool GenerateSqlServerFreeText = true; // Defines wheather to generate extensions for Free Text search, or not PostgreSQL bool GenerateCaseSensitiveNames = false; // Defines whether to generate case sensitive or insensitive names Sybase bool GenerateSybaseSystemTables = false; // Defines whether to generate Sybase sysobjects tables or not Customizing generation process Use the following code to modify your model before you call the GenerateModel() method. GetTable(\"Person\").TypeName = \"MyName\"; // Replaces table name. GetTable(\"Person\").BaseClass = \"PersonBase, IId\"; // Set base class & interface for type, null to reset GetColumn(\"Person\", \"PersonID\") .MemberName = \"ID\"; // Replaces column PersonID of Person table with ID. GetColumn(\"Person\", \"PasswordHash\").SkipOnUpdate = true; // Set [Column(SkipOnUpdate=true)], same for other column options GetColumn(\"Person\", \"Gender\") .Type = \"global::Model.Gender\"; // Change column type GetFK(\"Orders\", \"FK_Orders_Customers\").MemberName = \"Customers\"; // Replaces association name. GetFK(\"Orders\", \"FK_Orders_Customers\").AssociationType = AssociationType.OneToMany; // Changes association type. SetTable(string tableName, string TypeName = null, string DataContextPropertyName = null) .Column(string columnName, string MemberName = null, string Type = null, bool? IsNullable = null) .FK (string fkName, string MemberName = null, AssociationType? AssociationType = null) ; Model.Usings.Add(\"MyNamespace\"); // Adds using of namespace. // Replaces all the columns where name is 'TableName' + 'ID' with 'ID'. foreach (var t in Tables.Values) foreach (var c in t.Columns.Values) if (c.IsPrimaryKey && c.MemberName == t.TypeName + \"ID\") c.MemberName = \"ID\"; Useful members and data structures Dictionary<string,Table> Tables = new Dictionary<string,Table> (); Dictionary<string,Procedure> Procedures = new Dictionary<string,Procedure>(); Table GetTable (string name); Procedure GetProcedure (string name); Column GetColumn (string tableName, string columnName); ForeignKey GetFK (string tableName, string fkName); ForeignKey GetForeignKey(string tableName, string fkName); public class Table { public string Schema; public string TableName; public string DataContextPropertyName; public bool IsView; public string Description; public string AliasPropertyName; public string AliasTypeName; public string TypeName; public Dictionary<string,Column> Columns; public Dictionary<string,ForeignKey> ForeignKeys; } public partial class Column : Property { public string ColumnName; // Column name in database public bool IsNullable; public bool IsIdentity; public string ColumnType; // Type of the column in database public DbType DbType; public string Description; public bool IsPrimaryKey; public int PrimaryKeyOrder; public bool SkipOnUpdate; public bool SkipOnInsert; public bool IsDuplicateOrEmpty; public string AliasName; public string MemberName; } public enum AssociationType { Auto, OneToOne, OneToMany, ManyToOne, } public partial class ForeignKey : Property { public string KeyName; public Table OtherTable; public List<Column> ThisColumns; public List<Column> OtherColumns; public bool CanBeNull; public ForeignKey BackReference; public string MemberName; public AssociationType AssociationType; } public partial class Procedure : Method { public string Schema; public string ProcedureName; public bool IsFunction; public bool IsTableFunction; public bool IsDefaultSchema; public Table ResultTable; public Exception ResultException; public List<Table> SimilarTables; public List<Parameter> ProcParameters; } public class Parameter { public string SchemaName; public string SchemaType; public bool IsIn; public bool IsOut; public bool IsResult; public int? Size; public string ParameterName; public string ParameterType; public Type SystemType; public string DataType; }"
  },
  "articles/sql/merge/Merge-API-Background.html": {
    "href": "articles/sql/merge/Merge-API-Background.html",
    "title": "Merge API Background Information | Linq To DB (aka linq2db)",
    "keywords": "Merge API Background Information Merge API uses MERGE INTO command defined by SQL:2003 standard with updates in SQL:2008 . Additionally we support some non-standard extensions to this command. See specific database engine support information below. Later we plan to extend providers support by adding support for UPSERT -like commands. Basic syntax (SQL:2003) MERGE INTO <target_table> [[AS] <alias>] USING <source_data_set> [[AS] <alias>] ON <match_condition> -* one or both cases could be specified WHEN MATCHED THEN <update_operation> WHEN NOT MATCHED THEN <insert_operation> <update_operation> := UPDATE SET <column> = <value> [, <column> = <value>] <insert_operation> := INSERT (<column_list>) VALUES(<values_list>) Advanced syntax (SQL:2008 extensions) Multiple MATCH cases It is possible to perform different operations for records, matched by ON match condition by specifying extra conditions on WHEN statement: WHEN [NOT] MATCHED [AND <extra_condition>] THEN <match_specific_operation> DELETE operation DELETE operation could be used for WHEN MATCHED case. WHEN MATCHED [AND <extra condition>] THEN DELETE Links MERGE on wikibooks SQL grammar see SQL:2003 and SQL:2011 (sic! grammars) Supported Databases Microsoft SQL Server IBM DB2 Firebird Oracle Database Sybase/SAP ASE IBM Informix SAP HANA 2 General considerations Not all data types supported or have limited support for some providers right now if you use client-side source. Usually it will be binary types. Check notes for specific provider below. Microsoft SQL Server 2008+ Microsoft SQL Server supports Merge API starting from SQL Server 2008 release. It supports all features from SQL:2008 standard and adds support for two new operations, not available for other providers: Update by source operation Delete by source operation Those two operations allow to update or delete target record when no matching record found in source. Of course it means that only target record available in context of those two operations. Limitations: operation of each type can be used only once in merge command even with different predicates only up to three operations supported in single command Other notes: identity insert enabled for insert operation Links: MERGE INTO command IBM DB2 Note: merge implementation was tested only on DB2 LUW. DB2 supports all features from SQL:2008 standard. Limitations: doesn't support associations (joins) in match predicate Links: MERGE INTO DB2 z/OS 12 MERGE INTO DB2 iSeries 7.3 MERGE INTO DB2 LUW 11.1 Firebird Firebird 2.1-2.5 supports all features from SQL:2003 standard. Firebird 3.0 supports all features from SQL:2008 standard. Limitations: update of fields, used in match condition could lead to unexpected results in Firebird 2.5 very small double values in client-side source could fail BLOB and TIMESTAMP mapped to TimeSpan will not work with client-side source if null values mixed with non-null values Links: Firebird 2.5 MERGE INTO Firebird 3.0 MERGE INTO (PDF;Russian) Oracle Database Oracle supports SQL:2003 features and operation conditions from SQL:2008 . Instead of independent Delete operation it supports delete condition for Update operation, which will be applied only to updated records and work with updated values. To support this behavior, merge API supports Update Then Delete operation, that works only for Oracle. You also can use regular Update operation, but not Delete . For Delete operation you can use `UpdateWithDelete' with the same condition for update and delete. Limitations: Only two operations per command supported, where one of them should be Insert and second should be Update or UpdateWithDelete Delete operation not supported Associations in `Insert' setters not supported fields, used in match condition, cannot be updated command with empty enumerable source will not send command to database and return 0 immediately mixing nulls and non-null values for binary column for client-side source doesn't work Links: MERGE INTO Sybase/SAP ASE ASE supports all features from SQL:2008 standard Limitations: it is hard to name it just a limitation * server could crash on some merge queries associations in match condition not supported (undocumented) returned number of affected records could be (and usually is) more than expected Merge only with Delete operations doesn't work (undocumented) Some combinations of operations rise error with text that doesn't make any sense (undocumented): \" MERGE is not allowed because different MERGE actions are referenced in the same WHEN [NOT] MATCHED clause \", which is not true, because other commands with same set of operations just work command with empty enumerable source will not send command to database and return 0 immediately Other notes: identity insert enabled for insert operation Links: MERGE INTO ASE 15.7 MERGE INTO ASE 16 IBM Informix Informix supports all features from SQL:2003 standard and Delete operation from SQL:2008 . Limitations: associations not supported BYTE type (C# byte[] binary type) in client-side source leads to unexpected results for unknown reason Other notes: for enumerable source it could be required to specify database types on columns that contain null values if provider cannot infer them properly Links: MERGE INTO SAP HANA 2 SAP HANA 2 supports all features from SQL:2003 standard. Limitations: Update operation must be first if both Update and Insert operations used in command associations in Insert operation not supported command with empty enumerable source will not send command to database and return 0 immediately Links: MERGE INTO"
  },
  "articles/sql/Window-Functions-(Analytic-Functions).html": {
    "href": "articles/sql/Window-Functions-(Analytic-Functions).html",
    "title": "| Linq To DB (aka linq2db)",
    "keywords": "Support of Window Functions also known as Analytic Functions in LINQ To DB is based on Oracle's Documentation and all mentioned functions are supported. Window functions are implemented as extension methods for static Sql.Ext property. For defining Partitioning and Ordering fluent syntax is used and it is closest as possible to original SQL syntax. C# Syntax: Sql.Ext.[Function]([Parameters]) .Over() .[PartitionPart] .[OrderByPart] .[WindowingPart] .ToValue(); Last function in method chain must be function ToValue() - it is a mark that method chain is finished and provides correct DataType for resulting columns. Example: var q = from p in db.Parent join c in db.Child on p.ParentID equals c.ParentID select new { Rank = Sql.Ext.Rank() .Over() .PartitionBy(p.Value1, c.ChildID) .OrderBy(p.Value1) .ThenBy(c.ChildID) .ThenBy(c.ParentID) .ToValue(), RowNumber = Sql.Ext.RowNumber() .Over() .PartitionBy(p.Value1, c.ChildID) .OrderByDesc(p.Value1) .ThenBy(c.ChildID) .ThenByDesc(c.ParentID) .ToValue(), DenseRank = Sql.Ext.DenseRank() .Over() .PartitionBy(p.Value1, c.ChildID) .OrderBy(p.Value1) .ToValue(), Sum = Sql.Ext.Sum(p.Value1) .Over() .PartitionBy(p.Value1, c.ChildID) .OrderBy(p.Value1) .ToValue(), Avg = Sql.Ext.Average<double>(p.Value1) .Over() .PartitionBy(p.Value1, c.ChildID) .OrderBy(p.Value1) .ToValue(), Count = Sql.Ext.Count(p.ParentID, Sql.AggregateModifier.All) .Over() .PartitionBy(p.Value1) .OrderBy(p.Value1) .Range.Between.UnboundedPreceding.And.CurrentRow .ToValue(), }; var res = q.ToArray(); Resulting SQL: SELECT RANK() OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1], [c7].[ChildID], [c7].[ParentID]) as [c1], ROW_NUMBER() OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1] DESC, [c7].[ChildID], [c7].[ParentID] DESC) as [c2], DENSE_RANK() OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1]) as [c3], SUM([p].[Value1]) OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1]) as [c4], AVG([p].[Value1]) OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1]) as [c5], COUNT(ALL [p].[ParentID]) OVER(PARTITION BY [p].[Value1] ORDER BY [p].[Value1] RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as [c6] FROM [Parent] [p] INNER JOIN [Child] [c7] ON [p].[ParentID] = [c7].[ParentID] Note There is no limitation in window functions usage. LINQ To DB will create SQL and run query, if function is not supported or some part of function is limited in particular Database - error will be thrown on database side. Functions mapping The following table contains list of supported Window Functions and LINQ To DB representation of these functions. Some functions have overloads for supporting full Window Functions syntax. SQL Function Name Linq2db Function Name AVG Sql.Ext.Average() CORR Sql.Ext.Corr() COUNT Sql.Ext.Count() COVAR_POP Sql.Ext.CovarPop() COVAR_SAMP Sql.Ext.CovarSamp() CUME_DIST Sql.Ext.CumeDist() DENSE_RANK Sql.Ext.DenseRank() FIRST Sql.Ext.[AggregateFunction].KeepFirst() FIRST_VALUE Sql.Ext.FirstValue() LAG Sql.Ext.Lag() LAST Sql.Ext.[AggregateFunction].KeepLast() LAST_VALUE Sql.Ext.LastValue() LEAD Sql.Ext.Lead() LISTAGG Sql.Ext.ListAgg() MAX Sql.Ext.Max() MEDIAN Sql.Ext.Median() MIN Sql.Ext.Min() NTH_VALUE Sql.Ext.NthValue() NTILE Sql.Ext.NTile() PERCENT_RANK Sql.Ext.PercentRank() PERCENTILE_CONT Sql.Ext.PercentileCont() PERCENTILE_DISC Sql.Ext.PercentileDisc() RANK Sql.Ext.Rank() RATIO_TO_REPORT Sql.Ext.RatioToReport() REGR_ (Linear Regression) Functions REGR_SLOPE Sql.Ext.RegrSlope() REGR_INTERCEPT Sql.Ext.RegrIntercept() REGR_COUNT Sql.Ext.RegrCount() REGR_R2 Sql.Ext.RegrR2() REGR_AVGX Sql.Ext.RegrAvgX() REGR_AVGY Sql.Ext.RegrAvgY() REGR_SXX Sql.Ext.RegrSXX() REGR_SYY Sql.Ext.RegrSYY() REGR_SXY Sql.Ext.RegrSXY() ROW_NUMBER Sql.Ext.RowNumber() STDDEV Sql.Ext.StdDev() STDDEV_POP Sql.Ext.StdDevPop() STDDEV_SAMP Sql.Ext.StdDevSamp() SUM Sql.Ext.Sum() VAR_POP Sql.Ext.VarPop() VAR_SAMP Sql.Ext.VarSamp() VARIANCE Sql.Ext.Variance() If you have found that your database supports function that is not listed in table above, you can easily create your own extension. Code samples are located in Sql.Analytic.cs Engines that support Window Functions Oracle MSSQL Postresql MariaDB MySQL 8 DB2 z/OS DB2 LUW DB2 iSeries Informix SAP HANA SAP ASE Firebird 3"
  },
  "articles/sql/Join-Operators.html": {
    "href": "articles/sql/Join-Operators.html",
    "title": "Joins | Linq To DB (aka linq2db)",
    "keywords": "Joins LINQ To DB supports full set of joins: INNER, LEFT, FULL, RIGHT, CROSS JOIN. INNER JOIN Join operator on single column var query = from c in db.Category join p in db.Product on c.CategoryID equals p.CategoryID where !p.Discontinued select c; Using \"Where\" condition var query = from c in db.Category from p in db.Product.Where(pr => pr.CategoryID == c.CategoryID) where !p.Discontinued select c; Using \"InnerJoin\" function var query = from c in db.Category from p in db.Product.InnerJoin(pr => pr.CategoryID == c.CategoryID) where !p.Discontinued select c; Result SQL SELECT [c].[CategoryID], [c].[CategoryName], [c].[Description], [c].[Picture] FROM [Categories] [c] INNER JOIN [Products] [p] ON [c].[CategoryID] = [p].[CategoryID] WHERE [p].[Discontinued] <> 1 Join operator on multiple columns var query = from p in db.Product from o in db.Order join d in db.OrderDetail on new { p.ProductID, o.OrderID } equals new { d.ProductID, d.OrderID } where !p.Discontinued select new { p.ProductID, o.OrderID, }; Result SQL SELECT [t3].[ProductID] as [ProductID1], [t3].[OrderID] as [OrderID1] FROM ( SELECT [t1].[ProductID], [t2].[OrderID], [t1].[Discontinued] FROM [Products] [t1], [Orders] [t2] ) [t3] INNER JOIN [Order Details] [d] ON [t3].[ProductID] = [d].[ProductID] AND [t3].[OrderID] = [d].[OrderID] WHERE [t3].[Discontinued] <> 1 LEFT JOIN Join operator on single column var query = from c in db.Category join p in db.Product on c.CategoryID equals p.CategoryID into lj from lp in lj.DefaultIfEmpty() where !lp.Discontinued select c; Using \"Where\" condition var query = from c in db.Category from lp in db.Product.Where(p => p.CategoryID == c.CategoryID).DefaultIfEmpty() where !lp.Discontinued select c; Using \"LeftJoin\" function var query = from c in db.Category from p in db.Product.LeftJoin(pr => pr.CategoryID == c.CategoryID) where !p.Discontinued select c; Result SQL SELECT [c1].[CategoryID], [c1].[CategoryName], [c1].[Description], [c1].[Picture] FROM [Categories] [c1] LEFT JOIN [Products] [lj] ON [c1].[CategoryID] = [lj].[CategoryID] WHERE 1 <> [lj].[Discontinued] RIGHT JOIN Using \"RightJoin\" function var query = from c in db.Category from p in db.Product.RightJoin(pr => pr.CategoryID == c.CategoryID) where !p.Discontinued select c; Result SQL SELECT [t2].[CategoryID], [t2].[CategoryName], [t2].[Description], [t2].[Picture] FROM [Categories] [t2] RIGHT JOIN [Products] [t1] ON [t1].[CategoryID] = [t2].[CategoryID] WHERE 1 <> [t1].[Discontinued] FULL JOIN Using \"FullJoin\" function var query = from c in db.Category from p in db.Product.FullJoin(pr => pr.CategoryID == c.CategoryID) where !p.Discontinued select c; Result SQL SELECT [t2].[CategoryID], [t2].[CategoryName], [t2].[Description], [t2].[Picture] FROM [Categories] [t2] FULL JOIN [Products] [t1] ON [t1].[CategoryID] = [t2].[CategoryID] WHERE 1 <> [t1].[Discontinued] CROSS JOIN Using SelectMany var query = from c in db.Category from p in db.Product where !p.Discontinued select new {c, p}; Result SQL SELECT [t1].[CategoryID], [t1].[CategoryName], [t1].[Description], [t1].[Picture], [t2].[ProductID], [t2].[ProductName], [t2].[SupplierID], [t2].[CategoryID] as [CategoryID1], [t2].[QuantityPerUnit], [t2].[UnitPrice], [t2].[UnitsInStock], [t2].[UnitsOnOrder], [t2].[ReorderLevel], [t2].[Discontinued] FROM [Categories] [t1], [Products] [t2] WHERE 1 <> [t2].[Discontinued]"
  },
  "articles/sql/CTE.html": {
    "href": "articles/sql/CTE.html",
    "title": "Common Table Expression (CTE) | Linq To DB (aka linq2db)",
    "keywords": "Common Table Expression (CTE) Common Table Expression (CTE) support introduced for supporting advanced SQL techniques in LINQ To DB . See documentation for Transact SQL: WITH common_table_expression When it is useful Reusing same SQL part in complex query Recursive table processing Defining simple CTE CTE in LINQ To DB is also IQueryable . Any IQueryable can be converted to CTE by extension method AsCte(\"optional_name\") . var employeeSubordinatesReport = from e in db.Employee select new { e.EmployeeID, e.LastName, e.FirstName, NumberOfSubordinates = db.Employee .Where(e2 => e2.ReportsTo == e.ReportsTo) .Count(), e.ReportsTo }; var employeeSubordinatesReportCte = employeeSubordinatesReport .AsCte(\"EmployeeSubordinatesReport\"); Variable employeeSubordinatesReportCte can be reused in other parts of linq query. var result = from employee in employeeSubordinatesReportCte from manager in employeeSubordinatesReportCte .LeftJoin(manager => employee.ReportsTo == manager.EmployeeID) select new { employee.LastName, employee.FirstName, employee.NumberOfSubordinates, ManagerLastName = manager.LastName, ManagerFirstName = manager.FirstName, ManagerNumberOfSubordinates = manager.NumberOfSubordinates }; You are not limited in defining as many CTEs as you need and they can reference each other. LINQ To DB will put them in correct order and generate SQL with one limitation - there should be no circular references between CTEs . WITH [EmployeeSubordinatesReport] ( [ReportsTo], [EmployeeID], [LastName], [FirstName], [NumberOfSubordinates] ) AS ( SELECT [t2].[ReportsTo], [t2].[EmployeeID], [t2].[LastName], [t2].[FirstName], ( SELECT Count(*) FROM [Employees] [t1] WHERE [t1].[ReportsTo] IS NULL AND [t2].[ReportsTo] IS NULL OR [t1].[ReportsTo] = [t2].[ReportsTo] ) as [c1] FROM [Employees] [t2] ) SELECT [t3].[LastName] as [LastName1], [t3].[FirstName] as [FirstName1], [t3].[NumberOfSubordinates], [manager].[LastName] as [LastName2], [manager].[FirstName] as [FirstName2], [manager].[NumberOfSubordinates] as [NumberOfSubordinates1] FROM [EmployeeSubordinatesReport] [t3] LEFT JOIN [EmployeeSubordinatesReport] [manager] ON [t3].[ReportsTo] = [manager].[EmployeeID] Defining recursive CTE Recursive CTEs are special in the sense they are allowed to reference themselves! Because of this special ability, you can use recursive CTEs to solve problems other queries cannot. Recursive CTEs are really good at working with hierarchical data such as org charts for bill of materials. Recursive CTEs Explained CTEs have limitations that are not handled by LINQ To DB , so you have to be aware of them before start of usage - Guidelines for Defining and Using Recursive Common Table Expressions Since in C# language we can not use variable's reference in it's own initialization part, we have created function that helps in defining such queries GetCte<TCteProjection>(cte => ...) . TCteProjection is required generic parameter that is needed for resolving type of lambda parameter. The following example shows how to define CTE for calculation of employee hierarchy level // defining class for representing Recursive CTE class EmployeeHierarchyCTE { public int EmployeeID; public string LastName; public string FirstName; public int? ReportsTo; public int HierarchyLevel; } using (var db = new NorthwindDB(context)) { var employeeHierarchyCte = db.GetCte<EmployeeHierarchyCTE>(employeeHierarchy => { return ( from e in db.Employee where e.ReportsTo == null select new EmployeeHierarchyCTE { EmployeeID = e.EmployeeID, LastName = e.LastName, FirstName = e.FirstName, ReportsTo = e.ReportsTo, HierarchyLevel = 1 } ) .Concat ( from e in db.Employee from eh in employeeHierarchy .InnerJoin(eh => e.ReportsTo == eh.EmployeeID) select new EmployeeHierarchyCTE { EmployeeID = e.EmployeeID, LastName = e.LastName, FirstName = e.FirstName, ReportsTo = e.ReportsTo, HierarchyLevel = eh.HierarchyLevel + 1 } ); }); var result = from eh in employeeHierarchyCte orderby eh.HierarchyLevel, eh.LastName, eh.FirstName select eh; var data = result.ToArray(); } Resulting SQL: WITH [employeeHierarchy] ( [EmployeeID], [LastName], [FirstName], [ReportsTo], [HierarchyLevel] ) AS ( SELECT [t1].[EmployeeID], [t1].[LastName], [t1].[FirstName], [t1].[ReportsTo], 1 as [c1] FROM [Employees] [t1] WHERE [t1].[ReportsTo] IS NULL UNION ALL SELECT [t2].[EmployeeID], [t2].[LastName], [t2].[FirstName], [t2].[ReportsTo], [eh].[HierarchyLevel] + 1 as [c1] FROM [Employees] [t2] INNER JOIN [employeeHierarchy] [eh] ON [t2].[ReportsTo] = [eh].[EmployeeID] ) SELECT [t3].[EmployeeID] as [EmployeeID2], [t3].[LastName] as [LastName2], [t3].[FirstName] as [FirstName2], [t3].[ReportsTo] as [ReportsTo2], [t3].[HierarchyLevel] FROM [employeeHierarchy] [t3] ORDER BY [t3].[HierarchyLevel], [t3].[LastName], [t3].[FirstName] Database engines that support CTE Database Engine Minimal version Firebird 2.1 MS SQL 2008 MySQL 8.0.1 Oracle 11g Release 2 PostgreSQL 8.4 SQLite 3.8.3 IBM DB2 8 Known limitations Oracle and Firebird DML operations that use CTE is not completely implemented. TBD"
  },
  "articles/sql/Bulk-Copy.html": {
    "href": "articles/sql/Bulk-Copy.html",
    "title": "Bulk Copy (Bulk Insert) | Linq To DB (aka linq2db)",
    "keywords": "Bulk Copy (Bulk Insert) Some database servers provide functionality to quickly insert large amount of data into table. Downside of this method is that each server has it's own view on how this functionality should work and there is no standard interface to it. Overview To leverage complexity of work with this operation, LINQ To DB provides BulkCopy method. There are several overrides of it, but all they do the same - take data and operation options, perform insert and return operation status. How insert operation performed internally depends on provider support level and provided options. // DataConnectionExtensions.cs BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, int maxBatchSize, IEnumerable<T> source) BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, IEnumerable<T> source) BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, int maxBatchSize, IEnumerable<T> source) BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, IEnumerable<T> source) Insert methods and support by providers LINQ To DB allows you to specify one of four insert methods (or three, as Default is not an actual method): Default . LINQ To DB will choose method automatically, based on used provider. Which method to use for specific provider could be overriden using <PROVIDER_NAME>Tools.DefaultBulkCopyType property. RowByRow . This method just iterate over provided collection and insert each record using separate SQL INSERT command. Least effective method, but some providers support only this one. MultipleRows . Similar to RowByRow . Inserts multiple records at once using SQL INSERT FROM SELECT or similar batch insert command. This one is faster than RowByRow , but available only for providers that support such INSERT operation. If method is not supported, LINQ To DB silently fallback to RowByRow implementation. ProviderSpecific . Most effective method, available only for few providers. Uses provider specific functionality, usually not based on SQL and could have provider-specific limitations, like transactions support. If method is not supported, LINQ To DB silently fallback to MultipleRows implementation. Provider RowByRow MultipleRows ProviderSpecific Default Notes Microsoft Access Yes No No MultipleRows AccessTools.DefaultBulkCopyType IBM DB2 (LUW, zOS) Yes Yes Yes (will fallback to MultipleRows if called in transaction) MultipleRows DB2Tools.DefaultBulkCopyType Firebird Yes Yes No MultipleRows FirebirdTools.DefaultBulkCopyType IBM Informix Yes No No MultipleRows InformixTools.DefaultBulkCopyType MySql / MariaDB Yes Yes No MultipleRows MySqlTools.DefaultBulkCopyType Oracle Yes Yes Yes (will fallback to MultipleRows if called in transaction) MultipleRows OracleTools.DefaultBulkCopyType PostgreSQL Yes Yes Yes (read important notes below) MultipleRows PostgreSQLTools.DefaultBulkCopyType SAP HANA Yes No Yes MultipleRows SapHanaTools.DefaultBulkCopyType Microsoft SQL CE Yes Yes No MultipleRows SqlCeTools.DefaultBulkCopyType SQLite Yes Yes No MultipleRows SQLiteTools.DefaultBulkCopyType Microsoft SQL Server Yes Yes Yes ProviderSpecific SqlServerTools.DefaultBulkCopyType Sybase ASE Yes Yes No MultipleRows SybaseTools.DefaultBulkCopyType PostgreSQL provider-specific bulk copy For PostgreSQL BulkCopy use BINARY COPY operation when ProviderSpecific method specified. This operation is very sensitive to what types are used. You must always use proper type that match type in target table, or you will receive error from server (e.g. \"22P03: incorrect binary data format\" ). Below is a list of types, that could result in error without explicit type specification: decimal / numeric vs money . Those are two different types, mapped to System.Decimal . Default mappings will use numeric type, so if your column has money type, you should type it in mapping using DataType = DataType.Money or DbType = \"money\" hints. time vs interval . Those are two different types, mapped to System.TimeSpan . Default mappings will use time type, so if your column has interval type, you should type it in mapping using DbType = \"interval\" hint. Or use NpgsqlTimeSpan type for intervals. any text types/ json vs jsonb . All those types mapped to System.String (except character which is mapped to System.Char ). Default mappings will not work for jsonb column and you should type it in mapping using DataType = DataType.BinaryJson or DbType = \"jsonb\" hint. inet vs cidr . If you use NpgsqlInet type for mapping column, it could be mapped to both inet and 'cidr' types. There is no default mapping for this type, so you should explicitly specify it using DbType = \"inet\" or DbType = \"cidr\" hint. Also for inet you can use IPAddress which will be mapped to inet type. macaddr vs macaddr8 . Both types could be mapped to the same PhysicalAddress / String types, so you should explicitly specify column type using DbType = \"macaddr\" or DbType = \"macaddr8\" hints. Even if you use provider version without macaddr8 support, you should specify hint or it will break after provider update to newer version. date type. You should use NpgsqlDate type in mapping or specify DataType = DataType.Date or DbType = \"date\" hints. time with time zone type needs DbType = \"time with time zone\" hint. If you have issues with other types, feel free to create an issue. Options See BulkCopyOptions properties and support per-provider KeepIdentity option (default : false ) This option allows to insert provided values into identity column. It is supported by limited set of providers and is not compatible with RowByRow mode. Latter means that if provider doesn't support any other insert mode, KeepIdentity option is not supported too. This option is not supported for RowByRow because corresponding functionality is not implemented by LINQ To DB and could be added on request. If you will set this option to true for unsupported mode or provider, you will get LinqToDBException . Provider Support Microsoft Access No IBM DB2 (LUW, zOS) Only for GENERATED BY DEFAULT columns Firebird No (you need to disable triggers manually, if you use generators in triggers) IBM Informix No MySql / MariaDB Yes Oracle Partial. Starting from version 12c it will work for GENERATED BY DEFAULT columns (as DB2), for earlier versions you need to disable triggers with generators (as Firebird). Note that for versions prior to 12c, no exception will be thrown if you will try to use it with KeepIdentity set to true and generated values will be used silently as LINQ To DB don't have Oracle version detection right now. This could be changed in future. PostgreSQL Yes SAP HANA Depends on provider version (HANA 2 only?) Microsoft SQL CE Yes SQLite Yes Microsoft SQL Server Yes Sybase ASE Yes See Also As an alternative to BulkCopy , Merge operation could be used. It allows more flexibility but not available for some providers and will be always slower than BulkCopy with native provider support."
  },
  "articles/releasenotes/Unreleased-Changes.html": {
    "href": "articles/releasenotes/Unreleased-Changes.html",
    "title": "Will be included into next post-2.0 release | Linq To DB (aka linq2db)",
    "keywords": "This page contains changes and fixes that were not inluded in any release yet and available only through MyGet feed. Will be included into next post-2.0 release none yet"
  },
  "articles/releasenotes/2.0.0.html": {
    "href": "articles/releasenotes/2.0.0.html",
    "title": "v2.0.0 Release notes | Linq To DB (aka linq2db)",
    "keywords": "v2.0.0 Release notes General Changes Breaking Changes CTE Support Mapping MappingSchema.EntityDescriptorCreatedCallback Fluent Mapping Dynamic Columns Calculated Columns Inheritance Mapping Other Changes and Fixes SQL Generation Extensions Temp Tables API Bulk Copy Merge Schema Provider Other Changes and Fixes Provider-specific changes Access DB2 Firebird Informix MySQL and MariaDB Oracle PostgreSQL SAP HANA SQL CE Sybase/SAP ASE SQLite SQL Server Changes for developers I Use Entity Framework General changes Also check provider-specific changes for your provider as this section contains only provider-independent changes. Breaking Changes Changes to target frameworks Version 2.0 drops support for legacy frameworks: net4.0, silverlight, windows8 store. List of supported targets now includes: net45 netstandard1.6 netstandard2.0 netcoreapp2.0 Also you can notice that now linq2db nuget package supports all those targets and you don't need to use linq2db.core package if you want to target .net core projects. This package is now deprecated and will not be updated anymore. Who will be affected by this change: People that used deprecated frameworks. They should continue use 1.x version or migrate their projects. Users of linq2db.core package. They should update their nuget references to use linq2db package. Default enumeration mapping behavior changes for text columns Starting from version 2.0, LINQ To DB will use ToString() method to create database value for enums, mapped to text column ( 1006 , 1071 ). Prior versions used numeric representation of enumeration value, converted to string. How to find out if I'm affected by this change? You are affected if you have text columns mapped to enumeration without explicit mappings specified for fields. See following example: // enums like that are not affected, because they // have explicit mappings from enum fields to database values public enum GoodEnum { [MapValue(\"1\")] First, [MapValue(\"Second\")] Second } // enums like that will change their behavior public enum BadEnum { // v1.x: \"0\" used as a database value // v2: \"First\" used as a database value First, // v1.x: \"1\" used as a database value // v2: \"Second\" used as a database value Second } We want to say that it is generally bad idea to have no explicit enumeration field mappings as you depend on library behavior, which could change, and changes to enumeration (adding/removing/reordering fields) could lead to mapped value change. I'm affected. What should I do? First of all you can re-enable old behavior using following configuration flag: Configuration.UseEnumValueNameForStringColumns = false; But we recommend to add explicit mappings to your enumeration. CTE Support This release adds native support for common table expressions, including recursive CTE ( 534 , 890 ). You can read more about this feature here . Mapping MappingSchema.EntityDescriptorCreatedCallback This new callback could be used to modify entity mapping descriptor after creation (1074) . E.g. you can use it to change columns name notation to snake-case. ms.EntityDescriptorCreatedCallback = (mappingSchema, entityDescriptor) => { // let's imagine we have ToSnakeCase string // extension method somewhere in our project entityDescriptor.TableName = entityDescriptor.TableName.ToSnakeCase(); foreach (var entityDescriptorColumn in entityDescriptor.Columns) { entityDescriptorColumn.ColumnName = entityDescriptorColumn.ColumnName.ToSnakeCase(); } }; Fluent Mapping Custom join predicate exression support for associations 961 fluentBuilder .Entity<Entity>() .Association( e => e.AssociationProperty, (thisSide, otherSide) => thisSide.Id == otherSide.ID1); Other Changes and Fixes complex types mapping fixed (1005) Dynamic Columns This new feature will allow you to use dynamic columns in your queries ( 507 , 744 , 964 , 1083 ). Check this PR for more details. Calculated Columns You can use expressions to define calculated columns using IsColumn property of ExpressionMethodAttribute attribute (1004) . [Table] public class Entity { // normal read/write columns [Column] public string FirstName { get; set; } [Column] public string LastName { get; set; } // read-only expression-based property [ExpressionMethod(nameof(FullNameExpr), IsColumn = true)] public string FullName { get; set; } private static Expression<Fun<Entity, string>> FullNameExpr() { return e => e.LastName + \", \" + e,FirstName; } } Inheritance Mapping fixed incorrect query filter generation for left join associations for entities with inheritance mapping (956) fixed exception when inherited entity selected into property of base type (1046) Update / Delete / Insert / InsertOrReplace extensions will properly recognize inherited values when passed as parameter of base type. Important: entities without inheritance mapping not affected by this change and query generation will use parameter type as before (1017) LoadWith fixed to properly load derived entities (994) fixed several issues with type conversion in expressions between base and derived types ( 1057 , 1065 ) fixed exception when LoadWith called for nullable reference to entity with inheritance mapping (996) Other Changes and Fixes fixed MappingSchema converters were ignored for enums (1006) fixed issue when adding new metadata reader to MappingSchema.Default could result in previously added readers being ignored (1066) default char mapping will now use Length = 1 (1091) improved support of interfaces (1099) SQL Generation CROSS/OUTER APPLY support For databases that support APPLY joins you can disable this functionality using following flag: // set to true by default // v2.0-beta5 has typo in property name : PrefereApply Configuration.PreferApply = false; Other Changes and Fixes fixed exception generated for some cases when joins optimization enabled and table hints used (949) fixed SQL generation regression for some complex subqueries (928) fixed invalid SQL generated for empty select combined with Take / Skip (817) fixed issue when joined subquery condition were moved to outer query condition (922) Extensions New In / NotIn extension methods SqlExtensions class contains new extension methods In / NotIn , applied to a value. In general it is just a reverse Contains methods to better mimic SQL. // filter table by id // old reverse logic approach db.Table.Where(r => ids.Contains(r.Id)); // now it could be written like you do it in raw SQL db.Table.Where(r => r.Id.In(ids)); New *Join extension methods ( 1076 , 1088 ) Additional extension methods added to define join using two queryable sources, join predicate expression and result selector. Following methods added: InnerJoin , LeftJoin , RightJoin , FullJoin and CrossJoin . // left outer join db.Parent.LeftJoin( db.Child, (p, c) => p.ParentID == c.ParentID, (p, c) => new { ParentID = p.ParentID, ChildID = (int?)c.ChildID }); // cross join - note that join condition is not applicable here db.Parent.CrossJoin( db.Child, (p, c) => new { ParentID = (int?)p.ParentID, ChildID = (int?)c.ChildID }); Added missing support for table, schema/owner and database name parameters in some methods Those optional parameters now available also for following IDataContext extension methods: InsertOrReplace* InsertWith*Identity* Update* Delete* Parameters creation in extension builders You can add new query parameters from extension builders (973) . class InWithParametersBuilder : Sql.IExtensionCallBuilder { public void Build(Sql.ISqExtensionBuilder builder) { // get extension parameter var values = builder.GetValue<System.Collections.IEnumerable>(\"values\"); // tell linq2db that query uses non-static parameters builder.Query.IsParameterDependent = true; foreach (var value in values) { // create query parameter var param = new SqlParameter(value?.GetType() ?? typeof(object), \"p\", value); // add parameter (note that we can add multiple parameters for one placeholder) builder.AddParameter(\"values\", param); } } } public static class Extensions { // note that for values we specify comma as parameters delimiter [Sql.Extension(\"{field} IN ({values, ', '})\", IsPredicate = true, BuilderType = typeof(InWithParametersBuilder))] public static bool In<T>(this Sql.ISqlExtension ext, [ExprParameter] T field, params T[] values) { throw new NotImplementedException(); } } New extensibility points LinqExtensions.ProcessSourceQueryable delegate You can use it to preprocess IQueryable sources, passed to other APIs (1116) . E.g. it is used by our other project https://github.com/linq2db/linq2db.EntityFrameworkCore to replace EntityFramework queryable provider with LINQ To DB provider. LinqExtensions.ExtensionsAdapter interface You can override implementation of LINQ To DB async methods using this interface. Note that right now it is all-or-nothing interface, so you need to implement all methods you use, even if you want to change behavior of only one method. In this case you need to call original LINQ To DB method for others. IEntityServices.OnEntityCreated delegate This delegate will be called after entity instantiation for contexts that implement IEntityServices interface (1112) . It allows you to pre-process or even replace created entity. LINQ To DB already implements this interface for default contexts: DataContext , DataConnection and RemoteDataContextBase classes. using (var db = new DataConnection()) { var cnt = 0; // just count how many User entities were instantiated db.OnEntityCreated += e => { if (e.Entity is User) cnt++; } // do some queries } DataContext.OnTraceConnection callback Added trace callback for DataContext class similar to one that already exist on DataConnection class (1131) . Temp Tables API New API to create temporary tables added to IDataContext as a set of CreateTempTable() extension methods. Using this API you can create queryable table, populate it with data, perform queries and then delete by disposing it. Example below shows you how can you use merge with client-side source in more effective way by adding those records into temp table and merge them into main table. public void MergePersons(this IDataContext db, IEnumerable<Person> persons) { // create new table for existing Person mapping and populate it using bulk copy using (var tmp = db.CreateTempTable<Person>(persons, tableName: \"PersonTemp\")) { db.Persons // target table .Merge() .Using(tmp) // use data from temp table .OnTargetKey() .InsertWhenNotMatched() // insert new records .UpdateWhenMatched() // update known records .DeleteWhenNotMatchedBySource() // delete others .Merge(); } // here dispose will delete temp table } API allows you: specify new table, owner/schema, database name using corresponding parameters populate table using data from IQueryable source parameter populate table using bulk copy from IEnumerable source parameter and BulkCopyOptions adjust entity mapping for temporary table using fluent mapping delegate using setTable parameter call some action on created table before populating it with data using action parameter Bulk Copy Documentation New article created for BulkCopy API. It still miss documentation on some options, but most important information is already here. It will be improved in next releases. KeepIdentity option KeepIdentity option were documented and existing implementations tested/fixed to follow it (1037) . Setting this option to true for RowByRow copy mode was never supported and if you have it set to true - starting from version 2.0 it will start throwing exception instead of silently ignore it. Check copy mode support table to see what mode actually used for your provider, as BulkCopy will downgrade copy mode, if requested one is not supported by provider. Merge Partial projections in source query improvements Now merge will properly detect and throw exception when source query element type contains more fields than query returns. class Person { [PrimaryKey, Column, Identity] public int Id { get; set; } [Column] public string FirstName { get; set; } [Column] public string LastName { get; set; } [Column] public string Title { get; set; } } // bad query db.Persons.Merge() // note that Id and Title columns is not selected by query .Using(db.NewPersons.Select(p => new Person() { FirstName = p.LastName, LastName = p.FirstName })) // will throw exception that Id key field missing in source .OnTargetKey() // will throw exception that Title field missing in source .InsertWhenNotMatched(s => new Person() { Title = s.Title }) .Merge(); Other Changes and Fixes CROSS JOIN and SelectMany support in source query (896) Merge call will not be available anymore if you didn't specified any operations yet fixed exception of empty local source with source type != target type (1153) Schema Provider Requesting schema for procedures and functions will wrap it internally in transaction with rollback, when called without transaction. This is done to avoid situations when some providers execute (sic!) procedures instead of just returning their schema. Taking into account such bugs it is recommended to never wrap schema provider calls into transaction and let LINQ To DB handle it. Other Changes and Fixes errors during mapping of data from database to mapping class field on selects will now be wrapped into LinqToDBException with details what field failed with original error in InnerException (1065) fixed issue when selected of NULL value using SelectMany method could have resulted in default(T) value for value types even with cast to T? (1012) fixed exception passing binary data over WCF (925) spelling error fixed for SchemaProvider.ForeignKeyInfo (941) enforce server-side evaluation of Sql.Lower / Sql.Upper functions (819) fixed case when async code could be blocked on synchronous Connection.Open call (1023) fixed support for type casts in LoadWith expression (1069) fixed issue when insert query with sub-query data source will fail on next calls if it has nullable parameter and first call uses null for parameter value (1098) T4.Models repository was obsolete project and moved to linq2db repo removed use of database object owner name from many APIs to reduce confusion with having owner and schema overrides at the same time, meaning the same concept T4 templates support in .NET Core projects (1067) new DataConnection.GetRegisteredProviders method to return list of all registered data providers Provider-specific changes Access handle exceptions from OleDb provider on schema read calls when ACE provider used (10) schema provider will now return system tables too ( TableInfo.IsProviderSpecific == true ) (1119) DB2 IBM.Data.DB2.Core provider support - .NET Core DB2 provider support was added. schema provider doesn't return procedures and functions if GetTables = false specified (1068) Firebird Default identifier quotation mode change Default identifier quotation mode changed from FirebirdIdentifierQuoteMode.None to FirebirdIdentifierQuoteMode.Auto (1120) . Normally it shouldn't affect anybody, as Auto mode will quote only invalid and reserved identifiers and they will not work anyway in None mode. Still, technically it could be a case for people who used quoted identifier in mappings. This is not something you should do, as mapping should contain raw identifers and quotation should be handled by LINQ To DB. If you did that we want to hear why you need to do it and how we can improve LINQ To DB in this area. If you are affected by this change, just restore old quotation mode using following code: FirebirdSqlBuilder.IdentifierQuoteMode = FirebirdIdentifierQuoteMode.None; Other changes and fixes BulkCopy will throw exception if KeepIdentity = true option specified as this option is not supported for Firebird (1037) . Check BulkCopy documentation for more details DropTable API will check if dropped objects exist before dropping them (1120) fixed support of seconds and milliseconds by Sql.DatePart function (967) detect and escape identifiers that use reserved words in FirebirdIdentifierQuoteMode.Auto mode ( 1095 , 1110 ) CreateTable / DropTable / TruncateTable will respect identifier quotation mode during query generation (1120) FirebirdDataProvider and FirebirdSqlOptimizer classes made public to help users override default implementation (1000) Informix Added delimited identifiers support MySQL and MariaDB Procedures and functions support by schema provider Schema provider for MySQL/MariaDB was updated to return procedures and functions (991) . Requesting procedures and functions from transaction will throw exception because schema provider need to wrap it internally into transaction to avoid procedure execution due to bug in provider (792) Oracle .NET Core provider support Support for beta version of .NET Core provider added. Other changes and fixes date literal generation fixes (969) schema provider doesn't return procedures and functions if GetTables = false specified (1068) detect and escape identifiers that use reserved words ( 1095 , 1110 ) PostgreSQL Native bulk copy support Version 2.0 adds support for native bulk copy method (935) . It is available through existing BulkCopy LINQ To DB API by specifying BulkCopyOptions.BulkCopyType = BulkCopyType.ProviderSpecific . It is a high-level wrapper over COPY command. Note that if you already used this mode for your bulk copy operations it could be a breaking change because now it will use COPY instead of silent fallback to BulkCopyType.MultipleRows in previous versions. Why it could be a breaking change? Because COPY command (we use BINARY mode) demands that proper column types specified and will fail if types doesn't match. You will need to add type information to your mappings or switch to other copy method. You can read about type requirements more in out new article about BulkCopy API here . Implementation supports COPY API from both npgsql 3.x and npgsql 4.x (4.0 brings breaking changes to API). Upsert support InsertOrUpdate API will use INSERT ON CONFLICT UPDATE statement for PostgreSQL 9.5+ instead of several statements on previous versions (948) . You will need to use PostgreSQLVersion.v95 provider version if you don't use version autodetect. Other changes and fixes improved support for some database types as a part of BulkCopy improvements (1091) fixed support for following types in CreateTable API: Int16 / Int64 identity columns, System.Linq.Binary , DataType.VarBinary , DataType.NChar(1) , char (1091) support for interval type mapping to both NpgsqlTimeSpan and NpgsqlInterval types (1091) SAP HANA BulkCopy KeepIdentity option support As a part of KeepIdentity option review, support for it added to SAP HANA provider. Check documentation for more details (1037) . Note that this option requires support from provider, so make sure you use recent provider version with enum HanaBulkCopyOptions having KeepIdentity field and not all versions had it. Otherwise BulkCopy will throw exception. SQL CE BulkCopy KeepIdentity option support As a part of KeepIdentity option review, support for it added to SQL CE provider. Check documentation for more details (1037) . Sybase MERGE insert operation will respect SkipOnInsert on identity fields when InsertWhenNotMatched() without custom setter used and allow database to generate field's value (914) requesting procedures and functions from schema provider will throw exception if called from transaction to avoid database corruction due to bug in provider (792) SQLite DateTime.AddDays() method to SQL conversion fixed (998) SQL Server varchar / nvarchar parameters will use 8000/4000 as length to improve query plans caching (989) MERGE will use parameters instead of literals for binary data in client-side (IEnumerable) source MERGE insert operation will respect SkipOnInsert on identity fields when InsertWhenNotMatched() without custom setter used and allow database to generate field's value (914) legacy MERGE API will not try to update identity columns anymore on update operation anymore (1007) fixed DropTable method not dropping table in another database (1030) fixed DateTime literal generation (1107) fixed incompatibility between BulkCopy and RetryingDbConnection (1135) Changes for developers Query AST was refactored. See SelectQuery class ( 936 , 938 ) Tests configuration changed format and use *DataProviders.json files instead of *DataPRoviders.txt. More details Project migrated to support latest C# version You can use new ActiveIssueAttribute to mark tests for non-fixed issues. This will allow to merge test-only PRs immediately SchemaProviderBase methods ToTypeName and ToValidName made public ( 944 , 963 ) SqlProviderFlags.CustomFlags list added to allow store custom provider flags (1154) expose SqlExtensions class for provider developers I Use Entity Framework (:feelsbadman:) Don't worry, check this new project we created recently. It is still an early prototype so don't expect it to work flawlessly. We will appreciate your feedback!"
  },
  "articles/project/Issue-reporting.html": {
    "href": "articles/project/Issue-reporting.html",
    "title": "How to report an issue | Linq To DB (aka linq2db)",
    "keywords": "How to report an issue To help you with your problem we need to know: linq2db version you are using Database you are using Code sample, demonstrating the problem & result SQL query (if any) Explain what is wrong Certainly, the best way of reporting an issue would be the Pull Request with test, demonstrating an issue and fix. Or just the test. Please, when making such PR use data model from Tests.Model project. If your query is not obvious and it is not clear how to write minimal reproducing sample, please read above about how to generate test sample. Generating the test This page describes how to generate NUnit test, demonstrating your issue. Cleanup C:\\Users\\[username]\\AppData\\Local\\Temp\\linq2db (if exists) Set LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = true; before your failing query, and LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = false; after. Execute your failing query. ExpressionTest.0.cs file would be generated in C:\\Users\\[username]\\AppData\\Local\\Temp\\linq2db . This would contain unit test with your query and POCO model. Attach this file to the issue. For example: LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = true; // Don't forget to trigger query execution by calling e.g. ToList() var q = db.GetTable<MyTable>().Where(_ => _.Id > 111).ToList(); LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = false;"
  },
  "articles/project/How-can-i-help.html": {
    "href": "articles/project/How-can-i-help.html",
    "title": "How can I help? | Linq To DB (aka linq2db)",
    "keywords": "How can I help? Certainly the best help will be pull requests with fixes (please read this guide before creating PR). If you are not ready to start as developer you can: Write XML documentation. Yes, this thing we do really need - XML documentation with samples. You can take any undocumented public class or method and document it and make pull requests. Stories - you can tell your friends about linq2db, also you can post some samples and guides, it would be really great. Testing! It is really great if you can spent some of your time to run your projects tests with new RC version. Proof-reading. If you are native english speaker, it would be nice if you can spend some time proof-reading documentation. Can run Linq To DB tests on DB2 z/OS database? Ping us here . Testing how to Open new issue \"Invite me to testers team\", we'll send you an invitation. Before each official release new PR would be created with notification to all team members. Next you need to update to the latest RC package from MyGet and run your tests. If something is wrong please report us and if everything is alright just approve PR."
  },
  "articles/project/contrib.html": {
    "href": "articles/project/contrib.html",
    "title": "Contributing guide | Linq To DB (aka linq2db)",
    "keywords": "Contributing guide Development rules and regulations, code style Follow this document Project structure description Solution and folder structure Folder Description .\\ Root folder .\\Build Various files for AppVeyor builds and common project settings .\\Data Contains test databases creation scripts and database files .\\Doc DocFX documentation files .\\NuGet LINQ to DB NuGet packages build files, readme.txt .\\Redist Redistributable binaries for providers unavailable officially at NuGet .\\Source\\LinqToDB LINQ to DB source code .\\Source\\LinqToDB.Templates LINQ to DB t4models source code .\\Tests Unit tests .\\Tests\\Base LINQ to DB testing framework .\\Tests\\FSharp F# models and tests .\\Tests\\IBM.Core Tests for IBM.Data.DB2.Core provider .\\Tests\\Linq Main project for LINQ to DB unit tests .\\Tests\\Model Model classes for tests .\\Tests\\T4.Linq Models for test databases, generated using t4models .\\Tests\\T4.Model T4Models tests .\\Tests\\T4.Wpf T4Models NotifyPropertyChanged template test project .\\Tests\\TestApp SQL Server spatial types test application .\\Tests\\Tests.Benchmark Benchmark tests .\\Tests\\VisualBasic Visual Basic models and tests Solutions: .\\linq2db.sln - VS2017 solution Projects: Project .NET 4.5 .NET 4.5.2 .NET 4.6 .NET 4.6.2 .NET Standard 1.6 .NET Standard 2.0 .NET Core 1.0 .NET Core 2.0 .\\Source\\LinqToDB\\LinqToDB.csproj √ √ √ √ .\\Tests\\Linq\\Tests.Base.csproj √ √ √ .\\Tests\\IBM.Core\\Tests.IBM.Core.csproj √ √ .\\Tests\\Linq\\Tests.csproj √ √ √ .\\Tests\\FSharp\\Tests.FSharp.fsproj √ √ √ .\\Tests\\Model\\Tests.Model.csproj √ √ .\\Tests\\T4.Linq\\Tests.T4.Linq.csproj √ √ .\\Tests\\T4.Model\\Tests.T4.Model.csproj √ .\\Tests\\T4.Wpf\\Tests.T4.Wpf.csproj √ .\\Tests\\TestApp\\TestApp.csproj √ .\\Tests\\Tests.Benchmark\\Tests.Benchmark.csproj √ .\\Tests\\VisualBasic\\Tests.VisualBasic.vbproj √ √ Building You can use the solution to build and run tests. Also you can build whole solution or library using the following batch files: run .\\Build.cmd - builds all the projects in the solution for Debug, Release, and AppVeyor configurations run .\\Source\\LinqToDB\\Compile.cmd - builds LinqToDB projects for Debug and Release configurations Different platforms support Because of compiling for different platforms we do use: Conditional compilation. Different projects and configurations define compilation symbols: NET45 - .NET 4.5 compatibility level NETSTANDARD1_6 - .NET Standard 1.6 compatibility level NETSTANDARD2_0 - .NET Standard 2.0 compatibility level Implementing missing classes and enums. There are some under .\\Source\\LinqToDB\\Compatibility folder. Branches master - current stable branch release - branch with the latest release release1 - branch for critical fixes for version 1.xx.yy version1 - stable branch for version 1.xx.yy Run tests NUnit3 is used as unit testing framework. Most tests are run for all supported databases, and written in same pattern: [TestFixture] public class Test: TestBase // TestBase - base class, provides base methods and object data sources { // DataContextSourceAttribute - implements NUnit ITestBuilder and provides context values to test // TestAttribute - not required for nunit test runner, but needed for Resharper test runner [Test, DataContextSource] public void Test(string context) { // TestBase.GetDataContext - creates new IDataContext, supports creating WCF client and server using(var db = GetDataContext(context)) { // Here is the most interesting // this.Person - list of persons, corresponding Person table in database (derived from TestBase) // db.Person - database table // So test checks that LINQ to Objects query produces the same result as executed database query AreEqual(this.Person.Where(_ => _.Name == \"John\"), db.Person.Where(_ => _.Name == \"John\")); } } } Configure data providers for tests DataContextSourceAttribute generates tests for each configured data provider, configuration is taken from .\\Tests\\Linq\\DataProviders.json and .\\Tests\\Linq\\UserDataProviders.json if it exists. Linq\\UserDataProviders.json is used to specify user-specific settings such as connections strings to test databases and list of tested providers. The [User]DataProviders.json is a regular JSON file: UserDataProviders.json example (with description) { // .net framework 4.5 test configuration \"NET45\" : { // base configuration to inherit settings from // Inheritance rules: // - DefaultConfiguration, TraceLevel, Providers - use value from base configuration only if it is not defined in current configuration // - Connections - merge current and base connection strings \"BasedOn\" : \"LocalConnectionStrings\", // default provider, used as a source of reference data // LINQ to DB uses SQLite for it and you hardly need to change it \"DefaultConfiguration\" : \"SQLite.Classic\", // logging level // Supported values: Off, Error, Warning, Info, Verbose // Default level: Info \"TraceLevel\" : \"Error\", // list of database providers, enabled for current test configuration \"Providers\" : [ \"Access\", \"SqlCe\", \"SQLite.Classic\", \"SQLite.MS\", \"Northwind.SQLite\", \"Northwind.SQLite.MS\", \"SqlServer\", \"SqlServer.2014\", \"SqlServer.2012\", \"SqlServer.2012.1\", \"SqlServer.2008\", \"SqlServer.2008.1\", \"SqlServer.2005\", \"SqlServer.2005.1\", \"SqlAzure.2012\", \"DB2\", \"Firebird\", \"Informix\", \"MySql\", \"MariaDB\", \"Oracle.Native\", \"Oracle.Managed\", \"PostgreSQL\", \"Sybase\", \"Northwind\", \"TestNoopProvider\" ], // list of test skip categories, disabled for current test configuration // to set test skip category, use SkipCategoryAttribute on test method, class or whole assembly \"Skip\" : [ \"Access.12\" ] }, // .net core 1.0 test configuration \"CORE1\" : { \"BasedOn\" : \"LocalConnectionStrings\", \"Providers\" : [ \"SQLite.MS\", \"Northwind.SQLite.MS\", \"SqlServer\", \"SqlServer.2014\", \"SqlServer.2012\", \"SqlServer.2012.1\", \"SqlServer.2008\", \"SqlServer.2008.1\", \"SqlServer.2005\", \"SqlServer.2005.1\", \"SqlAzure.2012\", \"Firebird\", \"MySql\", \"MariaDB\", \"PostgreSQL\", \"Northwind\", \"TestNoopProvider\" ] }, // .net core 2.0 test configuration \"CORE2\" : { \"BasedOn\" : \"LocalConnectionStrings\", \"Providers\" : [ \"SQLite.MS\", \"Northwind.SQLite.MS\", \"SqlServer\", \"SqlServer.2014\", \"SqlServer.2012\", \"SqlServer.2012.1\", \"SqlServer.2008\", \"SqlServer.2008.1\", \"SqlServer.2005\", \"SqlServer.2005.1\", \"SqlAzure.2012\", \"Firebird\", \"MySql\", \"MariaDB\", \"PostgreSQL\", \"Northwind\", \"TestNoopProvider\" ] }, // list of connection strings for all providers \"LocalConnectionStrings\": { \"BasedOn\" : \"CommonConnectionStrings\", \"Connections\" : { // override connection string for SqlAzure.2012 provider // all other providers will use default inherited connection strings from CommonConnectionStrings configuration \"SqlAzure.2012\" : { \"Provider\" : \"System.Data.SqlClient\", \"ConnectionString\" : \"Server=tcp:xxxxxxxxx.database.windows.net,1433;Database=TestData;User ID=TestUser@zzzzzzzzz;Password=TestPassword;Trusted_Connection=False;Encrypt=True;\" } } } } To define your own configurations DO NOT EDIT DataProviders.json - create .\\Tests\\Linq\\UserDataProviders.json and define needed configurations. Right now tests execution depends on _CreateData.* tests executed first. Those tests recreate test databases and populate them with test data, so if you are going to run one test be sure to run _CreateData before it manually. Also - if your test changes database data, be sure to revert those changes (!) to avoid side effects for other tests. Continuous Integration We do run builds and tests with: AppVeyor (Windows) appveyor.yml . Makes build and runs tests for: .Net 4.5.2: NET45.AppVeyor configuration . Full set of tests are done. .Net Core 1.0: CORE1.AppVeyor configuration . Only _Create tests are done (smoke testing). .Net Core 2.0: CORE2.AppVeyor configuration . Only _Create tests are done (smoke testing). DocFx - to build documentation . Deploy is done only for release branch. Travis (Linux) .travis.yml . Makes build and runs tests for: .Net Core 2.0: CORE2.Travis configuration . Full set of tests are done. CI builds are done only for next branches: master /version.*/ (regex) /release.*/ (regex) /dev.*/ (regex) Skip CI build If you want to skip building commit by CI (for example you have changed *.md files only) begin commit comment with [ci skip] . Publishing packages Release candidate packages are published by AppVeyor to MyGet.org for each successful build of master branch. Release packages are published by AppVeyor to NuGet.org for each successful build of release and release1 branch. Building releases Update Release Notes and create empty entry for vNext release Create PR from master to release branch, in comments add @testers to notify all testers that we are ready to release Wait few days for feedback from testers and approval from contributors Merge PR Tag release Update versions in master branch (this will lead to publish all next master builds as new version RC): in .\\appveyor.yml set assemblyVersion parameter in *.nuspec files update linq2db dependency version in issue template update default linq2db version Process In general you should follow simple rules: Development rules and regulations, code style Do not add new features without tests Avoid direct pushes to master and release branches To fix some issue or implement new feature create new branch and make pull request after you are ready to merge. Merge your PR only after contributor's review. If you are going to implement any big feature you may want other contributors to participate (coding, code review, feature discuss and so on), so to do it: Create new PR with [WIP] prefix (Work In Process) After you are ready to merge remove the prefix & assign contributors as reviewers If you do have write access, it is recommended to use central repository (not forks). Why - simple, it would allow other teammates to help you in developing (if needed). Certainly you are free to use fork if it is more convenient to you Please avoid adding new public classes, properties, methods without XML doc Read issues and help users Do not EF :) See also Issue reporting"
  },
  "articles/get-started/install/index.html": {
    "href": "articles/get-started/install/index.html",
    "title": "Installing LINQ To DB | Linq To DB (aka linq2db)",
    "keywords": "Installing LINQ To DB Visual Studio development You can develop many different types of applications that target .NET Core, .NET Framework, or other platforms supported by LINQ To DB using Visual Studio. There are two ways you can install the LINQ To DB database provider in your application from Visual Studio: Using NuGet's Package Manager User Interface Select on the menu Project > Manage NuGet Packages Click on the Browse or the Updates tab Select the linq2db.SqlServer package and the desired version and confirm (see list of supported databases ) Tip linq2db package contains all Data Providers in bundle and loads their libraries dynamically. For simplyfying usage, LINQ To DB has many helper packages linq2db.* that reference required libraries and provide T4 Templates for particular Data Provider. Using NuGet's Package Manager Console (PMC) Select on the menu Tools > NuGet Package Manager > Package Manager Console Type and run the following command in the PMC: Install-Package linq2db.SqlServer You can use the Update-Package command instead to update a package that is already installed to a more recent version To specify a specific version, you can use the -Version modifier. For example, to install LINQ To DB packages, append -Version 2.1.0 to the commands"
  },
  "articles/get-started/full-dotnet/index.html": {
    "href": "articles/get-started/full-dotnet/index.html",
    "title": "Getting Started on .NET Framework - LINQ To DB | Linq To DB (aka linq2db)",
    "keywords": "Getting Started with LINQ To DB on .NET Framework These tutorials require no previous knowledge of LINQ To DB or Visual Studio. They will take you step-by-step through creating a simple .NET Framework Console Application that queries and saves data from a database. You can use the techniques learned in these tutorials in any application that targets the .NET Framework, including WPF and WinForms. Note These tutorials and the accompanying samples have been updated to use LINQ To DB 2.1.0. However, in the majority of cases it should be possible to create applications that use previous releases, with minimal modification to the instructions."
  },
  "articles/get-started/full-dotnet/existing-db.html": {
    "href": "articles/get-started/full-dotnet/existing-db.html",
    "title": "Getting Started on .NET Framework - Existing Database - LINQ To DB | Linq To DB (aka linq2db)",
    "keywords": "Getting started with LINQ To DB on .NET Framework with a Existing Database In this walkthrough, you will build a console application that performs basic data access against a Microsoft SQL Server database using LINQ To DB. You will use existing database to create your model. Tip You can view this article's sample on GitHub. Prerequisites The following prerequisites are needed to complete this walkthrough: Visual Studio 2017 Latest version of NuGet Package Manager Latest version of Windows PowerShell Northwind Database Tip Also there is Northwind Database script file which can be executed using Microsoft SQL Server Management Studio Create a new project Open Visual Studio File > New > Project... From the left menu select Templates > Visual C# > Windows Classic Desktop Select the Console App (.NET Framework) project template Ensure you are targeting .NET Framework 4.5.1 or later Give the project a name and click OK Install LINQ To DB To use LINQ To DB, install the package for the database provider(s) you want to target. This walkthrough uses SQL Server. For a list of available providers see Database Providers . Tools > NuGet Package Manager > Package Manager Console Run Install-Package linq2db.SqlServer Generate model from database Now it's time to generate your model from database. Project > New Folder... Enter DataModels as the name and click OK DataModels > Add Item... and select Text Template Enter Northwind.tt as the name and click OK Copy the content from the file Project > LinqToDB.Templates\\CopyMe.SqlServer.tt.txt Modify host, database name and credentials for your SQL Server in LoadSqlServerMetadata function call Save Northwind.tt - it should invoke model generation Tip There are many ways to customize generation process. Follow this link for details. Use your model You can now use your model to perform data access. Open App.config Replace the contents of the file with the following XML (correct connection string based on your server location and credentials) <!-- [!code-xml[Config](https://github.com/linq2db/examples/blob/master/SqlServer/GetStarted/App.config)] --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <connectionStrings> <add name=\"MyDatabase\" providerName=\"System.Data.SqlClient\" connectionString=\"Data Source=.;Database=Northwind;Integrated Security=SSPI;\" /> </connectionStrings> </configuration> Open Program.cs Replace the contents of the file with the following code <!-- [!code-csharp[Main](https://github.com/linq2db/examples/blob/master/SqlServer/GetStarted/Program.cs)] --> using System; using System.Linq; namespace GetStarted { class Program { static void Main(string[] args) { using (var db = new DataModel.NorthwindDB()) { var q = from c in db.Customers select c; foreach (var c in q) Console.WriteLine(c.ContactName); } } } } Debug > Start Without Debugging You will see list of Contact names."
  },
  "articles/get-started/index.html": {
    "href": "articles/get-started/index.html",
    "title": "Getting Started - LINQ To DB | Linq To DB (aka linq2db)",
    "keywords": "Getting Started with LINQ To DB Installing LINQ To DB A summary of the steps necessary to add LINQ To DB to your application in different platforms and popular IDEs. Step-by-step Tutorials These introductory tutorials require no previous knowledge of LINQ To DB or a particular IDE. They will take you step-by-step through creating a simple application that queries and saves data from a database. We have provided tutorials to get you started on various operating systems and application types."
  },
  "articles/general/Video.html": {
    "href": "articles/general/Video.html",
    "title": "LINQ Video | Linq To DB (aka linq2db)",
    "keywords": "LINQ Video LINQ to SqlServer LINQ CRUD Operations"
  },
  "articles/general/supportedfw.html": {
    "href": "articles/general/supportedfw.html",
    "title": "Supported frameworks | Linq To DB (aka linq2db)",
    "keywords": "Supported frameworks Framework linq2db linq2db.Core .Net 4 Yes Yes .Net 4.5 Yes Yes .Net 4.5.1 Yes Silverlight 4+ Yes Mono Yes WindowsStore 8 Yes .NETStandard 1.6 Yes"
  },
  "articles/general/Managing-data-connection.html": {
    "href": "articles/general/Managing-data-connection.html",
    "title": "Managing data connection | Linq To DB (aka linq2db)",
    "keywords": "Managing data connection .NET database providers use connection pooling to work with database connections, where they take connection from pool, use it, and then release connection back to connection pool so it could be reused. When connection is not released correctly after use, connection pool will consider it still used, which will lead to two consequences: your application will create more and more connections to database, because there are no free connections to reuse from connection pool manager point of view at some point your application will fail to obtain connection from pool, because pool size limit reached To avoid collection leaks you should care about how you are creating and disposing connections. There are to ways to query database with linq2db: using DataConnection class. Using DataConnection you can make several queries in one physical database connection, so you do not have overhead on opening and closing database connection. You should follow few simple rules: always dispose DataConnection instance (it is recommended to use using c# statement); query should be executed before DataConnection object is disposed. From version 1.8.0 we have introduced protection from wrong usage, and you will get ObjectDisposedException trying to perform query on disposed DataConnection instance. using DataContext class. DataContext opens and closes physical connection for each query! Be careful with DataContext.KeepConnectionAlive property, if you set it true , it would work the same way as DataConnection ! So we do not recommend you to set this property to true . Done right using (var db = new DataConnection()) { // your code here } public IEnumerable<Person> GetPersons() { using (var db = new DataConnection()) { // ToList call sends query to database while we are still in using return db.GetTable<Person>().ToList(); } } public IEnumerable<Person> GetPersons() { // ToList call sends query to database and DataContext releases connection return new DataContext().GetTable<Person>().ToList(); } public IQuerable<Person> GetPersons() { // query is not sent to database here // it will be executed later when user will enumerate results of method // but DataContext will handle it properly return new DataContext().GetTable<Person>(); } public async Task<IEnumerable<Person>> GetPersons() { using (var db = new DataConnection()) { // await will suspend execution inside of using waiting for query results from ToListAsync() // after that execution will continue and dispose `DataConnection` instance return await db.GetTable<Person>().ToListAsync(); } } Done wrong public IEnumerable<Person> GetPersons() { using (var db = new DataConnection()) { // query will be executed only when user will enumerate method results return db.GetTable<Person>(); } } // DataConnection already disposed here // starting from linq2db 1.8.0 it will fail with ObjectDisposedException // versions prior to 1.8.0 will execute query (if there are free connectons left) and will create leaked connection var persons = GetPersons().ToList(); public async Task<IEnumerable<Person>> GetPersons() { using (var db = new DataConnection()) { // no suspension point here, awaitable task will be returned immediately from method // creating race conditions return db.GetTable<Person>().ToListAsync(); } } // query execution will be called on disposed DataConnection var persons = await GetPersons();"
  },
  "articles/general/databases.html": {
    "href": "articles/general/databases.html",
    "title": "Supported databases | Linq To DB (aka linq2db)",
    "keywords": "Supported databases DB2 (LUW, z/OS) Firebird Informix Microsoft Access Microsoft Sql Azure Microsoft Sql Server Microsoft SqlCe MySql Oracle PostgreSQL SQLite SAP HANA Sybase ASE DB2 iSeries"
  },
  "articles/links.html": {
    "href": "articles/links.html",
    "title": "Links | Linq To DB (aka linq2db)",
    "keywords": "Links Blog LINQ to DB NuGets LINQ to DB pre release NuGets LINQ to DB on GitHub Source Code Code Examples"
  },
  "articles/FAQ.html": {
    "href": "articles/FAQ.html",
    "title": "Mapping | Linq To DB (aka linq2db)",
    "keywords": "Mapping How can I use calculated fields? You need to mark them to be ignored during insert or update operations, e.g. using ColumnAttribute attribute: public class MyEntity { [Column(SkipOnInsert = true, SkipOnUpdate = true)] public int CalculatedField { get; set; } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "LINQ to DB | Linq To DB (aka linq2db)",
    "keywords": "LINQ to DB LINQ to DB is the fastest LINQ database access library offering a simple, light, fast, and type-safe layer between your POCO objects and your database. Architecturally it is one step above micro-ORMs like Dapper, Massive, or PetaPoco, in that you work with LINQ expressions, not with magic strings, while maintaining a thin abstraction layer between your code and the database. Your queries are checked by the C# compiler and allow for easy refactoring. However, it's not as heavy as LINQ to SQL or Entity Framework. There is no change-tracking, so you have to manage that yourself, but on the positive side you get more control and faster access to your data. In other words LINQ to DB is type-safe SQL . Visit our blog and see Github.io documentation for more details. Code examples and demos can be found here or in tests . T4 model generation help is here . Releases and Roadmap . How to help the project No, this is not the donate link. We do need something really more valuable - your time . If you really want to help us please read this post . Project Build Status Appveyor Travis master latest Feeds NuGet MyGet V2 https://www.myget.org/F/linq2db/api/v2 V3 https://www.myget.org/F/linq2db/api/v3/index.json Let's get started From NuGet : Install-Package linq2db - .NET & .NET Core Configuring connection strings .NET In your web.config or app.config make sure you have a connection string (check this file for supported providers): <connectionStrings> <add name=\"Northwind\" connectionString = \"Server=.\\;Database=Northwind;Trusted_Connection=True;Enlist=False;\" providerName = \"SqlServer\" /> </connectionStrings> .NET Core .Net Core does not support System.Configuration so to configure connection strings you should implement ILinqToDBSettings , for example: public class ConnectionStringSettings : IConnectionStringSettings { public string ConnectionString { get; set; } public string Name { get; set; } public string ProviderName { get; set; } public bool IsGlobal => false; } public class MySettings : ILinqToDBSettings { public IEnumerable<IDataProviderSettings> DataProviders => Enumerable.Empty<IDataProviderSettings>(); public string DefaultConfiguration => \"SqlServer\"; public string DefaultDataProvider => \"SqlServer\"; public IEnumerable<IConnectionStringSettings> ConnectionStrings { get { yield return new ConnectionStringSettings { Name = \"SqlServer\", ProviderName = \"SqlServer\", ConnectionString = @\"Server=.\\;Database=Northwind;Trusted_Connection=True;Enlist=False;\" }; } } } And later just set on program startup before the first query is done (Startup.cs for example): DataConnection.DefaultSettings = new MySettings(); You can also use same for regular .NET. Now let's create a POCO class Important: you also can generate those classes from your database using T4 templates . Demonstration video could be found here . using System; using LinqToDB.Mapping; [Table(Name = \"Products\")] public class Product { [PrimaryKey, Identity] public int ProductID { get; set; } [Column(Name = \"ProductName\"), NotNull] public string Name { get; set; } // ... other columns ... } At this point LINQ to DB doesn't know how to connect to our database or which POCOs go with what database. All this mapping is done through a DataConnection class: public class DbNorthwind : LinqToDB.Data.DataConnection { public DbNorthwind() : base(\"Northwind\") { } public ITable<Product> Product => GetTable<Product>(); public ITable<Category> Category => GetTable<Category>(); // ... other tables ... } We call the base constructor with the \"Northwind\" parameter. This parameter (called configuration name ) has to match the name=\"Northwind\" we defined above in our connection string. We also have to register our Product class we defined above to allow us to write LINQ queries. And now let's get some data: using LinqToDB; using LinqToDB.Common; public static List<Product> All() { using (var db = new DbNorthwind()) { var query = from p in db.Product where p.ProductID > 25 orderby p.Name descending select p; return query.ToList(); } } Make sure you always wrap your DataConnection class (in our case DbNorthwind ) in a using statement. This is required for proper resource management, like releasing the database connections back into the pool. More details Selecting Columns Most times we get the entire row from the database: from p in db.Product where p.ProductID == 5 select p; However, sometimes getting all the fields is too wasteful so we want only certain fields, but still use our POCOs; something that is challenging for libraries that rely on object tracking, like LINQ to SQL. from p in db.Product orderby p.Name descending select new Product { Name = p.Name }; Composing queries Rather than concatenating strings we can 'compose' LINQ expressions. In the example below the final SQL will be different if onlyActive is true or false, or if searchFor is not null. public static List<Product> All(bool onlyActive, string searchFor) { using (var db = new DbNorthwind()) { var products = from p in db.Product select p; if (onlyActive) { products = from p in products where !p.Discontinued select p; } if (searchFor != null) { products = from p in products where p.Name.Contains(searchFor) select p; } return products.ToList(); } } Paging A lot of times we need to write code that returns only a subset of the entire dataset. We expand on the previous example to show what a product search function could look like. Keep in mind that the code below will query the database twice. Once to find out the total number of records, something that is required by many paging controls, and once to return the actual data. public static List<Product> Search(string searchFor, int currentPage, int pageSize, out int totalRecords) { using (var db = new DbNorthwind()) { var products = from p in db.Product select p; if (searchFor != null) { products = from p in products where p.Name.Contains(searchFor) select p; } totalRecords = products.Count(); return products.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList(); } } Joins This assumes we added a Category class, just like we did with the Product class, defined all the fields, and registered it in our DbNorthwind data access class. We can now write an INNER JOIN query like this: from p in db.Product join c in db.Category on p.CategoryID equals c.CategoryID select new Product { Name = p.Name, Category = c }; and a LEFT JOIN query like this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product { Name = p.Name, Category = c }; More samples are here Creating your POCOs In the previous example we assign an entire Category object to our product, but what if we want all the fields in our Product class, but we don't want to specify every field by hand? Unfortunately, we cannot write this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product(c); The query above assumes the Product class has a constructor that takes in a Category object. The query above won't work, but we can work around that with the following query: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select Product.Build(p, c); For this to work, we need a function in the Product class that looks like this: public static Product Build(Product product, Category category) { if (product != null) { product.Category = category; } return product; } One caveat with this approach is that if you're using it with composed queries (see example above) the select Build part has to come only in the final select. Insert At some point we will need to add a new Product to the database. One way would be to call the Insert extension method found in the LinqToDB namespace; so make sure you import that. using (var db = new DbNorthwind()) { db.Insert(product); } This inserts all the columns from our Product class, but without retrieving the generated identity value. To do that we can use InsertWith*Identity methods, like this: using (var db = new DbNorthwind()) { product.ProductID = db.InsertWithInt32Identity(product); } There is also InsertOrReplace that updates a database record if it was found by primary key or adds it otherwise. If you need to insert only certain fields, or use values generated by the database, you could write: using (var db = new DbNorthwind()) { db.Product .Value(p => p.Name, product.Name) .Value(p => p.UnitPrice, 10.2m) .Value(p => p.Added, () => Sql.CurrentTimestamp) .Insert(); } Use of this method also allows us to build insert statements like this: using (var db = new DbNorthwind()) { var statement = db.Product .Value(p => p.Name, product.Name) .Value(p => p.UnitPrice, 10.2m); if (storeAdded) statement.Value(p => p.Added, () => Sql.CurrentTimestamp); statement.Insert(); } Update Updating records follows similar pattern to Insert. We have an extension method that updates all the columns in the database: using (var db = new DbNorthwind()) { db.Update(product); } And we also have a lower level update mechanism: using (var db = new DbNorthwind()) { db.Product .Where(p => p.ProductID == product.ProductID) .Set(p => p.Name, product.Name) .Set(p => p.UnitPrice, product.UnitPrice) .Update(); } Similarly, we can break an update query into multiple pieces if needed: using (var db = new DbNorthwind()) { var statement = db.Product .Where(p => p.ProductID == product.ProductID) .Set(p => p.Name, product.Name); if (updatePrice) statement = statement.Set(p => p.UnitPrice, product.UnitPrice); statement.Update(); } You're not limited to updating a single record. For example, we could discontinue all the products that are no longer in stock: using (var db = new DbNorthwind()) { db.Product .Where(p => p.UnitsInStock == 0) .Set(p => p.Discontinued, true) .Update(); } Delete Similar to how you update records, you can also delete records: using (var db = new DbNorthwind()) { db.Product .Where(p => p.Discontinued) .Delete(); } Bulk Copy Bulk copy feature supports the transfer of large amounts of data into a table from another data source. For faster data inserting DO NOT use a transaction. If you use a transaction an adhoc implementation of the bulk copy feature has been added in order to insert multiple lines at once. You get faster results then inserting lines one by one, but it's still slower than the database provider bulk copy. So, DO NOT use transactions whenever you can (Take care of unique constraints, primary keys, etc. since bulk copy ignores them at insertion). [Table(Name = \"ProductsTemp\")] public class ProductTemp { public int ProductID { get; set; } [Column(Name = \"ProductName\"), NotNull] public string Name { get; set; } // ... other columns ... } list = List<ProductTemp> using (var db = new DbNorthwind()) { db.BulkCopy(list); } Transactions Using database transactions is easy. All you have to do is call BeginTransaction() on your DataConnection, run one or more queries, and then commit the changes by calling CommitTransaction(). If something happened and you need to roll back your changes you can either call RollbackTransaction() or throw an exception. using (var db = new DbNorthwind()) { db.BeginTransaction(); // ... select / insert / update / delete ... if (somethingIsNotRight) { db.RollbackTransaction(); } else { db.CommitTransaction(); } } Also, you can use .NET built-in TransactionScope class: // don't forget that isolation level is serializable by default using (var transaction = new TransactionScope()) { using (var db = new DbNorthwind()) { ... } transaction.Complete(); } Merge Here you can read about MERGE support. Window (Analytic) Functions Here you can read about Window (Analytic) Functions support. MiniProfiler If you would like to use MiniProfiler from StackExchange you'd need to wrap ProfiledDbConnection around our regular DataConnection. public class DbDataContext : DataConnection { #if !DEBUG public DbDataContext() : base(\"Northwind\") { } #else public DbDataContext() : base(GetDataProvider(), GetConnection()) { } private static IDataProvider GetDataProvider() { // you can move this line to other place, but it should be // allways set before LINQ to DB provider instance creation LinqToDB.Common.Configuration.AvoidSpecificDataProviderAPI = true; return new SqlServerDataProvider(\"\", SqlServerVersion.v2012); } private static IDbConnection GetConnection() { var dbConnection = new SqlConnection(@\"Server=.\\SQL;Database=Northwind;Trusted_Connection=True;Enlist=False;\"); return new StackExchange.Profiling.Data.ProfiledDbConnection(dbConnection, MiniProfiler.Current); } #endif } This assumes that you only want to use MiniProfiler while in DEBUG mode and that you are using SQL Server for your database. If you're using a different database you would need to change GetDataProvider() to return the appropriate IDataProvider. For example for MySql you would use: private static IDataProvider GetDataProvider() { return new LinqToDB.DataProvider.MySql.MySqlDataProvider(); }"
  },
  "articles/README.html": {
    "href": "articles/README.html",
    "title": "LINQ to DB | Linq To DB (aka linq2db)",
    "keywords": "LINQ to DB LINQ to DB is the fastest LINQ database access library offering a simple, light, fast, and type-safe layer between your POCO objects and your database. Architecturally it is one step above micro-ORMs like Dapper, Massive, or PetaPoco, in that you work with LINQ expressions, not with magic strings, while maintaining a thin abstraction layer between your code and the database. Your queries are checked by the C# compiler and allow for easy refactoring. However, it's not as heavy as LINQ to SQL or Entity Framework. There is no change-tracking, so you have to manage that yourself, but on the positive side you get more control and faster access to your data. In other words LINQ to DB is type-safe SQL . Visit our blog and see Github.io documentation for more details. Code examples and demos can be found here or in tests . T4 model generation help is here . Releases and Roadmap . How to help the project No, this is not the donate link. We do need something really more valuable - your time . If you really want to help us please read this post . Project Build Status Appveyor Travis master latest Feeds NuGet MyGet V2 https://www.myget.org/F/linq2db/api/v2 V3 https://www.myget.org/F/linq2db/api/v3/index.json Let's get started From NuGet : Install-Package linq2db - .NET & .NET Core Configuring connection strings .NET In your web.config or app.config make sure you have a connection string (check this file for supported providers): <connectionStrings> <add name=\"Northwind\" connectionString = \"Server=.\\;Database=Northwind;Trusted_Connection=True;Enlist=False;\" providerName = \"SqlServer\" /> </connectionStrings> .NET Core .Net Core does not support System.Configuration so to configure connection strings you should implement ILinqToDBSettings , for example: public class ConnectionStringSettings : IConnectionStringSettings { public string ConnectionString { get; set; } public string Name { get; set; } public string ProviderName { get; set; } public bool IsGlobal => false; } public class MySettings : ILinqToDBSettings { public IEnumerable<IDataProviderSettings> DataProviders => Enumerable.Empty<IDataProviderSettings>(); public string DefaultConfiguration => \"SqlServer\"; public string DefaultDataProvider => \"SqlServer\"; public IEnumerable<IConnectionStringSettings> ConnectionStrings { get { yield return new ConnectionStringSettings { Name = \"SqlServer\", ProviderName = \"SqlServer\", ConnectionString = @\"Server=.\\;Database=Northwind;Trusted_Connection=True;Enlist=False;\" }; } } } And later just set on program startup before the first query is done (Startup.cs for example): DataConnection.DefaultSettings = new MySettings(); You can also use same for regular .NET. Now let's create a POCO class Important: you also can generate those classes from your database using T4 templates . Demonstration video could be found here . using System; using LinqToDB.Mapping; [Table(Name = \"Products\")] public class Product { [PrimaryKey, Identity] public int ProductID { get; set; } [Column(Name = \"ProductName\"), NotNull] public string Name { get; set; } // ... other columns ... } At this point LINQ to DB doesn't know how to connect to our database or which POCOs go with what database. All this mapping is done through a DataConnection class: public class DbNorthwind : LinqToDB.Data.DataConnection { public DbNorthwind() : base(\"Northwind\") { } public ITable<Product> Product => GetTable<Product>(); public ITable<Category> Category => GetTable<Category>(); // ... other tables ... } We call the base constructor with the \"Northwind\" parameter. This parameter (called configuration name ) has to match the name=\"Northwind\" we defined above in our connection string. We also have to register our Product class we defined above to allow us to write LINQ queries. And now let's get some data: using LinqToDB; using LinqToDB.Common; public static List<Product> All() { using (var db = new DbNorthwind()) { var query = from p in db.Product where p.ProductID > 25 orderby p.Name descending select p; return query.ToList(); } } Make sure you always wrap your DataConnection class (in our case DbNorthwind ) in a using statement. This is required for proper resource management, like releasing the database connections back into the pool. More details Selecting Columns Most times we get the entire row from the database: from p in db.Product where p.ProductID == 5 select p; However, sometimes getting all the fields is too wasteful so we want only certain fields, but still use our POCOs; something that is challenging for libraries that rely on object tracking, like LINQ to SQL. from p in db.Product orderby p.Name descending select new Product { Name = p.Name }; Composing queries Rather than concatenating strings we can 'compose' LINQ expressions. In the example below the final SQL will be different if onlyActive is true or false, or if searchFor is not null. public static List<Product> All(bool onlyActive, string searchFor) { using (var db = new DbNorthwind()) { var products = from p in db.Product select p; if (onlyActive) { products = from p in products where !p.Discontinued select p; } if (searchFor != null) { products = from p in products where p.Name.Contains(searchFor) select p; } return products.ToList(); } } Paging A lot of times we need to write code that returns only a subset of the entire dataset. We expand on the previous example to show what a product search function could look like. Keep in mind that the code below will query the database twice. Once to find out the total number of records, something that is required by many paging controls, and once to return the actual data. public static List<Product> Search(string searchFor, int currentPage, int pageSize, out int totalRecords) { using (var db = new DbNorthwind()) { var products = from p in db.Product select p; if (searchFor != null) { products = from p in products where p.Name.Contains(searchFor) select p; } totalRecords = products.Count(); return products.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList(); } } Joins This assumes we added a Category class, just like we did with the Product class, defined all the fields, and registered it in our DbNorthwind data access class. We can now write an INNER JOIN query like this: from p in db.Product join c in db.Category on p.CategoryID equals c.CategoryID select new Product { Name = p.Name, Category = c }; and a LEFT JOIN query like this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product { Name = p.Name, Category = c }; More samples are here Creating your POCOs In the previous example we assign an entire Category object to our product, but what if we want all the fields in our Product class, but we don't want to specify every field by hand? Unfortunately, we cannot write this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product(c); The query above assumes the Product class has a constructor that takes in a Category object. The query above won't work, but we can work around that with the following query: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select Product.Build(p, c); For this to work, we need a function in the Product class that looks like this: public static Product Build(Product product, Category category) { if (product != null) { product.Category = category; } return product; } One caveat with this approach is that if you're using it with composed queries (see example above) the select Build part has to come only in the final select. Insert At some point we will need to add a new Product to the database. One way would be to call the Insert extension method found in the LinqToDB namespace; so make sure you import that. using (var db = new DbNorthwind()) { db.Insert(product); } This inserts all the columns from our Product class, but without retrieving the generated identity value. To do that we can use InsertWith*Identity methods, like this: using (var db = new DbNorthwind()) { product.ProductID = db.InsertWithInt32Identity(product); } There is also InsertOrReplace that updates a database record if it was found by primary key or adds it otherwise. If you need to insert only certain fields, or use values generated by the database, you could write: using (var db = new DbNorthwind()) { db.Product .Value(p => p.Name, product.Name) .Value(p => p.UnitPrice, 10.2m) .Value(p => p.Added, () => Sql.CurrentTimestamp) .Insert(); } Use of this method also allows us to build insert statements like this: using (var db = new DbNorthwind()) { var statement = db.Product .Value(p => p.Name, product.Name) .Value(p => p.UnitPrice, 10.2m); if (storeAdded) statement.Value(p => p.Added, () => Sql.CurrentTimestamp); statement.Insert(); } Update Updating records follows similar pattern to Insert. We have an extension method that updates all the columns in the database: using (var db = new DbNorthwind()) { db.Update(product); } And we also have a lower level update mechanism: using (var db = new DbNorthwind()) { db.Product .Where(p => p.ProductID == product.ProductID) .Set(p => p.Name, product.Name) .Set(p => p.UnitPrice, product.UnitPrice) .Update(); } Similarly, we can break an update query into multiple pieces if needed: using (var db = new DbNorthwind()) { var statement = db.Product .Where(p => p.ProductID == product.ProductID) .Set(p => p.Name, product.Name); if (updatePrice) statement = statement.Set(p => p.UnitPrice, product.UnitPrice); statement.Update(); } You're not limited to updating a single record. For example, we could discontinue all the products that are no longer in stock: using (var db = new DbNorthwind()) { db.Product .Where(p => p.UnitsInStock == 0) .Set(p => p.Discontinued, true) .Update(); } Delete Similar to how you update records, you can also delete records: using (var db = new DbNorthwind()) { db.Product .Where(p => p.Discontinued) .Delete(); } Bulk Copy Bulk copy feature supports the transfer of large amounts of data into a table from another data source. For faster data inserting DO NOT use a transaction. If you use a transaction an adhoc implementation of the bulk copy feature has been added in order to insert multiple lines at once. You get faster results then inserting lines one by one, but it's still slower than the database provider bulk copy. So, DO NOT use transactions whenever you can (Take care of unique constraints, primary keys, etc. since bulk copy ignores them at insertion). [Table(Name = \"ProductsTemp\")] public class ProductTemp { public int ProductID { get; set; } [Column(Name = \"ProductName\"), NotNull] public string Name { get; set; } // ... other columns ... } list = List<ProductTemp> using (var db = new DbNorthwind()) { db.BulkCopy(list); } Transactions Using database transactions is easy. All you have to do is call BeginTransaction() on your DataConnection, run one or more queries, and then commit the changes by calling CommitTransaction(). If something happened and you need to roll back your changes you can either call RollbackTransaction() or throw an exception. using (var db = new DbNorthwind()) { db.BeginTransaction(); // ... select / insert / update / delete ... if (somethingIsNotRight) { db.RollbackTransaction(); } else { db.CommitTransaction(); } } Also, you can use .NET built-in TransactionScope class: // don't forget that isolation level is serializable by default using (var transaction = new TransactionScope()) { using (var db = new DbNorthwind()) { ... } transaction.Complete(); } Merge Here you can read about MERGE support. Window (Analytic) Functions Here you can read about Window (Analytic) Functions support. MiniProfiler If you would like to use MiniProfiler from StackExchange you'd need to wrap ProfiledDbConnection around our regular DataConnection. public class DbDataContext : DataConnection { #if !DEBUG public DbDataContext() : base(\"Northwind\") { } #else public DbDataContext() : base(GetDataProvider(), GetConnection()) { } private static IDataProvider GetDataProvider() { // you can move this line to other place, but it should be // allways set before LINQ to DB provider instance creation LinqToDB.Common.Configuration.AvoidSpecificDataProviderAPI = true; return new SqlServerDataProvider(\"\", SqlServerVersion.v2012); } private static IDbConnection GetConnection() { var dbConnection = new SqlConnection(@\"Server=.\\SQL;Database=Northwind;Trusted_Connection=True;Enlist=False;\"); return new StackExchange.Profiling.Data.ProfiledDbConnection(dbConnection, MiniProfiler.Current); } #endif } This assumes that you only want to use MiniProfiler while in DEBUG mode and that you are using SQL Server for your database. If you're using a different database you would need to change GetDataProvider() to return the appropriate IDataProvider. For example for MySql you would use: private static IDataProvider GetDataProvider() { return new LinqToDB.DataProvider.MySql.MySqlDataProvider(); }"
  },
  "articles/CONTRIBUTING.html": {
    "href": "articles/CONTRIBUTING.html",
    "title": "Contributing guide | Linq To DB (aka linq2db)",
    "keywords": "Contributing guide Development rules and regulations, code style Follow this document Project structure description Solution and folder structure Folder Description .\\ Root folder .\\Build Various files for AppVeyor builds and common project settings .\\Data Contains test databases creation scripts and database files .\\Doc DocFX documentation files .\\NuGet LINQ to DB NuGet packages build files, readme.txt .\\Redist Redistributable binaries for providers unavailable officially at NuGet .\\Source\\LinqToDB LINQ to DB source code .\\Source\\LinqToDB.Templates LINQ to DB t4models source code .\\Tests Unit tests .\\Tests\\Base LINQ to DB testing framework .\\Tests\\FSharp F# models and tests .\\Tests\\IBM.Core Tests for IBM.Data.DB2.Core provider .\\Tests\\Linq Main project for LINQ to DB unit tests .\\Tests\\Model Model classes for tests .\\Tests\\T4.Linq Models for test databases, generated using t4models .\\Tests\\T4.Model T4Models tests .\\Tests\\T4.Wpf T4Models NotifyPropertyChanged template test project .\\Tests\\TestApp SQL Server spatial types test application .\\Tests\\Tests.Benchmark Benchmark tests .\\Tests\\VisualBasic Visual Basic models and tests Solutions: .\\linq2db.sln - VS2017 solution Projects: Project .NET 4.5 .NET 4.5.2 .NET 4.6 .NET 4.6.2 .NET Standard 1.6 .NET Standard 2.0 .NET Core 1.0 .NET Core 2.0 .\\Source\\LinqToDB\\LinqToDB.csproj √ √ √ √ .\\Tests\\Linq\\Tests.Base.csproj √ √ √ .\\Tests\\IBM.Core\\Tests.IBM.Core.csproj √ √ .\\Tests\\Linq\\Tests.csproj √ √ √ .\\Tests\\FSharp\\Tests.FSharp.fsproj √ √ √ .\\Tests\\Model\\Tests.Model.csproj √ √ .\\Tests\\T4.Linq\\Tests.T4.Linq.csproj √ √ .\\Tests\\T4.Model\\Tests.T4.Model.csproj √ .\\Tests\\T4.Wpf\\Tests.T4.Wpf.csproj √ .\\Tests\\TestApp\\TestApp.csproj √ .\\Tests\\Tests.Benchmark\\Tests.Benchmark.csproj √ .\\Tests\\VisualBasic\\Tests.VisualBasic.vbproj √ √ Building You can use the solution to build and run tests. Also you can build whole solution or library using the following batch files: run .\\Build.cmd - builds all the projects in the solution for Debug, Release, and AppVeyor configurations run .\\Source\\LinqToDB\\Compile.cmd - builds LinqToDB projects for Debug and Release configurations Different platforms support Because of compiling for different platforms we do use: Conditional compilation. Different projects and configurations define compilation symbols: NET45 - .NET 4.5 compatibility level NETSTANDARD1_6 - .NET Standard 1.6 compatibility level NETSTANDARD2_0 - .NET Standard 2.0 compatibility level Implementing missing classes and enums. There are some under .\\Source\\LinqToDB\\Compatibility folder. Branches master - current stable branch release - branch with the latest release release1 - branch for critical fixes for version 1.xx.yy version1 - stable branch for version 1.xx.yy Run tests NUnit3 is used as unit testing framework. Most tests are run for all supported databases, and written in same pattern: [TestFixture] public class Test: TestBase // TestBase - base class, provides base methods and object data sources { // DataContextSourceAttribute - implements NUnit ITestBuilder and provides context values to test // TestAttribute - not required for nunit test runner, but needed for Resharper test runner [Test, DataContextSource] public void Test(string context) { // TestBase.GetDataContext - creates new IDataContext, supports creating WCF client and server using(var db = GetDataContext(context)) { // Here is the most interesting // this.Person - list of persons, corresponding Person table in database (derived from TestBase) // db.Person - database table // So test checks that LINQ to Objects query produces the same result as executed database query AreEqual(this.Person.Where(_ => _.Name == \"John\"), db.Person.Where(_ => _.Name == \"John\")); } } } Configure data providers for tests DataContextSourceAttribute generates tests for each configured data provider, configuration is taken from .\\Tests\\Linq\\DataProviders.json and .\\Tests\\Linq\\UserDataProviders.json if it exists. Linq\\UserDataProviders.json is used to specify user-specific settings such as connections strings to test databases and list of tested providers. The [User]DataProviders.json is a regular JSON file: UserDataProviders.json example (with description) { // .net framework 4.5 test configuration \"NET45\" : { // base configuration to inherit settings from // Inheritance rules: // - DefaultConfiguration, TraceLevel, Providers - use value from base configuration only if it is not defined in current configuration // - Connections - merge current and base connection strings \"BasedOn\" : \"LocalConnectionStrings\", // default provider, used as a source of reference data // LINQ to DB uses SQLite for it and you hardly need to change it \"DefaultConfiguration\" : \"SQLite.Classic\", // logging level // Supported values: Off, Error, Warning, Info, Verbose // Default level: Info \"TraceLevel\" : \"Error\", // list of database providers, enabled for current test configuration \"Providers\" : [ \"Access\", \"SqlCe\", \"SQLite.Classic\", \"SQLite.MS\", \"Northwind.SQLite\", \"Northwind.SQLite.MS\", \"SqlServer\", \"SqlServer.2014\", \"SqlServer.2012\", \"SqlServer.2012.1\", \"SqlServer.2008\", \"SqlServer.2008.1\", \"SqlServer.2005\", \"SqlServer.2005.1\", \"SqlAzure.2012\", \"DB2\", \"Firebird\", \"Informix\", \"MySql\", \"MariaDB\", \"Oracle.Native\", \"Oracle.Managed\", \"PostgreSQL\", \"Sybase\", \"Northwind\", \"TestNoopProvider\" ], // list of test skip categories, disabled for current test configuration // to set test skip category, use SkipCategoryAttribute on test method, class or whole assembly \"Skip\" : [ \"Access.12\" ] }, // .net core 1.0 test configuration \"CORE1\" : { \"BasedOn\" : \"LocalConnectionStrings\", \"Providers\" : [ \"SQLite.MS\", \"Northwind.SQLite.MS\", \"SqlServer\", \"SqlServer.2014\", \"SqlServer.2012\", \"SqlServer.2012.1\", \"SqlServer.2008\", \"SqlServer.2008.1\", \"SqlServer.2005\", \"SqlServer.2005.1\", \"SqlAzure.2012\", \"Firebird\", \"MySql\", \"MariaDB\", \"PostgreSQL\", \"Northwind\", \"TestNoopProvider\" ] }, // .net core 2.0 test configuration \"CORE2\" : { \"BasedOn\" : \"LocalConnectionStrings\", \"Providers\" : [ \"SQLite.MS\", \"Northwind.SQLite.MS\", \"SqlServer\", \"SqlServer.2014\", \"SqlServer.2012\", \"SqlServer.2012.1\", \"SqlServer.2008\", \"SqlServer.2008.1\", \"SqlServer.2005\", \"SqlServer.2005.1\", \"SqlAzure.2012\", \"Firebird\", \"MySql\", \"MariaDB\", \"PostgreSQL\", \"Northwind\", \"TestNoopProvider\" ] }, // list of connection strings for all providers \"LocalConnectionStrings\": { \"BasedOn\" : \"CommonConnectionStrings\", \"Connections\" : { // override connection string for SqlAzure.2012 provider // all other providers will use default inherited connection strings from CommonConnectionStrings configuration \"SqlAzure.2012\" : { \"Provider\" : \"System.Data.SqlClient\", \"ConnectionString\" : \"Server=tcp:xxxxxxxxx.database.windows.net,1433;Database=TestData;User ID=TestUser@zzzzzzzzz;Password=TestPassword;Trusted_Connection=False;Encrypt=True;\" } } } } To define your own configurations DO NOT EDIT DataProviders.json - create .\\Tests\\Linq\\UserDataProviders.json and define needed configurations. Right now tests execution depends on _CreateData.* tests executed first. Those tests recreate test databases and populate them with test data, so if you are going to run one test be sure to run _CreateData before it manually. Also - if your test changes database data, be sure to revert those changes (!) to avoid side effects for other tests. Continuous Integration We do run builds and tests with: AppVeyor (Windows) appveyor.yml . Makes build and runs tests for: .Net 4.5.2: NET45.AppVeyor configuration . Full set of tests are done. .Net Core 1.0: CORE1.AppVeyor configuration . Only _Create tests are done (smoke testing). .Net Core 2.0: CORE2.AppVeyor configuration . Only _Create tests are done (smoke testing). DocFx - to build documentation . Deploy is done only for release branch. Travis (Linux) .travis.yml . Makes build and runs tests for: .Net Core 2.0: CORE2.Travis configuration . Full set of tests are done. CI builds are done only for next branches: master /version.*/ (regex) /release.*/ (regex) /dev.*/ (regex) Skip CI build If you want to skip building commit by CI (for example you have changed *.md files only) begin commit comment with [ci skip] . Publishing packages Release candidate packages are published by AppVeyor to MyGet.org for each successful build of master branch. Release packages are published by AppVeyor to NuGet.org for each successful build of release and release1 branch. Building releases Update Release Notes and create empty entry for vNext release Create PR from master to release branch, in comments add @testers to notify all testers that we are ready to release Wait few days for feedback from testers and approval from contributors Merge PR Tag release Update versions in master branch (this will lead to publish all next master builds as new version RC): in .\\appveyor.yml set assemblyVersion parameter in *.nuspec files update linq2db dependency version in issue template update default linq2db version Process In general you should follow simple rules: Development rules and regulations, code style Do not add new features without tests Avoid direct pushes to master and release branches To fix some issue or implement new feature create new branch and make pull request after you are ready to merge. Merge your PR only after contributor's review. If you are going to implement any big feature you may want other contributors to participate (coding, code review, feature discuss and so on), so to do it: Create new PR with [WIP] prefix (Work In Process) After you are ready to merge remove the prefix & assign contributors as reviewers If you do have write access, it is recommended to use central repository (not forks). Why - simple, it would allow other teammates to help you in developing (if needed). Certainly you are free to use fork if it is more convenient to you Please avoid adding new public classes, properties, methods without XML doc Read issues and help users Do not EF :)"
  },
  "articles/sql/merge/Merge-API.html": {
    "href": "articles/sql/merge/Merge-API.html",
    "title": "Merge API | Linq To DB (aka linq2db)",
    "keywords": "Merge API This API available since linq2db 1.9.0. It superseeds previous version of API with very limited functionality. For migration from old API check link below. Supported Databases Microsoft SQL Server IBM DB2 Firebird Oracle Database Sybase/SAP ASE IBM Informix SAP HANA 2 Related Pages Background API Description Migration from old API guide Introduction Merge is an atomic operation to update table (target) content using other table (source). Merge API provides methods to build Merge command and execute it. Command could have following elements (availability depends on database engine, see [[support table|Merge-API-:-Background-Information-and-Providers-Support]] for more details): target. Required element. Could be a table or updateable view source. Required element. Could be a table, query or client-side collection match/on rule. Optional element. Defines rule to match target and source records. By default we match target and source by primary key columns ordered list of operations to perform for each match. At least one operation required operation condition. Optional element. Specify additional condition for operation execution. Merge Operations Merge operations could be splitted into three groups: Matched operations. Operations, executed for records, present in both target and source according to match rule. Not matched operations. Operations, executed for records, present only in source according to match rule. Not matched by source. Operations, executed for records, present only in target according to match rule. Each group of operations work with their own set of source and target records and could contain more than one operation. In this case each operation must have operation condition except last one, which could omit it and be applied to all remaining records. Operations within group must be ordered properly. Example You want to do following: update status of all orders in AwaitingConfirmation status to Confirmed and delete all orders with amount equal to 0 . Your merge operation will look like: db.Orders // start merge command .Merge() // use the same table for source .UsingTarget() // match on primary key columns .OnTargetKey() // first delete all records with 0 amount // we also can use source in condition because they reference the same record in our case .DeleteWhenMatchedAnd((target, source) => target.amount == 0) // for records, not handled by previous command, update records in AwaitingConfirmation status .UpdateWhenMatchedAnd( (target, source) => target.status == Status.AwaitingConfirmation, (target, source) => new Order() { status = Status.Confirmed }) // send merge command to database .Merge(); In example above, delete and update operations belong to the same match group so their order is important. If you will put Update before Delete your merge command will do something else: it will update all orders in AwaitingConfirmation status and for remaining orders will remove those with 0 amount. After merge execution you could receive confirmed orders with 0 amount in Orders table. Matched operations Because those operations executed for records, present in both target and source, they have access to both records. There are two operations in this group (plus one non-standard operation for Oracle): Update operation. This operation allows to update target record fields. Delete operation. This operation allows to delete target record. Update Then Delete operation. This is Oracle-only operation, which updates target record and then delete updated records (usually using delete predicate). Not matched operations Those operations executed for records, present only in source table, so they could access only target table properties. This group contains only one operation - Insert operation, which adds new record to target table. Not matched by source operations This is SQL Server-only extension, that allows to perform operations for records, present only in target table. This group contains same operations as Matched group with one distinction - operations could access only target record: Update By Source operation. Allows to update target table record. Delete By Source operation. Allows to delete target table record."
  },
  "articles/sql/merge/Merge-API-Migration.html": {
    "href": "articles/sql/merge/Merge-API-Migration.html",
    "title": "Migrating from old Merge API to new | Linq To DB (aka linq2db)",
    "keywords": "Migrating from old Merge API to new This page contains information how to replace old Merge API calls with new API calls. Breaking changes Old API consider empty source list as noop operation and returns 0 without request to database. New version allways send command to database because: it will help to find errors in your command it will fix by source operations for SQL Server, which make sense for empty source Exception: Oracle, Sybase and SAP HANA implementations still use noop approach due to too aggressive type checking. Code migration Old API has 4x2 Merge methods. One method accepts target table as first parameter, another - DataConnection instance. New API works only with tables as target so you will need to get table from data connection using following code: dataConnection.GetTable<TTable>() If you used tableName , databaseName or schemaName parameters, replace them with follwing calls on table: db.GetTable<T>() .TableName(tableName) .DatabaseName(databaseName) .SchemaName(schemaName); Method 1 Parameters tableName , databaseName and schemaName omitted. // Old API int Merge<T>(this DataConnection dataConnection, IQueryable<T> source, Expression<Func<T,bool>> predicate); int Merge<T>(this ITable<T> table, IQueryable<T> source, Expression<Func<T,bool>> predicate); // New API // You can (and should) remove .AsEnumerable() - it was added to copy old behavior db.GetTable<T>() .Merge() .Using(source.Where(predicate).AsEnumerable()) .OnTargetKey() .UpdateWhenMatched() .InsertWhenNotMatched() .DeleteWhenNotMatchedBySourceAnd(predicate) .Merge(); Method 2 Parameters tableName , databaseName and schemaName omitted. // Old API int Merge<T>(this DataConnection dataConnection, Expression<Func<T,bool>> predicate, IEnumerable<T> source) int Merge<T>(this ITable<T> table, Expression<Func<T,bool>> predicate, IEnumerable<T> source); // New API db.GetTable<T>() .Merge() .Using(source) .OnTatgetKey() .UpdateWhenMatched() .InsertWhenNotMatched() .DeleteWhenNotMatchedBySourceAnd(predicate) .Merge(); Method 3 Parameters tableName , databaseName and schemaName omitted. // Old API int Merge<T>(this DataConnection dataConnection, bool delete, IEnumerable<T> source); int Merge<T>(this ITable<T> table, bool delete, IEnumerable<T> source); // New API // (delete = true) db.GetTable<T>() .Merge() .Using(source) .OnTargetKey() .UpdateWhenMatched() .InsertWhenNotMatched() .DeleteWhenNotMatchedBySource() .Merge(); // (delete = false) db.GetTable<T>() .Merge() .Using(source) .OnTargetKey() .UpdateWhenMatched() .InsertWhenNotMatched() .Merge(); Method 4 Parameters tableName , databaseName and schemaName omitted. // Old API int Merge<T>(this DataConnection dataConnection, IEnumerable<T> source); int Merge<T>(this ITable<T> table, IEnumerable<T> source); // New API db.GetTable<T>() .Merge() .Using(source) .OnTargetKey() .UpdateWhenMatched() .InsertWhenNotMatched() .Merge();"
  },
  "articles/sql/merge/Merge-API-Description.html": {
    "href": "articles/sql/merge/Merge-API-Description.html",
    "title": "Merge API Description | Linq To DB (aka linq2db)",
    "keywords": "Merge API Description Merge API contains four groups of methods: Merge , MergeInto , Using , UsingTarget methods to configure merge command's source and target On , OnTargetKey methods to configure merge command's match condition InsertWhenNotMatched* , UpdateWhenMatched* , DeleteWhenMatched* , UpdateWhenNotMatchedBySource* , DeleteWhenNotMatchedBySource* , UpdateWhenMatched*ThenDelete methods to add operations to merge command Merge and MergeAsync methods to execute command against database To create and execute merge command you should first configure target, source and match conditions. Then you must add at least one operation to merge builder. After that you should call Merge method to execute command. Note that all operation methods returns new merge builder, so code like that: // WRONG var db.Table.Merge().UsingTarget().OnTargetKey().DeleteWhenMatched(); // wrong, it will not modify merge object, but will create new one merge.InsertWhenNotMatched(); // execute merge with only one command - Delete merge.Merge(); // CORRECT db.Table.Merge().UsingTarget().OnTargetKey().DeleteWhenMatched().InsertWhenNotMatched().Merge(); General notes on API All API parameters are required and cannot be null. If you what to skip some parameter, check for a method without it. If there is no such method - this parameter cannot be ommited. Validation Before command execution, linq2db will try to validate your command and throw LinqToDBException if it detects use of feature, unsupported by provider or general misconfiguration. It will not detect all issues, but will greatly reduce number of errors from user side. Also validation error contains message that points to error in your command. Database engine errors sometimes require research to understand what they mean in current specific context. Operations API Merge operations will be added to generated query in the same order as they were called on command builder, because it is possible to specify several operations that could match the same record using operation conditions. In such cases database engine choose first matching operation as a winner. Also dont forget to check what your database engine could [[support|Merge-API-:-Background-Information-and-Providers-Support]] to understand what API you can use. Methods Target and Source Configuration Methods Match Configuration Methods InsertWhenNotMatched* UpdateWhenMatched* DeleteWhenMatched* UpdateWhenNotMatchedBySource* DeleteWhenNotMatchedBySource* UpdateWhenMatched*ThenDelete Merge and MergeAsync Target and Source Configuration Methods // starts merge command and use table parameter as target IMergeableUsing<TTarget> Merge<TTarget>(this ITable<TTarget> target); // adds source query to merge, started by Merge() method IMergeableOn<TTarget, TSource> Using<TTarget, TSource>(this IMergeableUsing<TTarget> merge, IQueryable<TSource> source); // adds source collection to merge, started by Merge() method IMergeableOn<TTarget, TSource> Using<TTarget, TSource>(this IMergeableUsing<TTarget> merge, IEnumerable<TSource> source); // adds target as source to merge, started by Merge() method IMergeableOn<TTarget, TTarget> UsingTarget<TTarget>(this IMergeableUsing<TTarget> merge); // starts merge command using source query and target table IMergeableOn<TTarget, TSource> MergeInto<TTarget, TSource>(this IQueryable<TSource> source, ITable<TTarget> target); Those methods allow you to create merge builder and specify source and target. To do it you can use: MergeInto method, which setups both source and target Merge + Using `UsingTarget` method sequence, where target and source specified by separate method. Methods could accept following parameters: target Target table, that should be modified by merge command. source Source data set, that should be merged into target table. Could be a client-side collection, table or query. Match Configuration Methods // adds match condition using specified key from target and source record // Examples: // merge.On(target => new { target.Field1, target.Field2 }, source => new { source.Field1, source.Field2 }) // merge.On(target => target.Id, source => source.Id) IMergeable<TTarget, TSource> On<TTarget, TSource, TKey>(this IMergeableOn<TTarget, TSource> merge, Expression<Func<TTarget, TKey>> targetKey, Expression<Func<TSource, TKey>> sourceKey); // add match condition using boolean expression over target and source record IMergeable<TTarget, TSource> On<TTarget, TSource>(this IMergeableOn<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> matchCondition); // adds match condition using primary key columns IMergeable<TTarget, TTarget> OnTargetKey<TTarget>(this IMergeableOn<TTarget, TTarget> merge); On `OnTargetKey` adds match condition to merge command builder. Notes matchCondition should be used only for rows matching. Any source filters must be applied to source directly to avoid database engine-specific side-effects (e.g. see Oracle limitations). matchCondition or match using keys shouldn't match more than one source record to one target record. InsertWhenNotMatched IMergeable<TTarget, TTarget> InsertWhenNotMatched<TTarget>(this IMergeableSource<TTarget, TTarget> merge); IMergeable<TTarget, TTarget> InsertWhenNotMatchedAnd<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, bool>> searchCondition); IMergeable<TTarget, TSource> InsertWhenNotMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TSource, TTarget>> setter); IMergeable<TTarget, TSource> InsertWhenNotMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TSource, bool>> searchCondition, Expression<Func<TSource, TTarget>> setter) InsertWhenNotMatched takes insert operation options and returns new merge command builder with new operation. InsertWhenNotMatchedAnd method additionally takes operation condition expression. merge Merge command builder. Method will return new builder with new insert operation. It will not modify original object. searchCondition Operation execution condition. Operation without condition will be applied to all matching records. If there are multiple operations within same group - only last one allowed to have no condition. WhenNotMatched match group could contain only Insert operations. setter Record creation expression. Defines set ex InsertWhenNotMatched takes insert operation options and returns new merge command builder with new operation. InsertWhenNotMatchedAnd method additionally takes operation condition expression. pressions for values in new record. For methods without this parameters source record inserted into target (except fields marked with SkipOnInsert attribute or IsIdentity for provider without identity insert support). db.Table .Merge() .Using(source) .OnTargetKey() .InsertWhenNotMatched(source => new TargetRecord() { Field1 = 10, Field2 = source.Field2, Field3 = source.Field1 + source.Field2 }) .Merge(); UpdateWhenMatched IMergeable<TTarget, TTarget> UpdateWhenMatched<TTarget>(this IMergeableSource<TTarget, TTarget> merge); IMergeable<TTarget, TTarget> UpdateWhenMatchedAnd<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> searchCondition) IMergeable<TTarget, TSource> UpdateWhenMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, TTarget>> setter); IMergeable<TTarget, TSource> UpdateWhenMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition, Expression<Func<TTarget, TSource, TTarget>> setter); UpdateWhenMatched takes update operation options and returns new merge command builder with new operation. UpdateWhenMatchedAnd method additionally takes operation condition expression. merge Merge command builder. UpdateWhenMatched method will return new builder with new update operation. It will not modify original object. searchCondition Operation execution condition. Operation without condition will be applied to all matching records. If there are multiple operations within same group - only last one could omit condition. WhenMatched match group could contain only Update and Delete operations. setter Record update expression. Defines update expressions for values in target record. When not specified, source record values used to update target record (except fields marked with SkipOnUpdate or IsIdentity attributes). db.Table .Merge() .Using(source) .OnTargetKey() .UpdateWhenMatched((target, source) => new TargetRecord() { Field1 = target.Field10, Field2 = source.Field2, Field3 = source.Field1 + target.Field2 }) .Merge(); DeleteWhenMatched IMergeable<TTarget, TSource> DeleteWhenMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge); IMergeable<TTarget, TSource> DeleteWhenMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition); DeleteWhenMatched takes delete operation options and returns new merge command builder with new operation. merge Merge command builder. DeleteWhenMatched method will return new builder with new delete operation. It will not modify original object. searchCondition Operation execution condition. Operation without condition will be applied to all matching records. If there are multiple operations within same match group - only last one could omit condition. WhenMatched match group could contain only Update and Delete operations. UpdateWhenNotMatchedBySource IMergeable<TTarget, TSource> UpdateWhenNotMatchedBySource<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TTarget>> setter); IMergeable<TTarget, TSource> UpdateWhenNotMatchedBySourceAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, bool>> searchCondition, Expression<Func<TTarget, TTarget>> setter); IMPORTANT: This method could be used only with SQL Server. UpdateWhenNotMatchedBySource takes update operation options and returns new merge command builder with new operation. merge Merge command builder. UpdateWhenNotMatchedBySource method will return new builder with new update operation. It will not modify original object. searchCondition Operation execution condition. Operation without condition will be applied to all matching records. If there are multiple operations within same group - only last one could omit condition. WhenNotMatchedBySource match group could contain only UpdateWhenNotMatchedBySource and DeleteWhenNotMatchedBySource operations. But due to SQL Server limitations you can use only one UpdateWhenNotMatchedBySource and DeleteWhenNotMatchedBySource operation in single command. setter Record update expression. Defines update expressions for values in target record. db.Table .Merge() .Using(source) .OnTargetKey() .UpdateWhenNotMatchedBySource(target => new TargetRecord() { Field1 = target.Field10, Field2 = target.Field2, Field3 = target.Field3 + 10 }) .Merge(); DeleteWhenNotMatchedBySource IMergeable<TTarget, TSource> DeleteWhenNotMatchedBySource<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge); IMergeable<TTarget, TSource> DeleteWhenNotMatchedBySourceAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, bool>> searchCondition); IMPORTANT: This method could be used only with SQL Server. DeleteWhenNotMatchedBySource takes delete operation options and returns new merge command builder with new operation. merge Merge command builder. DeleteWhenNotMatchedBySource method will return new builder with new delete operation. It will not modify original object. searchCondition Operation execution condition. Operation without condition will be applied to all matching records. If there are multiple operations within same group - only last one could omit condition. WhenNotMatchedBySource match group could contain only UpdateWhenNotMatchedBySource and DeleteWhenNotMatchedBySource operations. But due to SQL Server limitations you can use only one UpdateWhenNotMatchedBySource and DeleteWhenNotMatchedBySource operation in single command. UpdateWhenMatchedThenDelete IMergeable<TTarget, TTarget> UpdateWhenMatchedThenDelete<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> deleteCondition); IMergeable<TTarget, TTarget> UpdateWhenMatchedAndThenDelete<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> searchCondition, Expression<Func<TTarget, TTarget, bool>> deleteCondition); IMergeable<TTarget, TSource> UpdateWhenMatchedThenDelete<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, TTarget>> setter, Expression<Func<TTarget, TSource, bool>> deleteCondition); IMergeable<TTarget, TSource> UpdateWhenMatchedAndThenDelete<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition, Expression<Func<TTarget, TSource, TTarget>> setter, Expression<Func<TTarget, TSource, bool>> deleteCondition); IMPORTANT: This method could be used only with Oracle Database. UpdateWhenMatchedThenDelete method takes update and delete operation options and returns new merge command builder with new operation. merge Merge command builder. UpdateWhenMatchedThenDelete method will return new builder with new update with delete operation. It will not modify original object. searchCondition Update operation execution condition. Operation without condition will be applied to all matching records. Oracle doesn't support multiple commands in current match group. You can use only UpdateWhenMatchedThenDelete or UpdateWhenMatched in single command. setter Record update expression. Optional. Defines update expressions for values in target record. db.Table .Merge() .From(source) .OnTargetKey() .UpdateWhenMatchedThenDelete((target, source) => new TargetRecord() { Field1 = target.Field10, Field2 = source.Field2, Field3 = source.Field1 + target.Field2 }, (updatedTarget, source) => updatedTarget.Field3 > 100) .Merge(); deleteCondition Delete operation execution condition. Identifies updated records that should be deleted. Note that this condition applied to updated target record with new field values. Merge int Merge<TTarget, TSource>(this IMergeable<TTarget, TSource> merge); Task<int> MergeAsync<TTarget, TSource>(this IMergeable<TTarget, TSource> merge, CancellationToken token = default); Merge method builds and executes merge command against database and returns number of affected records. MergeAsync does the same job asynchronously. merge Merge command builder. Notes Merge returns number of affected records. Consult your database documentation for more details, but in general except SAP/Sybase ASE it is the same for all databases."
  },
  "api/LinqToDB.TakeHints.html": {
    "href": "api/LinqToDB.TakeHints.html",
    "title": "Enum TakeHints | Linq To DB (aka linq2db)",
    "keywords": "Enum TakeHints Hints for Take Take<TSource>(IQueryable<TSource>, Int32, TakeHints) Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, TakeHints) . Namespace : LinqToDB Assembly : linq2db.dll Syntax [Flags] public enum TakeHints Fields Name Description Percent SELECT TOP 10 PERCENT. WithTies SELECT TOP 10 WITH TIES. Extension Methods Sql.Between<TakeHints>(TakeHints, TakeHints) Sql.NotBetween<TakeHints>(TakeHints, TakeHints) SqlExtensions.In<TakeHints>(IEnumerable<TakeHints>) SqlExtensions.In<TakeHints>(IQueryable<TakeHints>) SqlExtensions.In<TakeHints>(TakeHints[]) SqlExtensions.In<TakeHints>(TakeHints, TakeHints) SqlExtensions.In<TakeHints>(TakeHints, TakeHints, TakeHints) SqlExtensions.NotIn<TakeHints>(IEnumerable<TakeHints>) SqlExtensions.NotIn<TakeHints>(IQueryable<TakeHints>) SqlExtensions.NotIn<TakeHints>(TakeHints[]) SqlExtensions.NotIn<TakeHints>(TakeHints, TakeHints) SqlExtensions.NotIn<TakeHints>(TakeHints, TakeHints, TakeHints)"
  },
  "api/LinqToDB.SqlQuery.html": {
    "href": "api/LinqToDB.SqlQuery.html",
    "title": "Namespace LinqToDB.SqlQuery | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.SqlQuery Classes ClauseBase ClauseBase<T1, T2> ConditionBase<T1, T2> ConditionBase<T1, T2>.Expr_ ConditionBase<T1, T2>.Expr_.Op_ ConditionBase<T1, T2>.Not_ CteClause Extensions ObjectSqlExpression Precedence QueryHelper QueryInformation This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. QueryInformation.HierarchyInfo QueryVisitor ReservedWords SelectQuery SqlBinaryExpression SqlColumn SqlCondition SqlCreateTableStatement SqlCteTable SqlDataType SqlDeleteClause2 SqlDeleteStatement SqlDropTableStatement SqlException SqlExpression SqlExtensions This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. SqlField SqlFromClause SqlFromClause.Join SqlFromClause.Join.Next SqlFunction SqlGroupByClause SqlInsertClause SqlInsertOrUpdateStatement SqlInsertStatement SqlInsertWithIdentity SqlJoinedTable SqlOrderByClause SqlOrderByItem SqlParameter SqlPredicate SqlPredicate.Between SqlPredicate.Expr SqlPredicate.ExprExpr SqlPredicate.FuncLike SqlPredicate.InList SqlPredicate.InSubQuery SqlPredicate.IsNull SqlPredicate.Like SqlPredicate.NotExpr SqlSearchCondition SqlSearchCondition.Next SqlSelectClause SqlSelectStatement SqlSetExpression SqlStatement SqlStatementWithQueryBase SqlTable SqlTable<T> SqlTableSource SqlTruncateTableStatement SqlUnion SqlUpdateClause SqlUpdateStatement SqlValue SqlWhereClause SqlWhereClause.Next SqlWithClause Interfaces ICloneableElement IQueryElement ISqlExpression ISqlExpressionWalkable ISqlPredicate ISqlTableSource IValueContainer Enums DefaultNullable JoinType QueryElementType QueryInformation.HierarchyType QueryType SqlPredicate.Operator SqlTableType"
  },
  "api/LinqToDB.SqlQuery.SqlWithClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlWithClause.html",
    "title": "Class SqlWithClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlWithClause Inheritance Object SqlWithClause Implements IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlWithClause : IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source Clauses Declaration public List<CteClause> Clauses { get; set; } Property Value Type Description List < CteClause > | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Methods | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression | Improve this Doc View Source WalkQueries(Func<SelectQuery, SelectQuery>) Declaration public void WalkQueries(Func<SelectQuery, SelectQuery> func) Parameters Type Name Description Func < SelectQuery , SelectQuery > func Implements IQueryElement ISqlExpressionWalkable Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlWhereClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlWhereClause.html",
    "title": "Class SqlWhereClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlWhereClause Inheritance Object ConditionBase < SqlWhereClause , SqlWhereClause.Next > ClauseBase < SqlWhereClause , SqlWhereClause.Next > SqlWhereClause Implements IQueryElement ISqlExpressionWalkable Inherited Members ClauseBase<SqlWhereClause, SqlWhereClause.Next>.Select ClauseBase<SqlWhereClause, SqlWhereClause.Next>.From ClauseBase<SqlWhereClause, SqlWhereClause.Next>.GroupBy ClauseBase<SqlWhereClause, SqlWhereClause.Next>.Having ClauseBase<SqlWhereClause, SqlWhereClause.Next>.OrderBy ClauseBase<SqlWhereClause, SqlWhereClause.Next>.End() ClauseBase<SqlWhereClause, SqlWhereClause.Next>.SelectQuery ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Search ConditionBase<SqlWhereClause, SqlWhereClause.Next>.GetNext() ConditionBase<SqlWhereClause, SqlWhereClause.Next>.SetOr(Boolean) ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Not ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Expr(ISqlExpression) ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Field(SqlField) ConditionBase<SqlWhereClause, SqlWhereClause.Next>.SubQuery(SelectQuery) ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Value(Object) ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlWhereClause : ClauseBase<SqlWhereClause, SqlWhereClause.Next>, IConditionExpr<ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Expr_>, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Search Declaration protected override SqlSearchCondition Search { get; } Property Value Type Description SqlSearchCondition Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlWhereClause, LinqToDB.SqlQuery.SqlWhereClause.Next>.Search | Improve this Doc View Source SearchCondition Declaration public SqlSearchCondition SearchCondition { get; } Property Value Type Description SqlSearchCondition Methods | Improve this Doc View Source GetNext() Declaration protected override SqlWhereClause.Next GetNext() Returns Type Description SqlWhereClause.Next Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlWhereClause, LinqToDB.SqlQuery.SqlWhereClause.Next>.GetNext() Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> action) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > action Returns Type Description ISqlExpression Implements IQueryElement ISqlExpressionWalkable Extension Methods QueryHelper.ConcatSearchCondition(SqlWhereClause, SqlSearchCondition) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlWhereClause.Next.html": {
    "href": "api/LinqToDB.SqlQuery.SqlWhereClause.Next.html",
    "title": "Class SqlWhereClause.Next | Linq To DB (aka linq2db)",
    "keywords": "Class SqlWhereClause.Next Inheritance Object ClauseBase SqlWhereClause.Next Inherited Members ClauseBase.Select ClauseBase.From ClauseBase.Where ClauseBase.GroupBy ClauseBase.Having ClauseBase.OrderBy ClauseBase.End() ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Next : ClauseBase Properties | Improve this Doc View Source And Declaration public SqlWhereClause And { get; } Property Value Type Description SqlWhereClause | Improve this Doc View Source Or Declaration public SqlWhereClause Or { get; } Property Value Type Description SqlWhereClause Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlValue.html": {
    "href": "api/LinqToDB.SqlQuery.SqlValue.html",
    "title": "Class SqlValue | Linq To DB (aka linq2db)",
    "keywords": "Class SqlValue Inheritance Object SqlValue Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement IValueContainer Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlValue : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement, IValueContainer Constructors | Improve this Doc View Source SqlValue(Object) Declaration public SqlValue(object value) Parameters Type Name Description Object value | Improve this Doc View Source SqlValue(Type, Object) Declaration public SqlValue(Type systemType, object value) Parameters Type Name Description Type systemType Object value Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type | Improve this Doc View Source Value Declaration public object Value { get; } Property Value Type Description Object Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement IValueContainer Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlUpdateStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlUpdateStatement.html",
    "title": "Class SqlUpdateStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlUpdateStatement Inheritance Object SqlStatement SqlStatementWithQueryBase SqlUpdateStatement Implements IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlStatementWithQueryBase.IsParameterDependent SqlStatementWithQueryBase.SelectQuery SqlStatementWithQueryBase.With SqlStatementWithQueryBase.WalkQueries(Func<SelectQuery, SelectQuery>) SqlStatement.SqlText SqlStatement.Parameters SqlStatement.ProcessParameters(MappingSchema) SqlStatement.CollectParameters() SqlStatement.RemoveAlias(String) SqlStatement.GetAlias(String, String) SqlStatement.GetTempAliases(Int32, String) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlUpdateStatement : SqlStatementWithQueryBase, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlUpdateStatement(SelectQuery) Declaration public SqlUpdateStatement(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source Update Declaration public SqlUpdateClause Update { get; set; } Property Value Type Description SqlUpdateClause Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlStatement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source EnumClauses() Declaration public override IEnumerable<IQueryElement> EnumClauses() Returns Type Description IEnumerable < IQueryElement > Overrides SqlStatement.EnumClauses() | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatementWithQueryBase.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Overrides SqlStatement.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Async.IQueryProviderAsync.html": {
    "href": "api/LinqToDB.Async.IQueryProviderAsync.html",
    "title": "Interface IQueryProviderAsync | Linq To DB (aka linq2db)",
    "keywords": "Interface IQueryProviderAsync This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Inherited Members IQueryProvider.CreateQuery(Expression) IQueryProvider.CreateQuery<TElement>(Expression) IQueryProvider.Execute(Expression) IQueryProvider.Execute<TResult>(Expression) Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public interface IQueryProviderAsync : IQueryProvider Methods | Improve this Doc View Source ExecuteAsync<TResult>(Expression) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration IAsyncEnumerable<TResult> ExecuteAsync<TResult>(Expression expression) Parameters Type Name Description Expression expression Returns Type Description IAsyncEnumerable <TResult> Type Parameters Name Description TResult | Improve this Doc View Source ExecuteAsync<TResult>(Expression, CancellationToken) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken token) Parameters Type Name Description Expression expression CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TResult Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Async.IAsyncEnumerator-1.html": {
    "href": "api/LinqToDB.Async.IAsyncEnumerator-1.html",
    "title": "Interface IAsyncEnumerator<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IAsyncEnumerator<T> Asynchronous version of the IEnumerator<T> interface, allowing elements to be retrieved asynchronously. Inherited Members IDisposable.Dispose() Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public interface IAsyncEnumerator<out T> : IDisposable Type Parameters Name Description T Element type. Properties | Improve this Doc View Source Current Gets the current element in the iteration. Declaration T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source MoveNext(CancellationToken) Advances the enumerator to the next element in the sequence, returning the result asynchronously. Declaration Task<bool> MoveNext(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token that can be used to cancel the operation. Returns Type Description Task < Boolean > Task containing the result of the operation: true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the sequence. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.SoapDataContext.html": {
    "href": "api/LinqToDB.ServiceModel.SoapDataContext.html",
    "title": "Class SoapDataContext | Linq To DB (aka linq2db)",
    "keywords": "Class SoapDataContext Inheritance Object RemoteDataContextBase SoapDataContext Implements IDataContext IDisposable IEntityServices Inherited Members RemoteDataContextBase.Configuration RemoteDataContextBase.IDataContext.ContextID RemoteDataContextBase.MappingSchema RemoteDataContextBase.InlineParameters RemoteDataContextBase.CloseAfterUse RemoteDataContextBase.QueryHints RemoteDataContextBase.NextQueryHints RemoteDataContextBase.SqlProviderType RemoteDataContextBase.SqlOptimizerType RemoteDataContextBase.IDataContext.SqlProviderFlags RemoteDataContextBase.IDataContext.DataReaderType RemoteDataContextBase.IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) RemoteDataContextBase.IDataContext.IsDBNullAllowed(IDataReader, Int32) RemoteDataContextBase.IDataContext.CreateSqlProvider RemoteDataContextBase.GetSqlOptimizer RemoteDataContextBase.BeginBatch() RemoteDataContextBase.CommitBatch() RemoteDataContextBase.CommitBatchAsync() RemoteDataContextBase.IDataContext.Clone(Boolean) RemoteDataContextBase.OnClosing RemoteDataContextBase.OnEntityCreated RemoteDataContextBase.Disposed RemoteDataContextBase.ThrowOnDisposed() RemoteDataContextBase.IDataContext.Close() RemoteDataContextBase.Dispose() RemoteDataContextBase.IDataContext.GetQueryRunner(Query, Int32, Expression, Object[]) Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class SoapDataContext : RemoteDataContextBase, IDataContext, IDisposable, IEntityServices Constructors | Improve this Doc View Source SoapDataContext(Binding, EndpointAddress) Declaration public SoapDataContext(Binding binding, EndpointAddress endpointAddress) Parameters Type Name Description Binding binding EndpointAddress endpointAddress | Improve this Doc View Source SoapDataContext(String) Declaration public SoapDataContext(string endpointConfigurationName) Parameters Type Name Description String endpointConfigurationName | Improve this Doc View Source SoapDataContext(String, EndpointAddress) Declaration public SoapDataContext(string endpointConfigurationName, EndpointAddress endpointAddress) Parameters Type Name Description String endpointConfigurationName EndpointAddress endpointAddress | Improve this Doc View Source SoapDataContext(String, String) Declaration public SoapDataContext(string endpointConfigurationName, string remoteAddress) Parameters Type Name Description String endpointConfigurationName String remoteAddress Properties | Improve this Doc View Source Binding Declaration public Binding Binding { get; } Property Value Type Description Binding | Improve this Doc View Source ContextIDPrefix Declaration protected override string ContextIDPrefix { get; } Property Value Type Description String Overrides RemoteDataContextBase.ContextIDPrefix Methods | Improve this Doc View Source Clone() Declaration protected override IDataContext Clone() Returns Type Description IDataContext Overrides RemoteDataContextBase.Clone() | Improve this Doc View Source GetClient() Declaration protected override ILinqClient GetClient() Returns Type Description ILinqClient Overrides RemoteDataContextBase.GetClient() Implements IDataContext IDisposable IEntityServices Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertOrReplace<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplaceAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt32Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt64Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithDecimalIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt32IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt64IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithDecimalIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Update<T>(IDataContext, T, String, String, String) DataExtensions.UpdateAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Delete<T>(IDataContext, T, String, String, String) DataExtensions.DeleteAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaultNullable) DataExtensions.CreateTableAsync<T>(IDataContext, String, String, String, String, String, DefaultNullable, CancellationToken) DataExtensions.DropTable<T>(IDataContext, String, String, String, Boolean) DataExtensions.DropTableAsync<T>(IDataContext, String, String, String, Boolean, CancellationToken) DataExtensions.GetCte<T>(IDataContext, Func<IQueryable<T>, IQueryable<T>>, String) DataExtensions.GetCte<T>(IDataContext, String, Func<IQueryable<T>, IQueryable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IEnumerable<T>, BulkCopyOptions, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, String, IEnumerable<T>, BulkCopyOptions, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, Action<ITable<T>>) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.SelectAsync<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>)"
  },
  "api/LinqToDB.ServiceModel.ServiceModelDataContext.html": {
    "href": "api/LinqToDB.ServiceModel.ServiceModelDataContext.html",
    "title": "Class ServiceModelDataContext | Linq To DB (aka linq2db)",
    "keywords": "Class ServiceModelDataContext Inheritance Object RemoteDataContextBase ServiceModelDataContext Implements IDataContext IDisposable IEntityServices Inherited Members RemoteDataContextBase.Configuration RemoteDataContextBase.IDataContext.ContextID RemoteDataContextBase.MappingSchema RemoteDataContextBase.InlineParameters RemoteDataContextBase.CloseAfterUse RemoteDataContextBase.QueryHints RemoteDataContextBase.NextQueryHints RemoteDataContextBase.SqlProviderType RemoteDataContextBase.SqlOptimizerType RemoteDataContextBase.IDataContext.SqlProviderFlags RemoteDataContextBase.IDataContext.DataReaderType RemoteDataContextBase.IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) RemoteDataContextBase.IDataContext.IsDBNullAllowed(IDataReader, Int32) RemoteDataContextBase.IDataContext.CreateSqlProvider RemoteDataContextBase.GetSqlOptimizer RemoteDataContextBase.BeginBatch() RemoteDataContextBase.CommitBatch() RemoteDataContextBase.CommitBatchAsync() RemoteDataContextBase.IDataContext.Clone(Boolean) RemoteDataContextBase.OnClosing RemoteDataContextBase.OnEntityCreated RemoteDataContextBase.Disposed RemoteDataContextBase.ThrowOnDisposed() RemoteDataContextBase.IDataContext.Close() RemoteDataContextBase.Dispose() RemoteDataContextBase.IDataContext.GetQueryRunner(Query, Int32, Expression, Object[]) Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class ServiceModelDataContext : RemoteDataContextBase, IDataContext, IDisposable, IEntityServices Constructors | Improve this Doc View Source ServiceModelDataContext(Binding, EndpointAddress) Declaration public ServiceModelDataContext(Binding binding, EndpointAddress endpointAddress) Parameters Type Name Description Binding binding EndpointAddress endpointAddress | Improve this Doc View Source ServiceModelDataContext(String) Declaration public ServiceModelDataContext(string endpointConfigurationName) Parameters Type Name Description String endpointConfigurationName | Improve this Doc View Source ServiceModelDataContext(String, EndpointAddress) Declaration public ServiceModelDataContext(string endpointConfigurationName, EndpointAddress endpointAddress) Parameters Type Name Description String endpointConfigurationName EndpointAddress endpointAddress | Improve this Doc View Source ServiceModelDataContext(String, String) Declaration public ServiceModelDataContext(string endpointConfigurationName, string remoteAddress) Parameters Type Name Description String endpointConfigurationName String remoteAddress Properties | Improve this Doc View Source Binding Declaration public Binding Binding { get; } Property Value Type Description Binding | Improve this Doc View Source ContextIDPrefix Declaration protected override string ContextIDPrefix { get; } Property Value Type Description String Overrides RemoteDataContextBase.ContextIDPrefix Methods | Improve this Doc View Source Clone() Declaration protected override IDataContext Clone() Returns Type Description IDataContext Overrides RemoteDataContextBase.Clone() | Improve this Doc View Source GetClient() Declaration protected override ILinqClient GetClient() Returns Type Description ILinqClient Overrides RemoteDataContextBase.GetClient() Implements IDataContext IDisposable IEntityServices Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertOrReplace<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplaceAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt32Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt64Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithDecimalIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt32IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt64IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithDecimalIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Update<T>(IDataContext, T, String, String, String) DataExtensions.UpdateAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Delete<T>(IDataContext, T, String, String, String) DataExtensions.DeleteAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaultNullable) DataExtensions.CreateTableAsync<T>(IDataContext, String, String, String, String, String, DefaultNullable, CancellationToken) DataExtensions.DropTable<T>(IDataContext, String, String, String, Boolean) DataExtensions.DropTableAsync<T>(IDataContext, String, String, String, Boolean, CancellationToken) DataExtensions.GetCte<T>(IDataContext, Func<IQueryable<T>, IQueryable<T>>, String) DataExtensions.GetCte<T>(IDataContext, String, Func<IQueryable<T>, IQueryable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IEnumerable<T>, BulkCopyOptions, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, String, IEnumerable<T>, BulkCopyOptions, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, Action<ITable<T>>) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.SelectAsync<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>)"
  },
  "api/LinqToDB.SchemaProvider.ProcedureSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ProcedureSchema.html",
    "title": "Class ProcedureSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ProcedureSchema Describes database procedure or function. Inheritance Object ProcedureSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ProcedureSchema Properties | Improve this Doc View Source CatalogName Name of database, that contains current procedure. Declaration public string CatalogName { get; set; } Property Value Type Description String | Improve this Doc View Source IsAggregateFunction Gets flag indicating that it is aggregate function or not. Declaration public bool IsAggregateFunction { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsDefaultSchema Gets flag indicating that procedure defined with default owner/schema or not. Declaration public bool IsDefaultSchema { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsFunction true for function and false for procedure. Declaration public bool IsFunction { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsLoaded Gets flag indicating that procedure tabl result schema loaded. If it is false , procedure doesn't return table-like results or schema loading failed. In latter case check ResultException property for error. Declaration public bool IsLoaded { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsResultDynamic Get or sets flag, indicating that procedure returns dynamic (generic) result. Declaration public bool IsResultDynamic { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsTableFunction Gets flag indicating that it is scalar or table function. Declaration public bool IsTableFunction { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MemberName C#-friendly name. Declaration public string MemberName { get; set; } Property Value Type Description String | Improve this Doc View Source Parameters Gets list of procedure parameters. Declaration public List<ParameterSchema> Parameters { get; set; } Property Value Type Description List < ParameterSchema > | Improve this Doc View Source ProcedureName Procedure or function name. Declaration public string ProcedureName { get; set; } Property Value Type Description String | Improve this Doc View Source ResultException Contains exception, generated during schema load. Declaration public Exception ResultException { get; set; } Property Value Type Description Exception | Improve this Doc View Source ResultTable Gets table result schema for procedure to table function. Declaration public TableSchema ResultTable { get; set; } Property Value Type Description TableSchema | Improve this Doc View Source SchemaName Name of procedure schema/owner. Declaration public string SchemaName { get; set; } Property Value Type Description String | Improve this Doc View Source SimilarTables List of tables with the same schema as schema in ResultTable . Declaration public List<TableSchema> SimilarTables { get; set; } Property Value Type Description List < TableSchema > Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ProcedureParameterInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ProcedureParameterInfo.html",
    "title": "Class ProcedureParameterInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ProcedureParameterInfo Database procedure or function parameter description. Inheritance Object ProcedureParameterInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ProcedureParameterInfo Fields | Improve this Doc View Source DataType Get or sets database type for parameter. Declaration public string DataType Field Value Type Description String | Improve this Doc View Source IsIn Gets or sets input or input-output parameter flag. Declaration public bool IsIn Field Value Type Description Boolean | Improve this Doc View Source IsOut Gets or sets output or input-output parameter flag. Declaration public bool IsOut Field Value Type Description Boolean | Improve this Doc View Source IsResult Gets or sets return value parameter flag. Declaration public bool IsResult Field Value Type Description Boolean | Improve this Doc View Source Length Gets or sets parameter type length attribute. Declaration public long? Length Field Value Type Description Nullable < Int64 > | Improve this Doc View Source Ordinal Gets or sets parameter position. Declaration public int Ordinal Field Value Type Description Int32 | Improve this Doc View Source ParameterName Gets or sets parameter name. Declaration public string ParameterName Field Value Type Description String | Improve this Doc View Source Precision Gets or sets parameter type precision attribute. Declaration public int? Precision Field Value Type Description Nullable < Int32 > | Improve this Doc View Source ProcedureID Gets or sets unique procedure identifier. NOTE: this is not fully-qualified procedure name (even if it used right now for some providers as procedure identifier). Declaration public string ProcedureID Field Value Type Description String | Improve this Doc View Source Scale Gets or sets parameter type scale attribute. Declaration public int? Scale Field Value Type Description Nullable < Int32 > Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ProcedureInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ProcedureInfo.html",
    "title": "Class ProcedureInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ProcedureInfo Database procedure or function description. Inheritance Object ProcedureInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ProcedureInfo Fields | Improve this Doc View Source CatalogName Gets or sets database name for procedure. Declaration public string CatalogName Field Value Type Description String | Improve this Doc View Source IsAggregateFunction Gets or sets flag to distinguish aggregate function from table and scalar functions. Declaration public bool IsAggregateFunction Field Value Type Description Boolean | Improve this Doc View Source IsDefaultSchema Get or sets flag, indicating that procedure belongs to default schema/owner. Declaration public bool IsDefaultSchema Field Value Type Description Boolean | Improve this Doc View Source IsFunction Gets or sets flag to distinguish function from procedure. Declaration public bool IsFunction Field Value Type Description Boolean | Improve this Doc View Source IsResultDynamic Get or sets flag, indicating that procedure returns dynamic (generic) result. Declaration public bool IsResultDynamic Field Value Type Description Boolean | Improve this Doc View Source IsTableFunction Gets or sets flag to distinguish table function from aggregate and scalar functions. Declaration public bool IsTableFunction Field Value Type Description Boolean | Improve this Doc View Source ProcedureDefinition Gets or sets procedure source code. Declaration public string ProcedureDefinition Field Value Type Description String | Improve this Doc View Source ProcedureID Gets or sets unique procedure identifier. NOTE: this is not fully-qualified procedure name (even if it used right now for some providers as procedure identifier). Declaration public string ProcedureID Field Value Type Description String | Improve this Doc View Source ProcedureName Gets or sets procedure name. Declaration public string ProcedureName Field Value Type Description String | Improve this Doc View Source SchemaName Gets or sets schema/owner name for procedure. Declaration public string SchemaName Field Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.PrimaryKeyInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.PrimaryKeyInfo.html",
    "title": "Class PrimaryKeyInfo | Linq To DB (aka linq2db)",
    "keywords": "Class PrimaryKeyInfo Inheritance Object PrimaryKeyInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class PrimaryKeyInfo Fields | Improve this Doc View Source ColumnName Declaration public string ColumnName Field Value Type Description String | Improve this Doc View Source Ordinal Declaration public int Ordinal Field Value Type Description Int32 | Improve this Doc View Source PrimaryKeyName Declaration public string PrimaryKeyName Field Value Type Description String | Improve this Doc View Source TableID Declaration public string TableID Field Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ParameterSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ParameterSchema.html",
    "title": "Class ParameterSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ParameterSchema Describes database procedure or function parameter. Inheritance Object ParameterSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ParameterSchema Properties | Improve this Doc View Source DataType Gets parameter type as DataType enumeration value. Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source IsIn Gets flag indicating that it is input parameter. Declaration public bool IsIn { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsOut Gets flag indicating that it is output parameter. Declaration public bool IsOut { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsResult Gets flag indicating that it is return value parameter. Declaration public bool IsResult { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ParameterName Gets C#-friendly parameter name. Declaration public string ParameterName { get; set; } Property Value Type Description String | Improve this Doc View Source ParameterType Gets .net type for parameter as string. Declaration public string ParameterType { get; set; } Property Value Type Description String | Improve this Doc View Source ProviderSpecificType Gets provider-specific .net parameter type as a string. Declaration public string ProviderSpecificType { get; set; } Property Value Type Description String | Improve this Doc View Source SchemaName Gets parameter's name. Declaration public string SchemaName { get; set; } Property Value Type Description String | Improve this Doc View Source SchemaType Gets database-specific parameter type. Declaration public string SchemaType { get; set; } Property Value Type Description String | Improve this Doc View Source Size Gets parameter type size. Declaration public long? Size { get; set; } Property Value Type Description Nullable < Int64 > | Improve this Doc View Source SystemType Gets .net type for parameter. Declaration public Type SystemType { get; set; } Property Value Type Description Type Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ISchemaProvider.html": {
    "href": "api/LinqToDB.SchemaProvider.ISchemaProvider.html",
    "title": "Interface ISchemaProvider | Linq To DB (aka linq2db)",
    "keywords": "Interface ISchemaProvider Database schema provider. Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public interface ISchemaProvider Methods | Improve this Doc View Source GetSchema(DataConnection, GetSchemaOptions) Returns database schema. Note that it is recommended to call this method outside of transaction as some providers do not support it or behave incorrectly. At least following providers shouldn't be called in transaction: MySQL; Microsoft SQL Server; Sybase; DB2. Declaration DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options = null) Parameters Type Name Description DataConnection dataConnection Data connection to use to read schema from. GetSchemaOptions options Schema read configuration options. Returns Type Description DatabaseSchema Returns database schema information. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.GetSchemaOptions.html": {
    "href": "api/LinqToDB.SchemaProvider.GetSchemaOptions.html",
    "title": "Class GetSchemaOptions | Linq To DB (aka linq2db)",
    "keywords": "Class GetSchemaOptions Defines schema load options. Inheritance Object GetSchemaOptions GetHanaSchemaOptions Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class GetSchemaOptions Fields | Improve this Doc View Source ExcludedCatalogs List of disallowed databases/catalogs. Declaration public string[] ExcludedCatalogs Field Value Type Description String [] | Improve this Doc View Source ExcludedSchemas List of disallowed schemas/owners. Declaration public string[] ExcludedSchemas Field Value Type Description String [] | Improve this Doc View Source GenerateChar1AsString Should linq2db use String for char(1) type or Char . Default type: Char ( false ). Declaration public bool GenerateChar1AsString Field Value Type Description Boolean | Improve this Doc View Source GetAssociationMemberName Optional custom name generation logic for association property. Declaration public Func<ForeignKeySchema, string> GetAssociationMemberName Field Value Type Description Func < ForeignKeySchema , String > | Improve this Doc View Source GetProcedures Enable or disable read of procedures and functions metadata. Default - enabled ( true ). Declaration public bool GetProcedures Field Value Type Description Boolean | Improve this Doc View Source GetTables Enable or disable read of table schema. Default - enabled ( true ). Declaration public bool GetTables Field Value Type Description Boolean | Improve this Doc View Source IncludedCatalogs List of allowed databases/catalogs. Declaration public string[] IncludedCatalogs Field Value Type Description String [] | Improve this Doc View Source IncludedSchemas List of allowed schemas/owners. Declaration public string[] IncludedSchemas Field Value Type Description String [] | Improve this Doc View Source LoadProcedure Optional procedure metadata load filter. By default all procedures loaded. Declaration public Func<ProcedureSchema, bool> LoadProcedure Field Value Type Description Func < ProcedureSchema , Boolean > | Improve this Doc View Source ProcedureLoadingProgress Optional callback to report procedure metadata load progress. First parameter contains total number of discovered procedires. Second parameter provides position of currently loaded procedure. Declaration public Action<int, int> ProcedureLoadingProgress Field Value Type Description Action < Int32 , Int32 > | Improve this Doc View Source StringComparer String comparison logic for IncludedSchemas , ExcludedSchemas , IncludedCatalogs and ExcludedCatalogs values. Default is OrdinalIgnoreCase . Declaration public StringComparer StringComparer Field Value Type Description StringComparer Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ForeignKeySchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ForeignKeySchema.html",
    "title": "Class ForeignKeySchema | Linq To DB (aka linq2db)",
    "keywords": "Class ForeignKeySchema Inheritance Object ForeignKeySchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ForeignKeySchema Properties | Improve this Doc View Source AssociationType Declaration public AssociationType AssociationType { get; set; } Property Value Type Description AssociationType | Improve this Doc View Source BackReference Declaration public ForeignKeySchema BackReference { get; set; } Property Value Type Description ForeignKeySchema | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description Boolean | Improve this Doc View Source KeyName Declaration public string KeyName { get; set; } Property Value Type Description String | Improve this Doc View Source MemberName Declaration public string MemberName { get; set; } Property Value Type Description String | Improve this Doc View Source OtherColumns Declaration public List<ColumnSchema> OtherColumns { get; set; } Property Value Type Description List < ColumnSchema > | Improve this Doc View Source OtherTable Declaration public TableSchema OtherTable { get; set; } Property Value Type Description TableSchema | Improve this Doc View Source ThisColumns Declaration public List<ColumnSchema> ThisColumns { get; set; } Property Value Type Description List < ColumnSchema > | Improve this Doc View Source ThisTable Declaration public TableSchema ThisTable { get; set; } Property Value Type Description TableSchema Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ForeignKeyInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ForeignKeyInfo.html",
    "title": "Class ForeignKeyInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ForeignKeyInfo Inheritance Object ForeignKeyInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ForeignKeyInfo Fields | Improve this Doc View Source Name Declaration public string Name Field Value Type Description String | Improve this Doc View Source Ordinal Declaration public int Ordinal Field Value Type Description Int32 | Improve this Doc View Source OtherColumn Declaration public string OtherColumn Field Value Type Description String | Improve this Doc View Source OtherTableID Declaration public string OtherTableID Field Value Type Description String | Improve this Doc View Source ThisColumn Declaration public string ThisColumn Field Value Type Description String | Improve this Doc View Source ThisTableID Declaration public string ThisTableID Field Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.DataTypeInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.DataTypeInfo.html",
    "title": "Class DataTypeInfo | Linq To DB (aka linq2db)",
    "keywords": "Class DataTypeInfo Database data type descriptor. Implements subset of DataTypes schema collection: https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/common-schema-collections . Inheritance Object DataTypeInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class DataTypeInfo Fields | Improve this Doc View Source CreateFormat Gets or sets SQL type name template - type name and, optionally, parameters. This template could be used to define column or variable of specific type. E.g. DECIMAL({0}, {1}). Declaration public string CreateFormat Field Value Type Description String | Improve this Doc View Source CreateParameters Gets or sets comma-separated positional list of CreateFormat parameters. E.g. \"precision,scale\". Order of parameters must match order in CreateFormat . Declaration public string CreateParameters Field Value Type Description String | Improve this Doc View Source DataType Gets or sets .NET type name, used by provider for current type. Declaration public string DataType Field Value Type Description String | Improve this Doc View Source ProviderDbType Gets or sets provider-specific type identifier to use for query parameters of this type. Corresponds to some provider's enumeration, e.g. SqlDbType, OracleType, etc. Declaration public int ProviderDbType Field Value Type Description Int32 | Improve this Doc View Source TypeName Gets or sets SQL name of data type. Declaration public string TypeName Field Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.DatabaseSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.DatabaseSchema.html",
    "title": "Class DatabaseSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DatabaseSchema Inheritance Object DatabaseSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class DatabaseSchema Properties | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description String | Improve this Doc View Source DataSource Declaration public string DataSource { get; set; } Property Value Type Description String | Improve this Doc View Source DataTypesSchema Declaration public DataTable DataTypesSchema { get; set; } Property Value Type Description DataTable | Improve this Doc View Source Procedures Declaration public List<ProcedureSchema> Procedures { get; set; } Property Value Type Description List < ProcedureSchema > | Improve this Doc View Source ProviderSpecificTypeNamespace Declaration public string ProviderSpecificTypeNamespace { get; set; } Property Value Type Description String | Improve this Doc View Source ServerVersion Declaration public string ServerVersion { get; set; } Property Value Type Description String | Improve this Doc View Source Tables Declaration public List<TableSchema> Tables { get; set; } Property Value Type Description List < TableSchema > Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ColumnSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ColumnSchema.html",
    "title": "Class ColumnSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnSchema Describes table column. Inheritance Object ColumnSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ColumnSchema Fields | Improve this Doc View Source Table Gets column owner schema. Declaration public TableSchema Table Field Value Type Description TableSchema Properties | Improve this Doc View Source ColumnName Gets column name. Declaration public string ColumnName { get; set; } Property Value Type Description String | Improve this Doc View Source ColumnType Gets db-specific column type. Declaration public string ColumnType { get; set; } Property Value Type Description String | Improve this Doc View Source DataType Gets column type as DataType enumeration value. Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source Description Gets column description. Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source IsIdentity Gets flag indicating that it is identity column. Declaration public bool IsIdentity { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsNullable Gets flag indicating that it is nullable column. Declaration public bool IsNullable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsPrimaryKey Gets flag indicating that column is a part of primary key. Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets column type length. Declaration public long? Length { get; set; } Property Value Type Description Nullable < Int64 > | Improve this Doc View Source MemberName Gets C# friendly column name. Declaration public string MemberName { get; set; } Property Value Type Description String | Improve this Doc View Source MemberType Gets .net column type as a string. Declaration public string MemberType { get; set; } Property Value Type Description String | Improve this Doc View Source Precision Gets column type precision. Declaration public int? Precision { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source PrimaryKeyOrder Gets position of column in composite primary key. Declaration public int PrimaryKeyOrder { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ProviderSpecificType Gets provider-specific .net column type as a string. Declaration public string ProviderSpecificType { get; set; } Property Value Type Description String | Improve this Doc View Source Scale Gets column type scale. Declaration public int? Scale { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source SkipOnInsert Gets flag indicating that insert operations without explicit column setter should ignore this column. Declaration public bool SkipOnInsert { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SkipOnUpdate Gets flag indicating that update operations without explicit column setter should ignore this column. Declaration public bool SkipOnUpdate { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SystemType Gets .net column type. Declaration public Type SystemType { get; set; } Property Value Type Description Type Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ColumnInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ColumnInfo.html",
    "title": "Class ColumnInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnInfo Inheritance Object ColumnInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ColumnInfo Fields | Improve this Doc View Source ColumnType Declaration public string ColumnType Field Value Type Description String | Improve this Doc View Source DataType Declaration public string DataType Field Value Type Description String | Improve this Doc View Source Description Declaration public string Description Field Value Type Description String | Improve this Doc View Source IsIdentity Declaration public bool IsIdentity Field Value Type Description Boolean | Improve this Doc View Source IsNullable Declaration public bool IsNullable Field Value Type Description Boolean | Improve this Doc View Source Length Declaration public long? Length Field Value Type Description Nullable < Int64 > | Improve this Doc View Source Name Declaration public string Name Field Value Type Description String | Improve this Doc View Source Ordinal Declaration public int Ordinal Field Value Type Description Int32 | Improve this Doc View Source Precision Declaration public int? Precision Field Value Type Description Nullable < Int32 > | Improve this Doc View Source Scale Declaration public int? Scale Field Value Type Description Nullable < Int32 > | Improve this Doc View Source SkipOnInsert Declaration public bool SkipOnInsert Field Value Type Description Boolean | Improve this Doc View Source SkipOnUpdate Declaration public bool SkipOnUpdate Field Value Type Description Boolean | Improve this Doc View Source TableID Declaration public string TableID Field Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.AssociationType.html": {
    "href": "api/LinqToDB.SchemaProvider.AssociationType.html",
    "title": "Enum AssociationType | Linq To DB (aka linq2db)",
    "keywords": "Enum AssociationType Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public enum AssociationType Fields Name Description Auto ManyToOne OneToMany OneToOne Extension Methods Sql.Between<AssociationType>(AssociationType, AssociationType) Sql.NotBetween<AssociationType>(AssociationType, AssociationType) SqlExtensions.In<AssociationType>(IEnumerable<AssociationType>) SqlExtensions.In<AssociationType>(IQueryable<AssociationType>) SqlExtensions.In<AssociationType>(AssociationType[]) SqlExtensions.In<AssociationType>(AssociationType, AssociationType) SqlExtensions.In<AssociationType>(AssociationType, AssociationType, AssociationType) SqlExtensions.NotIn<AssociationType>(IEnumerable<AssociationType>) SqlExtensions.NotIn<AssociationType>(IQueryable<AssociationType>) SqlExtensions.NotIn<AssociationType>(AssociationType[]) SqlExtensions.NotIn<AssociationType>(AssociationType, AssociationType) SqlExtensions.NotIn<AssociationType>(AssociationType, AssociationType, AssociationType)"
  },
  "api/LinqToDB.Reflection.html": {
    "href": "api/LinqToDB.Reflection.html",
    "title": "Namespace LinqToDB.Reflection | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Reflection Classes MemberAccessor ObjectFactoryAttribute TypeAccessor TypeAccessor<T> Interfaces IObjectFactory"
  },
  "api/LinqToDB.Reflection.TypeAccessor.html": {
    "href": "api/LinqToDB.Reflection.TypeAccessor.html",
    "title": "Class TypeAccessor | Linq To DB (aka linq2db)",
    "keywords": "Class TypeAccessor Inheritance Object TypeAccessor TypeAccessor <T> Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public abstract class TypeAccessor Properties | Improve this Doc View Source DynamicColumnsStoreAccessor Gets the dynamic columns store accessor. Declaration public abstract MemberAccessor DynamicColumnsStoreAccessor { get; } Property Value Type Description MemberAccessor | Improve this Doc View Source Item[Int32] Declaration public MemberAccessor this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description MemberAccessor | Improve this Doc View Source Item[String] Declaration public MemberAccessor this[string memberName] { get; } Parameters Type Name Description String memberName Property Value Type Description MemberAccessor | Improve this Doc View Source Members Declaration public List<MemberAccessor> Members { get; } Property Value Type Description List < MemberAccessor > | Improve this Doc View Source ObjectFactory Declaration public IObjectFactory ObjectFactory { get; set; } Property Value Type Description IObjectFactory | Improve this Doc View Source Type Declaration public abstract Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source AddMember(MemberAccessor) Declaration protected void AddMember(MemberAccessor member) Parameters Type Name Description MemberAccessor member | Improve this Doc View Source CreateInstance() Declaration public virtual object CreateInstance() Returns Type Description Object | Improve this Doc View Source CreateInstanceEx() Declaration public object CreateInstanceEx() Returns Type Description Object | Improve this Doc View Source GetAccessor(Type) Declaration public static TypeAccessor GetAccessor(Type type) Parameters Type Name Description Type type Returns Type Description TypeAccessor | Improve this Doc View Source GetAccessor<T>() Declaration public static TypeAccessor<T> GetAccessor<T>() Returns Type Description TypeAccessor <T> Type Parameters Name Description T Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.MergeDefinition-2.html": {
    "href": "api/LinqToDB.MergeDefinition-2.html",
    "title": "Class MergeDefinition<TTarget, TSource> | Linq To DB (aka linq2db)",
    "keywords": "Class MergeDefinition<TTarget, TSource> Inheritance Object MergeDefinition<TTarget, TSource> Implements IMergeableUsing <TTarget> IMergeableOn <TTarget, TSource> IMergeable <TTarget, TSource> IMergeableSource <TTarget, TSource> Namespace : LinqToDB Assembly : linq2db.dll Syntax public class MergeDefinition<TTarget, TSource> : IMergeableUsing<TTarget>, IMergeableOn<TTarget, TSource>, IMergeable<TTarget, TSource>, IMergeableSource<TTarget, TSource> Type Parameters Name Description TTarget TSource Constructors | Improve this Doc View Source MergeDefinition(ITable<TTarget>) Declaration public MergeDefinition(ITable<TTarget> target) Parameters Type Name Description ITable <TTarget> target | Improve this Doc View Source MergeDefinition(ITable<TTarget>, IQueryable<TSource>) Declaration public MergeDefinition(ITable<TTarget> target, IQueryable<TSource> source) Parameters Type Name Description ITable <TTarget> target IQueryable <TSource> source Properties | Improve this Doc View Source EnumerableSource Declaration public IEnumerable<TSource> EnumerableSource { get; } Property Value Type Description IEnumerable <TSource> | Improve this Doc View Source KeyType Declaration public Type KeyType { get; } Property Value Type Description Type | Improve this Doc View Source MatchPredicate Declaration public Expression<Func<TTarget, TSource, bool>> MatchPredicate { get; } Property Value Type Description Expression < Func <TTarget, TSource, Boolean >> | Improve this Doc View Source Operations Declaration public MergeDefinition<TTarget, TSource>.Operation[] Operations { get; } Property Value Type Description MergeDefinition.Operation <>[] | Improve this Doc View Source QueryableSource Declaration public IQueryable<TSource> QueryableSource { get; } Property Value Type Description IQueryable <TSource> | Improve this Doc View Source SourceKey Declaration public Expression SourceKey { get; } Property Value Type Description Expression | Improve this Doc View Source Target Declaration public ITable<TTarget> Target { get; } Property Value Type Description ITable <TTarget> | Improve this Doc View Source TargetKey Declaration public Expression TargetKey { get; } Property Value Type Description Expression Methods | Improve this Doc View Source AddOnKey<TKey>(Expression<Func<TTarget, TKey>>, Expression<Func<TSource, TKey>>) Declaration public MergeDefinition<TTarget, TSource> AddOnKey<TKey>(Expression<Func<TTarget, TKey>> targetKey, Expression<Func<TSource, TKey>> sourceKey) Parameters Type Name Description Expression < Func <TTarget, TKey>> targetKey Expression < Func <TSource, TKey>> sourceKey Returns Type Description MergeDefinition <TTarget, TSource> Type Parameters Name Description TKey | Improve this Doc View Source AddOnPredicate(Expression<Func<TTarget, TSource, Boolean>>) Declaration public MergeDefinition<TTarget, TSource> AddOnPredicate(Expression<Func<TTarget, TSource, bool>> matchPredicate) Parameters Type Name Description Expression < Func <TTarget, TSource, Boolean >> matchPredicate Returns Type Description MergeDefinition <TTarget, TSource> | Improve this Doc View Source AddOperation(MergeDefinition<TTarget, TSource>.Operation) Declaration public MergeDefinition<TTarget, TSource> AddOperation(MergeDefinition<TTarget, TSource>.Operation operation) Parameters Type Name Description MergeDefinition.Operation <> operation Returns Type Description MergeDefinition <TTarget, TSource> | Improve this Doc View Source AddSource<TNewSource>(IEnumerable<TNewSource>) Declaration public MergeDefinition<TTarget, TNewSource> AddSource<TNewSource>(IEnumerable<TNewSource> source) where TNewSource : class Parameters Type Name Description IEnumerable <TNewSource> source Returns Type Description MergeDefinition <TTarget, TNewSource> Type Parameters Name Description TNewSource | Improve this Doc View Source AddSource<TNewSource>(IQueryable<TNewSource>) Declaration public MergeDefinition<TTarget, TNewSource> AddSource<TNewSource>(IQueryable<TNewSource> source) where TNewSource : class Parameters Type Name Description IQueryable <TNewSource> source Returns Type Description MergeDefinition <TTarget, TNewSource> Type Parameters Name Description TNewSource Implements IMergeableUsing<TTarget> IMergeableOn<TTarget, TSource> IMergeable<TTarget, TSource> IMergeableSource<TTarget, TSource> Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.MergeDefinition-2.Operation.html": {
    "href": "api/LinqToDB.MergeDefinition-2.Operation.html",
    "title": "Class MergeDefinition<TTarget, TSource>.Operation | Linq To DB (aka linq2db)",
    "keywords": "Class MergeDefinition<TTarget, TSource>.Operation Inheritance Object MergeDefinition<TTarget, TSource>.Operation Namespace : LinqToDB Assembly : linq2db.dll Syntax public class Operation Properties | Improve this Doc View Source BySourcePredicate Declaration public Expression<Func<TTarget, bool>> BySourcePredicate { get; } Property Value Type Description Expression < Func <TTarget, Boolean >> | Improve this Doc View Source CreateExpression Declaration public Expression<Func<TSource, TTarget>> CreateExpression { get; } Property Value Type Description Expression < Func <TSource, TTarget>> | Improve this Doc View Source HasCondition Declaration public bool HasCondition { get; } Property Value Type Description Boolean | Improve this Doc View Source MatchedPredicate Declaration public Expression<Func<TTarget, TSource, bool>> MatchedPredicate { get; } Property Value Type Description Expression < Func <TTarget, TSource, Boolean >> | Improve this Doc View Source MatchedPredicate2 Declaration public Expression<Func<TTarget, TSource, bool>> MatchedPredicate2 { get; } Property Value Type Description Expression < Func <TTarget, TSource, Boolean >> | Improve this Doc View Source NotMatchedPredicate Declaration public Expression<Func<TSource, bool>> NotMatchedPredicate { get; } Property Value Type Description Expression < Func <TSource, Boolean >> | Improve this Doc View Source Type Declaration public MergeOperationType Type { get; } Property Value Type Description MergeOperationType | Improve this Doc View Source UpdateBySourceExpression Declaration public Expression<Func<TTarget, TTarget>> UpdateBySourceExpression { get; } Property Value Type Description Expression < Func <TTarget, TTarget>> | Improve this Doc View Source UpdateExpression Declaration public Expression<Func<TTarget, TSource, TTarget>> UpdateExpression { get; } Property Value Type Description Expression < Func <TTarget, TSource, TTarget>> Methods | Improve this Doc View Source Delete(Expression<Func<TTarget, TSource, Boolean>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation Delete(Expression<Func<TTarget, TSource, bool>> predicate) Parameters Type Name Description Expression < Func <TTarget, TSource, Boolean >> predicate Returns Type Description MergeDefinition.Operation <> | Improve this Doc View Source DeleteBySource(Expression<Func<TTarget, Boolean>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation DeleteBySource(Expression<Func<TTarget, bool>> predicate) Parameters Type Name Description Expression < Func <TTarget, Boolean >> predicate Returns Type Description MergeDefinition.Operation <> | Improve this Doc View Source Insert(Expression<Func<TSource, Boolean>>, Expression<Func<TSource, TTarget>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation Insert(Expression<Func<TSource, bool>> predicate, Expression<Func<TSource, TTarget>> create) Parameters Type Name Description Expression < Func <TSource, Boolean >> predicate Expression < Func <TSource, TTarget>> create Returns Type Description MergeDefinition.Operation <> | Improve this Doc View Source Update(Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation Update(Expression<Func<TTarget, TSource, bool>> predicate, Expression<Func<TTarget, TSource, TTarget>> udpate) Parameters Type Name Description Expression < Func <TTarget, TSource, Boolean >> predicate Expression < Func <TTarget, TSource, TTarget>> udpate Returns Type Description MergeDefinition.Operation <> | Improve this Doc View Source UpdateBySource(Expression<Func<TTarget, Boolean>>, Expression<Func<TTarget, TTarget>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation UpdateBySource(Expression<Func<TTarget, bool>> predicate, Expression<Func<TTarget, TTarget>> udpate) Parameters Type Name Description Expression < Func <TTarget, Boolean >> predicate Expression < Func <TTarget, TTarget>> udpate Returns Type Description MergeDefinition.Operation <> | Improve this Doc View Source UpdateWithDelete(Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>, Expression<Func<TTarget, TSource, Boolean>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation UpdateWithDelete(Expression<Func<TTarget, TSource, bool>> updatePredicate, Expression<Func<TTarget, TSource, TTarget>> udpate, Expression<Func<TTarget, TSource, bool>> deletePredicate) Parameters Type Name Description Expression < Func <TTarget, TSource, Boolean >> updatePredicate Expression < Func <TTarget, TSource, TTarget>> udpate Expression < Func <TTarget, TSource, Boolean >> deletePredicate Returns Type Description MergeDefinition.Operation <> Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.html": {
    "href": "api/LinqToDB.Mapping.html",
    "title": "Namespace LinqToDB.Mapping | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Mapping Classes AssociationAttribute Defines relation between tables or views. Could be applied to: instance properties and fields; instance and static methods. For associations, defined using static methods, this mapping side defined by type of first parameter. Also, optionally, you can pass data context object as extra method parameter. Based on association type - to one or to multiple records - result type should be target record's mapping type or IEquatable<T> collection. By default associations are used only for joins generation in LINQ queries and will have null value for loaded records. To load data into association, you should explicitly specify it in your query using LoadWith<T>(ITable<T>, Expression<Func<T, Object>>) method. AssociationDescriptor Stores association descriptor. ColumnAliasAttribute Specifies that current field or property is just an alias to another property or field. Currently this attribute has several issues: you can apply it to class or interface - such attribute will be ignored by linq2db; it is possible to define attribute without setting MemberName value; you can define alias to another alias property or field and potentially create loop. ColumnAttribute Configures mapping of mapping class member to database column. Could be applied directly to a property or field or to mapping class/interface. In latter case you should specify member name using MemberName property. ColumnDescriptor Stores mapping entity column descriptor. DataTypeAttribute This attribute allows to override default types, defined in mapping schema, for current column. Also see DataType and DbType . Applying this attribute to class or interface will have no effect. DynamicColumnInfo Represents a dynamic column, which doesn't have a backing field in it's declaring type. DynamicColumnsStoreAttribute Marks target member as dynamic columns store. EntityDescriptor Stores mapping entity descriptor. EntityMappingBuilder<T> Fluent mapping entity builder. FluentMappingBuilder Fluent mapping builder. IdentityAttribute Marks target column as identity column with value, generated on database side during insert operations. Identity columns will be ignored for insert and update operations with implicit column list like Insert<T>(IDataContext, T, String, String, String) or Update<T>(IDataContext, T, String, String, String) methods. InheritanceMapping Stores inheritance mapping information for single discriminator value. InheritanceMappingAttribute Defines to which type linq2db should map record based on discriminator value. You can apply this attribute to a base class or insterface, implemented by all child classes. Don't forget to define discriminator value storage column using IsDiscriminator . MappingSchema Mapping schema. MapValue Stores enum mapping information for single enum value. MapValueAttribute Defines bidirectional mapping between enum field value, used on client and database value, stored in database and used in queries. Enumeration field could have multiple MapValueAttribute attributes. Mapping from database value to enumeration performed when you load data from database. Linq2db will search for enumeration field with MapValueAttribute with required value. If attribute with such value is not found, you will receive LinqToDBException error. If you cannot specify all possible values using MapValueAttribute , you can specify custom mapping using methods like SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) . Mapping from enumeration value performed when you save it to database or use in query. If your enum field has multiple MapValueAttribute attributes, you should mark one of them as default using IsDefault property. NotColumnAttribute Marks current property or column to be ignored for mapping when explicit column mapping disabled. See IsColumnAttributeRequired . NotNullAttribute Sets nullability flag for current column to false . See NullableAttribute for more details. NullableAttribute Explicitly specifies that associated column could contain NULL values. Overrides default nullability flag from current mapping schema for property/field type. Has lower priority over CanBeNull . Using this attribute, you can allow NULL values for identity columns. PrimaryKeyAttribute Marks property or field as a member of primary key for current mapping type. PropertyMappingBuilder<T> Column or association fluent mapping builder. ScalarTypeAttribute Overrides default scalar detection for target class or structure. By default linq2db treats primitives and structs as scalar types. This attribute allows you to mark class or struct as scalar type or mark struct as non-scalar type. Also see IsStructIsScalarType . Note that if you marks some type as scalar, you will need to define custom mapping logic between object of that type and data parameter using SetConvertExpression(Type, Type, LambdaExpression, Boolean) methods. SequenceNameAttribute Specifies value generation sequence for mapped property of field. Currently it supported only for: Firebird generators; Oracle sequences; PostgreSQL serial pseudotypes/sequences; StoredProcedure This attribute is not used by linq2db and will be ignored. TableAttribute Maps databse table or view to a class or interface. You can apply it to any class including non-public, nester or abstract classes. Applying it to interfaces will allow you to perform queries against target table, but you need to specify projection in your query explicitly, if you want to select data from such mapping. Interfaces IColumnChangeDescriptor Mapping entity column descriptor change interface. IEntityChangeDescriptor Mapping entity descriptor change interface. Enums Relationship Defines relationship types for associations. See Relationship for more details."
  },
  "api/LinqToDB.Mapping.TableAttribute.html": {
    "href": "api/LinqToDB.Mapping.TableAttribute.html",
    "title": "Class TableAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class TableAttribute Maps databse table or view to a class or interface. You can apply it to any class including non-public, nester or abstract classes. Applying it to interfaces will allow you to perform queries against target table, but you need to specify projection in your query explicitly, if you want to select data from such mapping. Inheritance Object Attribute TableAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] public class TableAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source TableAttribute() Creates new table mapping atteribute. Declaration public TableAttribute() | Improve this Doc View Source TableAttribute(String) Creates new table mapping atteribute. Declaration public TableAttribute(string tableName) Parameters Type Name Description String tableName Name of mapped table or view in database. Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source Database Gets or sets optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. Declaration public string Database { get; set; } Property Value Type Description String | Improve this Doc View Source IsColumnAttributeRequired Gets or sets column mapping rules for current class or interface. If true , properties and fields should be marked with one of those attributes to be used for mapping: ColumnAttribute ; PrimaryKeyAttribute ; IdentityAttribute ; ColumnAliasAttribute . Otherwise all supported members of scalar type will be used: public instance fields and properties; explicit interface implmentation properties. Also see IsStructIsScalarType and ScalarTypeAttribute . Default value: true . Declaration public bool IsColumnAttributeRequired { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsView This property currently not implemented and setting it will have no any effect. Declaration public bool IsView { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets or sets name of table or view in database. When not specified, name of class or interface will be used. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Schema Gets or sets optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Declaration public string Schema { get; set; } Property Value Type Description String Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.StoredProcedure.html": {
    "href": "api/LinqToDB.Mapping.StoredProcedure.html",
    "title": "Class StoredProcedure | Linq To DB (aka linq2db)",
    "keywords": "Class StoredProcedure This attribute is not used by linq2db and will be ignored. Inheritance Object Attribute StoredProcedure Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)] public class StoredProcedure : Attribute, _Attribute Constructors | Improve this Doc View Source StoredProcedure() Declaration public StoredProcedure() | Improve this Doc View Source StoredProcedure(String) Declaration public StoredProcedure(string name) Parameters Type Name Description String name Properties | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description String | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Schema Declaration public string Schema { get; set; } Property Value Type Description String Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.SequenceNameAttribute.html": {
    "href": "api/LinqToDB.Mapping.SequenceNameAttribute.html",
    "title": "Class SequenceNameAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class SequenceNameAttribute Specifies value generation sequence for mapped property of field. Currently it supported only for: Firebird generators; Oracle sequences; PostgreSQL serial pseudotypes/sequences; Inheritance Object Attribute SequenceNameAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)] public class SequenceNameAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source SequenceNameAttribute(String) Creates attribute instance. Declaration public SequenceNameAttribute(string sequenceName) Parameters Type Name Description String sequenceName Sequence generator name. | Improve this Doc View Source SequenceNameAttribute(String, String) Creates attribute instance. Declaration public SequenceNameAttribute(string configuration, string sequenceName) Parameters Type Name Description String configuration Mapping schema configuration name. See Configuration . String sequenceName Sequence generator name. Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source SequenceName Gets or sets sequence generator name. Declaration public string SequenceName { get; set; } Property Value Type Description String Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.IMergeableSource-2.html": {
    "href": "api/LinqToDB.IMergeableSource-2.html",
    "title": "Interface IMergeableSource<TTarget, TSource> | Linq To DB (aka linq2db)",
    "keywords": "Interface IMergeableSource<TTarget, TSource> Merge command builder that have target table, source and match (ON) condition configured. You can only add operations to this type of builder. Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IMergeableSource<TTarget, TSource> Type Parameters Name Description TTarget Target record type. TSource Source record type. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.IMergeableOn-2.html": {
    "href": "api/LinqToDB.IMergeableOn-2.html",
    "title": "Interface IMergeableOn<TTarget, TSource> | Linq To DB (aka linq2db)",
    "keywords": "Interface IMergeableOn<TTarget, TSource> Merge command builder that have only target table and source configured. Only operation available for this type of builder is match (ON) condition configuration. Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IMergeableOn<TTarget, TSource> Type Parameters Name Description TTarget Target record type. TSource Source record type. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.html": {
    "href": "api/LinqToDB.Expressions.html",
    "title": "Namespace LinqToDB.Expressions | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Expressions Classes DefaultValueExpression Extensions MemberHelper SqlQueryDependentAttribute Used for controlling query caching of custom SQL Functions. Parameter with this attribute will be evaluated on client side before generating SQL. Structs TransformInfo Interfaces IGenericInfoProvider Generic conversions provider. Implementation class must be generic, as type parameters will be used for conversion initialization in SetInfo(MappingSchema) method. // this conversion provider adds conversion from IEnumerable<T> to ImmutableList<T> for specific T type parameter class EnumerableToImmutableListConvertProvider<T> : IGenericInfoProvider { public void SetInfo(MappingSchema mappingSchema) { mappingSchema.SetConvertExpression<IEnumerable<T>,ImmutableList<T>>( t => ImmutableList.Create(t.ToArray())); } } SetGenericConvertProvider(Type) for more details."
  },
  "api/LinqToDB.Expressions.TransformInfo.html": {
    "href": "api/LinqToDB.Expressions.TransformInfo.html",
    "title": "Struct TransformInfo | Linq To DB (aka linq2db)",
    "keywords": "Struct TransformInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public struct TransformInfo Constructors | Improve this Doc View Source TransformInfo(Expression) Declaration public TransformInfo(Expression expression) Parameters Type Name Description Expression expression | Improve this Doc View Source TransformInfo(Expression, Boolean) Declaration public TransformInfo(Expression expression, bool stop) Parameters Type Name Description Expression expression Boolean stop Fields | Improve this Doc View Source Expression Declaration public Expression Expression Field Value Type Description Expression | Improve this Doc View Source Stop Declaration public bool Stop Field Value Type Description Boolean Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.SqlQueryDependentAttribute.html": {
    "href": "api/LinqToDB.Expressions.SqlQueryDependentAttribute.html",
    "title": "Class SqlQueryDependentAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class SqlQueryDependentAttribute Used for controlling query caching of custom SQL Functions. Parameter with this attribute will be evaluated on client side before generating SQL. Inheritance Object Attribute SqlQueryDependentAttribute Implements _Attribute Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class SqlQueryDependentAttribute : Attribute, _Attribute Methods | Improve this Doc View Source ObjectsEqual(Object, Object) Compares two objects during expression tree comparison. Handles sequences also. Has to be overriden if specific comparison required Declaration public virtual bool ObjectsEqual(object obj1, object obj2) Parameters Type Name Description Object obj1 Object obj2 Returns Type Description Boolean Result of comparison Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.MemberHelper.html": {
    "href": "api/LinqToDB.Expressions.MemberHelper.html",
    "title": "Class MemberHelper | Linq To DB (aka linq2db)",
    "keywords": "Class MemberHelper Inheritance Object MemberHelper Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public static class MemberHelper Methods | Improve this Doc View Source ConstructorOf(Expression<Func<Object>>) Declaration public static ConstructorInfo ConstructorOf(Expression<Func<object>> func) Parameters Type Name Description Expression < Func < Object >> func Returns Type Description ConstructorInfo | Improve this Doc View Source ConstructorOf<T>(Expression<Func<T, Object>>) Declaration public static ConstructorInfo ConstructorOf<T>(Expression<Func<T, object>> func) Parameters Type Name Description Expression < Func <T, Object >> func Returns Type Description ConstructorInfo Type Parameters Name Description T | Improve this Doc View Source FieldOf<T>(Expression<Func<T, Object>>) Declaration public static FieldInfo FieldOf<T>(Expression<Func<T, object>> func) Parameters Type Name Description Expression < Func <T, Object >> func Returns Type Description FieldInfo Type Parameters Name Description T | Improve this Doc View Source GetMemberInfo(Expression) Gets the member information from given expression. Declaration public static MemberInfo GetMemberInfo(Expression expr) Parameters Type Name Description Expression expr The expression. Returns Type Description MemberInfo Remarks Returns member information for given expressions, e.g.: For: x => x.SomeProperty, returns MemberInfo of SomeProperty. For: x => x.SomeMethod(), returns MethodInfo of SomeMethod. For: x => new { X = x.Name }, return ConstructorInfo of anonymous type. For: x => Sql.Property<int>(x, \"SomeProperty\"), returns MemberInfo of \"SomeProperty\" if exists on type, otherwise returns DynamicColumnInfo for SomeProperty on given type. Exceptions Type Condition ArgumentException Only simple, non-navigational, member names are supported in this context (e.g.: x => Sql.Property(x, &quot;SomeProperty&quot;)). | Improve this Doc View Source GetMemberInfo(LambdaExpression) Gets the member information from given lambda expression. GetMemberInfo(Expression) Declaration public static MemberInfo GetMemberInfo(LambdaExpression func) Parameters Type Name Description LambdaExpression func The lambda expression. Returns Type Description MemberInfo Exceptions Type Condition ArgumentException Only simple, non-navigational, member names are supported in this context (e.g.: x => Sql.Property(x, &quot;SomeProperty&quot;)). | Improve this Doc View Source MemberOf<T>(Expression<Func<T, Object>>) Declaration public static MemberInfo MemberOf<T>(Expression<Func<T, object>> func) Parameters Type Name Description Expression < Func <T, Object >> func Returns Type Description MemberInfo Type Parameters Name Description T | Improve this Doc View Source MethodOf(Expression<Func<Object>>) Declaration public static MethodInfo MethodOf(Expression<Func<object>> func) Parameters Type Name Description Expression < Func < Object >> func Returns Type Description MethodInfo | Improve this Doc View Source MethodOf<T>(Expression<Func<T, Object>>) Declaration public static MethodInfo MethodOf<T>(Expression<Func<T, object>> func) Parameters Type Name Description Expression < Func <T, Object >> func Returns Type Description MethodInfo Type Parameters Name Description T | Improve this Doc View Source PropertyOf<T>(Expression<Func<T, Object>>) Declaration public static PropertyInfo PropertyOf<T>(Expression<Func<T, object>> func) Parameters Type Name Description Expression < Func <T, Object >> func Returns Type Description PropertyInfo Type Parameters Name Description T"
  },
  "api/LinqToDB.Expressions.IGenericInfoProvider.html": {
    "href": "api/LinqToDB.Expressions.IGenericInfoProvider.html",
    "title": "Interface IGenericInfoProvider | Linq To DB (aka linq2db)",
    "keywords": "Interface IGenericInfoProvider Generic conversions provider. Implementation class must be generic, as type parameters will be used for conversion initialization in SetInfo(MappingSchema) method. // this conversion provider adds conversion from IEnumerable<T> to ImmutableList<T> for specific T type parameter class EnumerableToImmutableListConvertProvider<T> : IGenericInfoProvider { public void SetInfo(MappingSchema mappingSchema) { mappingSchema.SetConvertExpression<IEnumerable<T>,ImmutableList<T>>( t => ImmutableList.Create(t.ToArray())); } } SetGenericConvertProvider(Type) for more details. Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public interface IGenericInfoProvider Methods | Improve this Doc View Source SetInfo(MappingSchema) IMplementation should use this method to provide conversions for generic types with type parameters, used to instantiate instance of current class. Declaration void SetInfo(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Mapping schema, to which conversions should be added. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.Extensions.html": {
    "href": "api/LinqToDB.Expressions.Extensions.html",
    "title": "Class Extensions | Linq To DB (aka linq2db)",
    "keywords": "Class Extensions Inheritance Object Extensions Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public static class Extensions Methods | Improve this Doc View Source Find(Expression, Func<Expression, Boolean>) Enumerates the given expr and returns the first sub-expression which matches the given func . If no expression was found, null is returned. Declaration public static Expression Find(this Expression expr, Func<Expression, bool> func) Parameters Type Name Description Expression expr Func < Expression , Boolean > func Returns Type Description Expression | Improve this Doc View Source Find(Expression, Expression) Enumerates the expression tree and returns the exprToFind if it's contained within the expr . Declaration public static Expression Find(this Expression expr, Expression exprToFind) Parameters Type Name Description Expression expr Expression exprToFind Returns Type Description Expression | Improve this Doc View Source GetBody(LambdaExpression, Expression) Returns the body of lambda but replaces the first parameter of that lambda expression with the exprToReplaceParameter expression. Declaration public static Expression GetBody(this LambdaExpression lambda, Expression exprToReplaceParameter) Parameters Type Name Description LambdaExpression lambda Expression exprToReplaceParameter Returns Type Description Expression | Improve this Doc View Source GetBody(LambdaExpression, Expression, Expression) Returns the body of lambda but replaces the first two parameters of that lambda expression with the given replace expressions. Declaration public static Expression GetBody(this LambdaExpression lambda, Expression exprToReplaceParameter1, Expression exprToReplaceParameter2) Parameters Type Name Description LambdaExpression lambda Expression exprToReplaceParameter1 Expression exprToReplaceParameter2 Returns Type Description Expression | Improve this Doc View Source GetCount(Expression, Func<Expression, Boolean>) Returns the total number of expression items which are matching the given. func . Declaration public static int GetCount(this Expression expr, Func<Expression, bool> func) Parameters Type Name Description Expression expr Expression-Tree which gets counted. Func < Expression , Boolean > func Predicate which is used to test if the given expression should be counted. Returns Type Description Int32 | Improve this Doc View Source GetDebugView(Expression) Gets the DebugView internal property value of provided expression. Declaration public static string GetDebugView(this Expression expression) Parameters Type Name Description Expression expression Expression to get DebugView. Returns Type Description String DebugView value. | Improve this Doc View Source Transform(Expression, Func<Expression, TransformInfo>) Declaration public static Expression Transform(this Expression expr, Func<Expression, TransformInfo> func) Parameters Type Name Description Expression expr Func < Expression , TransformInfo > func Returns Type Description Expression | Improve this Doc View Source Transform(Expression, Func<Expression, Expression>) Enumerates the expression tree of expr and might replace expression with the returned value of the given func . Declaration public static Expression Transform(this Expression expr, Func<Expression, Expression> func) Parameters Type Name Description Expression expr Func < Expression , Expression > func Returns Type Description Expression The modified expression. | Improve this Doc View Source Visit(Expression, Action<Expression>) Calls the given func for each child node of the expr . Declaration public static void Visit(this Expression expr, Action<Expression> func) Parameters Type Name Description Expression expr Action < Expression > func | Improve this Doc View Source Visit(Expression, Func<Expression, Boolean>) Calls the given func for each node of the expr . If the func returns false, no childs of the tested expression will be enumerated. Declaration public static void Visit(this Expression expr, Func<Expression, bool> func) Parameters Type Name Description Expression expr Func < Expression , Boolean > func"
  },
  "api/LinqToDB.Expressions.DefaultValueExpression.html": {
    "href": "api/LinqToDB.Expressions.DefaultValueExpression.html",
    "title": "Class DefaultValueExpression | Linq To DB (aka linq2db)",
    "keywords": "Class DefaultValueExpression Inheritance Object Expression DefaultValueExpression Inherited Members Expression.Assign(Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression) Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo) Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression) Expression.Equal(Expression, Expression) Expression.Equal(Expression, Expression, Boolean, MethodInfo) Expression.ReferenceEqual(Expression, Expression) Expression.NotEqual(Expression, Expression) Expression.NotEqual(Expression, Expression, Boolean, MethodInfo) Expression.ReferenceNotEqual(Expression, Expression) Expression.GreaterThan(Expression, Expression) Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo) Expression.LessThan(Expression, Expression) Expression.LessThan(Expression, Expression, Boolean, MethodInfo) Expression.GreaterThanOrEqual(Expression, Expression) Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo) Expression.LessThanOrEqual(Expression, Expression) Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo) Expression.AndAlso(Expression, Expression) Expression.AndAlso(Expression, Expression, MethodInfo) Expression.OrElse(Expression, Expression) Expression.OrElse(Expression, Expression, MethodInfo) Expression.Coalesce(Expression, Expression) Expression.Coalesce(Expression, Expression, LambdaExpression) Expression.Add(Expression, Expression) Expression.Add(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression) Expression.AddAssign(Expression, Expression, MethodInfo) Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddAssignChecked(Expression, Expression) Expression.AddAssignChecked(Expression, Expression, MethodInfo) Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.AddChecked(Expression, Expression) Expression.AddChecked(Expression, Expression, MethodInfo) Expression.Subtract(Expression, Expression) Expression.Subtract(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression) Expression.SubtractAssign(Expression, Expression, MethodInfo) Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractAssignChecked(Expression, Expression) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo) Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.SubtractChecked(Expression, Expression) Expression.SubtractChecked(Expression, Expression, MethodInfo) Expression.Divide(Expression, Expression) Expression.Divide(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression) Expression.DivideAssign(Expression, Expression, MethodInfo) Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Modulo(Expression, Expression) Expression.Modulo(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression) Expression.ModuloAssign(Expression, Expression, MethodInfo) Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Multiply(Expression, Expression) Expression.Multiply(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression) Expression.MultiplyAssign(Expression, Expression, MethodInfo) Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyAssignChecked(Expression, Expression) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo) Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression) Expression.MultiplyChecked(Expression, Expression) Expression.MultiplyChecked(Expression, Expression, MethodInfo) Expression.LeftShift(Expression, Expression) Expression.LeftShift(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression) Expression.LeftShiftAssign(Expression, Expression, MethodInfo) Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.RightShift(Expression, Expression) Expression.RightShift(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression) Expression.RightShiftAssign(Expression, Expression, MethodInfo) Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.And(Expression, Expression) Expression.And(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression) Expression.AndAssign(Expression, Expression, MethodInfo) Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Or(Expression, Expression) Expression.Or(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression) Expression.OrAssign(Expression, Expression, MethodInfo) Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ExclusiveOr(Expression, Expression) Expression.ExclusiveOr(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo) Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.Power(Expression, Expression) Expression.Power(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression) Expression.PowerAssign(Expression, Expression, MethodInfo) Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression) Expression.ArrayIndex(Expression, Expression) Expression.Block(Expression, Expression) Expression.Block(Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression) Expression.Block(Expression, Expression, Expression, Expression, Expression) Expression.Block(Expression[]) Expression.Block(IEnumerable<Expression>) Expression.Block(Type, Expression[]) Expression.Block(Type, IEnumerable<Expression>) Expression.Block(IEnumerable<ParameterExpression>, Expression[]) Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[]) Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>) Expression.Catch(Type, Expression) Expression.Catch(ParameterExpression, Expression) Expression.Catch(Type, Expression, Expression) Expression.Catch(ParameterExpression, Expression, Expression) Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression) Expression.Condition(Expression, Expression, Expression) Expression.Condition(Expression, Expression, Expression, Type) Expression.IfThen(Expression, Expression) Expression.IfThenElse(Expression, Expression, Expression) Expression.Constant(Object) Expression.Constant(Object, Type) Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32) Expression.ClearDebugInfo(SymbolDocumentInfo) Expression.Empty() Expression.Default(Type) Expression.MakeDynamic(Type, CallSiteBinder, Expression[]) Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>) Expression.MakeDynamic(Type, CallSiteBinder, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression) Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression[]) Expression.Dynamic(CallSiteBinder, Type, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression) Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>) Expression.ElementInit(MethodInfo, Expression[]) Expression.ElementInit(MethodInfo, IEnumerable<Expression>) Expression.VisitChildren(ExpressionVisitor) Expression.Accept(ExpressionVisitor) Expression.ReduceAndCheck() Expression.ReduceExtensions() Expression.ToString() Expression.Break(LabelTarget) Expression.Break(LabelTarget, Expression) Expression.Break(LabelTarget, Type) Expression.Break(LabelTarget, Expression, Type) Expression.Continue(LabelTarget) Expression.Continue(LabelTarget, Type) Expression.Return(LabelTarget) Expression.Return(LabelTarget, Type) Expression.Return(LabelTarget, Expression) Expression.Return(LabelTarget, Expression, Type) Expression.Goto(LabelTarget) Expression.Goto(LabelTarget, Type) Expression.Goto(LabelTarget, Expression) Expression.Goto(LabelTarget, Expression, Type) Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type) Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>) Expression.ArrayAccess(Expression, Expression[]) Expression.ArrayAccess(Expression, IEnumerable<Expression>) Expression.Property(Expression, String, Expression[]) Expression.Property(Expression, PropertyInfo, Expression[]) Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>) Expression.Invoke(Expression, Expression[]) Expression.Invoke(Expression, IEnumerable<Expression>) Expression.Label(LabelTarget) Expression.Label(LabelTarget, Expression) Expression.Label() Expression.Label(String) Expression.Label(Type) Expression.Label(Type, String) Expression.Lambda<TDelegate>(Expression, ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[]) Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>) Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, ParameterExpression[]) Expression.Lambda(Expression, Boolean, ParameterExpression[]) Expression.Lambda(Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, ParameterExpression[]) Expression.Lambda(Type, Expression, Boolean, ParameterExpression[]) Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>) Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>) Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>) Expression.GetFuncType(Type[]) Expression.TryGetFuncType(Type[], Type) Expression.GetActionType(Type[]) Expression.TryGetActionType(Type[], Type) Expression.GetDelegateType(Type[]) Expression.ListInit(NewExpression, Expression[]) Expression.ListInit(NewExpression, IEnumerable<Expression>) Expression.ListInit(NewExpression, MethodInfo, Expression[]) Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>) Expression.ListInit(NewExpression, ElementInit[]) Expression.ListInit(NewExpression, IEnumerable<ElementInit>) Expression.Loop(Expression) Expression.Loop(Expression, LabelTarget) Expression.Loop(Expression, LabelTarget, LabelTarget) Expression.Bind(MemberInfo, Expression) Expression.Bind(MethodInfo, Expression) Expression.Field(Expression, FieldInfo) Expression.Field(Expression, String) Expression.Field(Expression, Type, String) Expression.Property(Expression, String) Expression.Property(Expression, Type, String) Expression.Property(Expression, PropertyInfo) Expression.Property(Expression, MethodInfo) Expression.PropertyOrField(Expression, String) Expression.MakeMemberAccess(Expression, MemberInfo) Expression.MemberInit(NewExpression, MemberBinding[]) Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>) Expression.ListBind(MemberInfo, ElementInit[]) Expression.ListBind(MemberInfo, IEnumerable<ElementInit>) Expression.ListBind(MethodInfo, ElementInit[]) Expression.ListBind(MethodInfo, IEnumerable<ElementInit>) Expression.MemberBind(MemberInfo, MemberBinding[]) Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>) Expression.MemberBind(MethodInfo, MemberBinding[]) Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>) Expression.Call(MethodInfo, Expression) Expression.Call(MethodInfo, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression) Expression.Call(MethodInfo, Expression[]) Expression.Call(MethodInfo, IEnumerable<Expression>) Expression.Call(Expression, MethodInfo) Expression.Call(Expression, MethodInfo, Expression[]) Expression.Call(Expression, MethodInfo, Expression, Expression) Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) Expression.Call(Expression, String, Type[], Expression[]) Expression.Call(Type, String, Type[], Expression[]) Expression.Call(Expression, MethodInfo, IEnumerable<Expression>) Expression.ArrayIndex(Expression, Expression[]) Expression.ArrayIndex(Expression, IEnumerable<Expression>) Expression.NewArrayInit(Type, Expression[]) Expression.NewArrayInit(Type, IEnumerable<Expression>) Expression.NewArrayBounds(Type, Expression[]) Expression.NewArrayBounds(Type, IEnumerable<Expression>) Expression.New(ConstructorInfo) Expression.New(ConstructorInfo, Expression[]) Expression.New(ConstructorInfo, IEnumerable<Expression>) Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>) Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[]) Expression.New(Type) Expression.Parameter(Type) Expression.Variable(Type) Expression.Parameter(Type, String) Expression.Variable(Type, String) Expression.RuntimeVariables(ParameterExpression[]) Expression.RuntimeVariables(IEnumerable<ParameterExpression>) Expression.SwitchCase(Expression, Expression[]) Expression.SwitchCase(Expression, IEnumerable<Expression>) Expression.Switch(Expression, SwitchCase[]) Expression.Switch(Expression, Expression, SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[]) Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[]) Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>) Expression.SymbolDocument(String) Expression.SymbolDocument(String, Guid) Expression.SymbolDocument(String, Guid, Guid) Expression.SymbolDocument(String, Guid, Guid, Guid) Expression.TryFault(Expression, Expression) Expression.TryFinally(Expression, Expression) Expression.TryCatch(Expression, CatchBlock[]) Expression.TryCatchFinally(Expression, Expression, CatchBlock[]) Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>) Expression.TypeIs(Expression, Type) Expression.TypeEqual(Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type) Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo) Expression.Negate(Expression) Expression.Negate(Expression, MethodInfo) Expression.UnaryPlus(Expression) Expression.UnaryPlus(Expression, MethodInfo) Expression.NegateChecked(Expression) Expression.NegateChecked(Expression, MethodInfo) Expression.Not(Expression) Expression.Not(Expression, MethodInfo) Expression.IsFalse(Expression) Expression.IsFalse(Expression, MethodInfo) Expression.IsTrue(Expression) Expression.IsTrue(Expression, MethodInfo) Expression.OnesComplement(Expression) Expression.OnesComplement(Expression, MethodInfo) Expression.TypeAs(Expression, Type) Expression.Unbox(Expression, Type) Expression.Convert(Expression, Type) Expression.Convert(Expression, Type, MethodInfo) Expression.ConvertChecked(Expression, Type) Expression.ConvertChecked(Expression, Type, MethodInfo) Expression.ArrayLength(Expression) Expression.Quote(Expression) Expression.Rethrow() Expression.Rethrow(Type) Expression.Throw(Expression) Expression.Throw(Expression, Type) Expression.Increment(Expression) Expression.Increment(Expression, MethodInfo) Expression.Decrement(Expression) Expression.Decrement(Expression, MethodInfo) Expression.PreIncrementAssign(Expression) Expression.PreIncrementAssign(Expression, MethodInfo) Expression.PreDecrementAssign(Expression) Expression.PreDecrementAssign(Expression, MethodInfo) Expression.PostIncrementAssign(Expression) Expression.PostIncrementAssign(Expression, MethodInfo) Expression.PostDecrementAssign(Expression) Expression.PostDecrementAssign(Expression, MethodInfo) Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public class DefaultValueExpression : Expression Constructors | Improve this Doc View Source DefaultValueExpression(MappingSchema, Type) Declaration public DefaultValueExpression(MappingSchema mappingSchema, Type type) Parameters Type Name Description MappingSchema mappingSchema Type type Properties | Improve this Doc View Source CanReduce Declaration public override bool CanReduce { get; } Property Value Type Description Boolean Overrides Expression.CanReduce | Improve this Doc View Source NodeType Declaration public override ExpressionType NodeType { get; } Property Value Type Description ExpressionType Overrides Expression.NodeType | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description Type Overrides Expression.Type Methods | Improve this Doc View Source Reduce() Declaration public override Expression Reduce() Returns Type Description Expression Overrides Expression.Reduce() Extension Methods Extensions.GetDebugView(Expression) Extensions.GetCount(Expression, Func<Expression, Boolean>) Extensions.Visit(Expression, Action<Expression>) Extensions.Visit(Expression, Func<Expression, Boolean>) Extensions.Find(Expression, Expression) Extensions.Find(Expression, Func<Expression, Boolean>) Extensions.Transform(Expression, Func<Expression, Expression>) Extensions.Transform(Expression, Func<Expression, TransformInfo>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ExpressionMethodAttribute.html": {
    "href": "api/LinqToDB.ExpressionMethodAttribute.html",
    "title": "Class ExpressionMethodAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ExpressionMethodAttribute When applied to method or property, tells linq2db to replace them in queryable LINQ expression with another expression, returned by method, specified in this attribute. Requirements to expression method: expression method should be in the same class and replaced property of method; method could be private. When applied to property, expression: method should return function expression with the same return type as property type; expression method could take up to two parameters in any order - current object parameter and database connection context object. When applied to method: expression method should return function expression with the same return type as method return type; method cannot have void return type; parameters in expression method should go in the same order as in substituted method; expression could take method instance object as first parameter; expression could take database connection context object as last parameter; last method parameters could be ommited from expression method, but only if you don't add database connection context parameter. Inheritance Object Attribute ExpressionMethodAttribute Implements _Attribute Namespace : LinqToDB Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true, Inherited = true)] public class ExpressionMethodAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ExpressionMethodAttribute(String) Creates instance of attribute. Declaration public ExpressionMethodAttribute(string methodName) Parameters Type Name Description String methodName Name of method in the same class that returns substitution expression. | Improve this Doc View Source ExpressionMethodAttribute(String, String) Creates instance of attribute. Declaration public ExpressionMethodAttribute(string configuration, string methodName) Parameters Type Name Description String configuration Connection configuration, for which this attribute should be taken into account. String methodName Name of method in the same class that returns substitution expression. Properties | Improve this Doc View Source Configuration Mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source IsColumn Indicates whether a property should be mapped with this expression Method. Declaration public bool IsColumn { get; set; } Property Value Type Description Boolean True if the property should be mapped with this expression Method. | Improve this Doc View Source MethodName Name of method in the same class that returns substitution expression. Declaration public string MethodName { get; set; } Property Value Type Description String Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseDataProvider.html",
    "title": "Class SybaseDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseDataProvider Inheritance Object DataProviderBase DynamicDataProviderBase SybaseDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase.SyncRoot DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, Type, String) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) DataProviderBase.MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class SybaseDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source SybaseDataProvider() Declaration public SybaseDataProvider() | Improve this Doc View Source SybaseDataProvider(String) Declaration public SybaseDataProvider(string name) Parameters Type Name Description String name Properties | Improve this Doc View Source AssemblyName Declaration public string AssemblyName { get; } Property Value Type Description String | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.DataReaderTypeName | Improve this Doc View Source MappingSchema Declaration public override MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Overrides DataProviderBase.MappingSchema Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Declaration protected override BasicMergeBuilder<TTarget, TSource> GetMergeBuilder<TTarget, TSource>(DataConnection connection, IMergeable<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description DataConnection connection IMergeable <TTarget, TSource> merge Returns Type Description BasicMergeBuilder <TTarget, TSource> Type Parameters Name Description TTarget TSource Overrides LinqToDB.DataProvider.DataProviderBase.GetMergeBuilder<TTarget, TSource>(LinqToDB.Data.DataConnection, LinqToDB.IMergeable<TTarget, TSource>) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.html",
    "title": "Namespace LinqToDB.DataProvider.SqlServer | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SqlServer Classes FreeTextTableExpressionAttribute SqlServer2000MappingSchema SqlServer2005MappingSchema SqlServer2008MappingSchema SqlServer2012MappingSchema SqlServerConfiguration SqlServerDataProvider SqlServerMappingSchema SqlServerRetryPolicy SqlServerTools SqlServerTools.Sql SqlServerTransientExceptionDetector Detects the exceptions caused by SQL Server transient failures. Enums SqlServerVersion"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerVersion.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerVersion.html",
    "title": "Enum SqlServerVersion | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlServerVersion Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public enum SqlServerVersion Fields Name Description v2000 v2005 v2008 v2012 Extension Methods Sql.Between<SqlServerVersion>(SqlServerVersion, SqlServerVersion) Sql.NotBetween<SqlServerVersion>(SqlServerVersion, SqlServerVersion) SqlExtensions.In<SqlServerVersion>(IEnumerable<SqlServerVersion>) SqlExtensions.In<SqlServerVersion>(IQueryable<SqlServerVersion>) SqlExtensions.In<SqlServerVersion>(SqlServerVersion[]) SqlExtensions.In<SqlServerVersion>(SqlServerVersion, SqlServerVersion) SqlExtensions.In<SqlServerVersion>(SqlServerVersion, SqlServerVersion, SqlServerVersion) SqlExtensions.NotIn<SqlServerVersion>(IEnumerable<SqlServerVersion>) SqlExtensions.NotIn<SqlServerVersion>(IQueryable<SqlServerVersion>) SqlExtensions.NotIn<SqlServerVersion>(SqlServerVersion[]) SqlExtensions.NotIn<SqlServerVersion>(SqlServerVersion, SqlServerVersion) SqlExtensions.NotIn<SqlServerVersion>(SqlServerVersion, SqlServerVersion, SqlServerVersion)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerTransientExceptionDetector.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerTransientExceptionDetector.html",
    "title": "Class SqlServerTransientExceptionDetector | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerTransientExceptionDetector Detects the exceptions caused by SQL Server transient failures. Inheritance Object SqlServerTransientExceptionDetector Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerTransientExceptionDetector Methods | Improve this Doc View Source ShouldRetryOn(Exception) Declaration public static bool ShouldRetryOn(Exception ex) Parameters Type Name Description Exception ex Returns Type Description Boolean Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.html",
    "title": "Class SqlServerTools | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerTools Inheritance Object SqlServerTools Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public static class SqlServerTools Fields | Improve this Doc View Source DataReaderGetDecimal Declaration public static Func<IDataReader, int, decimal> DataReaderGetDecimal Field Value Type Description Func < IDataReader , Int32 , Decimal > | Improve this Doc View Source DataReaderGetMoney Declaration public static Func<IDataReader, int, decimal> DataReaderGetMoney Field Value Type Description Func < IDataReader , Int32 , Decimal > Properties | Improve this Doc View Source AutoDetectProvider Declaration public static bool AutoDetectProvider { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source AddUdtType(Type, String) Declaration public static void AddUdtType(Type type, string udtName) Parameters Type Name Description Type type String udtName | Improve this Doc View Source AddUdtType<T>(String, T, DataType) Declaration public static void AddUdtType<T>(string udtName, T nullValue, DataType dataType = DataType.Undefined) Parameters Type Name Description String udtName T nullValue DataType dataType Type Parameters Name Description T | Improve this Doc View Source CreateDataConnection(IDbConnection, SqlServerVersion) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, SqlServerVersion version = SqlServerVersion.v2008) Parameters Type Name Description IDbConnection connection SqlServerVersion version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, SqlServerVersion) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, SqlServerVersion version = SqlServerVersion.v2008) Parameters Type Name Description IDbTransaction transaction SqlServerVersion version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, SqlServerVersion) Declaration public static DataConnection CreateDataConnection(string connectionString, SqlServerVersion version = SqlServerVersion.v2008) Parameters Type Name Description String connectionString SqlServerVersion version Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider(SqlServerVersion) Declaration public static IDataProvider GetDataProvider(SqlServerVersion version = SqlServerVersion.v2008) Parameters Type Name Description SqlServerVersion version Returns Type Description IDataProvider | Improve this Doc View Source ProviderSpecificBulkCopy<T>(DataConnection, IEnumerable<T>, Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied ProviderSpecificBulkCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int? maxBatchSize = default(int? ), int? bulkCopyTimeout = default(int? ), bool keepIdentity = false, bool checkConstraints = false, int notifyAfter = 0, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Nullable < Int32 > maxBatchSize Nullable < Int32 > bulkCopyTimeout Boolean keepIdentity Boolean checkConstraints Int32 notifyAfter Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSqlTypes(Assembly) Declaration public static void ResolveSqlTypes(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveSqlTypes(String) Declaration public static void ResolveSqlTypes(string path) Parameters Type Name Description String path | Improve this Doc View Source SetIdentityInsert<T>(DataConnection, ITable<T>, Boolean) Declaration public static void SetIdentityInsert<T>(this DataConnection dataConnection, ITable<T> table, bool isOn) Parameters Type Name Description DataConnection dataConnection ITable <T> table Boolean isOn Type Parameters Name Description T | Improve this Doc View Source SetSqlTypes(Type, Type, Type) Declaration public static void SetSqlTypes(Type sqlHierarchyIdType, Type sqlGeographyType, Type sqlGeometryType) Parameters Type Name Description Type sqlHierarchyIdType Type sqlGeographyType Type sqlGeometryType"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.Sql.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.Sql.html",
    "title": "Class SqlServerTools.Sql | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerTools.Sql Inheritance Object SqlServerTools.Sql Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public static class Sql Fields | Improve this Doc View Source OptionRecompile Declaration public const string OptionRecompile = \"OPTION(RECOMPILE)\" Field Value Type Description String"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.html",
    "title": "Class SqlServerRetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerRetryPolicy Inheritance Object RetryPolicyBase SqlServerRetryPolicy Implements IRetryPolicy Inherited Members RetryPolicyBase.ExceptionsEncountered RetryPolicyBase.Random RetryPolicyBase.MaxRetryCount RetryPolicyBase.MaxRetryDelay RetryPolicyBase.Suspended RetryPolicyBase.Execute<TResult>(Func<TResult>) RetryPolicyBase.Execute(Action) RetryPolicyBase.ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) RetryPolicyBase.ExecuteAsync(Func<CancellationToken, Task>, CancellationToken) RetryPolicyBase.OnFirstExecution() RetryPolicyBase.OnRetry() Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerRetryPolicy : RetryPolicyBase, IRetryPolicy Constructors | Improve this Doc View Source SqlServerRetryPolicy() Creates a new instance of SqlServerRetryPolicy . Declaration public SqlServerRetryPolicy() Remarks The default retry limit is 5, which means that the total amount of time spent before failing is 26 seconds plus the random factor. | Improve this Doc View Source SqlServerRetryPolicy(Int32) Creates a new instance of SqlServerRetryPolicy . Declaration public SqlServerRetryPolicy(int maxRetryCount) Parameters Type Name Description Int32 maxRetryCount The maximum number of retry attempts. | Improve this Doc View Source SqlServerRetryPolicy(Int32, TimeSpan, ICollection<Int32>) Creates a new instance of SqlServerRetryPolicy . Declaration public SqlServerRetryPolicy(int maxRetryCount, TimeSpan maxRetryDelay, ICollection<int> errorNumbersToAdd) Parameters Type Name Description Int32 maxRetryCount The maximum number of retry attempts. TimeSpan maxRetryDelay The maximum delay in milliseconds between retries. ICollection < Int32 > errorNumbersToAdd Additional SQL error numbers that should be considered transient. Methods | Improve this Doc View Source GetNextDelay(Exception) Declaration protected override TimeSpan? GetNextDelay(Exception lastException) Parameters Type Name Description Exception lastException Returns Type Description Nullable < TimeSpan > Overrides RetryPolicyBase.GetNextDelay(Exception) | Improve this Doc View Source ShouldRetryOn(Exception) Declaration protected override bool ShouldRetryOn(Exception exception) Parameters Type Name Description Exception exception Returns Type Description Boolean Overrides RetryPolicyBase.ShouldRetryOn(Exception) Implements IRetryPolicy Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.html",
    "title": "Class SqlServerMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerMappingSchema Inheritance Object MappingSchema SqlServerMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerMappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServerMappingSchema() Declaration public SqlServerMappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteTools.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteTools.html",
    "title": "Class SQLiteTools | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteTools Inheritance Object SQLiteTools Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public static class SQLiteTools Fields | Improve this Doc View Source AlwaysCheckDbNull Declaration public static bool AlwaysCheckDbNull Field Value Type Description Boolean | Improve this Doc View Source AssemblyName Declaration public static string AssemblyName Field Value Type Description String Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source DetectedProviderName Declaration public static string DetectedProviderName { get; } Property Value Type Description String Methods | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public static void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description String databaseName Boolean deleteIfExists | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description String connectionString Returns Type Description DataConnection | Improve this Doc View Source DropDatabase(String) Declaration public static void DropDatabase(string databaseName) Parameters Type Name Description String databaseName | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Int32 maxBatchSize Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSQLite(Assembly) Declaration public static void ResolveSQLite(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveSQLite(String) Declaration public static void ResolveSQLite(string path) Parameters Type Name Description String path"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.html",
    "title": "Class SQLiteSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteSqlBuilder Inheritance Object BasicSqlBuilder SQLiteSqlBuilder Implements ISqlBuilder Inherited Members BasicSqlBuilder.Statement BasicSqlBuilder.Indent BasicSqlBuilder.BuildStep BasicSqlBuilder.SqlOptimizer BasicSqlBuilder.SqlProviderFlags BasicSqlBuilder.ValueToSqlConverter BasicSqlBuilder.StringBuilder BasicSqlBuilder.SkipAlias BasicSqlBuilder.IsNestedJoinParenthesisRequired BasicSqlBuilder.WrapJoinCondition BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, Int32) BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, Int32, Boolean) BasicSqlBuilder.BuildSqlBuilder(SelectQuery, Int32, Boolean) BasicSqlBuilder.WithStringBuilder<T>(StringBuilder, Func<T>) BasicSqlBuilder.ParenthesizeJoin(List<SqlJoinedTable>) BasicSqlBuilder.BuildSql() BasicSqlBuilder.BuildDeleteQuery(SqlDeleteStatement) BasicSqlBuilder.BuildDeleteQuery2(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateQuery(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildSelectQuery(SqlSelectStatement) BasicSqlBuilder.BuildCteBody(SelectQuery) BasicSqlBuilder.BuildInsertQuery(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildInsertQuery2(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildUnknownQuery() BasicSqlBuilder.ConvertTableName(StringBuilder, String, String, String) BasicSqlBuilder.IsRecursiveCteKeywordRequired BasicSqlBuilder.BuildWithClause(SqlWithClause) BasicSqlBuilder.BuildSelectClause(SelectQuery) BasicSqlBuilder.GetSelectedColumns(SelectQuery) BasicSqlBuilder.BuildColumns(SelectQuery) BasicSqlBuilder.BuildColumnExpression(SelectQuery, ISqlExpression, String, Boolean) BasicSqlBuilder.BuildDeleteClause(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateClause(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTable(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTableName(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateSet(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildEmptyInsert(SqlInsertClause) BasicSqlBuilder.BuildOutputSubclause(SqlStatement, SqlInsertClause) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, String, Boolean, Boolean) BasicSqlBuilder.BuildGetIdentity(SqlInsertClause) BasicSqlBuilder.BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) BasicSqlBuilder.BuildInsertOrUpdateQueryAsMerge(SqlInsertOrUpdateStatement, String) BasicSqlBuilder.ExtractMergeParametersIfCannotCombine(SqlInsertOrUpdateStatement, List<SqlSetExpression>) BasicSqlBuilder.EndLine BasicSqlBuilder.BuildInsertOrUpdateQueryAsUpdateInsert(SqlInsertOrUpdateStatement) BasicSqlBuilder.BuildTruncateTableStatement(SqlTruncateTableStatement) BasicSqlBuilder.BuildTruncateTable(SqlTruncateTableStatement) BasicSqlBuilder.BuildDropTableStatement(SqlDropTableStatement) BasicSqlBuilder.BuildStartCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildEndCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildCreateTableFieldType(SqlField) BasicSqlBuilder.BuildCreateTableNullAttribute(SqlField, DefaultNullable) BasicSqlBuilder.BuildCreateTableIdentityAttribute1(SqlField) BasicSqlBuilder.BuildPhysicalTable(ISqlTableSource, String) BasicSqlBuilder.BuildTableName(SqlTableSource, Boolean, Boolean) BasicSqlBuilder.BuildJoinType(SqlJoinedTable) BasicSqlBuilder.BuildWhere(SelectQuery) BasicSqlBuilder.BuildWhereClause(SelectQuery) BasicSqlBuilder.BuildGroupByClause(SelectQuery) BasicSqlBuilder.BuildHavingClause(SelectQuery) BasicSqlBuilder.BuildOrderByClause(SelectQuery) BasicSqlBuilder.SkipFirst BasicSqlBuilder.SkipFormat BasicSqlBuilder.FirstFormat(SelectQuery) BasicSqlBuilder.OffsetFirst BasicSqlBuilder.TakePercent BasicSqlBuilder.TakeTies BasicSqlBuilder.NeedSkip(SelectQuery) BasicSqlBuilder.NeedTake(SelectQuery) BasicSqlBuilder.BuildSkipFirst(SelectQuery) BasicSqlBuilder.BuildTakeHints(SelectQuery) BasicSqlBuilder.BuildOffsetLimit(SelectQuery) BasicSqlBuilder.BuildWhereSearchCondition(SelectQuery, SqlSearchCondition) BasicSqlBuilder.BuildSearchCondition(SqlSearchCondition) BasicSqlBuilder.BuildSearchCondition(Int32, SqlSearchCondition) BasicSqlBuilder.BuildPredicate(Int32, ISqlPredicate) BasicSqlBuilder.BuildPredicate(Int32, Int32, ISqlPredicate) BasicSqlBuilder.BuildLikePredicate(SqlPredicate.Like) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, String, Boolean, Boolean) BasicSqlBuilder.BuildExpression(ISqlExpression) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) BasicSqlBuilder.BuildExpression(Int32, ISqlExpression) BasicSqlBuilder.BuildValue(SqlDataType, Object) BasicSqlBuilder.BuildBinaryExpression(SqlBinaryExpression) BasicSqlBuilder.BuildFunction(SqlFunction) BasicSqlBuilder.GetPrecedence(ISqlPredicate) BasicSqlBuilder.AlternativeBuildSql(Boolean, Action, String) BasicSqlBuilder.AlternativeBuildSql2(Action) BasicSqlBuilder.AlternativeGetSelectedColumns(SelectQuery, BasicSqlBuilder.ColumnSelector) BasicSqlBuilder.IsDateDataType(ISqlExpression, String) BasicSqlBuilder.IsTimeDataType(ISqlExpression) BasicSqlBuilder.ConvertFunctionParameters(SqlFunction) BasicSqlBuilder.GetSequenceNameAttribute(SqlTable, Boolean) BasicSqlBuilder.GetTempAliases(Int32, String) BasicSqlBuilder.GetTableAlias(ISqlTableSource) BasicSqlBuilder.GetTableDatabaseName(SqlTable) BasicSqlBuilder.GetTableOwnerName(SqlTable) BasicSqlBuilder.GetTableSchemaName(SqlTable) BasicSqlBuilder.GetTablePhysicalName(SqlTable) BasicSqlBuilder.AppendIndent() BasicSqlBuilder.Add<T>(ISqlExpression, ISqlExpression) BasicSqlBuilder.IsReserved(String) BasicSqlBuilder.GetIdentityExpression(SqlTable) BasicSqlBuilder.PrintParameterName(StringBuilder, IDbDataParameter) BasicSqlBuilder.GetTypeName(IDbDataParameter) BasicSqlBuilder.GetUdtTypeName(IDbDataParameter) BasicSqlBuilder.GetProviderTypeName(IDbDataParameter) BasicSqlBuilder.PrintParameterType(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameterValue(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameters(StringBuilder, IDbDataParameter[]) BasicSqlBuilder.ApplyQueryHints(String, List<String>) BasicSqlBuilder.GetReserveSequenceValuesSql(Int32, String) BasicSqlBuilder.GetMaxValueSql(EntityDescriptor, ColumnDescriptor) BasicSqlBuilder.Name Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class SQLiteSqlBuilder : BasicSqlBuilder, ISqlBuilder Constructors | Improve this Doc View Source SQLiteSqlBuilder(ISqlOptimizer, SqlProviderFlags, ValueToSqlConverter) Declaration public SQLiteSqlBuilder(ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags, ValueToSqlConverter valueToSqlConverter) Parameters Type Name Description ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags ValueToSqlConverter valueToSqlConverter Properties | Improve this Doc View Source IsNestedJoinSupported Declaration public override bool IsNestedJoinSupported { get; } Property Value Type Description Boolean Overrides BasicSqlBuilder.IsNestedJoinSupported Methods | Improve this Doc View Source BuildCommand(SqlStatement, Int32) Declaration protected override void BuildCommand(SqlStatement statement, int commandNumber) Parameters Type Name Description SqlStatement statement Int32 commandNumber Overrides BasicSqlBuilder.BuildCommand(SqlStatement, Int32) | Improve this Doc View Source BuildCreateTableIdentityAttribute2(SqlField) Declaration protected override void BuildCreateTableIdentityAttribute2(SqlField field) Parameters Type Name Description SqlField field Overrides BasicSqlBuilder.BuildCreateTableIdentityAttribute2(SqlField) | Improve this Doc View Source BuildCreateTablePrimaryKey(SqlCreateTableStatement, String, IEnumerable<String>) Declaration protected override void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable<string> fieldNames) Parameters Type Name Description SqlCreateTableStatement createTable String pkName IEnumerable < String > fieldNames Overrides BasicSqlBuilder.BuildCreateTablePrimaryKey(SqlCreateTableStatement, String, IEnumerable<String>) | Improve this Doc View Source BuildDataType(SqlDataType, Boolean) Declaration protected override void BuildDataType(SqlDataType type, bool createDbType) Parameters Type Name Description SqlDataType type Boolean createDbType Overrides BasicSqlBuilder.BuildDataType(SqlDataType, Boolean) | Improve this Doc View Source BuildFromClause(SqlStatement, SelectQuery) Declaration protected override void BuildFromClause(SqlStatement statement, SelectQuery selectQuery) Parameters Type Name Description SqlStatement statement SelectQuery selectQuery Overrides BasicSqlBuilder.BuildFromClause(SqlStatement, SelectQuery) | Improve this Doc View Source BuildPredicate(ISqlPredicate) Declaration protected override void BuildPredicate(ISqlPredicate predicate) Parameters Type Name Description ISqlPredicate predicate Overrides BasicSqlBuilder.BuildPredicate(ISqlPredicate) | Improve this Doc View Source BuildTableName(StringBuilder, String, String, String) Declaration public override StringBuilder BuildTableName(StringBuilder sb, string database, string schema, string table) Parameters Type Name Description StringBuilder sb String database String schema String table Returns Type Description StringBuilder Overrides BasicSqlBuilder.BuildTableName(StringBuilder, String, String, String) | Improve this Doc View Source CommandCount(SqlStatement) Declaration public override int CommandCount(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description Int32 Overrides BasicSqlBuilder.CommandCount(SqlStatement) | Improve this Doc View Source Convert(Object, ConvertType) Declaration public override object Convert(object value, ConvertType convertType) Parameters Type Name Description Object value ConvertType convertType Returns Type Description Object Overrides BasicSqlBuilder.Convert(Object, ConvertType) | Improve this Doc View Source CreateSqlBuilder() Declaration protected override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides BasicSqlBuilder.CreateSqlBuilder() | Improve this Doc View Source LimitFormat(SelectQuery) Declaration protected override string LimitFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description String Overrides BasicSqlBuilder.LimitFormat(SelectQuery) | Improve this Doc View Source OffsetFormat(SelectQuery) Declaration protected override string OffsetFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description String Overrides BasicSqlBuilder.OffsetFormat(SelectQuery) Implements ISqlBuilder Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.html",
    "title": "Class SQLiteMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteMappingSchema Inheritance Object MappingSchema SQLiteMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class SQLiteMappingSchema : MappingSchema Constructors | Improve this Doc View Source SQLiteMappingSchema() Declaration public SQLiteMappingSchema() | Improve this Doc View Source SQLiteMappingSchema(String) Declaration protected SQLiteMappingSchema(string configuration) Parameters Type Name Description String configuration Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.MicrosoftMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.MicrosoftMappingSchema.html",
    "title": "Class SQLiteMappingSchema.MicrosoftMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteMappingSchema.MicrosoftMappingSchema Inheritance Object MappingSchema SQLiteMappingSchema.MicrosoftMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class MicrosoftMappingSchema : MappingSchema Constructors | Improve this Doc View Source MicrosoftMappingSchema() Declaration public MicrosoftMappingSchema() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.ClassicMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.ClassicMappingSchema.html",
    "title": "Class SQLiteMappingSchema.ClassicMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteMappingSchema.ClassicMappingSchema Inheritance Object MappingSchema SQLiteMappingSchema.ClassicMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class ClassicMappingSchema : MappingSchema Constructors | Improve this Doc View Source ClassicMappingSchema() Declaration public ClassicMappingSchema() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteDataProvider.html",
    "title": "Class SQLiteDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteDataProvider Inheritance Object DataProviderBase DynamicDataProviderBase SQLiteDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase.SyncRoot DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, Type, String) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) DataProviderBase.MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) DataProviderBase.GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class SQLiteDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source SQLiteDataProvider() Declaration public SQLiteDataProvider() | Improve this Doc View Source SQLiteDataProvider(String) Declaration public SQLiteDataProvider(string name) Parameters Type Name Description String name | Improve this Doc View Source SQLiteDataProvider(String, MappingSchema) Declaration protected SQLiteDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.DataReaderTypeName | Improve this Doc View Source MappingSchema Declaration public override MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Overrides DataProviderBase.MappingSchema Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description String databaseName Boolean deleteIfExists | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source DropDatabase(String) Declaration public void DropDatabase(string databaseName) Parameters Type Name Description String databaseName | Improve this Doc View Source GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration public override Expression GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema IDataReader reader Int32 idx Expression readerExpression Type toType Returns Type Description Expression Overrides DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public override bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader Int32 idx Returns Type Description Nullable < Boolean > Overrides DataProviderBase.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source NormalizeTypeName(String) Declaration protected override string NormalizeTypeName(string typeName) Parameters Type Name Description String typeName Returns Type Description String Overrides DataProviderBase.NormalizeTypeName(String) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlCe.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.html",
    "title": "Namespace LinqToDB.DataProvider.SqlCe | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SqlCe Classes SqlCeDataProvider SqlCeMappingSchema SqlCeTools"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeTools.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeTools.html",
    "title": "Class SqlCeTools | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeTools Inheritance Object SqlCeTools Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public static class SqlCeTools Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public static void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description String databaseName Boolean deleteIfExists | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description String connectionString Returns Type Description DataConnection | Improve this Doc View Source DropDatabase(String) Declaration public static void DropDatabase(string databaseName) Parameters Type Name Description String databaseName | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Int32 maxBatchSize Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSqlCe(Assembly) Declaration public static void ResolveSqlCe(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveSqlCe(String) Declaration public static void ResolveSqlCe(string path) Parameters Type Name Description String path"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaTools.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaTools.html",
    "title": "Class SapHanaTools | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaTools Inheritance Object SapHanaTools Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public static class SapHanaTools Fields | Improve this Doc View Source AssemblyName Declaration public static string AssemblyName Field Value Type Description String Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source ResolveSapHana(Assembly) Declaration public static void ResolveSapHana(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveSapHana(String) Declaration public static void ResolveSapHana(string path) Parameters Type Name Description String path"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.html",
    "title": "Class SapHanaOdbcDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaOdbcDataProvider Inheritance Object DataProviderBase SapHanaOdbcDataProvider Implements IDataProvider Inherited Members DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) DataProviderBase.MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) DataProviderBase.GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class SapHanaOdbcDataProvider : DataProviderBase, IDataProvider Constructors | Improve this Doc View Source SapHanaOdbcDataProvider() Declaration public SapHanaOdbcDataProvider() | Improve this Doc View Source SapHanaOdbcDataProvider(String, MappingSchema) Declaration protected SapHanaOdbcDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source DataReaderType Declaration public override Type DataReaderType { get; } Property Value Type Description Type Overrides DataProviderBase.DataReaderType Methods | Improve this Doc View Source ConvertParameterType(Type, DataType) Declaration public override Type ConvertParameterType(Type type, DataType dataType) Parameters Type Name Description Type type DataType dataType Returns Type Description Type Overrides DataProviderBase.ConvertParameterType(Type, DataType) | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected override IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description String connectionString Returns Type Description IDbConnection Overrides DataProviderBase.CreateConnectionInternal(String) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[]) Declaration public override void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection CommandType commandType String commandText DataParameter [] parameters Overrides DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration public override bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description Boolean Overrides DataProviderBase.IsCompatibleConnection(IDbConnection) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.html",
    "title": "Class SapHanaMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaMappingSchema Inheritance Object MappingSchema SapHanaMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class SapHanaMappingSchema : MappingSchema Constructors | Improve this Doc View Source SapHanaMappingSchema() Declaration public SapHanaMappingSchema() | Improve this Doc View Source SapHanaMappingSchema(String) Declaration protected SapHanaMappingSchema(string configuration) Parameters Type Name Description String configuration Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaDataProvider.html",
    "title": "Class SapHanaDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaDataProvider Inheritance Object DataProviderBase DynamicDataProviderBase SapHanaDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase.SyncRoot DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, Type, String) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) DataProviderBase.MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class SapHanaDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source SapHanaDataProvider() Declaration public SapHanaDataProvider() | Improve this Doc View Source SapHanaDataProvider(String, MappingSchema) Declaration protected SapHanaDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderType Declaration public override Type DataReaderType { get; } Property Value Type Description Type Overrides DynamicDataProviderBase.DataReaderType | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source ConvertParameterType(Type, DataType) Declaration public override Type ConvertParameterType(Type type, DataType dataType) Parameters Type Name Description Type type DataType dataType Returns Type Description Type Overrides DataProviderBase.ConvertParameterType(Type, DataType) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetConnectionType() Declaration protected override Type GetConnectionType() Returns Type Description Type Overrides DynamicDataProviderBase.GetConnectionType() | Improve this Doc View Source GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Declaration protected override BasicMergeBuilder<TTarget, TSource> GetMergeBuilder<TTarget, TSource>(DataConnection connection, IMergeable<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description DataConnection connection IMergeable <TTarget, TSource> merge Returns Type Description BasicMergeBuilder <TTarget, TSource> Type Parameters Name Description TTarget TSource Overrides LinqToDB.DataProvider.DataProviderBase.GetMergeBuilder<TTarget, TSource>(LinqToDB.Data.DataConnection, LinqToDB.IMergeable<TTarget, TSource>) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions.html",
    "title": "Class GetHanaSchemaOptions | Linq To DB (aka linq2db)",
    "keywords": "Class GetHanaSchemaOptions Inheritance Object GetSchemaOptions GetHanaSchemaOptions Inherited Members GetSchemaOptions.GetTables GetSchemaOptions.GetProcedures GetSchemaOptions.GenerateChar1AsString GetSchemaOptions.IncludedSchemas GetSchemaOptions.ExcludedSchemas GetSchemaOptions.IncludedCatalogs GetSchemaOptions.ExcludedCatalogs GetSchemaOptions.StringComparer GetSchemaOptions.LoadProcedure GetSchemaOptions.GetAssociationMemberName GetSchemaOptions.ProcedureLoadingProgress Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class GetHanaSchemaOptions : GetSchemaOptions Fields | Improve this Doc View Source GetStoredProcedureParameters Declaration public Func<ProcedureSchema, DataParameter[]> GetStoredProcedureParameters Field Value Type Description Func < ProcedureSchema , DataParameter []> | Improve this Doc View Source ThrowExceptionIfCalculationViewsNotAuthorized Declaration public bool ThrowExceptionIfCalculationViewsNotAuthorized Field Value Type Description Boolean Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute.html",
    "title": "Class CalculationViewInputParametersExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class CalculationViewInputParametersExpressionAttribute Inheritance Object Attribute Sql.TableFunctionAttribute Sql.TableExpressionAttribute CalculationViewInputParametersExpressionAttribute Implements _Attribute Inherited Members Sql.TableExpressionAttribute.Name Sql.TableExpressionAttribute.Expression Sql.TableFunctionAttribute.Configuration Sql.TableFunctionAttribute.Schema Sql.TableFunctionAttribute.Database Sql.TableFunctionAttribute.ArgIndices Sql.TableFunctionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class CalculationViewInputParametersExpressionAttribute : Sql.TableExpressionAttribute, _Attribute Constructors | Improve this Doc View Source CalculationViewInputParametersExpressionAttribute() Declaration public CalculationViewInputParametersExpressionAttribute() Methods | Improve this Doc View Source SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>) Declaration public override void SetTable(MappingSchema mappingSchema, SqlTable table, MemberInfo member, IEnumerable<Expression> expArgs, IEnumerable<ISqlExpression> sqlArgs) Parameters Type Name Description MappingSchema mappingSchema SqlTable table MemberInfo member IEnumerable < Expression > expArgs IEnumerable < ISqlExpression > sqlArgs Overrides Sql.TableExpressionAttribute.SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>) Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.BulkCopyReader.Parameter.html": {
    "href": "api/LinqToDB.DataProvider.BulkCopyReader.Parameter.html",
    "title": "Class BulkCopyReader.Parameter | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyReader.Parameter Inheritance Object BulkCopyReader.Parameter Implements IDbDataParameter IDataParameter Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class Parameter : IDbDataParameter, IDataParameter Properties | Improve this Doc View Source DbType Declaration public DbType DbType { get; set; } Property Value Type Description DbType | Improve this Doc View Source Direction Declaration public ParameterDirection Direction { get; set; } Property Value Type Description ParameterDirection | Improve this Doc View Source IsNullable Declaration public bool IsNullable { get; } Property Value Type Description Boolean | Improve this Doc View Source ParameterName Declaration public string ParameterName { get; set; } Property Value Type Description String | Improve this Doc View Source Precision Declaration public byte Precision { get; set; } Property Value Type Description Byte | Improve this Doc View Source Scale Declaration public byte Scale { get; set; } Property Value Type Description Byte | Improve this Doc View Source Size Declaration public int Size { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SourceColumn Declaration public string SourceColumn { get; set; } Property Value Type Description String | Improve this Doc View Source SourceVersion Declaration public DataRowVersion SourceVersion { get; set; } Property Value Type Description DataRowVersion | Improve this Doc View Source Value Declaration public object Value { get; set; } Property Value Type Description Object Implements IDbDataParameter IDataParameter Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.BasicMergeBuilder-2.html": {
    "href": "api/LinqToDB.DataProvider.BasicMergeBuilder-2.html",
    "title": "Class BasicMergeBuilder<TTarget, TSource> | Linq To DB (aka linq2db)",
    "keywords": "Class BasicMergeBuilder<TTarget, TSource> Basic merge builder's validation options set to validate merge operation on SQL:2008 level without specific database limitations or extensions. Inheritance Object BasicMergeBuilder<TTarget, TSource> Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class BasicMergeBuilder<TTarget, TSource> where TTarget : class where TSource : class Type Parameters Name Description TTarget TSource Constructors | Improve this Doc View Source BasicMergeBuilder(DataConnection, IMergeable<TTarget, TSource>) Declaration public BasicMergeBuilder(DataConnection dataConnection, IMergeable<TTarget, TSource> merge) Parameters Type Name Description DataConnection dataConnection IMergeable <TTarget, TSource> merge Fields | Improve this Doc View Source SourceAlias Declaration protected readonly string SourceAlias Field Value Type Description String Properties | Improve this Doc View Source BySourceOperationsSupported If true, merge command could include DeleteBySource and UpdateBySource operations. Those operations supported only by SQL Server. Declaration protected virtual bool BySourceOperationsSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source Command Declaration protected StringBuilder Command { get; } Property Value Type Description StringBuilder | Improve this Doc View Source DataContext Declaration protected IDataContext DataContext { get; } Property Value Type Description IDataContext | Improve this Doc View Source DeleteOperationSupported If true, merge command could include Delete operation. This operation is a part of SQL 2008 standard. Declaration protected virtual bool DeleteOperationSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source EmptySourceSupported If true, builder will generate command for empty enumerable source; otherwise command generation will be interrupted and 0 result returned without request to database. Declaration protected virtual bool EmptySourceSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source FakeSourceTable If SupportsSourceDirectValues set to false and provider doesn't support SELECTs without FROM clause, this property should contain name of table with single record. Declaration protected virtual string FakeSourceTable { get; } Property Value Type Description String | Improve this Doc View Source FakeSourceTableDatabase If SupportsSourceDirectValues set to false and provider doesn't support SELECTs without FROM clause, this property could contain name of database for table with single record. Declaration protected virtual string FakeSourceTableDatabase { get; } Property Value Type Description String | Improve this Doc View Source FakeSourceTableSchema If SupportsSourceDirectValues set to false and provider doesn't support SELECTs without FROM clause, this property could contain name of schema for table with single record. Declaration protected virtual string FakeSourceTableSchema { get; } Property Value Type Description String | Improve this Doc View Source IsIdentityInsertSupported If true, provider allows to set values of identity columns on insert operation. Declaration protected virtual bool IsIdentityInsertSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source MaxOperationsCount Maximum number of oprations, allowed in single merge command. If value is less than one - there is no limits on number of commands. This option is used by providers that have limitations on number of operations like SQL Server. Declaration protected virtual int MaxOperationsCount { get; } Property Value Type Description Int32 | Improve this Doc View Source Merge Declaration protected MergeDefinition<TTarget, TSource> Merge { get; } Property Value Type Description MergeDefinition <TTarget, TSource> | Improve this Doc View Source NoopCommand If true, command execution must return 0 without request to database. Declaration public bool NoopCommand { get; } Property Value Type Description Boolean | Improve this Doc View Source OperationPredicateSupported If true, merge command operations could have predicates. This is a part of SQL 2008 standard. Declaration protected virtual bool OperationPredicateSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source Parameters List of generated command parameters. Declaration public DataParameter[] Parameters { get; } Property Value Type Description DataParameter [] | Improve this Doc View Source ProviderName Declaration protected string ProviderName { get; } Property Value Type Description String | Improve this Doc View Source ProviderUsesAlternativeUpdate For providers, that use GetAlternativeUpdate(SqlUpdateStatement) method to build UPDATE FROM query, this property should be set to true. Declaration protected virtual bool ProviderUsesAlternativeUpdate { get; } Property Value Type Description Boolean | Improve this Doc View Source SameTypeOperationsAllowed If true, merge command could have multiple operations of the same type with predicates with upt to one command without predicate. This option is used by providers that doesn't allow multiple operations of the same type like SQL Server. Declaration protected virtual bool SameTypeOperationsAllowed { get; } Property Value Type Description Boolean | Improve this Doc View Source SqlBuilder Declaration protected BasicSqlBuilder SqlBuilder { get; } Property Value Type Description BasicSqlBuilder | Improve this Doc View Source SupportsColumnAliasesInTableAlias If true, provider supports column aliases specification after table alias. E.g. as table_alias (column_alias1, column_alias2). Declaration protected virtual bool SupportsColumnAliasesInTableAlias { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsParametersInSource If false, parameters in source subquery select list must have type. Declaration protected virtual bool SupportsParametersInSource { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsSourceDirectValues If true, provider supports list of VALUES as a source element of merge command. Declaration protected virtual bool SupportsSourceDirectValues { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsSourceSubQuery If true, provider allows to generate subquery as a source element of merge command. Declaration protected virtual bool SupportsSourceSubQuery { get; } Property Value Type Description Boolean | Improve this Doc View Source TargetDescriptor Declaration protected EntityDescriptor TargetDescriptor { get; } Property Value Type Description EntityDescriptor | Improve this Doc View Source TargetTableName Target table name, ready for use in SQL. Could include database/schema names or/and escaping. Declaration protected string TargetTableName { get; } Property Value Type Description String | Improve this Doc View Source UpdateWithDeleteOperationSupported When this operation enabled, merge command cannot include Delete or Update operations together with UpdateWithDelete operation in single command. Also use of Delte and Update operations in the same command not allowed even without UpdateWithDelete operation. This is Oracle-specific operation. Declaration protected virtual bool UpdateWithDeleteOperationSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AddFakeSourceTableName() Declaration protected virtual void AddFakeSourceTableName() | Improve this Doc View Source AddParameter(DataParameter) Declaration protected void AddParameter(DataParameter parameter) Parameters Type Name Description DataParameter parameter | Improve this Doc View Source AddSourceValue(ValueToSqlConverter, ColumnDescriptor, SqlDataType, Object, Boolean, Boolean) Declaration protected virtual void AddSourceValue(ValueToSqlConverter valueConverter, ColumnDescriptor column, SqlDataType columnType, object value, bool isFirstRow, bool isLastRow) Parameters Type Name Description ValueToSqlConverter valueConverter ColumnDescriptor column SqlDataType columnType Object value Boolean isFirstRow Boolean isLastRow | Improve this Doc View Source AddSourceValueAsParameter(DataType, Object) Declaration protected void AddSourceValueAsParameter(DataType dataType, object value) Parameters Type Name Description DataType dataType Object value | Improve this Doc View Source BuildColumnType(ColumnDescriptor, SqlDataType) Declaration protected void BuildColumnType(ColumnDescriptor column, SqlDataType columnType) Parameters Type Name Description ColumnDescriptor column SqlDataType columnType | Improve this Doc View Source BuildCommand() Generates SQL and parameters for merge command. Declaration public virtual string BuildCommand() Returns Type Description String Returns merge command SQL text. | Improve this Doc View Source BuildCustomInsert(Expression<Func<TSource, TTarget>>) Declaration protected void BuildCustomInsert(Expression<Func<TSource, TTarget>> create) Parameters Type Name Description Expression < Func <TSource, TTarget>> create | Improve this Doc View Source BuildCustomUpdate(Expression<Func<TTarget, TSource, TTarget>>) Declaration protected void BuildCustomUpdate(Expression<Func<TTarget, TSource, TTarget>> update) Parameters Type Name Description Expression < Func <TTarget, TSource, TTarget>> update | Improve this Doc View Source BuildDefaultInsert() Declaration protected void BuildDefaultInsert() | Improve this Doc View Source BuildDefaultUpdate() Declaration protected void BuildDefaultUpdate() | Improve this Doc View Source BuildDelete(Expression<Func<TTarget, TSource, Boolean>>) Declaration protected virtual void BuildDelete(Expression<Func<TTarget, TSource, bool>> predicate) Parameters Type Name Description Expression < Func <TTarget, TSource, Boolean >> predicate | Improve this Doc View Source BuildInsert(Expression<Func<TSource, Boolean>>, Expression<Func<TSource, TTarget>>) Declaration protected virtual void BuildInsert(Expression<Func<TSource, bool>> predicate, Expression<Func<TSource, TTarget>> create) Parameters Type Name Description Expression < Func <TSource, Boolean >> predicate Expression < Func <TSource, TTarget>> create | Improve this Doc View Source BuildMatch() Declaration protected virtual void BuildMatch() | Improve this Doc View Source BuildMergeInto() Declaration protected virtual void BuildMergeInto() | Improve this Doc View Source BuildOperation(MergeDefinition<TTarget, TSource>.Operation) Declaration protected virtual void BuildOperation(MergeDefinition<TTarget, TSource>.Operation operation) Parameters Type Name Description MergeDefinition.Operation <> operation | Improve this Doc View Source BuildPreambule() Allows to add text before generated merge command. Declaration protected virtual void BuildPreambule() | Improve this Doc View Source BuildPredicateByKeys(Type, Expression, Expression) Declaration protected void BuildPredicateByKeys(Type keyType, Expression targetKey, Expression sourceKey) Parameters Type Name Description Type keyType Expression targetKey Expression sourceKey | Improve this Doc View Source BuildPredicateByTargetAndSource(Expression<Func<TTarget, TSource, Boolean>>) Declaration protected void BuildPredicateByTargetAndSource(Expression<Func<TTarget, TSource, bool>> predicate) Parameters Type Name Description Expression < Func <TTarget, TSource, Boolean >> predicate | Improve this Doc View Source BuildSingleTablePredicate<TTable>(Expression<Func<TTable, Boolean>>, String, Boolean) Declaration protected void BuildSingleTablePredicate<TTable>(Expression<Func<TTable, bool>> predicate, string tableAlias, bool isSource) where TTable : class Parameters Type Name Description Expression < Func <TTable, Boolean >> predicate String tableAlias Boolean isSource Type Parameters Name Description TTable | Improve this Doc View Source BuildTerminator() Allows to add text after generated merge command. E.g. to specify command terminator if provider requires it. Declaration protected virtual void BuildTerminator() | Improve this Doc View Source BuildUpdate(Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>) Declaration protected virtual void BuildUpdate(Expression<Func<TTarget, TSource, bool>> predicate, Expression<Func<TTarget, TSource, TTarget>> update) Parameters Type Name Description Expression < Func <TTarget, TSource, Boolean >> predicate Expression < Func <TTarget, TSource, TTarget>> update | Improve this Doc View Source BuildUpdateWithDelete(Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>, Expression<Func<TTarget, TSource, Boolean>>) Declaration protected virtual void BuildUpdateWithDelete(Expression<Func<TTarget, TSource, bool>> updatePredicate, Expression<Func<TTarget, TSource, TTarget>> updateExpression, Expression<Func<TTarget, TSource, bool>> deletePredicate) Parameters Type Name Description Expression < Func <TTarget, TSource, Boolean >> updatePredicate Expression < Func <TTarget, TSource, TTarget>> updateExpression Expression < Func <TTarget, TSource, Boolean >> deletePredicate | Improve this Doc View Source GetNextParameterName() Declaration protected string GetNextParameterName() Returns Type Description String | Improve this Doc View Source MakeDefaultMatchPredicate() Declaration protected Expression<Func<TTarget, TSource, bool>> MakeDefaultMatchPredicate() Returns Type Description Expression < Func <TTarget, TSource, Boolean >> | Improve this Doc View Source OnInsertWithIdentity() Declaration protected virtual void OnInsertWithIdentity() | Improve this Doc View Source Validate() Validates command configuration to not violate common or provider-specific rules. Declaration public virtual void Validate() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.BasicMerge.html": {
    "href": "api/LinqToDB.DataProvider.BasicMerge.html",
    "title": "Class BasicMerge | Linq To DB (aka linq2db)",
    "keywords": "Class BasicMerge Basic MERGE operation implementation for all providers. For provider-specific logic create child class. Inheritance Object BasicMerge Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class BasicMerge Fields | Improve this Doc View Source ByTargetText Declaration protected string ByTargetText Field Value Type Description String | Improve this Doc View Source Columns Declaration protected List<BasicMerge.ColumnInfo> Columns Field Value Type Description List < BasicMerge.ColumnInfo > | Improve this Doc View Source Parameters Declaration protected List<DataParameter> Parameters Field Value Type Description List < DataParameter > | Improve this Doc View Source StringBuilder Declaration protected StringBuilder StringBuilder Field Value Type Description StringBuilder Properties | Improve this Doc View Source IsIdentitySupported Declaration protected virtual bool IsIdentitySupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source BuildCommand<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Builds MERGE INTO command text. For ON condition primary key fields used. UPDATE operation generated if there are any updateable columns (and only for them): NOT PK AND (identity OR !SkipOnUpdate). INSERT operation generated for following columns: identity OR !SkipOnInsert. DELETE operation generated if corresponding flag is set and could include optional condition. It is generated as WHEN NOT MATCHED BY SOURCE match clause, which is supported only by SQL Server. Declaration protected virtual bool BuildCommand<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName) where T : class Parameters Type Name Description DataConnection dataConnection Database connection. Expression < Func <T, Boolean >> deletePredicate Optional DELETE operation condition. Boolean delete Should MERGE command include DELETE operation or not. IEnumerable <T> source Source data. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. Returns Type Description Boolean True if command built and false if source is empty and command execution not required. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source BuildUsing<T>(DataConnection, IEnumerable<T>) Generates USING source statement with direct VALUES. Declaration protected virtual bool BuildUsing<T>(DataConnection dataConnection, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection Database connection. IEnumerable <T> source Source data collection. Returns Type Description Boolean Returns true on success an false if source is empty. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source BuildUsing2<T>(DataConnection, IEnumerable<T>, String, String) Generates USING source statement using union subquery with dummy select for each source record for databases that doesn't support VALUES in source. Declaration protected bool BuildUsing2<T>(DataConnection dataConnection, IEnumerable<T> source, string top, string fromDummyTable) Parameters Type Name Description DataConnection dataConnection Database connection. IEnumerable <T> source Source data collection. String top TOP 1 clause equivalent for current database engine. String fromDummyTable Database engine-specific dummy table for FROM statement with at least one record. Returns Type Description Boolean Returns true on success an false if source is empty. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Execute(DataConnection) Executes generated MERGE query against database connection. Declaration protected virtual int Execute(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description Int32 Returns total number of affected records - inserted, updated or deleted. | Improve this Doc View Source ExecuteAsync(DataConnection, CancellationToken) Declaration protected virtual Task<int> ExecuteAsync(DataConnection dataConnection, CancellationToken token) Parameters Type Name Description DataConnection dataConnection CancellationToken token Returns Type Description Task < Int32 > | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public virtual int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> predicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> predicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) Declaration public virtual Task<int> MergeAsync<T>(DataConnection dataConnection, Expression<Func<T, bool>> predicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName, CancellationToken token) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> predicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description T Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.BasicMerge.ColumnInfo.html": {
    "href": "api/LinqToDB.DataProvider.BasicMerge.ColumnInfo.html",
    "title": "Class BasicMerge.ColumnInfo | Linq To DB (aka linq2db)",
    "keywords": "Class BasicMerge.ColumnInfo Inheritance Object BasicMerge.ColumnInfo Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax protected class ColumnInfo Fields | Improve this Doc View Source Column Declaration public ColumnDescriptor Column Field Value Type Description ColumnDescriptor | Improve this Doc View Source Name Declaration public string Name Field Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.BasicBulkCopy.html": {
    "href": "api/LinqToDB.DataProvider.BasicBulkCopy.html",
    "title": "Class BasicBulkCopy | Linq To DB (aka linq2db)",
    "keywords": "Class BasicBulkCopy Inheritance Object BasicBulkCopy Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class BasicBulkCopy Methods | Improve this Doc View Source BulkCopy<T>(BulkCopyType, DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public virtual BulkCopyRowsCopied BulkCopy<T>(BulkCopyType bulkCopyType, DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description BulkCopyType bulkCopyType DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source CreateBulkCopyCreator(Type, Type, Type) Declaration protected Func<IDbConnection, int, IDisposable> CreateBulkCopyCreator(Type connectionType, Type bulkCopyType, Type bulkCopyOptionType) Parameters Type Name Description Type connectionType Type bulkCopyType Type bulkCopyOptionType Returns Type Description Func < IDbConnection , Int32 , IDisposable > | Improve this Doc View Source CreateBulkCopySubscriber(Object, String) Declaration protected Action<object, Action<object>> CreateBulkCopySubscriber(object bulkCopy, string eventName) Parameters Type Name Description Object bulkCopy String eventName Returns Type Description Action < Object , Action < Object >> | Improve this Doc View Source CreateColumnMappingCreator(Type) Declaration protected Func<int, string, object> CreateColumnMappingCreator(Type columnMappingType) Parameters Type Name Description Type columnMappingType Returns Type Description Func < Int32 , String , Object > | Improve this Doc View Source GetTableName(ISqlBuilder, BulkCopyOptions, EntityDescriptor) Declaration protected static string GetTableName(ISqlBuilder sqlBuilder, BulkCopyOptions options, EntityDescriptor descriptor) Parameters Type Name Description ISqlBuilder sqlBuilder BulkCopyOptions options EntityDescriptor descriptor Returns Type Description String | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration protected virtual BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy1<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration protected BulkCopyRowsCopied MultipleRowsCopy1<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy1<T>(MultipleRowsHelper<T>, DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration protected BulkCopyRowsCopied MultipleRowsCopy1<T>(MultipleRowsHelper<T> helper, DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description MultipleRowsHelper <T> helper DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy2<T>(DataConnection, BulkCopyOptions, IEnumerable<T>, String) Declaration protected virtual BulkCopyRowsCopied MultipleRowsCopy2<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source, string from) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source String from Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy2<T>(MultipleRowsHelper<T>, DataConnection, BulkCopyOptions, IEnumerable<T>, String) Declaration protected BulkCopyRowsCopied MultipleRowsCopy2<T>(MultipleRowsHelper<T> helper, DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source, string from) Parameters Type Name Description MultipleRowsHelper <T> helper DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source String from Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy3<T>(DataConnection, BulkCopyOptions, IEnumerable<T>, String) Declaration protected BulkCopyRowsCopied MultipleRowsCopy3<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source, string from) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source String from Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ProviderSpecificCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration protected virtual BulkCopyRowsCopied ProviderSpecificCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source RowByRowCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration protected virtual BulkCopyRowsCopied RowByRowCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source TraceAction(DataConnection, Func<String>, Func<Int32>) Declaration protected void TraceAction(DataConnection dataConnection, Func<string> commandText, Func<int> action) Parameters Type Name Description DataConnection dataConnection Func < String > commandText Func < Int32 > action Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Access.html": {
    "href": "api/LinqToDB.DataProvider.Access.html",
    "title": "Namespace LinqToDB.DataProvider.Access | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Access Classes AccessDataProvider AccessMappingSchema AccessTools"
  },
  "api/LinqToDB.DataContextTransaction.html": {
    "href": "api/LinqToDB.DataContextTransaction.html",
    "title": "Class DataContextTransaction | Linq To DB (aka linq2db)",
    "keywords": "Class DataContextTransaction Explicit data context DataContext transaction wrapper. Inheritance Object DataContextTransaction Implements IDisposable Namespace : LinqToDB Assembly : linq2db.dll Syntax public class DataContextTransaction : IDisposable Constructors | Improve this Doc View Source DataContextTransaction(DataContext) Creates new transaction wrapper. Declaration public DataContextTransaction(DataContext dataContext) Parameters Type Name Description DataContext dataContext Data context. Properties | Improve this Doc View Source DataContext Gets or sets transaction's data context. Declaration public DataContext DataContext { get; set; } Property Value Type Description DataContext Methods | Improve this Doc View Source BeginTransaction() Start new transaction with default isolation level. If underlying connection already has transaction, it will be rolled back. Declaration public void BeginTransaction() | Improve this Doc View Source BeginTransaction(IsolationLevel) Start new transaction with specified isolation level. If underlying connection already has transaction, it will be rolled back. Declaration public void BeginTransaction(IsolationLevel level) Parameters Type Name Description IsolationLevel level Transaction isolation level. | Improve this Doc View Source CommitTransaction() Commits started transaction. Declaration public void CommitTransaction() | Improve this Doc View Source Dispose() Rollbacks started transaction (if any). Declaration public void Dispose() | Improve this Doc View Source RollbackTransaction() Rollbacks started transaction. Declaration public void RollbackTransaction() Implements IDisposable Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataContext.html": {
    "href": "api/LinqToDB.DataContext.html",
    "title": "Class DataContext | Linq To DB (aka linq2db)",
    "keywords": "Class DataContext Implements abstraction over non-persistent database connection that could be released after query or transaction execution. Inheritance Object DataContext Implements IDataContext IDisposable IEntityServices Namespace : LinqToDB Assembly : linq2db.dll Syntax public class DataContext : IDataContext, IDisposable, IEntityServices Constructors | Improve this Doc View Source DataContext() Creates data context using default database configuration. DefaultConfiguration for more details. Declaration public DataContext() | Improve this Doc View Source DataContext(IDataProvider, String) Creates data context using specific data provider implementation and connection string. Declaration public DataContext(IDataProvider dataProvider, string connectionString) Parameters Type Name Description IDataProvider dataProvider Database provider implementation. String connectionString Database connection string. | Improve this Doc View Source DataContext(String) Creates data context using specific database configuration. Declaration public DataContext(string configurationString) Parameters Type Name Description String configurationString Connection configuration name. In case of null value, context will use default configuration. DefaultConfiguration for more details. Properties | Improve this Doc View Source CloseAfterUse Gets or sets flag to close context after query execution or leave it open. Declaration public bool CloseAfterUse { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ConfigurationString Gets initial value for database connection configuration name. Declaration public string ConfigurationString { get; } Property Value Type Description String | Improve this Doc View Source ConnectionString Gets initial value for database connection string. Declaration public string ConnectionString { get; } Property Value Type Description String | Improve this Doc View Source ContextID Gets or sets context identifier. Uses provider's name by default. Declaration public string ContextID { get; set; } Property Value Type Description String | Improve this Doc View Source DataProvider Gets database provider implementation. Declaration public IDataProvider DataProvider { get; } Property Value Type Description IDataProvider | Improve this Doc View Source InlineParameters Gets or sets option to force inline parameter values as literals into command text. If parameter inlining not supported for specific value type, it will be used as parameter. Declaration public bool InlineParameters { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsMarsEnabled Gets or sets status of Multiple Active Result Sets (MARS) feature. This feature available only for SQL Azure and SQL Server 2005+. Declaration public bool IsMarsEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source KeepConnectionAlive Gets or sets option to dispose underlying connection after use. Default value: false . Declaration public bool KeepConnectionAlive { get; set; } Property Value Type Description Boolean | Improve this Doc View Source LastQuery Contains text of last command, sent to database using current context. Declaration public string LastQuery { get; set; } Property Value Type Description String | Improve this Doc View Source MappingSchema Gets or sets mapping schema. Uses provider's mapping schema by default. Declaration public MappingSchema MappingSchema { get; set; } Property Value Type Description MappingSchema | Improve this Doc View Source NextQueryHints Gets list of query hints (writable collection), that will be used only for next query, executed through current context. Declaration public List<string> NextQueryHints { get; } Property Value Type Description List < String > | Improve this Doc View Source OnEntityCreated Occurs when a new entity is created. Declaration public Action<EntityCreatedEventArgs> OnEntityCreated { get; set; } Property Value Type Description Action < EntityCreatedEventArgs > | Improve this Doc View Source OnTraceConnection Gets or sets trace handler, used for data connection instance. Declaration public Action<TraceInfo> OnTraceConnection { get; set; } Property Value Type Description Action < TraceInfo > | Improve this Doc View Source QueryHints Gets list of query hints (writable collection), that will be used for all queries, executed through current context. Declaration public List<string> QueryHints { get; } Property Value Type Description List < String > Methods | Improve this Doc View Source BeginTransaction(Boolean) Starts new transaction for current context with default isolation level. If connection already has transaction, it will be rolled back. Declaration public virtual DataContextTransaction BeginTransaction(bool autoCommitOnDispose = true) Parameters Type Name Description Boolean autoCommitOnDispose Not supported, see issue . Returns Type Description DataContextTransaction Database transaction object. | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts new transaction for current context with specified isolation level. If connection already has transaction, it will be rolled back. Declaration public virtual DataContextTransaction BeginTransaction(IsolationLevel level) Parameters Type Name Description IsolationLevel level Transaction isolation level. Returns Type Description DataContextTransaction Database transaction object. Events | Improve this Doc View Source OnClosing Event, triggered before underlying connection closed on context disposal or closing. Not fired, if context doesn't have active connection (bug?). Declaration public event EventHandler OnClosing Event Type Type Description EventHandler Explicit Interface Implementations | Improve this Doc View Source IDataContext.Clone(Boolean) Declaration IDataContext IDataContext.Clone(bool forNestedQuery) Parameters Type Name Description Boolean forNestedQuery Returns Type Description IDataContext | Improve this Doc View Source IDataContext.Close() Declaration void IDataContext.Close() | Improve this Doc View Source IDataContext.CreateSqlProvider Declaration Func<ISqlBuilder> IDataContext.CreateSqlProvider { get; } Returns Type Description Func < ISqlBuilder > | Improve this Doc View Source IDataContext.DataReaderType Declaration Type IDataContext.DataReaderType { get; } Returns Type Description Type | Improve this Doc View Source IDataContext.GetQueryRunner(Query, Int32, Expression, Object[]) Declaration IQueryRunner IDataContext.GetQueryRunner(Query query, int queryNumber, Expression expression, object[] parameters) Parameters Type Name Description Query query Int32 queryNumber Expression expression Object [] parameters Returns Type Description IQueryRunner | Improve this Doc View Source IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration Expression IDataContext.GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema IDataReader reader Int32 idx Expression readerExpression Type toType Returns Type Description Expression | Improve this Doc View Source IDataContext.GetSqlOptimizer Declaration Func<ISqlOptimizer> IDataContext.GetSqlOptimizer { get; } Returns Type Description Func < ISqlOptimizer > | Improve this Doc View Source IDataContext.IsDBNullAllowed(IDataReader, Int32) Declaration bool? IDataContext.IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader Int32 idx Returns Type Description Nullable < Boolean > | Improve this Doc View Source IDataContext.SqlProviderFlags Declaration SqlProviderFlags IDataContext.SqlProviderFlags { get; } Returns Type Description SqlProviderFlags | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements IDataContext IDisposable IEntityServices Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertOrReplace<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplaceAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt32Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt64Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithDecimalIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt32IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt64IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithDecimalIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Update<T>(IDataContext, T, String, String, String) DataExtensions.UpdateAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Delete<T>(IDataContext, T, String, String, String) DataExtensions.DeleteAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaultNullable) DataExtensions.CreateTableAsync<T>(IDataContext, String, String, String, String, String, DefaultNullable, CancellationToken) DataExtensions.DropTable<T>(IDataContext, String, String, String, Boolean) DataExtensions.DropTableAsync<T>(IDataContext, String, String, String, Boolean, CancellationToken) DataExtensions.GetCte<T>(IDataContext, Func<IQueryable<T>, IQueryable<T>>, String) DataExtensions.GetCte<T>(IDataContext, String, Func<IQueryable<T>, IQueryable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IEnumerable<T>, BulkCopyOptions, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, String, IEnumerable<T>, BulkCopyOptions, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, Action<ITable<T>>) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.SelectAsync<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>)"
  },
  "api/LinqToDB.Data.html": {
    "href": "api/LinqToDB.Data.html",
    "title": "Namespace LinqToDB.Data | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Data Classes BulkCopyOptions Defines behavior of BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) method. BulkCopyRowsCopied CommandInfo Provides database connection command abstraction. DataConnection Implements persistent database connection abstraction over different database engines. Could be initialized using connection string name or connection string, or attached to existing connection or transaction. DataConnectionExtensions Contains extension methods for DataConnection class. DataConnectionTransaction DataParameter DataReader DataReaderAsync TraceInfo Enums BulkCopyType Bulk copy implementation type. For more details on support level by provider see this article . TraceInfoStep"
  },
  "api/LinqToDB.Data.TraceInfoStep.html": {
    "href": "api/LinqToDB.Data.TraceInfoStep.html",
    "title": "Enum TraceInfoStep | Linq To DB (aka linq2db)",
    "keywords": "Enum TraceInfoStep Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public enum TraceInfoStep Fields Name Description AfterExecute BeforeExecute Completed Error MapperCreated Extension Methods Sql.Between<TraceInfoStep>(TraceInfoStep, TraceInfoStep) Sql.NotBetween<TraceInfoStep>(TraceInfoStep, TraceInfoStep) SqlExtensions.In<TraceInfoStep>(IEnumerable<TraceInfoStep>) SqlExtensions.In<TraceInfoStep>(IQueryable<TraceInfoStep>) SqlExtensions.In<TraceInfoStep>(TraceInfoStep[]) SqlExtensions.In<TraceInfoStep>(TraceInfoStep, TraceInfoStep) SqlExtensions.In<TraceInfoStep>(TraceInfoStep, TraceInfoStep, TraceInfoStep) SqlExtensions.NotIn<TraceInfoStep>(IEnumerable<TraceInfoStep>) SqlExtensions.NotIn<TraceInfoStep>(IQueryable<TraceInfoStep>) SqlExtensions.NotIn<TraceInfoStep>(TraceInfoStep[]) SqlExtensions.NotIn<TraceInfoStep>(TraceInfoStep, TraceInfoStep) SqlExtensions.NotIn<TraceInfoStep>(TraceInfoStep, TraceInfoStep, TraceInfoStep)"
  },
  "api/LinqToDB.Data.RetryPolicy.RetryPolicyBase.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.RetryPolicyBase.html",
    "title": "Class RetryPolicyBase | Linq To DB (aka linq2db)",
    "keywords": "Class RetryPolicyBase Inheritance Object RetryPolicyBase SqlServerRetryPolicy Implements IRetryPolicy Namespace : LinqToDB.Data.RetryPolicy Assembly : linq2db.dll Syntax public abstract class RetryPolicyBase : IRetryPolicy Constructors | Improve this Doc View Source RetryPolicyBase(Int32, TimeSpan) Creates a new instance of RetryPolicyBase . Declaration protected RetryPolicyBase(int maxRetryCount, TimeSpan maxRetryDelay) Parameters Type Name Description Int32 maxRetryCount The maximum number of retry attempts. TimeSpan maxRetryDelay The maximum delay in milliseconds between retries. Properties | Improve this Doc View Source ExceptionsEncountered The list of exceptions that caused the operation to be retried so far. Declaration protected virtual List<Exception> ExceptionsEncountered { get; } Property Value Type Description List < Exception > | Improve this Doc View Source MaxRetryCount The maximum number of retry attempts. Declaration protected virtual int MaxRetryCount { get; } Property Value Type Description Int32 | Improve this Doc View Source MaxRetryDelay The maximum delay in milliseconds between retries. Declaration protected virtual TimeSpan MaxRetryDelay { get; } Property Value Type Description TimeSpan | Improve this Doc View Source Random A pseudo-random number generater that can be used to vary the delay between retries. Declaration protected virtual Random Random { get; } Property Value Type Description Random | Improve this Doc View Source Suspended Indicates whether the strategy is suspended. The strategy is typically suspending while executing to avoid recursive execution from nested operations. Declaration protected static bool Suspended { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Execute(Action) Declaration public virtual void Execute(Action operation) Parameters Type Name Description Action operation | Improve this Doc View Source Execute<TResult>(Func<TResult>) Executes the specified operation and returns the result. Declaration public virtual TResult Execute<TResult>(Func<TResult> operation) Parameters Type Name Description Func <TResult> operation A delegate representing an executable operation that returns the result of type TResult . Returns Type Description TResult The result from the operation. Type Parameters Name Description TResult The return type of operation . | Improve this Doc View Source ExecuteAsync(Func<CancellationToken, Task>, CancellationToken) Declaration public Task ExecuteAsync(Func<CancellationToken, Task> operation, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Func < CancellationToken , Task > operation CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) Executes the specified asynchronous operation and returns the result. Declaration public virtual Task<TResult> ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Func < CancellationToken , Task <TResult>> operation A function that returns a started task of type TResult . CancellationToken cancellationToken A cancellation token used to cancel the retry operation, but not operations that are already in flight or that already completed successfully. Returns Type Description Task <TResult> A task that will run to completion if the original task completes successfully (either the first time or after retrying transient failures). If the task fails with a non-transient error or the retry limit is reached, the returned task will become faulted and the exception must be observed. Type Parameters Name Description TResult The result type of the Task<TResult> returned by operation . | Improve this Doc View Source GetNextDelay(Exception) Determines whether the operation should be retried and the delay before the next attempt. Declaration protected virtual TimeSpan? GetNextDelay(Exception lastException) Parameters Type Name Description Exception lastException The exception thrown during the last execution attempt. Returns Type Description Nullable < TimeSpan > Returns the delay indicating how long to wait for before the next execution attempt if the operation should be retried; null otherwise | Improve this Doc View Source OnFirstExecution() Method called before the first operation execution Declaration protected virtual void OnFirstExecution() | Improve this Doc View Source OnRetry() Method called before retrying the operation execution Declaration protected virtual void OnRetry() | Improve this Doc View Source ShouldRetryOn(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration protected abstract bool ShouldRetryOn(Exception exception) Parameters Type Name Description Exception exception The exception object to be verified. Returns Type Description Boolean true if the specified exception is considered as transient, otherwise false . Implements IRetryPolicy Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.RetryPolicy.RetryLimitExceededException.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.RetryLimitExceededException.html",
    "title": "Class RetryLimitExceededException | Linq To DB (aka linq2db)",
    "keywords": "Class RetryLimitExceededException Inheritance Object Exception LinqToDBException RetryLimitExceededException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Namespace : LinqToDB.Data.RetryPolicy Assembly : linq2db.dll Syntax public class RetryLimitExceededException : LinqToDBException, ISerializable, _Exception Constructors | Improve this Doc View Source RetryLimitExceededException() Declaration public RetryLimitExceededException() | Improve this Doc View Source RetryLimitExceededException(Exception) Declaration public RetryLimitExceededException(Exception innerException) Parameters Type Name Description Exception innerException | Improve this Doc View Source RetryLimitExceededException(SerializationInfo, StreamingContext) Declaration protected RetryLimitExceededException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context Implements ISerializable _Exception Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.DataReader.html": {
    "href": "api/LinqToDB.Data.DataReader.html",
    "title": "Class DataReader | Linq To DB (aka linq2db)",
    "keywords": "Class DataReader Inheritance Object DataReader Implements IDisposable Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataReader : IDisposable Properties | Improve this Doc View Source CommandInfo Declaration public CommandInfo CommandInfo { get; set; } Property Value Type Description CommandInfo | Improve this Doc View Source Reader Declaration public IDataReader Reader { get; set; } Property Value Type Description IDataReader Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Execute<T>() Declaration public T Execute<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Query<T>() Declaration public IEnumerable<T> Query<T>() Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(T) Declaration public IEnumerable<T> Query<T>(T template) Parameters Type Name Description T template Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(Func<IDataReader, T>) Declaration public IEnumerable<T> Query<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Returns Type Description IEnumerable <T> Type Parameters Name Description T Implements IDisposable Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.DataParameter.html": {
    "href": "api/LinqToDB.Data.DataParameter.html",
    "title": "Class DataParameter | Linq To DB (aka linq2db)",
    "keywords": "Class DataParameter Inheritance Object DataParameter Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax [ScalarType] public class DataParameter Constructors | Improve this Doc View Source DataParameter() Declaration public DataParameter() | Improve this Doc View Source DataParameter(String, Object) Declaration public DataParameter(string name, object value) Parameters Type Name Description String name Object value | Improve this Doc View Source DataParameter(String, Object, DataType) Declaration public DataParameter(string name, object value, DataType dataType) Parameters Type Name Description String name Object value DataType dataType Properties | Improve this Doc View Source DataType Gets or sets the DataType of the parameter. Declaration public DataType DataType { get; set; } Property Value Type Description DataType One of the DataType values. The default is Undefined . | Improve this Doc View Source Direction Gets or sets a value indicating whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter. Declaration public ParameterDirection? Direction { get; set; } Property Value Type Description Nullable < ParameterDirection > One of the ParameterDirection values. The default is Input. | Improve this Doc View Source IsArray Declaration public bool IsArray { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets or sets the name of the DataParameter . Declaration public string Name { get; set; } Property Value Type Description String The name of the DataParameter . The default is an empty string. | Improve this Doc View Source Size Gets or sets the maximum size, in bytes, of the data within the column. Declaration public int? Size { get; set; } Property Value Type Description Nullable < Int32 > The maximum size, in bytes, of the data within the column. The default value is inferred from the parameter value. | Improve this Doc View Source Value Gets or sets the value of the parameter. Declaration public object Value { get; set; } Property Value Type Description Object An Object that is the value of the parameter. The default value is null. Methods | Improve this Doc View Source Binary(String, Byte[]) Declaration public static DataParameter Binary(string name, byte[] value) Parameters Type Name Description String name Byte [] value Returns Type Description DataParameter | Improve this Doc View Source Binary(String, Binary) Declaration public static DataParameter Binary(string name, Binary value) Parameters Type Name Description String name Binary value Returns Type Description DataParameter | Improve this Doc View Source BinaryJson(String, String) Declaration public static DataParameter BinaryJson(string name, string value) Parameters Type Name Description String name String value Returns Type Description DataParameter | Improve this Doc View Source BitArray(String, BitArray) Declaration public static DataParameter BitArray(string name, BitArray value) Parameters Type Name Description String name BitArray value Returns Type Description DataParameter | Improve this Doc View Source Blob(String, Byte[]) Declaration public static DataParameter Blob(string name, byte[] value) Parameters Type Name Description String name Byte [] value Returns Type Description DataParameter | Improve this Doc View Source Boolean(String, Boolean) Declaration public static DataParameter Boolean(string name, bool value) Parameters Type Name Description String name Boolean value Returns Type Description DataParameter | Improve this Doc View Source Byte(String, Byte) Declaration public static DataParameter Byte(string name, byte value) Parameters Type Name Description String name Byte value Returns Type Description DataParameter | Improve this Doc View Source Char(String, Char) Declaration public static DataParameter Char(string name, char value) Parameters Type Name Description String name Char value Returns Type Description DataParameter | Improve this Doc View Source Char(String, String) Declaration public static DataParameter Char(string name, string value) Parameters Type Name Description String name String value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Boolean) Declaration public static DataParameter Create(string name, bool value) Parameters Type Name Description String name Boolean value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Byte) Declaration public static DataParameter Create(string name, byte value) Parameters Type Name Description String name Byte value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Byte[]) Declaration public static DataParameter Create(string name, byte[] value) Parameters Type Name Description String name Byte [] value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Char) Declaration public static DataParameter Create(string name, char value) Parameters Type Name Description String name Char value Returns Type Description DataParameter | Improve this Doc View Source Create(String, BitArray) Declaration public static DataParameter Create(string name, BitArray value) Parameters Type Name Description String name BitArray value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Dictionary<String, String>) Declaration public static DataParameter Create(string name, Dictionary<string, string> value) Parameters Type Name Description String name Dictionary < String , String > value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Binary) Declaration public static DataParameter Create(string name, Binary value) Parameters Type Name Description String name Binary value Returns Type Description DataParameter | Improve this Doc View Source Create(String, DateTime) Declaration public static DataParameter Create(string name, DateTime value) Parameters Type Name Description String name DateTime value Returns Type Description DataParameter | Improve this Doc View Source Create(String, DateTimeOffset) Declaration public static DataParameter Create(string name, DateTimeOffset value) Parameters Type Name Description String name DateTimeOffset value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Decimal) Declaration public static DataParameter Create(string name, decimal value) Parameters Type Name Description String name Decimal value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Double) Declaration public static DataParameter Create(string name, double value) Parameters Type Name Description String name Double value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Guid) Declaration public static DataParameter Create(string name, Guid value) Parameters Type Name Description String name Guid value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Int16) Declaration public static DataParameter Create(string name, short value) Parameters Type Name Description String name Int16 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Int32) Declaration public static DataParameter Create(string name, int value) Parameters Type Name Description String name Int32 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Int64) Declaration public static DataParameter Create(string name, long value) Parameters Type Name Description String name Int64 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, SByte) Declaration [CLSCompliant(false)] public static DataParameter Create(string name, sbyte value) Parameters Type Name Description String name SByte value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Single) Declaration public static DataParameter Create(string name, float value) Parameters Type Name Description String name Single value Returns Type Description DataParameter | Improve this Doc View Source Create(String, String) Declaration public static DataParameter Create(string name, string value) Parameters Type Name Description String name String value Returns Type Description DataParameter | Improve this Doc View Source Create(String, TimeSpan) Declaration public static DataParameter Create(string name, TimeSpan value) Parameters Type Name Description String name TimeSpan value Returns Type Description DataParameter | Improve this Doc View Source Create(String, UInt16) Declaration [CLSCompliant(false)] public static DataParameter Create(string name, ushort value) Parameters Type Name Description String name UInt16 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, UInt32) Declaration [CLSCompliant(false)] public static DataParameter Create(string name, uint value) Parameters Type Name Description String name UInt32 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, UInt64) Declaration [CLSCompliant(false)] public static DataParameter Create(string name, ulong value) Parameters Type Name Description String name UInt64 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, XDocument) Declaration public static DataParameter Create(string name, XDocument value) Parameters Type Name Description String name XDocument value Returns Type Description DataParameter | Improve this Doc View Source Create(String, XmlDocument) Declaration public static DataParameter Create(string name, XmlDocument value) Parameters Type Name Description String name XmlDocument value Returns Type Description DataParameter | Improve this Doc View Source Date(String, DateTime) Declaration public static DataParameter Date(string name, DateTime value) Parameters Type Name Description String name DateTime value Returns Type Description DataParameter | Improve this Doc View Source DateTime(String, DateTime) Declaration public static DataParameter DateTime(string name, DateTime value) Parameters Type Name Description String name DateTime value Returns Type Description DataParameter | Improve this Doc View Source DateTime2(String, DateTime) Declaration public static DataParameter DateTime2(string name, DateTime value) Parameters Type Name Description String name DateTime value Returns Type Description DataParameter | Improve this Doc View Source DateTimeOffset(String, DateTimeOffset) Declaration public static DataParameter DateTimeOffset(string name, DateTimeOffset value) Parameters Type Name Description String name DateTimeOffset value Returns Type Description DataParameter | Improve this Doc View Source Decimal(String, Decimal) Declaration public static DataParameter Decimal(string name, decimal value) Parameters Type Name Description String name Decimal value Returns Type Description DataParameter | Improve this Doc View Source Dictionary(String, IDictionary) Declaration public static DataParameter Dictionary(string name, IDictionary value) Parameters Type Name Description String name IDictionary value Returns Type Description DataParameter | Improve this Doc View Source Double(String, Double) Declaration public static DataParameter Double(string name, double value) Parameters Type Name Description String name Double value Returns Type Description DataParameter | Improve this Doc View Source Guid(String, Guid) Declaration public static DataParameter Guid(string name, Guid value) Parameters Type Name Description String name Guid value Returns Type Description DataParameter | Improve this Doc View Source Image(String, Byte[]) Declaration public static DataParameter Image(string name, byte[] value) Parameters Type Name Description String name Byte [] value Returns Type Description DataParameter | Improve this Doc View Source Int16(String, Int16) Declaration public static DataParameter Int16(string name, short value) Parameters Type Name Description String name Int16 value Returns Type Description DataParameter | Improve this Doc View Source Int32(String, Int32) Declaration public static DataParameter Int32(string name, int value) Parameters Type Name Description String name Int32 value Returns Type Description DataParameter | Improve this Doc View Source Int64(String, Int64) Declaration public static DataParameter Int64(string name, long value) Parameters Type Name Description String name Int64 value Returns Type Description DataParameter | Improve this Doc View Source Json(String, String) Declaration public static DataParameter Json(string name, string value) Parameters Type Name Description String name String value Returns Type Description DataParameter | Improve this Doc View Source Money(String, Decimal) Declaration public static DataParameter Money(string name, decimal value) Parameters Type Name Description String name Decimal value Returns Type Description DataParameter | Improve this Doc View Source NChar(String, Char) Declaration public static DataParameter NChar(string name, char value) Parameters Type Name Description String name Char value Returns Type Description DataParameter | Improve this Doc View Source NChar(String, String) Declaration public static DataParameter NChar(string name, string value) Parameters Type Name Description String name String value Returns Type Description DataParameter | Improve this Doc View Source NText(String, String) Declaration public static DataParameter NText(string name, string value) Parameters Type Name Description String name String value Returns Type Description DataParameter | Improve this Doc View Source NVarChar(String, Char) Declaration public static DataParameter NVarChar(string name, char value) Parameters Type Name Description String name Char value Returns Type Description DataParameter | Improve this Doc View Source NVarChar(String, String) Declaration public static DataParameter NVarChar(string name, string value) Parameters Type Name Description String name String value Returns Type Description DataParameter | Improve this Doc View Source SByte(String, SByte) Declaration [CLSCompliant(false)] public static DataParameter SByte(string name, sbyte value) Parameters Type Name Description String name SByte value Returns Type Description DataParameter | Improve this Doc View Source Single(String, Single) Declaration public static DataParameter Single(string name, float value) Parameters Type Name Description String name Single value Returns Type Description DataParameter | Improve this Doc View Source SmallDateTime(String, DateTime) Declaration public static DataParameter SmallDateTime(string name, DateTime value) Parameters Type Name Description String name DateTime value Returns Type Description DataParameter | Improve this Doc View Source SmallMoney(String, Decimal) Declaration public static DataParameter SmallMoney(string name, decimal value) Parameters Type Name Description String name Decimal value Returns Type Description DataParameter | Improve this Doc View Source Text(String, String) Declaration public static DataParameter Text(string name, string value) Parameters Type Name Description String name String value Returns Type Description DataParameter | Improve this Doc View Source Time(String, TimeSpan) Declaration public static DataParameter Time(string name, TimeSpan value) Parameters Type Name Description String name TimeSpan value Returns Type Description DataParameter | Improve this Doc View Source Timestamp(String, Byte[]) Declaration public static DataParameter Timestamp(string name, byte[] value) Parameters Type Name Description String name Byte [] value Returns Type Description DataParameter | Improve this Doc View Source Udt(String, Object) Declaration public static DataParameter Udt(string name, object value) Parameters Type Name Description String name Object value Returns Type Description DataParameter | Improve this Doc View Source UInt16(String, UInt16) Declaration [CLSCompliant(false)] public static DataParameter UInt16(string name, ushort value) Parameters Type Name Description String name UInt16 value Returns Type Description DataParameter | Improve this Doc View Source UInt32(String, UInt32) Declaration [CLSCompliant(false)] public static DataParameter UInt32(string name, uint value) Parameters Type Name Description String name UInt32 value Returns Type Description DataParameter | Improve this Doc View Source UInt64(String, UInt64) Declaration [CLSCompliant(false)] public static DataParameter UInt64(string name, ulong value) Parameters Type Name Description String name UInt64 value Returns Type Description DataParameter | Improve this Doc View Source VarBinary(String, Byte[]) Declaration public static DataParameter VarBinary(string name, byte[] value) Parameters Type Name Description String name Byte [] value Returns Type Description DataParameter | Improve this Doc View Source VarBinary(String, Binary) Declaration public static DataParameter VarBinary(string name, Binary value) Parameters Type Name Description String name Binary value Returns Type Description DataParameter | Improve this Doc View Source VarChar(String, Char) Declaration public static DataParameter VarChar(string name, char value) Parameters Type Name Description String name Char value Returns Type Description DataParameter | Improve this Doc View Source VarChar(String, String) Declaration public static DataParameter VarChar(string name, string value) Parameters Type Name Description String name String value Returns Type Description DataParameter | Improve this Doc View Source Variant(String, Object) Declaration public static DataParameter Variant(string name, object value) Parameters Type Name Description String name Object value Returns Type Description DataParameter | Improve this Doc View Source VarNumeric(String, Decimal) Declaration public static DataParameter VarNumeric(string name, decimal value) Parameters Type Name Description String name Decimal value Returns Type Description DataParameter | Improve this Doc View Source Xml(String, String) Declaration public static DataParameter Xml(string name, string value) Parameters Type Name Description String name String value Returns Type Description DataParameter | Improve this Doc View Source Xml(String, XDocument) Declaration public static DataParameter Xml(string name, XDocument value) Parameters Type Name Description String name XDocument value Returns Type Description DataParameter | Improve this Doc View Source Xml(String, XmlDocument) Declaration public static DataParameter Xml(string name, XmlDocument value) Parameters Type Name Description String name XmlDocument value Returns Type Description DataParameter Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.DataConnection.html": {
    "href": "api/LinqToDB.Data.DataConnection.html",
    "title": "Class DataConnection | Linq To DB (aka linq2db)",
    "keywords": "Class DataConnection Implements persistent database connection abstraction over different database engines. Could be initialized using connection string name or connection string, or attached to existing connection or transaction. Inheritance Object DataConnection Implements ICloneable IEntityServices IDataContext IDisposable Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataConnection : ICloneable, IEntityServices, IDataContext, IDisposable Constructors | Improve this Doc View Source DataConnection() Creates database connection object that uses default connection configuration from DefaultConfiguration property. Declaration public DataConnection() | Improve this Doc View Source DataConnection(IDataProvider, IDbConnection) Creates database connection object that uses specified database provider and connection. Declaration public DataConnection(IDataProvider dataProvider, IDbConnection connection) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. IDbConnection connection Existing database connection to use. Remarks connection would not be disposed. | Improve this Doc View Source DataConnection(IDataProvider, IDbConnection, MappingSchema) Creates database connection object that uses specified database provider, connection and mapping schema. Declaration public DataConnection(IDataProvider dataProvider, IDbConnection connection, MappingSchema mappingSchema) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. IDbConnection connection Existing database connection to use. MappingSchema mappingSchema Mapping schema to use with this connection. | Improve this Doc View Source DataConnection(IDataProvider, IDbConnection, Boolean) Creates database connection object that uses specified database provider and connection. Declaration public DataConnection(IDataProvider dataProvider, IDbConnection connection, bool disposeConnection) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. IDbConnection connection Existing database connection to use. Boolean disposeConnection If true connection would be disposed on DataConnection disposing | Improve this Doc View Source DataConnection(IDataProvider, IDbTransaction) Creates database connection object that uses specified database provider and transaction. Declaration public DataConnection(IDataProvider dataProvider, IDbTransaction transaction) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. IDbTransaction transaction Existing database transaction to use. | Improve this Doc View Source DataConnection(IDataProvider, IDbTransaction, MappingSchema) Creates database connection object that uses specified database provider, transaction and mapping schema. Declaration public DataConnection(IDataProvider dataProvider, IDbTransaction transaction, MappingSchema mappingSchema) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. IDbTransaction transaction Existing database transaction to use. MappingSchema mappingSchema Mapping schema to use with this connection. | Improve this Doc View Source DataConnection(IDataProvider, String) Creates database connection object that uses specified database provider and connection string. Declaration public DataConnection(IDataProvider dataProvider, string connectionString) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. String connectionString Database connection string to use for connection with database. | Improve this Doc View Source DataConnection(IDataProvider, String, MappingSchema) Creates database connection object that uses specified database provider, connection string and mapping schema. Declaration public DataConnection(IDataProvider dataProvider, string connectionString, MappingSchema mappingSchema) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. String connectionString Database connection string to use for connection with database. MappingSchema mappingSchema Mapping schema to use with this connection. | Improve this Doc View Source DataConnection(MappingSchema) Creates database connection object that uses default connection configuration from DefaultConfiguration property and provided mapping schema. Declaration public DataConnection(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Mapping schema to use with this connection. | Improve this Doc View Source DataConnection(String) Creates database connection object that uses provided connection configuration. Declaration public DataConnection(string configurationString) Parameters Type Name Description String configurationString Name of database connection configuration to use with this connection. In case of null , configuration from DefaultConfiguration property will be used. | Improve this Doc View Source DataConnection(String, MappingSchema) Creates database connection object that uses provided connection configuration and mapping schema. Declaration public DataConnection(string configurationString, MappingSchema mappingSchema) Parameters Type Name Description String configurationString Name of database connection configuration to use with this connection. In case of null, configuration from DefaultConfiguration property will be used. MappingSchema mappingSchema Mapping schema to use with this connection. | Improve this Doc View Source DataConnection(String, String) Creates database connection object that uses specified database provider and connection string. Declaration public DataConnection(string providerName, string connectionString) Parameters Type Name Description String providerName Name of database provider to use with this connection. ProviderName class for list of providers. String connectionString Database connection string to use for connection with database. | Improve this Doc View Source DataConnection(String, String, MappingSchema) Creates database connection object that uses specified database provider, connection string and mapping schema. Declaration public DataConnection(string providerName, string connectionString, MappingSchema mappingSchema) Parameters Type Name Description String providerName Name of database provider to use with this connection. ProviderName class for list of providers. String connectionString Database connection string to use for connection with database. MappingSchema mappingSchema Mapping schema to use with this connection. Fields | Improve this Doc View Source LastQuery Contains text of last command, sent to database using current connection. Declaration public string LastQuery Field Value Type Description String | Improve this Doc View Source WriteTraceLine Trace function. By Default use Debug class for logging, but could be replaced to log e.g. to your log file. First parameter contains trace message. Second parameter contains context ( DisplayName ) TraceSwitch Declaration public static Action<string, string> WriteTraceLine Field Value Type Description Action < String , String > Properties | Improve this Doc View Source Command Gets or sets command object, used by current connection. Declaration public IDbCommand Command { get; set; } Property Value Type Description IDbCommand | Improve this Doc View Source CommandTimeout Gets or sets command execution timeout. By default timeout is 0 (infinity). Declaration public int CommandTimeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ConfigurationString Database configuration name (connection string name). Declaration public string ConfigurationString { get; } Property Value Type Description String | Improve this Doc View Source Connection Gets underlying database connection, used by current connection object. Declaration public IDbConnection Connection { get; } Property Value Type Description IDbConnection | Improve this Doc View Source ConnectionString Database connection string. Declaration public string ConnectionString { get; } Property Value Type Description String | Improve this Doc View Source DataProvider Database provider implementation for specific database engine. Declaration public IDataProvider DataProvider { get; } Property Value Type Description IDataProvider | Improve this Doc View Source DefaultConfiguration Declaration public static string DefaultConfiguration { get; set; } Property Value Type Description String | Improve this Doc View Source DefaultDataProvider Declaration public static string DefaultDataProvider { get; set; } Property Value Type Description String | Improve this Doc View Source DefaultSettings Gets or sets default connection settings. By default contains settings from linq2db configuration section from configuration file (not supported by .Net Core). ILinqToDBSettings Declaration public static ILinqToDBSettings DefaultSettings { get; set; } Property Value Type Description ILinqToDBSettings | Improve this Doc View Source Disposed Declaration protected bool Disposed { get; } Property Value Type Description Boolean | Improve this Doc View Source ID For internal use only. Declaration public int ID { get; } Property Value Type Description Int32 | Improve this Doc View Source InlineParameters Gets or sets option to force inline parameter values as literals into command text. If parameter inlining not supported for specific value type, it will be used as parameter. Declaration public bool InlineParameters { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsMarsEnabled Gets or sets status of Multiple Active Result Sets (MARS) feature. This feature available only for SQL Azure and SQL Server 2005+. Declaration public bool IsMarsEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MappingSchema Gets maping schema, used for current connection. Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source NextQueryHints Gets list of query hints (writable collection), that will be used only for next query, executed through current connection. Declaration public List<string> NextQueryHints { get; } Property Value Type Description List < String > | Improve this Doc View Source OnEntityCreated Occurs when a new entity is created. Declaration public Action<EntityCreatedEventArgs> OnEntityCreated { get; set; } Property Value Type Description Action < EntityCreatedEventArgs > | Improve this Doc View Source OnTrace Gets or sets trace handler, used for all new connections. Declaration public static Action<TraceInfo> OnTrace { get; set; } Property Value Type Description Action < TraceInfo > | Improve this Doc View Source OnTraceConnection Gets or sets trace handler, used for current connection instance. Declaration public Action<TraceInfo> OnTraceConnection { get; set; } Property Value Type Description Action < TraceInfo > | Improve this Doc View Source QueryHints Gets list of query hints (writable collection), that will be used for all queries, executed through current connection. Declaration public List<string> QueryHints { get; } Property Value Type Description List < String > | Improve this Doc View Source RetryPolicy Retry policy for current connection. Declaration public IRetryPolicy RetryPolicy { get; set; } Property Value Type Description IRetryPolicy | Improve this Doc View Source ThrowOnDisposed Declaration public bool? ThrowOnDisposed { get; set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source TraceSwitch Gets or sets global data connection trace options. Declaration public static TraceSwitch TraceSwitch { get; set; } Property Value Type Description TraceSwitch | Improve this Doc View Source Transaction Gets current transaction, associated with connection. Declaration public IDbTransaction Transaction { get; } Property Value Type Description IDbTransaction Methods | Improve this Doc View Source AddConfiguration(String, String, IDataProvider) Register connection configuration with specified connection string and database provider implementation. Declaration public static void AddConfiguration(string configuration, string connectionString, IDataProvider dataProvider = null) Parameters Type Name Description String configuration Connection configuration name. String connectionString Connection string. IDataProvider dataProvider Database provider. If not specified, will use provider, registered using configuration value. | Improve this Doc View Source AddDataProvider(IDataProvider) Registers database provider implementation using Name name. Declaration public static void AddDataProvider(IDataProvider dataProvider) Parameters Type Name Description IDataProvider dataProvider Database provider implementation. | Improve this Doc View Source AddDataProvider(String, IDataProvider) Registers database provider implementation by provided unique name. Declaration public static void AddDataProvider(string providerName, IDataProvider dataProvider) Parameters Type Name Description String providerName Provider name, to which provider implementation will be mapped. IDataProvider dataProvider Database provider implementation. | Improve this Doc View Source AddMappingSchema(MappingSchema) Adds additional mapping schema to current connection. Declaration public DataConnection AddMappingSchema(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Mapping schema. Returns Type Description DataConnection Current connection object. | Improve this Doc View Source AddOrSetConfiguration(String, String, String) Declaration public static void AddOrSetConfiguration(string configuration, string connectionString, string dataProvider) Parameters Type Name Description String configuration String connectionString String dataProvider | Improve this Doc View Source AddProviderDetector(Func<IConnectionStringSettings, String, IDataProvider>) Registers database provider factory method. Factory accepts connection string settings and connection string. Could return null , if cannot create provider instance using provided options. Declaration public static void AddProviderDetector(Func<IConnectionStringSettings, string, IDataProvider> providerDetector) Parameters Type Name Description Func < IConnectionStringSettings , String , IDataProvider > providerDetector Factory method delegate. | Improve this Doc View Source BeginTransaction() Starts new transaction for current connection with default isolation level. If connection already has transaction, it will be rolled back. Declaration public virtual DataConnectionTransaction BeginTransaction() Returns Type Description DataConnectionTransaction Database transaction object. | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts new transaction for current connection with specified isolation level. If connection already have transaction, it will be rolled back. Declaration public virtual DataConnectionTransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description IsolationLevel isolationLevel Transaction isolation level. Returns Type Description DataConnectionTransaction Database transaction object. | Improve this Doc View Source CheckAndThrowOnDisposed() Declaration protected void CheckAndThrowOnDisposed() | Improve this Doc View Source ClearObjectReaderCache() Removes cached data mappers. Declaration public static void ClearObjectReaderCache() | Improve this Doc View Source Clone() Clones current connection. Declaration public object Clone() Returns Type Description Object Cloned connection. | Improve this Doc View Source Close() Closes and dispose associated underlying database transaction/connection. Declaration public virtual void Close() | Improve this Doc View Source CommitTransaction() Commits transaction (if any), associated with connection. Declaration public virtual void CommitTransaction() | Improve this Doc View Source CreateCommand() For internal use only. Declaration public IDbCommand CreateCommand() Returns Type Description IDbCommand | Improve this Doc View Source Dispose() Disposes connection. Declaration public void Dispose() | Improve this Doc View Source DisposeCommand() For internal use only. Declaration public void DisposeCommand() | Improve this Doc View Source EnsureConnectionAsync(CancellationToken) Declaration public Task EnsureConnectionAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source GetConnectionString(String) Returns connection string for specified connection name. Declaration public static string GetConnectionString(string configurationString) Parameters Type Name Description String configurationString Connection name. Returns Type Description String Connection string. | Improve this Doc View Source GetDataProvider(String) Returns database provider implementation, associated with provided connection configuration name. Declaration public static IDataProvider GetDataProvider(string configurationString) Parameters Type Name Description String configurationString Connection configuration name. Returns Type Description IDataProvider Database provider. | Improve this Doc View Source GetDataProvider(String, String) Returns database provider associated with provider name and connection string. Declaration public static IDataProvider GetDataProvider(string providerName, string connectionString) Parameters Type Name Description String providerName Provider name. String connectionString Connection string. Returns Type Description IDataProvider Database provider. | Improve this Doc View Source GetDataProvider(String, String, String) Returns database provider associated with provider name, configuration and connection string. Declaration public static IDataProvider GetDataProvider(string providerName, string configurationString, string connectionString) Parameters Type Name Description String providerName Provider name. String configurationString Connection configuration name. String connectionString Connection string. Returns Type Description IDataProvider Database provider. | Improve this Doc View Source GetRegisteredProviders() Returns registered database providers. Declaration public static IReadOnlyDictionary<string, IDataProvider> GetRegisteredProviders() Returns Type Description IReadOnlyDictionary < String , IDataProvider > Returns copy of registered providers\" | Improve this Doc View Source GetTable<T>() Returns queryable source for specified mapping class for current connection, mapped to database table or view. Declaration public ITable<T> GetTable<T>() where T : class Returns Type Description ITable <T> Queryable source. Type Parameters Name Description T Mapping class type. | Improve this Doc View Source GetTable<T>(Object, MethodInfo, Object[]) Returns queryable source for specified mapping class for current connection, mapped to table expression or function. It could be used e.g. for queries to table-valued functions or to decorate queried table with hints. Declaration public ITable<T> GetTable<T>(object instance, MethodInfo methodInfo, params object[] parameters) where T : class Parameters Type Name Description Object instance Instance object for methodInfo method or null for static method. MethodInfo methodInfo Method, decorated with expression attribute, based on Sql.TableFunctionAttribute . Object [] parameters Parameters for methodInfo method. Returns Type Description ITable <T> Queryable source. Type Parameters Name Description T Mapping class type. | Improve this Doc View Source ProcessQuery(SqlStatement) Declaration protected virtual SqlStatement ProcessQuery(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement | Improve this Doc View Source RollbackTransaction() Rollbacks transaction (if any), associated with connection. Declaration public virtual void RollbackTransaction() | Improve this Doc View Source SetConnectionString(String, String) Sets connection string for specified connection name. Declaration public static void SetConnectionString(string configuration, string connectionString) Parameters Type Name Description String configuration Connection name. String connectionString Connection string. | Improve this Doc View Source SetConnectionStrings(IEnumerable<IConnectionStringSettings>) Register connection strings for use by data connection class. Declaration public static void SetConnectionStrings(IEnumerable<IConnectionStringSettings> connectionStrings) Parameters Type Name Description IEnumerable < IConnectionStringSettings > connectionStrings Collection of connection string configurations. | Improve this Doc View Source TurnTraceSwitchOn(TraceLevel) Sets tracing level for data connections. Declaration public static void TurnTraceSwitchOn(TraceLevel traceLevel = TraceLevel.Info) Parameters Type Name Description TraceLevel traceLevel Connection tracing level. Events | Improve this Doc View Source OnClosed Event, triggered after connection closed using Close() method. Declaration public event EventHandler OnClosed Event Type Type Description EventHandler | Improve this Doc View Source OnClosing Event, triggered before connection closed using Close() method. Declaration public event EventHandler OnClosing Event Type Type Description EventHandler Explicit Interface Implementations | Improve this Doc View Source IDataContext.Clone(Boolean) Declaration IDataContext IDataContext.Clone(bool forNestedQuery) Parameters Type Name Description Boolean forNestedQuery Returns Type Description IDataContext | Improve this Doc View Source IDataContext.CloseAfterUse Declaration bool IDataContext.CloseAfterUse { get; set; } Returns Type Description Boolean | Improve this Doc View Source IDataContext.ContextID Declaration string IDataContext.ContextID { get; } Returns Type Description String | Improve this Doc View Source IDataContext.CreateSqlProvider Declaration Func<ISqlBuilder> IDataContext.CreateSqlProvider { get; } Returns Type Description Func < ISqlBuilder > | Improve this Doc View Source IDataContext.DataReaderType Declaration Type IDataContext.DataReaderType { get; } Returns Type Description Type | Improve this Doc View Source IDataContext.GetQueryRunner(Query, Int32, Expression, Object[]) Declaration IQueryRunner IDataContext.GetQueryRunner(Query query, int queryNumber, Expression expression, object[] parameters) Parameters Type Name Description Query query Int32 queryNumber Expression expression Object [] parameters Returns Type Description IQueryRunner | Improve this Doc View Source IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration Expression IDataContext.GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema IDataReader reader Int32 idx Expression readerExpression Type toType Returns Type Description Expression | Improve this Doc View Source IDataContext.GetSqlOptimizer Declaration Func<ISqlOptimizer> IDataContext.GetSqlOptimizer { get; } Returns Type Description Func < ISqlOptimizer > | Improve this Doc View Source IDataContext.IsDBNullAllowed(IDataReader, Int32) Declaration bool? IDataContext.IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader Int32 idx Returns Type Description Nullable < Boolean > | Improve this Doc View Source IDataContext.SqlProviderFlags Declaration SqlProviderFlags IDataContext.SqlProviderFlags { get; } Returns Type Description SqlProviderFlags Implements ICloneable IEntityServices IDataContext IDisposable Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertOrReplace<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplaceAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt32Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithInt64Identity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithDecimalIdentity<T>(IDataContext, T, String, String, String) DataExtensions.InsertWithIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt32IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithInt64IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.InsertWithDecimalIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Update<T>(IDataContext, T, String, String, String) DataExtensions.UpdateAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.Delete<T>(IDataContext, T, String, String, String) DataExtensions.DeleteAsync<T>(IDataContext, T, String, String, String, CancellationToken) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaultNullable) DataExtensions.CreateTableAsync<T>(IDataContext, String, String, String, String, String, DefaultNullable, CancellationToken) DataExtensions.DropTable<T>(IDataContext, String, String, String, Boolean) DataExtensions.DropTableAsync<T>(IDataContext, String, String, String, Boolean, CancellationToken) DataExtensions.GetCte<T>(IDataContext, Func<IQueryable<T>, IQueryable<T>>, String) DataExtensions.GetCte<T>(IDataContext, String, Func<IQueryable<T>, IQueryable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IEnumerable<T>, BulkCopyOptions, String, String, String) DataExtensions.CreateTempTable<T>(IDataContext, String, IEnumerable<T>, BulkCopyOptions, String, String) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, String, String, Action<ITable<T>>) DataExtensions.CreateTempTable<T>(IDataContext, String, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, Action<ITable<T>>) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.SelectAsync<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) DataConnectionExtensions.SetCommand(DataConnection, String) DataConnectionExtensions.SetCommand(DataConnection, String, DataParameter[]) DataConnectionExtensions.SetCommand(DataConnection, String, DataParameter) DataConnectionExtensions.SetCommand(DataConnection, String, Object) DataConnectionExtensions.Query<T>(DataConnection, Func<IDataReader, T>, String) DataConnectionExtensions.QueryProc<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) DataConnectionExtensions.Query<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) DataConnectionExtensions.Query<T>(DataConnection, Func<IDataReader, T>, String, Object) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, Object) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, Object, CancellationToken) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, Object) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, Object) DataConnectionExtensions.Query<T>(DataConnection, String) DataConnectionExtensions.Query<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryProc<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.Query<T>(DataConnection, String, DataParameter) DataConnectionExtensions.Query<T>(DataConnection, String, Object) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, CancellationToken) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, CancellationToken) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, DataParameter) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, DataParameter, CancellationToken) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, DataParameter) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, DataParameter, CancellationToken) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, Object) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, CancellationToken, Object) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, Object) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, CancellationToken, Object) DataConnectionExtensions.Query<T>(DataConnection, T, String, DataParameter[]) DataConnectionExtensions.Query<T>(DataConnection, T, String, Object) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, T, String, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, T, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, T, String, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, T, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, T, String, Object) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, T, String, CancellationToken, Object) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, T, String, Object) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, T, String, CancellationToken, Object) DataConnectionExtensions.Execute(DataConnection, String) DataConnectionExtensions.Execute(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteProc(DataConnection, String, DataParameter[]) DataConnectionExtensions.Execute(DataConnection, String, Object) DataConnectionExtensions.ExecuteAsync(DataConnection, String) DataConnectionExtensions.ExecuteAsync(DataConnection, String, CancellationToken) DataConnectionExtensions.ExecuteAsync(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteAsync(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.ExecuteAsync(DataConnection, String, Object) DataConnectionExtensions.ExecuteAsync(DataConnection, String, CancellationToken, Object) DataConnectionExtensions.ExecuteProcAsync(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteProcAsync(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.Execute<T>(DataConnection, String) DataConnectionExtensions.Execute<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.Execute<T>(DataConnection, String, DataParameter) DataConnectionExtensions.Execute<T>(DataConnection, String, Object) DataConnectionExtensions.ExecuteProc<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, CancellationToken) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, DataParameter) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, DataParameter, CancellationToken) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, Object) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, CancellationToken, Object) DataConnectionExtensions.ExecuteProcAsync<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteProcAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.ExecuteReader(DataConnection, String) DataConnectionExtensions.ExecuteReader(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteReader(DataConnection, String, DataParameter) DataConnectionExtensions.ExecuteReader(DataConnection, String, Object) DataConnectionExtensions.ExecuteReader(DataConnection, String, CommandType, CommandBehavior, DataParameter[]) DataConnectionExtensions.BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(DataConnection, Int32, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(DataConnection, IEnumerable<T>) DataConnectionExtensions.Merge<T>(DataConnection, IQueryable<T>, Expression<Func<T, Boolean>>, String, String, String) DataConnectionExtensions.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, IEnumerable<T>, String, String, String) DataConnectionExtensions.Merge<T>(DataConnection, Boolean, IEnumerable<T>, String, String, String) DataConnectionExtensions.Merge<T>(DataConnection, IEnumerable<T>, String, String, String) DataConnectionExtensions.MergeAsync<T>(DataConnection, IQueryable<T>, Expression<Func<T, Boolean>>, String, String, String, CancellationToken) DataConnectionExtensions.MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, IEnumerable<T>, String, String, String, CancellationToken) DataConnectionExtensions.MergeAsync<T>(DataConnection, Boolean, IEnumerable<T>, String, String, String, CancellationToken) DataConnectionExtensions.MergeAsync<T>(DataConnection, IEnumerable<T>, String, String, String, CancellationToken) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) OracleTools.MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>) SqlServerTools.SetIdentityInsert<T>(DataConnection, ITable<T>, Boolean)"
  },
  "api/LinqToDB.Data.CommandInfo.html": {
    "href": "api/LinqToDB.Data.CommandInfo.html",
    "title": "Class CommandInfo | Linq To DB (aka linq2db)",
    "keywords": "Class CommandInfo Provides database connection command abstraction. Inheritance Object CommandInfo Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class CommandInfo Constructors | Improve this Doc View Source CommandInfo(DataConnection, String) Creates database command instance using provided database connection and command text. Declaration public CommandInfo(DataConnection dataConnection, string commandText) Parameters Type Name Description DataConnection dataConnection Database connection instance. String commandText Command text. | Improve this Doc View Source CommandInfo(DataConnection, String, DataParameter) Creates database command instance using provided database connection, command text and single parameter. Declaration public CommandInfo(DataConnection dataConnection, string commandText, DataParameter parameter) Parameters Type Name Description DataConnection dataConnection Database connection instance. String commandText Command text. DataParameter parameter Command parameter. | Improve this Doc View Source CommandInfo(DataConnection, String, DataParameter[]) Creates database command instance using provided database connection, command text and parameters. Declaration public CommandInfo(DataConnection dataConnection, string commandText, params DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection Database connection instance. String commandText Command text. DataParameter [] parameters List of command parameters. | Improve this Doc View Source CommandInfo(DataConnection, String, Object) Creates database command instance using provided database connection, command text and parameters. Declaration public CommandInfo(DataConnection dataConnection, string commandText, object parameters) Parameters Type Name Description DataConnection dataConnection Database connection instance. String commandText Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Fields | Improve this Doc View Source CommandBehavior Command behavior flags. See CommandBehavior for more details. Default value: Default . Declaration public CommandBehavior CommandBehavior Field Value Type Description CommandBehavior | Improve this Doc View Source CommandText Command text. Declaration public string CommandText Field Value Type Description String | Improve this Doc View Source CommandType Type of command. See CommandType for all supported types. Default value: Text . Declaration public CommandType CommandType Field Value Type Description CommandType | Improve this Doc View Source DataConnection Instance of database connection, associated with command. Declaration public DataConnection DataConnection Field Value Type Description DataConnection | Improve this Doc View Source Parameters Command parameters. Declaration public DataParameter[] Parameters Field Value Type Description DataParameter [] Methods | Improve this Doc View Source ClearObjectReaderCache() Clears global cache of object mapping functions from query results and mapping functions from value to DataParameter . Declaration public static void ClearObjectReaderCache() | Improve this Doc View Source Execute() Executes command and returns number of affected records. Declaration public int Execute() Returns Type Description Int32 Number of records, affected by command execution. | Improve this Doc View Source Execute<T>() Executes command and returns single value. Declaration public T Execute<T>() Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync() Executes command asynchronously and returns number of affected records. Declaration public Task<int> ExecuteAsync() Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync(CancellationToken) Executes command asynchronously and returns number of affected records. Declaration public Task<int> ExecuteAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync<T>() Executes command asynchronously and returns single value. Declaration public Task<T> ExecuteAsync<T>() Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(CancellationToken) Executes command asynchronously and returns single value. Declaration public Task<T> ExecuteAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProc() Executes command using StoredProcedure command type and returns number of affected records. Declaration public int ExecuteProc() Returns Type Description Int32 Number of records, affected by command execution. | Improve this Doc View Source ExecuteProc<T>() Executes command using StoredProcedure command type and returns single value. Declaration public T ExecuteProc<T>() Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProcAsync() Executes command using StoredProcedure command type asynchronously and returns number of affected records. Declaration public Task<int> ExecuteProcAsync() Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteProcAsync(CancellationToken) Executes command using StoredProcedure command type asynchronously and returns number of affected records. Declaration public Task<int> ExecuteProcAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteProcAsync<T>() Executes command using StoredProcedure command type asynchronously and returns single value. Declaration public Task<T> ExecuteProcAsync<T>() Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProcAsync<T>(CancellationToken) Executes command using StoredProcedure command type asynchronously and returns single value. Declaration public Task<T> ExecuteProcAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteReader() Executes command and returns data reader instance. Declaration public DataReader ExecuteReader() Returns Type Description DataReader Data reader object. | Improve this Doc View Source ExecuteReaderAsync() Executes command asynchronously and returns data reader instance. Declaration public Task<DataReaderAsync> ExecuteReaderAsync() Returns Type Description Task < DataReaderAsync > Task with data reader object. | Improve this Doc View Source ExecuteReaderAsync(CancellationToken) Executes command asynchronously and returns data reader instance. Declaration public Task<DataReaderAsync> ExecuteReaderAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < DataReaderAsync > Task with data reader object. | Improve this Doc View Source ExecuteReaderProc() Executes command using StoredProcedure command type and returns data reader instance. Declaration public DataReader ExecuteReaderProc() Returns Type Description DataReader Data reader object. | Improve this Doc View Source Query<T>() Executes command and returns results as collection of values of specified type. Declaration public IEnumerable<T> Query<T>() Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(T) Executes command and returns results as collection of values of specified type. Declaration public IEnumerable<T> Query<T>(T template) Parameters Type Name Description T template This value used only for T parameter type inference, which makes this method usable with anonymous types. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(Func<IDataReader, T>) Executes command and returns results as collection of values, mapped using provided mapping function. Declaration public IEnumerable<T> Query<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryForEachAsync<T>(Action<T>) Executes command asynchronously and apply provided action to each record. Declaration public Task QueryForEachAsync<T>(Action<T> action) Parameters Type Name Description Action <T> action Action, applied to each result record. Returns Type Description Task Returns task. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryForEachAsync<T>(Action<T>, CancellationToken) Executes command asynchronously and apply provided action to each record. Declaration public Task QueryForEachAsync<T>(Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description Action <T> action Action, applied to each result record. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Returns task. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryForEachAsync<T>(Func<IDataReader, T>, Action<T>) Executes command asynchronously and apply provided action to each record, mapped using provided mapping function. Declaration public Task QueryForEachAsync<T>(Func<IDataReader, T> objectReader, Action<T> action) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. Action <T> action Action, applied to each result record. Returns Type Description Task Returns task. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryForEachAsync<T>(Func<IDataReader, T>, Action<T>, CancellationToken) Executes command asynchronously and apply provided action to each record, mapped using provided mapping function. Declaration public Task QueryForEachAsync<T>(Func<IDataReader, T> objectReader, Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. Action <T> action Action, applied to each result record. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Returns task. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>() Executes command using StoredProcedure command type and returns results as collection of values of specified type. Declaration public IEnumerable<T> QueryProc<T>() Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>(T) Executes command using StoredProcedure command type and returns results as collection of values of specified type. Declaration public IEnumerable<T> QueryProc<T>(T template) Parameters Type Name Description T template This value used only for T parameter type inference, which makes this method usable with anonymous types. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>(Func<IDataReader, T>) Executes command using StoredProcedure command type and returns results as collection of values, mapped using provided mapping function. Declaration public IEnumerable<T> QueryProc<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>() Executes command asynchronously and returns array of values. Declaration public Task<T[]> QueryToArrayAsync<T>() Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(Func<IDataReader, T>) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public Task<T[]> QueryToArrayAsync<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(Func<IDataReader, T>, CancellationToken) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public Task<T[]> QueryToArrayAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(CancellationToken) Executes command asynchronously and returns array of values. Declaration public Task<T[]> QueryToArrayAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>() Executes command asynchronously and returns list of values. Declaration public Task<List<T>> QueryToListAsync<T>() Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(Func<IDataReader, T>) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public Task<List<T>> QueryToListAsync<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(Func<IDataReader, T>, CancellationToken) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public Task<List<T>> QueryToListAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(CancellationToken) Executes command asynchronously and returns list of values. Declaration public Task<List<T>> QueryToListAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.BulkCopyOptions.html": {
    "href": "api/LinqToDB.Data.BulkCopyOptions.html",
    "title": "Class BulkCopyOptions | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyOptions Defines behavior of BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) method. Inheritance Object BulkCopyOptions Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class BulkCopyOptions Properties | Improve this Doc View Source BulkCopyTimeout Declaration public int? BulkCopyTimeout { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source BulkCopyType Declaration public BulkCopyType BulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source CheckConstraints Declaration public bool? CheckConstraints { get; set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source DatabaseName Gets or sets explicit name of target database instead of one, configured for copied entity in mapping schema. See DatabaseName<T>(ITable<T>, String) method for support information per provider. Declaration public string DatabaseName { get; set; } Property Value Type Description String | Improve this Doc View Source FireTriggers Declaration public bool? FireTriggers { get; set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source IgnoreSkipOnInsert Declaration [Obsolete] public bool? IgnoreSkipOnInsert { get; set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source KeepIdentity If this option set to true, bulk copy will use values of columns, marked with IsIdentity flag. SkipOnInsert flag in this case will be ignored. Otherwise those columns will be skipped and values will be generated by server. Not compatible with RowByRow mode. Declaration public bool? KeepIdentity { get; set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source KeepNulls Declaration public bool? KeepNulls { get; set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source MaxBatchSize Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. Declaration public int? MaxBatchSize { get; set; } Property Value Type Description Nullable < Int32 > The integer value of the MaxBatchSize property, or zero if no value has been set. | Improve this Doc View Source NotifyAfter Gets or sets counter after how many copied records RowsCopiedCallback should be called. E.g. if you set it to 10, callback will be called after each 10 copied records. To disable callback, set this option to 0 (default value). Declaration public int NotifyAfter { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RetrieveSequence Declaration [Obsolete(\"Use the Tools.RetrieveIdentity method instead.\")] public bool RetrieveSequence { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RowsCopiedCallback Gets or sets callback method that will be called by BulkCopy operation after each NotifyAfter rows copied. This callback will not be used if NotifyAfter set to 0. Declaration public Action<BulkCopyRowsCopied> RowsCopiedCallback { get; set; } Property Value Type Description Action < BulkCopyRowsCopied > | Improve this Doc View Source SchemaName Gets or sets explicit name of target schema/owner instead of one, configured for copied entity in mapping schema. See SchemaName<T>(ITable<T>, String) method for support information per provider. Declaration public string SchemaName { get; set; } Property Value Type Description String | Improve this Doc View Source TableLock Declaration public bool? TableLock { get; set; } Property Value Type Description Nullable < Boolean > | Improve this Doc View Source TableName Gets or sets explicit name of target table instead of one, configured for copied entity in mapping schema. Declaration public string TableName { get; set; } Property Value Type Description String | Improve this Doc View Source UseInternalTransaction Declaration public bool? UseInternalTransaction { get; set; } Property Value Type Description Nullable < Boolean > Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.html": {
    "href": "api/LinqToDB.Configuration.html",
    "title": "Namespace LinqToDB.Configuration | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Configuration Classes DataProviderElement Data provider configuration element. DataProviderElementCollection Collection of data provider configuration elements. ElementBase Configuration section element. ElementCollectionBase<T> Collection of configuration section elements. LinqToDBSection Implementation of custom configuration section. NamedValue Name-value pair. Interfaces IConnectionStringSettings Connection string configuration provider. IDataProviderSettings Data provider configuration provider. ILinqToDBSettings Settings provider interface."
  },
  "api/LinqToDB.Configuration.ILinqToDBSettings.html": {
    "href": "api/LinqToDB.Configuration.ILinqToDBSettings.html",
    "title": "Interface ILinqToDBSettings | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqToDBSettings Settings provider interface. Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public interface ILinqToDBSettings Properties | Improve this Doc View Source ConnectionStrings Gets list of connection configurations. Declaration IEnumerable<IConnectionStringSettings> ConnectionStrings { get; } Property Value Type Description IEnumerable < IConnectionStringSettings > | Improve this Doc View Source DataProviders Gets list of data provider settings. Declaration IEnumerable<IDataProviderSettings> DataProviders { get; } Property Value Type Description IEnumerable < IDataProviderSettings > | Improve this Doc View Source DefaultConfiguration Gets name of default connection configuration. Declaration string DefaultConfiguration { get; } Property Value Type Description String | Improve this Doc View Source DefaultDataProvider Gets name of default data provider configuration. Declaration string DefaultDataProvider { get; } Property Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.IDataProviderSettings.html": {
    "href": "api/LinqToDB.Configuration.IDataProviderSettings.html",
    "title": "Interface IDataProviderSettings | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataProviderSettings Data provider configuration provider. Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public interface IDataProviderSettings Properties | Improve this Doc View Source Attributes Extra provider-specific parameters. Sybase: SAP HANA: Oracle: SQL Server: DB2: Declaration IEnumerable<NamedValue> Attributes { get; } Property Value Type Description IEnumerable < NamedValue > | Improve this Doc View Source Default Gets a value indicating whether the provider is default. Declaration bool Default { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets a name of this data provider configuration. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source TypeName Gets an assembly qualified type name of this data provider. Declaration string TypeName { get; } Property Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.IConnectionStringSettings.html": {
    "href": "api/LinqToDB.Configuration.IConnectionStringSettings.html",
    "title": "Interface IConnectionStringSettings | Linq To DB (aka linq2db)",
    "keywords": "Interface IConnectionStringSettings Connection string configuration provider. Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public interface IConnectionStringSettings Properties | Improve this Doc View Source ConnectionString Gets connection string. Declaration string ConnectionString { get; } Property Value Type Description String | Improve this Doc View Source IsGlobal Is this connection configuration defined on global level (machine.config) or on application level. Declaration bool IsGlobal { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets connection configuration name. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source ProviderName Gets data provider configuration name. Declaration string ProviderName { get; } Property Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.ElementCollectionBase-1.html": {
    "href": "api/LinqToDB.Configuration.ElementCollectionBase-1.html",
    "title": "Class ElementCollectionBase<T> | Linq To DB (aka linq2db)",
    "keywords": "Class ElementCollectionBase<T> Collection of configuration section elements. Inheritance Object ConfigurationElement ConfigurationElementCollection ElementCollectionBase<T> DataProviderElementCollection Implements ICollection IEnumerable Inherited Members ConfigurationElementCollection.IsModified() ConfigurationElementCollection.ResetModified() ConfigurationElementCollection.IsReadOnly() ConfigurationElementCollection.SetReadOnly() ConfigurationElementCollection.Equals(Object) ConfigurationElementCollection.GetHashCode() ConfigurationElementCollection.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) ConfigurationElementCollection.Reset(ConfigurationElement) ConfigurationElementCollection.CopyTo(ConfigurationElement[], Int32) ConfigurationElementCollection.ICollection.CopyTo(Array, Int32) ConfigurationElementCollection.GetEnumerator() ConfigurationElementCollection.BaseAdd(ConfigurationElement) ConfigurationElementCollection.BaseAdd(ConfigurationElement, Boolean) ConfigurationElementCollection.BaseIndexOf(ConfigurationElement) ConfigurationElementCollection.BaseAdd(Int32, ConfigurationElement) ConfigurationElementCollection.BaseRemove(Object) ConfigurationElementCollection.BaseGet(Object) ConfigurationElementCollection.BaseIsRemoved(Object) ConfigurationElementCollection.BaseGet(Int32) ConfigurationElementCollection.BaseGetAllKeys() ConfigurationElementCollection.BaseGetKey(Int32) ConfigurationElementCollection.BaseClear() ConfigurationElementCollection.BaseRemoveAt(Int32) ConfigurationElementCollection.SerializeElement(XmlWriter, Boolean) ConfigurationElementCollection.OnDeserializeUnrecognizedElement(String, XmlReader) ConfigurationElementCollection.CreateNewElement(String) ConfigurationElementCollection.IsElementRemovable(ConfigurationElement) ConfigurationElementCollection.IsElementName(String) ConfigurationElementCollection.AddElementName ConfigurationElementCollection.RemoveElementName ConfigurationElementCollection.ClearElementName ConfigurationElementCollection.Count ConfigurationElementCollection.EmitClear ConfigurationElementCollection.IsSynchronized ConfigurationElementCollection.SyncRoot ConfigurationElementCollection.ElementName ConfigurationElementCollection.ThrowOnDuplicate ConfigurationElementCollection.CollectionType ConfigurationElement.Init() ConfigurationElement.ListErrors(IList) ConfigurationElement.InitializeDefault() ConfigurationElement.SetPropertyValue(ConfigurationProperty, Object, Boolean) ConfigurationElement.SerializeToXmlElement(XmlWriter, String) ConfigurationElement.DeserializeElement(XmlReader, Boolean) ConfigurationElement.OnRequiredPropertyNotFound(String) ConfigurationElement.PostDeserialize() ConfigurationElement.PreSerialize(XmlWriter) ConfigurationElement.OnDeserializeUnrecognizedAttribute(String, String) ConfigurationElement.GetTransformedTypeString(String) ConfigurationElement.GetTransformedAssemblyString(String) ConfigurationElement.LockAttributes ConfigurationElement.LockAllAttributesExcept ConfigurationElement.LockElements ConfigurationElement.LockAllElementsExcept ConfigurationElement.LockItem ConfigurationElement.Item[ConfigurationProperty] ConfigurationElement.Properties ConfigurationElement.ElementInformation ConfigurationElement.EvaluationContext ConfigurationElement.ElementProperty ConfigurationElement.HasContext ConfigurationElement.CurrentConfiguration Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public abstract class ElementCollectionBase<T> : ConfigurationElementCollection, ICollection, IEnumerable where T : ConfigurationElement, new() Type Parameters Name Description T Element type. Properties | Improve this Doc View Source Item[Int32] Gets element from collection by its index. Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index Element index. Property Value Type Description T Element at specified index. | Improve this Doc View Source Item[String] Gets element from collection by its name. Declaration public T this[string name] { get; } Parameters Type Name Description String name Element name. Property Value Type Description T Element or null, if element with such name is not found. Methods | Improve this Doc View Source CreateNewElement() Declaration protected override ConfigurationElement CreateNewElement() Returns Type Description ConfigurationElement Overrides ConfigurationElementCollection.CreateNewElement() | Improve this Doc View Source GetElementKey(T) Declaration protected abstract object GetElementKey(T element) Parameters Type Name Description T element Returns Type Description Object | Improve this Doc View Source GetElementKey(ConfigurationElement) Declaration protected override sealed object GetElementKey(ConfigurationElement element) Parameters Type Name Description ConfigurationElement element Returns Type Description Object Overrides ConfigurationElementCollection.GetElementKey(ConfigurationElement) Implements ICollection IEnumerable Extension Methods Tools.IsNullOrEmpty(ICollection) ReflectionExtensions.GetListItemType(IEnumerable) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.DataProviderElement.html": {
    "href": "api/LinqToDB.Configuration.DataProviderElement.html",
    "title": "Class DataProviderElement | Linq To DB (aka linq2db)",
    "keywords": "Class DataProviderElement Data provider configuration element. Inheritance Object ConfigurationElement ElementBase DataProviderElement Implements IDataProviderSettings Inherited Members ElementBase.Properties ElementBase.OnDeserializeUnrecognizedAttribute(String, String) ElementBase.Attributes ConfigurationElement.Init() ConfigurationElement.IsModified() ConfigurationElement.ResetModified() ConfigurationElement.IsReadOnly() ConfigurationElement.SetReadOnly() ConfigurationElement.ListErrors(IList) ConfigurationElement.InitializeDefault() ConfigurationElement.Reset(ConfigurationElement) ConfigurationElement.Equals(Object) ConfigurationElement.GetHashCode() ConfigurationElement.SetPropertyValue(ConfigurationProperty, Object, Boolean) ConfigurationElement.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) ConfigurationElement.SerializeToXmlElement(XmlWriter, String) ConfigurationElement.SerializeElement(XmlWriter, Boolean) ConfigurationElement.DeserializeElement(XmlReader, Boolean) ConfigurationElement.OnRequiredPropertyNotFound(String) ConfigurationElement.PostDeserialize() ConfigurationElement.PreSerialize(XmlWriter) ConfigurationElement.OnDeserializeUnrecognizedElement(String, XmlReader) ConfigurationElement.GetTransformedTypeString(String) ConfigurationElement.GetTransformedAssemblyString(String) ConfigurationElement.LockAttributes ConfigurationElement.LockAllAttributesExcept ConfigurationElement.LockElements ConfigurationElement.LockAllElementsExcept ConfigurationElement.LockItem ConfigurationElement.Item[ConfigurationProperty] ConfigurationElement.Item[String] ConfigurationElement.ElementInformation ConfigurationElement.EvaluationContext ConfigurationElement.ElementProperty ConfigurationElement.HasContext ConfigurationElement.CurrentConfiguration Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public sealed class DataProviderElement : ElementBase, IDataProviderSettings Constructors | Improve this Doc View Source DataProviderElement() Creates data provider configuration element. Declaration public DataProviderElement() Properties | Improve this Doc View Source Default Gets a value indicating whether the provider is default. Declaration public bool Default { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets a name of this data provider. If not set, Name is used. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source TypeName Gets an assembly qualified type name of this data provider. Declaration public string TypeName { get; } Property Value Type Description String Explicit Interface Implementations | Improve this Doc View Source IDataProviderSettings.Attributes Declaration IEnumerable<NamedValue> IDataProviderSettings.Attributes { get; } Returns Type Description IEnumerable < NamedValue > Implements IDataProviderSettings Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.CompiledQuery.html": {
    "href": "api/LinqToDB.CompiledQuery.html",
    "title": "Class CompiledQuery | Linq To DB (aka linq2db)",
    "keywords": "Class CompiledQuery Provides API for compilation and caching of queries for reuse. Inheritance Object CompiledQuery Namespace : LinqToDB Assembly : linq2db.dll Syntax public class CompiledQuery Constructors | Improve this Doc View Source CompiledQuery(LambdaExpression) Declaration protected CompiledQuery(LambdaExpression query) Parameters Type Name Description LambdaExpression query Methods | Improve this Doc View Source Compile<TDC, TResult>(Expression<Func<TDC, TResult>>) Compiles the query. Declaration public static Func<TDC, TResult> Compile<TDC, TResult>(Expression<Func<TDC, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDC, TArg1, TResult>(Expression<Func<TDC, TArg1, TResult>>) Compiles the query with parameter. Declaration public static Func<TDC, TArg1, TResult> Compile<TDC, TArg1, TResult>(Expression<Func<TDC, TArg1, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TArg1, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TArg1, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TArg1 Type of parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TResult>(Expression<Func<TDC, TArg1, TArg2, TResult>>) Compiles the query with two parameters. Declaration public static Func<TDC, TArg1, TArg2, TResult> Compile<TDC, TArg1, TArg2, TResult>(Expression<Func<TDC, TArg1, TArg2, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TArg1, TArg2, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TArg1, TArg2, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TArg3, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TResult>>) Compiles the query with three parameters. Declaration public static Func<TDC, TArg1, TArg2, TArg3, TResult> Compile<TDC, TArg1, TArg2, TArg3, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TArg1, TArg2, TArg3, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TArg1, TArg2, TArg3, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TArg3 Type of third parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TArg3, TArg4, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult>>) Compiles the query with four parameters. Declaration public static Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult> Compile<TDC, TArg1, TArg2, TArg3, TArg4, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TArg1, TArg2, TArg3, TArg4, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TArg1, TArg2, TArg3, TArg4, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TArg3 Type of third parameter for compiled query. TArg4 Type of forth parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>>) Compiles the query with five parameters. Declaration public static Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Compile<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TArg3 Type of third parameter for compiled query. TArg4 Type of forth parameter for compiled query. TArg5 Type of fifth parameter for compiled query. TResult Query result type. | Improve this Doc View Source Invoke<TDC, TResult>(TDC) Executes compiled query against provided database connection context. Declaration public TResult Invoke<TDC, TResult>(TDC dataContext) Parameters Type Name Description TDC dataContext Database connection context. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. TResult Query result type. | Improve this Doc View Source Invoke<TDC, T1, TResult>(TDC, T1) Executes compiled query with one parameter against provided database connection context. Declaration public TResult Invoke<TDC, T1, TResult>(TDC dataContext, T1 arg1) Parameters Type Name Description TDC dataContext Database connection context. T1 arg1 Query parameter value. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. T1 Query parameter type. TResult Query result type. | Improve this Doc View Source Invoke<TDC, T1, T2, TResult>(TDC, T1, T2) Executes compiled query with two parameters against provided database connection context. Declaration public TResult Invoke<TDC, T1, T2, TResult>(TDC dataContext, T1 arg1, T2 arg2) Parameters Type Name Description TDC dataContext Database connection context. T1 arg1 First query parameter value. T2 arg2 Second query parameter value. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. T1 First query parameter type. T2 Second query parameter type. TResult Query result type. | Improve this Doc View Source Invoke<TDC, T1, T2, T3, TResult>(TDC, T1, T2, T3) Executes compiled query with three parameters against provided database connection context. Declaration public TResult Invoke<TDC, T1, T2, T3, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description TDC dataContext Database connection context. T1 arg1 First query parameter value. T2 arg2 Second query parameter value. T3 arg3 Third query parameter value. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. T1 First query parameter type. T2 Second query parameter type. T3 Third query parameter type. TResult Query result type. | Improve this Doc View Source Invoke<TDC, T1, T2, T3, T4, TResult>(TDC, T1, T2, T3, T4) Executes compiled query with four parameters against provided database connection context. Declaration public TResult Invoke<TDC, T1, T2, T3, T4, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description TDC dataContext Database connection context. T1 arg1 First query parameter value. T2 arg2 Second query parameter value. T3 arg3 Third query parameter value. T4 arg4 Forth query parameter value. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. T1 First query parameter type. T2 Second query parameter type. T3 Third query parameter type. T4 Forth query parameter type. TResult Query result type. | Improve this Doc View Source Invoke<TDC, T1, T2, T3, T4, T5, TResult>(TDC, T1, T2, T3, T4, T5) Executes compiled query with five parameters against provided database connection context. Declaration public TResult Invoke<TDC, T1, T2, T3, T4, T5, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description TDC dataContext Database connection context. T1 arg1 First query parameter value. T2 arg2 Second query parameter value. T3 arg3 Third query parameter value. T4 arg4 Forth query parameter value. T5 arg5 Fifth query parameter value. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. T1 First query parameter type. T2 Second query parameter type. T3 Third query parameter type. T4 Forth query parameter type. T5 Fifth query parameter type. TResult Query result type. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.Tools.html": {
    "href": "api/LinqToDB.Common.Tools.html",
    "title": "Class Tools | Linq To DB (aka linq2db)",
    "keywords": "Class Tools Various general-purpose helpers. Inheritance Object Tools Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Tools Methods | Improve this Doc View Source Args(String, Object[]) Shortcut extension method for Format(String, Object) method. Declaration [Obsolete(\"Use either string interpolation or CodeJam.FormatWith instead.\")] public static string Args(this string format, params object[] args) Parameters Type Name Description String format Format string. Object [] args Format parameters. Returns Type Description String String, generated from format format string using args parameters. | Improve this Doc View Source GetFileName(Assembly) Returns original path to assembly file. Declaration public static string GetFileName(this Assembly assembly) Parameters Type Name Description Assembly assembly Assembly. Returns Type Description String Assembly file path. | Improve this Doc View Source GetPath(Assembly) Returns path to original directory with provided assembly. Declaration public static string GetPath(this Assembly assembly) Parameters Type Name Description Assembly assembly Assembly. Returns Type Description String Assembly directory path. | Improve this Doc View Source GetPathFromUri(String) Converts file path in URI format to absolute path. Declaration public static string GetPathFromUri(this string uriString) Parameters Type Name Description String uriString File path in URI format. Returns Type Description String Absolute file path. | Improve this Doc View Source IsNullOrEmpty(ICollection) Checks that collection is not null and have at least one element. Declaration public static bool IsNullOrEmpty(this ICollection array) Parameters Type Name Description ICollection array Collection to check. Returns Type Description Boolean true if collection is null or contains no elements, false otherwise. | Improve this Doc View Source IsNullOrEmpty(String) Shortcut extension method for IsNullOrEmpty(String) method. Declaration public static bool IsNullOrEmpty(this string str) Parameters Type Name Description String str String value to check. Returns Type Description Boolean true if string is null or empty, false otherwise."
  },
  "api/LinqToDB.Common.LinqToDBConvertException.html": {
    "href": "api/LinqToDB.Common.LinqToDBConvertException.html",
    "title": "Class LinqToDBConvertException | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBConvertException Defines the base class for the namespace exceptions. Inheritance Object Exception LinqToDBException LinqToDBConvertException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax [Serializable] public class LinqToDBConvertException : LinqToDBException, ISerializable, _Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source LinqToDBConvertException() Initializes a new instance of the LinqToDBConvertException class. Declaration public LinqToDBConvertException() Remarks This constructor initializes the Message property of the new instance such as \"A Build Type exception has occurred.\" | Improve this Doc View Source LinqToDBConvertException(Exception) Initializes a new instance of the LinqToDBConvertException class with the specified InnerException property. Declaration public LinqToDBConvertException(Exception innerException) Parameters Type Name Description Exception innerException The InnerException, if any, that threw the current exception. See Also InnerException | Improve this Doc View Source LinqToDBConvertException(SerializationInfo, StreamingContext) Initializes a new instance of the LinqToDBConvertException class with serialized data. Declaration protected LinqToDBConvertException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source LinqToDBConvertException(String) Initializes a new instance of the LinqToDBConvertException class with the specified error message. Declaration public LinqToDBConvertException(string message) Parameters Type Name Description String message The message to display to the client when the exception is thrown. See Also Message | Improve this Doc View Source LinqToDBConvertException(String, Exception) Initializes a new instance of the LinqToDBConvertException class with the specified error message and InnerException property. Declaration public LinqToDBConvertException(string message, Exception innerException) Parameters Type Name Description String message The message to display to the client when the exception is thrown. Exception innerException The InnerException, if any, that threw the current exception. See Also Message InnerException Implements ISerializable _Exception Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.ConvertTo-1.html": {
    "href": "api/LinqToDB.Common.ConvertTo-1.html",
    "title": "Class ConvertTo<TTo> | Linq To DB (aka linq2db)",
    "keywords": "Class ConvertTo<TTo> Value converter to TTo type. Inheritance Object ConvertTo<TTo> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class ConvertTo<TTo> Type Parameters Name Description TTo Target conversion type. Methods | Improve this Doc View Source From<TFrom>(TFrom) Converts value from TFrom to TTo type. Declaration public static TTo From<TFrom>(TFrom o) Parameters Type Name Description TFrom o Value to convert. Returns Type Description TTo Converted value. Type Parameters Name Description TFrom Source conversion type."
  },
  "api/LinqToDB.Common.Configuration.html": {
    "href": "api/LinqToDB.Common.Configuration.html",
    "title": "Class Configuration | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration Contains global linq2db settings. Inheritance Object Configuration Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Configuration Fields | Improve this Doc View Source AvoidSpecificDataProviderAPI If true - data providers will try to use standard ADO.NET interfaces instead of provider-specific functionality when possible. This option could be usefull if you need to intercept database calls using tools such as MiniProfiler . Default value: false . Declaration public static bool AvoidSpecificDataProviderAPI Field Value Type Description Boolean | Improve this Doc View Source IsStructIsScalarType If true - non-primitive and non-enum value types (structures) will be treated as scalar types (e.g. DateTime ) during mapping; otherwise they will be treated the same way as classes. Default value: true . Declaration public static bool IsStructIsScalarType Field Value Type Description Boolean | Improve this Doc View Source UseEnumValueNameForStringColumns If true - Enum values are stored as by calling ToString(). Default value: true . Declaration public static bool UseEnumValueNameForStringColumns Field Value Type Description Boolean"
  },
  "api/LinqToDB.Common.Configuration.LinqService.html": {
    "href": "api/LinqToDB.Common.Configuration.LinqService.html",
    "title": "Class Configuration.LinqService | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.LinqService Linq over WCF global settings. Inheritance Object Configuration.LinqService Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class LinqService Fields | Improve this Doc View Source SerializeAssemblyQualifiedName Controls format of type name, sent over WCF: if true - name from AssemblyQualifiedName used; if false - name from FullName used. Default value: false . Declaration public static bool SerializeAssemblyQualifiedName Field Value Type Description Boolean | Improve this Doc View Source ThrowUnresolvedTypeException Controls behavior of linq2db, when it cannot load Type by type name on query deserialization: if true - LinqToDBException will be thrown; if false - type load error will be ignored. Default value: false . Declaration public static bool ThrowUnresolvedTypeException Field Value Type Description Boolean"
  },
  "api/LinqToDB.Common.Configuration.Data.html": {
    "href": "api/LinqToDB.Common.Configuration.Data.html",
    "title": "Class Configuration.Data | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.Data Inheritance Object Configuration.Data Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Data Fields | Improve this Doc View Source ThrowOnDisposed Declaration public static bool ThrowOnDisposed Field Value Type Description Boolean"
  },
  "api/LinqToDB.AsyncExtensions.html": {
    "href": "api/LinqToDB.AsyncExtensions.html",
    "title": "Class AsyncExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class AsyncExtensions Provides helper methods for asynchronous operations. Inheritance Object AsyncExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class AsyncExtensions Methods | Improve this Doc View Source AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<bool> AllAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task < Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task < Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync(IQueryable<Decimal>, CancellationToken) Declaration public static Task<decimal> AverageAsync(this IQueryable<decimal> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Decimal > source CancellationToken token Returns Type Description Task < Decimal > | Improve this Doc View Source AverageAsync(IQueryable<Double>, CancellationToken) Declaration public static Task<double> AverageAsync(this IQueryable<double> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Double > source CancellationToken token Returns Type Description Task < Double > | Improve this Doc View Source AverageAsync(IQueryable<Int32>, CancellationToken) Declaration public static Task<double> AverageAsync(this IQueryable<int> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Int32 > source CancellationToken token Returns Type Description Task < Double > | Improve this Doc View Source AverageAsync(IQueryable<Int64>, CancellationToken) Declaration public static Task<double> AverageAsync(this IQueryable<long> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Int64 > source CancellationToken token Returns Type Description Task < Double > | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public static Task<decimal? > AverageAsync(this IQueryable<decimal? > source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Nullable < Decimal >> source CancellationToken token Returns Type Description Task < Nullable < Decimal >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration public static Task<double? > AverageAsync(this IQueryable<double? > source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Nullable < Double >> source CancellationToken token Returns Type Description Task < Nullable < Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public static Task<double? > AverageAsync(this IQueryable<int? > source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Nullable < Int32 >> source CancellationToken token Returns Type Description Task < Nullable < Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public static Task<double? > AverageAsync(this IQueryable<long? > source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Nullable < Int64 >> source CancellationToken token Returns Type Description Task < Nullable < Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration public static Task<float? > AverageAsync(this IQueryable<float? > source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Nullable < Single >> source CancellationToken token Returns Type Description Task < Nullable < Single >> | Improve this Doc View Source AverageAsync(IQueryable<Single>, CancellationToken) Declaration public static Task<float> AverageAsync(this IQueryable<float> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Single > source CancellationToken token Returns Type Description Task < Single > | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public static Task<decimal> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Decimal >> selector CancellationToken token Returns Type Description Task < Decimal > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Double >> selector CancellationToken token Returns Type Description Task < Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Int32 >> selector CancellationToken token Returns Type Description Task < Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Int64 >> selector CancellationToken token Returns Type Description Task < Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public static Task<decimal? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal? >> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Decimal >>> selector CancellationToken token Returns Type Description Task < Nullable < Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public static Task<double? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double? >> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Double >>> selector CancellationToken token Returns Type Description Task < Nullable < Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public static Task<double? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int? >> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Int32 >>> selector CancellationToken token Returns Type Description Task < Nullable < Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public static Task<double? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long? >> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Int64 >>> selector CancellationToken token Returns Type Description Task < Nullable < Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public static Task<float? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float? >> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Single >>> selector CancellationToken token Returns Type Description Task < Nullable < Single >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public static Task<float> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Single >> selector CancellationToken token Returns Type Description Task < Single > Type Parameters Name Description TSource | Improve this Doc View Source ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken) Declaration public static Task<bool> ContainsAsync<TSource>(this IQueryable<TSource> source, TSource item, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source TSource item CancellationToken token Returns Type Description Task < Boolean > Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) Asynchronously apply provided action to each element in source sequence. Sequence elements processed sequentially. Declaration public static Task ForEachAsync<TSource>(this IQueryable<TSource> source, Action<TSource> action, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source sequence. Action <TSource> action Action to apply to each sequence element. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. Type Parameters Name Description TSource Source sequence element type. | Improve this Doc View Source ForEachUntilAsync<TSource>(IQueryable<TSource>, Func<TSource, Boolean>, CancellationToken) Asynchronously apply provided function to each element in source sequence sequentially. Sequence enumeration stops if function returns false . Declaration public static Task ForEachUntilAsync<TSource>(this IQueryable<TSource> source, Func<TSource, bool> func, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source sequence. Func <TSource, Boolean > func Function to apply to each sequence element. Returning false from function will stop numeration. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. Type Parameters Name Description TSource Source sequence element type. | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task < Int64 > Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < Int64 > Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public static Task<TResult> MaxAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source MinAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public static Task<TResult> MinAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync(IQueryable<Decimal>, CancellationToken) Declaration public static Task<decimal> SumAsync(this IQueryable<decimal> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Decimal > source CancellationToken token Returns Type Description Task < Decimal > | Improve this Doc View Source SumAsync(IQueryable<Double>, CancellationToken) Declaration public static Task<double> SumAsync(this IQueryable<double> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Double > source CancellationToken token Returns Type Description Task < Double > | Improve this Doc View Source SumAsync(IQueryable<Int32>, CancellationToken) Declaration public static Task<int> SumAsync(this IQueryable<int> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Int32 > source CancellationToken token Returns Type Description Task < Int32 > | Improve this Doc View Source SumAsync(IQueryable<Int64>, CancellationToken) Declaration public static Task<long> SumAsync(this IQueryable<long> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Int64 > source CancellationToken token Returns Type Description Task < Int64 > | Improve this Doc View Source SumAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public static Task<decimal? > SumAsync(this IQueryable<decimal? > source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Nullable < Decimal >> source CancellationToken token Returns Type Description Task < Nullable < Decimal >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration public static Task<double? > SumAsync(this IQueryable<double? > source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Nullable < Double >> source CancellationToken token Returns Type Description Task < Nullable < Double >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public static Task<int? > SumAsync(this IQueryable<int? > source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Nullable < Int32 >> source CancellationToken token Returns Type Description Task < Nullable < Int32 >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public static Task<long? > SumAsync(this IQueryable<long? > source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Nullable < Int64 >> source CancellationToken token Returns Type Description Task < Nullable < Int64 >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration public static Task<float? > SumAsync(this IQueryable<float? > source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Nullable < Single >> source CancellationToken token Returns Type Description Task < Nullable < Single >> | Improve this Doc View Source SumAsync(IQueryable<Single>, CancellationToken) Declaration public static Task<float> SumAsync(this IQueryable<float> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable < Single > source CancellationToken token Returns Type Description Task < Single > | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public static Task<decimal> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Decimal >> selector CancellationToken token Returns Type Description Task < Decimal > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public static Task<double> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Double >> selector CancellationToken token Returns Type Description Task < Double > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public static Task<int> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Int32 >> selector CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public static Task<long> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Int64 >> selector CancellationToken token Returns Type Description Task < Int64 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public static Task<decimal? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal? >> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Decimal >>> selector CancellationToken token Returns Type Description Task < Nullable < Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public static Task<double? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double? >> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Double >>> selector CancellationToken token Returns Type Description Task < Nullable < Double >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public static Task<int? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int? >> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Int32 >>> selector CancellationToken token Returns Type Description Task < Nullable < Int32 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public static Task<long? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long? >> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Int64 >>> selector CancellationToken token Returns Type Description Task < Nullable < Int64 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public static Task<float? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float? >> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Nullable < Single >>> selector CancellationToken token Returns Type Description Task < Nullable < Single >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public static Task<float> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, Single >> selector CancellationToken token Returns Type Description Task < Single > Type Parameters Name Description TSource | Improve this Doc View Source ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously loads data from query to an array. Declaration public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TSource[]> Array with query results. Type Parameters Name Description TSource Query element type. | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) Asynchronously loads data from query to a dictionary. Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query. Func <TSource, TKey> keySelector Source element key selector. IEqualityComparer <TKey> comparer Dictionary key comparer. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Dictionary <TKey, TSource>> Dictionary with query results. Type Parameters Name Description TSource Query element type. TKey Dictionary key type. | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) Asynchronously loads data from query to a dictionary. Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query. Func <TSource, TKey> keySelector Source element key selector. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Dictionary <TKey, TSource>> Dictionary with query results. Type Parameters Name Description TSource Query element type. TKey Dictionary key type. | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) Asynchronously loads data from query to a dictionary. Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query. Func <TSource, TKey> keySelector Source element key selector. Func <TSource, TElement> elementSelector Dictionary element selector. IEqualityComparer <TKey> comparer Dictionary key comparer. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Dictionary <TKey, TElement>> Dictionary with query results. Type Parameters Name Description TSource Query element type. TKey Dictionary key type. TElement Dictionary element type. | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) Asynchronously loads data from query to a dictionary. Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query. Func <TSource, TKey> keySelector Source element key selector. Func <TSource, TElement> elementSelector Dictionary element selector. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Dictionary <TKey, TElement>> Dictionary with query results. Type Parameters Name Description TSource Query element type. TKey Dictionary key type. TElement Dictionary element type. | Improve this Doc View Source ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously loads data from query to a list. Declaration public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source Source query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < List <TSource>> List with query results. Type Parameters Name Description TSource Query element type."
  },
  "api/LinqToDB.Async.html": {
    "href": "api/LinqToDB.Async.html",
    "title": "Namespace LinqToDB.Async | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Async Classes AsyncExtensions This API supports the LinqToDB infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Interfaces IAsyncEnumerable<T> Asynchronous version of the IEnumerable<T> interface, allowing elements of the enumerable sequence to be retrieved asynchronously. IAsyncEnumerator<T> Asynchronous version of the IEnumerator<T> interface, allowing elements to be retrieved asynchronously. IQueryProviderAsync This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice."
  },
  "api/LinqToDB.Async.IAsyncEnumerable-1.html": {
    "href": "api/LinqToDB.Async.IAsyncEnumerable-1.html",
    "title": "Interface IAsyncEnumerable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IAsyncEnumerable<T> Asynchronous version of the IEnumerable<T> interface, allowing elements of the enumerable sequence to be retrieved asynchronously. Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public interface IAsyncEnumerable<out T> Type Parameters Name Description T Element type. Methods | Improve this Doc View Source GetEnumerator() Gets an asynchronous enumerator over the sequence. Declaration IAsyncEnumerator<T> GetEnumerator() Returns Type Description IAsyncEnumerator <T> Enumerator for asynchronous enumeration over the sequence. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Async.AsyncExtensions.html": {
    "href": "api/LinqToDB.Async.AsyncExtensions.html",
    "title": "Class AsyncExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class AsyncExtensions This API supports the LinqToDB infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance Object AsyncExtensions Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public static class AsyncExtensions Methods | Improve this Doc View Source AsAsyncEnumerable<TSource>(IQueryable<TSource>, CancellationToken) This API supports the LinqToDB infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public static IAsyncEnumerable<TSource> AsAsyncEnumerable<TSource>(this IQueryable<TSource> source, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description IAsyncEnumerable <TSource> Type Parameters Name Description TSource"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.InList.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.InList.html",
    "title": "Class SqlPredicate.InList | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.InList Inheritance Object SqlPredicate SqlPredicate.Expr SqlPredicate.NotExpr SqlPredicate.InList Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlPredicate.NotExpr.IsNot SqlPredicate.Expr.Expr1 SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlPredicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class InList : SqlPredicate.NotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source InList(ISqlExpression, Boolean, ISqlExpression[]) Declaration public InList(ISqlExpression exp1, bool isNot, params ISqlExpression[] values) Parameters Type Name Description ISqlExpression exp1 Boolean isNot ISqlExpression [] values | Improve this Doc View Source InList(ISqlExpression, Boolean, IEnumerable<ISqlExpression>) Declaration public InList(ISqlExpression exp1, bool isNot, IEnumerable<ISqlExpression> values) Parameters Type Name Description ISqlExpression exp1 Boolean isNot IEnumerable < ISqlExpression > values Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.NotExpr.ElementType | Improve this Doc View Source Values Declaration public List<ISqlExpression> Values { get; } Property Value Type Description List < ISqlExpression > Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlPredicate.NotExpr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.NotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> action) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > action Overrides SqlPredicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.FuncLike.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.FuncLike.html",
    "title": "Class SqlPredicate.FuncLike | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.FuncLike Inheritance Object SqlPredicate SqlPredicate.FuncLike Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlPredicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class FuncLike : SqlPredicate, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source FuncLike(SqlFunction) Declaration public FuncLike(SqlFunction func) Parameters Type Name Description SqlFunction func Properties | Improve this Doc View Source CanBeNull Declaration public override bool CanBeNull { get; } Property Value Type Description Boolean Overrides SqlPredicate.CanBeNull | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.ElementType | Improve this Doc View Source Function Declaration public SqlFunction Function { get; } Property Value Type Description SqlFunction Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlPredicate.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Overrides SqlPredicate.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.ExprExpr.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.ExprExpr.html",
    "title": "Class SqlPredicate.ExprExpr | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.ExprExpr Inheritance Object SqlPredicate SqlPredicate.Expr SqlPredicate.ExprExpr Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlPredicate.Expr.Expr1 SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlPredicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class ExprExpr : SqlPredicate.Expr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source ExprExpr(ISqlExpression, SqlPredicate.Operator, ISqlExpression) Declaration public ExprExpr(ISqlExpression exp1, SqlPredicate.Operator op, ISqlExpression exp2) Parameters Type Name Description ISqlExpression exp1 SqlPredicate.Operator op ISqlExpression exp2 Properties | Improve this Doc View Source CanBeNull Declaration public override bool CanBeNull { get; } Property Value Type Description Boolean Overrides SqlPredicate.Expr.CanBeNull | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Operator Declaration public SqlPredicate.Operator Operator { get; } Property Value Type Description SqlPredicate.Operator Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlPredicate.Expr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.Expr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Overrides SqlPredicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.Expr.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.Expr.html",
    "title": "Class SqlPredicate.Expr | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.Expr Inheritance Object SqlPredicate SqlPredicate.Expr SqlPredicate.ExprExpr SqlPredicate.NotExpr Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlPredicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Expr : SqlPredicate, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source Expr(ISqlExpression) Declaration public Expr(ISqlExpression exp1) Parameters Type Name Description ISqlExpression exp1 | Improve this Doc View Source Expr(ISqlExpression, Int32) Declaration public Expr(ISqlExpression exp1, int precedence) Parameters Type Name Description ISqlExpression exp1 Int32 precedence Properties | Improve this Doc View Source CanBeNull Declaration public override bool CanBeNull { get; } Property Value Type Description Boolean Overrides SqlPredicate.CanBeNull | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.ElementType | Improve this Doc View Source Expr1 Declaration public ISqlExpression Expr1 { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlPredicate.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Overrides SqlPredicate.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.Between.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.Between.html",
    "title": "Class SqlPredicate.Between | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.Between Inheritance Object SqlPredicate SqlPredicate.Expr SqlPredicate.NotExpr SqlPredicate.Between Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlPredicate.NotExpr.IsNot SqlPredicate.Expr.Expr1 SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlPredicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Between : SqlPredicate.NotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source Between(ISqlExpression, Boolean, ISqlExpression, ISqlExpression) Declaration public Between(ISqlExpression exp1, bool isNot, ISqlExpression exp2, ISqlExpression exp3) Parameters Type Name Description ISqlExpression exp1 Boolean isNot ISqlExpression exp2 ISqlExpression exp3 Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.NotExpr.ElementType | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Expr3 Declaration public ISqlExpression Expr3 { get; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlPredicate.NotExpr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.NotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Overrides SqlPredicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlParameter.html": {
    "href": "api/LinqToDB.SqlQuery.SqlParameter.html",
    "title": "Class SqlParameter | Linq To DB (aka linq2db)",
    "keywords": "Class SqlParameter Inheritance Object SqlParameter Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement IValueContainer Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlParameter : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement, IValueContainer Constructors | Improve this Doc View Source SqlParameter(Type, String, Object) Declaration public SqlParameter(Type systemType, string name, object value) Parameters Type Name Description Type systemType String name Object value | Improve this Doc View Source SqlParameter(Type, String, Object, Func<Object, Object>) Declaration public SqlParameter(Type systemType, string name, object value, Func<object, object> valueConverter) Parameters Type Name Description Type systemType String name Object value Func < Object , Object > valueConverter Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source DataType Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source DbSize Declaration public int DbSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsQueryParameter Declaration public bool IsQueryParameter { get; set; } Property Value Type Description Boolean | Improve this Doc View Source LikeEnd Declaration public string LikeEnd { get; set; } Property Value Type Description String | Improve this Doc View Source LikeStart Declaration public string LikeStart { get; set; } Property Value Type Description String | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source ReplaceLike Declaration public bool ReplaceLike { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SystemType Declaration public Type SystemType { get; set; } Property Value Type Description Type | Improve this Doc View Source Value Declaration public object Value { get; set; } Property Value Type Description Object | Improve this Doc View Source ValueConverter Declaration public Func<object, object> ValueConverter { get; set; } Property Value Type Description Func < Object , Object > Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement IValueContainer Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlOrderByItem.html": {
    "href": "api/LinqToDB.SqlQuery.SqlOrderByItem.html",
    "title": "Class SqlOrderByItem | Linq To DB (aka linq2db)",
    "keywords": "Class SqlOrderByItem Inheritance Object SqlOrderByItem Implements IQueryElement ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlOrderByItem : IQueryElement, ICloneableElement Constructors | Improve this Doc View Source SqlOrderByItem(ISqlExpression, Boolean) Declaration public SqlOrderByItem(ISqlExpression expression, bool isDescending) Parameters Type Name Description ISqlExpression expression Boolean isDescending Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source IsDescending Declaration public bool IsDescending { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements IQueryElement ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlOrderByClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlOrderByClause.html",
    "title": "Class SqlOrderByClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlOrderByClause Inheritance Object ClauseBase SqlOrderByClause Implements IQueryElement ISqlExpressionWalkable Inherited Members ClauseBase.Select ClauseBase.From ClauseBase.Where ClauseBase.GroupBy ClauseBase.Having ClauseBase.OrderBy ClauseBase.End() ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlOrderByClause : ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Items Declaration public List<SqlOrderByItem> Items { get; } Property Value Type Description List < SqlOrderByItem > Methods | Improve this Doc View Source Expr(ISqlExpression) Declaration public SqlOrderByClause Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlOrderByClause | Improve this Doc View Source Expr(ISqlExpression, Boolean) Declaration public SqlOrderByClause Expr(ISqlExpression expr, bool isDescending) Parameters Type Name Description ISqlExpression expr Boolean isDescending Returns Type Description SqlOrderByClause | Improve this Doc View Source ExprAsc(ISqlExpression) Declaration public SqlOrderByClause ExprAsc(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlOrderByClause | Improve this Doc View Source ExprDesc(ISqlExpression) Declaration public SqlOrderByClause ExprDesc(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlOrderByClause | Improve this Doc View Source Field(SqlField) Declaration public SqlOrderByClause Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SqlOrderByClause | Improve this Doc View Source Field(SqlField, Boolean) Declaration public SqlOrderByClause Field(SqlField field, bool isDescending) Parameters Type Name Description SqlField field Boolean isDescending Returns Type Description SqlOrderByClause | Improve this Doc View Source FieldAsc(SqlField) Declaration public SqlOrderByClause FieldAsc(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SqlOrderByClause | Improve this Doc View Source FieldDesc(SqlField) Declaration public SqlOrderByClause FieldDesc(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SqlOrderByClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Implements IQueryElement ISqlExpressionWalkable Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlJoinedTable.html": {
    "href": "api/LinqToDB.SqlQuery.SqlJoinedTable.html",
    "title": "Class SqlJoinedTable | Linq To DB (aka linq2db)",
    "keywords": "Class SqlJoinedTable Inheritance Object SqlJoinedTable Implements IQueryElement ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlJoinedTable : IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlJoinedTable(JoinType, ISqlTableSource, String, Boolean) Declaration public SqlJoinedTable(JoinType joinType, ISqlTableSource table, string alias, bool isWeak) Parameters Type Name Description JoinType joinType ISqlTableSource table String alias Boolean isWeak | Improve this Doc View Source SqlJoinedTable(JoinType, SqlTableSource, Boolean) Declaration public SqlJoinedTable(JoinType joinType, SqlTableSource table, bool isWeak) Parameters Type Name Description JoinType joinType SqlTableSource table Boolean isWeak | Improve this Doc View Source SqlJoinedTable(JoinType, SqlTableSource, Boolean, SqlSearchCondition) Declaration public SqlJoinedTable(JoinType joinType, SqlTableSource table, bool isWeak, SqlSearchCondition searchCondition) Parameters Type Name Description JoinType joinType SqlTableSource table Boolean isWeak SqlSearchCondition searchCondition Properties | Improve this Doc View Source CanConvertApply Declaration public bool CanConvertApply { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Condition Declaration public SqlSearchCondition Condition { get; } Property Value Type Description SqlSearchCondition | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsWeak Declaration public bool IsWeak { get; set; } Property Value Type Description Boolean | Improve this Doc View Source JoinType Declaration public JoinType JoinType { get; set; } Property Value Type Description JoinType | Improve this Doc View Source Table Declaration public SqlTableSource Table { get; set; } Property Value Type Description SqlTableSource Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> action) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > action Returns Type Description ISqlExpression Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlInsertWithIdentity.html": {
    "href": "api/LinqToDB.SqlQuery.SqlInsertWithIdentity.html",
    "title": "Class SqlInsertWithIdentity | Linq To DB (aka linq2db)",
    "keywords": "Class SqlInsertWithIdentity Inheritance Object SqlInsertWithIdentity Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlInsertWithIdentity Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlInsertStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlInsertStatement.html",
    "title": "Class SqlInsertStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlInsertStatement Inheritance Object SqlStatement SqlStatementWithQueryBase SqlInsertStatement Implements IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlStatementWithQueryBase.IsParameterDependent SqlStatementWithQueryBase.SelectQuery SqlStatementWithQueryBase.With SqlStatementWithQueryBase.WalkQueries(Func<SelectQuery, SelectQuery>) SqlStatement.SqlText SqlStatement.Parameters SqlStatement.ProcessParameters(MappingSchema) SqlStatement.CollectParameters() SqlStatement.RemoveAlias(String) SqlStatement.GetAlias(String, String) SqlStatement.GetTempAliases(Int32, String) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlInsertStatement : SqlStatementWithQueryBase, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlInsertStatement() Declaration public SqlInsertStatement() | Improve this Doc View Source SqlInsertStatement(SelectQuery) Declaration public SqlInsertStatement(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source Insert Declaration public SqlInsertClause Insert { get; set; } Property Value Type Description SqlInsertClause | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlStatement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source EnumClauses() Declaration public override IEnumerable<IQueryElement> EnumClauses() Returns Type Description IEnumerable < IQueryElement > Overrides SqlStatement.EnumClauses() | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatementWithQueryBase.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Overrides SqlStatement.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.html",
    "title": "Class SqlInsertOrUpdateStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlInsertOrUpdateStatement Inheritance Object SqlStatement SqlStatementWithQueryBase SqlInsertOrUpdateStatement Implements IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlStatementWithQueryBase.IsParameterDependent SqlStatementWithQueryBase.SelectQuery SqlStatementWithQueryBase.With SqlStatementWithQueryBase.WalkQueries(Func<SelectQuery, SelectQuery>) SqlStatement.SqlText SqlStatement.Parameters SqlStatement.ProcessParameters(MappingSchema) SqlStatement.CollectParameters() SqlStatement.RemoveAlias(String) SqlStatement.GetAlias(String, String) SqlStatement.GetTempAliases(Int32, String) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlInsertOrUpdateStatement : SqlStatementWithQueryBase, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlInsertOrUpdateStatement(SelectQuery) Declaration public SqlInsertOrUpdateStatement(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source Insert Declaration public SqlInsertClause Insert { get; set; } Property Value Type Description SqlInsertClause | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source Update Declaration public SqlUpdateClause Update { get; set; } Property Value Type Description SqlUpdateClause Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlStatement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source EnumClauses() Declaration public override IEnumerable<IQueryElement> EnumClauses() Returns Type Description IEnumerable < IQueryElement > Overrides SqlStatement.EnumClauses() | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatementWithQueryBase.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Overrides SqlStatement.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlInsertClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlInsertClause.html",
    "title": "Class SqlInsertClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlInsertClause Inheritance Object SqlInsertClause Implements IQueryElement ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlInsertClause : IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlInsertClause() Declaration public SqlInsertClause() Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Into Declaration public SqlTable Into { get; set; } Property Value Type Description SqlTable | Improve this Doc View Source Items Declaration public List<SqlSetExpression> Items { get; } Property Value Type Description List < SqlSetExpression > | Improve this Doc View Source WithIdentity Declaration public bool WithIdentity { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlGroupByClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlGroupByClause.html",
    "title": "Class SqlGroupByClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlGroupByClause Inheritance Object ClauseBase SqlGroupByClause Implements IQueryElement ISqlExpressionWalkable Inherited Members ClauseBase.Select ClauseBase.From ClauseBase.Where ClauseBase.GroupBy ClauseBase.Having ClauseBase.OrderBy ClauseBase.End() ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlGroupByClause : ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Items Declaration public List<ISqlExpression> Items { get; } Property Value Type Description List < ISqlExpression > Methods | Improve this Doc View Source Expr(ISqlExpression) Declaration public SqlGroupByClause Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlGroupByClause | Improve this Doc View Source Field(SqlField) Declaration public SqlGroupByClause Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SqlGroupByClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Implements IQueryElement ISqlExpressionWalkable Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlBinaryExpression.html": {
    "href": "api/LinqToDB.SqlQuery.SqlBinaryExpression.html",
    "title": "Class SqlBinaryExpression | Linq To DB (aka linq2db)",
    "keywords": "Class SqlBinaryExpression Inheritance Object SqlBinaryExpression Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax [Serializable] public class SqlBinaryExpression : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlBinaryExpression(Type, ISqlExpression, String, ISqlExpression) Declaration public SqlBinaryExpression(Type systemType, ISqlExpression expr1, string operation, ISqlExpression expr2) Parameters Type Name Description Type systemType ISqlExpression expr1 String operation ISqlExpression expr2 | Improve this Doc View Source SqlBinaryExpression(Type, ISqlExpression, String, ISqlExpression, Int32) Declaration public SqlBinaryExpression(Type systemType, ISqlExpression expr1, string operation, ISqlExpression expr2, int precedence) Parameters Type Name Description Type systemType ISqlExpression expr1 String operation ISqlExpression expr2 Int32 precedence Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Expr1 Declaration public ISqlExpression Expr1 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Operation Declaration public string Operation { get; } Property Value Type Description String | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description String | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.html",
    "title": "Class SelectQuery | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery Inheritance Object SelectQuery Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SelectQuery : ISqlTableSource, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SelectQuery() Declaration public SelectQuery() Fields | Improve this Doc View Source SourceIDCounter Declaration public static int SourceIDCounter Field Value Type Description Int32 Properties | Improve this Doc View Source All Declaration public SqlField All { get; } Property Value Type Description SqlField | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source From Declaration public SqlFromClause From { get; } Property Value Type Description SqlFromClause | Improve this Doc View Source GroupBy Declaration public SqlGroupByClause GroupBy { get; } Property Value Type Description SqlGroupByClause | Improve this Doc View Source HasUnion Declaration public bool HasUnion { get; } Property Value Type Description Boolean | Improve this Doc View Source Having Declaration public SqlWhereClause Having { get; } Property Value Type Description SqlWhereClause | Improve this Doc View Source IsParameterDependent Declaration public bool IsParameterDependent { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSimple Declaration public bool IsSimple { get; } Property Value Type Description Boolean | Improve this Doc View Source OrderBy Declaration public SqlOrderByClause OrderBy { get; } Property Value Type Description SqlOrderByClause | Improve this Doc View Source ParentSelect Declaration public SelectQuery ParentSelect { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source Properties Declaration public List<object> Properties { get; } Property Value Type Description List < Object > | Improve this Doc View Source Select Declaration public SqlSelectClause Select { get; } Property Value Type Description SqlSelectClause | Improve this Doc View Source SourceID Declaration public int SourceID { get; } Property Value Type Description Int32 | Improve this Doc View Source SqlTableType Declaration public SqlTableType SqlTableType { get; } Property Value Type Description SqlTableType | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description String | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type | Improve this Doc View Source Unions Declaration public List<SqlUnion> Unions { get; } Property Value Type Description List < SqlUnion > | Improve this Doc View Source Where Declaration public SqlWhereClause Where { get; } Property Value Type Description SqlWhereClause Methods | Improve this Doc View Source AddUnion(SelectQuery, Boolean) Declaration public void AddUnion(SelectQuery union, bool isAll) Parameters Type Name Description SelectQuery union Boolean isAll | Improve this Doc View Source Clone() Declaration public SelectQuery Clone() Returns Type Description SelectQuery | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Clone(Predicate<ICloneableElement>) Declaration public SelectQuery Clone(Predicate<ICloneableElement> doClone) Parameters Type Name Description Predicate < ICloneableElement > doClone Returns Type Description SelectQuery | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean | Improve this Doc View Source ForEachTable(Action<SqlTableSource>, HashSet<SelectQuery>) Declaration public void ForEachTable(Action<SqlTableSource> action, HashSet<SelectQuery> visitedQueries) Parameters Type Name Description Action < SqlTableSource > action HashSet < SelectQuery > visitedQueries | Improve this Doc View Source GetKeys(Boolean) Declaration public IList<ISqlExpression> GetKeys(bool allIfEmpty) Parameters Type Name Description Boolean allIfEmpty Returns Type Description IList < ISqlExpression > | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Explicit Interface Implementations | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods Extensions.InnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, String, SqlFromClause.Join[]) QueryHelper.RootQuery(SelectQuery) QueryHelper.FindJoin(SelectQuery, Func<SqlJoinedTable, Boolean>) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ReservedWords.html": {
    "href": "api/LinqToDB.SqlQuery.ReservedWords.html",
    "title": "Class ReservedWords | Linq To DB (aka linq2db)",
    "keywords": "Class ReservedWords Inheritance Object ReservedWords Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class ReservedWords Methods | Improve this Doc View Source Add(String, String) Declaration public static void Add(string word, string providerName = null) Parameters Type Name Description String word String providerName | Improve this Doc View Source IsReserved(String, String) Declaration public static bool IsReserved(string word, string providerName = null) Parameters Type Name Description String word String providerName Returns Type Description Boolean"
  },
  "api/LinqToDB.SqlQuery.QueryVisitor.html": {
    "href": "api/LinqToDB.SqlQuery.QueryVisitor.html",
    "title": "Class QueryVisitor | Linq To DB (aka linq2db)",
    "keywords": "Class QueryVisitor Inheritance Object QueryVisitor Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class QueryVisitor Properties | Improve this Doc View Source VisitedElements Declaration public Dictionary<IQueryElement, IQueryElement> VisitedElements { get; } Property Value Type Description Dictionary < IQueryElement , IQueryElement > Methods | Improve this Doc View Source Convert<T>(T, Func<IQueryElement, IQueryElement>) Declaration public T Convert<T>(T element, Func<IQueryElement, IQueryElement> action) where T : class, IQueryElement Parameters Type Name Description T element Func < IQueryElement , IQueryElement > action Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Find(IQueryElement, Func<IQueryElement, Boolean>) Declaration public static IQueryElement Find(IQueryElement element, Func<IQueryElement, bool> find) Parameters Type Name Description IQueryElement element Func < IQueryElement , Boolean > find Returns Type Description IQueryElement | Improve this Doc View Source Visit(IQueryElement, Action<IQueryElement>) Declaration public void Visit(IQueryElement element, Action<IQueryElement> action) Parameters Type Name Description IQueryElement element Action < IQueryElement > action | Improve this Doc View Source VisitAll(IQueryElement, Action<IQueryElement>) Declaration public void VisitAll(IQueryElement element, Action<IQueryElement> action) Parameters Type Name Description IQueryElement element Action < IQueryElement > action | Improve this Doc View Source VisitParentFirst(IQueryElement, Func<IQueryElement, Boolean>) Declaration public void VisitParentFirst(IQueryElement element, Func<IQueryElement, bool> action) Parameters Type Name Description IQueryElement element Func < IQueryElement , Boolean > action Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.QueryType.html": {
    "href": "api/LinqToDB.SqlQuery.QueryType.html",
    "title": "Enum QueryType | Linq To DB (aka linq2db)",
    "keywords": "Enum QueryType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum QueryType Fields Name Description CreateTable Delete DropTable Insert InsertOrUpdate Select TruncateTable Update Extension Methods Sql.Between<QueryType>(QueryType, QueryType) Sql.NotBetween<QueryType>(QueryType, QueryType) SqlExtensions.In<QueryType>(IEnumerable<QueryType>) SqlExtensions.In<QueryType>(IQueryable<QueryType>) SqlExtensions.In<QueryType>(QueryType[]) SqlExtensions.In<QueryType>(QueryType, QueryType) SqlExtensions.In<QueryType>(QueryType, QueryType, QueryType) SqlExtensions.NotIn<QueryType>(IEnumerable<QueryType>) SqlExtensions.NotIn<QueryType>(IQueryable<QueryType>) SqlExtensions.NotIn<QueryType>(QueryType[]) SqlExtensions.NotIn<QueryType>(QueryType, QueryType) SqlExtensions.NotIn<QueryType>(QueryType, QueryType, QueryType)"
  },
  "api/LinqToDB.SqlQuery.QueryInformation.html": {
    "href": "api/LinqToDB.SqlQuery.QueryInformation.html",
    "title": "Class QueryInformation | Linq To DB (aka linq2db)",
    "keywords": "Class QueryInformation This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Inheritance Object QueryInformation Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class QueryInformation Constructors | Improve this Doc View Source QueryInformation(SelectQuery) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public QueryInformation(SelectQuery rootQuery) Parameters Type Name Description SelectQuery rootQuery Methods | Improve this Doc View Source GetHierarchyInfo(SelectQuery) Returns HirarchyInfo for specific selectQuery Declaration public QueryInformation.HierarchyInfo GetHierarchyInfo(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description QueryInformation.HierarchyInfo | Improve this Doc View Source GetParentQuery(SelectQuery) Returns parent query if query is subquery for select Declaration public SelectQuery GetParentQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SelectQuery | Improve this Doc View Source GetQueriesParentFirst() Declaration public IEnumerable<SelectQuery> GetQueriesParentFirst() Returns Type Description IEnumerable < SelectQuery > | Improve this Doc View Source GetQueriesParentFirst(SelectQuery) Declaration public IEnumerable<SelectQuery> GetQueriesParentFirst(SelectQuery root) Parameters Type Name Description SelectQuery root Returns Type Description IEnumerable < SelectQuery > | Improve this Doc View Source GetUnionInvolving(SelectQuery) Declaration public bool? GetUnionInvolving(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description Nullable < Boolean > | Improve this Doc View Source Resync() Resync tree info. Can be called also during enumeration. Declaration public void Resync() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.QueryInformation.HierarchyType.html": {
    "href": "api/LinqToDB.SqlQuery.QueryInformation.HierarchyType.html",
    "title": "Enum QueryInformation.HierarchyType | Linq To DB (aka linq2db)",
    "keywords": "Enum QueryInformation.HierarchyType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum HierarchyType Fields Name Description From InnerQuery Join Union Extension Methods Sql.Between<QueryInformation.HierarchyType>(QueryInformation.HierarchyType, QueryInformation.HierarchyType) Sql.NotBetween<QueryInformation.HierarchyType>(QueryInformation.HierarchyType, QueryInformation.HierarchyType) SqlExtensions.In<QueryInformation.HierarchyType>(IEnumerable<QueryInformation.HierarchyType>) SqlExtensions.In<QueryInformation.HierarchyType>(IQueryable<QueryInformation.HierarchyType>) SqlExtensions.In<QueryInformation.HierarchyType>(QueryInformation.HierarchyType[]) SqlExtensions.In<QueryInformation.HierarchyType>(QueryInformation.HierarchyType, QueryInformation.HierarchyType) SqlExtensions.In<QueryInformation.HierarchyType>(QueryInformation.HierarchyType, QueryInformation.HierarchyType, QueryInformation.HierarchyType) SqlExtensions.NotIn<QueryInformation.HierarchyType>(IEnumerable<QueryInformation.HierarchyType>) SqlExtensions.NotIn<QueryInformation.HierarchyType>(IQueryable<QueryInformation.HierarchyType>) SqlExtensions.NotIn<QueryInformation.HierarchyType>(QueryInformation.HierarchyType[]) SqlExtensions.NotIn<QueryInformation.HierarchyType>(QueryInformation.HierarchyType, QueryInformation.HierarchyType) SqlExtensions.NotIn<QueryInformation.HierarchyType>(QueryInformation.HierarchyType, QueryInformation.HierarchyType, QueryInformation.HierarchyType)"
  },
  "api/LinqToDB.SqlQuery.QueryInformation.HierarchyInfo.html": {
    "href": "api/LinqToDB.SqlQuery.QueryInformation.HierarchyInfo.html",
    "title": "Class QueryInformation.HierarchyInfo | Linq To DB (aka linq2db)",
    "keywords": "Class QueryInformation.HierarchyInfo Inheritance Object QueryInformation.HierarchyInfo Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class HierarchyInfo Constructors | Improve this Doc View Source HierarchyInfo(SelectQuery, QueryInformation.HierarchyType, IQueryElement) Declaration public HierarchyInfo(SelectQuery masterQuery, QueryInformation.HierarchyType hierarchyType, IQueryElement parentElement) Parameters Type Name Description SelectQuery masterQuery QueryInformation.HierarchyType hierarchyType IQueryElement parentElement Properties | Improve this Doc View Source HierarchyType Declaration public QueryInformation.HierarchyType HierarchyType { get; } Property Value Type Description QueryInformation.HierarchyType | Improve this Doc View Source MasterQuery Declaration public SelectQuery MasterQuery { get; } Property Value Type Description SelectQuery | Improve this Doc View Source ParentElement Declaration public IQueryElement ParentElement { get; } Property Value Type Description IQueryElement Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.QueryHelper.html": {
    "href": "api/LinqToDB.SqlQuery.QueryHelper.html",
    "title": "Class QueryHelper | Linq To DB (aka linq2db)",
    "keywords": "Class QueryHelper Inheritance Object QueryHelper Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class QueryHelper Methods | Improve this Doc View Source CanRemoveOrderBy(SelectQuery, SqlProviderFlags, QueryInformation) Detects when we can remove order Declaration public static bool CanRemoveOrderBy(SelectQuery selectQuery, SqlProviderFlags flags, QueryInformation information) Parameters Type Name Description SelectQuery selectQuery SqlProviderFlags flags QueryInformation information Returns Type Description Boolean | Improve this Doc View Source CollectDependencies(IQueryElement, IEnumerable<ISqlTableSource>, HashSet<ISqlExpression>, IEnumerable<IQueryElement>) Declaration public static void CollectDependencies(IQueryElement root, IEnumerable<ISqlTableSource> sources, HashSet<ISqlExpression> found, IEnumerable<IQueryElement> ignore = null) Parameters Type Name Description IQueryElement root IEnumerable < ISqlTableSource > sources HashSet < ISqlExpression > found IEnumerable < IQueryElement > ignore | Improve this Doc View Source ConcatSearchCondition(SqlWhereClause, SqlSearchCondition) Declaration public static void ConcatSearchCondition(this SqlWhereClause where, SqlSearchCondition search) Parameters Type Name Description SqlWhereClause where SqlSearchCondition search | Improve this Doc View Source FindJoin(SelectQuery, Func<SqlJoinedTable, Boolean>) Declaration public static SqlJoinedTable FindJoin(this SelectQuery query, Func<SqlJoinedTable, bool> match) Parameters Type Name Description SelectQuery query Func < SqlJoinedTable , Boolean > match Returns Type Description SqlJoinedTable | Improve this Doc View Source RootQuery(SelectQuery) Declaration public static SelectQuery RootQuery(this SelectQuery query) Parameters Type Name Description SelectQuery query Returns Type Description SelectQuery | Improve this Doc View Source TryConvertOrderedDistinctToGroupBy(SelectQuery, SqlProviderFlags) Converts ORDER BY DISTINCT to GROUP BY equivalent Declaration public static bool TryConvertOrderedDistinctToGroupBy(SelectQuery select, SqlProviderFlags flags) Parameters Type Name Description SelectQuery select SqlProviderFlags flags Returns Type Description Boolean | Improve this Doc View Source TryRemoveDistinct(SelectQuery, QueryInformation) Detects when we can remove order Declaration public static bool TryRemoveDistinct(SelectQuery selectQuery, QueryInformation information) Parameters Type Name Description SelectQuery selectQuery QueryInformation information Returns Type Description Boolean"
  },
  "api/LinqToDB.SqlQuery.QueryElementType.html": {
    "href": "api/LinqToDB.SqlQuery.QueryElementType.html",
    "title": "Enum QueryElementType | Linq To DB (aka linq2db)",
    "keywords": "Enum QueryElementType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum QueryElementType Fields Name Description BetweenPredicate Column Condition CreateTableStatement CteClause DeleteStatement DropTableStatement ExprExprPredicate ExprPredicate FromClause FuncLikePredicate GroupByClause InListPredicate InsertClause InsertOrUpdateStatement InsertStatement InSubQueryPredicate IsNullPredicate JoinedTable LikePredicate NotExprPredicate OrderByClause OrderByItem SearchCondition SelectClause SelectStatement SetExpression SqlBinaryExpression SqlCteTable SqlDataType SqlExpression SqlField SqlFunction SqlParameter SqlQuery SqlTable SqlValue TableSource TruncateTableStatement Union UpdateClause UpdateStatement WhereClause WithClause Extension Methods Sql.Between<QueryElementType>(QueryElementType, QueryElementType) Sql.NotBetween<QueryElementType>(QueryElementType, QueryElementType) SqlExtensions.In<QueryElementType>(IEnumerable<QueryElementType>) SqlExtensions.In<QueryElementType>(IQueryable<QueryElementType>) SqlExtensions.In<QueryElementType>(QueryElementType[]) SqlExtensions.In<QueryElementType>(QueryElementType, QueryElementType) SqlExtensions.In<QueryElementType>(QueryElementType, QueryElementType, QueryElementType) SqlExtensions.NotIn<QueryElementType>(IEnumerable<QueryElementType>) SqlExtensions.NotIn<QueryElementType>(IQueryable<QueryElementType>) SqlExtensions.NotIn<QueryElementType>(QueryElementType[]) SqlExtensions.NotIn<QueryElementType>(QueryElementType, QueryElementType) SqlExtensions.NotIn<QueryElementType>(QueryElementType, QueryElementType, QueryElementType)"
  },
  "api/LinqToDB.SqlQuery.Precedence.html": {
    "href": "api/LinqToDB.SqlQuery.Precedence.html",
    "title": "Class Precedence | Linq To DB (aka linq2db)",
    "keywords": "Class Precedence Inheritance Object Precedence Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Precedence Fields | Improve this Doc View Source Additive Declaration public const int Additive = 60 Field Value Type Description Int32 | Improve this Doc View Source Bitwise Declaration public const int Bitwise = 40 Field Value Type Description Int32 | Improve this Doc View Source Comparison Declaration public const int Comparison = 50 Field Value Type Description Int32 | Improve this Doc View Source LogicalConjunction Declaration public const int LogicalConjunction = 20 Field Value Type Description Int32 | Improve this Doc View Source LogicalDisjunction Declaration public const int LogicalDisjunction = 10 Field Value Type Description Int32 | Improve this Doc View Source LogicalNegation Declaration public const int LogicalNegation = 30 Field Value Type Description Int32 | Improve this Doc View Source Multiplicative Declaration public const int Multiplicative = 80 Field Value Type Description Int32 | Improve this Doc View Source Primary Declaration public const int Primary = 100 Field Value Type Description Int32 | Improve this Doc View Source Subtraction Declaration public const int Subtraction = 70 Field Value Type Description Int32 | Improve this Doc View Source Unary Declaration public const int Unary = 90 Field Value Type Description Int32 | Improve this Doc View Source Unknown Declaration public const int Unknown = 0 Field Value Type Description Int32 Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ObjectSqlExpression.html": {
    "href": "api/LinqToDB.SqlQuery.ObjectSqlExpression.html",
    "title": "Class ObjectSqlExpression | Linq To DB (aka linq2db)",
    "keywords": "Class ObjectSqlExpression Inheritance Object SqlExpression ObjectSqlExpression Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Inherited Members SqlExpression.SystemType SqlExpression.Expr SqlExpression.Precedence SqlExpression.Parameters SqlExpression.IsAggregate SqlExpression.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlExpression.IEquatable<ISqlExpression>.Equals(ISqlExpression) SqlExpression.CanBeNull SqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) SqlExpression.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlExpression.ElementType SqlExpression.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) SqlExpression.NeedsEqual(IQueryElement) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class ObjectSqlExpression : SqlExpression, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source ObjectSqlExpression(MappingSchema, SqlInfo[]) Declaration public ObjectSqlExpression(MappingSchema mappingSchema, params SqlInfo[] parameters) Parameters Type Name Description MappingSchema mappingSchema SqlInfo [] parameters Methods | Improve this Doc View Source GetValue(Object, Int32) Declaration public object GetValue(object obj, int index) Parameters Type Name Description Object obj Int32 index Returns Type Description Object Implements ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.JoinType.html": {
    "href": "api/LinqToDB.SqlQuery.JoinType.html",
    "title": "Enum JoinType | Linq To DB (aka linq2db)",
    "keywords": "Enum JoinType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum JoinType Fields Name Description Auto CrossApply Full Inner Left OuterApply Right Extension Methods Sql.Between<JoinType>(JoinType, JoinType) Sql.NotBetween<JoinType>(JoinType, JoinType) SqlExtensions.In<JoinType>(IEnumerable<JoinType>) SqlExtensions.In<JoinType>(IQueryable<JoinType>) SqlExtensions.In<JoinType>(JoinType[]) SqlExtensions.In<JoinType>(JoinType, JoinType) SqlExtensions.In<JoinType>(JoinType, JoinType, JoinType) SqlExtensions.NotIn<JoinType>(IEnumerable<JoinType>) SqlExtensions.NotIn<JoinType>(IQueryable<JoinType>) SqlExtensions.NotIn<JoinType>(JoinType[]) SqlExtensions.NotIn<JoinType>(JoinType, JoinType) SqlExtensions.NotIn<JoinType>(JoinType, JoinType, JoinType)"
  },
  "api/LinqToDB.SqlQuery.IValueContainer.html": {
    "href": "api/LinqToDB.SqlQuery.IValueContainer.html",
    "title": "Interface IValueContainer | Linq To DB (aka linq2db)",
    "keywords": "Interface IValueContainer Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface IValueContainer Properties | Improve this Doc View Source Value Declaration object Value { get; } Property Value Type Description Object Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ISqlTableSource.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlTableSource.html",
    "title": "Interface ISqlTableSource | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlTableSource Inherited Members ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) ISqlExpression.CanBeNull ISqlExpression.Precedence ISqlExpression.SystemType IQueryElement.ElementType IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) IEquatable<ISqlExpression>.Equals(ISqlExpression) ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlTableSource : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source All Declaration SqlField All { get; } Property Value Type Description SqlField | Improve this Doc View Source SourceID Declaration int SourceID { get; } Property Value Type Description Int32 | Improve this Doc View Source SqlTableType Declaration SqlTableType SqlTableType { get; } Property Value Type Description SqlTableType Methods | Improve this Doc View Source GetKeys(Boolean) Declaration IList<ISqlExpression> GetKeys(bool allIfEmpty) Parameters Type Name Description Boolean allIfEmpty Returns Type Description IList < ISqlExpression > Extension Methods Extensions.InnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, String, SqlFromClause.Join[]) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ISqlPredicate.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlPredicate.html",
    "title": "Interface ISqlPredicate | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlPredicate Inherited Members IQueryElement.ElementType IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlPredicate : IQueryElement, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source CanBeNull Declaration bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source Precedence Declaration int Precedence { get; } Property Value Type Description Int32 Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.MergeOperationType.html": {
    "href": "api/LinqToDB.MergeOperationType.html",
    "title": "Enum MergeOperationType | Linq To DB (aka linq2db)",
    "keywords": "Enum MergeOperationType Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum MergeOperationType Fields Name Description Delete DeleteBySource Insert Update UpdateBySource UpdateWithDelete Extension Methods Sql.Between<MergeOperationType>(MergeOperationType, MergeOperationType) Sql.NotBetween<MergeOperationType>(MergeOperationType, MergeOperationType) SqlExtensions.In<MergeOperationType>(IEnumerable<MergeOperationType>) SqlExtensions.In<MergeOperationType>(IQueryable<MergeOperationType>) SqlExtensions.In<MergeOperationType>(MergeOperationType[]) SqlExtensions.In<MergeOperationType>(MergeOperationType, MergeOperationType) SqlExtensions.In<MergeOperationType>(MergeOperationType, MergeOperationType, MergeOperationType) SqlExtensions.NotIn<MergeOperationType>(IEnumerable<MergeOperationType>) SqlExtensions.NotIn<MergeOperationType>(IQueryable<MergeOperationType>) SqlExtensions.NotIn<MergeOperationType>(MergeOperationType[]) SqlExtensions.NotIn<MergeOperationType>(MergeOperationType, MergeOperationType) SqlExtensions.NotIn<MergeOperationType>(MergeOperationType, MergeOperationType, MergeOperationType)"
  },
  "api/LinqToDB.MergeExtensions.html": {
    "href": "api/LinqToDB.MergeExtensions.html",
    "title": "Class MergeExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class MergeExtensions Contains extension methods for merge API. Inheritance Object MergeExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class MergeExtensions Methods | Improve this Doc View Source DeleteWhenMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>) Adds new delete operation to merge and returns new merge command with added operation. This operation removes record in target table for each record that was matched in source and target, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> DeleteWhenMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source DeleteWhenMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>) Adds new delete operation to merge and returns new merge command with added operation. This operation removes record in target table for each record that was matched in source and target, if it was matched by operation predicate and wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> DeleteWhenMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TSource, Boolean >> searchCondition Operation execution condition over target and source records. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source DeleteWhenNotMatchedBySource<TTarget, TSource>(IMergeableSource<TTarget, TSource>) IMPORTANT: This operation supported only by Microsoft SQL Server. Adds new delete by source operation to merge and returns new merge command with added operation. This operation removes record in target table for each record that was matched only in target and wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> DeleteWhenNotMatchedBySource<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source DeleteWhenNotMatchedBySourceAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, Boolean>>) IMPORTANT: This operation supported only by Microsoft SQL Server. Adds new delete by source operation to merge and returns new merge command with added operation. This operation removes record in target table for each record that was matched only in target and passed filtering with operation predicate, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> DeleteWhenNotMatchedBySourceAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, bool>> searchCondition) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, Boolean >> searchCondition Operation execution condition over target record. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source InsertWhenNotMatched<TTarget>(IMergeableSource<TTarget, TTarget>) Adds new insert operation to merge and returns new merge command with added operation. This operation inserts new record to target table using data from the same fields of source record for each new record from source, not processed by previous operations. Declaration public static IMergeable<TTarget, TTarget> InsertWhenNotMatched<TTarget>(this IMergeableSource<TTarget, TTarget> merge) where TTarget : class Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source InsertWhenNotMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TSource, TTarget>>) Adds new insert operation to merge and returns new merge command with added operation. This operation inserts new record to target table using user-defined values for target columns for each new record from source, not processed by previous operations. Declaration public static IMergeable<TTarget, TSource> InsertWhenNotMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TSource, TTarget>> setter) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TSource, TTarget>> setter Create record expression using source record. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source InsertWhenNotMatchedAnd<TTarget>(IMergeableSource<TTarget, TTarget>, Expression<Func<TTarget, Boolean>>) Adds new insert operation to merge and returns new merge command with added operation. This operation inserts new record to target table using data from the same fields of source record for each new record from source that passes filtering with specified predicate, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TTarget> InsertWhenNotMatchedAnd<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, bool>> searchCondition) where TTarget : class Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Expression < Func <TTarget, Boolean >> searchCondition Operation execution condition over source record. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source InsertWhenNotMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TSource, Boolean>>, Expression<Func<TSource, TTarget>>) Adds new insert operation to merge and returns new merge command with added operation. This operation inserts new record to target table using user-defined values for target columns for each new record from source that passes filtering with specified predicate, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> InsertWhenNotMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TSource, bool>> searchCondition, Expression<Func<TSource, TTarget>> setter) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TSource, Boolean >> searchCondition Operation execution condition over source record. Expression < Func <TSource, TTarget>> setter Create record expression using source record. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source Merge<TTarget>(ITable<TTarget>) Starts merge operation definition from target table. Declaration public static IMergeableUsing<TTarget> Merge<TTarget>(this ITable<TTarget> target) where TTarget : class Parameters Type Name Description ITable <TTarget> target Target table. Returns Type Description IMergeableUsing <TTarget> Returns merge command builder, that contains only target. Type Parameters Name Description TTarget Target record type. | Improve this Doc View Source Merge<TTarget, TSource>(IMergeable<TTarget, TSource>) Executes merge command and returns total number of target records, affected by merge operations. Declaration public static int Merge<TTarget, TSource>(this IMergeable<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description IMergeable <TTarget, TSource> merge Merge command definition. Returns Type Description Int32 Returns number of target table records, affected by merge comand. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source MergeAsync<TTarget, TSource>(IMergeable<TTarget, TSource>, CancellationToken) Executes merge command and returns total number of target records, affected by merge operations. Declaration public static Task<int> MergeAsync<TTarget, TSource>(this IMergeable<TTarget, TSource> merge, CancellationToken token = default(CancellationToken)) where TTarget : class where TSource : class Parameters Type Name Description IMergeable <TTarget, TSource> merge Merge command definition. CancellationToken token Asynchronous operation cancellation token. Returns Type Description Task < Int32 > Returns number of target table records, affected by merge comand. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source MergeInto<TTarget, TSource>(IQueryable<TSource>, ITable<TTarget>) Starts merge operation definition from source query. Declaration public static IMergeableOn<TTarget, TSource> MergeInto<TTarget, TSource>(this IQueryable<TSource> source, ITable<TTarget> target) where TTarget : class where TSource : class Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Returns Type Description IMergeableOn <TTarget, TSource> Returns merge command builder with source and target set. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source On<TTarget, TSource>(IMergeableOn<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>) Adds definition of matching of target and source records using match condition. Declaration public static IMergeableSource<TTarget, TSource> On<TTarget, TSource>(this IMergeableOn<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> matchCondition) where TTarget : class where TSource : class Parameters Type Name Description IMergeableOn <TTarget, TSource> merge Merge command builder. Expression < Func <TTarget, TSource, Boolean >> matchCondition Rule to match/join target and source records. Returns Type Description IMergeableSource <TTarget, TSource> Returns merge command builder with source, target and match (ON) set. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source On<TTarget, TSource, TKey>(IMergeableOn<TTarget, TSource>, Expression<Func<TTarget, TKey>>, Expression<Func<TSource, TKey>>) Adds definition of matching of target and source records using key value. Declaration public static IMergeableSource<TTarget, TSource> On<TTarget, TSource, TKey>(this IMergeableOn<TTarget, TSource> merge, Expression<Func<TTarget, TKey>> targetKey, Expression<Func<TSource, TKey>> sourceKey) where TTarget : class where TSource : class Parameters Type Name Description IMergeableOn <TTarget, TSource> merge Merge command builder. Expression < Func <TTarget, TKey>> targetKey Target record match key definition. Expression < Func <TSource, TKey>> sourceKey Source record match key definition. Returns Type Description IMergeableSource <TTarget, TSource> Returns merge command builder with source, target and match (ON) set. Type Parameters Name Description TTarget Target record type. TSource Source record type. TKey Source and target records join/match key type. | Improve this Doc View Source OnTargetKey<TTarget>(IMergeableOn<TTarget, TTarget>) Adds definition of matching of target and source records using primary key columns. Declaration public static IMergeableSource<TTarget, TTarget> OnTargetKey<TTarget>(this IMergeableOn<TTarget, TTarget> merge) where TTarget : class Parameters Type Name Description IMergeableOn <TTarget, TTarget> merge Merge command builder. Returns Type Description IMergeableSource <TTarget, TTarget> Returns merge command builder with source, target and match (ON) set. Type Parameters Name Description TTarget Target record type. | Improve this Doc View Source UpdateWhenMatched<TTarget>(IMergeableSource<TTarget, TTarget>) Adds new update operation to merge and returns new merge command with added operation. This operation updates record in target table using data from the same fields of source record for each record that was matched in source and target, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TTarget> UpdateWhenMatched<TTarget>(this IMergeableSource<TTarget, TTarget> merge) where TTarget : class Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source UpdateWhenMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, TTarget>>) Adds new update operation to merge and returns new merge command with added operation. This operation updates record in target table using user-defined values for target columns for each record that was matched in source and target, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> UpdateWhenMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, TTarget>> setter) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TSource, TTarget>> setter Update record expression using target and source records. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UpdateWhenMatchedAnd<TTarget>(IMergeableSource<TTarget, TTarget>, Expression<Func<TTarget, TTarget, Boolean>>) Adds new update operation to merge and returns new merge command with added operation. This operation updates record in target table using data from the same fields of source record for each record that was matched in source and target and passes filtering with specified predicate, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TTarget> UpdateWhenMatchedAnd<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> searchCondition) where TTarget : class Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Expression < Func <TTarget, TTarget, Boolean >> searchCondition Operation execution condition over target and source records. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source UpdateWhenMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>) Adds new update operation to merge and returns new merge command with added operation. This operation updates record in target table using user-defined values for target columns for each record that was matched in source and target and passes filtering with specified predicate, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> UpdateWhenMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition, Expression<Func<TTarget, TSource, TTarget>> setter) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TSource, Boolean >> searchCondition Operation execution condition over target and source records. Expression < Func <TTarget, TSource, TTarget>> setter Update record expression using target and source records. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UpdateWhenMatchedAndThenDelete<TTarget>(IMergeableSource<TTarget, TTarget>, Expression<Func<TTarget, TTarget, Boolean>>, Expression<Func<TTarget, TTarget, Boolean>>) IMPORTANT: This operation supported only by Oracle Database. Adds new update with delete operation to merge and returns new merge command with added operation. This operation updates record in target table using data from the same fields of source record for each record that was matched in source and target and passes filtering with specified predicate, if it wasn't processed by previous operations. After that it removes updated records if they are matched by delete predicate. Declaration public static IMergeable<TTarget, TTarget> UpdateWhenMatchedAndThenDelete<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> searchCondition, Expression<Func<TTarget, TTarget, bool>> deleteCondition) where TTarget : class Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Expression < Func <TTarget, TTarget, Boolean >> searchCondition Update execution condition over target and source records. Expression < Func <TTarget, TTarget, Boolean >> deleteCondition Delete execution condition over updated target and source records. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source UpdateWhenMatchedAndThenDelete<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>, Expression<Func<TTarget, TSource, Boolean>>) IMPORTANT: This operation supported only by Oracle Database. Adds new update with delete operation to merge and returns new merge command with added operation. This operation updates record in target table using user-defined values for target columns for each record that was matched in source and target and passes filtering with specified predicate, if it wasn't processed by previous operations. After that it removes updated records if they matched by delete predicate. Declaration public static IMergeable<TTarget, TSource> UpdateWhenMatchedAndThenDelete<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition, Expression<Func<TTarget, TSource, TTarget>> setter, Expression<Func<TTarget, TSource, bool>> deleteCondition) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TSource, Boolean >> searchCondition Update execution condition over target and source records. Expression < Func <TTarget, TSource, TTarget>> setter Update record expression using target and source records. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Expression < Func <TTarget, TSource, Boolean >> deleteCondition Delete execution condition over updated target and source records. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UpdateWhenMatchedThenDelete<TTarget>(IMergeableSource<TTarget, TTarget>, Expression<Func<TTarget, TTarget, Boolean>>) IMPORTANT: This operation supported only by Oracle Database. Adds new update with delete operation to merge and returns new merge command with added operation. This operation updates record in target table using data from the same fields of source record for each record that was matched in source and target, if it wasn't processed by previous operations. After that it removes updated records if they are matched by delete predicate. Declaration public static IMergeable<TTarget, TTarget> UpdateWhenMatchedThenDelete<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> deleteCondition) where TTarget : class Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Expression < Func <TTarget, TTarget, Boolean >> deleteCondition Delete execution condition over updated target and source records. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source UpdateWhenMatchedThenDelete<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, TTarget>>, Expression<Func<TTarget, TSource, Boolean>>) IMPORTANT: This operation supported only by Oracle Database. Adds new update with delete operation to merge and returns new merge command with added operation. This operation updates record in target table using user-defined values for target columns for each record that was matched in source and target, if it wasn't processed by previous operations. After that it removes updated records if they matched by delete predicate. Declaration public static IMergeable<TTarget, TSource> UpdateWhenMatchedThenDelete<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, TTarget>> setter, Expression<Func<TTarget, TSource, bool>> deleteCondition) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TSource, TTarget>> setter Update record expression using target and source records. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Expression < Func <TTarget, TSource, Boolean >> deleteCondition Delete execution condition over updated target and source records. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UpdateWhenNotMatchedBySource<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TTarget>>) IMPORTANT: This operation supported only by Microsoft SQL Server. Adds new update by source operation to merge and returns new merge command with added operation. This operation updates record in target table for each record that was matched only in target using user-defined values for target columns, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> UpdateWhenNotMatchedBySource<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TTarget>> setter) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TTarget>> setter Update record expression using target record. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UpdateWhenNotMatchedBySourceAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, Boolean>>, Expression<Func<TTarget, TTarget>>) IMPORTANT: This operation supported only by Microsoft SQL Server. Adds new update by source operation to merge and returns new merge command with added operation. This operation updates record in target table for each record that was matched only in target using user-defined values for target columns, if it passed filtering by operation predicate and wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> UpdateWhenNotMatchedBySourceAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, bool>> searchCondition, Expression<Func<TTarget, TTarget>> setter) where TTarget : class where TSource : class Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, Boolean >> searchCondition Operation execution condition over target record. Expression < Func <TTarget, TTarget>> setter Update record expression using target record. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source Using<TTarget, TSource>(IMergeableUsing<TTarget>, IEnumerable<TSource>) Adds source collection to merge command definition. Declaration public static IMergeableOn<TTarget, TSource> Using<TTarget, TSource>(this IMergeableUsing<TTarget> merge, IEnumerable<TSource> source) where TTarget : class where TSource : class Parameters Type Name Description IMergeableUsing <TTarget> merge Merge command builder. IEnumerable <TSource> source Source data collection. Returns Type Description IMergeableOn <TTarget, TSource> Returns merge command builder with source and target set. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source Using<TTarget, TSource>(IMergeableUsing<TTarget>, IQueryable<TSource>) Adds source query to merge command definition. Declaration public static IMergeableOn<TTarget, TSource> Using<TTarget, TSource>(this IMergeableUsing<TTarget> merge, IQueryable<TSource> source) where TTarget : class where TSource : class Parameters Type Name Description IMergeableUsing <TTarget> merge Merge command builder. IQueryable <TSource> source Source data query. Returns Type Description IMergeableOn <TTarget, TSource> Returns merge command builder with source and target set. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UsingTarget<TTarget>(IMergeableUsing<TTarget>) Sets target table as merge command source. Declaration public static IMergeableOn<TTarget, TTarget> UsingTarget<TTarget>(this IMergeableUsing<TTarget> merge) where TTarget : class Parameters Type Name Description IMergeableUsing <TTarget> merge Merge command builder. Returns Type Description IMergeableOn <TTarget, TTarget> Returns merge command builder with source and target set. Type Parameters Name Description TTarget Target record type."
  },
  "api/LinqToDB.Mapping.InheritanceMappingAttribute.html": {
    "href": "api/LinqToDB.Mapping.InheritanceMappingAttribute.html",
    "title": "Class InheritanceMappingAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class InheritanceMappingAttribute Defines to which type linq2db should map record based on discriminator value. You can apply this attribute to a base class or insterface, implemented by all child classes. Don't forget to define discriminator value storage column using IsDiscriminator . Inheritance Object Attribute InheritanceMappingAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true)] public class InheritanceMappingAttribute : Attribute, _Attribute Remarks You cannot configure inheritance mapping using this attribute for discriminator types, not supported by .NET attributes. See document for a list of supported types. Properties | Improve this Doc View Source Code Gets or sets discriminator value. Declaration public object Code { get; set; } Property Value Type Description Object | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source IsDefault Get or sets flag, that tells linq2db that current mapping should be used by default if suitable mapping type not found. Declaration public bool IsDefault { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Type Gets or sets type, to which record with current discriminator value should be mapped. Declaration public Type Type { get; set; } Property Value Type Description Type Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.InheritanceMapping.html": {
    "href": "api/LinqToDB.Mapping.InheritanceMapping.html",
    "title": "Class InheritanceMapping | Linq To DB (aka linq2db)",
    "keywords": "Class InheritanceMapping Stores inheritance mapping information for single discriminator value. Inheritance Object InheritanceMapping Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class InheritanceMapping Fields | Improve this Doc View Source Code Inheritance discriminator value. Declaration public object Code Field Value Type Description Object | Improve this Doc View Source Discriminator Discriminator column descriptor. Declaration public ColumnDescriptor Discriminator Field Value Type Description ColumnDescriptor | Improve this Doc View Source IsDefault Is it default mapping. Declaration public bool IsDefault Field Value Type Description Boolean | Improve this Doc View Source Type Mapping class type for current discriminator value. Declaration public Type Type Field Value Type Description Type Properties | Improve this Doc View Source DiscriminatorName Gets discriminator field or property name. Declaration public string DiscriminatorName { get; } Property Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.IEntityChangeDescriptor.html": {
    "href": "api/LinqToDB.Mapping.IEntityChangeDescriptor.html",
    "title": "Interface IEntityChangeDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Interface IEntityChangeDescriptor Mapping entity descriptor change interface. Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public interface IEntityChangeDescriptor Properties | Improve this Doc View Source Columns Gets list of change interfaces for column descriptors for current entity. Declaration IEnumerable<IColumnChangeDescriptor> Columns { get; } Property Value Type Description IEnumerable < IColumnChangeDescriptor > | Improve this Doc View Source DatabaseName Gets or sets optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. Declaration string DatabaseName { get; set; } Property Value Type Description String | Improve this Doc View Source SchemaName Gets or sets optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Declaration string SchemaName { get; set; } Property Value Type Description String | Improve this Doc View Source TableName Gets or sets name of table or view in database. Declaration string TableName { get; set; } Property Value Type Description String | Improve this Doc View Source TypeAccessor Gets or sets mapping type accessor. Declaration TypeAccessor TypeAccessor { get; set; } Property Value Type Description TypeAccessor Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.IdentityAttribute.html": {
    "href": "api/LinqToDB.Mapping.IdentityAttribute.html",
    "title": "Class IdentityAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityAttribute Marks target column as identity column with value, generated on database side during insert operations. Identity columns will be ignored for insert and update operations with implicit column list like Insert<T>(IDataContext, T, String, String, String) or Update<T>(IDataContext, T, String, String, String) methods. Inheritance Object Attribute IdentityAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)] public class IdentityAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source IdentityAttribute() Creates attribute instance. Declaration public IdentityAttribute() | Improve this Doc View Source IdentityAttribute(String) Creates attribute instance. Declaration public IdentityAttribute(string configuration) Parameters Type Name Description String configuration Mapping schema configuration name. See Configuration . Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.IColumnChangeDescriptor.html": {
    "href": "api/LinqToDB.Mapping.IColumnChangeDescriptor.html",
    "title": "Interface IColumnChangeDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Interface IColumnChangeDescriptor Mapping entity column descriptor change interface. Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public interface IColumnChangeDescriptor Properties | Improve this Doc View Source ColumnName Gets or sets the name of a column in database. If not specified, MemberName value will be returned. Declaration string ColumnName { get; set; } Property Value Type Description String | Improve this Doc View Source MemberName Gets the name of mapped member. When applied to class or interface, should contain name of property of field. If column is mapped to a property or field of composite object, MemberName should contain a path to that member using dot as separator. public class Address { public string City { get; set; } public string Street { get; set; } public int Building { get; set; } } [Column(\"city\", \"Residence.Street\")] [Column(\"user_name\", \"Name\")] public class User { public string Name; [Column(\"street\", \".Street\")] [Column(\"building_number\", MemberName = \".Building\")] public Address Residence { get; set; } } Declaration string MemberName { get; } Property Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.FluentMappingBuilder.html": {
    "href": "api/LinqToDB.Mapping.FluentMappingBuilder.html",
    "title": "Class FluentMappingBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class FluentMappingBuilder Fluent mapping builder. Inheritance Object FluentMappingBuilder Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class FluentMappingBuilder Constructors | Improve this Doc View Source FluentMappingBuilder(MappingSchema) Creates fluent mapping builder for specified mapping schema. Declaration public FluentMappingBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Mapping schema. Properties | Improve this Doc View Source MappingSchema Gets builder's mapping schema. Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Methods | Improve this Doc View Source Entity<T>(String) Creates entity builder for specified mapping type. Declaration public EntityMappingBuilder<T> Entity<T>(string configuration = null) Parameters Type Name Description String configuration Optional mapping schema configuration name, for which this entity builder should be taken into account. ProviderName for standard configuration names. Returns Type Description EntityMappingBuilder <T> Returns entity fluent mapping builder. Type Parameters Name Description T Mapping type. | Improve this Doc View Source GetAttributes<T>(Type) Gets attributes of type T , applied to specified type. Declaration public T[] GetAttributes<T>(Type type) where T : Attribute Parameters Type Name Description Type type Type with attributes. Returns Type Description T[] Returns attributes of specified type, applied to type . Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo) Gets attributes of type T , applied to specified member. Search for member in specified type or it's parents. Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo) where T : Attribute Parameters Type Name Description Type type Member owner type. MemberInfo memberInfo Member descriptor. Returns Type Description T[] Returns attributes of specified type, applied to memberInfo . Type Parameters Name Description T Attribute type. | Improve this Doc View Source HasAttribute(LambdaExpression, Attribute) Adds mapping attribute to a member, specified using lambda expression. Declaration public FluentMappingBuilder HasAttribute(LambdaExpression func, Attribute attribute) Parameters Type Name Description LambdaExpression func Target member, specified using lambda expression. Attribute attribute Mapping attribute to add to specified member. Returns Type Description FluentMappingBuilder Returns current fluent mapping builder. | Improve this Doc View Source HasAttribute(MemberInfo, Attribute) Adds mapping attribute to specified member. Declaration public FluentMappingBuilder HasAttribute(MemberInfo memberInfo, Attribute attribute) Parameters Type Name Description MemberInfo memberInfo Target member. Attribute attribute Mapping attribute to add to specified member. Returns Type Description FluentMappingBuilder Returns current fluent mapping builder. | Improve this Doc View Source HasAttribute(Type, Attribute) Adds mapping attribute to specified type. Declaration public FluentMappingBuilder HasAttribute(Type type, Attribute attribute) Parameters Type Name Description Type type Target type. Attribute attribute Mapping attribute to add to specified type. Returns Type Description FluentMappingBuilder Returns current fluent mapping builder. | Improve this Doc View Source HasAttribute<T>(Attribute) Adds mapping attribute to specified type. Declaration public FluentMappingBuilder HasAttribute<T>(Attribute attribute) Parameters Type Name Description Attribute attribute Mapping attribute to add to specified type. Returns Type Description FluentMappingBuilder Returns current fluent mapping builder. Type Parameters Name Description T Target type. | Improve this Doc View Source HasAttribute<T>(Expression<Func<T, Object>>, Attribute) Adds mapping attribute to a member, specified using lambda expression. Declaration public FluentMappingBuilder HasAttribute<T>(Expression<Func<T, object>> func, Attribute attribute) Parameters Type Name Description Expression < Func <T, Object >> func Target member, specified using lambda expression. Attribute attribute Mapping attribute to add to specified member. Returns Type Description FluentMappingBuilder Returns current fluent mapping builder. Type Parameters Name Description T Type of labmda expression parameter. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.EntityMappingBuilder-1.html": {
    "href": "api/LinqToDB.Mapping.EntityMappingBuilder-1.html",
    "title": "Class EntityMappingBuilder<T> | Linq To DB (aka linq2db)",
    "keywords": "Class EntityMappingBuilder<T> Fluent mapping entity builder. Inheritance Object EntityMappingBuilder<T> Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class EntityMappingBuilder<T> Type Parameters Name Description T Entity mapping type. Constructors | Improve this Doc View Source EntityMappingBuilder(FluentMappingBuilder, String) Creates entity mapping builder. Declaration public EntityMappingBuilder(FluentMappingBuilder builder, string configuration) Parameters Type Name Description FluentMappingBuilder builder Fluent mapping builder. String configuration Optional mapping schema configuration name, for which this entity builder should be taken into account. ProviderName for standard configuration names. Properties | Improve this Doc View Source Configuration Gets mapping schema configuration name, for which this entity builder should be taken into account. ProviderName for standard configuration names. Declaration public string Configuration { get; } Property Value Type Description String Methods | Improve this Doc View Source Association<TOther>(Expression<Func<T, TOther>>, Expression<Func<T, TOther, Boolean>>, Boolean) Adds one-to-one association mapping to current entity. Declaration public PropertyMappingBuilder<T> Association<TOther>(Expression<Func<T, TOther>> prop, Expression<Func<T, TOther, bool>> predicate, bool canBeNull = true) Parameters Type Name Description Expression < Func <T, TOther>> prop Association member getter expression. Expression < Func <T, TOther, Boolean >> predicate Predicate expresssion Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <T> Returns fluent property mapping builder. Type Parameters Name Description TOther Other association side type | Improve this Doc View Source Association<TOther>(Expression<Func<T, IEnumerable<TOther>>>, Expression<Func<T, TOther, Boolean>>, Boolean) Adds one-to-many association mapping to current entity. Declaration public PropertyMappingBuilder<T> Association<TOther>(Expression<Func<T, IEnumerable<TOther>>> prop, Expression<Func<T, TOther, bool>> predicate, bool canBeNull = true) Parameters Type Name Description Expression < Func <T, IEnumerable <TOther>>> prop Association member getter expression. Expression < Func <T, TOther, Boolean >> predicate Predicate expresssion. Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <T> Returns fluent property mapping builder. Type Parameters Name Description TOther Other association side type | Improve this Doc View Source Association<S, ID1, ID2>(Expression<Func<T, S>>, Expression<Func<T, ID1>>, Expression<Func<S, ID2>>, Boolean) Adds association mapping to current entity. Declaration public PropertyMappingBuilder<T> Association<S, ID1, ID2>(Expression<Func<T, S>> prop, Expression<Func<T, ID1>> thisKey, Expression<Func<S, ID2>> otherKey, bool canBeNull = true) Parameters Type Name Description Expression < Func <T, S>> prop Association member getter expression. Expression < Func <T, ID1>> thisKey This association key getter expression. Expression < Func <S, ID2>> otherKey Other association key getter expression. Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <T> Returns fluent property mapping builder. Type Parameters Name Description S Association member type. ID1 This association side key type. ID2 Other association side key type. | Improve this Doc View Source Entity<TE>(String) Creates entity builder for specified mapping type. Declaration public EntityMappingBuilder<TE> Entity<TE>(string configuration = null) Parameters Type Name Description String configuration Optional mapping schema configuration name, for which this entity builder should be taken into account. ProviderName for standard configuration names. Returns Type Description EntityMappingBuilder <TE> Returns new fluent entity mapping builder. Type Parameters Name Description TE Mapping type. | Improve this Doc View Source GetAttributes<TA>() Returns attributes of specified type, applied to current entity type. Declaration public TA[] GetAttributes<TA>() where TA : Attribute Returns Type Description TA[] Returns list of attributes, applied to current entity type. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source GetAttributes<TA>(Func<TA, String>) Returns attributes of specified type, applied to current entity type and active for current configuration. Declaration public TA[] GetAttributes<TA>(Func<TA, string> configGetter) where TA : Attribute Parameters Type Name Description Func <TA, String > configGetter Function to extract configuration name from attribute instance. Returns Type Description TA[] Returns list of attributes. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source GetAttributes<TA>(MemberInfo) Returns attributes of specified type, applied to specified entity member. Member could be inherited from parent classes. Declaration public TA[] GetAttributes<TA>(MemberInfo memberInfo) where TA : Attribute Parameters Type Name Description MemberInfo memberInfo Member info object. Returns Type Description TA[] Returns list of attributes, applied to specified entity member. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source GetAttributes<TA>(MemberInfo, Func<TA, String>) Returns attributes of specified type, applied to specified entity member and active for current configuration. Declaration public TA[] GetAttributes<TA>(MemberInfo memberInfo, Func<TA, string> configGetter) where TA : Attribute Parameters Type Name Description MemberInfo memberInfo Member info object. Func <TA, String > configGetter Function to extract configuration name from attribute instance. Returns Type Description TA[] Returns list of attributes. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source GetAttributes<TA>(Type) Returns attributes of specified type, applied to specified entity type. Declaration public TA[] GetAttributes<TA>(Type type) where TA : Attribute Parameters Type Name Description Type type Entity type. Returns Type Description TA[] Returns list of attributes, applied to specified entity type. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source GetAttributes<TA>(Type, Func<TA, String>) Returns attributes of specified type, applied to specified entity type and active for current configuration. Declaration public TA[] GetAttributes<TA>(Type type, Func<TA, string> configGetter) where TA : Attribute Parameters Type Name Description Type type Entity type. Func <TA, String > configGetter Function to extract configuration name from attribute instance. Returns Type Description TA[] Returns list of attributes. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source HasAttribute(Attribute) Adds mapping attribute to current entity. Declaration public EntityMappingBuilder<T> HasAttribute(Attribute attribute) Parameters Type Name Description Attribute attribute Mapping attribute to add. Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source HasAttribute(Expression<Func<T, Object>>, Attribute) Adds mapping attribute to a member, specified using lambda expression. Declaration public EntityMappingBuilder<T> HasAttribute(Expression<Func<T, object>> func, Attribute attribute) Parameters Type Name Description Expression < Func <T, Object >> func Target member, specified using lambda expression. Attribute attribute Mapping attribute to add to specified member. Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source HasAttribute(LambdaExpression, Attribute) Adds mapping attribute to a member, specified using lambda expression. Declaration public EntityMappingBuilder<T> HasAttribute(LambdaExpression func, Attribute attribute) Parameters Type Name Description LambdaExpression func Target member, specified using lambda expression. Attribute attribute Mapping attribute to add to specified member. Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source HasAttribute(MemberInfo, Attribute) Adds mapping attribute to specified member. Declaration public EntityMappingBuilder<T> HasAttribute(MemberInfo memberInfo, Attribute attribute) Parameters Type Name Description MemberInfo memberInfo Target member. Attribute attribute Mapping attribute to add to specified member. Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source HasColumn(Expression<Func<T, Object>>, Int32) Adds column mapping to current entity. Declaration public EntityMappingBuilder<T> HasColumn(Expression<Func<T, object>> func, int order = -1) Parameters Type Name Description Expression < Func <T, Object >> func Column member getter expression. Int32 order Unused. Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source HasDatabaseName(String) Sets database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. Declaration public EntityMappingBuilder<T> HasDatabaseName(string databaseName) Parameters Type Name Description String databaseName Database name. Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source HasIdentity(Expression<Func<T, Object>>) Adds identity column mappping to current entity. Declaration public EntityMappingBuilder<T> HasIdentity(Expression<Func<T, object>> func) Parameters Type Name Description Expression < Func <T, Object >> func Identity field getter expression. Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source HasPrimaryKey(Expression<Func<T, Object>>, Int32) Adds primary key mapping to current entity. Declaration public EntityMappingBuilder<T> HasPrimaryKey(Expression<Func<T, object>> func, int order = -1) Parameters Type Name Description Expression < Func <T, Object >> func Primary key getter expression. Int32 order Primary key field order. When multiple fields specified by getter expression, fields will be ordered from first menthioned field to last one starting from provided order with step 1 . Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source HasSchemaName(String) Sets database schema/owner name for current entity, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Declaration public EntityMappingBuilder<T> HasSchemaName(string schemaName) Parameters Type Name Description String schemaName Schema/owner name. Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source HasTableName(String) Sets database table name for current entity. Declaration public EntityMappingBuilder<T> HasTableName(string tableName) Parameters Type Name Description String tableName Table name. Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source Ignore(Expression<Func<T, Object>>, Int32) Instruct LINQ to DB to not incude specified member into mapping. Declaration public EntityMappingBuilder<T> Ignore(Expression<Func<T, object>> func, int order = -1) Parameters Type Name Description Expression < Func <T, Object >> func Member getter expression. Int32 order Unused. Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source Inheritance<TS>(Expression<Func<T, TS>>, TS, Type, Boolean) Adds inheritance mapping for specified discriminator value. Declaration public EntityMappingBuilder<T> Inheritance<TS>(Expression<Func<T, TS>> key, TS value, Type type, bool isDefault = false) Parameters Type Name Description Expression < Func <T, TS>> key Discriminator member getter expression. TS value Discriminator value. Type type Mapping type, used with specified discriminator value. Boolean isDefault If true , current mapping type used by default. Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. Type Parameters Name Description TS Discriminator value type. | Improve this Doc View Source IsColumnNotRequired() Sets if it is not required to use IsColumn() - all public fields and properties are treated as columns This is the default behaviour Declaration public EntityMappingBuilder<T> IsColumnNotRequired() Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source IsColumnRequired() Sets if it is required to use IsColumn() to treat property or field as column Declaration public EntityMappingBuilder<T> IsColumnRequired() Returns Type Description EntityMappingBuilder <T> Returns current fluent entity mapping builder. | Improve this Doc View Source Property(Expression<Func<T, Object>>) Adds column mapping to current entity. Declaration public PropertyMappingBuilder<T> Property(Expression<Func<T, object>> func) Parameters Type Name Description Expression < Func <T, Object >> func Column mapping property or field getter expression. Returns Type Description PropertyMappingBuilder <T> Returns fluent property mapping builder. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.EntityDescriptor.html": {
    "href": "api/LinqToDB.Mapping.EntityDescriptor.html",
    "title": "Class EntityDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Class EntityDescriptor Stores mapping entity descriptor. Inheritance Object EntityDescriptor Implements IEntityChangeDescriptor Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class EntityDescriptor : IEntityChangeDescriptor Constructors | Improve this Doc View Source EntityDescriptor(MappingSchema, Type) Creates descriptor instance. Declaration public EntityDescriptor(MappingSchema mappingSchema, Type type) Parameters Type Name Description MappingSchema mappingSchema Mapping schema, associated with descriptor. Type type Mapping class type. Properties | Improve this Doc View Source Aliases Gets mapping dictionary to map column aliases to target columns or aliases. Declaration public Dictionary<string, string> Aliases { get; } Property Value Type Description Dictionary < String , String > | Improve this Doc View Source Associations Gets list of association descriptors for current entity. Declaration public List<AssociationDescriptor> Associations { get; } Property Value Type Description List < AssociationDescriptor > | Improve this Doc View Source CalculatedMembers Gets list of calculated members. Members with attribute MethodExpression and IsColumn flag Declaration public List<MemberAccessor> CalculatedMembers { get; } Property Value Type Description List < MemberAccessor > | Improve this Doc View Source Columns Gets list of column descriptors for current entity. Declaration public List<ColumnDescriptor> Columns { get; } Property Value Type Description List < ColumnDescriptor > | Improve this Doc View Source DatabaseName Gets optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. Declaration public string DatabaseName { get; } Property Value Type Description String | Improve this Doc View Source DynamicColumnsStore Gets the dynamic columns store descriptor. Declaration public ColumnDescriptor DynamicColumnsStore { get; } Property Value Type Description ColumnDescriptor | Improve this Doc View Source HasCalculatedMembers Declaration public bool HasCalculatedMembers { get; } Property Value Type Description Boolean | Improve this Doc View Source InheritanceMapping Gets list of inheritace mapping descriptors for current entity. Declaration public List<InheritanceMapping> InheritanceMapping { get; } Property Value Type Description List < InheritanceMapping > | Improve this Doc View Source IsColumnAttributeRequired Gets or sets column mapping rules for current mapping class or interface. If true , properties and fields should be marked with one of those attributes to be used for mapping: ColumnAttribute ; PrimaryKeyAttribute ; IdentityAttribute ; ColumnAliasAttribute . Otherwise all supported members of scalar type will be used: public instance fields and properties; explicit interface implmentation properties. Also see IsStructIsScalarType and ScalarTypeAttribute . Declaration public bool IsColumnAttributeRequired { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[String] Gets column descriptor by member name. Declaration public ColumnDescriptor this[string memberName] { get; } Parameters Type Name Description String memberName Member name. Property Value Type Description ColumnDescriptor Returns column descriptor or null , if descriptor not found. | Improve this Doc View Source ObjectType Gets mapping class type. Declaration public Type ObjectType { get; } Property Value Type Description Type | Improve this Doc View Source SchemaName Gets optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Declaration public string SchemaName { get; } Property Value Type Description String | Improve this Doc View Source TableName Gets name of table or view in database. Declaration public string TableName { get; } Property Value Type Description String | Improve this Doc View Source TypeAccessor Gets or sets mapping type accessor. Declaration public TypeAccessor TypeAccessor { get; set; } Property Value Type Description TypeAccessor Explicit Interface Implementations | Improve this Doc View Source IEntityChangeDescriptor.Columns Declaration IEnumerable<IColumnChangeDescriptor> IEntityChangeDescriptor.Columns { get; } Returns Type Description IEnumerable < IColumnChangeDescriptor > | Improve this Doc View Source IEntityChangeDescriptor.DatabaseName Declaration string IEntityChangeDescriptor.DatabaseName { get; set; } Returns Type Description String | Improve this Doc View Source IEntityChangeDescriptor.SchemaName Declaration string IEntityChangeDescriptor.SchemaName { get; set; } Returns Type Description String | Improve this Doc View Source IEntityChangeDescriptor.TableName Declaration string IEntityChangeDescriptor.TableName { get; set; } Returns Type Description String Implements IEntityChangeDescriptor Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.DynamicColumnsStoreAttribute.html": {
    "href": "api/LinqToDB.Mapping.DynamicColumnsStoreAttribute.html",
    "title": "Class DynamicColumnsStoreAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class DynamicColumnsStoreAttribute Marks target member as dynamic columns store. Inheritance Object Attribute DynamicColumnsStoreAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public class DynamicColumnsStoreAttribute : Attribute, _Attribute Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) See Also Attribute"
  },
  "api/LinqToDB.Mapping.DynamicColumnInfo.html": {
    "href": "api/LinqToDB.Mapping.DynamicColumnInfo.html",
    "title": "Class DynamicColumnInfo | Linq To DB (aka linq2db)",
    "keywords": "Class DynamicColumnInfo Represents a dynamic column, which doesn't have a backing field in it's declaring type. Inheritance Object MemberInfo PropertyInfo DynamicColumnInfo Implements ICustomAttributeProvider _MemberInfo _PropertyInfo IEquatable < DynamicColumnInfo > Inherited Members PropertyInfo.GetConstantValue() PropertyInfo.GetRawConstantValue() PropertyInfo.GetValue(Object) PropertyInfo.GetValue(Object, Object[]) PropertyInfo.SetValue(Object, Object) PropertyInfo.SetValue(Object, Object, Object[]) PropertyInfo.GetRequiredCustomModifiers() PropertyInfo.GetOptionalCustomModifiers() PropertyInfo.GetAccessors() PropertyInfo.GetGetMethod() PropertyInfo.GetSetMethod() PropertyInfo._PropertyInfo.GetType() PropertyInfo._PropertyInfo.GetTypeInfoCount(UInt32) PropertyInfo._PropertyInfo.GetTypeInfo(UInt32, UInt32, IntPtr) PropertyInfo._PropertyInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) PropertyInfo._PropertyInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) PropertyInfo.MemberType PropertyInfo.GetMethod PropertyInfo.SetMethod PropertyInfo.IsSpecialName MemberInfo.GetCustomAttributesData() MemberInfo._MemberInfo.GetType() MemberInfo._MemberInfo.GetTypeInfoCount(UInt32) MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr) MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) MemberInfo.CustomAttributes MemberInfo.MetadataToken MemberInfo.Module Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class DynamicColumnInfo : PropertyInfo, ICustomAttributeProvider, _MemberInfo, _PropertyInfo, IEquatable<DynamicColumnInfo> Constructors | Improve this Doc View Source DynamicColumnInfo(Type, Type, String) Initializes a new instance of the DynamicColumnInfo class. Declaration public DynamicColumnInfo(Type declaringType, Type columnType, string memberName) Parameters Type Name Description Type declaringType Type of the declaring. Type columnType Type of the column. String memberName Name of the member. Properties | Improve this Doc View Source Attributes Declaration public override PropertyAttributes Attributes { get; } Property Value Type Description PropertyAttributes Overrides PropertyInfo.Attributes | Improve this Doc View Source CanRead Declaration public override bool CanRead { get; } Property Value Type Description Boolean Overrides PropertyInfo.CanRead | Improve this Doc View Source CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Overrides PropertyInfo.CanWrite | Improve this Doc View Source DeclaringType Declaration public override Type DeclaringType { get; } Property Value Type Description Type Overrides MemberInfo.DeclaringType | Improve this Doc View Source Name Declaration public override string Name { get; } Property Value Type Description String Overrides MemberInfo.Name | Improve this Doc View Source PropertyType Declaration public override Type PropertyType { get; } Property Value Type Description Type Overrides PropertyInfo.PropertyType | Improve this Doc View Source ReflectedType Declaration public override Type ReflectedType { get; } Property Value Type Description Type Overrides MemberInfo.ReflectedType Methods | Improve this Doc View Source Equals(DynamicColumnInfo) Declaration public bool Equals(DynamicColumnInfo other) Parameters Type Name Description DynamicColumnInfo other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides PropertyInfo.Equals(Object) | Improve this Doc View Source GetAccessors(Boolean) Declaration public override MethodInfo[] GetAccessors(bool nonPublic) Parameters Type Name Description Boolean nonPublic Returns Type Description MethodInfo [] Overrides PropertyInfo.GetAccessors(Boolean) | Improve this Doc View Source GetCustomAttributes(Boolean) Declaration public override object[] GetCustomAttributes(bool inherit) Parameters Type Name Description Boolean inherit Returns Type Description Object [] Overrides MemberInfo.GetCustomAttributes(Boolean) | Improve this Doc View Source GetCustomAttributes(Type, Boolean) Declaration public override object[] GetCustomAttributes(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType Boolean inherit Returns Type Description Object [] Overrides MemberInfo.GetCustomAttributes(Type, Boolean) | Improve this Doc View Source GetGetMethod(Boolean) Declaration public override MethodInfo GetGetMethod(bool nonPublic) Parameters Type Name Description Boolean nonPublic Returns Type Description MethodInfo Overrides PropertyInfo.GetGetMethod(Boolean) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides PropertyInfo.GetHashCode() | Improve this Doc View Source GetIndexParameters() Declaration public override ParameterInfo[] GetIndexParameters() Returns Type Description ParameterInfo [] Overrides PropertyInfo.GetIndexParameters() | Improve this Doc View Source GetSetMethod(Boolean) Declaration public override MethodInfo GetSetMethod(bool nonPublic) Parameters Type Name Description Boolean nonPublic Returns Type Description MethodInfo Overrides PropertyInfo.GetSetMethod(Boolean) | Improve this Doc View Source GetValue(Object, BindingFlags, Binder, Object[], CultureInfo) Declaration public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) Parameters Type Name Description Object obj BindingFlags invokeAttr Binder binder Object [] index CultureInfo culture Returns Type Description Object Overrides PropertyInfo.GetValue(Object, BindingFlags, Binder, Object[], CultureInfo) | Improve this Doc View Source IsDefined(Type, Boolean) Declaration public override bool IsDefined(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType Boolean inherit Returns Type Description Boolean Overrides MemberInfo.IsDefined(Type, Boolean) | Improve this Doc View Source SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo) Declaration public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) Parameters Type Name Description Object obj Object value BindingFlags invokeAttr Binder binder Object [] index CultureInfo culture Overrides PropertyInfo.SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo) Operators | Improve this Doc View Source Equality(DynamicColumnInfo, DynamicColumnInfo) Implements the operator ==. Declaration public static bool operator ==(DynamicColumnInfo a, DynamicColumnInfo b) Parameters Type Name Description DynamicColumnInfo a a. DynamicColumnInfo b The b. Returns Type Description Boolean The result of the operator. | Improve this Doc View Source Inequality(DynamicColumnInfo, DynamicColumnInfo) Implements the operator !=. Declaration public static bool operator !=(DynamicColumnInfo a, DynamicColumnInfo b) Parameters Type Name Description DynamicColumnInfo a a. DynamicColumnInfo b The b. Returns Type Description Boolean The result of the operator. Implements ICustomAttributeProvider _MemberInfo _PropertyInfo IEquatable<T> Extension Methods ReflectionExtensions.GetGetMethodEx(PropertyInfo, Boolean) ReflectionExtensions.GetGetMethodEx(PropertyInfo) ReflectionExtensions.GetSetMethodEx(PropertyInfo, Boolean) ReflectionExtensions.GetSetMethodEx(PropertyInfo) ReflectionExtensions.IsPropertyEx(MemberInfo) ReflectionExtensions.IsFieldEx(MemberInfo) ReflectionExtensions.IsMethodEx(MemberInfo) ReflectionExtensions.IsSqlPropertyMethodEx(MemberInfo) ReflectionExtensions.IsDynamicColumnPropertyEx(MemberInfo) ReflectionExtensions.GetCustomAttributesEx(MemberInfo, Type, Boolean) ReflectionExtensions.ReflectedTypeEx(MemberInfo) ReflectionExtensions.GetCustomAttributesEx(MemberInfo, Boolean) ReflectionExtensions.GetMemberType(MemberInfo) ReflectionExtensions.IsNullableValueMember(MemberInfo) ReflectionExtensions.IsNullableHasValueMember(MemberInfo) ReflectionExtensions.EqualsTo(MemberInfo, MemberInfo, Type) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) See Also MemberInfo"
  },
  "api/LinqToDB.Mapping.DataTypeAttribute.html": {
    "href": "api/LinqToDB.Mapping.DataTypeAttribute.html",
    "title": "Class DataTypeAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class DataTypeAttribute This attribute allows to override default types, defined in mapping schema, for current column. Also see DataType and DbType . Applying this attribute to class or interface will have no effect. Inheritance Object Attribute DataTypeAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] public class DataTypeAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source DataTypeAttribute(DataType) Creates attribute instance. Declaration public DataTypeAttribute(DataType dataType) Parameters Type Name Description DataType dataType linq2db column type name. | Improve this Doc View Source DataTypeAttribute(DataType, String) Creates attribute instance. Declaration public DataTypeAttribute(DataType dataType, string dbType) Parameters Type Name Description DataType dataType linq2db column type name. String dbType SQL column type name. | Improve this Doc View Source DataTypeAttribute(String) Creates attribute instance. Declaration public DataTypeAttribute(string dbType) Parameters Type Name Description String dbType SQL column type name. Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source DataType Gets or sets linq2db type of the database column. Declaration public DataType? DataType { get; set; } Property Value Type Description Nullable < DataType > | Improve this Doc View Source DbType Gets or sets the name of the database column type. Declaration public string DbType { get; set; } Property Value Type Description String Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.ColumnDescriptor.html": {
    "href": "api/LinqToDB.Mapping.ColumnDescriptor.html",
    "title": "Class ColumnDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnDescriptor Stores mapping entity column descriptor. Inheritance Object ColumnDescriptor Implements IColumnChangeDescriptor Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class ColumnDescriptor : IColumnChangeDescriptor Constructors | Improve this Doc View Source ColumnDescriptor(MappingSchema, ColumnAttribute, MemberAccessor) Creates descriptor instance. Declaration public ColumnDescriptor(MappingSchema mappingSchema, ColumnAttribute columnAttribute, MemberAccessor memberAccessor) Parameters Type Name Description MappingSchema mappingSchema Mapping schema, associated with descriptor. ColumnAttribute columnAttribute Column attribute, from which descriptor data should be extracted. MemberAccessor memberAccessor Column mapping member accessor. Properties | Improve this Doc View Source CanBeNull Gets whether a column can contain null values. Declaration public bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source ColumnName Gets the name of a column in database. If not specified, MemberName value will be used. Declaration public string ColumnName { get; } Property Value Type Description String | Improve this Doc View Source CreateFormat Custom template for column definition in create table SQL expression, generated using CreateTable<T>(IDataContext, String, String, String, String, String, DefaultNullable) methods. Template accepts following string parameters: {0} - column name; {1} - column type; {2} - NULL specifier; {3} - identity specification. Declaration public string CreateFormat { get; } Property Value Type Description String | Improve this Doc View Source DataType Gets LINQ to DB type for column. Declaration public DataType DataType { get; } Property Value Type Description DataType | Improve this Doc View Source DbType Gets the name of the database column type. Declaration public string DbType { get; } Property Value Type Description String | Improve this Doc View Source IsDiscriminator Gets whether a column contains a discriminator value for a LINQ to DB inheritance hierarchy. InheritanceMappingAttribute for more details. Default value: false . Declaration public bool IsDiscriminator { get; } Property Value Type Description Boolean | Improve this Doc View Source IsIdentity Gets whether a column contains values that the database auto-generates. Declaration public bool IsIdentity { get; } Property Value Type Description Boolean | Improve this Doc View Source IsPrimaryKey Gets whether this member represents a column that is part or all of the primary key of the table. Also see PrimaryKeyAttribute . Declaration public bool IsPrimaryKey { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets the length of the database column. Declaration public int? Length { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source MemberAccessor Gets column mapping member accessor. Declaration public MemberAccessor MemberAccessor { get; } Property Value Type Description MemberAccessor | Improve this Doc View Source MemberInfo Gets column mapping member (field or property). Declaration public MemberInfo MemberInfo { get; } Property Value Type Description MemberInfo | Improve this Doc View Source MemberName Gets the name of mapped member. When applied to class or interface, should contain name of property of field. If column is mapped to a property or field of composite object, MemberName should contain a path to that member using dot as separator. public class Address { public string City { get; set; } public string Street { get; set; } public int Building { get; set; } } [Column(\"city\", \"Residence.Street\")] [Column(\"user_name\", \"Name\")] public class User { public string Name; [Column(\"street\", \".Street\")] [Column(\"building_number\", MemberName = \".Building\")] public Address Residence { get; set; } } Declaration public string MemberName { get; } Property Value Type Description String | Improve this Doc View Source MemberType Gets type of column mapping member (field or property). Declaration public Type MemberType { get; } Property Value Type Description Type | Improve this Doc View Source Precision Gets the precision of the database column. Declaration public int? Precision { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source PrimaryKeyOrder Gets order of current column in composite primary key. Order is used for query generation to define in which order primary key columns must be mentioned in query from columns with smallest order value to greatest. Declaration public int PrimaryKeyOrder { get; } Property Value Type Description Int32 | Improve this Doc View Source Scale Gets the Scale of the database column. Declaration public int? Scale { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source SequenceName Gets sequence name for specified column. Declaration public SequenceNameAttribute SequenceName { get; } Property Value Type Description SequenceNameAttribute | Improve this Doc View Source SkipOnInsert Gets whether a column is insertable. This flag will affect only insert operations with implicit columns specification like Insert<T>(IDataContext, T, String, String, String) method and will be ignored when user explicitly specifies value for this column. Declaration public bool SkipOnInsert { get; } Property Value Type Description Boolean | Improve this Doc View Source SkipOnUpdate Gets whether a column is updatable. This flag will affect only update operations with implicit columns specification like Update<T>(IDataContext, T, String, String, String) method and will be ignored when user explicitly specifies value for this column. Declaration public bool SkipOnUpdate { get; } Property Value Type Description Boolean | Improve this Doc View Source Storage Gets storage property or field to hold the value from a column. Could be usefull e.g. in combination of private storage field and getter-only mapping property. Declaration public string Storage { get; } Property Value Type Description String | Improve this Doc View Source StorageInfo Gets value storage member (field or property). Declaration public MemberInfo StorageInfo { get; } Property Value Type Description MemberInfo | Improve this Doc View Source StorageType Gets type of column value storage member (field or property). Declaration public Type StorageType { get; } Property Value Type Description Type Methods | Improve this Doc View Source GetValue(MappingSchema, Object) Extracts column value, converted to database type, from entity object. Declaration public virtual object GetValue(MappingSchema mappingSchema, object obj) Parameters Type Name Description MappingSchema mappingSchema Mapping schema with conversion information. Object obj Entity object to extract column value from. Returns Type Description Object Returns column value, converted to database type. Explicit Interface Implementations | Improve this Doc View Source IColumnChangeDescriptor.ColumnName Declaration string IColumnChangeDescriptor.ColumnName { get; set; } Returns Type Description String | Improve this Doc View Source IColumnChangeDescriptor.MemberName Declaration string IColumnChangeDescriptor.MemberName { get; } Returns Type Description String Implements IColumnChangeDescriptor Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.ColumnAttribute.html": {
    "href": "api/LinqToDB.Mapping.ColumnAttribute.html",
    "title": "Class ColumnAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnAttribute Configures mapping of mapping class member to database column. Could be applied directly to a property or field or to mapping class/interface. In latter case you should specify member name using MemberName property. Inheritance Object Attribute ColumnAttribute NotColumnAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] public class ColumnAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ColumnAttribute() Creates attribute instance. Declaration public ColumnAttribute() | Improve this Doc View Source ColumnAttribute(String) Creates attribute instance. Declaration public ColumnAttribute(string columnName) Parameters Type Name Description String columnName Database column name. | Improve this Doc View Source ColumnAttribute(String, String) Creates attribute instance. Declaration public ColumnAttribute(string columnName, string memberName) Parameters Type Name Description String columnName Database column name. String memberName Name of mapped member. See MemberName for more details. Properties | Improve this Doc View Source CanBeNull Gets or sets whether a column can contain NULL values. Declaration public bool CanBeNull { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source CreateFormat Custom template for column definition in create table SQL expression, generated using CreateTable<T>(IDataContext, String, String, String, String, String, DefaultNullable) methods. Template accepts following string parameters: {0} - column name; {1} - column type; {2} - NULL specifier; {3} - identity specification. Declaration public string CreateFormat { get; set; } Property Value Type Description String | Improve this Doc View Source DataType Gets or sets linq2db type for column. Default value: default type, defined for member type in mapping schema. Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source DbType Gets or sets the name of the database column type. Default value: default type, defined for member type in mapping schema. Declaration public string DbType { get; set; } Property Value Type Description String | Improve this Doc View Source IsColumn Gets or sets flag that tells that current member should be included into mapping. Use NonColumnAttribute instead as a shorthand. Default value: true . Declaration public bool IsColumn { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsDiscriminator Gets or sets whether a column contains a discriminator value for a LINQ to DB inheritance hierarchy. InheritanceMappingAttribute for more details. Default value: false . Declaration public bool IsDiscriminator { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsIdentity Gets or sets whether a column contains values that the database auto-generates. Also see IdentityAttribute . Declaration public bool IsIdentity { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsPrimaryKey Gets or sets whether this class member represents a column that is part or all of the primary key of the table. Also see PrimaryKeyAttribute . Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets or sets the length of the database column. Default value: value, defined for member type in mapping schema. Declaration public int Length { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MemberName Gets or sets the name of mapped member. When applied to class or interface, should contain name of property of field. If column is mapped to a property or field of composite object, MemberName should contain a path to that member using dot as separator. public class Address { public string City { get; set; } public string Street { get; set; } public int Building { get; set; } } [Column(\"city\", \"Residence.Street\")] [Column(\"user_name\", \"Name\")] public class User { public string Name; [Column(\"street\", \".Street\")] [Column(\"building_number\", MemberName = \".Building\")] public Address Residence { get; set; } } Declaration public string MemberName { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of a column in database. If not specified, member name will be used. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Precision Gets or sets the precision of the database column. Default value: value, defined for member type in mapping schema. Declaration public int Precision { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PrimaryKeyOrder Gets or sets the Primary Key order. See Order for more details. Declaration public int PrimaryKeyOrder { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Scale Gets or sets the Scale of the database column. Default value: value, defined for member type in mapping schema. Declaration public int Scale { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SkipOnInsert Gets or sets whether a column is insertable. This flag will affect only insert operations with implicit columns specification like Insert<T>(IDataContext, T, String, String, String) method and will be ignored when user explicitly specifies value for this column. Declaration public bool SkipOnInsert { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SkipOnUpdate Gets or sets whether a column is updatable. This flag will affect only update operations with implicit columns specification like Update<T>(IDataContext, T, String, String, String) method and will be ignored when user explicitly specifies value for this column. Declaration public bool SkipOnUpdate { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Storage Gets or sets a storage property or field to hold the value from a column. Could be usefull e.g. in combination of private storage field and getter-only mapping property. Declaration public string Storage { get; set; } Property Value Type Description String Methods | Improve this Doc View Source HasCanBeNull() Returns true , if CanBeNull was configured for current attribute. Declaration public bool HasCanBeNull() Returns Type Description Boolean true if CanBeNull property was set in attribute. | Improve this Doc View Source HasIsIdentity() Returns true , if IsIdentity was configured for current attribute. Declaration public bool HasIsIdentity() Returns Type Description Boolean true if IsIdentity property was set in attribute. | Improve this Doc View Source HasIsPrimaryKey() Returns true , if IsPrimaryKey was configured for current attribute. Declaration public bool HasIsPrimaryKey() Returns Type Description Boolean true if IsPrimaryKey property was set in attribute. | Improve this Doc View Source HasLength() Returns true , if Length was configured for current attribute. Declaration public bool HasLength() Returns Type Description Boolean true if Length property was set in attribute. | Improve this Doc View Source HasPrecision() Returns true , if Precision was configured for current attribute. Declaration public bool HasPrecision() Returns Type Description Boolean true if Precision property was set in attribute. | Improve this Doc View Source HasScale() Returns true , if Scale was configured for current attribute. Declaration public bool HasScale() Returns Type Description Boolean true if Scale property was set in attribute. | Improve this Doc View Source HasSkipOnInsert() Returns true , if SkipOnInsert was configured for current attribute. Declaration public bool HasSkipOnInsert() Returns Type Description Boolean true if SkipOnInsert property was set in attribute. | Improve this Doc View Source HasSkipOnUpdate() Returns true , if SkipOnUpdate was configured for current attribute. Declaration public bool HasSkipOnUpdate() Returns Type Description Boolean true if SkipOnUpdate property was set in attribute. Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.ColumnAliasAttribute.html": {
    "href": "api/LinqToDB.Mapping.ColumnAliasAttribute.html",
    "title": "Class ColumnAliasAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnAliasAttribute Specifies that current field or property is just an alias to another property or field. Currently this attribute has several issues: you can apply it to class or interface - such attribute will be ignored by linq2db; it is possible to define attribute without setting MemberName value; you can define alias to another alias property or field and potentially create loop. Inheritance Object Attribute ColumnAliasAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] public class ColumnAliasAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ColumnAliasAttribute() Use ColumnAliasAttribute(String) constructor or specify MemberName value. Declaration public ColumnAliasAttribute() | Improve this Doc View Source ColumnAliasAttribute(String) Creates attribute instance. Declaration public ColumnAliasAttribute(string memberName) Parameters Type Name Description String memberName Name of target property or field. Properties | Improve this Doc View Source Configuration Mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source MemberName Gets or sets the name of target property or field. Declaration public string MemberName { get; set; } Property Value Type Description String Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.AssociationDescriptor.html": {
    "href": "api/LinqToDB.Mapping.AssociationDescriptor.html",
    "title": "Class AssociationDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Class AssociationDescriptor Stores association descriptor. Inheritance Object AssociationDescriptor Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class AssociationDescriptor Constructors | Improve this Doc View Source AssociationDescriptor(Type, MemberInfo, String[], String[], String, Expression, String, Boolean) Creates descriptor instance. Declaration public AssociationDescriptor(Type type, MemberInfo memberInfo, string[] thisKey, string[] otherKey, string expressionPredicate, Expression predicate, string storage, bool canBeNull) Parameters Type Name Description Type type From (this) side entity mapping type. MemberInfo memberInfo Association member (field, property or method). String [] thisKey List of names of from (this) key members. String [] otherKey List of names of to (other) key members. String expressionPredicate Optional predicate expresssion source property or method. Expression predicate Optional predicate expresssion. String storage Optional association value storage field or property name. Boolean canBeNull If true , association will generate outer join, otherwise - inner join. Properties | Improve this Doc View Source CanBeNull Gets or sets join type, generated for current association. If true , association will generate outer join, otherwise - inner join. Declaration public bool CanBeNull { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ExpressionPredicate Gets or sets optional predicate expresssion source property or method. Declaration public string ExpressionPredicate { get; set; } Property Value Type Description String | Improve this Doc View Source MemberInfo Gets or sets association member (field, property or method). Declaration public MemberInfo MemberInfo { get; set; } Property Value Type Description MemberInfo | Improve this Doc View Source OtherKey Gets or sets list of names of to (other) key members. Could be empty, if association has predicate expression. Declaration public string[] OtherKey { get; set; } Property Value Type Description String [] | Improve this Doc View Source Predicate Gets or sets optional predicate expresssion. Declaration public Expression Predicate { get; set; } Property Value Type Description Expression | Improve this Doc View Source Storage Gets or sets optional association value storage field or property name. Used with LoadWith. Declaration public string Storage { get; set; } Property Value Type Description String | Improve this Doc View Source ThisKey Gets or sets list of names of from (this) key members. Could be empty, if association has predicate expression. Declaration public string[] ThisKey { get; set; } Property Value Type Description String [] Methods | Improve this Doc View Source GetPredicate(Type, Type) Loads predicate expression from ExpressionPredicate member. Declaration public LambdaExpression GetPredicate(Type parentType, Type objectType) Parameters Type Name Description Type parentType Type of object that declares association Type objectType Type of object associated with expression predicate Returns Type Description LambdaExpression null of association has no custom predicate expression or predicate expression, specified by ExpressionPredicate member. | Improve this Doc View Source ParseKeys(String) Parse comma-separated list of association key column members into string array. Declaration public static string[] ParseKeys(string keys) Parameters Type Name Description String keys Comma-separated (spaces allowed) list of association key column members. Returns Type Description String [] Returns array with names of association key column members. Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.AssociationAttribute.html": {
    "href": "api/LinqToDB.Mapping.AssociationAttribute.html",
    "title": "Class AssociationAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class AssociationAttribute Defines relation between tables or views. Could be applied to: instance properties and fields; instance and static methods. For associations, defined using static methods, this mapping side defined by type of first parameter. Also, optionally, you can pass data context object as extra method parameter. Based on association type - to one or to multiple records - result type should be target record's mapping type or IEquatable<T> collection. By default associations are used only for joins generation in LINQ queries and will have null value for loaded records. To load data into association, you should explicitly specify it in your query using LoadWith<T>(ITable<T>, Expression<Func<T, Object>>) method. Inheritance Object Attribute AssociationAttribute Implements _Attribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)] public class AssociationAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source AssociationAttribute() Creates attribute instance. Declaration public AssociationAttribute() Properties | Improve this Doc View Source BackReferenceName This property is not used by linq2db. Declaration public string BackReferenceName { get; set; } Property Value Type Description String | Improve this Doc View Source CanBeNull Defines type of join: inner join for CanBeNull = false ; left join for CanBeNull = true . Default value: true . Declaration public bool CanBeNull { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string Configuration { get; set; } Property Value Type Description String | Improve this Doc View Source ExpressionPredicate Specifies static property or method without parameters, that returns join predicate expression. This predicate will be used together with ThisKey / OtherKey join keys, if they are specified. Predicate expression lambda function takes two parameters: this record and other record and returns boolean result. Declaration public string ExpressionPredicate { get; set; } Property Value Type Description String | Improve this Doc View Source IsBackReference This property is not used by linq2db. Declaration public bool IsBackReference { get; set; } Property Value Type Description Boolean | Improve this Doc View Source KeyName This property is not used by linq2db. Declaration public string KeyName { get; set; } Property Value Type Description String | Improve this Doc View Source OtherKey Gets or sets comma-separated list of association key members on another side of association. Those keys will be used for join predicate generation and must be compatible with ThisKey keys. You must specify keys it you do not use custom predicate (see ExpressionPredicate ). Declaration public string OtherKey { get; set; } Property Value Type Description String | Improve this Doc View Source Predicate Specifies predicate expression. This predicate will be used together with ThisKey / OtherKey join keys, if they are specified. Predicate expression lambda function takes two parameters: this record and other record and returns boolean result. Declaration public Expression Predicate { get; set; } Property Value Type Description Expression | Improve this Doc View Source Relationship This property is not used by linq2db. Declaration public Relationship Relationship { get; set; } Property Value Type Description Relationship | Improve this Doc View Source Storage Specify name of property or field to store association value, loaded using LoadWith<T>(ITable<T>, Expression<Func<T, Object>>) method. When not specified, current association memeber will be used. Declaration public string Storage { get; set; } Property Value Type Description String | Improve this Doc View Source ThisKey Gets or sets comma-separated list of association key members on this side of association. Those keys will be used for join predicate generation and must be compatible with OtherKey keys. You must specify keys it you do not use custom predicate (see ExpressionPredicate ). Declaration public string ThisKey { get; set; } Property Value Type Description String Methods | Improve this Doc View Source GetOtherKeys() Returns OtherKey value as a list of key member names. Declaration public string[] GetOtherKeys() Returns Type Description String [] List of key members. | Improve this Doc View Source GetThisKeys() Returns ThisKey value as a list of key member names. Declaration public string[] GetThisKeys() Returns Type Description String [] List of key members. Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IExpressionPreprocessor.html": {
    "href": "api/LinqToDB.Linq.IExpressionPreprocessor.html",
    "title": "Interface IExpressionPreprocessor | Linq To DB (aka linq2db)",
    "keywords": "Interface IExpressionPreprocessor Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IExpressionPreprocessor Methods | Improve this Doc View Source ProcessExpression(Expression) Declaration Expression ProcessExpression(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IExpressionInfo.html": {
    "href": "api/LinqToDB.Linq.IExpressionInfo.html",
    "title": "Interface IExpressionInfo | Linq To DB (aka linq2db)",
    "keywords": "Interface IExpressionInfo Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IExpressionInfo Methods | Improve this Doc View Source GetExpression(MappingSchema) Declaration LambdaExpression GetExpression(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description LambdaExpression Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IDataReaderAsync.html": {
    "href": "api/LinqToDB.Linq.IDataReaderAsync.html",
    "title": "Interface IDataReaderAsync | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataReaderAsync Inherited Members IDisposable.Dispose() Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IDataReaderAsync : IDisposable Properties | Improve this Doc View Source DataReader Declaration IDataReader DataReader { get; } Property Value Type Description IDataReader Methods | Improve this Doc View Source ReadAsync(CancellationToken) Declaration Task<bool> ReadAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < Boolean > Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Expressions.html": {
    "href": "api/LinqToDB.Linq.Expressions.html",
    "title": "Class Expressions | Linq To DB (aka linq2db)",
    "keywords": "Class Expressions Inheritance Object Expressions Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public static class Expressions Methods | Improve this Doc View Source AccessInt<T>(T) Declaration [CLSCompliant(false)] [Sql.Function(\"Int\", new int[]{0})] public static T AccessInt<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AccessRound<T>(T, Nullable<Int32>) Declaration [CLSCompliant(false)] [Sql.Function(\"Round\", new int[]{0, 1})] public static T AccessRound<T>(T value, int? precision) Parameters Type Name Description T value Nullable < Int32 > precision Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AltStuff(String, Nullable<Int32>, Nullable<Int32>, String) Declaration [Sql.Function] public static string AltStuff(string str, int? startLocation, int? length, string value) Parameters Type Name Description String str Nullable < Int32 > startLocation Nullable < Int32 > length String value Returns Type Description String | Improve this Doc View Source ConvertMember(MappingSchema, Type, MemberInfo) Declaration public static LambdaExpression ConvertMember(MappingSchema mappingSchema, Type objectType, MemberInfo mi) Parameters Type Name Description MappingSchema mappingSchema Type objectType MemberInfo mi Returns Type Description LambdaExpression | Improve this Doc View Source ConvertToCaseCompareTo(String, String) Declaration [Sql.Function] public static int? ConvertToCaseCompareTo(string str, string value) Parameters Type Name Description String str String value Returns Type Description Nullable < Int32 > | Improve this Doc View Source DateAdd(Sql.DateParts, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? DateAdd(Sql.DateParts part, int? number, int? days) Parameters Type Name Description Sql.DateParts part Nullable < Int32 > number Nullable < Int32 > days Returns Type Description Nullable < DateTime > | Improve this Doc View Source DecimalPI() Declaration [Sql.Function(\"PI\", ServerSideOnly = true)] public static decimal DecimalPI() Returns Type Description Decimal | Improve this Doc View Source DoublePI() Declaration [Sql.Function(\"PI\", ServerSideOnly = true)] public static double DoublePI() Returns Type Description Double | Improve this Doc View Source Hex(Nullable<Guid>) Declaration [Sql.Function] public static string Hex(Guid? guid) Parameters Type Name Description Nullable < Guid > guid Returns Type Description String | Improve this Doc View Source L<TR>(Expression<Func<TR>>) Declaration public static LambdaExpression L<TR>(Expression<Func<TR>> func) Parameters Type Name Description Expression < Func <TR>> func Returns Type Description LambdaExpression Type Parameters Name Description TR | Improve this Doc View Source L<T1, TR>(Expression<Func<T1, TR>>) Declaration public static LambdaExpression L<T1, TR>(Expression<Func<T1, TR>> func) Parameters Type Name Description Expression < Func <T1, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 TR | Improve this Doc View Source L<T1, T2, TR>(Expression<Func<T1, T2, TR>>) Declaration public static LambdaExpression L<T1, T2, TR>(Expression<Func<T1, T2, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source L<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source L<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source L<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, T5, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source L<T1, T2, T3, T4, T5, T6, TR>(Expression<Func<T1, T2, T3, T4, T5, T6, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, T4, T5, T6, TR>(Expression<Func<T1, T2, T3, T4, T5, T6, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, T5, T6, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 T4 T5 T6 TR | Improve this Doc View Source M<T>(Expression<Func<T, Object>>) Declaration public static MemberInfo M<T>(Expression<Func<T, object>> func) Parameters Type Name Description Expression < Func <T, Object >> func Returns Type Description MemberInfo Type Parameters Name Description T | Improve this Doc View Source M<T>(Expression<Func<T>>) Declaration public static MemberInfo M<T>(Expression<Func<T>> func) Parameters Type Name Description Expression < Func <T>> func Returns Type Description MemberInfo Type Parameters Name Description T | Improve this Doc View Source MakeDateTime2(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function(\"Access\", \"DateSerial\")] public static DateTime? MakeDateTime2(int? year, int? month, int? day) Parameters Type Name Description Nullable < Int32 > year Nullable < Int32 > month Nullable < Int32 > day Returns Type Description Nullable < DateTime > | Improve this Doc View Source MapMember(Expression<Func<Object>>, LambdaExpression) Declaration public static void MapMember(Expression<Func<object>> memberInfo, LambdaExpression expression) Parameters Type Name Description Expression < Func < Object >> memberInfo LambdaExpression expression | Improve this Doc View Source MapMember(MemberInfo, IExpressionInfo) Declaration public static void MapMember(MemberInfo memberInfo, IExpressionInfo expressionInfo) Parameters Type Name Description MemberInfo memberInfo IExpressionInfo expressionInfo | Improve this Doc View Source MapMember(MemberInfo, LambdaExpression) Declaration public static void MapMember(MemberInfo memberInfo, LambdaExpression expression) Parameters Type Name Description MemberInfo memberInfo LambdaExpression expression | Improve this Doc View Source MapMember(String, Expression<Func<Object>>, LambdaExpression) Declaration public static void MapMember(string providerName, Expression<Func<object>> memberInfo, LambdaExpression expression) Parameters Type Name Description String providerName Expression < Func < Object >> memberInfo LambdaExpression expression | Improve this Doc View Source MapMember(String, MemberInfo, IExpressionInfo) Declaration public static void MapMember(string providerName, MemberInfo memberInfo, IExpressionInfo expressionInfo) Parameters Type Name Description String providerName MemberInfo memberInfo IExpressionInfo expressionInfo | Improve this Doc View Source MapMember(String, MemberInfo, LambdaExpression) Declaration public static void MapMember(string providerName, MemberInfo memberInfo, LambdaExpression expression) Parameters Type Name Description String providerName MemberInfo memberInfo LambdaExpression expression | Improve this Doc View Source MapMember(String, Type, MemberInfo, IExpressionInfo) Declaration public static void MapMember(string providerName, Type objectType, MemberInfo memberInfo, IExpressionInfo expressionInfo) Parameters Type Name Description String providerName Type objectType MemberInfo memberInfo IExpressionInfo expressionInfo | Improve this Doc View Source MapMember(String, Type, MemberInfo, LambdaExpression) Declaration public static void MapMember(string providerName, Type objectType, MemberInfo memberInfo, LambdaExpression expression) Parameters Type Name Description String providerName Type objectType MemberInfo memberInfo LambdaExpression expression | Improve this Doc View Source MapMember<T>(Expression<Func<T, Object>>, LambdaExpression) Declaration public static void MapMember<T>(Expression<Func<T, object>> memberInfo, LambdaExpression expression) Parameters Type Name Description Expression < Func <T, Object >> memberInfo LambdaExpression expression Type Parameters Name Description T | Improve this Doc View Source MapMember<TR>(Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description Expression < Func <TR>> memberInfo Expression < Func <TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<T>(String, Expression<Func<T, Object>>, LambdaExpression) Declaration public static void MapMember<T>(string providerName, Expression<Func<T, object>> memberInfo, LambdaExpression expression) Parameters Type Name Description String providerName Expression < Func <T, Object >> memberInfo LambdaExpression expression Type Parameters Name Description T | Improve this Doc View Source MapMember<TR>(String, Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(string providerName, Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description String providerName Expression < Func <TR>> memberInfo Expression < Func <TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<TR>(String, Type, Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(string providerName, Type objectType, Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description String providerName Type objectType Expression < Func <TR>> memberInfo Expression < Func <TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<TR>(Type, Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(Type objectType, Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description Type objectType Expression < Func <TR>> memberInfo Expression < Func <TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<T1, TR>(Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description Expression < Func <T1, TR>> memberInfo Expression < Func <T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, TR>(String, Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(string providerName, Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description String providerName Expression < Func <T1, TR>> memberInfo Expression < Func <T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, TR>(String, Type, Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(string providerName, Type objectType, Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description String providerName Type objectType Expression < Func <T1, TR>> memberInfo Expression < Func <T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, TR>(Type, Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(Type objectType, Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description Type objectType Expression < Func <T1, TR>> memberInfo Expression < Func <T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, T2, TR>(Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description Expression < Func <T1, T2, TR>> memberInfo Expression < Func <T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, TR>(String, Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(string providerName, Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description String providerName Expression < Func <T1, T2, TR>> memberInfo Expression < Func <T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, TR>(String, Type, Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(string providerName, Type objectType, Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description String providerName Type objectType Expression < Func <T1, T2, TR>> memberInfo Expression < Func <T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, TR>(Type, Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(Type objectType, Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description Type objectType Expression < Func <T1, T2, TR>> memberInfo Expression < Func <T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description Expression < Func <T1, T2, T3, TR>> memberInfo Expression < Func <T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(String, Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(string providerName, Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description String providerName Expression < Func <T1, T2, T3, TR>> memberInfo Expression < Func <T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(String, Type, Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(string providerName, Type objectType, Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description String providerName Type objectType Expression < Func <T1, T2, T3, TR>> memberInfo Expression < Func <T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(Type, Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(Type objectType, Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description Type objectType Expression < Func <T1, T2, T3, TR>> memberInfo Expression < Func <T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, TR>> memberInfo Expression < Func <T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(String, Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(string providerName, Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description String providerName Expression < Func <T1, T2, T3, T4, TR>> memberInfo Expression < Func <T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(String, Type, Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(string providerName, Type objectType, Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description String providerName Type objectType Expression < Func <T1, T2, T3, T4, TR>> memberInfo Expression < Func <T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(Type, Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(Type objectType, Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description Type objectType Expression < Func <T1, T2, T3, T4, TR>> memberInfo Expression < Func <T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, T5, TR>> memberInfo Expression < Func <T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(String, Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(string providerName, Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description String providerName Expression < Func <T1, T2, T3, T4, T5, TR>> memberInfo Expression < Func <T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(String, Type, Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(string providerName, Type objectType, Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description String providerName Type objectType Expression < Func <T1, T2, T3, T4, T5, TR>> memberInfo Expression < Func <T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(Type, Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(Type objectType, Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description Type objectType Expression < Func <T1, T2, T3, T4, T5, TR>> memberInfo Expression < Func <T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source Mdy(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? Mdy(int? month, int? day, int? year) Parameters Type Name Description Nullable < Int32 > month Nullable < Int32 > day Nullable < Int32 > year Returns Type Description Nullable < DateTime > | Improve this Doc View Source N(Func<LambdaExpression>) Declaration public static Expressions.LazyExpressionInfo N(Func<LambdaExpression> func) Parameters Type Name Description Func < LambdaExpression > func Returns Type Description Expressions.LazyExpressionInfo | Improve this Doc View Source Replicate(Nullable<Char>, Nullable<Int32>) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.Function(\"DB2\", \"Repeat\")] [Sql.Function(\"PostgreSQL\", \"Repeat\")] [Sql.Function(\"Access\", \"String\", new int[]{1, 0})] public static string Replicate(char? ch, int? count) Parameters Type Name Description Nullable < Char > ch Nullable < Int32 > count Returns Type Description String | Improve this Doc View Source Replicate(String, Nullable<Int32>) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.Function(\"DB2\", \"Repeat\")] [Sql.Function(\"PostgreSQL\", \"Repeat\")] [Sql.Function(\"Access\", \"String\", new int[]{1, 0})] public static string Replicate(string str, int? count) Parameters Type Name Description String str Nullable < Int32 > count Returns Type Description String | Improve this Doc View Source Round(Nullable<Decimal>, Int32, Int32) Declaration [Sql.Function] public static decimal? Round(decimal? value, int precision, int mode) Parameters Type Name Description Nullable < Decimal > value Int32 precision Int32 mode Returns Type Description Nullable < Decimal > | Improve this Doc View Source Round(Nullable<Double>, Int32, Int32) Declaration [Sql.Function] public static double? Round(double? value, int precision, int mode) Parameters Type Name Description Nullable < Double > value Int32 precision Int32 mode Returns Type Description Nullable < Double > | Improve this Doc View Source SetGenericInfoProvider(Type) Declaration public static void SetGenericInfoProvider(Type type) Parameters Type Name Description Type type | Improve this Doc View Source TrimLeft(String, Char[]) Declaration [CLSCompliant(false)] [Sql.Function(\"LTrim\", new int[]{0})] public static string TrimLeft(string str, params char[] trimChars) Parameters Type Name Description String str Char [] trimChars Returns Type Description String | Improve this Doc View Source TrimRight(String, Char[]) Declaration [CLSCompliant(false)] [Sql.Function(\"RTrim\", new int[]{0})] public static string TrimRight(string str, params char[] trimChars) Parameters Type Name Description String str Char [] trimChars Returns Type Description String | Improve this Doc View Source VarChar(Object, Nullable<Int32>) Declaration [Sql.Function] public static string VarChar(object obj, int? size) Parameters Type Name Description Object obj Nullable < Int32 > size Returns Type Description String"
  },
  "api/LinqToDB.Linq.Expressions.LazyExpressionInfo.html": {
    "href": "api/LinqToDB.Linq.Expressions.LazyExpressionInfo.html",
    "title": "Class Expressions.LazyExpressionInfo | Linq To DB (aka linq2db)",
    "keywords": "Class Expressions.LazyExpressionInfo Inheritance Object Expressions.LazyExpressionInfo Implements IExpressionInfo Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public class LazyExpressionInfo : IExpressionInfo Fields | Improve this Doc View Source Lambda Declaration public Func<LambdaExpression> Lambda Field Value Type Description Func < LambdaExpression > Methods | Improve this Doc View Source GetExpression(MappingSchema) Declaration public LambdaExpression GetExpression(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description LambdaExpression | Improve this Doc View Source SetExpression(LambdaExpression) Declaration public void SetExpression(LambdaExpression expression) Parameters Type Name Description LambdaExpression expression Implements IExpressionInfo Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.html": {
    "href": "api/LinqToDB.Linq.Builder.html",
    "title": "Namespace LinqToDB.Linq.Builder | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Linq.Builder Classes SequenceConvertInfo SequenceConvertPath SqlInfo Enums ConvertFlags RequestFor"
  },
  "api/LinqToDB.DataProvider.html": {
    "href": "api/LinqToDB.DataProvider.html",
    "title": "Namespace LinqToDB.DataProvider | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider Classes BasicBulkCopy BasicMerge Basic MERGE operation implementation for all providers. For provider-specific logic create child class. BasicMerge.ColumnInfo BasicMergeBuilder<TTarget, TSource> Basic merge builder's validation options set to validate merge operation on SQL:2008 level without specific database limitations or extensions. BulkCopyReader BulkCopyReader.Parameter DataProviderBase DataTools DynamicDataProviderBase MultipleRowsHelper<T> ReaderInfo Interfaces IDataProvider IDataProviderFactory"
  },
  "api/LinqToDB.DataProvider.Sybase.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.html",
    "title": "Namespace LinqToDB.DataProvider.Sybase | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Sybase Classes SybaseDataProvider SybaseMappingSchema SybaseMappingSchema.ManagedMappingSchema SybaseMappingSchema.NativeMappingSchema SybaseTools"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseTools.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseTools.html",
    "title": "Class SybaseTools | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseTools Inheritance Object SybaseTools Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public static class SybaseTools Fields | Improve this Doc View Source AssemblyName Declaration public static string AssemblyName Field Value Type Description String | Improve this Doc View Source NativeAssemblyName Declaration public static string NativeAssemblyName Field Value Type Description String Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source DetectedProviderName Declaration public static string DetectedProviderName { get; } Property Value Type Description String Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Int32 maxBatchSize Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSybase(Assembly) Declaration public static void ResolveSybase(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveSybase(String) Declaration public static void ResolveSybase(string path) Parameters Type Name Description String path"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.html",
    "title": "Class SybaseMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseMappingSchema Inheritance Object MappingSchema SybaseMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class SybaseMappingSchema : MappingSchema Constructors | Improve this Doc View Source SybaseMappingSchema() Declaration public SybaseMappingSchema() | Improve this Doc View Source SybaseMappingSchema(String) Declaration protected SybaseMappingSchema(string configuration) Parameters Type Name Description String configuration Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.NativeMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.NativeMappingSchema.html",
    "title": "Class SybaseMappingSchema.NativeMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseMappingSchema.NativeMappingSchema Inheritance Object MappingSchema SybaseMappingSchema.NativeMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class NativeMappingSchema : MappingSchema Constructors | Improve this Doc View Source NativeMappingSchema() Declaration public NativeMappingSchema() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.ManagedMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.ManagedMappingSchema.html",
    "title": "Class SybaseMappingSchema.ManagedMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseMappingSchema.ManagedMappingSchema Inheritance Object MappingSchema SybaseMappingSchema.ManagedMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class ManagedMappingSchema : MappingSchema Constructors | Improve this Doc View Source ManagedMappingSchema() Declaration public ManagedMappingSchema() Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerDataProvider.html",
    "title": "Class SqlServerDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerDataProvider Inheritance Object DataProviderBase SqlServerDataProvider Implements IDataProvider Inherited Members DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerDataProvider : DataProviderBase, IDataProvider Constructors | Improve this Doc View Source SqlServerDataProvider(String, SqlServerVersion) Declaration public SqlServerDataProvider(string name, SqlServerVersion version) Parameters Type Name Description String name SqlServerVersion version Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source DataReaderType Declaration public override Type DataReaderType { get; } Property Value Type Description Type Overrides DataProviderBase.DataReaderType | Improve this Doc View Source MappingSchema Declaration public override MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Overrides DataProviderBase.MappingSchema | Improve this Doc View Source Version Declaration public SqlServerVersion Version { get; } Property Value Type Description SqlServerVersion Methods | Improve this Doc View Source AddUdtType(Type, String) Declaration public void AddUdtType(Type type, string udtName) Parameters Type Name Description Type type String udtName | Improve this Doc View Source AddUdtType<T>(String, T, DataType) Declaration public void AddUdtType<T>(string udtName, T defaultValue, DataType dataType = DataType.Undefined) Parameters Type Name Description String udtName T defaultValue DataType dataType Type Parameters Name Description T | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected override IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description String connectionString Returns Type Description IDbConnection Overrides DataProviderBase.CreateConnectionInternal(String) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetConnectionInfo(DataConnection, String) Declaration public override object GetConnectionInfo(DataConnection dataConnection, string parameterName) Parameters Type Name Description DataConnection dataConnection String parameterName Returns Type Description Object Overrides DataProviderBase.GetConnectionInfo(DataConnection, String) | Improve this Doc View Source GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Declaration protected override BasicMergeBuilder<TTarget, TSource> GetMergeBuilder<TTarget, TSource>(DataConnection connection, IMergeable<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description DataConnection connection IMergeable <TTarget, TSource> merge Returns Type Description BasicMergeBuilder <TTarget, TSource> Type Parameters Name Description TTarget TSource Overrides LinqToDB.DataProvider.DataProviderBase.GetMergeBuilder<TTarget, TSource>(LinqToDB.Data.DataConnection, LinqToDB.IMergeable<TTarget, TSource>) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration public override bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description Boolean Overrides DataProviderBase.IsCompatibleConnection(IDbConnection) | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public override int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName Returns Type Description Int32 Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.Merge<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String) | Improve this Doc View Source MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) Declaration public override Task<int> MergeAsync<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName, CancellationToken token) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.MergeAsync<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String, System.Threading.CancellationToken) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerConfiguration.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerConfiguration.html",
    "title": "Class SqlServerConfiguration | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerConfiguration Inheritance Object SqlServerConfiguration Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public static class SqlServerConfiguration Fields | Improve this Doc View Source GenerateScopeIdentity Declaration public static bool GenerateScopeIdentity Field Value Type Description Boolean"
  },
  "api/LinqToDB.DataProvider.SqlServer.FreeTextTableExpressionAttribute.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.FreeTextTableExpressionAttribute.html",
    "title": "Class FreeTextTableExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class FreeTextTableExpressionAttribute Inheritance Object Attribute Sql.TableFunctionAttribute Sql.TableExpressionAttribute FreeTextTableExpressionAttribute Implements _Attribute Inherited Members Sql.TableExpressionAttribute.Name Sql.TableExpressionAttribute.Expression Sql.TableFunctionAttribute.Configuration Sql.TableFunctionAttribute.Schema Sql.TableFunctionAttribute.Database Sql.TableFunctionAttribute.ArgIndices Sql.TableFunctionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class FreeTextTableExpressionAttribute : Sql.TableExpressionAttribute, _Attribute Constructors | Improve this Doc View Source FreeTextTableExpressionAttribute() Declaration public FreeTextTableExpressionAttribute() Methods | Improve this Doc View Source SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>) Declaration public override void SetTable(MappingSchema mappingSchema, SqlTable table, MemberInfo member, IEnumerable<Expression> expArgs, IEnumerable<ISqlExpression> sqlArgs) Parameters Type Name Description MappingSchema mappingSchema SqlTable table MemberInfo member IEnumerable < Expression > expArgs IEnumerable < ISqlExpression > sqlArgs Overrides Sql.TableExpressionAttribute.SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>) Implements _Attribute Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.html",
    "title": "Namespace LinqToDB.DataProvider.SQLite | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SQLite Classes SQLiteDataProvider SQLiteMappingSchema SQLiteMappingSchema.ClassicMappingSchema SQLiteMappingSchema.MicrosoftMappingSchema SQLiteSqlBuilder SQLiteTools"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeMappingSchema.html",
    "title": "Class SqlCeMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeMappingSchema Inheritance Object MappingSchema SqlCeMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public class SqlCeMappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlCeMappingSchema() Declaration public SqlCeMappingSchema() | Improve this Doc View Source SqlCeMappingSchema(String) Declaration protected SqlCeMappingSchema(string configuration) Parameters Type Name Description String configuration Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeDataProvider.html",
    "title": "Class SqlCeDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeDataProvider Inheritance Object DataProviderBase DynamicDataProviderBase SqlCeDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase.SyncRoot DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, Type, String) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) DataProviderBase.MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) DataProviderBase.GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public class SqlCeDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source SqlCeDataProvider() Declaration public SqlCeDataProvider() | Improve this Doc View Source SqlCeDataProvider(String, MappingSchema) Declaration protected SqlCeDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description String databaseName Boolean deleteIfExists | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source DropDatabase(String) Declaration public void DropDatabase(string databaseName) Parameters Type Name Description String databaseName | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public override bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader Int32 idx Returns Type Description Nullable < Boolean > Overrides DataProviderBase.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.html",
    "title": "Namespace LinqToDB.DataProvider.SapHana | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SapHana Classes CalculationViewInputParametersExpressionAttribute GetHanaSchemaOptions SapHanaDataProvider SapHanaMappingSchema SapHanaOdbcDataProvider SapHanaTools ViewWithParametersTableSchema"
  },
  "api/LinqToDB.DataProvider.SapHana.ViewWithParametersTableSchema.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.ViewWithParametersTableSchema.html",
    "title": "Class ViewWithParametersTableSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ViewWithParametersTableSchema Inheritance Object TableSchema ViewWithParametersTableSchema Inherited Members TableSchema.ID TableSchema.CatalogName TableSchema.SchemaName TableSchema.TableName TableSchema.Description TableSchema.IsDefaultSchema TableSchema.IsView TableSchema.IsProcedureResult TableSchema.TypeName TableSchema.IsProviderSpecific TableSchema.Columns TableSchema.ForeignKeys Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class ViewWithParametersTableSchema : TableSchema Constructors | Improve this Doc View Source ViewWithParametersTableSchema() Declaration public ViewWithParametersTableSchema() Properties | Improve this Doc View Source Parameters Declaration public List<ParameterSchema> Parameters { get; set; } Property Value Type Description List < ParameterSchema > Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreator-2.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreator-2.html",
    "title": "Class TypeCreator<T1, T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreator<T1, T> Inheritance Object TypeCreatorBase TypeCreator TypeCreator <T1> TypeCreator<T1, T> TypeCreator<T1, T2, T> Inherited Members TypeCreator<T1>.CreateInstance(T1) TypeCreator.CreateInstance() TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class TypeCreator<T1, T> : TypeCreator<T1> Type Parameters Name Description T1 T Methods | Improve this Doc View Source CreateInstance(T) Declaration public dynamic CreateInstance(T value) Parameters Type Name Description T value Returns Type Description Object Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreator-1.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreator-1.html",
    "title": "Class TypeCreator<T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreator<T> Inheritance Object TypeCreatorBase TypeCreator TypeCreator<T> TypeCreator<T1, T> Inherited Members TypeCreator.CreateInstance() TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class TypeCreator<T> : TypeCreator Type Parameters Name Description T Methods | Improve this Doc View Source CreateInstance(T) Declaration public dynamic CreateInstance(T value) Parameters Type Name Description T value Returns Type Description Object Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.ConnectionTypeTypeCreator-1.html": {
    "href": "api/LinqToDB.DataProvider.DB2.ConnectionTypeTypeCreator-1.html",
    "title": "Class ConnectionTypeTypeCreator<T> | Linq To DB (aka linq2db)",
    "keywords": "Class ConnectionTypeTypeCreator<T> Inheritance Object TypeCreatorBase TypeCreatorNoDefault <T> ConnectionTypeTypeCreator<T> Inherited Members TypeCreatorNoDefault<T>.CreateInstance(T) TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class ConnectionTypeTypeCreator<T> : TypeCreatorNoDefault<T> Type Parameters Name Description T Methods | Improve this Doc View Source CreateInstance(DataConnection) Declaration public dynamic CreateInstance(DataConnection value) Parameters Type Name Description DataConnection value Returns Type Description Object Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DataTools.html": {
    "href": "api/LinqToDB.DataProvider.DataTools.html",
    "title": "Class DataTools | Linq To DB (aka linq2db)",
    "keywords": "Class DataTools Inheritance Object DataTools Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class DataTools Fields | Improve this Doc View Source GetChar Declaration public static Func<IDataReader, int, string> GetChar Field Value Type Description Func < IDataReader , Int32 , String > Methods | Improve this Doc View Source ConvertCharToSql(StringBuilder, String, Action<StringBuilder, Int32>, Char) Declaration public static void ConvertCharToSql(StringBuilder stringBuilder, string startString, Action<StringBuilder, int> appendConversion, char value) Parameters Type Name Description StringBuilder stringBuilder String startString Action < StringBuilder , Int32 > appendConversion Char value | Improve this Doc View Source ConvertStringToSql(StringBuilder, String, String, Action<StringBuilder, Int32>, String, Char[]) Declaration public static void ConvertStringToSql(StringBuilder stringBuilder, string plusOperator, string startPrefix, Action<StringBuilder, int> appendConversion, string value, char[] extraEscapes) Parameters Type Name Description StringBuilder stringBuilder String plusOperator String startPrefix Action < StringBuilder , Int32 > appendConversion String value Char [] extraEscapes Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Access.AccessTools.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessTools.html",
    "title": "Class AccessTools | Linq To DB (aka linq2db)",
    "keywords": "Class AccessTools Inheritance Object AccessTools Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public static class AccessTools Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public static void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description String databaseName Boolean deleteIfExists | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description String connectionString Returns Type Description DataConnection | Improve this Doc View Source DropDatabase(String) Declaration public static void DropDatabase(string databaseName) Parameters Type Name Description String databaseName | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source Int32 maxBatchSize Action < BulkCopyRowsCopied > rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T"
  },
  "api/LinqToDB.DataProvider.Access.AccessMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessMappingSchema.html",
    "title": "Class AccessMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class AccessMappingSchema Inheritance Object MappingSchema AccessMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public class AccessMappingSchema : MappingSchema Constructors | Improve this Doc View Source AccessMappingSchema() Declaration public AccessMappingSchema() | Improve this Doc View Source AccessMappingSchema(String) Declaration protected AccessMappingSchema(string configuration) Parameters Type Name Description String configuration Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.RetryPolicy.IRetryPolicy.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.IRetryPolicy.html",
    "title": "Interface IRetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Interface IRetryPolicy Namespace : LinqToDB.Data.RetryPolicy Assembly : linq2db.dll Syntax public interface IRetryPolicy Methods | Improve this Doc View Source Execute(Action) Declaration void Execute(Action operation) Parameters Type Name Description Action operation | Improve this Doc View Source Execute<TResult>(Func<TResult>) Executes the specified operation and returns the result. Declaration TResult Execute<TResult>(Func<TResult> operation) Parameters Type Name Description Func <TResult> operation A delegate representing an executable operation that returns the result of type TResult . Returns Type Description TResult The result from the operation. Type Parameters Name Description TResult The return type of operation . | Improve this Doc View Source ExecuteAsync(Func<CancellationToken, Task>, CancellationToken) Declaration Task ExecuteAsync(Func<CancellationToken, Task> operation, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Func < CancellationToken , Task > operation CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) Executes the specified asynchronous operation and returns the result. Declaration Task<TResult> ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Func < CancellationToken , Task <TResult>> operation A function that returns a started task of type TResult . CancellationToken cancellationToken A cancellation token used to cancel the retry operation, but not operations that are already in flight or that already completed successfully. Returns Type Description Task <TResult> A task that will run to completion if the original task completes successfully (either the first time or after retrying transient failures). If the task fails with a non-transient error or the retry limit is reached, the returned task will become faulted and the exception must be observed. Type Parameters Name Description TResult The result type of the Task<TResult> returned by operation . Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.DataReaderAsync.html": {
    "href": "api/LinqToDB.Data.DataReaderAsync.html",
    "title": "Class DataReaderAsync | Linq To DB (aka linq2db)",
    "keywords": "Class DataReaderAsync Inheritance Object DataReaderAsync Implements IDisposable Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataReaderAsync : IDisposable Properties | Improve this Doc View Source CommandInfo Declaration public CommandInfo CommandInfo { get; set; } Property Value Type Description CommandInfo | Improve this Doc View Source Reader Declaration public DbDataReader Reader { get; set; } Property Value Type Description DbDataReader Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source ExecuteForEachAsync<T>() Declaration public Task<T> ExecuteForEachAsync<T>() Returns Type Description Task <T> Type Parameters Name Description T | Improve this Doc View Source ExecuteForEachAsync<T>(CancellationToken) Declaration public Task<T> ExecuteForEachAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task <T> Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(T, Action<T>) Declaration public Task QueryForEachAsync<T>(T template, Action<T> action) Parameters Type Name Description T template Action <T> action Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(T, Action<T>, CancellationToken) Declaration public Task QueryForEachAsync<T>(T template, Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description T template Action <T> action CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Action<T>) Declaration public Task QueryForEachAsync<T>(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Action<T>, CancellationToken) Declaration public Task QueryForEachAsync<T>(Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description Action <T> action CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Func<IDataReader, T>, Action<T>) Declaration public Task QueryForEachAsync<T>(Func<IDataReader, T> objectReader, Action<T> action) Parameters Type Name Description Func < IDataReader , T> objectReader Action <T> action Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Func<IDataReader, T>, Action<T>, CancellationToken) Declaration public Task QueryForEachAsync<T>(Func<IDataReader, T> objectReader, Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description Func < IDataReader , T> objectReader Action <T> action CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>() Declaration public Task<T[]> QueryToArrayAsync<T>() Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(T) Declaration public Task<T[]> QueryToArrayAsync<T>(T template) Parameters Type Name Description T template Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(T, CancellationToken) Declaration public Task<T[]> QueryToArrayAsync<T>(T template, CancellationToken cancellationToken) Parameters Type Name Description T template CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(Func<IDataReader, T>) Declaration public Task<T[]> QueryToArrayAsync<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(Func<IDataReader, T>, CancellationToken) Declaration public Task<T[]> QueryToArrayAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken) Parameters Type Name Description Func < IDataReader , T> objectReader CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(CancellationToken) Declaration public Task<T[]> QueryToArrayAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>() Declaration public Task<List<T>> QueryToListAsync<T>() Returns Type Description Task < List <T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(T) Declaration public Task<List<T>> QueryToListAsync<T>(T template) Parameters Type Name Description T template Returns Type Description Task < List <T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(T, CancellationToken) Declaration public Task<List<T>> QueryToListAsync<T>(T template, CancellationToken cancellationToken) Parameters Type Name Description T template CancellationToken cancellationToken Returns Type Description Task < List <T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(Func<IDataReader, T>) Declaration public Task<List<T>> QueryToListAsync<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Returns Type Description Task < List <T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(Func<IDataReader, T>, CancellationToken) Declaration public Task<List<T>> QueryToListAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken) Parameters Type Name Description Func < IDataReader , T> objectReader CancellationToken cancellationToken Returns Type Description Task < List <T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(CancellationToken) Declaration public Task<List<T>> QueryToListAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < List <T>> Type Parameters Name Description T Implements IDisposable Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.DataConnectionTransaction.html": {
    "href": "api/LinqToDB.Data.DataConnectionTransaction.html",
    "title": "Class DataConnectionTransaction | Linq To DB (aka linq2db)",
    "keywords": "Class DataConnectionTransaction Inheritance Object DataConnectionTransaction Implements IDisposable Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataConnectionTransaction : IDisposable Constructors | Improve this Doc View Source DataConnectionTransaction(DataConnection) Declaration public DataConnectionTransaction(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Properties | Improve this Doc View Source DataConnection Declaration public DataConnection DataConnection { get; } Property Value Type Description DataConnection Methods | Improve this Doc View Source Commit() Declaration public void Commit() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Rollback() Declaration public void Rollback() Implements IDisposable Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.DataConnectionExtensions.html": {
    "href": "api/LinqToDB.Data.DataConnectionExtensions.html",
    "title": "Class DataConnectionExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class DataConnectionExtensions Contains extension methods for DataConnection class. Inheritance Object DataConnectionExtensions Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public static class DataConnectionExtensions Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Performs bulk insert operation. Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection Database connection. BulkCopyOptions options Operation options. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(DataConnection, IEnumerable<T>) Performs bulk insert operation. Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection Database connection. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(DataConnection, Int32, IEnumerable<T>) Performs bulk insert operation. Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, int maxBatchSize, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection Database connection. Int32 maxBatchSize Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Performs bulk intert operation into table specified in options parameter or into table, identified by table . Declaration public static BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table Target table. BulkCopyOptions options Operation options. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(ITable<T>, IEnumerable<T>) Performs bulk intert operation into table, identified by table . Declaration public static BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, IEnumerable<T> source) Parameters Type Name Description ITable <T> table Target table. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(ITable<T>, Int32, IEnumerable<T>) Performs bulk intert operation into table, identified by table . Declaration public static BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, int maxBatchSize, IEnumerable<T> source) Parameters Type Name Description ITable <T> table Target table. Int32 maxBatchSize Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source Execute(DataConnection, String) Executes command and returns number of affected records. Declaration public static int Execute(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Returns Type Description Int32 Number of records, affected by command execution. | Improve this Doc View Source Execute(DataConnection, String, DataParameter[]) Executes command and returns number of affected records. Declaration public static int Execute(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Int32 Number of records, affected by command execution. | Improve this Doc View Source Execute(DataConnection, String, Object) Executes command and returns number of affected records. Declaration public static int Execute(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Int32 Number of records, affected by command execution. | Improve this Doc View Source Execute<T>(DataConnection, String) Executes command and returns single value. Declaration public static T Execute<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source Execute<T>(DataConnection, String, DataParameter) Executes command and returns single value. Declaration public static T Execute<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter parameter Command parameter. Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source Execute<T>(DataConnection, String, DataParameter[]) Executes command and returns single value. Declaration public static T Execute<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source Execute<T>(DataConnection, String, Object) Executes command and returns single value. Declaration public static T Execute<T>(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync(DataConnection, String) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync(DataConnection, String, DataParameter[]) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync(DataConnection, String, Object) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync(DataConnection, String, CancellationToken) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync(DataConnection, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync(DataConnection, String, CancellationToken, Object) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql, CancellationToken cancellationToken, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, DataParameter) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter parameter Command parameter. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, DataParameter, CancellationToken) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, DataParameter parameter, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter parameter Command parameter. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, DataParameter[]) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, Object) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, CancellationToken) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, CancellationToken, Object) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProc(DataConnection, String, DataParameter[]) Executes command using StoredProcedure command type and returns number of affected records. Declaration public static int ExecuteProc(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Int32 Number of records, affected by command execution. | Improve this Doc View Source ExecuteProc<T>(DataConnection, String, DataParameter[]) Executes command using StoredProcedure command type and returns single value. Declaration public static T ExecuteProc<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProcAsync(DataConnection, String, DataParameter[]) Executes command using StoredProcedure command type asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteProcAsync(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteProcAsync(DataConnection, String, CancellationToken, DataParameter[]) Executes command using StoredProcedure command type asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteProcAsync(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteProcAsync<T>(DataConnection, String, DataParameter[]) Executes command using StoredProcedure command type asynchronously and returns single value. Declaration public static Task<T> ExecuteProcAsync<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProcAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) Executes command using StoredProcedure command type asynchronously and returns single value. Declaration public static Task<T> ExecuteProcAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T> Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteReader(DataConnection, String) Executes command and returns data reader instance. Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Returns Type Description DataReader Data reader object. | Improve this Doc View Source ExecuteReader(DataConnection, String, DataParameter) Executes command and returns data reader instance. Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter parameter Command parameter. Returns Type Description DataReader Data reader object. | Improve this Doc View Source ExecuteReader(DataConnection, String, DataParameter[]) Executes command and returns data reader instance. Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description DataReader Data reader object. | Improve this Doc View Source ExecuteReader(DataConnection, String, CommandType, CommandBehavior, DataParameter[]) Executes command and returns data reader instance. Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, CommandType commandType, CommandBehavior commandBehavior, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CommandType commandType Type of command. See CommandType for all supported types. CommandBehavior commandBehavior Command behavior flags. See CommandBehavior for more details. DataParameter [] parameters Command parameters. Returns Type Description DataReader Data reader object. | Improve this Doc View Source ExecuteReader(DataConnection, String, Object) Executes command and returns data reader instance. Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description DataReader Data reader object. | Improve this Doc View Source Merge<T>(DataConnection, Boolean, IEnumerable<T>, String, String, String) Executes following merge operations in specified order: Update Insert Delete By Source (optional). If delete operation enabled by delete parameter - method could be used only for with Server. Declaration public static int Merge<T>(this DataConnection dataConnection, bool delete, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. Boolean delete If true, merge command will include delete by source operation without condition. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. Returns Type Description Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(DataConnection, IEnumerable<T>, String, String, String) Executes following merge operations in specified order: Update Insert. Declaration public static int Merge<T>(this DataConnection dataConnection, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. Returns Type Description Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, IEnumerable<T>, String, String, String) Executes following merge operations in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static int Merge<T>(this DataConnection dataConnection, Expression<Func<T, bool>> predicate, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. Expression < Func <T, Boolean >> predicate Filter, applied to delete operation. Optional. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. Returns Type Description Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(DataConnection, IQueryable<T>, Expression<Func<T, Boolean>>, String, String, String) Executes following merge operations in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static int Merge<T>(this DataConnection dataConnection, IQueryable<T> source, Expression<Func<T, bool>> predicate, string tableName = null, string databaseName = null, string schemaName = null) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. IQueryable <T> source Source data to merge into target table. All source data will be loaded from server for command generation. Expression < Func <T, Boolean >> predicate Filter, applied both to source and delete operation. Required. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. Returns Type Description Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(ITable<T>, Boolean, IEnumerable<T>, String, String, String) Executes following merge operations in specified order: Update Insert Delete By Source (optional). If delete operation enabled by delete parameter - method could be used only with SQL Server. Declaration public static int Merge<T>(this ITable<T> table, bool delete, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null) where T : class Parameters Type Name Description ITable <T> table Target table. Boolean delete If true, merge command will include delete by source operation without condition. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. Returns Type Description Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(ITable<T>, IEnumerable<T>, String, String, String) Executes following merge operations in specified order: Update Insert. Declaration public static int Merge<T>(this ITable<T> table, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null) where T : class Parameters Type Name Description ITable <T> table Target table. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. Returns Type Description Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(ITable<T>, Expression<Func<T, Boolean>>, IEnumerable<T>, String, String, String) Executes following merge operations in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static int Merge<T>(this ITable<T> table, Expression<Func<T, bool>> predicate, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null) where T : class Parameters Type Name Description ITable <T> table Target table. Expression < Func <T, Boolean >> predicate Filter, applied to delete operation. Optional. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. Returns Type Description Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(ITable<T>, IQueryable<T>, Expression<Func<T, Boolean>>, String, String, String) Executes following merge operations in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static int Merge<T>(this ITable<T> table, IQueryable<T> source, Expression<Func<T, bool>> predicate, string tableName = null, string databaseName = null, string schemaName = null) where T : class Parameters Type Name Description ITable <T> table Target table. IQueryable <T> source Source data to merge into target table. All source data will be loaded from server for command generation. Expression < Func <T, Boolean >> predicate Filter, applied both to source and delete operation. Required. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. Returns Type Description Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(DataConnection, Boolean, IEnumerable<T>, String, String, String, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source (optional). If delete operation enabled by delete parameter - method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this DataConnection dataConnection, bool delete, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. Boolean delete If true, merge command will include delete by source operation without condition. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(DataConnection, IEnumerable<T>, String, String, String, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert. Declaration public static Task<int> MergeAsync<T>(this DataConnection dataConnection, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, IEnumerable<T>, String, String, String, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this DataConnection dataConnection, Expression<Func<T, bool>> predicate, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. Expression < Func <T, Boolean >> predicate Filter, applied to delete operation. Optional. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(DataConnection, IQueryable<T>, Expression<Func<T, Boolean>>, String, String, String, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this DataConnection dataConnection, IQueryable<T> source, Expression<Func<T, bool>> predicate, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. IQueryable <T> source Source data to merge into target table. All source data will be loaded from server for command generation. Expression < Func <T, Boolean >> predicate Filter, applied both to source and delete operation. Required. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(ITable<T>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source (optional). If delete operation enabled by delete parameter - method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this ITable<T> table, bool delete, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class Parameters Type Name Description ITable <T> table Target table. Boolean delete If true, merge command will include delete by source operation without condition. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(ITable<T>, IEnumerable<T>, String, String, String, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert. Declaration public static Task<int> MergeAsync<T>(this ITable<T> table, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class Parameters Type Name Description ITable <T> table Target table. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(ITable<T>, Expression<Func<T, Boolean>>, IEnumerable<T>, String, String, String, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this ITable<T> table, Expression<Func<T, bool>> predicate, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class Parameters Type Name Description ITable <T> table Target table. Expression < Func <T, Boolean >> predicate Filter, applied to delete operation. Optional. IEnumerable <T> source Source data to merge into target table. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(ITable<T>, IQueryable<T>, Expression<Func<T, Boolean>>, String, String, String, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this ITable<T> table, IQueryable<T> source, Expression<Func<T, bool>> predicate, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class Parameters Type Name Description ITable <T> table Target table. IQueryable <T> source Source data to merge into target table. All source data will be loaded from server for command generation. Expression < Func <T, Boolean >> predicate Filter, applied both to source and delete operation. Required. String tableName Optional target table name. String databaseName Optional target table's database name. String schemaName Optional target table's schema name. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Query<T>(DataConnection, T, String, DataParameter[]) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, T template, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, T, String, Object) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, T template, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, Func<IDataReader, T>, String) Executes command and returns results as collection of values, mapped using provided mapping function. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) Executes command and returns results as collection of values, mapped using provided mapping function. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, Func<IDataReader, T>, String, Object) Executes command and returns results as collection of values, mapped using provided mapping function. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, String) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, String, DataParameter) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter parameter Command parameter. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, String, DataParameter[]) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, String, Object) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) Executes command using StoredProcedure command type and returns results as collection of values, mapped using provided mapping function. Declaration public static IEnumerable<T> QueryProc<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>(DataConnection, String, DataParameter[]) Executes command using StoredProcedure command type and returns results as collection of values of specified type. Declaration public static IEnumerable<T> QueryProc<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, T, String, DataParameter[]) Executes command asynchronously and returns array of values of specified type. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, T template, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, T, String, Object) Executes command asynchronously and returns array of values of specified type. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, T template, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, T, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns array of values of specified type. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, T template, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, T, String, CancellationToken, Object) Executes command asynchronously and returns array of values of specified type. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, T template, string sql, CancellationToken cancellationToken, object parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, Object) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, Object) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, CancellationToken cancellationToken, object parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, DataParameter) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter parameter Command parameter. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, DataParameter, CancellationToken) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, DataParameter parameter, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter parameter Command parameter. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, DataParameter[]) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, Object) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, CancellationToken) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, CancellationToken, Object) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, T, String, DataParameter[]) Executes command asynchronously and returns list of values of specified type. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, T template, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, T, String, Object) Executes command asynchronously and returns list of values of specified type. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, T template, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, T, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns list of values of specified type. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, T template, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, T, String, CancellationToken, Object) Executes command asynchronously and returns list of values of specified type. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, T template, string sql, CancellationToken cancellationToken, object parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, Object) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, Object, CancellationToken) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, object parameters, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, DataParameter) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter parameter Command parameter. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, DataParameter, CancellationToken) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, DataParameter parameter, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter parameter Command parameter. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, DataParameter[]) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, Object) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, CancellationToken) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, CancellationToken, Object) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, object parameters) Parameters Type Name Description DataConnection connection Database connection. String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source SetCommand(DataConnection, String) Creates command wrapper for current connection with provided command text. Declaration public static CommandInfo SetCommand(this DataConnection dataConnection, string commandText) Parameters Type Name Description DataConnection dataConnection Database connection. String commandText Command text. Returns Type Description CommandInfo Database command wrapper. | Improve this Doc View Source SetCommand(DataConnection, String, DataParameter) Creates command wrapper for current connection with provided command text and single parameter. Declaration public static CommandInfo SetCommand(this DataConnection dataConnection, string commandText, DataParameter parameter) Parameters Type Name Description DataConnection dataConnection Database connection. String commandText Command text. DataParameter parameter Command parameter. Returns Type Description CommandInfo Database command wrapper. | Improve this Doc View Source SetCommand(DataConnection, String, DataParameter[]) Creates command wrapper for current connection with provided command text and parameters. Declaration public static CommandInfo SetCommand(this DataConnection dataConnection, string commandText, params DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection Database connection. String commandText Command text. DataParameter [] parameters Command parameters. Returns Type Description CommandInfo Database command wrapper. | Improve this Doc View Source SetCommand(DataConnection, String, Object) Creates command wrapper for current connection with provided command text and parameters. Declaration public static CommandInfo SetCommand(this DataConnection dataConnection, string commandText, object parameters) Parameters Type Name Description DataConnection dataConnection Database connection. String commandText Command text. Object parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description CommandInfo Database command wrapper."
  },
  "api/LinqToDB.Configuration.ElementBase.html": {
    "href": "api/LinqToDB.Configuration.ElementBase.html",
    "title": "Class ElementBase | Linq To DB (aka linq2db)",
    "keywords": "Class ElementBase Configuration section element. Inheritance Object ConfigurationElement ElementBase DataProviderElement Inherited Members ConfigurationElement.Init() ConfigurationElement.IsModified() ConfigurationElement.ResetModified() ConfigurationElement.IsReadOnly() ConfigurationElement.SetReadOnly() ConfigurationElement.ListErrors(IList) ConfigurationElement.InitializeDefault() ConfigurationElement.Reset(ConfigurationElement) ConfigurationElement.Equals(Object) ConfigurationElement.GetHashCode() ConfigurationElement.SetPropertyValue(ConfigurationProperty, Object, Boolean) ConfigurationElement.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) ConfigurationElement.SerializeToXmlElement(XmlWriter, String) ConfigurationElement.SerializeElement(XmlWriter, Boolean) ConfigurationElement.DeserializeElement(XmlReader, Boolean) ConfigurationElement.OnRequiredPropertyNotFound(String) ConfigurationElement.PostDeserialize() ConfigurationElement.PreSerialize(XmlWriter) ConfigurationElement.OnDeserializeUnrecognizedElement(String, XmlReader) ConfigurationElement.GetTransformedTypeString(String) ConfigurationElement.GetTransformedAssemblyString(String) ConfigurationElement.LockAttributes ConfigurationElement.LockAllAttributesExcept ConfigurationElement.LockElements ConfigurationElement.LockAllElementsExcept ConfigurationElement.LockItem ConfigurationElement.Item[ConfigurationProperty] ConfigurationElement.Item[String] ConfigurationElement.ElementInformation ConfigurationElement.EvaluationContext ConfigurationElement.ElementProperty ConfigurationElement.HasContext ConfigurationElement.CurrentConfiguration Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public abstract class ElementBase : ConfigurationElement Properties | Improve this Doc View Source Attributes Gets collection of unknown element attributes. Declaration public NameValueCollection Attributes { get; } Property Value Type Description NameValueCollection | Improve this Doc View Source Properties Declaration protected override ConfigurationPropertyCollection Properties { get; } Property Value Type Description ConfigurationPropertyCollection Overrides ConfigurationElement.Properties Methods | Improve this Doc View Source OnDeserializeUnrecognizedAttribute(String, String) Gets a value indicating whether an unknown attribute is encountered during deserialization. Declaration protected override bool OnDeserializeUnrecognizedAttribute(string name, string value) Parameters Type Name Description String name The name of the unrecognized attribute. String value The value of the unrecognized attribute. Returns Type Description Boolean True when an unknown attribute is encountered while deserializing. Overrides ConfigurationElement.OnDeserializeUnrecognizedAttribute(String, String) Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.DataProviderElementCollection.html": {
    "href": "api/LinqToDB.Configuration.DataProviderElementCollection.html",
    "title": "Class DataProviderElementCollection | Linq To DB (aka linq2db)",
    "keywords": "Class DataProviderElementCollection Collection of data provider configuration elements. Inheritance Object ConfigurationElement ConfigurationElementCollection ElementCollectionBase < DataProviderElement > DataProviderElementCollection Implements ICollection IEnumerable Inherited Members ElementCollectionBase<DataProviderElement>.CreateNewElement() ElementCollectionBase<DataProviderElement>.GetElementKey(ConfigurationElement) ElementCollectionBase<DataProviderElement>.Item[String] ElementCollectionBase<DataProviderElement>.Item[Int32] ConfigurationElementCollection.IsModified() ConfigurationElementCollection.ResetModified() ConfigurationElementCollection.IsReadOnly() ConfigurationElementCollection.SetReadOnly() ConfigurationElementCollection.Equals(Object) ConfigurationElementCollection.GetHashCode() ConfigurationElementCollection.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) ConfigurationElementCollection.Reset(ConfigurationElement) ConfigurationElementCollection.CopyTo(ConfigurationElement[], Int32) ConfigurationElementCollection.ICollection.CopyTo(Array, Int32) ConfigurationElementCollection.GetEnumerator() ConfigurationElementCollection.BaseAdd(ConfigurationElement) ConfigurationElementCollection.BaseAdd(ConfigurationElement, Boolean) ConfigurationElementCollection.BaseIndexOf(ConfigurationElement) ConfigurationElementCollection.BaseAdd(Int32, ConfigurationElement) ConfigurationElementCollection.BaseRemove(Object) ConfigurationElementCollection.BaseGet(Object) ConfigurationElementCollection.BaseIsRemoved(Object) ConfigurationElementCollection.BaseGet(Int32) ConfigurationElementCollection.BaseGetAllKeys() ConfigurationElementCollection.BaseGetKey(Int32) ConfigurationElementCollection.BaseClear() ConfigurationElementCollection.BaseRemoveAt(Int32) ConfigurationElementCollection.SerializeElement(XmlWriter, Boolean) ConfigurationElementCollection.OnDeserializeUnrecognizedElement(String, XmlReader) ConfigurationElementCollection.CreateNewElement(String) ConfigurationElementCollection.IsElementRemovable(ConfigurationElement) ConfigurationElementCollection.IsElementName(String) ConfigurationElementCollection.AddElementName ConfigurationElementCollection.RemoveElementName ConfigurationElementCollection.ClearElementName ConfigurationElementCollection.Count ConfigurationElementCollection.EmitClear ConfigurationElementCollection.IsSynchronized ConfigurationElementCollection.SyncRoot ConfigurationElementCollection.ElementName ConfigurationElementCollection.ThrowOnDuplicate ConfigurationElementCollection.CollectionType ConfigurationElement.Init() ConfigurationElement.ListErrors(IList) ConfigurationElement.InitializeDefault() ConfigurationElement.SetPropertyValue(ConfigurationProperty, Object, Boolean) ConfigurationElement.SerializeToXmlElement(XmlWriter, String) ConfigurationElement.DeserializeElement(XmlReader, Boolean) ConfigurationElement.OnRequiredPropertyNotFound(String) ConfigurationElement.PostDeserialize() ConfigurationElement.PreSerialize(XmlWriter) ConfigurationElement.OnDeserializeUnrecognizedAttribute(String, String) ConfigurationElement.GetTransformedTypeString(String) ConfigurationElement.GetTransformedAssemblyString(String) ConfigurationElement.LockAttributes ConfigurationElement.LockAllAttributesExcept ConfigurationElement.LockElements ConfigurationElement.LockAllElementsExcept ConfigurationElement.LockItem ConfigurationElement.Item[ConfigurationProperty] ConfigurationElement.Properties ConfigurationElement.ElementInformation ConfigurationElement.EvaluationContext ConfigurationElement.ElementProperty ConfigurationElement.HasContext ConfigurationElement.CurrentConfiguration Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax [ConfigurationCollection(typeof(DataProviderElement))] public class DataProviderElementCollection : ElementCollectionBase<DataProviderElement>, ICollection, IEnumerable Methods | Improve this Doc View Source GetElementKey(DataProviderElement) Declaration protected override object GetElementKey(DataProviderElement element) Parameters Type Name Description DataProviderElement element Returns Type Description Object Overrides LinqToDB.Configuration.ElementCollectionBase<LinqToDB.Configuration.DataProviderElement>.GetElementKey(LinqToDB.Configuration.DataProviderElement) Implements ICollection IEnumerable Extension Methods Tools.IsNullOrEmpty(ICollection) ReflectionExtensions.GetListItemType(IEnumerable) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.html": {
    "href": "api/LinqToDB.Common.html",
    "title": "Namespace LinqToDB.Common | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Common Classes Array<T> Empty array instance helper. Configuration Contains global linq2db settings. Configuration.Data Configuration.Linq LINQ query settings. Configuration.LinqService Linq over WCF global settings. Configuration.RetryPolicy Retry policy global settings. Convert<TFrom, TTo> Converters provider for value conversion from TFrom to TTo type. Converter Type conversion manager. ConvertTo<TTo> Value converter to TTo type. DefaultValue Default value provider. Default value used for mapping from NULL database value to C# value. DefaultValue<T> Default value provider for specific type. Default value used for mapping from NULL database value to C# value. LinqToDBConvertException Defines the base class for the namespace exceptions. Tools Various general-purpose helpers. Utils"
  },
  "api/LinqToDB.Common.Utils.html": {
    "href": "api/LinqToDB.Common.Utils.html",
    "title": "Class Utils | Linq To DB (aka linq2db)",
    "keywords": "Class Utils Inheritance Object Utils Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Utils Methods | Improve this Doc View Source MakeUniqueNames<T>(IEnumerable<T>, IEnumerable<String>, Func<T, String>, Action<T, String>, Func<T, String>) Declaration public static void MakeUniqueNames<T>(IEnumerable<T> items, IEnumerable<string> staticNames, Func<T, string> nameFunc, Action<T, string> nameSetter, Func<T, string> defaultName) Parameters Type Name Description IEnumerable <T> items IEnumerable < String > staticNames Func <T, String > nameFunc Action <T, String > nameSetter Func <T, String > defaultName Type Parameters Name Description T | Improve this Doc View Source MakeUniqueNames<T>(IEnumerable<T>, IEnumerable<String>, Func<T, String>, Action<T, String>, String) Declaration public static void MakeUniqueNames<T>(IEnumerable<T> items, IEnumerable<string> staticNames, Func<T, string> nameFunc, Action<T, string> nameSetter, string defaultName = \"t\") Parameters Type Name Description IEnumerable <T> items IEnumerable < String > staticNames Func <T, String > nameFunc Action <T, String > nameSetter String defaultName Type Parameters Name Description T | Improve this Doc View Source MakeUniqueNames<T>(IEnumerable<T>, Func<T, String>, Action<T, String>, String) Declaration public static void MakeUniqueNames<T>(IEnumerable<T> items, Func<T, string> nameFunc, Action<T, string> nameSetter, string defaultName = \"t\") Parameters Type Name Description IEnumerable <T> items Func <T, String > nameFunc Action <T, String > nameSetter String defaultName Type Parameters Name Description T"
  },
  "api/LinqToDB.Common.DefaultValue.html": {
    "href": "api/LinqToDB.Common.DefaultValue.html",
    "title": "Class DefaultValue | Linq To DB (aka linq2db)",
    "keywords": "Class DefaultValue Default value provider. Default value used for mapping from NULL database value to C# value. Inheritance Object DefaultValue Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class DefaultValue Methods | Improve this Doc View Source GetValue(Type, MappingSchema) Returns default value for provided type. Declaration public static object GetValue(Type type, MappingSchema mappingSchema = null) Parameters Type Name Description Type type Type, for which default value requested. MappingSchema mappingSchema Optional mapping schema to provide mapping information for enum type. Returns Type Description Object Default value for specific type. | Improve this Doc View Source GetValue<T>() Returns default value for provided type. Declaration public static T GetValue<T>() Returns Type Description T Default value for specific type. Type Parameters Name Description T Type, for which default value requested. | Improve this Doc View Source SetValue<T>(T) Sets default value for provided type. Declaration public static void SetValue<T>(T value) Parameters Type Name Description T value Default value for specific type. Type Parameters Name Description T Type, for which default value set."
  },
  "api/LinqToDB.Common.DefaultValue-1.html": {
    "href": "api/LinqToDB.Common.DefaultValue-1.html",
    "title": "Class DefaultValue<T> | Linq To DB (aka linq2db)",
    "keywords": "Class DefaultValue<T> Default value provider for specific type. Default value used for mapping from NULL database value to C# value. Inheritance Object DefaultValue<T> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class DefaultValue<T> Type Parameters Name Description T Type parameter. Properties | Improve this Doc View Source Value Gets or sets default value for specific type. Declaration public static T Value { get; set; } Property Value Type Description T"
  },
  "api/LinqToDB.Common.Converter.html": {
    "href": "api/LinqToDB.Common.Converter.html",
    "title": "Class Converter | Linq To DB (aka linq2db)",
    "keywords": "Class Converter Type conversion manager. Inheritance Object Converter Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Converter Methods | Improve this Doc View Source ChangeType(Object, Type, MappingSchema) Converts value to conversionType type. Declaration public static object ChangeType(object value, Type conversionType, MappingSchema mappingSchema = null) Parameters Type Name Description Object value Value to convert. Type conversionType Target conversion type. MappingSchema mappingSchema Optional mapping schema. Returns Type Description Object Converted value. | Improve this Doc View Source ChangeTypeTo<T>(Object, MappingSchema) Converts value to T type. Declaration public static T ChangeTypeTo<T>(object value, MappingSchema mappingSchema = null) Parameters Type Name Description Object value Value to convert. MappingSchema mappingSchema Optional mapping schema. Returns Type Description T Converted value. Type Parameters Name Description T Target conversion type. | Improve this Doc View Source GetDefaultMappingFromEnumType(MappingSchema, Type) Returns type, to which provided enumeration values should be mapped. Declaration public static Type GetDefaultMappingFromEnumType(MappingSchema mappingSchema, Type enumType) Parameters Type Name Description MappingSchema mappingSchema Current mapping schema Type enumType Enumeration type. Returns Type Description Type Underlying mapping type. | Improve this Doc View Source SetConverter<TFrom, TTo>(Expression<Func<TFrom, TTo>>) Sets custom converter from TFrom to TTo type. Declaration public static void SetConverter<TFrom, TTo>(Expression<Func<TFrom, TTo>> expr) Parameters Type Name Description Expression < Func <TFrom, TTo>> expr Converter expression. Type Parameters Name Description TFrom Source conversion type. TTo Target conversion type."
  },
  "api/LinqToDB.Common.Convert-2.html": {
    "href": "api/LinqToDB.Common.Convert-2.html",
    "title": "Class Convert<TFrom, TTo> | Linq To DB (aka linq2db)",
    "keywords": "Class Convert<TFrom, TTo> Converters provider for value conversion from TFrom to TTo type. Inheritance Object Convert<TFrom, TTo> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Convert<TFrom, TTo> Type Parameters Name Description TFrom Source conversion type. TTo Target conversion type. Properties | Improve this Doc View Source Expression Gets or sets conversion function as expression. Setter updates both expression and delegate forms of converter. Assigning null value will reset converter to default conversion logic. Assigning non-null value will also set converter as default converter. Declaration public static Expression<Func<TFrom, TTo>> Expression { get; set; } Property Value Type Description Expression < Func <TFrom, TTo>> | Improve this Doc View Source From Gets conversion function delegate. Declaration public static Func<TFrom, TTo> From { get; } Property Value Type Description Func <TFrom, TTo> | Improve this Doc View Source Lambda Gets or sets conversion function as delegate. Setter updates both expression and delegate forms of converter. Assigning null value will reset converter to default conversion logic. Assigning non-null value will also set converter as default converter. Declaration public static Func<TFrom, TTo> Lambda { get; set; } Property Value Type Description Func <TFrom, TTo>"
  },
  "api/LinqToDB.Common.Configuration.RetryPolicy.html": {
    "href": "api/LinqToDB.Common.Configuration.RetryPolicy.html",
    "title": "Class Configuration.RetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.RetryPolicy Retry policy global settings. Inheritance Object Configuration.RetryPolicy Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class RetryPolicy Fields | Improve this Doc View Source DefaultCoefficient The default coefficient for the exponential function used to compute the delay between retries, must be nonnegative. Default value: 1 second. Declaration public static TimeSpan DefaultCoefficient Field Value Type Description TimeSpan | Improve this Doc View Source DefaultExponentialBase The default base for the exponential function used to compute the delay between retries, must be positive. Default value: 2 . Declaration public static double DefaultExponentialBase Field Value Type Description Double | Improve this Doc View Source DefaultMaxDelay The default maximum time delay between retries, must be nonnegative. Default value: 30 seconds. Declaration public static TimeSpan DefaultMaxDelay Field Value Type Description TimeSpan | Improve this Doc View Source DefaultMaxRetryCount The default number of retry attempts. Default value: 5 . Declaration public static int DefaultMaxRetryCount Field Value Type Description Int32 | Improve this Doc View Source DefaultRandomFactor The default maximum random factor, must not be lesser than 1. Default value: 1.1 . Declaration public static double DefaultRandomFactor Field Value Type Description Double | Improve this Doc View Source Factory Retry policy factory method, used to create retry policy for new DataConnection instance. If factory method is not set, retry policy is not used. Not set by default. Declaration public static Func<DataConnection, IRetryPolicy> Factory Field Value Type Description Func < DataConnection , IRetryPolicy > Properties | Improve this Doc View Source UseDefaultPolicy Status of use of default retry policy. Getter returns true if default retry policy used, and false if custom retry policy used or retry policy is not set. Setter sets Factory to default retry policy factory if value is true , otherwise removes retry policy. Declaration public static bool UseDefaultPolicy { get; set; } Property Value Type Description Boolean"
  },
  "api/LinqToDB.Common.Configuration.Linq.html": {
    "href": "api/LinqToDB.Common.Configuration.Linq.html",
    "title": "Class Configuration.Linq | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.Linq LINQ query settings. Inheritance Object Configuration.Linq Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Linq Fields | Improve this Doc View Source AllowMultipleQuery Controls behavior of linq2db when multiple queries required to load requested data: if true - multiple queries allowed; if false - LinqException will be thrown. This option required, if you want to select related collections, e.g. using LoadWith<T>(ITable<T>, Expression<Func<T, Object>>) method. Default value: false . Declaration public static bool AllowMultipleQuery Field Value Type Description Boolean | Improve this Doc View Source CompareNullsAsValues If set to true nullable fields would be checked for IS NULL in Equal/NotEqual comparasions. This affects: Equal, NotEqual, Not Contains Default value: true . Declaration public static bool CompareNullsAsValues Field Value Type Description Boolean Examples public class MyEntity { public int? Value; } db.MyEntity.Where(e => e.Value != 10) from e1 in db.MyEntity join e2 in db.MyEntity on e1.Value equals e2.Value select e1 var filter = new [] {1, 2, 3}; db.MyEntity.Where(e => ! filter.Contains(e.Value)) Would be converted to next queries: SELECT Value FROM MyEntity WHERE Value IS NULL OR Value != 10 SELECT e1.Value FROM MyEntity e1 INNER JOIN MyEntity e2 ON e1.Value = e2.Value OR (e1.Value IS NULL AND e2.Value IS NULL) SELECT Value FROM MyEntity WHERE Value IS NULL OR NOT Value IN (1, 2, 3) | Improve this Doc View Source DisableQueryCache Used to disable LINQ expressions caching for queries. This cache reduces time, required for query parsing but have several side-effects: cached LINQ expressions could contain references to external objects as parameters, which could lead to memory leaks if those objects are not used anymore by other code cache access synchronization could lead to bigger latencies than it saves. Default value: false . It is not recommended to enable this option as it could lead to severe slowdown. Better approach will be to call LinqToDB.Linq.Query`1.ClearCache method to cleanup cache after queries, that produce severe memory leaks you need to fix. More details . Declaration public static bool DisableQueryCache Field Value Type Description Boolean | Improve this Doc View Source DoNotClearOrderBys Controls behavior, when LINQ query chain contains multiple OrderBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) or OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) calls: if true - non-first OrderBy* call will be treated as ThenBy* call; if false - OrdredBy* call will discard sort specifications, added by previous OrderBy* and ThenBy* calls. Default value: false . Declaration public static bool DoNotClearOrderBys Field Value Type Description Boolean | Improve this Doc View Source GenerateExpressionTest Enables generation of test class for each LINQ query, executed while this option is enabled. This option could be usefull for issue reporting, when you need to provide reproduceable case. Test file will be placed to linq2db subfolder of temp folder and exact file path will be logged to data connection tracing infrastructure. See TraceSwitch for more details. Default value: false . Declaration public static bool GenerateExpressionTest Field Value Type Description Boolean | Improve this Doc View Source GuardGrouping Controls behavior of LINQ query, which ends with GroupBy call. if true - LinqToDBException will be thrown for such queries; if false - behavior is controlled by PreloadGroups option. Default value: false . Declaration public static bool GuardGrouping Field Value Type Description Boolean Remarks More details . | Improve this Doc View Source IgnoreEmptyUpdate Controls behavior of linq2db when there is no updateable fields in Update query: if true - query not executed and Update operation returns 0 as number of affected records; if false - LinqException will be thrown. Default value: false . Declaration public static bool IgnoreEmptyUpdate Field Value Type Description Boolean | Improve this Doc View Source KeepDistinctOrdered Allows SQL generation to automatically transform SELECT DICTINCT value FROM Table ORDER BY date Into GROUP BY equivalent if syntax is not supported Declaration public static bool KeepDistinctOrdered Field Value Type Description Boolean | Improve this Doc View Source OptimizeJoins If enabled, linq2db will try to reduce number of generated SQL JOINs for LINQ query. Attempted optimizations: removes duplicate joins by unique target table key; removes self-joins by unique key; removes left joins if joined table is not used in query. Default value: true . Declaration public static bool OptimizeJoins Field Value Type Description Boolean | Improve this Doc View Source PreferApply Used to generate CROSS APPLY or OUTER APPLY if possible. Declaration public static bool PreferApply Field Value Type Description Boolean | Improve this Doc View Source PreloadGroups Controls how group data for LINQ queries ended with GroupBy will be loaded: if true - group data will be loaded together with main query, resulting in 1 + N queries, where N - number of groups; if false - group data will be loaded when you call enumerator for specific group IGrouping<TKey, TElement> . Default value: false . Declaration public static bool PreloadGroups Field Value Type Description Boolean | Improve this Doc View Source TraceMapperExpression Enables logging of generated mapping expression to data connection tracing infrastructure. See TraceSwitch for more details. Default value: false . Declaration public static bool TraceMapperExpression Field Value Type Description Boolean | Improve this Doc View Source UseBinaryAggregateExpression Used to optimize huge logical operations with large number of operands like expr1.and.axpr2...and.exprN into balanced tree. Without this option, such conditions could lead to StackOverflowException . Default value: false . Declaration public static bool UseBinaryAggregateExpression Field Value Type Description Boolean"
  },
  "api/LinqToDB.Common.Array-1.html": {
    "href": "api/LinqToDB.Common.Array-1.html",
    "title": "Class Array<T> | Linq To DB (aka linq2db)",
    "keywords": "Class Array<T> Empty array instance helper. Inheritance Object Array<T> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Array<T> Type Parameters Name Description T Aray element type. Fields | Improve this Doc View Source Empty Static instance of empty array of specific type. Declaration public static readonly T[] Empty Field Value Type Description T[]"
  },
  "api/LinqToDB.SqlQuery.ConditionBase-2.Not_.html": {
    "href": "api/LinqToDB.SqlQuery.ConditionBase-2.Not_.html",
    "title": "Class ConditionBase<T1, T2>.Not_ | Linq To DB (aka linq2db)",
    "keywords": "Class ConditionBase<T1, T2>.Not_ Inheritance Object ConditionBase<T1, T2>.Not_ Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Not_ : IConditionExpr<ConditionBase<T1, T2>.Expr_> Methods | Improve this Doc View Source Exists(SelectQuery) Declaration public T2 Exists(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Expr(ISqlExpression) Declaration public ConditionBase<T1, T2>.Expr_ Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source Field(SqlField) Declaration public ConditionBase<T1, T2>.Expr_ Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source SubQuery(SelectQuery) Declaration public ConditionBase<T1, T2>.Expr_ SubQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source Value(Object) Declaration public ConditionBase<T1, T2>.Expr_ Value(object value) Parameters Type Name Description Object value Returns Type Description ConditionBase.Expr_ <> Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ConditionBase-2.Expr_.html": {
    "href": "api/LinqToDB.SqlQuery.ConditionBase-2.Expr_.html",
    "title": "Class ConditionBase<T1, T2>.Expr_ | Linq To DB (aka linq2db)",
    "keywords": "Class ConditionBase<T1, T2>.Expr_ Inheritance Object ConditionBase<T1, T2>.Expr_ Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Expr_ Properties | Improve this Doc View Source Equal Declaration public ConditionBase<T1, T2>.Expr_.Op_ Equal { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source Greater Declaration public ConditionBase<T1, T2>.Expr_.Op_ Greater { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source GreaterOrEqual Declaration public ConditionBase<T1, T2>.Expr_.Op_ GreaterOrEqual { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source IsNotNull Declaration public T2 IsNotNull { get; } Property Value Type Description T2 | Improve this Doc View Source IsNull Declaration public T2 IsNull { get; } Property Value Type Description T2 | Improve this Doc View Source Less Declaration public ConditionBase<T1, T2>.Expr_.Op_ Less { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source LessOrEqual Declaration public ConditionBase<T1, T2>.Expr_.Op_ LessOrEqual { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source NotEqual Declaration public ConditionBase<T1, T2>.Expr_.Op_ NotEqual { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source NotGreater Declaration public ConditionBase<T1, T2>.Expr_.Op_ NotGreater { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source NotLess Declaration public ConditionBase<T1, T2>.Expr_.Op_ NotLess { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> Methods | Improve this Doc View Source Between(ISqlExpression, ISqlExpression) Declaration public T2 Between(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description T2 | Improve this Doc View Source In(SelectQuery) Declaration public T2 In(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source In(Object[]) Declaration public T2 In(params object[] exprs) Parameters Type Name Description Object [] exprs Returns Type Description T2 | Improve this Doc View Source Like(ISqlExpression) Declaration public T2 Like(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description T2 | Improve this Doc View Source Like(ISqlExpression, SqlValue) Declaration public T2 Like(ISqlExpression expression, SqlValue escape) Parameters Type Name Description ISqlExpression expression SqlValue escape Returns Type Description T2 | Improve this Doc View Source Like(String) Declaration public T2 Like(string expression) Parameters Type Name Description String expression Returns Type Description T2 | Improve this Doc View Source Like(String, SqlValue) Declaration public T2 Like(string expression, SqlValue escape) Parameters Type Name Description String expression SqlValue escape Returns Type Description T2 | Improve this Doc View Source NotBetween(ISqlExpression, ISqlExpression) Declaration public T2 NotBetween(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description T2 | Improve this Doc View Source NotIn(SelectQuery) Declaration public T2 NotIn(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source NotIn(Object[]) Declaration public T2 NotIn(params object[] exprs) Parameters Type Name Description Object [] exprs Returns Type Description T2 Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ConditionBase-2.Expr_.Op_.html": {
    "href": "api/LinqToDB.SqlQuery.ConditionBase-2.Expr_.Op_.html",
    "title": "Class ConditionBase<T1, T2>.Expr_.Op_ | Linq To DB (aka linq2db)",
    "keywords": "Class ConditionBase<T1, T2>.Expr_.Op_ Inheritance Object ConditionBase<T1, T2>.Expr_.Op_ Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Op_ : IConditionExpr<T2> Methods | Improve this Doc View Source All(SelectQuery) Declaration public T2 All(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Any(SelectQuery) Declaration public T2 Any(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Expr(ISqlExpression) Declaration public T2 Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description T2 | Improve this Doc View Source Field(SqlField) Declaration public T2 Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description T2 | Improve this Doc View Source Some(SelectQuery) Declaration public T2 Some(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source SubQuery(SelectQuery) Declaration public T2 SubQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description T2 | Improve this Doc View Source Value(Object) Declaration public T2 Value(object value) Parameters Type Name Description Object value Returns Type Description T2 Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode.html",
    "title": "Enum DB2IdentifierQuoteMode | Linq To DB (aka linq2db)",
    "keywords": "Enum DB2IdentifierQuoteMode Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public enum DB2IdentifierQuoteMode Fields Name Description Auto None Quote Extension Methods Sql.Between<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode) Sql.NotBetween<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode) SqlExtensions.In<DB2IdentifierQuoteMode>(IEnumerable<DB2IdentifierQuoteMode>) SqlExtensions.In<DB2IdentifierQuoteMode>(IQueryable<DB2IdentifierQuoteMode>) SqlExtensions.In<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode[]) SqlExtensions.In<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode) SqlExtensions.In<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode, DB2IdentifierQuoteMode) SqlExtensions.NotIn<DB2IdentifierQuoteMode>(IEnumerable<DB2IdentifierQuoteMode>) SqlExtensions.NotIn<DB2IdentifierQuoteMode>(IQueryable<DB2IdentifierQuoteMode>) SqlExtensions.NotIn<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode[]) SqlExtensions.NotIn<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode) SqlExtensions.NotIn<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode, DB2IdentifierQuoteMode)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2DataProvider.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2DataProvider.html",
    "title": "Class DB2DataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class DB2DataProvider Inheritance Object DataProviderBase DynamicDataProviderBase DB2DataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase.SyncRoot DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, Type, String) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.SetParameterType(IDbDataParameter, DataType) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2DataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source DB2DataProvider(String, DB2Version) Declaration public DB2DataProvider(string name, DB2Version version) Parameters Type Name Description String name DB2Version version Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description String Overrides DynamicDataProviderBase.DataReaderTypeName | Improve this Doc View Source MappingSchema Declaration public override MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Overrides DataProviderBase.MappingSchema | Improve this Doc View Source Version Declaration public DB2Version Version { get; } Property Value Type Description DB2Version Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Declaration protected override BasicMergeBuilder<TTarget, TSource> GetMergeBuilder<TTarget, TSource>(DataConnection connection, IMergeable<TTarget, TSource> merge) where TTarget : class where TSource : class Parameters Type Name Description DataConnection connection IMergeable <TTarget, TSource> merge Returns Type Description BasicMergeBuilder <TTarget, TSource> Type Parameters Name Description TTarget TSource Overrides LinqToDB.DataProvider.DataProviderBase.GetMergeBuilder<TTarget, TSource>(LinqToDB.Data.DataConnection, LinqToDB.IMergeable<TTarget, TSource>) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[]) Declaration public override void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection CommandType commandType String commandText DataParameter [] parameters Overrides DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public override int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName Returns Type Description Int32 Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.Merge<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String) | Improve this Doc View Source MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) Declaration public override Task<int> MergeAsync<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName, CancellationToken token) where T : class Parameters Type Name Description DataConnection dataConnection Expression < Func <T, Boolean >> deletePredicate Boolean delete IEnumerable <T> source String tableName String databaseName String schemaName CancellationToken token Returns Type Description Task < Int32 > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.MergeAsync<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String, System.Threading.CancellationToken) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description IDbDataParameter parameter String name DataType dataType Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Access.AccessDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessDataProvider.html",
    "title": "Class AccessDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class AccessDataProvider Inheritance Object DataProviderBase AccessDataProvider Implements IDataProvider Inherited Members DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope() DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) DataProviderBase.MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String, CancellationToken) DataProviderBase.Merge<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) DataProviderBase.MergeAsync<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>, CancellationToken) DataProviderBase.GetMergeBuilder<TTarget, TSource>(DataConnection, IMergeable<TTarget, TSource>) Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public class AccessDataProvider : DataProviderBase, IDataProvider Constructors | Improve this Doc View Source AccessDataProvider() Declaration public AccessDataProvider() | Improve this Doc View Source AccessDataProvider(String, MappingSchema) Declaration protected AccessDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source DataReaderType Declaration public override Type DataReaderType { get; } Property Value Type Description Type Overrides DataProviderBase.DataReaderType Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected override IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description String connectionString Returns Type Description IDbConnection Overrides DataProviderBase.CreateConnectionInternal(String) | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description String databaseName Boolean deleteIfExists | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source DropDatabase(String) Declaration public void DropDatabase(string databaseName) Parameters Type Name Description String databaseName | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration public override bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description Boolean Overrides DataProviderBase.IsCompatibleConnection(IDbConnection) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType) Implements IDataProvider Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataExtensions.html": {
    "href": "api/LinqToDB.DataExtensions.html",
    "title": "Class DataExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class DataExtensions Data context extension methods. Inheritance Object DataExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class DataExtensions Methods | Improve this Doc View Source Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) Compiles the query. Declaration public static Func<TDc, TResult> Compile<TDc, TResult>(this IDataContext dataContext, Expression<Func<TDc, TResult>> query) where TDc : IDataContext Parameters Type Name Description IDataContext dataContext Data connection context. Expression < Func <TDc, TResult>> query The query expression to be compiled. Returns Type Description Func <TDc, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Type of data context parameter, passed to compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) Compiles the query with parameter. Declaration public static Func<TDc, TArg1, TResult> Compile<TDc, TArg1, TResult>(this IDataContext dataContext, Expression<Func<TDc, TArg1, TResult>> query) where TDc : IDataContext Parameters Type Name Description IDataContext dataContext Data connection context. Expression < Func <TDc, TArg1, TResult>> query The query expression to be compiled. Returns Type Description Func <TDc, TArg1, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Type of data context parameter, passed to compiled query. TArg1 Type of parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) Compiles the query with two parameters. Declaration public static Func<TDc, TArg1, TArg2, TResult> Compile<TDc, TArg1, TArg2, TResult>(this IDataContext dataContext, Expression<Func<TDc, TArg1, TArg2, TResult>> query) where TDc : IDataContext Parameters Type Name Description IDataContext dataContext Data connection context. Expression < Func <TDc, TArg1, TArg2, TResult>> query The query expression to be compiled. Returns Type Description Func <TDc, TArg1, TArg2, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) Compiles the query with three parameters. Declaration public static Func<TDc, TArg1, TArg2, TArg3, TResult> Compile<TDc, TArg1, TArg2, TArg3, TResult>(this IDataContext dataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>> query) where TDc : IDataContext Parameters Type Name Description IDataContext dataContext Data connection context. Expression < Func <TDc, TArg1, TArg2, TArg3, TResult>> query The query expression to be compiled. Returns Type Description Func <TDc, TArg1, TArg2, TArg3, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TArg3 Type of third parameter for compiled query. TResult Query result type. | Improve this Doc View Source CreateTable<T>(IDataContext, String, String, String, String, String, DefaultNullable) Creates new table in database for mapping class T . Information about table name, columns names and types is taken from mapping class. Declaration public static ITable<T> CreateTable<T>(this IDataContext dataContext, string tableName = null, string databaseName = null, string schemaName = null, string statementHeader = null, string statementFooter = null, DefaultNullable defaultNullable = DefaultNullable.None) Parameters Type Name Description IDataContext dataContext Database connection context. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. String statementHeader Optional replacement for \"CREATE TABLE table_name\" header. Header is a template with {0} parameter for table name. String statementFooter Optional SQL, appended to generated create table statement. DefaultNullable defaultNullable Defines how columns nullability flag should be generated: - Null - generate only NOT NULL for non-nullable fields. Missing nullability information treated as NULL by database. - NotNull - generate only NULL for nullable fields. Missing nullability information treated as NOT NULL by database. - None - explicitly generate NULL and NOT NULL for all columns. Default value: None . Returns Type Description ITable <T> Created table as queryable source. Type Parameters Name Description T Mapping class. | Improve this Doc View Source CreateTableAsync<T>(IDataContext, String, String, String, String, String, DefaultNullable, CancellationToken) Asynchronously creates new table in database for mapping class T . Information about table name, columns names and types is taken from mapping class. Declaration public static Task<ITable<T>> CreateTableAsync<T>(this IDataContext dataContext, string tableName = null, string databaseName = null, string schemaName = null, string statementHeader = null, string statementFooter = null, DefaultNullable defaultNullable = DefaultNullable.None, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IDataContext dataContext Database connection context. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. String statementHeader Optional replacement for \"CREATE TABLE table_name\" header. Header is a template with {0} parameter for table name. String statementFooter Optional SQL, appended to generated create table statement. DefaultNullable defaultNullable Defines how columns nullability flag should be generated: - Null - generate only NOT NULL for non-nullable fields. Missing nullability information treated as NULL by database. - NotNull - generate only NULL for nullable fields. Missing nullability information treated as NOT NULL by database. - None - explicitly generate NULL and NOT NULL for all columns. Default value: None . CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < ITable <T>> Created table as queryable source. Type Parameters Name Description T Mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, IEnumerable<T>, BulkCopyOptions, String, String, String) Creates new temporary table and populate it using BulkCopy. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, IEnumerable<T> items, BulkCopyOptions options = null, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext db Database connection instance. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. String tableName Optional name of temporary table. If not specified, value from mapping will be used. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, String, Action<ITable<T>>) Creates new temporary table and populate it using data from provided query. Table mapping could be changed using fluent mapper. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, IQueryable<T> items, Action<EntityMappingBuilder<T>> setTable, string tableName = null, string databaseName = null, string schemaName = null, Action<ITable<T>> action = null) Parameters Type Name Description IDataContext db Database connection instance. IQueryable <T> items Query to get records to populate created table with initial data. Action < EntityMappingBuilder <T>> setTable Action to modify T entity's mapping using fluent mapping. String tableName Optional name of temporary table. If not specified, value from mapping will be used. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. Action < ITable <T>> action Optional action that will be executed after table creation but before it populated with data from items . Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, IQueryable<T>, String, String, String, Action<ITable<T>>) Creates new temporary table and populate it using data from provided query. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, IQueryable<T> items, string tableName = null, string databaseName = null, string schemaName = null, Action<ITable<T>> action = null) Parameters Type Name Description IDataContext db Database connection instance. IQueryable <T> items Query to get records to populate created table with initial data. String tableName Optional name of temporary table. If not specified, value from mapping will be used. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. Action < ITable <T>> action Optional action that will be executed after table creation but before it populated with data from items . Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, String, IEnumerable<T>, BulkCopyOptions, String, String) Creates new temporary table and populate it using BulkCopy. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, string tableName, IEnumerable<T> items, BulkCopyOptions options = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext db Database connection instance. String tableName Optional name of temporary table. If not specified, value from mapping will be used. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, String, IQueryable<T>, Action<EntityMappingBuilder<T>>, String, String, Action<ITable<T>>) Creates new temporary table and populate it using data from provided query. Table mapping could be changed using fluent mapper. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, string tableName, IQueryable<T> items, Action<EntityMappingBuilder<T>> setTable, string databaseName = null, string schemaName = null, Action<ITable<T>> action = null) Parameters Type Name Description IDataContext db Database connection instance. String tableName Optional name of temporary table. If not specified, value from mapping will be used. IQueryable <T> items Query to get records to populate created table with initial data. Action < EntityMappingBuilder <T>> setTable Action to modify T entity's mapping using fluent mapping. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. Action < ITable <T>> action Optional action that will be executed after table creation but before it populated with data from items . Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, String, IQueryable<T>, String, String, Action<ITable<T>>) Creates new temporary table and populate it using data from provided query. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, string tableName, IQueryable<T> items, string databaseName = null, string schemaName = null, Action<ITable<T>> action = null) Parameters Type Name Description IDataContext db Database connection instance. String tableName Optional name of temporary table. If not specified, value from mapping will be used. IQueryable <T> items Query to get records to populate created table with initial data. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. Action < ITable <T>> action Optional action that will be executed after table creation but before it populated with data from items . Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, String, String, String) Creates new temporary table. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext db Database connection instance. String tableName Optional name of temporary table. If not specified, value from mapping will be used. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source Delete<T>(IDataContext, T, String, String, String) Deletes record in table, identified by T mapping class. Record to delete identified by match on primary key value from obj value. Declaration public static int Delete<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data for delete operation. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Returns Type Description Int32 Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source DeleteAsync<T>(IDataContext, T, String, String, String, CancellationToken) Asynchronously deletes record in table, identified by T mapping class. Record to delete identified by match on primary key value from obj value. Declaration public static Task<int> DeleteAsync<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data for delete operation. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source DropTable<T>(IDataContext, String, String, String, Boolean) Drops table identified by mapping class T . Declaration public static void DropTable<T>(this IDataContext dataContext, string tableName = null, string databaseName = null, string schemaName = null, bool throwExceptionIfNotExists = true) Parameters Type Name Description IDataContext dataContext Database connection context. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Boolean throwExceptionIfNotExists If false , any exception during drop operation will be silently catched and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . Type Parameters Name Description T Mapping class. | Improve this Doc View Source DropTable<T>(ITable<T>, String, String, String, Boolean) Drops table identified by table parameter. Declaration public static void DropTable<T>(this ITable<T> table, string tableName = null, string databaseName = null, string schemaName = null, bool throwExceptionIfNotExists = true) Parameters Type Name Description ITable <T> table Dropped table. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Boolean throwExceptionIfNotExists If false , any exception during drop operation will be silently catched and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . Type Parameters Name Description T Mapping class. | Improve this Doc View Source DropTableAsync<T>(IDataContext, String, String, String, Boolean, CancellationToken) Asynchronously drops table identified by mapping class T . Declaration public static Task DropTableAsync<T>(this IDataContext dataContext, string tableName = null, string databaseName = null, string schemaName = null, bool throwExceptionIfNotExists = true, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IDataContext dataContext Database connection context. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Boolean throwExceptionIfNotExists If false , any exception during drop operation will be silently catched and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. Type Parameters Name Description T Mapping class. | Improve this Doc View Source DropTableAsync<T>(ITable<T>, String, String, String, Boolean, CancellationToken) Asynchronously drops table identified by table parameter. Declaration public static Task DropTableAsync<T>(this ITable<T> table, string tableName = null, string databaseName = null, string schemaName = null, bool throwExceptionIfNotExists = true, CancellationToken token = default(CancellationToken)) Parameters Type Name Description ITable <T> table Dropped table. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Boolean throwExceptionIfNotExists If false , any exception during drop operation will be silently catched and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. Type Parameters Name Description T Mapping class. | Improve this Doc View Source GetCte<T>(IDataContext, Func<IQueryable<T>, IQueryable<T>>, String) Helps to define a recursive CTE. Declaration public static IQueryable<T> GetCte<T>(this IDataContext dataContext, Func<IQueryable<T>, IQueryable<T>> cteBody, string cteTableName = null) Parameters Type Name Description IDataContext dataContext Database connection context. Func < IQueryable <T>, IQueryable <T>> cteBody Recursive query body. String cteTableName Common table expression name. Returns Type Description IQueryable <T> Common table expression. Type Parameters Name Description T Source query record type. | Improve this Doc View Source GetCte<T>(IDataContext, String, Func<IQueryable<T>, IQueryable<T>>) Helps to define a recursive CTE. Declaration public static IQueryable<T> GetCte<T>(this IDataContext dataContext, string cteTableName, Func<IQueryable<T>, IQueryable<T>> cteBody) Parameters Type Name Description IDataContext dataContext Database connection context. String cteTableName Common table expression name. Func < IQueryable <T>, IQueryable <T>> cteBody Recursive query body. Returns Type Description IQueryable <T> Common table expression. Type Parameters Name Description T Source query record type. | Improve this Doc View Source GetTable<T>(IDataContext) Returns queryable source for specified mapping class for current connection, mapped to database table or view. Declaration public static ITable<T> GetTable<T>(this IDataContext dataContext) where T : class Parameters Type Name Description IDataContext dataContext Data connection context. Returns Type Description ITable <T> Queryable source. Type Parameters Name Description T Mapping class type. | Improve this Doc View Source GetTable<T>(IDataContext, Object, MethodInfo, Object[]) Returns queryable source for specified mapping class for current connection, mapped to table expression or function. It could be used e.g. for queries to table-valued functions or to decorate queried table with hints. Declaration public static ITable<T> GetTable<T>(this IDataContext dataContext, object instance, MethodInfo methodInfo, params object[] parameters) where T : class Parameters Type Name Description IDataContext dataContext Data connection context. Object instance Instance object for methodInfo method or null for static method. MethodInfo methodInfo Method, decorated with expression attribute, based on Sql.TableFunctionAttribute . Object [] parameters Parameters for methodInfo method. Returns Type Description ITable <T> Queryable source. Type Parameters Name Description T Mapping class type. | Improve this Doc View Source Insert<T>(IDataContext, T, String, String, String) Inserts record into table, identified by T mapping class, using values from obj parameter. Declaration public static int Insert<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Returns Type Description Int32 Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertAsync<T>(IDataContext, T, String, String, String, CancellationToken) Inserts record asynchronously into table, identified by T mapping class, using values from obj parameter. Declaration public static Task<int> InsertAsync<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertOrReplace<T>(IDataContext, T, String, String, String) Inserts new record into table, identified by T mapping class, using values from obj parameter or update exising record, identified by match on primary key value. Declaration public static int InsertOrReplace<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert or update. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Returns Type Description Int32 Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertOrReplaceAsync<T>(IDataContext, T, String, String, String, CancellationToken) Asynchronously inserts new record into table, identified by T mapping class, using values from obj parameter or update exising record, identified by match on primary key value. Declaration public static Task<int> InsertOrReplaceAsync<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert or update. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithDecimalIdentity<T>(IDataContext, T, String, String, String) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as Decimal value. Declaration public static decimal InsertWithDecimalIdentity<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Returns Type Description Decimal Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithDecimalIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as Decimal value. Declaration public static Task<decimal> InsertWithDecimalIdentityAsync<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Decimal > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithIdentity<T>(IDataContext, T, String, String, String) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record. Declaration public static object InsertWithIdentity<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Returns Type Description Object Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithIdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record. Declaration public static Task<object> InsertWithIdentityAsync<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Object > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt32Identity<T>(IDataContext, T, String, String, String) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as Int32 value. Declaration public static int InsertWithInt32Identity<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Returns Type Description Int32 Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt32IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as Int32 value. Declaration public static Task<int> InsertWithInt32IdentityAsync<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt64Identity<T>(IDataContext, T, String, String, String) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as Int64 value. Declaration public static long InsertWithInt64Identity<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Returns Type Description Int64 Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt64IdentityAsync<T>(IDataContext, T, String, String, String, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as Int64 value. Declaration public static Task<long> InsertWithInt64IdentityAsync<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int64 > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source Update<T>(IDataContext, T, String, String, String) Updates record in table, identified by T mapping class, using values from obj parameter. Record to update identified by match on primary key value from obj value. Declaration public static int Update<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to update. String tableName Optional table name to override default table name, extracted from T mapping. String databaseName Optional database name, to override default database name. See DatabaseName<T>(ITable<T>, String) method for support information per provider. String schemaName Optional schema/owner name, to override default name. See SchemaName<T>(ITable<T>, String) method for support information per provider. Returns Type Description Int32 Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source UpdateAsync<T>(IDataContext, T, String, String, String, CancellationToken) Asynchronously updates record in table, identified by T mapping class, using values from obj parameter. Record to update identified by match on primary key value from obj value. Declaration public static Task<int> UpdateAsync<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to update. String tableName Name of the table String databaseName Name of the database String schemaName Name of the schema CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Int32 > Number of affected records. Type Parameters Name Description T Mapping class."
  },
  "api/LinqToDB.Data.TraceInfo.html": {
    "href": "api/LinqToDB.Data.TraceInfo.html",
    "title": "Class TraceInfo | Linq To DB (aka linq2db)",
    "keywords": "Class TraceInfo Inheritance Object TraceInfo Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class TraceInfo Constructors | Improve this Doc View Source TraceInfo(TraceInfoStep) Declaration public TraceInfo(TraceInfoStep traceInfoStep) Parameters Type Name Description TraceInfoStep traceInfoStep Properties | Improve this Doc View Source BeforeExecute Declaration [Obsolete(\"Use TraceInfoStep instead.\")] public bool BeforeExecute { get; } Property Value Type Description Boolean | Improve this Doc View Source Command Declaration public IDbCommand Command { get; set; } Property Value Type Description IDbCommand | Improve this Doc View Source CommandText Declaration public string CommandText { get; set; } Property Value Type Description String | Improve this Doc View Source DataConnection Declaration public DataConnection DataConnection { get; set; } Property Value Type Description DataConnection | Improve this Doc View Source Exception Declaration public Exception Exception { get; set; } Property Value Type Description Exception | Improve this Doc View Source ExecutionTime Declaration public TimeSpan? ExecutionTime { get; set; } Property Value Type Description Nullable < TimeSpan > | Improve this Doc View Source IsAsync Declaration public bool IsAsync { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MapperExpression Declaration public Expression MapperExpression { get; set; } Property Value Type Description Expression | Improve this Doc View Source RecordsAffected Declaration public int? RecordsAffected { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description String | Improve this Doc View Source TraceInfoStep Declaration public TraceInfoStep TraceInfoStep { get; } Property Value Type Description TraceInfoStep | Improve this Doc View Source TraceLevel Declaration public TraceLevel TraceLevel { get; set; } Property Value Type Description TraceLevel Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.RetryPolicy.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.html",
    "title": "Namespace LinqToDB.Data.RetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Data.RetryPolicy Classes RetryLimitExceededException RetryPolicyBase Interfaces IRetryPolicy"
  },
  "api/LinqToDB.Data.BulkCopyType.html": {
    "href": "api/LinqToDB.Data.BulkCopyType.html",
    "title": "Enum BulkCopyType | Linq To DB (aka linq2db)",
    "keywords": "Enum BulkCopyType Bulk copy implementation type. For more details on support level by provider see this article . Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public enum BulkCopyType Fields Name Description Default LINQ To DB will select copy method based on current provider. Default method usually set at [PROVIDER_NAME_HERE]Tools.DefaultBulkCopyType. MultipleRows Data will be inserted into table as a batch insert using INSERT FROM SELECT or similar code. If method not supported, it will be downgraded to RowByRow method. ProviderSpecific Data will be inserted using native bulk copy functionality if supported. If method not supported, it will be downgraded to RowByRow method. RowByRow Data will be inserted into table as a sequence of selects, row by row. Extension Methods Sql.Between<BulkCopyType>(BulkCopyType, BulkCopyType) Sql.NotBetween<BulkCopyType>(BulkCopyType, BulkCopyType) SqlExtensions.In<BulkCopyType>(IEnumerable<BulkCopyType>) SqlExtensions.In<BulkCopyType>(IQueryable<BulkCopyType>) SqlExtensions.In<BulkCopyType>(BulkCopyType[]) SqlExtensions.In<BulkCopyType>(BulkCopyType, BulkCopyType) SqlExtensions.In<BulkCopyType>(BulkCopyType, BulkCopyType, BulkCopyType) SqlExtensions.NotIn<BulkCopyType>(IEnumerable<BulkCopyType>) SqlExtensions.NotIn<BulkCopyType>(IQueryable<BulkCopyType>) SqlExtensions.NotIn<BulkCopyType>(BulkCopyType[]) SqlExtensions.NotIn<BulkCopyType>(BulkCopyType, BulkCopyType) SqlExtensions.NotIn<BulkCopyType>(BulkCopyType, BulkCopyType, BulkCopyType)"
  },
  "api/LinqToDB.Data.BulkCopyRowsCopied.html": {
    "href": "api/LinqToDB.Data.BulkCopyRowsCopied.html",
    "title": "Class BulkCopyRowsCopied | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyRowsCopied Inheritance Object BulkCopyRowsCopied Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class BulkCopyRowsCopied Properties | Improve this Doc View Source Abort Gets or sets a value that indicates whether the bulk copy operation should be aborted. Declaration public bool Abort { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RowsCopied Gets a value that returns the number of rows copied during the current bulk copy operation. Declaration public long RowsCopied { get; set; } Property Value Type Description Int64 | Improve this Doc View Source StartTime Gets operation execution start time. Declaration public DateTime StartTime { get; } Property Value Type Description DateTime Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.NamedValue.html": {
    "href": "api/LinqToDB.Configuration.NamedValue.html",
    "title": "Class NamedValue | Linq To DB (aka linq2db)",
    "keywords": "Class NamedValue Name-value pair. Inheritance Object NamedValue Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public class NamedValue Properties | Improve this Doc View Source Name Gets or sets name for value. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Value Gets ot sets value. Declaration public string Value { get; set; } Property Value Type Description String Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.LinqToDBSection.html": {
    "href": "api/LinqToDB.Configuration.LinqToDBSection.html",
    "title": "Class LinqToDBSection | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBSection Implementation of custom configuration section. Inheritance Object ConfigurationElement ConfigurationSection LinqToDBSection Implements ILinqToDBSettings Inherited Members ConfigurationSection.GetRuntimeObject() ConfigurationSection.IsModified() ConfigurationSection.ResetModified() ConfigurationSection.DeserializeSection(XmlReader) ConfigurationSection.SerializeSection(ConfigurationElement, String, ConfigurationSaveMode) ConfigurationSection.ShouldSerializePropertyInTargetVersion(ConfigurationProperty, String, FrameworkName, ConfigurationElement) ConfigurationSection.ShouldSerializeElementInTargetVersion(ConfigurationElement, String, FrameworkName) ConfigurationSection.ShouldSerializeSectionInTargetVersion(FrameworkName) ConfigurationSection.SectionInformation ConfigurationElement.Init() ConfigurationElement.IsReadOnly() ConfigurationElement.SetReadOnly() ConfigurationElement.ListErrors(IList) ConfigurationElement.InitializeDefault() ConfigurationElement.Reset(ConfigurationElement) ConfigurationElement.Equals(Object) ConfigurationElement.GetHashCode() ConfigurationElement.SetPropertyValue(ConfigurationProperty, Object, Boolean) ConfigurationElement.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) ConfigurationElement.SerializeToXmlElement(XmlWriter, String) ConfigurationElement.SerializeElement(XmlWriter, Boolean) ConfigurationElement.DeserializeElement(XmlReader, Boolean) ConfigurationElement.OnRequiredPropertyNotFound(String) ConfigurationElement.PostDeserialize() ConfigurationElement.PreSerialize(XmlWriter) ConfigurationElement.OnDeserializeUnrecognizedAttribute(String, String) ConfigurationElement.OnDeserializeUnrecognizedElement(String, XmlReader) ConfigurationElement.GetTransformedTypeString(String) ConfigurationElement.GetTransformedAssemblyString(String) ConfigurationElement.LockAttributes ConfigurationElement.LockAllAttributesExcept ConfigurationElement.LockElements ConfigurationElement.LockAllElementsExcept ConfigurationElement.LockItem ConfigurationElement.Item[ConfigurationProperty] ConfigurationElement.Item[String] ConfigurationElement.ElementInformation ConfigurationElement.EvaluationContext ConfigurationElement.ElementProperty ConfigurationElement.HasContext ConfigurationElement.CurrentConfiguration Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public class LinqToDBSection : ConfigurationSection, ILinqToDBSettings Properties | Improve this Doc View Source DataProviders Gets list of data providers configuration elements. Declaration public DataProviderElementCollection DataProviders { get; } Property Value Type Description DataProviderElementCollection | Improve this Doc View Source DefaultConfiguration Gets default connection configuration name. Declaration public string DefaultConfiguration { get; } Property Value Type Description String | Improve this Doc View Source DefaultDataProvider Gets default data provider configuration name. Declaration public string DefaultDataProvider { get; } Property Value Type Description String | Improve this Doc View Source Instance linq2db configuration section. Declaration public static LinqToDBSection Instance { get; } Property Value Type Description LinqToDBSection | Improve this Doc View Source Properties Declaration protected override ConfigurationPropertyCollection Properties { get; } Property Value Type Description ConfigurationPropertyCollection Overrides ConfigurationElement.Properties Explicit Interface Implementations | Improve this Doc View Source ILinqToDBSettings.ConnectionStrings Declaration IEnumerable<IConnectionStringSettings> ILinqToDBSettings.ConnectionStrings { get; } Returns Type Description IEnumerable < IConnectionStringSettings > | Improve this Doc View Source ILinqToDBSettings.DataProviders Declaration IEnumerable<IDataProviderSettings> ILinqToDBSettings.DataProviders { get; } Returns Type Description IEnumerable < IDataProviderSettings > Implements ILinqToDBSettings Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.AnalyticFunctions.html": {
    "href": "api/LinqToDB.AnalyticFunctions.html",
    "title": "Class AnalyticFunctions | Linq To DB (aka linq2db)",
    "keywords": "Class AnalyticFunctions Inheritance Object AnalyticFunctions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class AnalyticFunctions Methods | Improve this Doc View Source Average<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"AVG({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Average<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Average<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier) Declaration [Sql.Extension(\"AVG({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Average<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext Object expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Average<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration [Sql.Extension(\"AVG({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), IsAggregate = true)] public static double Average<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description Double Type Parameters Name Description TEntity TV | Improve this Doc View Source Average<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration [Sql.Extension(\"AVG({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), IsAggregate = true)] public static double Average<TEntity, TV>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description Double Type Parameters Name Description TEntity TV | Improve this Doc View Source Corr<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"CORR({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Corr<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext Object expr1 Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Corr<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) Declaration [Sql.Extension(\"CORR({expr1}, {expr2})\", IsAggregate = true)] public static decimal Corr<T>(this IEnumerable<T> source, [ExprParameter] Expression<Func<T, object>> expr1, [ExprParameter] Expression<Func<T, object>> expr2) Parameters Type Name Description IEnumerable <T> source Expression < Func <T, Object >> expr1 Expression < Func <T, Object >> expr2 Returns Type Description Decimal Type Parameters Name Description T | Improve this Doc View Source Corr<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) Declaration [Sql.Extension(\"CORR({expr1}, {expr2})\", IsAggregate = true)] public static decimal Corr<TEntity>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, object>> expr1, [ExprParameter] Expression<Func<TEntity, object>> expr2) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, Object >> expr1 Expression < Func <TEntity, Object >> expr2 Returns Type Description Decimal Type Parameters Name Description TEntity | Improve this Doc View Source Count(Sql.ISqlExtension) Declaration [Sql.Extension(\"COUNT(*)\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<long> Count(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained < Int64 > | Improve this Doc View Source Count(Sql.ISqlExtension, Object, Sql.AggregateModifier) Declaration [Sql.Extension(\"COUNT({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<long> Count(this Sql.ISqlExtension ext, [ExprParameter] object expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext Object expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained < Int64 > | Improve this Doc View Source Count<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"COUNT({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Count<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source CountExt<TEntity>(IEnumerable<TEntity>, Func<TEntity, Object>) Declaration [Sql.Extension(\"COUNT({expr})\", IsAggregate = true)] public static long CountExt<TEntity>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, object> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, Object > expr Returns Type Description Int64 Type Parameters Name Description TEntity | Improve this Doc View Source CountExt<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration [Sql.Extension(\"COUNT({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), IsAggregate = true)] public static long CountExt<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description Int64 Type Parameters Name Description TEntity TV | Improve this Doc View Source CountExt<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration [Sql.Extension(\"COUNT({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), IsAggregate = true)] public static long CountExt<TEntity, TV>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier = Sql.AggregateModifier.None) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description Int64 Type Parameters Name Description TEntity TV | Improve this Doc View Source CovarPop<T>(Sql.ISqlExtension, T, T) Declaration [Sql.Extension(\"COVAR_POP({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> CovarPop<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr1, [ExprParameter] T expr2) Parameters Type Name Description Sql.ISqlExtension ext T expr1 T expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source CovarPop<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) Declaration [Sql.Extension(\"COVAR_POP({expr1}, {expr2})\", IsAggregate = true)] public static decimal CovarPop<T>(this IEnumerable<T> source, [ExprParameter] Expression<Func<T, object>> expr1, [ExprParameter] Expression<Func<T, object>> expr2) Parameters Type Name Description IEnumerable <T> source Expression < Func <T, Object >> expr1 Expression < Func <T, Object >> expr2 Returns Type Description Decimal Type Parameters Name Description T | Improve this Doc View Source CovarPop<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) Declaration [Sql.Extension(\"COVAR_POP({expr1}, {expr2})\", IsAggregate = true)] public static decimal CovarPop<TEntity>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, object>> expr1, [ExprParameter] Expression<Func<TEntity, object>> expr2) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, Object >> expr1 Expression < Func <TEntity, Object >> expr2 Returns Type Description Decimal Type Parameters Name Description TEntity | Improve this Doc View Source CovarSamp<T>(Sql.ISqlExtension, T, T) Declaration [Sql.Extension(\"COVAR_SAMP({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> CovarSamp<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr1, [ExprParameter] T expr2) Parameters Type Name Description Sql.ISqlExtension ext T expr1 T expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source CovarSamp<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) Declaration [Sql.Extension(\"COVAR_SAMP({expr1}, {expr2})\", IsAggregate = true)] public static decimal CovarSamp<T>(this IEnumerable<T> source, [ExprParameter] Expression<Func<T, object>> expr1, [ExprParameter] Expression<Func<T, object>> expr2) Parameters Type Name Description IEnumerable <T> source Expression < Func <T, Object >> expr1 Expression < Func <T, Object >> expr2 Returns Type Description Decimal Type Parameters Name Description T | Improve this Doc View Source CovarSamp<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) Declaration [Sql.Extension(\"COVAR_SAMP({expr1}, {expr2})\", IsAggregate = true)] public static decimal CovarSamp<TEntity>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, object>> expr1, [ExprParameter] Expression<Func<TEntity, object>> expr2) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, Object >> expr1 Expression < Func <TEntity, Object >> expr2 Returns Type Description Decimal Type Parameters Name Description TEntity | Improve this Doc View Source CumeDist<TR>(Sql.ISqlExtension) Declaration [Sql.Extension(\"CUME_DIST()\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<TR> CumeDist<TR>(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <TR> Type Parameters Name Description TR | Improve this Doc View Source CumeDist<TR>(Sql.ISqlExtension, Object[]) Declaration [Sql.Extension(\"CUME_DIST({expr, ', '}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<TR> CumeDist<TR>(this Sql.ISqlExtension ext, [ExprParameter] params object[] expr) Parameters Type Name Description Sql.ISqlExtension ext Object [] expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly <TR> Type Parameters Name Description TR | Improve this Doc View Source DenseRank(Sql.ISqlExtension) Declaration [Sql.Extension(\"DENSE_RANK()\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<long> DenseRank(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow < Int64 > | Improve this Doc View Source DenseRank(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"DENSE_RANK({expr1}, {expr2}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<long> DenseRank(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext Object expr1 Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly < Int64 > | Improve this Doc View Source FirstValue<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration [Sql.Extension(\"FIRST_VALUE({expr}{_}{modifier?})\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyNullsModifier), ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> FirstValue<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source KeepFirst<TR>(AnalyticFunctions.IAggregateFunction<TR>) Declaration [Sql.Extension(\"{function} KEEP (DENSE_RANK FIRST {order_by_clause}){_}{over?}\", ChainPrecedence = 10, IsAggregate = true)] public static AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> KeepFirst<TR>(this AnalyticFunctions.IAggregateFunction<TR> ext) Parameters Type Name Description LinqToDB.AnalyticFunctions.IAggregateFunction <TR> ext Returns Type Description LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition <TR> Type Parameters Name Description TR | Improve this Doc View Source KeepLast<TR>(AnalyticFunctions.IAggregateFunction<TR>) Declaration [Sql.Extension(\"{function} KEEP (DENSE_RANK LAST {order_by_clause}){_}{over?}\", ChainPrecedence = 10, IsAggregate = true)] public static AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> KeepLast<TR>(this AnalyticFunctions.IAggregateFunction<TR> ext) Parameters Type Name Description LinqToDB.AnalyticFunctions.IAggregateFunction <TR> ext Returns Type Description LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition <TR> Type Parameters Name Description TR | Improve this Doc View Source Lag<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration [Sql.Extension(\"LAG({expr}{_}{modifier?})\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyNullsModifier), ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lag<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source Lag<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) Declaration [Sql.Extension(\"LAG({expr}{_}{modifier?}, {offset}, {default})\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyNullsModifier), ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lag<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls, [ExprParameter] int offset, [ExprParameter] int? default) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Int32 offset Nullable < Int32 > default Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source LastValue<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration [Sql.Extension(\"LAST_VALUE({expr}{_}{modifier?})\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyNullsModifier), ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> LastValue<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Lead<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration [Sql.Extension(\"LEAD({expr}{_}{modifier?})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lead<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source Lead<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) Declaration [Sql.Extension(\"LEAD({expr}{_}{modifier?}, {offset}, {default})\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyNullsModifier), ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lead<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls, [ExprParameter] int offset, [ExprParameter] int? default) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Int32 offset Nullable < Int32 > default Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source ListAgg<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"LISTAGG({expr}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<string> ListAgg<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition < String > Type Parameters Name Description T | Improve this Doc View Source ListAgg<T>(Sql.ISqlExtension, T, String) Declaration [Sql.Extension(\"LISTAGG({expr}, {delimiter}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<string> ListAgg<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, [ExprParameter] string delimiter) Parameters Type Name Description Sql.ISqlExtension ext T expr String delimiter Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition < String > Type Parameters Name Description T | Improve this Doc View Source Max<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"MAX({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Max<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Max<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) Declaration [Sql.Extension(\"MAX({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Max<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Max<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration [Sql.Extension(\"MAX({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), IsAggregate = true)] public static TV Max<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source Max<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration [Sql.Extension(\"MAX({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), IsAggregate = true)] public static TV Max<TEntity, TV>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source Median<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"MEDIAN({expr}) {over}\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IReadyToFunctionOrOverWithPartition<T> Median<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition <T> Type Parameters Name Description T | Improve this Doc View Source Median<TEntity, T>(IEnumerable<TEntity>, Func<TEntity, T>) Declaration [Sql.Extension(\"MEDIAN({expr})\", IsAggregate = true)] public static long Median<TEntity, T>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, T> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, T> expr Returns Type Description Int64 Type Parameters Name Description TEntity T | Improve this Doc View Source Median<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration [Sql.Extension(\"MEDIAN({expr})\", IsAggregate = true)] public static long Median<TEntity, TV>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description Int64 Type Parameters Name Description TEntity TV | Improve this Doc View Source Min<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"MIN({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Min<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Min<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) Declaration [Sql.Extension(\"MIN({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Min<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Min<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration [Sql.Extension(\"MIN({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), IsAggregate = true)] public static TV Min<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source Min<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration [Sql.Extension(\"MIN({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), IsAggregate = true)] public static TV Min<TEntity, TV>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source NthValue<T>(Sql.ISqlExtension, T, Int64) Declaration [Sql.Extension(\"NTH_VALUE({expr}, {n})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> NthValue<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, [ExprParameter] long n) Parameters Type Name Description Sql.ISqlExtension ext T expr Int64 n Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source NthValue<T>(Sql.ISqlExtension, T, Int64, Sql.From, Sql.Nulls) Declaration [Sql.Extension(\"NTH_VALUE({expr}, {n}){_}{from?}{_}{nulls?}\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyFromAndNullsModifier), ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> NthValue<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, [ExprParameter] long n, Sql.From from, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Int64 n Sql.From from Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source NTile<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"NTILE({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> NTile<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source PercentileCont<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"PERCENTILE_CONT({expr}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<T> PercentileCont<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext Object expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition <T> Type Parameters Name Description T | Improve this Doc View Source PercentileDisc<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"PERCENTILE_DISC({expr}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<T> PercentileDisc<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext Object expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition <T> Type Parameters Name Description T | Improve this Doc View Source PercentRank<T>(Sql.ISqlExtension) Declaration [Sql.Extension(\"PERCENT_RANK()\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> PercentRank<T>(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source PercentRank<T>(Sql.ISqlExtension, Object[]) Declaration [Sql.Extension(\"PERCENT_RANK({expr, ', '}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<T> PercentRank<T>(this Sql.ISqlExtension ext, [ExprParameter] params object[] expr) Parameters Type Name Description Sql.ISqlExtension ext Object [] expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly <T> Type Parameters Name Description T | Improve this Doc View Source Rank(Sql.ISqlExtension) Declaration [Sql.Extension(\"RANK()\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<long> Rank(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow < Int64 > | Improve this Doc View Source Rank(Sql.ISqlExtension, Object[]) Declaration [Sql.Extension(\"RANK({expr, ', '}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<long> Rank(this Sql.ISqlExtension ext, [ExprParameter] params object[] expr) Parameters Type Name Description Sql.ISqlExtension ext Object [] expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly < Int64 > | Improve this Doc View Source RatioToReport<TR>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"RATIO_TO_REPORT({expr}) {over}\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IOverWithPartitionNeeded<TR> RatioToReport<TR>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext Object expr Returns Type Description LinqToDB.AnalyticFunctions.IOverWithPartitionNeeded <TR> Type Parameters Name Description TR | Improve this Doc View Source RegrAvgX<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_AVGX({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrAvgX<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext Object expr1 Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrAvgY<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_AVGY({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrAvgY<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext Object expr1 Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrCount(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_COUNT({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<long> RegrCount(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext Object expr1 Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained < Int64 > | Improve this Doc View Source RegrIntercept<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_INTERCEPT({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrIntercept<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext Object expr1 Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrR2<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_R2({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrR2<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext Object expr1 Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrSlope<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_SLOPE({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSlope<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext Object expr1 Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrSXX<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_SXX({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSXX<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext Object expr1 Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrSXY<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_SXY({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSXY<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext Object expr1 Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrSYY<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_SYY({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSYY<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext Object expr1 Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RowNumber(Sql.ISqlExtension) Declaration [Sql.Extension(\"ROW_NUMBER()\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<long> RowNumber(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow < Int64 > | Improve this Doc View Source StdDev<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"STDEV({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] [Sql.Extension(\"Oracle\", \"STDDEV({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDev<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source StdDev<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier) Declaration [Sql.Extension(\"STDEV({modifier?}{_}{expr})\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), ChainPrecedence = 1, IsAggregate = true)] [Sql.Extension(\"Oracle\", \"STDDEV({modifier?}{_}{expr})\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDev<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext Object expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source StdDev<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration [Sql.Extension(\"STDEV({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] [Sql.Extension(\"Oracle\", \"STDDEV({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static double StdDev<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description Double Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDev<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration [Sql.Extension(\"STDEV({modifier?}{_}{expr})\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), ChainPrecedence = 1, IsAggregate = true)] [Sql.Extension(\"Oracle\", \"STDDEV({modifier?}{_}{expr})\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), ChainPrecedence = 1, IsAggregate = true)] public static double StdDev<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description Double Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDev<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration [Sql.Extension(\"STDEV({modifier?}{_}{expr})\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), ChainPrecedence = 1, IsAggregate = true)] [Sql.Extension(\"Oracle\", \"STDDEV({modifier?}{_}{expr})\", TokenName = \"function\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), ChainPrecedence = 1, IsAggregate = true)] public static double StdDev<TEntity, TV>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier = Sql.AggregateModifier.None) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description Double Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDevPop<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"STDDEV_POP({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDevPop<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source StdDevPop<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration [Sql.Extension(\"STDDEV_POP({expr})\", IsAggregate = true)] public static decimal StdDevPop<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDevPop<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration [Sql.Extension(\"STDDEV_POP({expr})\", IsAggregate = true)] public static decimal StdDevPop<TEntity, TV>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDevSamp<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"STDDEV_SAMP({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDevSamp<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source StdDevSamp<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration [Sql.Extension(\"STDDEV_SAMP({expr})\", IsAggregate = true)] public static decimal StdDevSamp<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDevSamp<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration [Sql.Extension(\"STDDEV_SAMP({expr})\", IsAggregate = true)] public static decimal StdDevSamp<TEntity, TV>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source Sum<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"SUM({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Sum<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Sum<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) Declaration [Sql.Extension(\"SUM({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Sum<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Variance<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"VARIANCE({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Variance<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Variance<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier) Declaration [Sql.Extension(\"VARIANCE({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Variance<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext Object expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Variance<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration [Sql.Extension(\"VARIANCE({expr})\", IsAggregate = true)] public static TV Variance<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source Variance<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration [Sql.Extension(\"VARIANCE({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), IsAggregate = true)] public static TV Variance<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source Variance<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration [Sql.Extension(\"VARIANCE({modifier?}{_}{expr})\", BuilderType = typeof(AnalyticFunctions.ApplyAggregateModifier), IsAggregate = true)] public static TV Variance<TEntity, TV>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier = Sql.AggregateModifier.None) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source VarPop<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"VAR_POP({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> VarPop<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source VarPop<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration [Sql.Extension(\"VAR_POP({expr})\", IsAggregate = true)] public static decimal VarPop<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source VarPop<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration [Sql.Extension(\"VAR_POP({expr})\", IsAggregate = true)] public static decimal VarPop<TEntity, TV>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source VarSamp<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"VAR_SAMP({expr})\", TokenName = \"function\", ChainPrecedence = 1, IsAggregate = true)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> VarSamp<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source VarSamp<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration [Sql.Extension(\"VAR_SAMP({expr})\", IsAggregate = true)] public static decimal VarSamp<TEntity, TV>(this IEnumerable<TEntity> source, [ExprParameter] Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source VarSamp<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration [Sql.Extension(\"VAR_SAMP({expr})\", IsAggregate = true)] public static decimal VarSamp<TEntity, TV>(this IQueryable<TEntity> source, [ExprParameter] Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description Decimal Type Parameters Name Description TEntity TV"
  },
  "api/LinqToDB.SqlQuery.SqlUpdateClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlUpdateClause.html",
    "title": "Class SqlUpdateClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlUpdateClause Inheritance Object SqlUpdateClause Implements IQueryElement ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlUpdateClause : IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlUpdateClause() Declaration public SqlUpdateClause() Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Items Declaration public List<SqlSetExpression> Items { get; } Property Value Type Description List < SqlSetExpression > | Improve this Doc View Source Keys Declaration public List<SqlSetExpression> Keys { get; } Property Value Type Description List < SqlSetExpression > | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlUnion.html": {
    "href": "api/LinqToDB.SqlQuery.SqlUnion.html",
    "title": "Class SqlUnion | Linq To DB (aka linq2db)",
    "keywords": "Class SqlUnion Inheritance Object SqlUnion Implements IQueryElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlUnion : IQueryElement Constructors | Improve this Doc View Source SqlUnion() Declaration public SqlUnion() | Improve this Doc View Source SqlUnion(SelectQuery, Boolean) Declaration public SqlUnion(SelectQuery selectQuery, bool isAll) Parameters Type Name Description SelectQuery selectQuery Boolean isAll Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsAll Declaration public bool IsAll { get; } Property Value Type Description Boolean | Improve this Doc View Source SelectQuery Declaration public SelectQuery SelectQuery { get; } Property Value Type Description SelectQuery Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements IQueryElement Extension Methods SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlTruncateTableStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTruncateTableStatement.html",
    "title": "Class SqlTruncateTableStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlTruncateTableStatement Inheritance Object SqlStatement SqlTruncateTableStatement Implements IQueryElement ISqlExpressionWalkable ICloneableElement Inherited Members SqlStatement.SqlText SqlStatement.Parameters SqlStatement.ProcessParameters(MappingSchema) SqlStatement.CollectParameters() SqlStatement.EnumClauses() SqlStatement.RemoveAlias(String) SqlStatement.GetAlias(String, String) SqlStatement.GetTempAliases(Int32, String) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlTruncateTableStatement : SqlStatement, IQueryElement, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description Boolean Overrides SqlStatement.IsParameterDependent | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source ResetIdentity Declaration public bool ResetIdentity { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SelectQuery Declaration public override SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery Overrides SqlStatement.SelectQuery | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement Overrides SqlStatement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatement.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Overrides SqlStatement.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source WalkQueries(Func<SelectQuery, SelectQuery>) Declaration public override void WalkQueries(Func<SelectQuery, SelectQuery> func) Parameters Type Name Description Func < SelectQuery , SelectQuery > func Overrides SqlStatement.WalkQueries(Func<SelectQuery, SelectQuery>) Implements IQueryElement ISqlExpressionWalkable ICloneableElement Extension Methods SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlTableType.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTableType.html",
    "title": "Enum SqlTableType | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlTableType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum SqlTableType Fields Name Description Cte Expression Function Table Extension Methods Sql.Between<SqlTableType>(SqlTableType, SqlTableType) Sql.NotBetween<SqlTableType>(SqlTableType, SqlTableType) SqlExtensions.In<SqlTableType>(IEnumerable<SqlTableType>) SqlExtensions.In<SqlTableType>(IQueryable<SqlTableType>) SqlExtensions.In<SqlTableType>(SqlTableType[]) SqlExtensions.In<SqlTableType>(SqlTableType, SqlTableType) SqlExtensions.In<SqlTableType>(SqlTableType, SqlTableType, SqlTableType) SqlExtensions.NotIn<SqlTableType>(IEnumerable<SqlTableType>) SqlExtensions.NotIn<SqlTableType>(IQueryable<SqlTableType>) SqlExtensions.NotIn<SqlTableType>(SqlTableType[]) SqlExtensions.NotIn<SqlTableType>(SqlTableType, SqlTableType) SqlExtensions.NotIn<SqlTableType>(SqlTableType, SqlTableType, SqlTableType)"
  },
  "api/LinqToDB.SqlQuery.SqlTableSource.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTableSource.html",
    "title": "Class SqlTableSource | Linq To DB (aka linq2db)",
    "keywords": "Class SqlTableSource Inheritance Object SqlTableSource Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlTableSource : ISqlTableSource, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlTableSource(ISqlTableSource, String) Declaration public SqlTableSource(ISqlTableSource source, string alias) Parameters Type Name Description ISqlTableSource source String alias | Improve this Doc View Source SqlTableSource(ISqlTableSource, String, SqlJoinedTable[]) Declaration public SqlTableSource(ISqlTableSource source, string alias, params SqlJoinedTable[] joins) Parameters Type Name Description ISqlTableSource source String alias SqlJoinedTable [] joins | Improve this Doc View Source SqlTableSource(ISqlTableSource, String, IEnumerable<SqlJoinedTable>) Declaration public SqlTableSource(ISqlTableSource source, string alias, IEnumerable<SqlJoinedTable> joins) Parameters Type Name Description ISqlTableSource source String alias IEnumerable < SqlJoinedTable > joins Properties | Improve this Doc View Source Alias Declaration public string Alias { get; set; } Property Value Type Description String | Improve this Doc View Source All Declaration public SqlField All { get; } Property Value Type Description SqlField | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Item[ISqlTableSource] Declaration public SqlTableSource this[ISqlTableSource table] { get; } Parameters Type Name Description ISqlTableSource table Property Value Type Description SqlTableSource | Improve this Doc View Source Item[ISqlTableSource, String] Declaration public SqlTableSource this[ISqlTableSource table, string alias] { get; } Parameters Type Name Description ISqlTableSource table String alias Property Value Type Description SqlTableSource | Improve this Doc View Source Joins Declaration public List<SqlJoinedTable> Joins { get; } Property Value Type Description List < SqlJoinedTable > | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description Int32 | Improve this Doc View Source Source Declaration public ISqlTableSource Source { get; set; } Property Value Type Description ISqlTableSource | Improve this Doc View Source SourceID Declaration public int SourceID { get; } Property Value Type Description Int32 | Improve this Doc View Source SqlTableType Declaration public SqlTableType SqlTableType { get; } Property Value Type Description SqlTableType | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description Dictionary < ICloneableElement , ICloneableElement > objectTree Predicate < ICloneableElement > doClone Returns Type Description ICloneableElement | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , Boolean > comparer Returns Type Description Boolean | Improve this Doc View Source ForEach(Action<SqlTableSource>, HashSet<SelectQuery>) Declaration public void ForEach(Action<SqlTableSource> action, HashSet<SelectQuery> visitedQueries) Parameters Type Name Description Action < SqlTableSource > action HashSet < SelectQuery > visitedQueries | Improve this Doc View Source GetJoinNumber() Declaration public int GetJoinNumber() Returns Type Description Int32 | Improve this Doc View Source GetTables() Declaration public IEnumerable<ISqlTableSource> GetTables() Returns Type Description IEnumerable < ISqlTableSource > | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description Boolean skipColumns Func < ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlTableSource.GetKeys(Boolean) Declaration IList<ISqlExpression> ISqlTableSource.GetKeys(bool allIfEmpty) Parameters Type Name Description Boolean allIfEmpty Returns Type Description IList < ISqlExpression > | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description Boolean Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<T> ISqlExpressionWalkable ICloneableElement Extension Methods Extensions.InnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, String, SqlFromClause.Join[]) SqlExtensions.Clone<T>(T) SqlExtensions.Clone<T>(T, Predicate<ICloneableElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Tools.DataExtensions.html": {
    "href": "api/LinqToDB.Tools.DataExtensions.html",
    "title": "Class DataExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class DataExtensions Inheritance Object DataExtensions Namespace : LinqToDB.Tools Assembly : linq2db.dll Syntax public static class DataExtensions Methods | Improve this Doc View Source RetrieveIdentity<T>(IEnumerable<T>, DataConnection, Boolean) Declaration public static IEnumerable<T> RetrieveIdentity<T>(this IEnumerable<T> source, DataConnection context, bool useSequenceName = true) Parameters Type Name Description IEnumerable <T> source DataConnection context Boolean useSequenceName Returns Type Description IEnumerable <T> Type Parameters Name Description T"
  },
  "api/LinqToDB.TempTable-1.html": {
    "href": "api/LinqToDB.TempTable-1.html",
    "title": "Class TempTable<T> | Linq To DB (aka linq2db)",
    "keywords": "Class TempTable<T> Temporary table. Temporary table is a table, created when you create instance of this class and deleted when you dispose it. It uses regular tables even if underlying database supports temporary tables concept. Inheritance Object TempTable<T> Implements ITable <T> IExpressionQuery <T> IOrderedQueryable <T> IQueryable <T> IEnumerable <T> IOrderedQueryable IQueryable IEnumerable IQueryProviderAsync IQueryProvider IExpressionQuery IDisposable Namespace : LinqToDB Assembly : linq2db.dll Syntax public class TempTable<T> : ITable<T>, IExpressionQuery<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable, IQueryProviderAsync, IQueryProvider, IExpressionQuery, IDisposable Type Parameters Name Description T Table record mapping class. Constructors | Improve this Doc View Source TempTable(IDataContext, IEnumerable<T>, BulkCopyOptions, String, String, String) Creates new temporary table and populate it using BulkCopy. Declaration public TempTable(IDataContext db, IEnumerable<T> items, BulkCopyOptions options = null, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext db Database connection instance. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. String tableName Optional name of temporary table. If not specified, value from mapping will be used. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. | Improve this Doc View Source TempTable(IDataContext, IQueryable<T>, String, String, String, Action<ITable<T>>) Creates new temporary table and populate it using data from provided query. Declaration public TempTable(IDataContext db, IQueryable<T> items, string tableName = null, string databaseName = null, string schemaName = null, Action<ITable<T>> action = null) Parameters Type Name Description IDataContext db Database connection instance. IQueryable <T> items Query to get records to populate created table with initial data. String tableName Optional name of temporary table. If not specified, value from mapping will be used. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. Action < ITable <T>> action Optional action that will be executed after table creation but before it populated with data from items . | Improve this Doc View Source TempTable(IDataContext, String, IEnumerable<T>, BulkCopyOptions, String, String) Creates new temporary table and populate it using BulkCopy. Declaration public TempTable(IDataContext db, string tableName, IEnumerable<T> items, BulkCopyOptions options = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext db Database connection instance. String tableName Optional name of temporary table. If not specified, value from mapping will be used. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. | Improve this Doc View Source TempTable(IDataContext, String, IQueryable<T>, String, String, Action<ITable<T>>) Creates new temporary table and populate it using data from provided query. Declaration public TempTable(IDataContext db, string tableName, IQueryable<T> items, string databaseName = null, string schemaName = null, Action<ITable<T>> action = null) Parameters Type Name Description IDataContext db Database connection instance. String tableName Optional name of temporary table. If not specified, value from mapping will be used. IQueryable <T> items Query to get records to populate created table with initial data. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. Action < ITable <T>> action Optional action that will be executed after table creation but before it populated with data from items . | Improve this Doc View Source TempTable(IDataContext, String, String, String) Creates new temporary table. Declaration public TempTable(IDataContext db, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext db Database connection instance. String tableName Optional name of temporary table. If not specified, value from mapping will be used. String databaseName Optional name of table's database. If not specified, value from mapping will be used. String schemaName Optional name of table shema/owner. If not specified, value from mapping will be used. Fields | Improve this Doc View Source TotalCopied Gets total number of records, inserted into table using BulkCopy. Declaration public long TotalCopied Field Value Type Description Int64 Properties | Improve this Doc View Source DatabaseName Declaration public string DatabaseName { get; } Property Value Type Description String | Improve this Doc View Source DataContext Gets data connection, associated with current table. Declaration public IDataContext DataContext { get; } Property Value Type Description IDataContext | Improve this Doc View Source SchemaName Declaration public string SchemaName { get; } Property Value Type Description String | Improve this Doc View Source TableName Declaration public string TableName { get; } Property Value Type Description String Methods | Improve this Doc View Source Copy(IEnumerable<T>, BulkCopyOptions) Insert new records into table using BulkCopy. Declaration public long Copy(IEnumerable<T> items, BulkCopyOptions options = null) Parameters Type Name Description IEnumerable <T> items Records to insert into table. BulkCopyOptions options Optional BulkCopy options. Returns Type Description Int64 Number of records, inserted into table. | Improve this Doc View Source GetTableName() Declaration public string GetTableName() Returns Type Description String | Improve this Doc View Source Insert(IQueryable<T>) Insert data into table using records, returned by provided query. Declaration public long Insert(IQueryable<T> items) Parameters Type Name Description IQueryable <T> items Query with records to insert into temporary table. Returns Type Description Int64 Number of records, inserted into table. Explicit Interface Implementations | Improve this Doc View Source IQueryProviderAsync.ExecuteAsync<TResult>(Expression) Declaration IAsyncEnumerable<TResult> IQueryProviderAsync.ExecuteAsync<TResult>(Expression expression) Parameters Type Name Description Expression expression Returns Type Description IAsyncEnumerable <TResult> Type Parameters Name Description TResult | Improve this Doc View Source IQueryProviderAsync.ExecuteAsync<TResult>(Expression, CancellationToken) Declaration Task<TResult> IQueryProviderAsync.ExecuteAsync<TResult>(Expression expression, CancellationToken token) Parameters Type Name Description Expression expression CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TResult | Improve this Doc View Source IExpressionQuery.Expression Declaration Expression IExpressionQuery.Expression { get; } Returns Type Description Expression | Improve this Doc View Source IExpressionQuery.SqlText Declaration string IExpressionQuery.SqlText { get; } Returns Type Description String | Improve this Doc View Source IExpressionQuery<T>.Expression Declaration Expression IExpressionQuery<T>.Expression { get; set; } Returns Type Description Expression | Improve this Doc View Source IEnumerable<T>.GetEnumerator() Declaration IEnumerator<T> IEnumerable<T>.GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() | Improve this Doc View Source IQueryable.ElementType Declaration Type IQueryable.ElementType { get; } Returns Type Description Type | Improve this Doc View Source IQueryable.Expression Declaration Expression IQueryable.Expression { get; } Returns Type Description Expression | Improve this Doc View Source IQueryable.Provider Declaration IQueryProvider IQueryable.Provider { get; } Returns Type Description IQueryProvider | Improve this Doc View Source IQueryProvider.CreateQuery(Expression) Declaration IQueryable IQueryProvider.CreateQuery(Expression expression) Parameters Type Name Description Expression expression Returns Type Description IQueryable | Improve this Doc View Source IQueryProvider.CreateQuery<TElement>(Expression) Declaration IQueryable<TElement> IQueryProvider.CreateQuery<TElement>(Expression expression) Parameters Type Name Description Expression expression Returns Type Description IQueryable <TElement> Type Parameters Name Description TElement | Improve this Doc View Source IQueryProvider.Execute(Expression) Declaration object IQueryProvider.Execute(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Object | Improve this Doc View Source IQueryProvider.Execute<TResult>(Expression) Declaration TResult IQueryProvider.Execute<TResult>(Expression expression) Parameters Type Name Description Expression expression Returns Type Description TResult Type Parameters Name Description TResult Implements ITable<T> IExpressionQuery<T> IOrderedQueryable<T> IQueryable<T> IEnumerable<T> IOrderedQueryable IQueryable IEnumerable IQueryProviderAsync IQueryProvider IExpressionQuery IDisposable Extension Methods AsyncExtensions.ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) AsyncExtensions.ForEachUntilAsync<TSource>(IQueryable<TSource>, Func<TSource, Boolean>, CancellationToken) AsyncExtensions.ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.MinAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) AsyncExtensions.MaxAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) DataExtensions.DropTable<T>(ITable<T>, String, String, String, Boolean) DataExtensions.DropTableAsync<T>(ITable<T>, String, String, String, Boolean, CancellationToken) LinqExtensions.TableName<T>(ITable<T>, String) LinqExtensions.DatabaseName<T>(ITable<T>, String) LinqExtensions.OwnerName<T>(ITable<T>, String) LinqExtensions.SchemaName<T>(ITable<T>, String) LinqExtensions.WithTableExpression<T>(ITable<T>, String) LinqExtensions.With<T>(ITable<T>, String) LinqExtensions.LoadWith<T>(ITable<T>, Expression<Func<T, Object>>) LinqExtensions.Delete<T>(IQueryable<T>) LinqExtensions.DeleteAsync<T>(IQueryable<T>, CancellationToken) LinqExtensions.Delete<T>(IQueryable<T>, Expression<Func<T, Boolean>>) LinqExtensions.DeleteAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, CancellationToken) LinqExtensions.Update<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.UpdateAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.Update<T>(IQueryable<T>, Expression<Func<T, T>>) LinqExtensions.UpdateAsync<T>(IQueryable<T>, Expression<Func<T, T>>, CancellationToken) LinqExtensions.Update<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>) LinqExtensions.UpdateAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>, CancellationToken) LinqExtensions.Update<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>) LinqExtensions.UpdateAsync<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.AsUpdatable<T>(IQueryable<T>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Insert<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithIdentity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithInt32Identity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithInt64Identity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithDecimalIdentity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithIdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithInt32IdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithInt64IdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithDecimalIdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Insert<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithInt32Identity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithInt64Identity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithDecimalIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithIdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithInt32IdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithInt64IdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.InsertWithDecimalIdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) LinqExtensions.Into<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>) LinqExtensions.InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>) LinqExtensions.InsertOrUpdateAsync<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>, CancellationToken) LinqExtensions.InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>, Expression<Func<T>>) LinqExtensions.InsertOrUpdateAsync<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>, Expression<Func<T>>, CancellationToken) LinqExtensions.Drop<T>(ITable<T>, Boolean) LinqExtensions.DropAsync<T>(ITable<T>, Boolean, CancellationToken) LinqExtensions.Truncate<T>(ITable<T>, Boolean) LinqExtensions.TruncateAsync<T>(ITable<T>, Boolean, CancellationToken) LinqExtensions.Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, TakeHints) LinqExtensions.Take<TSource>(IQueryable<TSource>, Int32, TakeHints) LinqExtensions.Skip<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAt<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAtAsync<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, CancellationToken) LinqExtensions.ElementAtOrDefault<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAtOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, CancellationToken) LinqExtensions.Having<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.ThenOrBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) LinqExtensions.ThenOrByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) LinqExtensions.Join<TSource>(IQueryable<TSource>, SqlJoinType, Expression<Func<TSource, Boolean>>) LinqExtensions.Join<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, SqlJoinType, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.InnerJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.InnerJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.LeftJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.LeftJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.RightJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.RightJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.FullJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.FullJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.CrossJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, TResult>>) LinqExtensions.AsCte<TSource>(IQueryable<TSource>) LinqExtensions.AsCte<TSource>(IQueryable<TSource>, String) LinqExtensions.GenerateTestString(IQueryable, Boolean) AnalyticFunctions.Average<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Average<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.Corr<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) AnalyticFunctions.Corr<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) AnalyticFunctions.CountExt<TEntity>(IEnumerable<TEntity>, Func<TEntity, Object>) AnalyticFunctions.CountExt<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.CountExt<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.CovarPop<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) AnalyticFunctions.CovarPop<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) AnalyticFunctions.CovarSamp<T>(IEnumerable<T>, Expression<Func<T, Object>>, Expression<Func<T, Object>>) AnalyticFunctions.CovarSamp<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Object>>, Expression<Func<TEntity, Object>>) AnalyticFunctions.Max<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Max<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.Median<TEntity, T>(IEnumerable<TEntity>, Func<TEntity, T>) AnalyticFunctions.Median<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.Min<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Min<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.StdDev<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.StdDev<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.StdDev<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AnalyticFunctions.StdDevPop<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.StdDevPop<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.StdDevSamp<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.StdDevSamp<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.VarPop<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.VarPop<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.VarSamp<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.VarSamp<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) AnalyticFunctions.Variance<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) AnalyticFunctions.Variance<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) AnalyticFunctions.Variance<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) AsyncExtensions.AsAsyncEnumerable<TSource>(IQueryable<TSource>, CancellationToken) DataConnectionExtensions.BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(ITable<T>, Int32, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(ITable<T>, IEnumerable<T>) ReflectionExtensions.GetListItemType(IEnumerable) DataExtensions.RetrieveIdentity<T>(IEnumerable<T>, DataConnection, Boolean) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  }
}