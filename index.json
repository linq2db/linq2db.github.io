{
  "index.html": {
    "href": "index.html",
    "title": "LINQ to DB | Linq To DB (aka linq2db)",
    "keywords": "LINQ to DB LINQ to DB is the fastest LINQ database access library offering a simple, light, fast, and type-safe layer between your POCO objects and your database. Architecturally it is one step above micro-ORMs like Dapper, Massive, or PetaPoco, in that you work with LINQ expressions, not with magic strings, while maintaining a thin abstraction layer between your code and the database. Your queries are checked by the C# compiler and allow for easy refactoring. However, it's not as heavy as LINQ to SQL or Entity Framework. There is no change-tracking, so you have to manage that yourself, but on the plus side you get more control and faster access to your data. In other words LINQ to DB is type-safe SQL . Visit our blog and see Wiki for more details. Code examples and demos can be found here . How to help the project No, this is not the donate link. We do need something really more valuable - your time . If you really want to help us please read this post . Project Build Status Appveyor Travis master latest Feeds Release builds can be found on NuGet MyGet V2 https://www.myget.org/F/linq2db/api/v2 V3 https://www.myget.org/F/linq2db/api/v3/index.json Let's get started From NuGet : Install-Package linq2db - .Net Install-Package linq2db.core - .Net Core Configuring connection strings .Net In your web.config or app.config make sure you have a connection string: <connectionStrings> <add name=\"Northwind\" connectionString = \"Server=.\\;Database=Northwind;Trusted_Connection=True;Enlist=False;\" providerName = \"SqlServer\" /> </connectionStrings> .Net Core .Net Core does not support System.Configuration so to configure connection strings you should implement ILinqToDBSettings , for example: public class ConnectionStringSettings : IConnectionStringSettings { public string ConnectionString { get; set; } public string Name { get; set; } public string ProviderName { get; set; } public bool IsGlobal => false; } public class MySettings : ILinqToDBSettings { public IEnumerable<IDataProviderSettings> DataProviders { get { yield break; } } public string DefaultConfiguration => \"SqlServer\"; public string DefaultDataProvider => \"SqlServer\"; public IEnumerable<IConnectionStringSettings> ConnectionStrings { get { yield return new ConnectionStringSettings { Name = \"SqlServer\", ProviderName = \"SqlServer\", ConnectionString = @\"Server=.\\;Database=Northwind;Trusted_Connection=True;Enlist=False;\" }; } } } And later just set: DataConnection.DefaultSettings = new MySettings(); You can also use same for regular .Net Now let's create a POCO class: using System; using LinqToDB.Mapping; [Table(Name = \"Products\")] public class Product { [PrimaryKey, Identity] public int ProductID { get; set; } [Column(Name = \"ProductName\"), NotNull] public string Name { get; set; } // ... other columns ... } At this point LINQ to DB doesn't know how to connect to our database or which POCOs go with what database. All this mapping is done through a DataConnection class: public class DbNorthwind : LinqToDB.Data.DataConnection { public DbNorthwind() : base(\"Northwind\") { } public ITable<Product> Product { get { return GetTable<Product>(); } } public ITable<Category> Category { get { return GetTable<Category>(); } } // ... other tables ... } We call the base constructor with the \"Northwind\" parameter. This parameter has to match the name=\"Northwind\" we defined above in our connection string. We also have to register our Product class we defined above to allows us to write LINQ queries. And now let's get some data: using LinqToDB; using LinqToDB.Common; public static List<Product> All() { using (var db = new DbNorthwind()) { var query = from p in db.Product where p.ProductID > 25 orderby p.Name descending select p; return query.ToList(); } } Make sure you always wrap your DataConnection class (in our case DbNorthwind ) in a using statement. This is required for proper resource management, like releasing the database connections back into the pool. Details Selecting Columns Most times we get the entire row from the database: from p in db.Product where p.ProductID == 5 select p; However, sometimes getting all the fields is too wasteful so we want only certain fields, but still use our POCOs; something that is challenging for libraries that rely on object tracking, like LINQ to SQL. from p in db.Product orderby p.Name descending select new Product { Name = p.Name }; Composing queries Rather than concatenating strings we can 'compose' LINQ expressions. In the example below the final SQL will be different if onlyActive is true or false, or if searchFor is not null. public static List<Product> All(bool onlyActive, string searchFor) { using (var db = new DbNorthwind()) { var products = from p in db.Product select p; if (onlyActive) { products = from p in products where !p.Discontinued select p; } if (searchFor != null) { products = from p in products where p.Name.Contains(searchFor) select p; } return products.ToList(); } } Paging A lot of times we need to write code that returns only a subset of the entire dataset. We expand on the previous example to show what a product search function could look like. Keep in mind that the code below will query the database twice. Once to find out the total number of records, something that is required by many paging controls, and once to return the actual data. public static List<Product> Search(string searchFor, int currentPage, int pageSize, out int totalRecords) { using (var db = new DbNorthwind()) { var products = from p in db.Product select p; if (searchFor != null) { products = from p in products where p.Name.Contains(searchFor) select p; } totalRecords = products.Count(); return products.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList(); } } Joins This assumes we added a Category class, just like we did with the Product class, defined all the fields, and registered it in our DbNorthwind data access class. We can now write an INNER JOIN query like this: from p in db.Product join c in db.Category on p.CategoryID equals c.CategoryID select new Product { Name = p.Name, Category = c }; and a LEFT JOIN query like this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product { Name = p.Name, Category = c }; Creating your POCOs In the previous example we assign an entire Category object to our product, but what if we want all the fields in our Product class, but we don't want to specify every field by hand? Unfortunately, we cannot write this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product(c); The query above assumes the Product class has a constructor that takes in a Category object. The query above won't work, but we can work around that with the following query: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select Product.Build(p, c); For this to work, we need a function in the Product class that looks like this: public static Product Build(Product product, Category category) { if (product != null) { product.Category = category; } return product; } One caveat with this approach is that if you're using it with composed queries (see example above) the select Build part has to come only in the final select. Insert At some point we will need to add a new Product to the database. One way would be to call the Insert extension method found in the LinqToDB namespace; so make sure you import that. using (var db = new DbNorthwind()) { db.Insert(product); } This inserts all the columns from our Product class, but without retrieving the generated identity value. To do that we can use InsertWithIdentity , like this: using (var db = new DbNorthwind()) { product.ProductID = Convert.ToInt32(db.InsertWithIdentity(product)); } We need to convert the returned value to an integer since an identity field could be something other than an integer, like a GUID for example. There is also InsertOrReplace that updates a database record if found or adds it otherwise. If you need to insert only certain fields, or use values generated by the database, you could write: using (var db = new DbNorthwind()) { db.Product .Value(p => p.Name, product.Name) .Value(p => p.UnitPrice, 10.2m) .Value(p => p.Added, () => Sql.CurrentTimestamp) .Insert(); } Using this method also allows us to build insert statements like this: using (var db = new DbNorthwind()) { var statement = db.Product .Value(p => p.Name, product.Name) .Value(p => p.UnitPrice, 10.2m); if (storeAdded) statement.Value(p => p.Added, () => Sql.CurrentTimestamp); statement.Insert(); } Update Updating records follows a similar pattern to Insert. We have an extension method that updates all the columns in the database: using (var db = new DbNorthwind()) { db.Update(product); } And we also have a lower level update mechanism: using (var db = new DbNorthwind()) { db.Product .Where(p => p.ProductID == product.ProductID) .Set(p => p.Name, product.Name) .Set(p => p.UnitPrice, product.UnitPrice) .Update(); } Similarly, we can break an update query into multiple pieces if needed: using (var db = new DbNorthwind()) { var statement = db.Product .Where(p => p.ProductID == product.ProductID) .Set(p => p.Name, product.Name); if (updatePrice) statement = statement.Set(p => p.UnitPrice, product.UnitPrice); statement.Update(); } You're not limited to updating a single field. For example, we could discontinue all the products that are no longer in stock: using (var db = new DbNorthwind()) { db.Product .Where(p => p.UnitsInStock == 0) .Set(p => p.Discontinued, true) .Update(); } Delete Similar to how you update records, you can also delete records: using (var db = new DbNorthwind()) { db.Product .Where(p => p.Discontinued) .Delete(); } Bulk Copy Bulk copy feature supports the transfer of large amounts of data into a table from another data source. For faster data inserting DO NOT use a transaction. If you use a transaction an adhoc implementation of the bulk copy feature has been added in order to insert multiple lines at once. You get faster results then inserting lines one by one, but it's still slower than the database provider bulk copy. So, DO NOT use transactions whenever you can (Take care of unicity constraints, primary keys, etc. since bulk copy ignores them at insertion) [Table(Name = \"ProductsTemp\")] public class ProductTemp { public int ProductID { get; set; } [Column(Name = \"ProductName\"), NotNull] public string Name { get; set; } // ... other columns ... } list = List<ProductTemp> using (var db = new DbNorthwind()) { db.BulkCopy(list); } Transactions Using database transactions is easy. All you have to do is call BeginTransaction() on your DataConnection, run one or more queries, and then commit the changes by calling CommitTransaction(). If something happened and you need to roll back your changes you can either call RollbackTransaction() or throw an exception. using (var db = new DbNorthwind()) { db.BeginTransaction(); // ... select / insert / update / delete ... if (somethingIsNotRight) { db.RollbackTransaction(); } else { db.CommitTransaction(); } } Also, you can use .NET built-in TransactionScope class: // don't forget isolation level is serializable by default using (var transaction = new TransactionScope()) { using (var db = new DbNorthwind()) { ... } transaction.Complete(); } MiniProfiler If you would like to use MiniProfiler from StackExchange you'd need to wrap ProfiledDbConnection around our regular DataConnection. public class DbDataContext : DataConnection { #if !DEBUG public DbDataContext() : base(\"Northwind\") { } #else public DbDataContext() : base(GetDataProvider(), GetConnection()) { } private static IDataProvider GetDataProvider() { return new SqlServerDataProvider(\"\", SqlServerVersion.v2012); } private static IDbConnection GetConnection() { LinqToDB.Common.Configuration.AvoidSpecificDataProviderAPI = true; var dbConnection = new SqlConnection(@\"Server=.\\SQL;Database=Northwind;Trusted_Connection=True;Enlist=False;\"); return new StackExchange.Profiling.Data.ProfiledDbConnection(dbConnection, MiniProfiler.Current); } #endif } This assumes that you only want to use MiniProfiler while in DEBUG mode and that you are using SQL Server for your database. If you're using a different database you would need to change GetDataProvider() to return the appropriate IDataProvider. For example, if using MySql you would use: private static IDataProvider GetDataProvider() { return new LinqToDB.DataProvider.MySql.MySqlDataProvider(); } Links Blog LINQ to DB NuGets LINQ to DB pre release NuGets LINQ to DB on GitHub Source Code Code Examples"
  },
  "articles/contrib.html": {
    "href": "articles/contrib.html",
    "title": "Development rules and regulations, code style | Linq To DB (aka linq2db)",
    "keywords": "Development rules and regulations, code style Follow this document Project structure description linq2db Solution and folder structure .\\ //Root folder .\\Data // Contains fileserver databases and scripts for creating and initializing test databases .\\NuGet // Stuff for nuget package, readme.txt .\\Redist // Redistributable binaries unavailable in nugget .\\Source // Source .\\Tests // Unit tests stuff .\\Tests\\FSharp // F# models and tests .\\Tests\\Linq // All unit tests .\\Tests\\Model // Models for tests .\\Tests\\TestApp // Test application .\\Tests\\Tests.NetCore // Obsolete, needed due to some VS2015 problems with building and running Core tests .\\Tests\\VisualBasic //Visual Basic models and tests Solutions: .\\linq2db.4.5.sln - VS2015/2017 solution, .Net 4.5 (NO SL and WS projects) .\\linq2db.sln - VS2015 solution, .Net 4.5, SL, WS projects .\\linq2db.core.sln - VS2015 solution, .Net Core projects Projects: .\\Source\\LinqToDB.csproj - .Net 4.5 .\\Source\\LinqToDB.Silverlight.4.csproj - SL 4 .\\Source\\LinqToDB.Silverlight.5.csproj - SL 5 .\\Source\\LinqToDB.WindowsStore.csproj - WS 8 .\\Source\\LinqToDB.xproj and .\\Source\\project.json - VS2015 .Net Core project Building You can use any solution for building and running tests. But you also should care about other supported platforms. To check if your changes have not affected other projects you can: run .\\Source\\compile.cmd - builds .Net 4, .Net 4.5, .Net WS run dotnet build - in Root folder to build .Net Core ## Different platforms support Because of compiling for different platforms we do use: Conditional compilation. Different projects and configurations define compilation symbols: FW4 - .Net 4.0 compatibility level SILVERLIGHT - Silverlight compatibility level NETFX_CORE - Windows Store 8 compatibility level NOASYNC - async is not supported NETSTANDARD - .Net Core (netstandard1.6) compatibility level NOFSHARP - used by .Net Core test project to avoid compiling code dependent on F# Exclude files from build - some files are excluded from build in projects, corresponding to target framework Implementing missing classes and enums. There are some under .\\Source\\Compatibility folder. ## Run tests NUnit3 is used as unit testing framework. Most tests are run for all supported databases, and written in same pattern: ```cs [TestFixture] public class Test: TestBase // TestBase - base class, provides base methods and object data sources { // DataContextSourceAttribute - implements Nunit ITestBuilder and provides context values to test [DataContextSource] public void Test(string context) { // TestBase.GetDataContext - creates new IDataContext, supports creating WCF client and server using(var db = GetDataContext(context)) { // Here is the most interesting // this.Person - list of persons, corresponding Person table in database (derived from TestBase) // db.Person - database table // So test checks that LINQ to Objects query produces the same result as executed database query AreEqual(this.Person.Where( => .Name == \"John\"), db.Person.Where( => .Name == \"John\")); } } } ### Configure data providers for tests `DataContextSourceAttribute` generates tests for each configured data provider, configuration is taken: 1. From `.\\Tests\\Linq\\UserDataProviders.txt` (if any) (UserDataProviders.Core.txt for .Net Core) 1. From `.\\Tests\\Linq\\DefaultDataProviders.txt` (DefaultDataProviders.Core.txt for .Net Core) All default connection strings are stored in `.\\Tests\\Linq\\app.config` `DataProviders.txt` structure is: `[!]ConfigurationName[* ConnectionString][* DataProviderName]` * `[]` - optional parts * `*` - is used as field delimiter * `--` - is used to comment line Parts: * `!` - means that this configuration is used as `DataConnection.DefaultConfiguration` * `ConfigurationName` - configuration name (passed to test as `context` parameter) * ConnectionString - used to override default connection string from `app.config` * DataProviderName - used to define DataProvider for configuration **UserDataProviders.txt example** -- this is comment line and would be ignored Access !SQLiteMs * Data Source=Database\\TestData.sqlite * SQLite this does mean: * Run tests for `Access` configuration with default settings * Run tests for `SQLiteMs` configuration. This configuration is used as default, with connection string `Data Source=Database\\TestData.sqlite` and `SQLite` data provider. More examples are below in CI section. So tests are done only for providers defined in `DataProviders.txt`, defaults are in `DefaultDataProviders.txt` (they are Access, SQL CE, SQLite - all file server databases). To define your own configurations **DO NOT EDIT** `DefaultDataProviders.txt` - create `.\\Tests\\Linq\\UserDataProviders.txt` and define needed configurations. When all tests are executed, first `_CreateData` tests will be run - those execute SQL scripts and insert default data to database, so if you are going to run one test be sure to run `_CreateData` before it manually. Also - if your test changes database data, be sure to revert those changes (!) to avoid side effects for other tests. # Continuous Integration We do run builds and tests with: * [AppVeyor](https://ci.appveyor.com/project/igor-tkachev/linq2db) (Windows) [appveyor.yml](https://github.com/linq2db/linq2db/blob/master/appveyor.yml). Makes build and runs tests for: * .Net 4.5: [AppveyorDataProviders.txt](https://github.com/linq2db/linq2db/blob/master/Tests/Linq/AppveyorDataProviders.txt) * .Net Core: [AppveyorDataProviders.Core.txt](https://github.com/linq2db/linq2db/blob/master/Tests/Linq/AppveyorDataProviders.Core.txt) * [Travis](https://travis-ci.org/linq2db/linq2db) (Linux) [.travis.yml](https://github.com/linq2db/linq2db/blob/master/.travis.yml). Makes build and runs tests for: * Mono: [TravisDataProviders.txt](https://github.com/linq2db/linq2db/blob/master/Tests/Linq/TravisDataProviders.txt) * .Net Core: [TravisDataProviders.Core.txt](https://github.com/linq2db/linq2db/blob/master/Tests/Linq/TravisDataProviders.Core.txt) `xxxDataproviders` files are renamed by CI to `UserDataProviders` before running tests. ## Skip CI build If you want to skip building commit by CI (for example you have changed *.md files only) begin commit comment with `[ci skip]`. ## Publishing packages * **Release candidate** packages are published by AppVeyor to [MyGet.org](https://github.com/linq2db/linq2db#feeds) for each successful build of **master** branch. * **Release** packages are published by AppVeyor to [NuGet.org](https://github.com/linq2db/linq2db#feeds) for each successful build of **release** branch. ## Building releases 1. Update `.\\NuGet\\Readme.txt` file (append release notes) 1. Create PR from `master` to `release` branch, in comments add [@testers](https://github.com/linq2db/linq2db/wiki/How-can-i-help#testing-how-to) to notify all testers that we are ready to release 1. Wait few days for feedback from testers and approval from contributors 1. Merge PR 1. [Tag release](https://github.com/linq2db/linq2db/releases) 1. Update versions in `master` branch (this will lead to publish all next `master` builds as new version RC): * in [.\\appveyor.yml](https://github.com/linq2db/linq2db/blob/master/appveyor.yml) set `packageVersion` parameter * in [.\\Source\\project.json](https://github.com/linq2db/linq2db/blob/master/Source/project.json) set new `version` parameter * in [.\\Source\\Properties\\LinqToDBConstants.cs](https://github.com/linq2db/linq2db/blob/master/Source/Properties/LinqToDBConstants.cs) set `FullVersionString` constant. # Process In general you should follow simple rules: * Development rules and regulations, code style * Do not add new features without tests * Avoid direct pushes to `master` and `release` branches * To fix some issue or implement new feature create new branch and make pull request after you are ready to merge. Merge your PR only after contributor's review. * If you are going to implement any big feature you may want other contributors to participate (coding, code review, feature discuss and so on), so to do it: * Create new PR with **[WIP]** prefix (Work In Process) * After you are ready to merge remove the prefix & assign contributors as reviewers * If you wo have wright access, it is recommended to use central repository (not forks). Why - simple, it would allow other teammates to help you in developing (if needed). Certainly you are free to use fork if it is more convenient to you * Please avoid adding new public classes, properties, methods without XML doc * Read issues and help users * Do not EF :) See also Issue reporting"
  },
  "articles/supportedfw.html": {
    "href": "articles/supportedfw.html",
    "title": "Supported frameworks | Linq To DB (aka linq2db)",
    "keywords": "Supported frameworks Framework linq2db linq2db.Core .Net 4 Yes Yes .Net 4.5 Yes Yes .Net 4.5.1 Yes Silverlight 4+ Yes Mono Yes WindowsStore 8 Yes .NETStandard 1.6 Yes"
  },
  "articles/Video.html": {
    "href": "articles/Video.html",
    "title": "LINQ Video | Linq To DB (aka linq2db)",
    "keywords": "LINQ Video LINQ to SqlServer LINQ CRUD Operations"
  },
  "articles/Join-Operators.html": {
    "href": "articles/Join-Operators.html",
    "title": "INNER JOIN On Single Column | Linq To DB (aka linq2db)",
    "keywords": "INNER JOIN On Single Column C# using (var db = new NorthwindDB()) { var query = from c in db.Category join p in db.Product on c.CategoryID equals p.CategoryID where !p.Discontinued select c; foreach (var category in query) Console.WriteLine(category.CategoryID); } SQL SELECT [c].[CategoryID], [c].[CategoryName], [c].[Description], [c].[Picture] FROM [Categories] [c] INNER JOIN [Products] [p] ON [c].[CategoryID] = [p].[CategoryID] WHERE [p].[Discontinued] <> 1 INNER JOIN On Multiple Columns C# using (var db = new NorthwindDB()) { var query = from p in db.Product from o in db.Order join d in db.OrderDetail on new { p.ProductID, o.OrderID } equals new { d.ProductID, d.OrderID } where !p.Discontinued select new { p.ProductID, o.OrderID, }; foreach (var item in query) Console.WriteLine(item); } SQL SELECT [t3].[ProductID] as [ProductID1], [t3].[OrderID] as [OrderID1] FROM ( SELECT [t1].[ProductID], [t2].[OrderID], [t1].[Discontinued] FROM [Products] [t1], [Orders] [t2] ) [t3] INNER JOIN [Order Details] [d] ON [t3].[ProductID] = [d].[ProductID] AND [t3].[OrderID] = [d].[OrderID] WHERE [t3].[Discontinued] <> 1"
  },
  "articles/links.html": {
    "href": "articles/links.html",
    "title": "Links | Linq To DB (aka linq2db)",
    "keywords": "Links Blog LINQ to DB NuGets LINQ to DB pre release NuGets LINQ to DB on GitHub Source Code Code Examples"
  },
  "articles/Creating-Generic-CRUD-Class.html": {
    "href": "articles/Creating-Generic-CRUD-Class.html",
    "title": "| Linq To DB (aka linq2db)",
    "keywords": "public static class DBGenericActions { public static void UpdateEntity<T>(T entity) where T : class { using (var db = new myDB()) { db.Update<T>(entity); } } public static object InsertEntity<T>(T entity) where T : class { using (var db = new myDB()) { return db.InsertWithIdentity<T>(entity); } } public static void DeleteEntity<T>(T entity) where T : class { using (var db = new myDB()) { db.Delete<T>(entity); } } public static List<T> GetAllFromEntity<T>() where T : class { using (var db = new myDB()) { return db.GetTable<T>().ToList(); } } public static List<T> GetEntitiesByParameters<T>(Func<T, bool> where) where T : class { using (var db = new nassif_devDB()) { return db.GetTable<T>().Where<T>(where).Where<T>(GetLogicExclusion<T>()).ToList); } } /// <summary> /// /// </summary> /// <typeparam name=\"T\">linqToDb Table mapped</typeparam> /// <param name=\"pk\"> Have to be of the same type of primary key atribute of T table mapped</param> /// <returns>T linqToDb mapped class</returns> public static T GetEntityByPK<T>(object pk) where T : class { using (var db = new myDB()) { var pkName = typeof(T).GetProperties().Where(prop => prop.GetCustomAttributes(typeof(LinqToDB.Mapping.PrimaryKeyAttribute), false).Count() > 0).First(); var expression = SimpleComparison<T>(pkName.Name, pk); return db.GetTable<T>().Where<T>(expression).FirstOrDefault(); } } /// <summary> /// Excelent to use to get entities by FK /// </summary> /// <typeparam name=\"T\">Entity To Filter From DB Mapped</typeparam> /// <typeparam name=\"D\">Type of property to filter using Equals Comparer</typeparam> /// <param name=\"propertyName\">Name of property</param> /// <param name=\"valueToFilter\">Value to filter query</param> /// <returns>List of T</returns> public static List<T> GetAllEntititiesByPropertyValue<T, D>(string propertyName, D valueToFilter) where T : class { if (string.IsNullOrWhiteSpace(propertyName)) return GetAllFromEntity<T>(); var expression = SimpleComparison<T,D>(propertyName, valueToFilter); using (var db = new myDB()) { var data = db.GetTable<T>().Where<T>(expression).ToList(); return data; } } public static Func<T, bool> SimpleComparison<T>(string property, object value) where T : class { var type = typeof (T); var pe = Expression.Parameter(type, \"p\"); var propertyReference = Expression.Property(pe, property); var constantReference = Expression.Constant(value); return Expression.Lambda<Func<T, bool>> (Expression.Equal(propertyReference, constantReference), new[] { pe }).Compile(); } private static Func<T, bool> SimpleComparison<T,D>(string propertyName, D value ) where T : class { var type = typeof(T); var pe = Expression.Parameter(type, \"p\"); var constantReference = Expression.Constant(value); var propertyReference = Expression.Property(pe, propertyName); return Expression.Lambda<Func<T, bool>>( Expression.Equal(propertyReference, constantReference), new[] { pe }).Compile(); } }"
  },
  "articles/FAQ.html": {
    "href": "articles/FAQ.html",
    "title": "Mapping | Linq To DB (aka linq2db)",
    "keywords": "Mapping How can I use calculated fields? The only you need is to say that you do not want to insert or update property, and you can do it with ColumnAttribute public class MyEntity { [Column(SkipOnInsert = true, SkipOnUpdate = true)] public int CalculatedField { get; set; } }"
  },
  "articles/databases.html": {
    "href": "articles/databases.html",
    "title": "Supported databases | Linq To DB (aka linq2db)",
    "keywords": "Supported databases DB2 (LUW, z/OS) Firebird Informix Microsoft Access Microsoft Sql Azure Microsoft Sql Server Microsoft SqlCe MySql Oracle PostgreSQL SQLite SAP HANA Sybase ASE DB2 iSeries"
  },
  "articles/Managing-data-connection.html": {
    "href": "articles/Managing-data-connection.html",
    "title": "Managing data connection | Linq To DB (aka linq2db)",
    "keywords": "Managing data connection .NET database providers use connection pooling to work with database connections, where they take connection from pool, use it, and then release connection back to connection pool so it could be reused. When connection is not released correctly after use, connection pool will consider it still used, which will lead to two consequesnces: your application will create more and more connections to database, because there are no free connections to reuse from connection pool manager point of view at some point your application will fail to obtain connection from pool, because pool size limit reached To avoid collection leaks you should care about how you are creating and disposing connections. There are to ways to query database with linq2db: using DataConnection class. Using DataConnection you can make several queries in one physical database connection, so you do not have overhead on opening and closing database connection. You should follow few simple rules: always dispose DataConnection instance (it is recommended to use using c# statement); query should be executed before DataConnection object is disposed. From version 1.8.0 we have introduced protection from wrong usage, and you will get ObjectDisposedException trying to perform query on disposed DataConnection instance. using DataContext class. DataContext opens and closes physical connection for each query! Be careful with DataContext.KeepConnectionAlive property, if you set it true , it would work the same way as DataConnection ! So we do not recommend you to set this property to true . Done right using (var db = new DataConnection()) { // your code here } public IEnumerable<Person> GetPersons() { using (var db = new DataConnection()) { // ToList call sends query to database while we are still in using return db.GetTable<Person>().ToList(); } } public IEnumerable<Person> GetPersons() { // ToList call sends query to database and DataContext releases connection return new DataContext().GetTable<Person>().ToList(); } public IQuerable<Person> GetPersons() { // query is not sent to database here // it will be executed later when user will enumerate results of method // but DataContext will handle it properly return new DataContext().GetTable<Person>(); } public async Task<IEnumerable<Person>> GetPersons() { using (var db = new DataConnection()) { // await will suspend execution inside of using waiting for query results from ToListAsync() // after that execution will continue and dispose `DataConnection` instance return await db.GetTable<Person>().ToListAsync(); } } Done wrong public IEnumerable<Person> GetPersons() { using (var db = new DataConnection()) { // query will be executed only when user will enumerate method results return db.GetTable<Person>(); } } // DataConnection already disposed here // starting from linq2db 1.8.0 it will fail with ObjectDisposedException // versions prior to 1.8.0 will execute query (if there are free connectons left) and will create leaked connection var persons = GetPersons().ToList(); public async Task<IEnumerable<Person>> GetPersons() { using (var db = new DataConnection()) { // no suspension point here, awaitable task will be returned immediately from method // creating race conditions return db.GetTable<Person>().ToListAsync(); } } // query execution will be called on disposed DataConnection var persons = await GetPersons();"
  },
  "articles/README.html": {
    "href": "articles/README.html",
    "title": "LINQ to DB | Linq To DB (aka linq2db)",
    "keywords": "LINQ to DB LINQ to DB is the fastest LINQ database access library offering a simple, light, fast, and type-safe layer between your POCO objects and your database. Architecturally it is one step above micro-ORMs like Dapper, Massive, or PetaPoco, in that you work with LINQ expressions, not with magic strings, while maintaining a thin abstraction layer between your code and the database. Your queries are checked by the C# compiler and allow for easy refactoring. However, it's not as heavy as LINQ to SQL or Entity Framework. There is no change-tracking, so you have to manage that yourself, but on the plus side you get more control and faster access to your data. In other words LINQ to DB is type-safe SQL . Visit our blog and see Wiki for more details. Code examples and demos can be found here . How to help the project No, this is not the donate link. We do need something really more valuable - your time . If you really want to help us please read this post . Project Build Status Appveyor Travis master latest Feeds Release builds can be found on NuGet MyGet V2 https://www.myget.org/F/linq2db/api/v2 V3 https://www.myget.org/F/linq2db/api/v3/index.json Let's get started From NuGet : Install-Package linq2db - .Net Install-Package linq2db.core - .Net Core Configuring connection strings .Net In your web.config or app.config make sure you have a connection string: <connectionStrings> <add name=\"Northwind\" connectionString = \"Server=.\\;Database=Northwind;Trusted_Connection=True;Enlist=False;\" providerName = \"SqlServer\" /> </connectionStrings> .Net Core .Net Core does not support System.Configuration so to configure connection strings you should implement ILinqToDBSettings , for example: public class ConnectionStringSettings : IConnectionStringSettings { public string ConnectionString { get; set; } public string Name { get; set; } public string ProviderName { get; set; } public bool IsGlobal => false; } public class MySettings : ILinqToDBSettings { public IEnumerable<IDataProviderSettings> DataProviders { get { yield break; } } public string DefaultConfiguration => \"SqlServer\"; public string DefaultDataProvider => \"SqlServer\"; public IEnumerable<IConnectionStringSettings> ConnectionStrings { get { yield return new ConnectionStringSettings { Name = \"SqlServer\", ProviderName = \"SqlServer\", ConnectionString = @\"Server=.\\;Database=Northwind;Trusted_Connection=True;Enlist=False;\" }; } } } And later just set: DataConnection.DefaultSettings = new MySettings(); You can also use same for regular .Net Now let's create a POCO class: using System; using LinqToDB.Mapping; [Table(Name = \"Products\")] public class Product { [PrimaryKey, Identity] public int ProductID { get; set; } [Column(Name = \"ProductName\"), NotNull] public string Name { get; set; } // ... other columns ... } At this point LINQ to DB doesn't know how to connect to our database or which POCOs go with what database. All this mapping is done through a DataConnection class: public class DbNorthwind : LinqToDB.Data.DataConnection { public DbNorthwind() : base(\"Northwind\") { } public ITable<Product> Product { get { return GetTable<Product>(); } } public ITable<Category> Category { get { return GetTable<Category>(); } } // ... other tables ... } We call the base constructor with the \"Northwind\" parameter. This parameter has to match the name=\"Northwind\" we defined above in our connection string. We also have to register our Product class we defined above to allows us to write LINQ queries. And now let's get some data: using LinqToDB; using LinqToDB.Common; public static List<Product> All() { using (var db = new DbNorthwind()) { var query = from p in db.Product where p.ProductID > 25 orderby p.Name descending select p; return query.ToList(); } } Make sure you always wrap your DataConnection class (in our case DbNorthwind ) in a using statement. This is required for proper resource management, like releasing the database connections back into the pool. Details Selecting Columns Most times we get the entire row from the database: from p in db.Product where p.ProductID == 5 select p; However, sometimes getting all the fields is too wasteful so we want only certain fields, but still use our POCOs; something that is challenging for libraries that rely on object tracking, like LINQ to SQL. from p in db.Product orderby p.Name descending select new Product { Name = p.Name }; Composing queries Rather than concatenating strings we can 'compose' LINQ expressions. In the example below the final SQL will be different if onlyActive is true or false, or if searchFor is not null. public static List<Product> All(bool onlyActive, string searchFor) { using (var db = new DbNorthwind()) { var products = from p in db.Product select p; if (onlyActive) { products = from p in products where !p.Discontinued select p; } if (searchFor != null) { products = from p in products where p.Name.Contains(searchFor) select p; } return products.ToList(); } } Paging A lot of times we need to write code that returns only a subset of the entire dataset. We expand on the previous example to show what a product search function could look like. Keep in mind that the code below will query the database twice. Once to find out the total number of records, something that is required by many paging controls, and once to return the actual data. public static List<Product> Search(string searchFor, int currentPage, int pageSize, out int totalRecords) { using (var db = new DbNorthwind()) { var products = from p in db.Product select p; if (searchFor != null) { products = from p in products where p.Name.Contains(searchFor) select p; } totalRecords = products.Count(); return products.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList(); } } Joins This assumes we added a Category class, just like we did with the Product class, defined all the fields, and registered it in our DbNorthwind data access class. We can now write an INNER JOIN query like this: from p in db.Product join c in db.Category on p.CategoryID equals c.CategoryID select new Product { Name = p.Name, Category = c }; and a LEFT JOIN query like this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product { Name = p.Name, Category = c }; Creating your POCOs In the previous example we assign an entire Category object to our product, but what if we want all the fields in our Product class, but we don't want to specify every field by hand? Unfortunately, we cannot write this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product(c); The query above assumes the Product class has a constructor that takes in a Category object. The query above won't work, but we can work around that with the following query: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select Product.Build(p, c); For this to work, we need a function in the Product class that looks like this: public static Product Build(Product product, Category category) { if (product != null) { product.Category = category; } return product; } One caveat with this approach is that if you're using it with composed queries (see example above) the select Build part has to come only in the final select. Insert At some point we will need to add a new Product to the database. One way would be to call the Insert extension method found in the LinqToDB namespace; so make sure you import that. using (var db = new DbNorthwind()) { db.Insert(product); } This inserts all the columns from our Product class, but without retrieving the generated identity value. To do that we can use InsertWithIdentity , like this: using (var db = new DbNorthwind()) { product.ProductID = Convert.ToInt32(db.InsertWithIdentity(product)); } We need to convert the returned value to an integer since an identity field could be something other than an integer, like a GUID for example. There is also InsertOrReplace that updates a database record if found or adds it otherwise. If you need to insert only certain fields, or use values generated by the database, you could write: using (var db = new DbNorthwind()) { db.Product .Value(p => p.Name, product.Name) .Value(p => p.UnitPrice, 10.2m) .Value(p => p.Added, () => Sql.CurrentTimestamp) .Insert(); } Using this method also allows us to build insert statements like this: using (var db = new DbNorthwind()) { var statement = db.Product .Value(p => p.Name, product.Name) .Value(p => p.UnitPrice, 10.2m); if (storeAdded) statement.Value(p => p.Added, () => Sql.CurrentTimestamp); statement.Insert(); } Update Updating records follows a similar pattern to Insert. We have an extension method that updates all the columns in the database: using (var db = new DbNorthwind()) { db.Update(product); } And we also have a lower level update mechanism: using (var db = new DbNorthwind()) { db.Product .Where(p => p.ProductID == product.ProductID) .Set(p => p.Name, product.Name) .Set(p => p.UnitPrice, product.UnitPrice) .Update(); } Similarly, we can break an update query into multiple pieces if needed: using (var db = new DbNorthwind()) { var statement = db.Product .Where(p => p.ProductID == product.ProductID) .Set(p => p.Name, product.Name); if (updatePrice) statement = statement.Set(p => p.UnitPrice, product.UnitPrice); statement.Update(); } You're not limited to updating a single field. For example, we could discontinue all the products that are no longer in stock: using (var db = new DbNorthwind()) { db.Product .Where(p => p.UnitsInStock == 0) .Set(p => p.Discontinued, true) .Update(); } Delete Similar to how you update records, you can also delete records: using (var db = new DbNorthwind()) { db.Product .Where(p => p.Discontinued) .Delete(); } Bulk Copy Bulk copy feature supports the transfer of large amounts of data into a table from another data source. For faster data inserting DO NOT use a transaction. If you use a transaction an adhoc implementation of the bulk copy feature has been added in order to insert multiple lines at once. You get faster results then inserting lines one by one, but it's still slower than the database provider bulk copy. So, DO NOT use transactions whenever you can (Take care of unicity constraints, primary keys, etc. since bulk copy ignores them at insertion) [Table(Name = \"ProductsTemp\")] public class ProductTemp { public int ProductID { get; set; } [Column(Name = \"ProductName\"), NotNull] public string Name { get; set; } // ... other columns ... } list = List<ProductTemp> using (var db = new DbNorthwind()) { db.BulkCopy(list); } Transactions Using database transactions is easy. All you have to do is call BeginTransaction() on your DataConnection, run one or more queries, and then commit the changes by calling CommitTransaction(). If something happened and you need to roll back your changes you can either call RollbackTransaction() or throw an exception. using (var db = new DbNorthwind()) { db.BeginTransaction(); // ... select / insert / update / delete ... if (somethingIsNotRight) { db.RollbackTransaction(); } else { db.CommitTransaction(); } } Also, you can use .NET built-in TransactionScope class: // don't forget isolation level is serializable by default using (var transaction = new TransactionScope()) { using (var db = new DbNorthwind()) { ... } transaction.Complete(); } MiniProfiler If you would like to use MiniProfiler from StackExchange you'd need to wrap ProfiledDbConnection around our regular DataConnection. public class DbDataContext : DataConnection { #if !DEBUG public DbDataContext() : base(\"Northwind\") { } #else public DbDataContext() : base(GetDataProvider(), GetConnection()) { } private static IDataProvider GetDataProvider() { return new SqlServerDataProvider(\"\", SqlServerVersion.v2012); } private static IDbConnection GetConnection() { LinqToDB.Common.Configuration.AvoidSpecificDataProviderAPI = true; var dbConnection = new SqlConnection(@\"Server=.\\SQL;Database=Northwind;Trusted_Connection=True;Enlist=False;\"); return new StackExchange.Profiling.Data.ProfiledDbConnection(dbConnection, MiniProfiler.Current); } #endif } This assumes that you only want to use MiniProfiler while in DEBUG mode and that you are using SQL Server for your database. If you're using a different database you would need to change GetDataProvider() to return the appropriate IDataProvider. For example, if using MySql you would use: private static IDataProvider GetDataProvider() { return new LinqToDB.DataProvider.MySql.MySqlDataProvider(); }"
  },
  "articles/CONTRIBUTING.html": {
    "href": "articles/CONTRIBUTING.html",
    "title": "Development rules and regulations, code style | Linq To DB (aka linq2db)",
    "keywords": "Development rules and regulations, code style Follow this document Project structure description linq2db Solution and folder structure .\\ //Root folder .\\Data // Contains fileserver databases and scripts for creating and initializing test databases .\\NuGet // Stuff for nuget package, readme.txt .\\Redist // Redistributable binaries unavailable in nugget .\\Source // Source .\\Tests // Unit tests stuff .\\Tests\\FSharp // F# models and tests .\\Tests\\Linq // All unit tests .\\Tests\\Model // Models for tests .\\Tests\\TestApp // Test application .\\Tests\\Tests.NetCore // Obsolete, needed due to some VS2015 problems with building and running Core tests .\\Tests\\VisualBasic //Visual Basic models and tests Solutions: .\\linq2db.4.5.sln - VS2015/2017 solution, .Net 4.5 (NO SL and WS projects) .\\linq2db.sln - VS2015 solution, .Net 4.5, SL, WS projects .\\linq2db.core.sln - VS2015 solution, .Net Core projects Projects: .\\Source\\LinqToDB.csproj - .Net 4.5 .\\Source\\LinqToDB.Silverlight.4.csproj - SL 4 .\\Source\\LinqToDB.Silverlight.5.csproj - SL 5 .\\Source\\LinqToDB.WindowsStore.csproj - WS 8 .\\Source\\LinqToDB.xproj and .\\Source\\project.json - VS2015 .Net Core project Building You can use any solution for building and running tests. But you also should care about other supported platforms. To check if your changes have not affected other projects you can: run .\\Source\\compile.cmd - builds .Net 4, .Net 4.5, .Net WS run dotnet build - in Root folder to build .Net Core ## Different platforms support Because of compiling for different platforms we do use: Conditional compilation. Different projects and configurations define compilation symbols: FW4 - .Net 4.0 compatibility level SILVERLIGHT - Silverlight compatibility level NETFX_CORE - Windows Store 8 compatibility level NOASYNC - async is not supported NETSTANDARD - .Net Core (netstandard1.6) compatibility level NOFSHARP - used by .Net Core test project to avoid compiling code dependent on F# Exclude files from build - some files are excluded from build in projects, corresponding to target framework Implementing missing classes and enums. There are some under .\\Source\\Compatibility folder. ## Run tests NUnit3 is used as unit testing framework. Most tests are run for all supported databases, and written in same pattern: ```cs [TestFixture] public class Test: TestBase // TestBase - base class, provides base methods and object data sources { // DataContextSourceAttribute - implements Nunit ITestBuilder and provides context values to test [DataContextSource] public void Test(string context) { // TestBase.GetDataContext - creates new IDataContext, supports creating WCF client and server using(var db = GetDataContext(context)) { // Here is the most interesting // this.Person - list of persons, corresponding Person table in database (derived from TestBase) // db.Person - database table // So test checks that LINQ to Objects query produces the same result as executed database query AreEqual(this.Person.Where( => .Name == \"John\"), db.Person.Where( => .Name == \"John\")); } } } ### Configure data providers for tests `DataContextSourceAttribute` generates tests for each configured data provider, configuration is taken: 1. From `.\\Tests\\Linq\\UserDataProviders.txt` (if any) (UserDataProviders.Core.txt for .Net Core) 1. From `.\\Tests\\Linq\\DefaultDataProviders.txt` (DefaultDataProviders.Core.txt for .Net Core) All default connection strings are stored in `.\\Tests\\Linq\\app.config` `DataProviders.txt` structure is: `[!]ConfigurationName[* ConnectionString][* DataProviderName]` * `[]` - optional parts * `*` - is used as field delimiter * `--` - is used to comment line Parts: * `!` - means that this configuration is used as `DataConnection.DefaultConfiguration` * `ConfigurationName` - configuration name (passed to test as `context` parameter) * ConnectionString - used to override default connection string from `app.config` * DataProviderName - used to define DataProvider for configuration **UserDataProviders.txt example** -- this is comment line and would be ignored Access !SQLiteMs * Data Source=Database\\TestData.sqlite * SQLite this does mean: * Run tests for `Access` configuration with default settings * Run tests for `SQLiteMs` configuration. This configuration is used as default, with connection string `Data Source=Database\\TestData.sqlite` and `SQLite` data provider. More examples are below in CI section. So tests are done only for providers defined in `DataProviders.txt`, defaults are in `DefaultDataProviders.txt` (they are Access, SQL CE, SQLite - all file server databases). To define your own configurations **DO NOT EDIT** `DefaultDataProviders.txt` - create `.\\Tests\\Linq\\UserDataProviders.txt` and define needed configurations. When all tests are executed, first `_CreateData` tests will be run - those execute SQL scripts and insert default data to database, so if you are going to run one test be sure to run `_CreateData` before it manually. Also - if your test changes database data, be sure to revert those changes (!) to avoid side effects for other tests. # Continuous Integration We do run builds and tests with: * [AppVeyor](https://ci.appveyor.com/project/igor-tkachev/linq2db) (Windows) [appveyor.yml](https://github.com/linq2db/linq2db/blob/master/appveyor.yml). Makes build and runs tests for: * .Net 4.5: [AppveyorDataProviders.txt](https://github.com/linq2db/linq2db/blob/master/Tests/Linq/AppveyorDataProviders.txt) * .Net Core: [AppveyorDataProviders.Core.txt](https://github.com/linq2db/linq2db/blob/master/Tests/Linq/AppveyorDataProviders.Core.txt) * [Travis](https://travis-ci.org/linq2db/linq2db) (Linux) [.travis.yml](https://github.com/linq2db/linq2db/blob/master/.travis.yml). Makes build and runs tests for: * Mono: [TravisDataProviders.txt](https://github.com/linq2db/linq2db/blob/master/Tests/Linq/TravisDataProviders.txt) * .Net Core: [TravisDataProviders.Core.txt](https://github.com/linq2db/linq2db/blob/master/Tests/Linq/TravisDataProviders.Core.txt) `xxxDataproviders` files are renamed by CI to `UserDataProviders` before running tests. ## Skip CI build If you want to skip building commit by CI (for example you have changed *.md files only) begin commit comment with `[ci skip]`. ## Publishing packages * **Release candidate** packages are published by AppVeyor to [MyGet.org](https://github.com/linq2db/linq2db#feeds) for each successful build of **master** branch. * **Release** packages are published by AppVeyor to [NuGet.org](https://github.com/linq2db/linq2db#feeds) for each successful build of **release** branch. ## Building releases 1. Update `.\\NuGet\\Readme.txt` file (append release notes) 1. Create PR from `master` to `release` branch, in comments add [@testers](https://github.com/linq2db/linq2db/wiki/How-can-i-help#testing-how-to) to notify all testers that we are ready to release 1. Wait few days for feedback from testers and approval from contributors 1. Merge PR 1. [Tag release](https://github.com/linq2db/linq2db/releases) 1. Update versions in `master` branch (this will lead to publish all next `master` builds as new version RC): * in [.\\appveyor.yml](https://github.com/linq2db/linq2db/blob/master/appveyor.yml) set `packageVersion` parameter * in [.\\Source\\project.json](https://github.com/linq2db/linq2db/blob/master/Source/project.json) set new `version` parameter * in [.\\Source\\Properties\\LinqToDBConstants.cs](https://github.com/linq2db/linq2db/blob/master/Source/Properties/LinqToDBConstants.cs) set `FullVersionString` constant. # Process In general you should follow simple rules: * Development rules and regulations, code style * Do not add new features without tests * Avoid direct pushes to `master` and `release` branches * To fix some issue or implement new feature create new branch and make pull request after you are ready to merge. Merge your PR only after contributor's review. * If you are going to implement any big feature you may want other contributors to participate (coding, code review, feature discuss and so on), so to do it: * Create new PR with **[WIP]** prefix (Work In Process) * After you are ready to merge remove the prefix & assign contributors as reviewers * If you wo have wright access, it is recommended to use central repository (not forks). Why - simple, it would allow other teammates to help you in developing (if needed). Certainly you are free to use fork if it is more convenient to you * Please avoid adding new public classes, properties, methods without XML doc * Read issues and help users * Do not EF :)"
  },
  "articles/Window-Functions-(Analytic-Functions).html": {
    "href": "articles/Window-Functions-(Analytic-Functions).html",
    "title": "| Linq To DB (aka linq2db)",
    "keywords": "Starting from version 1.8.0, linq2db supports Window Functions also known as Analytic Functions. Implementation is based on Oracle's Documentation and all mentioned functions are supported. Window functions are implemented as extension methods for static Sql.Ext property. For defining Partitioning and Ordering fluent syntax is used and it is closest as possible to original SQL syntax. C# Syntax: Sql.Ext.[Function]([Parameters]).Over().[PartitionPart].[OrderByPart].[WindowingPart].ToValue() Last function in method chain must be function ToValue() - it is a mark that method chain is finished and provides correct DataType for resulting columns. Example: var q = from p in db.Parent join c in db.Child on p.ParentID equals c.ParentID select new { Rank = Sql.Ext.Rank().Over().PartitionBy(p.Value1, c.ChildID).OrderBy(p.Value1).ThenBy(c.ChildID).ThenBy(c.ParentID).ToValue(), RowNumber = Sql.Ext.RowNumber().Over().PartitionBy(p.Value1, c.ChildID).OrderByDesc(p.Value1).ThenBy(c.ChildID).ThenByDesc(c.ParentID).ToValue(), DenseRank = Sql.Ext.DenseRank().Over().PartitionBy(p.Value1, c.ChildID).OrderBy(p.Value1).ToValue(), Sum = Sql.Ext.Sum(p.Value1).Over().PartitionBy(p.Value1, c.ChildID).OrderBy(p.Value1).ToValue(), Avg = Sql.Ext.Average<double>(p.Value1).Over().PartitionBy(p.Value1, c.ChildID).OrderBy(p.Value1).ToValue(), Count = Sql.Ext.Count(p.ParentID, Sql.AggregateModifier.All) .Over() .PartitionBy(p.Value1) .OrderBy(p.Value1).Range.Between.UnboundedPreceding.And.CurrentRow.ToValue(), }; var res = q.ToArray(); Resulting SQL: SELECT RANK() OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1], [c7].[ChildID], [c7].[ParentID]) as [c1], ROW_NUMBER() OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1] DESC, [c7].[ChildID], [c7].[ParentID] DESC) as [c2], DENSE_RANK() OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1]) as [c3], SUM([p].[Value1]) OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1]) as [c4], AVG([p].[Value1]) OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1]) as [c5], COUNT(ALL [p].[ParentID]) OVER(PARTITION BY [p].[Value1] ORDER BY [p].[Value1] RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as [c6] FROM [Parent] [p] INNER JOIN [Child] [c7] ON [p].[ParentID] = [c7].[ParentID] Note There is no limitation in window functions usage. Linq2db will create SQL and run query, if function is not supported or some part of function is limited in particular Database - error will be thrown on database side. Functions mapping The following table contains list of supported Window Functions and linq2db representation of these functions. Some functions have overloads for supporting full Window Functions syntax. SQL Function Name Linq2db Function Name AVG Sql.Ext.Average() CORR Sql.Ext.Corr() COUNT Sql.Ext.Count() COVAR_POP Sql.Ext.CovarPop() COVAR_SAMP Sql.Ext.CovarSamp() CUME_DIST Sql.Ext.CumeDist() DENSE_RANK Sql.Ext.DenseRank() FIRST Sql.Ext.[AggregateFunction].KeepFirst() FIRST_VALUE Sql.Ext.FirstValue() LAG Sql.Ext.Lag() LAST Sql.Ext.[AggregateFunction].KeepLast() LAST_VALUE Sql.Ext.LastValue() LEAD Sql.Ext.Lead() LISTAGG Sql.Ext.ListAgg() MAX Sql.Ext.Max() MEDIAN Sql.Ext.Median() MIN Sql.Ext.Min() NTH_VALUE Sql.Ext.NthValue() NTILE Sql.Ext.NTile() PERCENT_RANK Sql.Ext.PercentRank() PERCENTILE_CONT Sql.Ext.PercentileCont() PERCENTILE_DISC Sql.Ext.PercentileDisc() RANK Sql.Ext.Rank() RATIO_TO_REPORT Sql.Ext.RatioToReport() REGR_ (Linear Regression) Functions REGR_SLOPE Sql.Ext.RegrSlope() REGR_INTERCEPT Sql.Ext.RegrIntercept() REGR_COUNT Sql.Ext.RegrCount() REGR_R2 Sql.Ext.RegrR2() REGR_AVGX Sql.Ext.RegrAvgX() REGR_AVGY Sql.Ext.RegrAvgY() REGR_SXX Sql.Ext.RegrSXX() REGR_SYY Sql.Ext.RegrSYY() REGR_SXY Sql.Ext.RegrSXY() ROW_NUMBER Sql.Ext.RowNumber() STDDEV Sql.Ext.StdDev() STDDEV_POP Sql.Ext.StdDevPop() STDDEV_SAMP Sql.Ext.StdDevSamp() SUM Sql.Ext.Sum() VAR_POP Sql.Ext.VarPop() VAR_SAMP Sql.Ext.VarSamp() VARIANCE Sql.Ext.Variance() If you have found that your database supports function that is not listed in table above, you can easily create your extension. Code samples is located in Sql.Analytic.cs Engines that support Window Functions Oracle , MSSQL , Postresql , MariaDB , DB2 z/OS , DB2 LUW , DB2 iSeries , Informix , SAP HANA , SAP ASE , Firebird 3"
  },
  "articles/Issue-reporting.html": {
    "href": "articles/Issue-reporting.html",
    "title": "How to report an issue | Linq To DB (aka linq2db)",
    "keywords": "How to report an issue To help you with your problem we need to know: linq2db version you are using Database you are using Code sample, demonstrating the problem & result SQL query (if any) Explain what is wrong Certainly, the best way of reporting an issue would be the Pull Request with test, demonstrating an issue and fix. Or just the test. Please, when making such PR use data model from Test\\Model project. If your query is not obvious and it is not clear how to write minimal reproducing sample, please read above about how to generate test sample. Generating the test This page describes how to generate NUnit test, demonstrating your issue. Cleanup C:\\Users\\[username]\\AppData\\Local\\Temp\\linq2db (if exists) Set LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = true; before your failing query, and LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = true; Execute your failing query. ExpressionTest.0.cs file would be generated in C:\\Users\\[username]\\AppData\\Local\\Temp\\linq2db . This would contain unit test with your query & POCO model. Attach this file to the issue. For example: LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = true; var q = db.GetTable<MyTable>().Where(_ => _.Id > 111).ToList(); // Do not just db.GetTable<MyTable>().Where(_ => _.Id > 111), query need to be parsed & executed to generate sample LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = false;"
  },
  "articles/How-can-i-help.html": {
    "href": "articles/How-can-i-help.html",
    "title": "How can I help the project? | Linq To DB (aka linq2db)",
    "keywords": "How can I help the project? Certainly the best would be pull requests with issue fixing (please read this guide before creating PR). If you are not ready to start as developer you can: Write XML documentation. Yes, this thing we do really need - XML documentation with samples. You can take any undocumented public class or method and document it and make pull requests. Stories - you can tell your friends about linq2db, also you can post some samples and guides, it would be really great. Testing! It is really great if you can spent some of tour time to run your projects tests with new RC version. Testing how to Open new issue \"Invite me to testers team\", we'll send you an invitation. Before each official release new PR would be created with notifying all teammates. The thin you need is to update to latest RC package from MyGet and run your test, if smth. is wrong please report us, if everything is alright just approve PR"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.JoinedTable.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.JoinedTable.html",
    "title": "Class SelectQuery.JoinedTable | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.JoinedTable Inheritance System.Object SelectQuery.JoinedTable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class JoinedTable : IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source JoinedTable(SelectQuery.JoinType, ISqlTableSource, String, Boolean) Declaration public JoinedTable(SelectQuery.JoinType joinType, ISqlTableSource table, string alias, bool isWeak) Parameters Type Name Description SelectQuery.JoinType joinType ISqlTableSource table System.String alias System.Boolean isWeak | Improve this Doc View Source JoinedTable(SelectQuery.JoinType, SelectQuery.TableSource, Boolean) Declaration public JoinedTable(SelectQuery.JoinType joinType, SelectQuery.TableSource table, bool isWeak) Parameters Type Name Description SelectQuery.JoinType joinType SelectQuery.TableSource table System.Boolean isWeak | Improve this Doc View Source JoinedTable(SelectQuery.JoinType, SelectQuery.TableSource, Boolean, SelectQuery.SearchCondition) Declaration public JoinedTable(SelectQuery.JoinType joinType, SelectQuery.TableSource table, bool isWeak, SelectQuery.SearchCondition searchCondition) Parameters Type Name Description SelectQuery.JoinType joinType SelectQuery.TableSource table System.Boolean isWeak SelectQuery.SearchCondition searchCondition Properties | Improve this Doc View Source CanConvertApply Declaration public bool CanConvertApply { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Condition Declaration public SelectQuery.SearchCondition Condition { get; } Property Value Type Description SelectQuery.SearchCondition | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source IsWeak Declaration public bool IsWeak { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source JoinType Declaration public SelectQuery.JoinType JoinType { get; set; } Property Value Type Description SelectQuery.JoinType | Improve this Doc View Source Table Declaration public SelectQuery.TableSource Table { get; set; } Property Value Type Description SelectQuery.TableSource Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> action) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> action Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>)"
  },
  "api/LinqToDB.SqlQuery.SqlTableType.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTableType.html",
    "title": "Enum SqlTableType | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlTableType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum SqlTableType Fields Name Description Expression Function Table Extension Methods Sql.Between<SqlTableType>(SqlTableType, SqlTableType) Sql.NotBetween<SqlTableType>(SqlTableType, SqlTableType)"
  },
  "api/LinqToDB.SqlQuery.SqlValue.html": {
    "href": "api/LinqToDB.SqlQuery.SqlValue.html",
    "title": "Class SqlValue | Linq To DB (aka linq2db)",
    "keywords": "Class SqlValue Inheritance System.Object SqlValue Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlValue : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement, IValueContainer Constructors | Improve this Doc View Source SqlValue(Object) Declaration public SqlValue(object value) Parameters Type Name Description System.Object value | Improve this Doc View Source SqlValue(Type, Object) Declaration public SqlValue(Type systemType, object value) Parameters Type Name Description System.Type systemType System.Object value Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean Implements ISqlExpression.CanBeNull | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlExpression.Precedence | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description System.Type Implements ISqlExpression.SystemType | Improve this Doc View Source Value Declaration public object Value { get; } Property Value Type Description System.Object Implements IValueContainer.Value Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T)"
  },
  "api/LinqToDB.SqlQuery.html": {
    "href": "api/LinqToDB.SqlQuery.html",
    "title": "Namespace LinqToDB.SqlQuery | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.SqlQuery Classes Extensions ObjectSqlExpression Precedence QueryHelper QueryVisitor ReservedWords SelectQuery SelectQuery.ClauseBase SelectQuery.ClauseBase<T1, T2> SelectQuery.Column SelectQuery.Condition SelectQuery.ConditionBase<T1, T2> SelectQuery.ConditionBase<T1, T2>.Expr_ SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ SelectQuery.ConditionBase<T1, T2>.Not_ SelectQuery.CreateTableStatement SelectQuery.DeleteClause SelectQuery.FromClause SelectQuery.FromClause.Join SelectQuery.FromClause.Join.Next SelectQuery.GroupByClause SelectQuery.InsertClause SelectQuery.JoinedTable SelectQuery.OrderByClause SelectQuery.OrderByItem SelectQuery.Predicate SelectQuery.Predicate.Between SelectQuery.Predicate.Expr SelectQuery.Predicate.ExprExpr SelectQuery.Predicate.FuncLike SelectQuery.Predicate.InList SelectQuery.Predicate.InSubQuery SelectQuery.Predicate.IsNull SelectQuery.Predicate.Like SelectQuery.Predicate.NotExpr SelectQuery.SearchCondition SelectQuery.SearchCondition.Next SelectQuery.SelectClause SelectQuery.SetExpression SelectQuery.TableSource SelectQuery.Union SelectQuery.UpdateClause SelectQuery.WhereClause SelectQuery.WhereClause.Next SqlBinaryExpression SqlDataType SqlException SqlExpression SqlField SqlFunction SqlParameter SqlTable SqlTable<T> SqlValue Interfaces ICloneableElement IQueryElement ISqlExpression ISqlExpressionWalkable ISqlPredicate ISqlTableSource IValueContainer Enums DefaulNullable QueryElementType QueryType SelectQuery.JoinType SelectQuery.Predicate.Operator SqlFlags SqlTableType"
  },
  "api/LinqToDB.TakeHints.html": {
    "href": "api/LinqToDB.TakeHints.html",
    "title": "Enum TakeHints | Linq To DB (aka linq2db)",
    "keywords": "Enum TakeHints Hints for Take Namespace : LinqToDB Assembly : linq2db.dll Syntax [Flags] public enum TakeHints Fields Name Description Percent SELECT TOP 10 PERCENT WithTies SELECT TOP 10 WITH TIES Extension Methods Sql.Between<TakeHints>(TakeHints, TakeHints) Sql.NotBetween<TakeHints>(TakeHints, TakeHints)"
  },
  "api/LinqToDB.SqlProvider.html": {
    "href": "api/LinqToDB.SqlProvider.html",
    "title": "Namespace LinqToDB.SqlProvider | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.SqlProvider Classes BasicSqlBuilder BasicSqlOptimizer SqlProviderFlags ValueToSqlConverter Interfaces ISqlBuilder ISqlOptimizer Enums BasicSqlBuilder.Step ConvertType Delegates BasicSqlBuilder.ColumnSelector"
  },
  "api/LinqToDB.Mapping.ColumnAliasAttribute.html": {
    "href": "api/LinqToDB.Mapping.ColumnAliasAttribute.html",
    "title": "Class ColumnAliasAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnAliasAttribute Associates a property with another column property in a class. Inheritance System.Object System.Attribute ColumnAliasAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] public class ColumnAliasAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ColumnAliasAttribute() Declaration public ColumnAliasAttribute() | Improve this Doc View Source ColumnAliasAttribute(String) Declaration public ColumnAliasAttribute(string memberName) Parameters Type Name Description System.String memberName Properties | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source MemberName Gets or sets the name of an associated member name. Declaration public string MemberName { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Mapping.ColumnAttribute.html": {
    "href": "api/LinqToDB.Mapping.ColumnAttribute.html",
    "title": "Class ColumnAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnAttribute Associates a class with a column in a database table. Inheritance System.Object System.Attribute ColumnAttribute NotColumnAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] public class ColumnAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ColumnAttribute() Declaration public ColumnAttribute() | Improve this Doc View Source ColumnAttribute(String) Declaration public ColumnAttribute(string columnName) Parameters Type Name Description System.String columnName | Improve this Doc View Source ColumnAttribute(String, String) Declaration public ColumnAttribute(string columnName, string memberName) Parameters Type Name Description System.String columnName System.String memberName Properties | Improve this Doc View Source CanBeNull Gets or sets whether a column can contain null values. Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source CreateFormat Declaration public string CreateFormat { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataType Gets or sets the type of the database column. Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source DbType Gets or sets the name of the database column type. Declaration public string DbType { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsColumn Use NonColumnAttribute instead. Declaration public bool IsColumn { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDiscriminator Gets or sets whether a column contains a discriminator value for a LINQ to DB inheritance hierarchy. Declaration public bool IsDiscriminator { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsIdentity Gets or sets whether a column contains values that the database auto-generates. Declaration public bool IsIdentity { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPrimaryKey Gets or sets whether this class member represents a column that is part or all of the primary key of the table. Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Gets or sets the length of the database column. Declaration public int Length { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MemberName Gets or sets the name of an associated member name. Declaration public string MemberName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Gets or sets the name of a column. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Precision Gets or sets the precision of the database column. Declaration public int Precision { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PrimaryKeyOrder Gets or sets the Primary Key order. Declaration public int PrimaryKeyOrder { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Scale Gets or sets the Scale of the database column. Declaration public int Scale { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SkipOnInsert Gets or sets whether a column is insertable. Declaration public bool SkipOnInsert { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipOnUpdate Gets or sets whether a column is updatable. Declaration public bool SkipOnUpdate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Storage Gets or sets a private storage field to hold the value from a column. Declaration public string Storage { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source HasCanBeNull() Declaration public bool HasCanBeNull() Returns Type Description System.Boolean | Improve this Doc View Source HasIsIdentity() Declaration public bool HasIsIdentity() Returns Type Description System.Boolean | Improve this Doc View Source HasIsPrimaryKey() Declaration public bool HasIsPrimaryKey() Returns Type Description System.Boolean | Improve this Doc View Source HasLength() Declaration public bool HasLength() Returns Type Description System.Boolean | Improve this Doc View Source HasPrecision() Declaration public bool HasPrecision() Returns Type Description System.Boolean | Improve this Doc View Source HasScale() Declaration public bool HasScale() Returns Type Description System.Boolean | Improve this Doc View Source HasSkipOnInsert() Declaration public bool HasSkipOnInsert() Returns Type Description System.Boolean | Improve this Doc View Source HasSkipOnUpdate() Declaration public bool HasSkipOnUpdate() Returns Type Description System.Boolean"
  },
  "api/LinqToDB.Mapping.ColumnDescriptor.html": {
    "href": "api/LinqToDB.Mapping.ColumnDescriptor.html",
    "title": "Class ColumnDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnDescriptor Inheritance System.Object ColumnDescriptor Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class ColumnDescriptor Constructors | Improve this Doc View Source ColumnDescriptor(MappingSchema, ColumnAttribute, MemberAccessor) Declaration public ColumnDescriptor(MappingSchema mappingSchema, ColumnAttribute columnAttribute, MemberAccessor memberAccessor) Parameters Type Name Description MappingSchema mappingSchema ColumnAttribute columnAttribute MemberAccessor memberAccessor Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String | Improve this Doc View Source CreateFormat Declaration public string CreateFormat { get; } Property Value Type Description System.String | Improve this Doc View Source DataType Declaration public DataType DataType { get; } Property Value Type Description DataType | Improve this Doc View Source DbType Declaration public string DbType { get; } Property Value Type Description System.String | Improve this Doc View Source IsDiscriminator Declaration public bool IsDiscriminator { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsIdentity Declaration public bool IsIdentity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPrimaryKey Declaration public bool IsPrimaryKey { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Declaration public int ? Length { get; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source MemberAccessor Declaration public MemberAccessor MemberAccessor { get; } Property Value Type Description MemberAccessor | Improve this Doc View Source MemberInfo Declaration public MemberInfo MemberInfo { get; } Property Value Type Description System.Reflection.MemberInfo | Improve this Doc View Source MemberName Declaration public string MemberName { get; } Property Value Type Description System.String | Improve this Doc View Source MemberType Declaration public Type MemberType { get; } Property Value Type Description System.Type | Improve this Doc View Source Precision Declaration public int ? Precision { get; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source PrimaryKeyOrder Declaration public int PrimaryKeyOrder { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Scale Declaration public int ? Scale { get; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source SkipOnInsert Declaration public bool SkipOnInsert { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipOnUpdate Declaration public bool SkipOnUpdate { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Storage Declaration public string Storage { get; } Property Value Type Description System.String | Improve this Doc View Source StorageInfo Declaration public MemberInfo StorageInfo { get; } Property Value Type Description System.Reflection.MemberInfo | Improve this Doc View Source StorageType Declaration public Type StorageType { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source GetValue(MappingSchema, Object) Declaration public virtual object GetValue(MappingSchema mappingSchema, object obj) Parameters Type Name Description MappingSchema mappingSchema System.Object obj Returns Type Description System.Object"
  },
  "api/LinqToDB.Mapping.DataTypeAttribute.html": {
    "href": "api/LinqToDB.Mapping.DataTypeAttribute.html",
    "title": "Class DataTypeAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class DataTypeAttribute Associates a member with a column type in a database table. Inheritance System.Object System.Attribute DataTypeAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] public class DataTypeAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source DataTypeAttribute(DataType) Declaration public DataTypeAttribute(DataType dataType) Parameters Type Name Description DataType dataType | Improve this Doc View Source DataTypeAttribute(DataType, String) Declaration public DataTypeAttribute(DataType dataType, string dbType) Parameters Type Name Description DataType dataType System.String dbType | Improve this Doc View Source DataTypeAttribute(String) Declaration public DataTypeAttribute(string dbType) Parameters Type Name Description System.String dbType Properties | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataType Gets or sets the type of the database column. Declaration public DataType? DataType { get; set; } Property Value Type Description System.Nullable<LinqToDB.DataType> | Improve this Doc View Source DbType Gets or sets the name of the database column type. Declaration public string DbType { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Metadata.MetadataReader.html": {
    "href": "api/LinqToDB.Metadata.MetadataReader.html",
    "title": "Class MetadataReader | Linq To DB (aka linq2db)",
    "keywords": "Class MetadataReader Inheritance System.Object MetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class MetadataReader : IMetadataReader Constructors | Improve this Doc View Source MetadataReader(IMetadataReader[]) Declaration public MetadataReader(params IMetadataReader[] readers) Parameters Type Name Description LinqToDB.Metadata.IMetadataReader[] readers Fields | Improve this Doc View Source Default Declaration public static MetadataReader Default Field Value Type Description MetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit)where T : Attribute Parameters Type Name Description System.Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, Boolean) | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, MemberInfo, Boolean)"
  },
  "api/LinqToDB.Metadata.SystemDataLinqAttributeReader.html": {
    "href": "api/LinqToDB.Metadata.SystemDataLinqAttributeReader.html",
    "title": "Class SystemDataLinqAttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class SystemDataLinqAttributeReader Inheritance System.Object SystemDataLinqAttributeReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class SystemDataLinqAttributeReader : IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit)where T : Attribute Parameters Type Name Description System.Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, Boolean) | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, MemberInfo, Boolean)"
  },
  "api/LinqToDB.Metadata.SystemDataSqlServerAttributeReader.html": {
    "href": "api/LinqToDB.Metadata.SystemDataSqlServerAttributeReader.html",
    "title": "Class SystemDataSqlServerAttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class SystemDataSqlServerAttributeReader Inheritance System.Object SystemDataSqlServerAttributeReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class SystemDataSqlServerAttributeReader : IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit)where T : Attribute Parameters Type Name Description System.Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, Boolean) | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, MemberInfo, Boolean)"
  },
  "api/LinqToDB.Metadata.XmlAttributeReader.html": {
    "href": "api/LinqToDB.Metadata.XmlAttributeReader.html",
    "title": "Class XmlAttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class XmlAttributeReader Inheritance System.Object XmlAttributeReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class XmlAttributeReader : IMetadataReader Constructors | Improve this Doc View Source XmlAttributeReader(Stream) Declaration public XmlAttributeReader(Stream xmlDocStream) Parameters Type Name Description System.IO.Stream xmlDocStream | Improve this Doc View Source XmlAttributeReader(String) Declaration public XmlAttributeReader(string xmlFile) Parameters Type Name Description System.String xmlFile | Improve this Doc View Source XmlAttributeReader(String, Assembly) Declaration public XmlAttributeReader(string xmlFile, Assembly assembly) Parameters Type Name Description System.String xmlFile System.Reflection.Assembly assembly Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, Boolean) | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, MemberInfo, Boolean)"
  },
  "api/LinqToDB.ServiceModel.LinqServiceResult.html": {
    "href": "api/LinqToDB.ServiceModel.LinqServiceResult.html",
    "title": "Class LinqServiceResult | Linq To DB (aka linq2db)",
    "keywords": "Class LinqServiceResult Inheritance System.Object LinqServiceResult Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class LinqServiceResult Properties | Improve this Doc View Source Data Declaration public List<string[]> Data { get; set; } Property Value Type Description System.Collections.Generic.List<System.String[]> | Improve this Doc View Source FieldCount Declaration public int FieldCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source FieldNames Declaration public string[] FieldNames { get; set; } Property Value Type Description System.String[] | Improve this Doc View Source FieldTypes Declaration public Type[] FieldTypes { get; set; } Property Value Type Description System.Type[] | Improve this Doc View Source QueryID Declaration public Guid QueryID { get; set; } Property Value Type Description System.Guid | Improve this Doc View Source RowCount Declaration public int RowCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source VaryingTypes Declaration public Type[] VaryingTypes { get; set; } Property Value Type Description System.Type[]"
  },
  "api/LinqToDB.ServiceModel.RemoteDataContextBase.html": {
    "href": "api/LinqToDB.ServiceModel.RemoteDataContextBase.html",
    "title": "Class RemoteDataContextBase | Linq To DB (aka linq2db)",
    "keywords": "Class RemoteDataContextBase Inheritance System.Object RemoteDataContextBase ServiceModelDataContext SoapDataContext Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public abstract class RemoteDataContextBase : IDataContext, IDisposable Properties | Improve this Doc View Source CloseAfterUse Declaration public bool CloseAfterUse { get; set; } Property Value Type Description System.Boolean Implements IDataContext.CloseAfterUse | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source ContextIDPrefix Declaration protected abstract string ContextIDPrefix { get; } Property Value Type Description System.String | Improve this Doc View Source Disposed Declaration protected bool Disposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source GetSqlOptimizer Declaration public Func<ISqlOptimizer> GetSqlOptimizer { get; } Property Value Type Description System.Func<LinqToDB.SqlProvider.ISqlOptimizer> Implements IDataContext.GetSqlOptimizer | Improve this Doc View Source InlineParameters Declaration public bool InlineParameters { get; set; } Property Value Type Description System.Boolean Implements IDataContext.InlineParameters | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; set; } Property Value Type Description MappingSchema Implements IDataContext.MappingSchema | Improve this Doc View Source NextQueryHints Declaration public List<string> NextQueryHints { get; } Property Value Type Description System.Collections.Generic.List<System.String> Implements IDataContext.NextQueryHints | Improve this Doc View Source QueryHints Declaration public List<string> QueryHints { get; } Property Value Type Description System.Collections.Generic.List<System.String> Implements IDataContext.QueryHints | Improve this Doc View Source SqlOptimizerType Declaration public virtual Type SqlOptimizerType { get; set; } Property Value Type Description System.Type | Improve this Doc View Source SqlProviderType Declaration public virtual Type SqlProviderType { get; set; } Property Value Type Description System.Type Methods | Improve this Doc View Source BeginBatch() Declaration public void BeginBatch() | Improve this Doc View Source Clone() Declaration protected abstract IDataContext Clone() Returns Type Description IDataContext | Improve this Doc View Source CommitBatch() Declaration public void CommitBatch() | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements System.IDisposable.Dispose() | Improve this Doc View Source GetClient() Declaration protected abstract ILinqService GetClient() Returns Type Description ILinqService | Improve this Doc View Source ReleaseQuery(Object) Declaration public void ReleaseQuery(object query) Parameters Type Name Description System.Object query Implements IDataContext.ReleaseQuery(Object) | Improve this Doc View Source ThrowOnDisposed() Declaration protected void ThrowOnDisposed() Events | Improve this Doc View Source OnClosing Declaration public event EventHandler OnClosing Event Type Type Description System.EventHandler Implements IDataContext.OnClosing Explicit Interface Implementations | Improve this Doc View Source IDataContext.Clone(Boolean) Declaration IDataContext IDataContext.Clone(bool forNestedQuery) Parameters Type Name Description System.Boolean forNestedQuery Returns Type Description IDataContext Implements IDataContext.Clone(Boolean) | Improve this Doc View Source IDataContext.Close() Declaration void IDataContext.Close() Implements IDataContext.Close() | Improve this Doc View Source IDataContext.ContextID Declaration string IDataContext.ContextID { get; } Returns Type Description System.String Implements IDataContext.ContextID | Improve this Doc View Source IDataContext.CreateSqlProvider Declaration Func<ISqlBuilder> IDataContext.CreateSqlProvider { get; } Returns Type Description System.Func<LinqToDB.SqlProvider.ISqlBuilder> Implements IDataContext.CreateSqlProvider | Improve this Doc View Source IDataContext.DataReaderType Declaration Type IDataContext.DataReaderType { get; } Returns Type Description System.Type Implements IDataContext.DataReaderType | Improve this Doc View Source IDataContext.ExecuteNonQuery(Object) Declaration int IDataContext.ExecuteNonQuery(object query) Parameters Type Name Description System.Object query Returns Type Description System.Int32 Implements IDataContext.ExecuteNonQuery(Object) | Improve this Doc View Source IDataContext.ExecuteReader(Object) Declaration IDataReader IDataContext.ExecuteReader(object query) Parameters Type Name Description System.Object query Returns Type Description System.Data.IDataReader Implements IDataContext.ExecuteReader(Object) | Improve this Doc View Source IDataContext.ExecuteScalar(Object) Declaration object IDataContext.ExecuteScalar(object query) Parameters Type Name Description System.Object query Returns Type Description System.Object Implements IDataContext.ExecuteScalar(Object) | Improve this Doc View Source IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration Expression IDataContext.GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema System.Data.IDataReader reader System.Int32 idx System.Linq.Expressions.Expression readerExpression System.Type toType Returns Type Description System.Linq.Expressions.Expression Implements IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) | Improve this Doc View Source IDataContext.GetSqlText(Object) Declaration string IDataContext.GetSqlText(object query) Parameters Type Name Description System.Object query Returns Type Description System.String Implements IDataContext.GetSqlText(Object) | Improve this Doc View Source IDataContext.IsDBNullAllowed(IDataReader, Int32) Declaration bool ? IDataContext.IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description System.Data.IDataReader reader System.Int32 idx Returns Type Description System.Nullable<System.Boolean> Implements IDataContext.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source IDataContext.SetQuery(IQueryContext) Declaration object IDataContext.SetQuery(IQueryContext queryContext) Parameters Type Name Description IQueryContext queryContext Returns Type Description System.Object Implements IDataContext.SetQuery(IQueryContext) | Improve this Doc View Source IDataContext.SqlProviderFlags Declaration SqlProviderFlags IDataContext.SqlProviderFlags { get; } Returns Type Description SqlProviderFlags Implements IDataContext.SqlProviderFlags Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplace<T>(IDataContext, T) DataExtensions.InsertWithIdentity<T>(IDataContext, T) DataExtensions.Update<T>(IDataContext, T) DataExtensions.Delete<T>(IDataContext, T) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaulNullable) DataExtensions.DropTable<T>(IDataContext, String, String, String) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>)"
  },
  "api/LinqToDB.ServiceModel.ServiceModelDataContext.html": {
    "href": "api/LinqToDB.ServiceModel.ServiceModelDataContext.html",
    "title": "Class ServiceModelDataContext | Linq To DB (aka linq2db)",
    "keywords": "Class ServiceModelDataContext Inheritance System.Object RemoteDataContextBase ServiceModelDataContext Inherited Members RemoteDataContextBase.Configuration RemoteDataContextBase.IDataContext.ContextID RemoteDataContextBase.MappingSchema RemoteDataContextBase.InlineParameters RemoteDataContextBase.CloseAfterUse RemoteDataContextBase.QueryHints RemoteDataContextBase.NextQueryHints RemoteDataContextBase.SqlProviderType RemoteDataContextBase.SqlOptimizerType RemoteDataContextBase.IDataContext.SqlProviderFlags RemoteDataContextBase.IDataContext.DataReaderType RemoteDataContextBase.IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) RemoteDataContextBase.IDataContext.IsDBNullAllowed(IDataReader, Int32) RemoteDataContextBase.IDataContext.CreateSqlProvider RemoteDataContextBase.GetSqlOptimizer RemoteDataContextBase.BeginBatch() RemoteDataContextBase.CommitBatch() RemoteDataContextBase.IDataContext.SetQuery(IQueryContext) RemoteDataContextBase.IDataContext.ExecuteNonQuery(Object) RemoteDataContextBase.IDataContext.ExecuteScalar(Object) RemoteDataContextBase.IDataContext.ExecuteReader(Object) RemoteDataContextBase.ReleaseQuery(Object) RemoteDataContextBase.IDataContext.GetSqlText(Object) RemoteDataContextBase.IDataContext.Clone(Boolean) RemoteDataContextBase.OnClosing RemoteDataContextBase.Disposed RemoteDataContextBase.ThrowOnDisposed() RemoteDataContextBase.IDataContext.Close() RemoteDataContextBase.Dispose() Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class ServiceModelDataContext : RemoteDataContextBase, IDataContext, IDisposable Constructors | Improve this Doc View Source ServiceModelDataContext(Binding, EndpointAddress) Declaration public ServiceModelDataContext(Binding binding, EndpointAddress endpointAddress) Parameters Type Name Description System.ServiceModel.Channels.Binding binding System.ServiceModel.EndpointAddress endpointAddress | Improve this Doc View Source ServiceModelDataContext(String) Declaration public ServiceModelDataContext(string endpointConfigurationName) Parameters Type Name Description System.String endpointConfigurationName | Improve this Doc View Source ServiceModelDataContext(String, EndpointAddress) Declaration public ServiceModelDataContext(string endpointConfigurationName, EndpointAddress endpointAddress) Parameters Type Name Description System.String endpointConfigurationName System.ServiceModel.EndpointAddress endpointAddress | Improve this Doc View Source ServiceModelDataContext(String, String) Declaration public ServiceModelDataContext(string endpointConfigurationName, string remoteAddress) Parameters Type Name Description System.String endpointConfigurationName System.String remoteAddress Properties | Improve this Doc View Source Binding Declaration public Binding Binding { get; } Property Value Type Description System.ServiceModel.Channels.Binding | Improve this Doc View Source ContextIDPrefix Declaration protected override string ContextIDPrefix { get; } Property Value Type Description System.String Overrides RemoteDataContextBase.ContextIDPrefix Methods | Improve this Doc View Source Clone() Declaration protected override IDataContext Clone() Returns Type Description IDataContext Overrides RemoteDataContextBase.Clone() | Improve this Doc View Source GetClient() Declaration protected override ILinqService GetClient() Returns Type Description ILinqService Overrides RemoteDataContextBase.GetClient() Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplace<T>(IDataContext, T) DataExtensions.InsertWithIdentity<T>(IDataContext, T) DataExtensions.Update<T>(IDataContext, T) DataExtensions.Delete<T>(IDataContext, T) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaulNullable) DataExtensions.DropTable<T>(IDataContext, String, String, String) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>)"
  },
  "api/LinqToDB.ServiceModel.SoapDataContext.html": {
    "href": "api/LinqToDB.ServiceModel.SoapDataContext.html",
    "title": "Class SoapDataContext | Linq To DB (aka linq2db)",
    "keywords": "Class SoapDataContext Inheritance System.Object RemoteDataContextBase SoapDataContext Inherited Members RemoteDataContextBase.Configuration RemoteDataContextBase.IDataContext.ContextID RemoteDataContextBase.MappingSchema RemoteDataContextBase.InlineParameters RemoteDataContextBase.CloseAfterUse RemoteDataContextBase.QueryHints RemoteDataContextBase.NextQueryHints RemoteDataContextBase.SqlProviderType RemoteDataContextBase.SqlOptimizerType RemoteDataContextBase.IDataContext.SqlProviderFlags RemoteDataContextBase.IDataContext.DataReaderType RemoteDataContextBase.IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) RemoteDataContextBase.IDataContext.IsDBNullAllowed(IDataReader, Int32) RemoteDataContextBase.IDataContext.CreateSqlProvider RemoteDataContextBase.GetSqlOptimizer RemoteDataContextBase.BeginBatch() RemoteDataContextBase.CommitBatch() RemoteDataContextBase.IDataContext.SetQuery(IQueryContext) RemoteDataContextBase.IDataContext.ExecuteNonQuery(Object) RemoteDataContextBase.IDataContext.ExecuteScalar(Object) RemoteDataContextBase.IDataContext.ExecuteReader(Object) RemoteDataContextBase.ReleaseQuery(Object) RemoteDataContextBase.IDataContext.GetSqlText(Object) RemoteDataContextBase.IDataContext.Clone(Boolean) RemoteDataContextBase.OnClosing RemoteDataContextBase.Disposed RemoteDataContextBase.ThrowOnDisposed() RemoteDataContextBase.IDataContext.Close() RemoteDataContextBase.Dispose() Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class SoapDataContext : RemoteDataContextBase, IDataContext, IDisposable Constructors | Improve this Doc View Source SoapDataContext(Binding, EndpointAddress) Declaration public SoapDataContext(Binding binding, EndpointAddress endpointAddress) Parameters Type Name Description System.ServiceModel.Channels.Binding binding System.ServiceModel.EndpointAddress endpointAddress | Improve this Doc View Source SoapDataContext(String) Declaration public SoapDataContext(string endpointConfigurationName) Parameters Type Name Description System.String endpointConfigurationName | Improve this Doc View Source SoapDataContext(String, EndpointAddress) Declaration public SoapDataContext(string endpointConfigurationName, EndpointAddress endpointAddress) Parameters Type Name Description System.String endpointConfigurationName System.ServiceModel.EndpointAddress endpointAddress | Improve this Doc View Source SoapDataContext(String, String) Declaration public SoapDataContext(string endpointConfigurationName, string remoteAddress) Parameters Type Name Description System.String endpointConfigurationName System.String remoteAddress Properties | Improve this Doc View Source Binding Declaration public Binding Binding { get; } Property Value Type Description System.ServiceModel.Channels.Binding | Improve this Doc View Source ContextIDPrefix Declaration protected override string ContextIDPrefix { get; } Property Value Type Description System.String Overrides RemoteDataContextBase.ContextIDPrefix Methods | Improve this Doc View Source Clone() Declaration protected override IDataContext Clone() Returns Type Description IDataContext Overrides RemoteDataContextBase.Clone() | Improve this Doc View Source GetClient() Declaration protected override ILinqService GetClient() Returns Type Description ILinqService Overrides RemoteDataContextBase.GetClient() Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplace<T>(IDataContext, T) DataExtensions.InsertWithIdentity<T>(IDataContext, T) DataExtensions.Update<T>(IDataContext, T) DataExtensions.Delete<T>(IDataContext, T) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaulNullable) DataExtensions.DropTable<T>(IDataContext, String, String, String) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>)"
  },
  "api/LinqToDB.Sql.SqlExtensionParam.html": {
    "href": "api/LinqToDB.Sql.SqlExtensionParam.html",
    "title": "Class Sql.SqlExtensionParam | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.SqlExtensionParam Inheritance System.Object Sql.SqlExtensionParam Namespace : LinqToDB Assembly : linq2db.dll Syntax public class SqlExtensionParam Constructors | Improve this Doc View Source SqlExtensionParam(String, Sql.SqlExtension) Declaration public SqlExtensionParam(string name, Sql.SqlExtension extension) Parameters Type Name Description System.String name Sql.SqlExtension extension | Improve this Doc View Source SqlExtensionParam(String, ISqlExpression) Declaration public SqlExtensionParam(string name, ISqlExpression expression) Parameters Type Name Description System.String name ISqlExpression expression Properties | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source Extension Declaration public Sql.SqlExtension Extension { get; set; } Property Value Type Description Sql.SqlExtension | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Sql.TableExpressionAttribute.html": {
    "href": "api/LinqToDB.Sql.TableExpressionAttribute.html",
    "title": "Class Sql.TableExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.TableExpressionAttribute Inheritance System.Object System.Attribute Sql.TableFunctionAttribute Sql.TableExpressionAttribute CalculationViewInputParametersExpressionAttribute FreeTextTableExpressionAttribute Inherited Members Sql.TableFunctionAttribute.Configuration Sql.TableFunctionAttribute.Schema Sql.TableFunctionAttribute.Database Sql.TableFunctionAttribute.ArgIndices Sql.TableFunctionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)] public class TableExpressionAttribute : Sql.TableFunctionAttribute, _Attribute Constructors | Improve this Doc View Source TableExpressionAttribute(String) Declaration public TableExpressionAttribute(string expression) Parameters Type Name Description System.String expression | Improve this Doc View Source TableExpressionAttribute(String, Int32[]) Declaration public TableExpressionAttribute(string expression, params int[] argIndices) Parameters Type Name Description System.String expression System.Int32[] argIndices | Improve this Doc View Source TableExpressionAttribute(String, String) Declaration public TableExpressionAttribute(string sqlProvider, string expression) Parameters Type Name Description System.String sqlProvider System.String expression | Improve this Doc View Source TableExpressionAttribute(String, String, Int32[]) Declaration public TableExpressionAttribute(string sqlProvider, string expression, params int[] argIndices) Parameters Type Name Description System.String sqlProvider System.String expression System.Int32[] argIndices Properties | Improve this Doc View Source Expression Declaration public string Expression { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Declaration protected string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>) Declaration public override void SetTable(MappingSchema mappingSchema, SqlTable table, MemberInfo member, IEnumerable<Expression> arguments, IEnumerable<ISqlExpression> sqlArgs) Parameters Type Name Description MappingSchema mappingSchema SqlTable table System.Reflection.MemberInfo member System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlExpression> sqlArgs Overrides Sql.TableFunctionAttribute.SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>)"
  },
  "api/LinqToDB.Sql.TableFunctionAttribute.html": {
    "href": "api/LinqToDB.Sql.TableFunctionAttribute.html",
    "title": "Class Sql.TableFunctionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.TableFunctionAttribute Inheritance System.Object System.Attribute Sql.TableFunctionAttribute Sql.TableExpressionAttribute Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)] public class TableFunctionAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source TableFunctionAttribute() Declaration public TableFunctionAttribute() | Improve this Doc View Source TableFunctionAttribute(String) Declaration public TableFunctionAttribute(string name) Parameters Type Name Description System.String name | Improve this Doc View Source TableFunctionAttribute(String, Int32[]) Declaration public TableFunctionAttribute(string name, params int[] argIndices) Parameters Type Name Description System.String name System.Int32[] argIndices | Improve this Doc View Source TableFunctionAttribute(String, String) Declaration public TableFunctionAttribute(string configuration, string name) Parameters Type Name Description System.String configuration System.String name | Improve this Doc View Source TableFunctionAttribute(String, String, Int32[]) Declaration public TableFunctionAttribute(string configuration, string name, params int[] argIndices) Parameters Type Name Description System.String configuration System.String name System.Int32[] argIndices Properties | Improve this Doc View Source ArgIndices Declaration public int[] ArgIndices { get; set; } Property Value Type Description System.Int32[] | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Schema Declaration public string Schema { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ConvertArgs(MemberInfo, ISqlExpression[]) Declaration protected ISqlExpression[] ConvertArgs(MemberInfo member, ISqlExpression[] args) Parameters Type Name Description System.Reflection.MemberInfo member LinqToDB.SqlQuery.ISqlExpression[] args Returns Type Description LinqToDB.SqlQuery.ISqlExpression[] | Improve this Doc View Source SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>) Declaration public virtual void SetTable(MappingSchema mappingSchema, SqlTable table, MemberInfo member, IEnumerable<Expression> arguments, IEnumerable<ISqlExpression> sqlArgs) Parameters Type Name Description MappingSchema mappingSchema SqlTable table System.Reflection.MemberInfo member System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlExpression> sqlArgs"
  },
  "api/LinqToDB.Sql.html": {
    "href": "api/LinqToDB.Sql.html",
    "title": "Class Sql | Linq To DB (aka linq2db)",
    "keywords": "Class Sql Inheritance System.Object Sql Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class Sql Properties | Improve this Doc View Source BigInt Declaration [Sql.Property(\"Oracle\", \"Number(19)\", ServerSideOnly = true)] [Sql.Property(\"BigInt\", ServerSideOnly = true)] public static long BigInt { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Bit Declaration [Sql.Property(\"Informix\", \"Boolean\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"Boolean\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"Boolean\", ServerSideOnly = true)] [Sql.Property(\"SQLite\", \"Boolean\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"TinyInt\", ServerSideOnly = true)] [Sql.Property(\"Bit\", ServerSideOnly = true)] public static bool Bit { get; } Property Value Type Description System.Boolean | Improve this Doc View Source CurrentTimestamp Declaration [Sql.Property(\"CURRENT_TIMESTAMP\", ServerSideOnly = true)] [Sql.Property(\"Informix\", \"CURRENT\", ServerSideOnly = true)] [Sql.Property(\"Access\", \"Now\", ServerSideOnly = true)] [Sql.Function(\"SqlCe\", \"GetDate\", ServerSideOnly = true)] [Sql.Function(\"Sybase\", \"GetDate\", ServerSideOnly = true)] public static DateTime CurrentTimestamp { get; } Property Value Type Description System.DateTime | Improve this Doc View Source CurrentTimestamp2 Declaration [Sql.Property(\"CURRENT_TIMESTAMP\")] [Sql.Property(\"Informix\", \"CURRENT\")] [Sql.Property(\"Access\", \"Now\")] [Sql.Function(\"SqlCe\", \"GetDate\")] [Sql.Function(\"Sybase\", \"GetDate\")] public static DateTime CurrentTimestamp2 { get; } Property Value Type Description System.DateTime | Improve this Doc View Source Date Declaration [Sql.Property(\"SqlServer.2000\", \"Datetime\", ServerSideOnly = true)] [Sql.Property(\"SqlServer.2005\", \"Datetime\", ServerSideOnly = true)] [Sql.Property(\"SqlCe\", \"Datetime\", ServerSideOnly = true)] [Sql.Property(\"Date\", ServerSideOnly = true)] public static DateTime Date { get; } Property Value Type Description System.DateTime | Improve this Doc View Source DateFirst Declaration [Sql.Property(\"@@DATEFIRST\")] public static int DateFirst { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DateTime Declaration [Sql.Property(\"PostgreSQL\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"DateTime\", ServerSideOnly = true)] public static DateTime DateTime { get; } Property Value Type Description System.DateTime | Improve this Doc View Source DateTime2 Declaration [Sql.Property(\"SqlServer.2000\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"SqlServer.2005\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"SqlCe\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"Sybase\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"DateTime2\", ServerSideOnly = true)] public static DateTime DateTime2 { get; } Property Value Type Description System.DateTime | Improve this Doc View Source DateTimeOffset Declaration [Sql.Property(\"PostgreSQL\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"SqlServer.2012\", \"DateTimeOffset\", ServerSideOnly = true)] [Sql.Property(\"SqlServer.2008\", \"DateTimeOffset\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"DateTime\", ServerSideOnly = true)] public static DateTimeOffset DateTimeOffset { get; } Property Value Type Description System.DateTimeOffset | Improve this Doc View Source DefaultChar Declaration [Sql.Property(\"SqlCe\", \"NChar\", ServerSideOnly = true)] [Sql.Property(\"Char\", ServerSideOnly = true)] public static string DefaultChar { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultDecimal Declaration [Sql.Property(\"Decimal\", ServerSideOnly = true)] public static decimal DefaultDecimal { get; } Property Value Type Description System.Decimal | Improve this Doc View Source DefaultNChar Declaration [Sql.Property(\"DB2\", \"Char\", ServerSideOnly = true)] [Sql.Property(\"NChar\", ServerSideOnly = true)] public static string DefaultNChar { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultNVarChar Declaration [Sql.Property(\"DB2\", \"Char\", ServerSideOnly = true)] [Sql.Property(\"Oracle\", \"VarChar2\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"VarChar\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"VarChar\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"Char\", ServerSideOnly = true)] [Sql.Property(\"NVarChar\", ServerSideOnly = true)] public static string DefaultNVarChar { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultVarChar Declaration [Sql.Property(\"MySql\", \"Char\", ServerSideOnly = true)] [Sql.Property(\"SqlCe\", \"NVarChar\", ServerSideOnly = true)] [Sql.Property(\"VarChar\", ServerSideOnly = true)] public static string DefaultVarChar { get; } Property Value Type Description System.String | Improve this Doc View Source Ext Declaration public static Sql.ISqlExtension Ext { get; } Property Value Type Description Sql.ISqlExtension | Improve this Doc View Source Float Declaration [Sql.Property(\"MySql\", \"Decimal(29,10)\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"Double\", ServerSideOnly = true)] [Sql.Property(\"Float\", ServerSideOnly = true)] public static double Float { get; } Property Value Type Description System.Double | Improve this Doc View Source Int Declaration [Sql.Property(\"MySql\", \"Signed\", ServerSideOnly = true)] [Sql.Property(\"Int\", ServerSideOnly = true)] public static int Int { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Money Declaration [Sql.Property(\"Oracle\", \"Number(19,4)\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"Decimal(18,4)\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"Decimal(19,4)\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"Decimal(19,4)\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"Decimal(19,4)\", ServerSideOnly = true)] [Sql.Property(\"Money\", ServerSideOnly = true)] public static decimal Money { get; } Property Value Type Description System.Decimal | Improve this Doc View Source Real Declaration [Sql.Property(\"MySql\", \"Decimal(29,10)\", ServerSideOnly = true)] [Sql.Property(\"Real\", ServerSideOnly = true)] public static float Real { get; } Property Value Type Description System.Single | Improve this Doc View Source SmallDateTime Declaration [Sql.Property(\"PostgreSQL\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"TimeStamp\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"SqlCe\", \"DateTime\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"SecondDate\", ServerSideOnly = true)] [Sql.Property(\"SmallDateTime\", ServerSideOnly = true)] public static DateTime SmallDateTime { get; } Property Value Type Description System.DateTime | Improve this Doc View Source SmallInt Declaration [Sql.Property(\"MySql\", \"Signed\", ServerSideOnly = true)] [Sql.Property(\"SmallInt\", ServerSideOnly = true)] public static short SmallInt { get; } Property Value Type Description System.Int16 | Improve this Doc View Source SmallMoney Declaration [Sql.Property(\"Informix\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"Oracle\", \"Number(10,4)\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"SqlCe\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"SapHana\", \"Decimal(10,4)\", ServerSideOnly = true)] [Sql.Property(\"SmallMoney\", ServerSideOnly = true)] public static decimal SmallMoney { get; } Property Value Type Description System.Decimal | Improve this Doc View Source Time Declaration [Sql.Property(\"Time\", ServerSideOnly = true)] public static DateTime Time { get; } Property Value Type Description System.DateTime | Improve this Doc View Source TinyInt Declaration [Sql.Property(\"DB2\", \"SmallInt\", ServerSideOnly = true)] [Sql.Property(\"Informix\", \"SmallInt\", ServerSideOnly = true)] [Sql.Property(\"Oracle\", \"Number(3)\", ServerSideOnly = true)] [Sql.Property(\"DB2\", \"SmallInt\", ServerSideOnly = true)] [Sql.Property(\"Firebird\", \"SmallInt\", ServerSideOnly = true)] [Sql.Property(\"PostgreSQL\", \"SmallInt\", ServerSideOnly = true)] [Sql.Property(\"MySql\", \"Unsigned\", ServerSideOnly = true)] [Sql.Property(\"TinyInt\", ServerSideOnly = true)] public static byte TinyInt { get; } Property Value Type Description System.Byte Methods | Improve this Doc View Source Abs(Nullable<Decimal>) Declaration [Sql.Function] public static decimal ? Abs(decimal ? value) Parameters Type Name Description System.Nullable<System.Decimal> value Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source Abs(Nullable<Double>) Declaration [Sql.Function] public static double ? Abs(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Abs(Nullable<Int16>) Declaration [Sql.Function] public static short ? Abs(short ? value) Parameters Type Name Description System.Nullable<System.Int16> value Returns Type Description System.Nullable<System.Int16> | Improve this Doc View Source Abs(Nullable<Int32>) Declaration [Sql.Function] public static int ? Abs(int ? value) Parameters Type Name Description System.Nullable<System.Int32> value Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Abs(Nullable<Int64>) Declaration [Sql.Function] public static long ? Abs(long ? value) Parameters Type Name Description System.Nullable<System.Int64> value Returns Type Description System.Nullable<System.Int64> | Improve this Doc View Source Abs(Nullable<SByte>) Declaration [CLSCompliant(false)] [Sql.Function] public static sbyte ? Abs(sbyte ? value) Parameters Type Name Description System.Nullable<System.SByte> value Returns Type Description System.Nullable<System.SByte> | Improve this Doc View Source Abs(Nullable<Single>) Declaration [Sql.Function] public static float ? Abs(float ? value) Parameters Type Name Description System.Nullable<System.Single> value Returns Type Description System.Nullable<System.Single> | Improve this Doc View Source Acos(Nullable<Double>) Declaration [Sql.Function] public static double ? Acos(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source AllColumns() Declaration [Sql.Expression(\"*\", ServerSideOnly = true)] public static object[] AllColumns() Returns Type Description System.Object[] | Improve this Doc View Source Asin(Nullable<Double>) Declaration [Sql.Function] public static double ? Asin(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source AsNotNull<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0}, CanBeNull = false)] public static T AsNotNull<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AsNotNullable<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0}, CanBeNull = false)] public static T AsNotNullable<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AsNullable<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0}, CanBeNull = true)] public static T AsNullable<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AsSql<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0}, ServerSideOnly = true)] public static T AsSql<T>(T obj) Parameters Type Name Description T obj Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Atan(Nullable<Double>) Declaration [Sql.Function(\"Access\", \"Atn\")] [Sql.Function] public static double ? Atan(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Atan2(Nullable<Double>, Nullable<Double>) Declaration [CLSCompliant(false)] [Sql.Function(\"SqlServer\", \"Atn2\")] [Sql.Function(\"DB2\", \"Atan2\", new int[]{1, 0})] [Sql.Function(\"SqlCe\", \"Atn2\")] [Sql.Function(\"Sybase\", \"Atn2\")] [Sql.Function] public static double ? Atan2(double ? x, double ? y) Parameters Type Name Description System.Nullable<System.Double> x System.Nullable<System.Double> y Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Between<T>(T, T, T) Declaration [Sql.Expression(\"{0} BETWEEN {1} AND {2}\", PreferServerSide = true, IsPredicate = true)] public static bool Between<T>(this T value, T low, T high)where T : IComparable Parameters Type Name Description T value T low T high Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Between<T>(Nullable<T>, Nullable<T>, Nullable<T>) Declaration [Sql.Expression(\"{0} BETWEEN {1} AND {2}\", PreferServerSide = true, IsPredicate = true)] public static bool Between<T>(this T? value, T? low, T? high)where T : struct, IComparable Parameters Type Name Description System.Nullable<T> value System.Nullable<T> low System.Nullable<T> high Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Ceiling(Nullable<Decimal>) Declaration [Sql.Function(\"Informix\", \"Ceil\")] [Sql.Function(\"Oracle\", \"Ceil\")] [Sql.Function(\"SapHana\", \"Ceil\")] [Sql.Function] public static decimal ? Ceiling(decimal ? value) Parameters Type Name Description System.Nullable<System.Decimal> value Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source Ceiling(Nullable<Double>) Declaration [Sql.Function(\"Informix\", \"Ceil\")] [Sql.Function(\"Oracle\", \"Ceil\")] [Sql.Function(\"SapHana\", \"Ceil\")] [Sql.Function] public static double ? Ceiling(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Char(Int32) Declaration [Sql.Function(\"SqlCe\", \"NChar\", ServerSideOnly = true)] [Sql.Function(ServerSideOnly = true)] public static string Char(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.String | Improve this Doc View Source CharIndex(Nullable<Char>, String) Declaration [Sql.Function] [Sql.Function(\"DB2\", \"Locate\")] [Sql.Function(\"MySql\", \"Locate\")] [Sql.Function(\"SapHana\", \"Locate\")] public static int ? CharIndex(char ? value, string str) Parameters Type Name Description System.Nullable<System.Char> value System.String str Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source CharIndex(Nullable<Char>, String, Nullable<Int32>) Declaration [Sql.Function] [Sql.Function(\"DB2\", \"Locate\")] [Sql.Function(\"MySql\", \"Locate\")] [Sql.Function(\"SapHana\", \"Locate\")] public static int ? CharIndex(char ? value, string str, int ? startLocation) Parameters Type Name Description System.Nullable<System.Char> value System.String str System.Nullable<System.Int32> startLocation Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source CharIndex(String, String) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.Function(\"DB2\", \"Locate\")] [Sql.Function(\"MySql\", \"Locate\")] [Sql.Function(\"SapHana\", \"Locate\", new int[]{1, 0})] public static int ? CharIndex(string value, string str) Parameters Type Name Description System.String value System.String str Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source CharIndex(String, String, Nullable<Int32>) Declaration [Sql.Function] [Sql.Function(\"DB2\", \"Locate\")] [Sql.Function(\"MySql\", \"Locate\")] [Sql.Expression(\"SapHana\", \"Locate(Substring({1},{2} + 1),{0}) + {2}\")] public static int ? CharIndex(string value, string str, int ? startLocation) Parameters Type Name Description System.String value System.String str System.Nullable<System.Int32> startLocation Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Concat(Object[]) Declaration public static string Concat(params object[] args) Parameters Type Name Description System.Object[] args Returns Type Description System.String | Improve this Doc View Source Concat(String[]) Declaration public static string Concat(params string[] args) Parameters Type Name Description System.String[] args Returns Type Description System.String | Improve this Doc View Source Convert<TTo, TFrom>(TTo, TFrom) Declaration [CLSCompliant(false)] [Sql.Function(\"Convert\", new int[]{0, 1}, ServerSideOnly = true)] public static TTo Convert<TTo, TFrom>(TTo to, TFrom from) Parameters Type Name Description TTo to TFrom from Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source Convert<TTo, TFrom>(TTo, TFrom, Int32) Declaration [CLSCompliant(false)] [Sql.Function(\"Convert\", new int[]{0, 1, 2}, ServerSideOnly = true)] public static TTo Convert<TTo, TFrom>(TTo to, TFrom from, int format) Parameters Type Name Description TTo to TFrom from System.Int32 format Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source Convert<TTo, TFrom>(TFrom) Declaration [CLSCompliant(false)] [Sql.Function(\"$Convert$\", new int[]{1, 2, 0})] public static TTo Convert<TTo, TFrom>(TFrom obj) Parameters Type Name Description TFrom obj Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source Convert2<TTo, TFrom>(TTo, TFrom) Declaration [CLSCompliant(false)] [Sql.Function(\"Convert\", new int[]{0, 1})] public static TTo Convert2<TTo, TFrom>(TTo to, TFrom from) Parameters Type Name Description TTo to TFrom from Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source ConvertNullable<T>(Nullable<T>) Declaration [Obsolete(\"Use ToNotNullable instead.\")] [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0})] public static T ConvertNullable<T>(T? value)where T : struct Parameters Type Name Description System.Nullable<T> value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Cos(Nullable<Double>) Declaration [Sql.Function] public static double ? Cos(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Cosh(Nullable<Double>) Declaration [Sql.Function] public static double ? Cosh(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Cot(Nullable<Double>) Declaration [Sql.Function] public static double ? Cot(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source DateAdd(Sql.DateParts, Nullable<Double>, Nullable<DateTime>) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.DatePart(\"Oracle\", \"Add{0}\", false, 0, new int[]{2, 1})] [Sql.DatePart(\"DB2\", \"{{1}} + {0}\", 60, true, new string[]{\"{0} Year\", \"({0} * 3) Month\", \"{0} Month\", \"{0} Day\", \"{0} Day\", \"({0} * 7) Day\", \"{0} Day\", \"{0} Hour\", \"{0} Minute\", \"{0} Second\", \"({0} * 1000) Microsecond\"}, 0, new int[]{1, 2})] [Sql.DatePart(\"Informix\", \"{{1}} + Interval({0}\", 60, true, new string[]{\"{0}) Year to Year\", \"{0}) Month to Month * 3\", \"{0}) Month to Month\", \"{0}) Day to Day\", \"{0}) Day to Day\", \"{0}) Day to Day * 7\", \"{0}) Day to Day\", \"{0}) Hour to Hour\", \"{0}) Minute to Minute\", \"{0}) Second to Second\", null}, 0, new int[]{1, 2})] [Sql.DatePart(\"PostgreSQL\", \"{{1}} + {{0}} * Interval '1 {0}\", 60, true, new string[]{\"Year'\", \"Month' * 3\", \"Month'\", \"Day'\", \"Day'\", \"Day' * 7\", \"Day'\", \"Hour'\", \"Minute'\", \"Second'\", \"Millisecond'\"}, 0, new int[]{1, 2})] [Sql.DatePart(\"MySql\", \"Date_Add({{1}}, Interval {{0}} {0})\", true, new string[]{null, null, null, \"Day\", null, null, \"Day\", null, null, null, null}, 0, new int[]{1, 2})] [Sql.DatePart(\"SQLite\", \"DateTime({{1}}, '{{0}} {0}')\", true, new string[]{null, null, null, \"Day\", null, null, \"Day\", null, null, null, null}, 0, new int[]{1, 2})] [Sql.DatePart(\"Access\", \"DateAdd({0}, {{0}}, {{1}})\", true, new string[]{\"'yyyy'\", \"'q'\", \"'m'\", \"'y'\", \"'d'\", \"'ww'\", \"'w'\", \"'h'\", \"'n'\", \"'s'\", null}, 0, new int[]{1, 2})] [Sql.DatePart(\"SapHana\", \"Add_{0}\", true, new string[]{\"Years({1}, {0})\", \"Months({1}, {0} * 3)\", \"Months({1}, {0})\", \"Days({1}, {0})\", \"Days({1}, {0})\", \"Days({1}, {0} * 7)\", \"Days({1}, {0})\", \"Seconds({1}, {0} * 3600)\", \"Seconds({1}, {0} * 60)\", \"Seconds({1}, {0})\", null}, 0, new int[]{1, 2})] public static DateTime? DateAdd(Sql.DateParts part, double ? number, DateTime? date) Parameters Type Name Description Sql.DateParts part System.Nullable<System.Double> number System.Nullable<System.DateTime> date Returns Type Description System.Nullable<System.DateTime> | Improve this Doc View Source DateDiff(Sql.DateParts, Nullable<DateTime>, Nullable<DateTime>) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.Function(\"MySql\", \"TIMESTAMPDIFF\")] [Sql.DatePart(\"SapHana\", \"{0}\", true, new string[]{null, null, null, null, \"Days_Between({0}, {1})\", null, null, \"Seconds_Between({0}, {1}) / 3600\", \"Seconds_Between({0}, {1}) / 60\", \"Seconds_Between({0}, {1})\", \"Nano100_Between({0}, {1}) / 10000\"}, 0, new int[]{1, 2})] public static int ? DateDiff(Sql.DateParts part, DateTime? startDate, DateTime? endDate) Parameters Type Name Description Sql.DateParts part System.Nullable<System.DateTime> startDate System.Nullable<System.DateTime> endDate Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source DatePart(Sql.DateParts, Nullable<DateTime>) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.DatePart(\"DB2\", \"{0}\", false, new string[]{null, null, null, null, null, null, \"DayOfWeek\", null, null, null, null}, 0, new int[]{1})] [Sql.DatePart(\"Informix\", \"{0}\", 0, new int[]{1})] [Sql.DatePart(\"MySql\", \"Extract({0} from {{0}})\", true, 0, new int[]{1})] [Sql.DatePart(\"PostgreSQL\", \"Extract({0} from {{0}})\", true, new string[]{null, null, null, \"DOY\", null, null, \"DOW\", null, null, null, null}, 0, new int[]{1})] [Sql.DatePart(\"Firebird\", \"Extract({0} from {{0}})\", true, new string[]{null, null, null, \"YearDay\", null, null, null, null, null, null, null}, 0, new int[]{1})] [Sql.DatePart(\"SQLite\", \"Cast(StrFTime({0}, {{0}}) as int)\", true, new string[]{\"'%Y'\", null, \"'%m'\", \"'%j'\", \"'%d'\", \"'%W'\", \"'%w'\", \"'%H'\", \"'%M'\", \"'%S'\", \"'%f'\"}, 0, new int[]{1})] [Sql.DatePart(\"Access\", \"DatePart({0}, {{0}})\", true, new string[]{\"'yyyy'\", \"'q'\", \"'m'\", \"'y'\", \"'d'\", \"'ww'\", \"'w'\", \"'h'\", \"'n'\", \"'s'\", null}, 0, new int[]{1})] [Sql.DatePart(\"SapHana\", \"{0}\", true, new string[]{\"Year({0})\", \"Floor((Month({0})-1) / 3) + 1\", \"Month({0})\", \"DayOfYear({0})\", \"DayOfMonth({0})\", \"Week({0})\", \"MOD(Weekday({0}) + 1, 7) + 1\", \"Hour({0})\", \"Minute({0})\", \"Second({0})\", null}, 0, new int[]{1})] [Sql.DatePart(\"Oracle\", \"{0}\", true, new string[]{\"To_Number(To_Char({0}, 'YYYY'))\", \"To_Number(To_Char({0}, 'Q'))\", \"To_Number(To_Char({0}, 'MM'))\", \"To_Number(To_Char({0}, 'DDD'))\", \"To_Number(To_Char({0}, 'DD'))\", \"To_Number(To_Char({0}, 'WW'))\", \"Mod(1 + Trunc({0}) - Trunc({0}, 'IW'), 7) + 1\", \"To_Number(To_Char({0}, 'HH24'))\", \"To_Number(To_Char({0}, 'MI'))\", \"To_Number(To_Char({0}, 'SS'))\", \"To_Number(To_Char({0}, 'FF'))\"}, 0, new int[]{1})] public static int ? DatePart(Sql.DateParts part, DateTime? date) Parameters Type Name Description Sql.DateParts part System.Nullable<System.DateTime> date Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source DateToTime(Nullable<DateTime>) Declaration [Sql.Expression(\"{0}\")] public static TimeSpan? DateToTime(DateTime? date) Parameters Type Name Description System.Nullable<System.DateTime> date Returns Type Description System.Nullable<System.TimeSpan> | Improve this Doc View Source Decimal(Int32) Declaration [Sql.Expression(\"SapHana\", \"Decimal({0},4)\", ServerSideOnly = true)] [Sql.Function(ServerSideOnly = true)] public static decimal Decimal(int precision) Parameters Type Name Description System.Int32 precision Returns Type Description System.Decimal | Improve this Doc View Source Decimal(Int32, Int32) Declaration [Sql.Function(ServerSideOnly = true)] public static decimal Decimal(int precision, int scale) Parameters Type Name Description System.Int32 precision System.Int32 scale Returns Type Description System.Decimal | Improve this Doc View Source Degrees(Nullable<Decimal>) Declaration [Sql.Function] public static decimal ? Degrees(decimal ? value) Parameters Type Name Description System.Nullable<System.Decimal> value Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source Degrees(Nullable<Double>) Declaration [Sql.Function] public static double ? Degrees(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Degrees(Nullable<Int16>) Declaration [Sql.Function] public static short ? Degrees(short ? value) Parameters Type Name Description System.Nullable<System.Int16> value Returns Type Description System.Nullable<System.Int16> | Improve this Doc View Source Degrees(Nullable<Int32>) Declaration [Sql.Function] public static int ? Degrees(int ? value) Parameters Type Name Description System.Nullable<System.Int32> value Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Degrees(Nullable<Int64>) Declaration [Sql.Function] public static long ? Degrees(long ? value) Parameters Type Name Description System.Nullable<System.Int64> value Returns Type Description System.Nullable<System.Int64> | Improve this Doc View Source Degrees(Nullable<SByte>) Declaration [CLSCompliant(false)] [Sql.Function] public static sbyte ? Degrees(sbyte ? value) Parameters Type Name Description System.Nullable<System.SByte> value Returns Type Description System.Nullable<System.SByte> | Improve this Doc View Source Degrees(Nullable<Single>) Declaration [Sql.Function] public static float ? Degrees(float ? value) Parameters Type Name Description System.Nullable<System.Single> value Returns Type Description System.Nullable<System.Single> | Improve this Doc View Source Exp(Nullable<Double>) Declaration [Sql.Function] public static double ? Exp(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Floor(Nullable<Decimal>) Declaration [Sql.Function(\"Access\", \"Int\")] [Sql.Function] public static decimal ? Floor(decimal ? value) Parameters Type Name Description System.Nullable<System.Decimal> value Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source Floor(Nullable<Double>) Declaration [Sql.Function(\"Access\", \"Int\")] [Sql.Function] public static double ? Floor(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source FreeText(Object, String) Declaration [Sql.Expression(\"FREETEXT({0}, {1})\", ServerSideOnly = true, IsPredicate = true)] public static bool FreeText(object table, string text) Parameters Type Name Description System.Object table System.String text Returns Type Description System.Boolean | Improve this Doc View Source GetDate() Declaration [Sql.Property(\"CURRENT_TIMESTAMP\")] [Sql.Property(\"Informix\", \"CURRENT\")] [Sql.Property(\"Access\", \"Now\")] public static DateTime GetDate() Returns Type Description System.DateTime | Improve this Doc View Source Left(String, Nullable<Int32>) Declaration [Sql.Function(PreferServerSide = true)] [Sql.Function(\"SQLite\", \"LeftStr\", PreferServerSide = true)] public static string Left(string str, int ? length) Parameters Type Name Description System.String str System.Nullable<System.Int32> length Returns Type Description System.String | Improve this Doc View Source Length(Binary) Declaration [Sql.Function(PreferServerSide = true)] [Sql.Function(\"Access\", \"Len\", PreferServerSide = true)] [Sql.Function(\"Firebird\", \"Octet_Length\", PreferServerSide = true)] [Sql.Function(\"SqlServer\", \"DataLength\", PreferServerSide = true)] [Sql.Function(\"SqlCe\", \"DataLength\", PreferServerSide = true)] [Sql.Function(\"Sybase\", \"DataLength\", PreferServerSide = true)] public static int ? Length(Binary value) Parameters Type Name Description System.Data.Linq.Binary value Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Length(String) Declaration [Sql.Function(PreferServerSide = true)] [Sql.Function(\"Access\", \"Len\", PreferServerSide = true)] [Sql.Function(\"Firebird\", \"Char_Length\", PreferServerSide = true)] [Sql.Function(\"SqlServer\", \"Len\", PreferServerSide = true)] [Sql.Function(\"SqlCe\", \"Len\", PreferServerSide = true)] [Sql.Function(\"Sybase\", \"Len\", PreferServerSide = true)] [Sql.Function(\"MySql\", \"Char_Length\", PreferServerSide = true)] [Sql.Expression(\"DB2.LUW\", \"CHARACTER_LENGTH({0},CODEUNITS32)\", PreferServerSide = true)] public static int ? Length(string str) Parameters Type Name Description System.String str Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Like(String, String) Declaration [Sql.Function(ServerSideOnly = true)] public static bool Like(string matchExpression, string pattern) Parameters Type Name Description System.String matchExpression System.String pattern Returns Type Description System.Boolean | Improve this Doc View Source Like(String, String, Nullable<Char>) Declaration [Sql.Function(ServerSideOnly = true)] public static bool Like(string matchExpression, string pattern, char ? escapeCharacter) Parameters Type Name Description System.String matchExpression System.String pattern System.Nullable<System.Char> escapeCharacter Returns Type Description System.Boolean | Improve this Doc View Source Log(Nullable<Decimal>) Declaration [Sql.Function(\"Informix\", \"LogN\")] [Sql.Function(\"Oracle\", \"Ln\")] [Sql.Function(\"Firebird\", \"Ln\")] [Sql.Function(\"PostgreSQL\", \"Ln\")] [Sql.Function(\"SapHana\", \"Ln\")] [Sql.Function] public static decimal ? Log(decimal ? value) Parameters Type Name Description System.Nullable<System.Decimal> value Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source Log(Nullable<Decimal>, Nullable<Decimal>) Declaration [Sql.Function] public static decimal ? Log(decimal ? newBase, decimal ? value) Parameters Type Name Description System.Nullable<System.Decimal> newBase System.Nullable<System.Decimal> value Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source Log(Nullable<Double>) Declaration [Sql.Function(\"Informix\", \"LogN\")] [Sql.Function(\"Oracle\", \"Ln\")] [Sql.Function(\"Firebird\", \"Ln\")] [Sql.Function(\"PostgreSQL\", \"Ln\")] [Sql.Function(\"SapHana\", \"Ln\")] [Sql.Function] public static double ? Log(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Log(Nullable<Double>, Nullable<Double>) Declaration [Sql.Function] public static double ? Log(double ? newBase, double ? value) Parameters Type Name Description System.Nullable<System.Double> newBase System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Log10(Nullable<Double>) Declaration [Sql.Function(\"PostgreSQL\", \"Log\")] [Sql.Expression(\"SapHana\", \"Log(10,{0})\")] [Sql.Function] public static double ? Log10(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Lower(String) Declaration [Sql.Function] [Sql.Function(\"Access\", \"LCase\")] public static string Lower(string str) Parameters Type Name Description System.String str Returns Type Description System.String | Improve this Doc View Source MakeDateTime(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? MakeDateTime(int ? year, int ? month, int ? day) Parameters Type Name Description System.Nullable<System.Int32> year System.Nullable<System.Int32> month System.Nullable<System.Int32> day Returns Type Description System.Nullable<System.DateTime> | Improve this Doc View Source MakeDateTime(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? MakeDateTime(int ? year, int ? month, int ? day, int ? hour, int ? minute, int ? second) Parameters Type Name Description System.Nullable<System.Int32> year System.Nullable<System.Int32> month System.Nullable<System.Int32> day System.Nullable<System.Int32> hour System.Nullable<System.Int32> minute System.Nullable<System.Int32> second Returns Type Description System.Nullable<System.DateTime> | Improve this Doc View Source NChar(Int32) Declaration [Sql.Function(\"DB2\", \"Char\", ServerSideOnly = true)] [Sql.Function(ServerSideOnly = true)] public static string NChar(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.String | Improve this Doc View Source NewGuid() Declaration [Sql.Function(\"Oracle\", \"Sys_Guid\", ServerSideOnly = true)] [Sql.Function(\"Firebird\", \"Gen_Uuid\", ServerSideOnly = true)] [Sql.Function(\"MySql\", \"Uuid\", ServerSideOnly = true)] [Sql.Expression(\"Sybase\", \"NewID(1)\", ServerSideOnly = true)] [Sql.Expression(\"SapHana\", \"SYSUUID\", ServerSideOnly = true)] [Sql.Function(\"NewID\", ServerSideOnly = true)] public static Guid NewGuid() Returns Type Description System.Guid | Improve this Doc View Source NotBetween<T>(T, T, T) Declaration [Sql.Expression(\"{0} NOT BETWEEN {1} AND {2}\", PreferServerSide = true, IsPredicate = true)] public static bool NotBetween<T>(this T value, T low, T high)where T : IComparable Parameters Type Name Description T value T low T high Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source NotBetween<T>(Nullable<T>, Nullable<T>, Nullable<T>) Declaration [Sql.Expression(\"{0} NOT BETWEEN {1} AND {2}\", PreferServerSide = true, IsPredicate = true)] public static bool NotBetween<T>(this T? value, T? low, T? high)where T : struct, IComparable Parameters Type Name Description System.Nullable<T> value System.Nullable<T> low System.Nullable<T> high Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source NVarChar(Int32) Declaration [Sql.Function(\"DB2\", \"Char\", ServerSideOnly = true)] [Sql.Function(\"Oracle\", \"VarChar2\", ServerSideOnly = true)] [Sql.Function(\"Firebird\", \"VarChar\", ServerSideOnly = true)] [Sql.Function(\"PostgreSQL\", \"VarChar\", ServerSideOnly = true)] [Sql.Function(\"MySql\", \"Char\", ServerSideOnly = true)] [Sql.Function(ServerSideOnly = true)] public static string NVarChar(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.String | Improve this Doc View Source PadLeft(String, Nullable<Int32>, Nullable<Char>) Declaration [Sql.Function(Name = \"LPad\")] public static string PadLeft(string str, int ? totalWidth, char ? paddingChar) Parameters Type Name Description System.String str System.Nullable<System.Int32> totalWidth System.Nullable<System.Char> paddingChar Returns Type Description System.String | Improve this Doc View Source PadRight(String, Nullable<Int32>, Nullable<Char>) Declaration [Sql.Function(Name = \"RPad\")] public static string PadRight(string str, int ? totalWidth, char ? paddingChar) Parameters Type Name Description System.String str System.Nullable<System.Int32> totalWidth System.Nullable<System.Char> paddingChar Returns Type Description System.String | Improve this Doc View Source Power(Nullable<Double>, Nullable<Double>) Declaration [Sql.Expression(\"Access\", \"{0} ^ {1}\", Precedence = 80)] [Sql.Function] public static double ? Power(double ? x, double ? y) Parameters Type Name Description System.Nullable<System.Double> x System.Nullable<System.Double> y Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Replace(String, Nullable<Char>, Nullable<Char>) Declaration [Sql.Function] [Sql.Function(\"Sybase\", \"Str_Replace\")] public static string Replace(string str, char ? oldValue, char ? newValue) Parameters Type Name Description System.String str System.Nullable<System.Char> oldValue System.Nullable<System.Char> newValue Returns Type Description System.String | Improve this Doc View Source Replace(String, String, String) Declaration [Sql.Function] [Sql.Function(\"Sybase\", \"Str_Replace\")] public static string Replace(string str, string oldValue, string newValue) Parameters Type Name Description System.String str System.String oldValue System.String newValue Returns Type Description System.String | Improve this Doc View Source Reverse(String) Declaration [Sql.Function] public static string Reverse(string str) Parameters Type Name Description System.String str Returns Type Description System.String | Improve this Doc View Source Right(String, Nullable<Int32>) Declaration [Sql.Function(PreferServerSide = true)] [Sql.Function(\"SQLite\", \"RightStr\", PreferServerSide = true)] public static string Right(string str, int ? length) Parameters Type Name Description System.String str System.Nullable<System.Int32> length Returns Type Description System.String | Improve this Doc View Source Round(Nullable<Decimal>) Declaration [Sql.Function] public static decimal ? Round(decimal ? value) Parameters Type Name Description System.Nullable<System.Decimal> value Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source Round(Nullable<Decimal>, Nullable<Int32>) Declaration [Sql.Function] public static decimal ? Round(decimal ? value, int ? precision) Parameters Type Name Description System.Nullable<System.Decimal> value System.Nullable<System.Int32> precision Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source Round(Nullable<Double>) Declaration [Sql.Function] public static double ? Round(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Round(Nullable<Double>, Nullable<Int32>) Declaration [Sql.Function] public static double ? Round(double ? value, int ? precision) Parameters Type Name Description System.Nullable<System.Double> value System.Nullable<System.Int32> precision Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source RoundToEven(Nullable<Decimal>) Declaration [Sql.Function] public static decimal ? RoundToEven(decimal ? value) Parameters Type Name Description System.Nullable<System.Decimal> value Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source RoundToEven(Nullable<Decimal>, Nullable<Int32>) Declaration [Sql.Function] public static decimal ? RoundToEven(decimal ? value, int ? precision) Parameters Type Name Description System.Nullable<System.Decimal> value System.Nullable<System.Int32> precision Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source RoundToEven(Nullable<Double>) Declaration [Sql.Function] public static double ? RoundToEven(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source RoundToEven(Nullable<Double>, Nullable<Int32>) Declaration [Sql.Function] public static double ? RoundToEven(double ? value, int ? precision) Parameters Type Name Description System.Nullable<System.Double> value System.Nullable<System.Int32> precision Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Sign(Nullable<Decimal>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int ? Sign(decimal ? value) Parameters Type Name Description System.Nullable<System.Decimal> value Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Sign(Nullable<Double>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int ? Sign(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Sign(Nullable<Int16>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int ? Sign(short ? value) Parameters Type Name Description System.Nullable<System.Int16> value Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Sign(Nullable<Int32>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int ? Sign(int ? value) Parameters Type Name Description System.Nullable<System.Int32> value Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Sign(Nullable<Int64>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int ? Sign(long ? value) Parameters Type Name Description System.Nullable<System.Int64> value Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Sign(Nullable<SByte>) Declaration [CLSCompliant(false)] [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int ? Sign(sbyte ? value) Parameters Type Name Description System.Nullable<System.SByte> value Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Sign(Nullable<Single>) Declaration [Sql.Function(\"Access\", \"Sgn\")] [Sql.Function] public static int ? Sign(float ? value) Parameters Type Name Description System.Nullable<System.Single> value Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source Sin(Nullable<Double>) Declaration [Sql.Function] public static double ? Sin(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Sinh(Nullable<Double>) Declaration [Sql.Function] public static double ? Sinh(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Space(Nullable<Int32>) Declaration [Sql.Function] [Sql.Expression(\"SapHana\", \"Lpad('',{0},' ')\")] public static string Space(int ? length) Parameters Type Name Description System.Nullable<System.Int32> length Returns Type Description System.String | Improve this Doc View Source Sqrt(Nullable<Double>) Declaration [Sql.Function(\"Access\", \"Sqr\")] [Sql.Function] public static double ? Sqrt(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Stuff(IEnumerable<String>, Nullable<Int32>, Nullable<Int32>, String) Declaration [Sql.Function(ServerSideOnly = true)] public static string Stuff(IEnumerable<string> characterExpression, int ? start, int ? length, string replaceWithExpression) Parameters Type Name Description System.Collections.Generic.IEnumerable<System.String> characterExpression System.Nullable<System.Int32> start System.Nullable<System.Int32> length System.String replaceWithExpression Returns Type Description System.String | Improve this Doc View Source Stuff(String, Nullable<Int32>, Nullable<Int32>, String) Declaration [Sql.Function] public static string Stuff(string str, int ? startLocation, int ? length, string value) Parameters Type Name Description System.String str System.Nullable<System.Int32> startLocation System.Nullable<System.Int32> length System.String value Returns Type Description System.String | Improve this Doc View Source Substring(String, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function(PreferServerSide = true)] [Sql.Function(\"Access\", \"Mid\", PreferServerSide = true)] [Sql.Function(\"DB2\", \"Substr\", PreferServerSide = true)] [Sql.Function(\"Informix\", \"Substr\", PreferServerSide = true)] [Sql.Function(\"Oracle\", \"Substr\", PreferServerSide = true)] [Sql.Function(\"SQLite\", \"Substr\", PreferServerSide = true)] [Sql.Expression(\"Firebird\", \"Substring({0} from {1} for {2})\", PreferServerSide = true)] [Sql.Function(\"SapHana\", \"Substring\", PreferServerSide = true)] public static string Substring(string str, int ? startIndex, int ? length) Parameters Type Name Description System.String str System.Nullable<System.Int32> startIndex System.Nullable<System.Int32> length Returns Type Description System.String | Improve this Doc View Source Tan(Nullable<Double>) Declaration [Sql.Function] public static double ? Tan(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Tanh(Nullable<Double>) Declaration [Sql.Function] public static double ? Tanh(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source ToDate(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? ToDate(int ? year, int ? month, int ? day) Parameters Type Name Description System.Nullable<System.Int32> year System.Nullable<System.Int32> month System.Nullable<System.Int32> day Returns Type Description System.Nullable<System.DateTime> | Improve this Doc View Source ToDate(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? ToDate(int ? year, int ? month, int ? day, int ? hour, int ? minute, int ? second) Parameters Type Name Description System.Nullable<System.Int32> year System.Nullable<System.Int32> month System.Nullable<System.Int32> day System.Nullable<System.Int32> hour System.Nullable<System.Int32> minute System.Nullable<System.Int32> second Returns Type Description System.Nullable<System.DateTime> | Improve this Doc View Source ToDate(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? ToDate(int ? year, int ? month, int ? day, int ? hour, int ? minute, int ? second, int ? millisecond) Parameters Type Name Description System.Nullable<System.Int32> year System.Nullable<System.Int32> month System.Nullable<System.Int32> day System.Nullable<System.Int32> hour System.Nullable<System.Int32> minute System.Nullable<System.Int32> second System.Nullable<System.Int32> millisecond Returns Type Description System.Nullable<System.DateTime> | Improve this Doc View Source ToNotNull<T>(Nullable<T>) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0})] public static T ToNotNull<T>(T? value)where T : struct Parameters Type Name Description System.Nullable<T> value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ToNotNullable<T>(Nullable<T>) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0})] public static T ToNotNullable<T>(T? value)where T : struct Parameters Type Name Description System.Nullable<T> value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ToNullable<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0})] public static T? ToNullable<T>(T value)where T : struct Parameters Type Name Description T value Returns Type Description System.Nullable<T> Type Parameters Name Description T | Improve this Doc View Source ToSql<T>(T) Declaration [CLSCompliant(false)] [Sql.Expression(\"{0}\", new int[]{0}, ServerSideOnly = true, InlineParameters = true)] public static T ToSql<T>(T obj) Parameters Type Name Description T obj Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Trim(String) Declaration [Sql.Function] public static string Trim(string str) Parameters Type Name Description System.String str Returns Type Description System.String | Improve this Doc View Source Trim(String, Nullable<Char>) Declaration [Sql.Expression(\"DB2\", \"Strip({0}, B, {1})\")] [Sql.Function] public static string Trim(string str, char ? ch) Parameters Type Name Description System.String str System.Nullable<System.Char> ch Returns Type Description System.String | Improve this Doc View Source TrimLeft(String) Declaration [Sql.Function(\"LTrim\")] public static string TrimLeft(string str) Parameters Type Name Description System.String str Returns Type Description System.String | Improve this Doc View Source TrimLeft(String, Nullable<Char>) Declaration [Sql.Expression(\"DB2\", \"Strip({0}, L, {1})\")] [Sql.Function(\"LTrim\")] public static string TrimLeft(string str, char ? ch) Parameters Type Name Description System.String str System.Nullable<System.Char> ch Returns Type Description System.String | Improve this Doc View Source TrimRight(String) Declaration [Sql.Function(\"RTrim\")] public static string TrimRight(string str) Parameters Type Name Description System.String str Returns Type Description System.String | Improve this Doc View Source TrimRight(String, Nullable<Char>) Declaration [Sql.Expression(\"DB2\", \"Strip({0}, T, {1})\")] [Sql.Function(\"RTrim\")] public static string TrimRight(string str, char ? ch) Parameters Type Name Description System.String str System.Nullable<System.Char> ch Returns Type Description System.String | Improve this Doc View Source Truncate(Nullable<Decimal>) Declaration [Sql.Expression(\"SqlServer\", \"Round({0}, 0, 1)\")] [Sql.Expression(\"DB2\", \"Truncate({0}, 0)\")] [Sql.Expression(\"Informix\", \"Trunc({0}, 0)\")] [Sql.Expression(\"Oracle\", \"Trunc({0}, 0)\")] [Sql.Expression(\"Firebird\", \"Trunc({0}, 0)\")] [Sql.Expression(\"PostgreSQL\", \"Trunc({0}, 0)\")] [Sql.Expression(\"MySql\", \"Truncate({0}, 0)\")] [Sql.Expression(\"SqlCe\", \"Round({0}, 0, 1)\")] [Sql.Expression(\"SapHana\", \"Round({0}, 0, ROUND_DOWN)\")] [Sql.Function] public static decimal ? Truncate(decimal ? value) Parameters Type Name Description System.Nullable<System.Decimal> value Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source Truncate(Nullable<Double>) Declaration [Sql.Expression(\"SqlServer\", \"Round({0}, 0, 1)\")] [Sql.Expression(\"DB2\", \"Truncate({0}, 0)\")] [Sql.Expression(\"Informix\", \"Trunc({0}, 0)\")] [Sql.Expression(\"Oracle\", \"Trunc({0}, 0)\")] [Sql.Expression(\"Firebird\", \"Trunc({0}, 0)\")] [Sql.Expression(\"PostgreSQL\", \"Trunc({0}, 0)\")] [Sql.Expression(\"MySql\", \"Truncate({0}, 0)\")] [Sql.Expression(\"SqlCe\", \"Round({0}, 0, 1)\")] [Sql.Expression(\"SapHana\", \"Round({0}, 0, ROUND_DOWN)\")] [Sql.Function] public static double ? Truncate(double ? value) Parameters Type Name Description System.Nullable<System.Double> value Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source Upper(String) Declaration [Sql.Function] [Sql.Function(\"Access\", \"UCase\")] public static string Upper(string str) Parameters Type Name Description System.String str Returns Type Description System.String | Improve this Doc View Source VarChar(Int32) Declaration [Sql.Function(\"MySql\", \"Char\", ServerSideOnly = true)] [Sql.Function(\"SqlCe\", \"NVarChar\", ServerSideOnly = true)] [Sql.Function(ServerSideOnly = true)] public static string VarChar(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.String"
  },
  "api/LinqToDB.SchemaProvider.TableSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.TableSchema.html",
    "title": "Class TableSchema | Linq To DB (aka linq2db)",
    "keywords": "Class TableSchema Inheritance System.Object TableSchema ViewWithParametersTableSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class TableSchema Properties | Improve this Doc View Source CatalogName Declaration public string CatalogName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Columns Declaration public List<ColumnSchema> Columns { get; set; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema> | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source ForeignKeys Declaration public List<ForeignKeySchema> ForeignKeys { get; set; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ForeignKeySchema> | Improve this Doc View Source ID Declaration public string ID { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDefaultSchema Declaration public bool IsDefaultSchema { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsProcedureResult Declaration public bool IsProcedureResult { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsProviderSpecific Declaration public bool IsProviderSpecific { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsView Declaration public bool IsView { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SchemaName Declaration public string SchemaName { get; set; } Property Value Type Description System.String | Improve this Doc View Source TableName Declaration public string TableName { get; set; } Property Value Type Description System.String | Improve this Doc View Source TypeName Declaration public string TypeName { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.SchemaProvider.html": {
    "href": "api/LinqToDB.SchemaProvider.html",
    "title": "Namespace LinqToDB.SchemaProvider | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.SchemaProvider Classes ColumnInfo ColumnSchema DatabaseSchema DataTypeInfo ForeignKeySchema ForeingKeyInfo GetSchemaOptions ParameterSchema PrimaryKeyInfo ProcedureInfo ProcedureParameterInfo ProcedureSchema SchemaProviderBase TableInfo TableSchema Interfaces ISchemaProvider Enums AssociationType"
  },
  "api/LinqToDB.ServiceModel.DataService-1.html": {
    "href": "api/LinqToDB.ServiceModel.DataService-1.html",
    "title": "Class DataService<T> | Linq To DB (aka linq2db)",
    "keywords": "Class DataService<T> Inheritance System.Object System.Data.Services.DataService<T> DataService<T> Inherited Members System.Data.Services.DataService<T>.AttachHost(System.Data.Services.IDataServiceHost) System.Data.Services.DataService<T>.ProcessRequestForMessage(System.IO.Stream) System.Data.Services.DataService<T>.ProcessRequest() System.Data.Services.DataService<T>.CreateDataSource() System.Data.Services.DataService<T>.HandleException(System.Data.Services.HandleExceptionArgs) System.Data.Services.DataService<T>.OnStartProcessingRequest(System.Data.Services.ProcessRequestArgs) System.Data.Services.DataService<T>.ProcessingPipeline System.Data.Services.DataService<T>.CurrentDataSource Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class DataService<T> : DataService<T>, IRequestHandler, IServiceProvider where T : IDataContext Type Parameters Name Description T Constructors | Improve this Doc View Source DataService() Declaration public DataService() | Improve this Doc View Source DataService(MappingSchema) Declaration public DataService(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Methods | Improve this Doc View Source GetService(Type) Declaration public object GetService(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object Implements System.IServiceProvider.GetService(System.Type)"
  },
  "api/LinqToDB.ServiceModel.ILinqService.html": {
    "href": "api/LinqToDB.ServiceModel.ILinqService.html",
    "title": "Interface ILinqService | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqService Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax [ServiceContract] public interface ILinqService Methods | Improve this Doc View Source ExecuteBatch(String, String) Declaration [OperationContract] int ExecuteBatch(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteNonQuery(String, String) Declaration [OperationContract] int ExecuteNonQuery(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteReader(String, String) Declaration [OperationContract] string ExecuteReader(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.String | Improve this Doc View Source ExecuteScalar(String, String) Declaration [OperationContract] object ExecuteScalar(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.Object | Improve this Doc View Source GetInfo(String) Declaration [OperationContract] LinqServiceInfo GetInfo(string configuration) Parameters Type Name Description System.String configuration Returns Type Description LinqServiceInfo"
  },
  "api/LinqToDB.SqlProvider.ConvertType.html": {
    "href": "api/LinqToDB.SqlProvider.ConvertType.html",
    "title": "Enum ConvertType | Linq To DB (aka linq2db)",
    "keywords": "Enum ConvertType Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public enum ConvertType Fields Name Description ExceptionToErrorMessage Gets error message from a native exception. For example: SqlException -> SqlException.Message, OleDbException -> OleDbException.Errors[0].Message ExceptionToErrorNumber Gets error number from a native exception. For example: SqlException -> SqlException.Number, OleDbException -> OleDbException.Errors[0].NativeError NameToCommandParameter Provided name should be converted to command parameter name. For example: firstName -> @firstName for the following query: db.Parameter(&quot;@firstName&quot;) = \"John\"; ^ here NameToDatabase Provided name should be converted to query database. For example: MyDatabase -> [MyDatabase] for the following query: SELECT * FROM [MyDatabase]..[Person] ^ and ^ NameToOwner Provided name should be converted to query database. For example: dbo -> [dbo] for the following query: SELECT * FROM [ dbo ].[Person] ^ and ^ NameToQueryField Provided name should be converted to query field name. For example: FirstName -> [FirstName] for the following query: SELECT [FirstName] FROM Person WHERE ID = 1 ^ and ^ NameToQueryFieldAlias Provided name should be converted to query field alias. For example: ID -> \"ID\" for the following query: SELECT \"ID\" as \"ID\" FROM Person WHERE \"ID\" = 1 ^ ^ here NameToQueryParameter Provided name should be converted to query parameter name. For example: firstName -> @firstName for the following query: SELECT * FROM Person WHERE FirstName = @firstName ^ here NameToQueryTable Provided name should be converted to query table name. For example: Person -> [Person] for the following query: SELECT * FROM [Person] ^ and ^ NameToQueryTableAlias Provided name should be converted to query table alias. For example: table1 -> [table1] for the following query: SELECT * FROM [Person] [table1] ^ and ^ NameToSprocParameter Provided name should be converted to stored procedure parameter name. For example: firstName -> @firstName for the following query: db.Parameter(&quot;@firstName&quot;) = \"John\"; ^ here SprocParameterToName Provided stored procedure parameter name should be converted to name. For example: @firstName -> firstName for the following query: db.Parameter(&quot;@firstName&quot;) = \"John\"; ^ &apos;@' has to be removed Extension Methods Sql.Between<ConvertType>(ConvertType, ConvertType) Sql.NotBetween<ConvertType>(ConvertType, ConvertType)"
  },
  "api/LinqToDB.SqlProvider.ISqlBuilder.html": {
    "href": "api/LinqToDB.SqlProvider.ISqlBuilder.html",
    "title": "Interface ISqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlBuilder Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public interface ISqlBuilder Properties | Improve this Doc View Source Name Declaration string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source ApplyQueryHints(String, List<String>) Declaration string ApplyQueryHints(string sqlText, List<string> queryHints) Parameters Type Name Description System.String sqlText System.Collections.Generic.List<System.String> queryHints Returns Type Description System.String | Improve this Doc View Source BuildSql(Int32, SelectQuery, StringBuilder) Declaration void BuildSql(int commandNumber, SelectQuery selectQuery, StringBuilder sb) Parameters Type Name Description System.Int32 commandNumber SelectQuery selectQuery System.Text.StringBuilder sb | Improve this Doc View Source BuildTableName(StringBuilder, String, String, String) Declaration StringBuilder BuildTableName(StringBuilder sb, string database, string owner, string table) Parameters Type Name Description System.Text.StringBuilder sb System.String database System.String owner System.String table Returns Type Description System.Text.StringBuilder | Improve this Doc View Source CommandCount(SelectQuery) Declaration int CommandCount(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Int32 | Improve this Doc View Source Convert(Object, ConvertType) Declaration object Convert(object value, ConvertType convertType) Parameters Type Name Description System.Object value ConvertType convertType Returns Type Description System.Object | Improve this Doc View Source ConvertTableName(StringBuilder, String, String, String) Declaration StringBuilder ConvertTableName(StringBuilder sb, string database, string owner, string table) Parameters Type Name Description System.Text.StringBuilder sb System.String database System.String owner System.String table Returns Type Description System.Text.StringBuilder | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression | Improve this Doc View Source PrintParameters(StringBuilder, IDbDataParameter[]) Declaration StringBuilder PrintParameters(StringBuilder sb, IDbDataParameter[] parameters) Parameters Type Name Description System.Text.StringBuilder sb System.Data.IDbDataParameter[] parameters Returns Type Description System.Text.StringBuilder"
  },
  "api/LinqToDB.SqlProvider.ISqlOptimizer.html": {
    "href": "api/LinqToDB.SqlProvider.ISqlOptimizer.html",
    "title": "Interface ISqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlOptimizer Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public interface ISqlOptimizer Methods | Improve this Doc View Source ConvertExpression(ISqlExpression) Declaration ISqlExpression ConvertExpression(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description ISqlExpression | Improve this Doc View Source ConvertPredicate(SelectQuery, ISqlPredicate) Declaration ISqlPredicate ConvertPredicate(SelectQuery selectQuery, ISqlPredicate predicate) Parameters Type Name Description SelectQuery selectQuery ISqlPredicate predicate Returns Type Description ISqlPredicate | Improve this Doc View Source Finalize(SelectQuery) Declaration SelectQuery Finalize(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SelectQuery"
  },
  "api/LinqToDB.SqlProvider.SqlProviderFlags.html": {
    "href": "api/LinqToDB.SqlProvider.SqlProviderFlags.html",
    "title": "Class SqlProviderFlags | Linq To DB (aka linq2db)",
    "keywords": "Class SqlProviderFlags Inheritance System.Object SqlProviderFlags Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public class SqlProviderFlags Properties | Improve this Doc View Source AcceptsTakeAsParameter Declaration public bool AcceptsTakeAsParameter { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source AcceptsTakeAsParameterIfSkip Declaration public bool AcceptsTakeAsParameterIfSkip { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source CanCombineParameters Declaration public bool CanCombineParameters { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsApplyJoinSupported Declaration public bool IsApplyJoinSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCountSubQuerySupported Declaration public bool IsCountSubQuerySupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCrossJoinSupported Provider supports: CROSS JOIN a Supported Declaration public bool IsCrossJoinSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDistinctOrderBySupported Declaration public bool IsDistinctOrderBySupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsGroupByExpressionSupported Declaration public bool IsGroupByExpressionSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsIdentityParameterRequired Declaration public bool IsIdentityParameterRequired { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInnerJoinAsCrossSupported Provider supports: INNER JOIN a ON 1 = 1 Declaration public bool IsInnerJoinAsCrossSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInsertOrUpdateSupported Declaration public bool IsInsertOrUpdateSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsParameterOrderDependent Declaration public bool IsParameterOrderDependent { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSkipSupported Declaration public bool IsSkipSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSkipSupportedIfTake Declaration public bool IsSkipSupportedIfTake { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSubQueryColumnSupported Declaration public bool IsSubQueryColumnSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSubQueryTakeSupported Declaration public bool IsSubQueryTakeSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSybaseBuggyGroupBy Declaration public bool IsSybaseBuggyGroupBy { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsTakeSupported Declaration public bool IsTakeSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsUpdateSetTableAliasSupported Declaration public bool IsUpdateSetTableAliasSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxInListValuesCount Declaration public int MaxInListValuesCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TakeHintsSupported Declaration public TakeHints? TakeHintsSupported { get; set; } Property Value Type Description System.Nullable<LinqToDB.TakeHints> Methods | Improve this Doc View Source GetAcceptsTakeAsParameterFlag(SelectQuery) Declaration public bool GetAcceptsTakeAsParameterFlag(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Boolean | Improve this Doc View Source GetIsSkipSupportedFlag(SelectQuery) Declaration public bool GetIsSkipSupportedFlag(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Boolean | Improve this Doc View Source GetIsTakeHintsSupported(TakeHints) Declaration public bool GetIsTakeHintsSupported(TakeHints hints) Parameters Type Name Description TakeHints hints Returns Type Description System.Boolean"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.ConditionBase-2.Not_.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.ConditionBase-2.Not_.html",
    "title": "Class SelectQuery.ConditionBase<T1, T2>.Not_ | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.ConditionBase<T1, T2>.Not_ Inheritance System.Object SelectQuery.ConditionBase<T1, T2>.Not_ Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Not_ : SelectQuery.IConditionExpr<SelectQuery.ConditionBase<T1, T2>.Expr_> Methods | Improve this Doc View Source Exists(SelectQuery) Declaration public T2 Exists(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Expr(ISqlExpression) Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_ Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SelectQuery.ConditionBase.Expr_<> | Improve this Doc View Source Field(SqlField) Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_ Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SelectQuery.ConditionBase.Expr_<> | Improve this Doc View Source SubQuery(SelectQuery) Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_ SubQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SelectQuery.ConditionBase.Expr_<> | Improve this Doc View Source Value(Object) Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_ Value(object value) Parameters Type Name Description System.Object value Returns Type Description SelectQuery.ConditionBase.Expr_<>"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.ConditionBase-2.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.ConditionBase-2.html",
    "title": "Class SelectQuery.ConditionBase<T1, T2> | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.ConditionBase<T1, T2> Inheritance System.Object SelectQuery.ConditionBase<T1, T2> SelectQuery.ClauseBase<T1, T2> SelectQuery.FromClause.Join SelectQuery.SearchCondition Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class ConditionBase<T1, T2> : SelectQuery.IConditionExpr<SelectQuery.ConditionBase<T1, T2>.Expr_> where T1 : SelectQuery.ConditionBase<T1, T2> Type Parameters Name Description T1 T2 Properties | Improve this Doc View Source Not Declaration public SelectQuery.ConditionBase<T1, T2>.Not_ Not { get; } Property Value Type Description SelectQuery.ConditionBase.Not_<> | Improve this Doc View Source Search Declaration protected abstract SelectQuery.SearchCondition Search { get; } Property Value Type Description SelectQuery.SearchCondition Methods | Improve this Doc View Source Exists(SelectQuery) Declaration public T2 Exists(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Expr(ISqlExpression) Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_ Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SelectQuery.ConditionBase.Expr_<> | Improve this Doc View Source Field(SqlField) Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_ Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SelectQuery.ConditionBase.Expr_<> | Improve this Doc View Source GetNext() Declaration protected abstract T2 GetNext() Returns Type Description T2 | Improve this Doc View Source SetOr(Boolean) Declaration protected T1 SetOr(bool value) Parameters Type Name Description System.Boolean value Returns Type Description T1 | Improve this Doc View Source SubQuery(SelectQuery) Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_ SubQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SelectQuery.ConditionBase.Expr_<> | Improve this Doc View Source Value(Object) Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_ Value(object value) Parameters Type Name Description System.Object value Returns Type Description SelectQuery.ConditionBase.Expr_<>"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.CreateTableStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.CreateTableStatement.html",
    "title": "Class SelectQuery.CreateTableStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.CreateTableStatement Inheritance System.Object SelectQuery.CreateTableStatement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class CreateTableStatement : IQueryElement, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source DefaulNullable Declaration public DefaulNullable DefaulNullable { get; set; } Property Value Type Description DefaulNullable | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source IsDrop Declaration public bool IsDrop { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source StatementFooter Declaration public string StatementFooter { get; set; } Property Value Type Description System.String | Improve this Doc View Source StatementHeader Declaration public string StatementHeader { get; set; } Property Value Type Description System.String | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Explicit Interface Implementations | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.DeleteClause.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.DeleteClause.html",
    "title": "Class SelectQuery.DeleteClause | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.DeleteClause Inheritance System.Object SelectQuery.DeleteClause Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class DeleteClause : IQueryElement, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration [Obsolete] ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.WhereClause.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.WhereClause.html",
    "title": "Class SelectQuery.WhereClause | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.WhereClause Inheritance System.Object LinqToDB.SqlQuery.SelectQuery.ConditionBase<LinqToDB.SqlQuery.SelectQuery.WhereClause, LinqToDB.SqlQuery.SelectQuery.WhereClause.Next> LinqToDB.SqlQuery.SelectQuery.ClauseBase<LinqToDB.SqlQuery.SelectQuery.WhereClause, LinqToDB.SqlQuery.SelectQuery.WhereClause.Next> SelectQuery.WhereClause Inherited Members SelectQuery.ClauseBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.Select SelectQuery.ClauseBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.From SelectQuery.ClauseBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.GroupBy SelectQuery.ClauseBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.Having SelectQuery.ClauseBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.OrderBy SelectQuery.ClauseBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.End() SelectQuery.ClauseBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.SelectQuery SelectQuery.ConditionBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.Search SelectQuery.ConditionBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.GetNext() SelectQuery.ConditionBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.SetOr(Boolean) SelectQuery.ConditionBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.Not SelectQuery.ConditionBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.Expr(ISqlExpression) SelectQuery.ConditionBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.Field(SqlField) SelectQuery.ConditionBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.SubQuery(SelectQuery) SelectQuery.ConditionBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.Value(Object) SelectQuery.ConditionBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class WhereClause : SelectQuery.ClauseBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>, SelectQuery.IConditionExpr<SelectQuery.ConditionBase<SelectQuery.WhereClause, SelectQuery.WhereClause.Next>.Expr_>, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Search Declaration protected override SelectQuery.SearchCondition Search { get; } Property Value Type Description SelectQuery.SearchCondition Overrides LinqToDB.SqlQuery.SelectQuery.ConditionBase<LinqToDB.SqlQuery.SelectQuery.WhereClause, LinqToDB.SqlQuery.SelectQuery.WhereClause.Next>.Search | Improve this Doc View Source SearchCondition Declaration public SelectQuery.SearchCondition SearchCondition { get; } Property Value Type Description SelectQuery.SearchCondition Methods | Improve this Doc View Source GetNext() Declaration protected override SelectQuery.WhereClause.Next GetNext() Returns Type Description SelectQuery.WhereClause.Next Overrides LinqToDB.SqlQuery.SelectQuery.ConditionBase<LinqToDB.SqlQuery.SelectQuery.WhereClause, LinqToDB.SqlQuery.SelectQuery.WhereClause.Next>.GetNext() Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> action) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> action Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Extension Methods QueryHelper.ConcatSearchCondition(SelectQuery.WhereClause, SelectQuery.SearchCondition)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.html",
    "title": "Class SelectQuery | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery Inheritance System.Object SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SelectQuery : ISqlTableSource, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SelectQuery() Declaration public SelectQuery() Fields | Improve this Doc View Source SourceIDCounter Declaration public static int SourceIDCounter Field Value Type Description System.Int32 Properties | Improve this Doc View Source All Declaration public SqlField All { get; } Property Value Type Description SqlField Implements ISqlTableSource.All | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean Implements ISqlExpression.CanBeNull | Improve this Doc View Source CreateTable Declaration public SelectQuery.CreateTableStatement CreateTable { get; } Property Value Type Description SelectQuery.CreateTableStatement | Improve this Doc View Source Delete Declaration public SelectQuery.DeleteClause Delete { get; } Property Value Type Description SelectQuery.DeleteClause | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source From Declaration public SelectQuery.FromClause From { get; } Property Value Type Description SelectQuery.FromClause | Improve this Doc View Source GroupBy Declaration public SelectQuery.GroupByClause GroupBy { get; } Property Value Type Description SelectQuery.GroupByClause | Improve this Doc View Source HasUnion Declaration public bool HasUnion { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Having Declaration public SelectQuery.WhereClause Having { get; } Property Value Type Description SelectQuery.WhereClause | Improve this Doc View Source Insert Declaration public SelectQuery.InsertClause Insert { get; } Property Value Type Description SelectQuery.InsertClause | Improve this Doc View Source IsCreateTable Declaration public bool IsCreateTable { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDelete Declaration public bool IsDelete { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInsert Declaration public bool IsInsert { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInsertOrUpdate Declaration public bool IsInsertOrUpdate { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsParameterDependent Declaration public bool IsParameterDependent { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSelect Declaration public bool IsSelect { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSimple Declaration public bool IsSimple { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsUpdate Declaration public bool IsUpdate { get; } Property Value Type Description System.Boolean | Improve this Doc View Source OrderBy Declaration public SelectQuery.OrderByClause OrderBy { get; } Property Value Type Description SelectQuery.OrderByClause | Improve this Doc View Source Parameters Declaration public List<SqlParameter> Parameters { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.SqlParameter> | Improve this Doc View Source ParentSelect Declaration public SelectQuery ParentSelect { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlExpression.Precedence | Improve this Doc View Source Properties Declaration public List<object> Properties { get; } Property Value Type Description System.Collections.Generic.List<System.Object> | Improve this Doc View Source QueryType Declaration public QueryType QueryType { get; set; } Property Value Type Description QueryType | Improve this Doc View Source Select Declaration public SelectQuery.SelectClause Select { get; } Property Value Type Description SelectQuery.SelectClause | Improve this Doc View Source SourceID Declaration public int SourceID { get; } Property Value Type Description System.Int32 Implements ISqlTableSource.SourceID | Improve this Doc View Source SqlTableType Declaration public SqlTableType SqlTableType { get; } Property Value Type Description SqlTableType Implements ISqlTableSource.SqlTableType | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description System.String | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description System.Type Implements ISqlExpression.SystemType | Improve this Doc View Source Unions Declaration public List<SelectQuery.Union> Unions { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.SelectQuery.Union> | Improve this Doc View Source Update Declaration public SelectQuery.UpdateClause Update { get; } Property Value Type Description SelectQuery.UpdateClause | Improve this Doc View Source Where Declaration public SelectQuery.WhereClause Where { get; } Property Value Type Description SelectQuery.WhereClause Methods | Improve this Doc View Source AddUnion(SelectQuery, Boolean) Declaration public void AddUnion(SelectQuery union, bool isAll) Parameters Type Name Description SelectQuery union System.Boolean isAll | Improve this Doc View Source ClearDelete() Declaration public void ClearDelete() | Improve this Doc View Source ClearInsert() Declaration public void ClearInsert() | Improve this Doc View Source ClearUpdate() Declaration public void ClearUpdate() | Improve this Doc View Source Clone() Declaration public SelectQuery Clone() Returns Type Description SelectQuery | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Clone(Predicate<ICloneableElement>) Declaration public SelectQuery Clone(Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description SelectQuery | Improve this Doc View Source CrossApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join CrossApply(ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source CrossApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join CrossApply(ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) | Improve this Doc View Source ForEachTable(Action<SelectQuery.TableSource>, HashSet<SelectQuery>) Declaration public void ForEachTable(Action<SelectQuery.TableSource> action, HashSet<SelectQuery> visitedQueries) Parameters Type Name Description System.Action<LinqToDB.SqlQuery.SelectQuery.TableSource> action System.Collections.Generic.HashSet<LinqToDB.SqlQuery.SelectQuery> visitedQueries | Improve this Doc View Source GetAlias(String, String) Declaration public string GetAlias(string desiredAlias, string defaultAlias) Parameters Type Name Description System.String desiredAlias System.String defaultAlias Returns Type Description System.String | Improve this Doc View Source GetKeys(Boolean) Declaration public IList<ISqlExpression> GetKeys(bool allIfEmpty) Parameters Type Name Description System.Boolean allIfEmpty Returns Type Description System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression> Implements ISqlTableSource.GetKeys(Boolean) | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource | Improve this Doc View Source GetTempAliases(Int32, String) Declaration public string[] GetTempAliases(int n, string defaultAlias) Parameters Type Name Description System.Int32 n System.String defaultAlias Returns Type Description System.String[] | Improve this Doc View Source InnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join InnerJoin(ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source InnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join InnerJoin(ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source Join(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join Join(ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source Join(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join Join(ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source LeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join LeftJoin(ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source LeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join LeftJoin(ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source OuterApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join OuterApply(ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source OuterApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join OuterApply(ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source ProcessParameters(MappingSchema) Declaration public SelectQuery ProcessParameters(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description SelectQuery | Improve this Doc View Source RemoveAlias(String) Declaration public void RemoveAlias(string alias) Parameters Type Name Description System.String alias | Improve this Doc View Source WeakInnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakInnerJoin(ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source WeakInnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakInnerJoin(ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source WeakJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakJoin(ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source WeakJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakJoin(ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source WeakLeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakLeftJoin(ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source WeakLeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakLeftJoin(ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) Extension Methods QueryHelper.RootQuery(SelectQuery) QueryHelper.FindJoin(SelectQuery, Func<SelectQuery.JoinedTable, Boolean>) Extensions.InnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.Join(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.Join(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[])"
  },
  "api/LinqToDB.SqlQuery.SqlBinaryExpression.html": {
    "href": "api/LinqToDB.SqlQuery.SqlBinaryExpression.html",
    "title": "Class SqlBinaryExpression | Linq To DB (aka linq2db)",
    "keywords": "Class SqlBinaryExpression Inheritance System.Object SqlBinaryExpression Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax [Serializable] public class SqlBinaryExpression : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlBinaryExpression(Type, ISqlExpression, String, ISqlExpression) Declaration public SqlBinaryExpression(Type systemType, ISqlExpression expr1, string operation, ISqlExpression expr2) Parameters Type Name Description System.Type systemType ISqlExpression expr1 System.String operation ISqlExpression expr2 | Improve this Doc View Source SqlBinaryExpression(Type, ISqlExpression, String, ISqlExpression, Int32) Declaration public SqlBinaryExpression(Type systemType, ISqlExpression expr1, string operation, ISqlExpression expr2, int precedence) Parameters Type Name Description System.Type systemType ISqlExpression expr1 System.String operation ISqlExpression expr2 System.Int32 precedence Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean Implements ISqlExpression.CanBeNull | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Expr1 Declaration public ISqlExpression Expr1 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Operation Declaration public string Operation { get; } Property Value Type Description System.String | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlExpression.Precedence | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description System.String | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description System.Type Implements ISqlExpression.SystemType Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T)"
  },
  "api/LinqToDB.SqlQuery.SqlDataType.html": {
    "href": "api/LinqToDB.SqlQuery.SqlDataType.html",
    "title": "Class SqlDataType | Linq To DB (aka linq2db)",
    "keywords": "Class SqlDataType Inheritance System.Object SqlDataType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlDataType : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlDataType(DataType) Declaration public SqlDataType(DataType dbType) Parameters Type Name Description DataType dbType | Improve this Doc View Source SqlDataType(DataType, Nullable<Int32>) Declaration public SqlDataType(DataType dbType, int ? length) Parameters Type Name Description DataType dbType System.Nullable<System.Int32> length | Improve this Doc View Source SqlDataType(DataType, Nullable<Int32>, Nullable<Int32>) Declaration public SqlDataType(DataType dbType, int ? precision, int ? scale) Parameters Type Name Description DataType dbType System.Nullable<System.Int32> precision System.Nullable<System.Int32> scale | Improve this Doc View Source SqlDataType(DataType, Type) Declaration public SqlDataType(DataType dbType, Type type) Parameters Type Name Description DataType dbType System.Type type | Improve this Doc View Source SqlDataType(DataType, Type, Int32) Declaration public SqlDataType(DataType dbType, Type type, int length) Parameters Type Name Description DataType dbType System.Type type System.Int32 length | Improve this Doc View Source SqlDataType(DataType, Type, Int32, Int32) Declaration public SqlDataType(DataType dbType, Type type, int precision, int scale) Parameters Type Name Description DataType dbType System.Type type System.Int32 precision System.Int32 scale | Improve this Doc View Source SqlDataType(Type) Declaration public SqlDataType(Type type) Parameters Type Name Description System.Type type | Improve this Doc View Source SqlDataType(Type, Int32) Declaration public SqlDataType(Type type, int length) Parameters Type Name Description System.Type type System.Int32 length | Improve this Doc View Source SqlDataType(Type, Int32, Int32) Declaration public SqlDataType(Type type, int precision, int scale) Parameters Type Name Description System.Type type System.Int32 precision System.Int32 scale Fields | Improve this Doc View Source Boolean Declaration public static readonly SqlDataType Boolean Field Value Type Description SqlDataType | Improve this Doc View Source Byte Declaration public static readonly SqlDataType Byte Field Value Type Description SqlDataType | Improve this Doc View Source ByteArray Declaration public static readonly SqlDataType ByteArray Field Value Type Description SqlDataType | Improve this Doc View Source Char Declaration public static readonly SqlDataType Char Field Value Type Description SqlDataType | Improve this Doc View Source CharArray Declaration public static readonly SqlDataType CharArray Field Value Type Description SqlDataType | Improve this Doc View Source DateTime Declaration public static readonly SqlDataType DateTime Field Value Type Description SqlDataType | Improve this Doc View Source DateTimeOffset Declaration public static readonly SqlDataType DateTimeOffset Field Value Type Description SqlDataType | Improve this Doc View Source DbBinary Declaration public static readonly SqlDataType DbBinary Field Value Type Description SqlDataType | Improve this Doc View Source DbBitArray Declaration public static readonly SqlDataType DbBitArray Field Value Type Description SqlDataType | Improve this Doc View Source DbBoolean Declaration public static readonly SqlDataType DbBoolean Field Value Type Description SqlDataType | Improve this Doc View Source DbByte Declaration public static readonly SqlDataType DbByte Field Value Type Description SqlDataType | Improve this Doc View Source DbChar Declaration public static readonly SqlDataType DbChar Field Value Type Description SqlDataType | Improve this Doc View Source DbDate Declaration public static readonly SqlDataType DbDate Field Value Type Description SqlDataType | Improve this Doc View Source DbDateTime Declaration public static readonly SqlDataType DbDateTime Field Value Type Description SqlDataType | Improve this Doc View Source DbDateTime2 Declaration public static readonly SqlDataType DbDateTime2 Field Value Type Description SqlDataType | Improve this Doc View Source DbDateTimeOffset Declaration public static readonly SqlDataType DbDateTimeOffset Field Value Type Description SqlDataType | Improve this Doc View Source DbDecimal Declaration public static readonly SqlDataType DbDecimal Field Value Type Description SqlDataType | Improve this Doc View Source DbDictionary Declaration public static readonly SqlDataType DbDictionary Field Value Type Description SqlDataType | Improve this Doc View Source DbDouble Declaration public static readonly SqlDataType DbDouble Field Value Type Description SqlDataType | Improve this Doc View Source DbGuid Declaration public static readonly SqlDataType DbGuid Field Value Type Description SqlDataType | Improve this Doc View Source DbImage Declaration public static readonly SqlDataType DbImage Field Value Type Description SqlDataType | Improve this Doc View Source DbInt16 Declaration public static readonly SqlDataType DbInt16 Field Value Type Description SqlDataType | Improve this Doc View Source DbInt32 Declaration public static readonly SqlDataType DbInt32 Field Value Type Description SqlDataType | Improve this Doc View Source DbInt64 Declaration public static readonly SqlDataType DbInt64 Field Value Type Description SqlDataType | Improve this Doc View Source DbMoney Declaration public static readonly SqlDataType DbMoney Field Value Type Description SqlDataType | Improve this Doc View Source DbNChar Declaration public static readonly SqlDataType DbNChar Field Value Type Description SqlDataType | Improve this Doc View Source DbNText Declaration public static readonly SqlDataType DbNText Field Value Type Description SqlDataType | Improve this Doc View Source DbNVarChar Declaration public static readonly SqlDataType DbNVarChar Field Value Type Description SqlDataType | Improve this Doc View Source DbSByte Declaration public static readonly SqlDataType DbSByte Field Value Type Description SqlDataType | Improve this Doc View Source DbSingle Declaration public static readonly SqlDataType DbSingle Field Value Type Description SqlDataType | Improve this Doc View Source DbSmallDateTime Declaration public static readonly SqlDataType DbSmallDateTime Field Value Type Description SqlDataType | Improve this Doc View Source DbSmallMoney Declaration public static readonly SqlDataType DbSmallMoney Field Value Type Description SqlDataType | Improve this Doc View Source DbText Declaration public static readonly SqlDataType DbText Field Value Type Description SqlDataType | Improve this Doc View Source DbTime Declaration public static readonly SqlDataType DbTime Field Value Type Description SqlDataType | Improve this Doc View Source DbTimestamp Declaration public static readonly SqlDataType DbTimestamp Field Value Type Description SqlDataType | Improve this Doc View Source DbUdt Declaration public static readonly SqlDataType DbUdt Field Value Type Description SqlDataType | Improve this Doc View Source DbUInt16 Declaration public static readonly SqlDataType DbUInt16 Field Value Type Description SqlDataType | Improve this Doc View Source DbUInt32 Declaration public static readonly SqlDataType DbUInt32 Field Value Type Description SqlDataType | Improve this Doc View Source DbUInt64 Declaration public static readonly SqlDataType DbUInt64 Field Value Type Description SqlDataType | Improve this Doc View Source DbVarBinary Declaration public static readonly SqlDataType DbVarBinary Field Value Type Description SqlDataType | Improve this Doc View Source DbVarChar Declaration public static readonly SqlDataType DbVarChar Field Value Type Description SqlDataType | Improve this Doc View Source DbVariant Declaration public static readonly SqlDataType DbVariant Field Value Type Description SqlDataType | Improve this Doc View Source DbXml Declaration public static readonly SqlDataType DbXml Field Value Type Description SqlDataType | Improve this Doc View Source Decimal Declaration public static readonly SqlDataType Decimal Field Value Type Description SqlDataType | Improve this Doc View Source Double Declaration public static readonly SqlDataType Double Field Value Type Description SqlDataType | Improve this Doc View Source Guid Declaration public static readonly SqlDataType Guid Field Value Type Description SqlDataType | Improve this Doc View Source Int16 Declaration public static readonly SqlDataType Int16 Field Value Type Description SqlDataType | Improve this Doc View Source Int32 Declaration public static readonly SqlDataType Int32 Field Value Type Description SqlDataType | Improve this Doc View Source LinqBinary Declaration public static readonly SqlDataType LinqBinary Field Value Type Description SqlDataType | Improve this Doc View Source SByte Declaration public static readonly SqlDataType SByte Field Value Type Description SqlDataType | Improve this Doc View Source Single Declaration public static readonly SqlDataType Single Field Value Type Description SqlDataType | Improve this Doc View Source SqlBinary Declaration public static readonly SqlDataType SqlBinary Field Value Type Description SqlDataType | Improve this Doc View Source SqlBoolean Declaration public static readonly SqlDataType SqlBoolean Field Value Type Description SqlDataType | Improve this Doc View Source SqlByte Declaration public static readonly SqlDataType SqlByte Field Value Type Description SqlDataType | Improve this Doc View Source SqlBytes Declaration public static readonly SqlDataType SqlBytes Field Value Type Description SqlDataType | Improve this Doc View Source SqlChars Declaration public static readonly SqlDataType SqlChars Field Value Type Description SqlDataType | Improve this Doc View Source SqlDateTime Declaration public static readonly SqlDataType SqlDateTime Field Value Type Description SqlDataType | Improve this Doc View Source SqlDecimal Declaration public static readonly SqlDataType SqlDecimal Field Value Type Description SqlDataType | Improve this Doc View Source SqlDouble Declaration public static readonly SqlDataType SqlDouble Field Value Type Description SqlDataType | Improve this Doc View Source SqlGuid Declaration public static readonly SqlDataType SqlGuid Field Value Type Description SqlDataType | Improve this Doc View Source SqlInt16 Declaration public static readonly SqlDataType SqlInt16 Field Value Type Description SqlDataType | Improve this Doc View Source SqlInt32 Declaration public static readonly SqlDataType SqlInt32 Field Value Type Description SqlDataType | Improve this Doc View Source SqlInt64 Declaration public static readonly SqlDataType SqlInt64 Field Value Type Description SqlDataType | Improve this Doc View Source SqlMoney Declaration public static readonly SqlDataType SqlMoney Field Value Type Description SqlDataType | Improve this Doc View Source SqlSingle Declaration public static readonly SqlDataType SqlSingle Field Value Type Description SqlDataType | Improve this Doc View Source SqlString Declaration public static readonly SqlDataType SqlString Field Value Type Description SqlDataType | Improve this Doc View Source SqlXml Declaration public static readonly SqlDataType SqlXml Field Value Type Description SqlDataType | Improve this Doc View Source String Declaration public static readonly SqlDataType String Field Value Type Description SqlDataType | Improve this Doc View Source TimeSpan Declaration public static readonly SqlDataType TimeSpan Field Value Type Description SqlDataType | Improve this Doc View Source UInt16 Declaration public static readonly SqlDataType UInt16 Field Value Type Description SqlDataType | Improve this Doc View Source UInt32 Declaration public static readonly SqlDataType UInt32 Field Value Type Description SqlDataType | Improve this Doc View Source UInt64 Declaration public static readonly SqlDataType UInt64 Field Value Type Description SqlDataType | Improve this Doc View Source Undefined Declaration public static readonly SqlDataType Undefined Field Value Type Description SqlDataType Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean Implements ISqlExpression.CanBeNull | Improve this Doc View Source DataType Declaration public DataType DataType { get; } Property Value Type Description DataType | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source IsCharDataType Declaration public bool IsCharDataType { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Declaration public int ? Length { get; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlExpression.Precedence | Improve this Doc View Source Precision Declaration public int ? Precision { get; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source Scale Declaration public int ? Scale { get; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description System.Type Implements ISqlExpression.SystemType | Improve this Doc View Source Type Declaration public Type Type { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) | Improve this Doc View Source GetDataType(DataType) Declaration public static SqlDataType GetDataType(DataType type) Parameters Type Name Description DataType type Returns Type Description SqlDataType | Improve this Doc View Source GetDataType(Type) Declaration public static SqlDataType GetDataType(Type type) Parameters Type Name Description System.Type type Returns Type Description SqlDataType | Improve this Doc View Source GetMaxDisplaySize(DataType) Declaration public static int GetMaxDisplaySize(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description System.Int32 | Improve this Doc View Source GetMaxLength(DataType) Declaration public static int GetMaxLength(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description System.Int32 | Improve this Doc View Source GetMaxPrecision(DataType) Declaration public static int GetMaxPrecision(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description System.Int32 | Improve this Doc View Source GetMaxScale(DataType) Declaration public static int GetMaxScale(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description System.Int32 | Improve this Doc View Source TypeCanBeNull(Type) Declaration public static bool TypeCanBeNull(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T)"
  },
  "api/LinqToDB.AnalyticFunctions.INeedSingleOrderByAndMaybeOverWithPartition-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.INeedSingleOrderByAndMaybeOverWithPartition-1.html",
    "title": "Interface AnalyticFunctions.INeedSingleOrderByAndMaybeOverWithPartition<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.INeedSingleOrderByAndMaybeOverWithPartition<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface INeedSingleOrderByAndMaybeOverWithPartition<out TR> Type Parameters Name Description TR Methods | Improve this Doc View Source OrderBy<TKey>(TKey) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr}\", TokenName = \"order_item\")] AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR> OrderBy<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR> Type Parameters Name Description TKey | Improve this Doc View Source OrderByDesc<TKey>(TKey) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\")] AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR> OrderByDesc<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR> Type Parameters Name Description TKey"
  },
  "api/LinqToDB.AnalyticFunctions.IOverMayHavePartitionAndOrder-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IOverMayHavePartitionAndOrder-1.html",
    "title": "Interface AnalyticFunctions.IOverMayHavePartitionAndOrder<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IOverMayHavePartitionAndOrder<TR> Inherited Members AnalyticFunctions.IReadyToFunction<TR>.ToValue() AnalyticFunctions.INeedsOrderByOnly<TR>.OrderBy<TKey>(TKey) AnalyticFunctions.INeedsOrderByOnly<TR>.OrderBy<TKey>(TKey, Sql.NullsPosition) AnalyticFunctions.INeedsOrderByOnly<TR>.OrderByDesc<TKey>(TKey) AnalyticFunctions.INeedsOrderByOnly<TR>.OrderByDesc<TKey>(TKey, Sql.NullsPosition) Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IOverMayHavePartitionAndOrder<out TR> : AnalyticFunctions.IReadyToFunction<TR>, AnalyticFunctions.INeedsOrderByOnly<TR> Type Parameters Name Description TR Methods | Improve this Doc View Source PartitionBy(Object[]) Declaration [Sql.Extension(\"PARTITION BY {expr, ', '}\", TokenName = \"query_partition_clause\")] AnalyticFunctions.IPartitionedMayHaveOrder<TR> PartitionBy([ExprParameter(\"expr\")] params object[] expressions) Parameters Type Name Description System.Object[] expressions Returns Type Description LinqToDB.AnalyticFunctions.IPartitionedMayHaveOrder<TR>"
  },
  "api/LinqToDB.AnalyticFunctions.ISecondBoundaryExpected-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.ISecondBoundaryExpected-1.html",
    "title": "Interface AnalyticFunctions.ISecondBoundaryExpected<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.ISecondBoundaryExpected<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ISecondBoundaryExpected<out TR> Type Parameters Name Description TR Properties | Improve this Doc View Source CurrentRow Declaration [Sql.Extension(\"CURRENT ROW\", TokenName = \"end_boundary\")] AnalyticFunctions.IReadyToFunction<TR> CurrentRow { get; } Property Value Type Description LinqToDB.AnalyticFunctions.IReadyToFunction<TR> | Improve this Doc View Source UnboundedFollowing Declaration [Sql.Extension(\"UNBOUNDED FOLLOWING\", TokenName = \"end_boundary\")] AnalyticFunctions.IReadyToFunction<TR> UnboundedFollowing { get; } Property Value Type Description LinqToDB.AnalyticFunctions.IReadyToFunction<TR> Methods | Improve this Doc View Source ValueFollowing<T>(T) Declaration [Sql.Extension(\"{value_expr} FOLLOWING\", TokenName = \"end_boundary\")] AnalyticFunctions.IReadyToFunction<TR> ValueFollowing<T>([ExprParameter(\"value_expr\")] T value) Parameters Type Name Description T value Returns Type Description LinqToDB.AnalyticFunctions.IReadyToFunction<TR> Type Parameters Name Description T | Improve this Doc View Source ValuePreceding<T>(T) Declaration [Sql.Extension(\"{value_expr} PRECEDING\", TokenName = \"end_boundary\")] AnalyticFunctions.IReadyToFunction<TR> ValuePreceding<T>([ExprParameter(\"value_expr\")] T value) Parameters Type Name Description T value Returns Type Description LinqToDB.AnalyticFunctions.IReadyToFunction<TR> Type Parameters Name Description T"
  },
  "api/LinqToDB.Common.Configuration.html": {
    "href": "api/LinqToDB.Common.Configuration.html",
    "title": "Class Configuration | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration Inheritance System.Object Configuration Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Configuration Fields | Improve this Doc View Source AvoidSpecificDataProviderAPI Declaration public static bool AvoidSpecificDataProviderAPI Field Value Type Description System.Boolean | Improve this Doc View Source IsStructIsScalarType Declaration public static bool IsStructIsScalarType Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.Common.html": {
    "href": "api/LinqToDB.Common.html",
    "title": "Namespace LinqToDB.Common | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Common Classes Array<T> Configuration Configuration.Linq Configuration.LinqService Configuration.RetryPolicy Convert<TFrom, TTo> Converter ConvertTo<TTo> DefaultValue DefaultValue<T> LinqToDBConvertException Defines the base class for the namespace exceptions. Tools"
  },
  "api/LinqToDB.Configuration.IDataProviderSettings.html": {
    "href": "api/LinqToDB.Configuration.IDataProviderSettings.html",
    "title": "Interface IDataProviderSettings | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataProviderSettings Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public interface IDataProviderSettings Properties | Improve this Doc View Source Attributes Attibutes collection Declaration IEnumerable<NamedValue> Attributes { get; } Property Value Type Description System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue> | Improve this Doc View Source Default Gets a value indicating whether the provider is default. Declaration bool Default { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets or sets a name of this data provider. Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source TypeName Gets or sets an assembly qualified type name of this data provider. Declaration string TypeName { get; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Data.DataConnectionTransaction.html": {
    "href": "api/LinqToDB.Data.DataConnectionTransaction.html",
    "title": "Class DataConnectionTransaction | Linq To DB (aka linq2db)",
    "keywords": "Class DataConnectionTransaction Inheritance System.Object DataConnectionTransaction Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataConnectionTransaction : IDisposable Constructors | Improve this Doc View Source DataConnectionTransaction(DataConnection) Declaration public DataConnectionTransaction(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Properties | Improve this Doc View Source DataConnection Declaration public DataConnection DataConnection { get; } Property Value Type Description DataConnection Methods | Improve this Doc View Source Commit() Declaration public void Commit() | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements System.IDisposable.Dispose() | Improve this Doc View Source Rollback() Declaration public void Rollback()"
  },
  "api/LinqToDB.DataContextTransaction.html": {
    "href": "api/LinqToDB.DataContextTransaction.html",
    "title": "Class DataContextTransaction | Linq To DB (aka linq2db)",
    "keywords": "Class DataContextTransaction Inheritance System.Object DataContextTransaction Namespace : LinqToDB Assembly : linq2db.dll Syntax public class DataContextTransaction : IDisposable Constructors | Improve this Doc View Source DataContextTransaction(DataContext) Declaration public DataContextTransaction(DataContext dataContext) Parameters Type Name Description DataContext dataContext Properties | Improve this Doc View Source DataContext Declaration public DataContext DataContext { get; set; } Property Value Type Description DataContext Methods | Improve this Doc View Source BeginTransaction() Declaration public void BeginTransaction() | Improve this Doc View Source BeginTransaction(IsolationLevel) Declaration public void BeginTransaction(IsolationLevel level) Parameters Type Name Description System.Data.IsolationLevel level | Improve this Doc View Source CommitTransaction() Declaration public void CommitTransaction() | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements System.IDisposable.Dispose() | Improve this Doc View Source RollbackTransaction() Declaration public void RollbackTransaction()"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.SearchCondition.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.SearchCondition.html",
    "title": "Class SelectQuery.SearchCondition | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.SearchCondition Inheritance System.Object LinqToDB.SqlQuery.SelectQuery.ConditionBase<LinqToDB.SqlQuery.SelectQuery.SearchCondition, LinqToDB.SqlQuery.SelectQuery.SearchCondition.Next> SelectQuery.SearchCondition Inherited Members SelectQuery.ConditionBase<SelectQuery.SearchCondition, SelectQuery.SearchCondition.Next>.Search SelectQuery.ConditionBase<SelectQuery.SearchCondition, SelectQuery.SearchCondition.Next>.GetNext() SelectQuery.ConditionBase<SelectQuery.SearchCondition, SelectQuery.SearchCondition.Next>.SetOr(Boolean) SelectQuery.ConditionBase<SelectQuery.SearchCondition, SelectQuery.SearchCondition.Next>.Not SelectQuery.ConditionBase<SelectQuery.SearchCondition, SelectQuery.SearchCondition.Next>.Expr(ISqlExpression) SelectQuery.ConditionBase<SelectQuery.SearchCondition, SelectQuery.SearchCondition.Next>.Field(SqlField) SelectQuery.ConditionBase<SelectQuery.SearchCondition, SelectQuery.SearchCondition.Next>.SubQuery(SelectQuery) SelectQuery.ConditionBase<SelectQuery.SearchCondition, SelectQuery.SearchCondition.Next>.Value(Object) SelectQuery.ConditionBase<SelectQuery.SearchCondition, SelectQuery.SearchCondition.Next>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SearchCondition : SelectQuery.ConditionBase<SelectQuery.SearchCondition, SelectQuery.SearchCondition.Next>, SelectQuery.IConditionExpr<SelectQuery.ConditionBase<SelectQuery.SearchCondition, SelectQuery.SearchCondition.Next>.Expr_>, ISqlPredicate, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SearchCondition() Declaration public SearchCondition() | Improve this Doc View Source SearchCondition(SelectQuery.Condition[]) Declaration public SearchCondition(params SelectQuery.Condition[] list) Parameters Type Name Description LinqToDB.SqlQuery.SelectQuery.Condition[] list | Improve this Doc View Source SearchCondition(IEnumerable<SelectQuery.Condition>) Declaration public SearchCondition(IEnumerable<SelectQuery.Condition> list) Parameters Type Name Description System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SelectQuery.Condition> list Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean Implements ISqlPredicate.CanBeNull ISqlExpression.CanBeNull | Improve this Doc View Source Conditions Declaration public List<SelectQuery.Condition> Conditions { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.SelectQuery.Condition> | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlPredicate.Precedence ISqlExpression.Precedence | Improve this Doc View Source Search Declaration protected override SelectQuery.SearchCondition Search { get; } Property Value Type Description SelectQuery.SearchCondition Overrides LinqToDB.SqlQuery.SelectQuery.ConditionBase<LinqToDB.SqlQuery.SelectQuery.SearchCondition, LinqToDB.SqlQuery.SelectQuery.SearchCondition.Next>.Search | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description System.Type Implements ISqlExpression.SystemType Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) | Improve this Doc View Source GetNext() Declaration protected override SelectQuery.SearchCondition.Next GetNext() Returns Type Description SelectQuery.SearchCondition.Next Overrides LinqToDB.SqlQuery.SelectQuery.ConditionBase<LinqToDB.SqlQuery.SelectQuery.SearchCondition, LinqToDB.SqlQuery.SelectQuery.SearchCondition.Next>.GetNext() Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.SelectClause.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.SelectClause.html",
    "title": "Class SelectQuery.SelectClause | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.SelectClause Inheritance System.Object SelectQuery.ClauseBase SelectQuery.SelectClause Inherited Members SelectQuery.ClauseBase.Select SelectQuery.ClauseBase.From SelectQuery.ClauseBase.Where SelectQuery.ClauseBase.GroupBy SelectQuery.ClauseBase.Having SelectQuery.ClauseBase.OrderBy SelectQuery.ClauseBase.End() SelectQuery.ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SelectClause : SelectQuery.ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source Columns Declaration public List<SelectQuery.Column> Columns { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.SelectQuery.Column> | Improve this Doc View Source Distinct Declaration public SelectQuery.SelectClause Distinct { get; } Property Value Type Description SelectQuery.SelectClause | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source HasModifier Declaration public bool HasModifier { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDistinct Declaration public bool IsDistinct { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipValue Declaration public ISqlExpression SkipValue { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source TakeHints Declaration public TakeHints? TakeHints { get; } Property Value Type Description System.Nullable<LinqToDB.TakeHints> | Improve this Doc View Source TakeValue Declaration public ISqlExpression TakeValue { get; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Add(ISqlExpression) Declaration public int Add(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Int32 | Improve this Doc View Source Add(ISqlExpression, String) Declaration public int Add(ISqlExpression expr, string alias) Parameters Type Name Description ISqlExpression expr System.String alias Returns Type Description System.Int32 | Improve this Doc View Source AddNew(ISqlExpression) Declaration public int AddNew(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Int32 | Improve this Doc View Source Expr(ISqlExpression) Declaration public SelectQuery.SelectClause Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Expr(ISqlExpression, String) Declaration public SelectQuery.SelectClause Expr(ISqlExpression expr, string alias) Parameters Type Name Description ISqlExpression expr System.String alias Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Expr(String, ISqlExpression[]) Declaration public SelectQuery.SelectClause Expr(string expr, params ISqlExpression[] values) Parameters Type Name Description System.String expr LinqToDB.SqlQuery.ISqlExpression[] values Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Expr(String, Int32, ISqlExpression[]) Declaration public SelectQuery.SelectClause Expr(string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description System.String expr System.Int32 priority LinqToDB.SqlQuery.ISqlExpression[] values Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Expr(String, String, Int32, ISqlExpression[]) Declaration public SelectQuery.SelectClause Expr(string alias, string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description System.String alias System.String expr System.Int32 priority LinqToDB.SqlQuery.ISqlExpression[] values Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Expr(Type, String, ISqlExpression[]) Declaration public SelectQuery.SelectClause Expr(Type systemType, string expr, params ISqlExpression[] values) Parameters Type Name Description System.Type systemType System.String expr LinqToDB.SqlQuery.ISqlExpression[] values Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Expr(Type, String, Int32, ISqlExpression[]) Declaration public SelectQuery.SelectClause Expr(Type systemType, string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description System.Type systemType System.String expr System.Int32 priority LinqToDB.SqlQuery.ISqlExpression[] values Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Expr(Type, String, String, Int32, ISqlExpression[]) Declaration public SelectQuery.SelectClause Expr(Type systemType, string alias, string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description System.Type systemType System.String alias System.String expr System.Int32 priority LinqToDB.SqlQuery.ISqlExpression[] values Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Expr<T>(ISqlExpression, String, ISqlExpression) Declaration public SelectQuery.SelectClause Expr<T>(ISqlExpression expr1, string operation, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 System.String operation ISqlExpression expr2 Returns Type Description SelectQuery.SelectClause Type Parameters Name Description T | Improve this Doc View Source Expr<T>(ISqlExpression, String, ISqlExpression, Int32) Declaration public SelectQuery.SelectClause Expr<T>(ISqlExpression expr1, string operation, ISqlExpression expr2, int priority) Parameters Type Name Description ISqlExpression expr1 System.String operation ISqlExpression expr2 System.Int32 priority Returns Type Description SelectQuery.SelectClause Type Parameters Name Description T | Improve this Doc View Source Expr<T>(String, ISqlExpression, String, ISqlExpression, Int32) Declaration public SelectQuery.SelectClause Expr<T>(string alias, ISqlExpression expr1, string operation, ISqlExpression expr2, int priority) Parameters Type Name Description System.String alias ISqlExpression expr1 System.String operation ISqlExpression expr2 System.Int32 priority Returns Type Description SelectQuery.SelectClause Type Parameters Name Description T | Improve this Doc View Source Field(SqlField) Declaration public SelectQuery.SelectClause Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Field(SqlField, String) Declaration public SelectQuery.SelectClause Field(SqlField field, string alias) Parameters Type Name Description SqlField field System.String alias Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Skip(ISqlExpression) Declaration public SelectQuery.SelectClause Skip(ISqlExpression value) Parameters Type Name Description ISqlExpression value Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Skip(Int32) Declaration public SelectQuery.SelectClause Skip(int value) Parameters Type Name Description System.Int32 value Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source SubQuery(SelectQuery) Declaration public SelectQuery.SelectClause SubQuery(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source SubQuery(SelectQuery, String) Declaration public SelectQuery.SelectClause SubQuery(SelectQuery selectQuery, string alias) Parameters Type Name Description SelectQuery selectQuery System.String alias Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Take(ISqlExpression, Nullable<TakeHints>) Declaration public SelectQuery.SelectClause Take(ISqlExpression value, TakeHints? hints) Parameters Type Name Description ISqlExpression value System.Nullable<LinqToDB.TakeHints> hints Returns Type Description SelectQuery.SelectClause | Improve this Doc View Source Take(Int32, Nullable<TakeHints>) Declaration public SelectQuery.SelectClause Take(int value, TakeHints? hints) Parameters Type Name Description System.Int32 value System.Nullable<LinqToDB.TakeHints> hints Returns Type Description SelectQuery.SelectClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.SetExpression.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.SetExpression.html",
    "title": "Class SelectQuery.SetExpression | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.SetExpression Inheritance System.Object SelectQuery.SetExpression Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SetExpression : IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SetExpression(ISqlExpression, ISqlExpression) Declaration public SetExpression(ISqlExpression column, ISqlExpression expression) Parameters Type Name Description ISqlExpression column ISqlExpression expression Properties | Improve this Doc View Source Column Declaration public ISqlExpression Column { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition-1.html",
    "title": "Interface AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface INeedOrderByAndMaybeOverWithPartition<out TR> Type Parameters Name Description TR Methods | Improve this Doc View Source OrderBy<TKey>(TKey) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr}\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> OrderBy<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source OrderBy<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr}\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> OrderBy<TKey>([ExprParameter] TKey expr, Sql.NullsPosition nulls) Parameters Type Name Description TKey expr Sql.NullsPosition nulls Returns Type Description LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source OrderByDesc<TKey>(TKey) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> OrderByDesc<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source OrderByDesc<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> OrderByDesc<TKey>([ExprParameter] TKey expr, Sql.NullsPosition nulls) Parameters Type Name Description TKey expr Sql.NullsPosition nulls Returns Type Description LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> Type Parameters Name Description TKey"
  },
  "api/LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition-1.html",
    "title": "Interface AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface INeedsWithinGroupWithOrderAndMaybePartition<out TR> Type Parameters Name Description TR Properties | Improve this Doc View Source WithinGroup Declaration [Sql.Extension(\"WITHIN GROUP ({order_by_clause}){_}{over?}\", TokenName = \"within_group\")] AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> WithinGroup { get; } Property Value Type Description LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR>"
  },
  "api/LinqToDB.AnalyticFunctions.IReadyForSortingWithWindow-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IReadyForSortingWithWindow-1.html",
    "title": "Interface AnalyticFunctions.IReadyForSortingWithWindow<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IReadyForSortingWithWindow<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IReadyForSortingWithWindow<out TR> Type Parameters Name Description TR Methods | Improve this Doc View Source OrderBy<TKey>(TKey) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr}\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedReadyToWindowing<TR> OrderBy<TKey>([ExprParameter(\"expr\")] TKey keySelector) Parameters Type Name Description TKey keySelector Returns Type Description LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR> Type Parameters Name Description TKey | Improve this Doc View Source OrderBy<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr}\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedReadyToWindowing<TR> OrderBy<TKey>([ExprParameter(\"expr\")] TKey keySelector, Sql.NullsPosition nulls) Parameters Type Name Description TKey keySelector Sql.NullsPosition nulls Returns Type Description LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR> Type Parameters Name Description TKey | Improve this Doc View Source OrderByDesc<TKey>(TKey) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedReadyToWindowing<TR> OrderByDesc<TKey>([ExprParameter(\"expr\")] TKey keySelector) Parameters Type Name Description TKey keySelector Returns Type Description LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR> Type Parameters Name Description TKey | Improve this Doc View Source OrderByDesc<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedReadyToWindowing<TR> OrderByDesc<TKey>([ExprParameter(\"expr\")] TKey keySelector, Sql.NullsPosition nulls) Parameters Type Name Description TKey keySelector Sql.NullsPosition nulls Returns Type Description LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR> Type Parameters Name Description TKey"
  },
  "api/LinqToDB.Common.Configuration.RetryPolicy.html": {
    "href": "api/LinqToDB.Common.Configuration.RetryPolicy.html",
    "title": "Class Configuration.RetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.RetryPolicy Inheritance System.Object Configuration.RetryPolicy Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class RetryPolicy Fields | Improve this Doc View Source DefaultCoefficient The default coefficient for the exponential function used to compute the delay between retries, must be nonnegative. Declaration public static TimeSpan DefaultCoefficient Field Value Type Description System.TimeSpan | Improve this Doc View Source DefaultExponentialBase The default base for the exponential function used to compute the delay between retries, must be positive. Declaration public static double DefaultExponentialBase Field Value Type Description System.Double | Improve this Doc View Source DefaultMaxDelay The default maximum time delay between retries, must be nonnegative. Declaration public static TimeSpan DefaultMaxDelay Field Value Type Description System.TimeSpan | Improve this Doc View Source DefaultMaxRetryCount The default number of retry attempts. Declaration public static int DefaultMaxRetryCount Field Value Type Description System.Int32 | Improve this Doc View Source DefaultRandomFactor The default maximum random factor, must not be lesser than 1. Declaration public static double DefaultRandomFactor Field Value Type Description System.Double | Improve this Doc View Source Factory Declaration public static Func<DataConnection, IRetryPolicy> Factory Field Value Type Description System.Func<LinqToDB.Data.DataConnection, LinqToDB.Data.RetryPolicy.IRetryPolicy> Properties | Improve this Doc View Source UseDefaultPolicy Declaration public static bool UseDefaultPolicy { get; set; } Property Value Type Description System.Boolean"
  },
  "api/LinqToDB.Common.Tools.html": {
    "href": "api/LinqToDB.Common.Tools.html",
    "title": "Class Tools | Linq To DB (aka linq2db)",
    "keywords": "Class Tools Inheritance System.Object Tools Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Tools Methods | Improve this Doc View Source Args(String, Object[]) Declaration public static string Args(this string format, params object[] args) Parameters Type Name Description System.String format System.Object[] args Returns Type Description System.String | Improve this Doc View Source GetFileName(Assembly) Declaration public static string GetFileName(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly Returns Type Description System.String | Improve this Doc View Source GetPath(Assembly) Declaration public static string GetPath(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly Returns Type Description System.String | Improve this Doc View Source GetPathFromUri(String) Declaration public static string GetPathFromUri(this string uriString) Parameters Type Name Description System.String uriString Returns Type Description System.String | Improve this Doc View Source IsNullOrEmpty(ICollection) Declaration public static bool IsNullOrEmpty(this ICollection array) Parameters Type Name Description System.Collections.ICollection array Returns Type Description System.Boolean | Improve this Doc View Source IsNullOrEmpty(String) Declaration public static bool IsNullOrEmpty(this string str) Parameters Type Name Description System.String str Returns Type Description System.Boolean"
  },
  "api/LinqToDB.Configuration.IConnectionStringSettings.html": {
    "href": "api/LinqToDB.Configuration.IConnectionStringSettings.html",
    "title": "Interface IConnectionStringSettings | Linq To DB (aka linq2db)",
    "keywords": "Interface IConnectionStringSettings Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public interface IConnectionStringSettings Properties | Improve this Doc View Source ConnectionString Declaration string ConnectionString { get; } Property Value Type Description System.String | Improve this Doc View Source IsGlobal Declaration bool IsGlobal { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source ProviderName Declaration string ProviderName { get; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Data.BulkCopyType.html": {
    "href": "api/LinqToDB.Data.BulkCopyType.html",
    "title": "Enum BulkCopyType | Linq To DB (aka linq2db)",
    "keywords": "Enum BulkCopyType Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public enum BulkCopyType Fields Name Description Default MultipleRows ProviderSpecific RowByRow Extension Methods Sql.Between<BulkCopyType>(BulkCopyType, BulkCopyType) Sql.NotBetween<BulkCopyType>(BulkCopyType, BulkCopyType)"
  },
  "api/LinqToDB.Data.RetryPolicy.IRetryPolicy.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.IRetryPolicy.html",
    "title": "Interface IRetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Interface IRetryPolicy Namespace : LinqToDB.Data.RetryPolicy Assembly : linq2db.dll Syntax public interface IRetryPolicy Methods | Improve this Doc View Source Execute(Action) Declaration void Execute(Action operation) Parameters Type Name Description System.Action operation | Improve this Doc View Source Execute<TResult>(Func<TResult>) Executes the specified operation and returns the result. Declaration TResult Execute<TResult>(Func<TResult> operation) Parameters Type Name Description System.Func<TResult> operation A delegate representing an executable operation that returns the result of type TResult . Returns Type Description TResult The result from the operation. Type Parameters Name Description TResult The return type of operation . | Improve this Doc View Source ExecuteAsync(Func<CancellationToken, Task>, CancellationToken) Declaration Task ExecuteAsync(Func<CancellationToken, Task> operation, CancellationToken cancellationToken = null) Parameters Type Name Description System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> operation System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) Executes the specified asynchronous operation and returns the result. Declaration Task<TResult> ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken = null) Parameters Type Name Description System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>> operation A function that returns a started task of type TResult . System.Threading.CancellationToken cancellationToken A cancellation token used to cancel the retry operation, but not operations that are already in flight or that already completed successfully. Returns Type Description System.Threading.Tasks.Task<TResult> A task that will run to completion if the original task completes successfully (either the first time or after retrying transient failures). If the task fails with a non-transient error or the retry limit is reached, the returned task will become faulted and the exception must be observed. Type Parameters Name Description TResult The result type of the System.Threading.Tasks.Task<TResult> returned by operation ."
  },
  "api/LinqToDB.DataProvider.BasicBulkCopy.html": {
    "href": "api/LinqToDB.DataProvider.BasicBulkCopy.html",
    "title": "Class BasicBulkCopy | Linq To DB (aka linq2db)",
    "keywords": "Class BasicBulkCopy Inheritance System.Object BasicBulkCopy Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class BasicBulkCopy Methods | Improve this Doc View Source BulkCopy<T>(BulkCopyType, DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public virtual BulkCopyRowsCopied BulkCopy<T>(BulkCopyType bulkCopyType, DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description BulkCopyType bulkCopyType DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source CreateBulkCopyCreator(Type, Type, Type) Declaration protected Func<IDbConnection, int, IDisposable> CreateBulkCopyCreator(Type connectionType, Type bulkCopyType, Type bulkCopyOptionType) Parameters Type Name Description System.Type connectionType System.Type bulkCopyType System.Type bulkCopyOptionType Returns Type Description System.Func<System.Data.IDbConnection, System.Int32, System.IDisposable> | Improve this Doc View Source CreateBulkCopySubscriber(Object, String) Declaration protected Action<object, Action<object>> CreateBulkCopySubscriber(object bulkCopy, string eventName) Parameters Type Name Description System.Object bulkCopy System.String eventName Returns Type Description System.Action<System.Object, System.Action<System.Object>> | Improve this Doc View Source CreateColumnMappingCreator(Type) Declaration protected Func<int, string, object> CreateColumnMappingCreator(Type columnMappingType) Parameters Type Name Description System.Type columnMappingType Returns Type Description System.Func<System.Int32, System.String, System.Object> | Improve this Doc View Source GetTableName(ISqlBuilder, BulkCopyOptions, EntityDescriptor) Declaration protected static string GetTableName(ISqlBuilder sqlBuilder, BulkCopyOptions options, EntityDescriptor descriptor) Parameters Type Name Description ISqlBuilder sqlBuilder BulkCopyOptions options EntityDescriptor descriptor Returns Type Description System.String | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration protected virtual BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy1<T>(DataConnection, BulkCopyOptions, Boolean, IEnumerable<T>) Declaration protected BulkCopyRowsCopied MultipleRowsCopy1<T>(DataConnection dataConnection, BulkCopyOptions options, bool enforceKeepIdentity, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Boolean enforceKeepIdentity System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy1<T>(MultipleRowsHelper<T>, DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration protected BulkCopyRowsCopied MultipleRowsCopy1<T>(MultipleRowsHelper<T> helper, DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description LinqToDB.DataProvider.MultipleRowsHelper<T> helper DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy2<T>(DataConnection, BulkCopyOptions, Boolean, IEnumerable<T>, String) Declaration protected virtual BulkCopyRowsCopied MultipleRowsCopy2<T>(DataConnection dataConnection, BulkCopyOptions options, bool enforceKeepIdentity, IEnumerable<T> source, string from) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Boolean enforceKeepIdentity System.Collections.Generic.IEnumerable<T> source System.String from Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy2<T>(MultipleRowsHelper<T>, DataConnection, BulkCopyOptions, IEnumerable<T>, String) Declaration protected BulkCopyRowsCopied MultipleRowsCopy2<T>(MultipleRowsHelper<T> helper, DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source, string from) Parameters Type Name Description LinqToDB.DataProvider.MultipleRowsHelper<T> helper DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source System.String from Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy3<T>(DataConnection, BulkCopyOptions, IEnumerable<T>, String) Declaration protected BulkCopyRowsCopied MultipleRowsCopy3<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source, string from) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source System.String from Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ProviderSpecificCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration protected virtual BulkCopyRowsCopied ProviderSpecificCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source RowByRowCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration protected virtual BulkCopyRowsCopied RowByRowCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source TraceAction(DataConnection, String, Func<Int32>) Declaration protected void TraceAction(DataConnection dataConnection, string commandText, Func<int> action) Parameters Type Name Description DataConnection dataConnection System.String commandText System.Func<System.Int32> action"
  },
  "api/LinqToDB.DataProvider.BasicMerge.ColumnInfo.html": {
    "href": "api/LinqToDB.DataProvider.BasicMerge.ColumnInfo.html",
    "title": "Class BasicMerge.ColumnInfo | Linq To DB (aka linq2db)",
    "keywords": "Class BasicMerge.ColumnInfo Inheritance System.Object BasicMerge.ColumnInfo Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax protected class ColumnInfo Fields | Improve this Doc View Source Column Declaration public ColumnDescriptor Column Field Value Type Description ColumnDescriptor | Improve this Doc View Source Name Declaration public string Name Field Value Type Description System.String"
  },
  "api/LinqToDB.DataProvider.DB2.DB2Version.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2Version.html",
    "title": "Enum DB2Version | Linq To DB (aka linq2db)",
    "keywords": "Enum DB2Version Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public enum DB2Version Fields Name Description LUW zOS Extension Methods Sql.Between<DB2Version>(DB2Version, DB2Version) Sql.NotBetween<DB2Version>(DB2Version, DB2Version)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2zOSMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2zOSMappingSchema.html",
    "title": "Class DB2zOSMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DB2zOSMappingSchema Inheritance System.Object MappingSchema DB2zOSMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2zOSMappingSchema : MappingSchema Constructors | Improve this Doc View Source DB2zOSMappingSchema() Declaration public DB2zOSMappingSchema()"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.html",
    "title": "Class FirebirdSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdSqlBuilder Inheritance System.Object BasicSqlBuilder FirebirdSqlBuilder Inherited Members BasicSqlBuilder.SelectQuery BasicSqlBuilder.Indent BasicSqlBuilder.BuildStep BasicSqlBuilder.SqlOptimizer BasicSqlBuilder.SqlProviderFlags BasicSqlBuilder.ValueToSqlConverter BasicSqlBuilder.StringBuilder BasicSqlBuilder.SkipAlias BasicSqlBuilder.IsNestedJoinSupported BasicSqlBuilder.IsNestedJoinParenthesisRequired BasicSqlBuilder.WrapJoinCondition BasicSqlBuilder.BuildSql(Int32, SelectQuery, StringBuilder) BasicSqlBuilder.BuildSql(Int32, SelectQuery, StringBuilder, Int32, Boolean) BasicSqlBuilder.BuildSqlBuilder(SelectQuery, Int32, Boolean) BasicSqlBuilder.WithStringBuilder<T>(StringBuilder, Func<T>) BasicSqlBuilder.ParenthesizeJoin(List<SelectQuery.JoinedTable>) BasicSqlBuilder.BuildSql() BasicSqlBuilder.BuildDeleteQuery() BasicSqlBuilder.BuildUpdateQuery() BasicSqlBuilder.BuildSelectQuery() BasicSqlBuilder.BuildInsertQuery() BasicSqlBuilder.BuildUnknownQuery() BasicSqlBuilder.ConvertTableName(StringBuilder, String, String, String) BasicSqlBuilder.BuildTableName(StringBuilder, String, String, String) BasicSqlBuilder.GetSelectedColumns() BasicSqlBuilder.BuildColumns() BasicSqlBuilder.BuildDeleteClause() BasicSqlBuilder.BuildUpdateClause() BasicSqlBuilder.BuildUpdateTable() BasicSqlBuilder.BuildUpdateTableName() BasicSqlBuilder.BuildUpdateSet() BasicSqlBuilder.BuildInsertClause() BasicSqlBuilder.BuildEmptyInsert() BasicSqlBuilder.BuildOutputSubclause() BasicSqlBuilder.BuildInsertClause(String, Boolean) BasicSqlBuilder.BuildInsertOrUpdateQueryAsMerge(String) BasicSqlBuilder.EndLine BasicSqlBuilder.BuildInsertOrUpdateQueryAsUpdateInsert() BasicSqlBuilder.BuildStartCreateTableStatement(SelectQuery.CreateTableStatement) BasicSqlBuilder.BuildEndCreateTableStatement(SelectQuery.CreateTableStatement) BasicSqlBuilder.BuildCreateTableStatement() BasicSqlBuilder.BuildCreateTableFieldType(SqlField) BasicSqlBuilder.BuildCreateTableIdentityAttribute1(SqlField) BasicSqlBuilder.BuildCreateTableIdentityAttribute2(SqlField) BasicSqlBuilder.BuildCreateTablePrimaryKey(String, IEnumerable<String>) BasicSqlBuilder.BuildPhysicalTable(ISqlTableSource, String) BasicSqlBuilder.BuildTableName(SelectQuery.TableSource, Boolean, Boolean) BasicSqlBuilder.BuildJoinType(SelectQuery.JoinedTable) BasicSqlBuilder.BuildWhere() BasicSqlBuilder.BuildWhereClause() BasicSqlBuilder.BuildGroupByClause() BasicSqlBuilder.BuildHavingClause() BasicSqlBuilder.BuildOrderByClause() BasicSqlBuilder.LimitFormat BasicSqlBuilder.OffsetFormat BasicSqlBuilder.OffsetFirst BasicSqlBuilder.TakePercent BasicSqlBuilder.TakeTies BasicSqlBuilder.NeedSkip BasicSqlBuilder.NeedTake BasicSqlBuilder.BuildSkipFirst() BasicSqlBuilder.BuildTakeHints() BasicSqlBuilder.BuildOffsetLimit() BasicSqlBuilder.BuildWhereSearchCondition(SelectQuery.SearchCondition) BasicSqlBuilder.BuildSearchCondition(SelectQuery.SearchCondition) BasicSqlBuilder.BuildSearchCondition(Int32, SelectQuery.SearchCondition) BasicSqlBuilder.BuildPredicate(ISqlPredicate) BasicSqlBuilder.BuildPredicate(Int32, ISqlPredicate) BasicSqlBuilder.BuildPredicate(Int32, Int32, ISqlPredicate) BasicSqlBuilder.BuildLikePredicate(SelectQuery.Predicate.Like) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, String, Boolean, Boolean) BasicSqlBuilder.BuildExpression(ISqlExpression) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) BasicSqlBuilder.BuildExpression(Int32, ISqlExpression) BasicSqlBuilder.BuildValue(SqlDataType, Object) BasicSqlBuilder.BuildBinaryExpression(SqlBinaryExpression) BasicSqlBuilder.GetPrecedence(ISqlPredicate) BasicSqlBuilder.AlternativeBuildSql(Boolean, Action) BasicSqlBuilder.AlternativeBuildSql2(Action) BasicSqlBuilder.AlternativeGetSelectedColumns(BasicSqlBuilder.ColumnSelector) BasicSqlBuilder.IsDateDataType(ISqlExpression, String) BasicSqlBuilder.IsTimeDataType(ISqlExpression) BasicSqlBuilder.ConvertFunctionParameters(SqlFunction) BasicSqlBuilder.GetSequenceNameAttribute(SqlTable, Boolean) BasicSqlBuilder.GetTempAliases(Int32, String) BasicSqlBuilder.GetTableAlias(ISqlTableSource) BasicSqlBuilder.GetTableDatabaseName(SqlTable) BasicSqlBuilder.GetTableOwnerName(SqlTable) BasicSqlBuilder.GetTablePhysicalName(SqlTable) BasicSqlBuilder.AppendIndent() BasicSqlBuilder.Add<T>(ISqlExpression, ISqlExpression) BasicSqlBuilder.IsReserved(String) BasicSqlBuilder.PrintParameterName(StringBuilder, IDbDataParameter) BasicSqlBuilder.GetTypeName(IDbDataParameter) BasicSqlBuilder.GetUdtTypeName(IDbDataParameter) BasicSqlBuilder.PrintParameterType(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameterValue(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameters(StringBuilder, IDbDataParameter[]) BasicSqlBuilder.ApplyQueryHints(String, List<String>) BasicSqlBuilder.Name Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdSqlBuilder : BasicSqlBuilder, ISqlBuilder Constructors | Improve this Doc View Source FirebirdSqlBuilder(ISqlOptimizer, SqlProviderFlags, ValueToSqlConverter) Declaration public FirebirdSqlBuilder(ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags, ValueToSqlConverter valueToSqlConverter) Parameters Type Name Description ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags ValueToSqlConverter valueToSqlConverter Fields | Improve this Doc View Source IdentifierQuoteMode Specifies how identifiers like table and field names should be quoted. Declaration public static FirebirdIdentifierQuoteMode IdentifierQuoteMode Field Value Type Description FirebirdIdentifierQuoteMode Remarks By default identifiers will not be quoted. Properties | Improve this Doc View Source FirstFormat Declaration protected override string FirstFormat { get; } Property Value Type Description System.String Overrides BasicSqlBuilder.FirstFormat | Improve this Doc View Source SkipFirst Declaration protected override bool SkipFirst { get; } Property Value Type Description System.Boolean Overrides BasicSqlBuilder.SkipFirst | Improve this Doc View Source SkipFormat Declaration protected override string SkipFormat { get; } Property Value Type Description System.String Overrides BasicSqlBuilder.SkipFormat Methods | Improve this Doc View Source BuildColumnExpression(ISqlExpression, String, ref Boolean) Declaration protected override void BuildColumnExpression(ISqlExpression expr, string alias, ref bool addAlias) Parameters Type Name Description ISqlExpression expr System.String alias System.Boolean addAlias Overrides BasicSqlBuilder.BuildColumnExpression(ISqlExpression, String, ref Boolean) | Improve this Doc View Source BuildCommand(Int32) Declaration protected override void BuildCommand(int commandNumber) Parameters Type Name Description System.Int32 commandNumber Overrides BasicSqlBuilder.BuildCommand(Int32) | Improve this Doc View Source BuildCreateTableNullAttribute(SqlField, DefaulNullable) Declaration protected override void BuildCreateTableNullAttribute(SqlField field, DefaulNullable defaulNullable) Parameters Type Name Description SqlField field DefaulNullable defaulNullable Overrides BasicSqlBuilder.BuildCreateTableNullAttribute(SqlField, DefaulNullable) | Improve this Doc View Source BuildDataType(SqlDataType, Boolean) Declaration protected override void BuildDataType(SqlDataType type, bool createDbType) Parameters Type Name Description SqlDataType type System.Boolean createDbType Overrides BasicSqlBuilder.BuildDataType(SqlDataType, Boolean) | Improve this Doc View Source BuildDropTableStatement() Declaration protected override void BuildDropTableStatement() Overrides BasicSqlBuilder.BuildDropTableStatement() | Improve this Doc View Source BuildFromClause() Declaration protected override void BuildFromClause() Overrides BasicSqlBuilder.BuildFromClause() | Improve this Doc View Source BuildFunction(SqlFunction) Declaration protected override void BuildFunction(SqlFunction func) Parameters Type Name Description SqlFunction func Overrides BasicSqlBuilder.BuildFunction(SqlFunction) | Improve this Doc View Source BuildGetIdentity() Declaration protected override void BuildGetIdentity() Overrides BasicSqlBuilder.BuildGetIdentity() | Improve this Doc View Source BuildInsertOrUpdateQuery() Declaration protected override void BuildInsertOrUpdateQuery() Overrides BasicSqlBuilder.BuildInsertOrUpdateQuery() | Improve this Doc View Source BuildSelectClause() Declaration protected override void BuildSelectClause() Overrides BasicSqlBuilder.BuildSelectClause() | Improve this Doc View Source CommandCount(SelectQuery) Declaration public override int CommandCount(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Int32 Overrides BasicSqlBuilder.CommandCount(SelectQuery) | Improve this Doc View Source Convert(Object, ConvertType) Declaration public override object Convert(object value, ConvertType convertType) Parameters Type Name Description System.Object value ConvertType convertType Returns Type Description System.Object Overrides BasicSqlBuilder.Convert(Object, ConvertType) | Improve this Doc View Source CreateSqlBuilder() Declaration protected override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides BasicSqlBuilder.CreateSqlBuilder() | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration public override ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression Overrides BasicSqlBuilder.GetIdentityExpression(SqlTable) | Improve this Doc View Source GetProviderTypeName(IDbDataParameter) Declaration protected override string GetProviderTypeName(IDbDataParameter parameter) Parameters Type Name Description System.Data.IDbDataParameter parameter Returns Type Description System.String Overrides BasicSqlBuilder.GetProviderTypeName(IDbDataParameter)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdTools.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdTools.html",
    "title": "Class FirebirdTools | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdTools Inheritance System.Object FirebirdTools Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public static class FirebirdTools Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Int32 maxBatchSize System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveFirebird(Assembly) Declaration public static void ResolveFirebird(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly | Improve this Doc View Source ResolveFirebird(String) Declaration public static void ResolveFirebird(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.NativeMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.NativeMappingSchema.html",
    "title": "Class OracleMappingSchema.NativeMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class OracleMappingSchema.NativeMappingSchema Inheritance System.Object MappingSchema OracleMappingSchema.NativeMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class NativeMappingSchema : MappingSchema Constructors | Improve this Doc View Source NativeMappingSchema() Declaration public NativeMappingSchema()"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.html",
    "title": "Class OracleMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class OracleMappingSchema Inheritance System.Object MappingSchema OracleMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleMappingSchema : MappingSchema Constructors | Improve this Doc View Source OracleMappingSchema() Declaration public OracleMappingSchema() | Improve this Doc View Source OracleMappingSchema(String) Declaration protected OracleMappingSchema(string configuration) Parameters Type Name Description System.String configuration Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description System.Type from System.Type to Returns Type Description System.Linq.Expressions.LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.html",
    "title": "Class SapHanaMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaMappingSchema Inheritance System.Object MappingSchema SapHanaMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class SapHanaMappingSchema : MappingSchema Constructors | Improve this Doc View Source SapHanaMappingSchema() Declaration public SapHanaMappingSchema() | Improve this Doc View Source SapHanaMappingSchema(String) Declaration protected SapHanaMappingSchema(string configuration) Parameters Type Name Description System.String configuration"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.html",
    "title": "Class SapHanaOdbcDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaOdbcDataProvider Inheritance System.Object DataProviderBase SapHanaOdbcDataProvider Inherited Members DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class SapHanaOdbcDataProvider : DataProviderBase, IDataProvider Constructors | Improve this Doc View Source SapHanaOdbcDataProvider() Declaration public SapHanaOdbcDataProvider() | Improve this Doc View Source SapHanaOdbcDataProvider(String, MappingSchema) Declaration protected SapHanaOdbcDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source DataReaderType Declaration public override Type DataReaderType { get; } Property Value Type Description System.Type Overrides DataProviderBase.DataReaderType Methods | Improve this Doc View Source ConvertParameterType(Type, DataType) Declaration public override Type ConvertParameterType(Type type, DataType dataType) Parameters Type Name Description System.Type type DataType dataType Returns Type Description System.Type Overrides DataProviderBase.ConvertParameterType(Type, DataType) | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected override IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.IDbConnection Overrides DataProviderBase.CreateConnectionInternal(String) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[]) Declaration public override void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection System.Data.CommandType commandType System.String commandText LinqToDB.Data.DataParameter[] parameters Overrides DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration public override bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description System.Boolean Overrides DataProviderBase.IsCompatibleConnection(IDbConnection) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2005MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2005MappingSchema.html",
    "title": "Class SqlServer2005MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2005MappingSchema Inheritance System.Object MappingSchema SqlServer2005MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2005MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2005MappingSchema() Declaration public SqlServer2005MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description System.Type from System.Type to Returns Type Description System.Linq.Expressions.LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2008MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2008MappingSchema.html",
    "title": "Class SqlServer2008MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2008MappingSchema Inheritance System.Object MappingSchema SqlServer2008MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2008MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2008MappingSchema() Declaration public SqlServer2008MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description System.Type from System.Type to Returns Type Description System.Linq.Expressions.LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type)"
  },
  "api/LinqToDB.ExpressionMethodAttribute.html": {
    "href": "api/LinqToDB.ExpressionMethodAttribute.html",
    "title": "Class ExpressionMethodAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ExpressionMethodAttribute Inheritance System.Object System.Attribute ExpressionMethodAttribute Namespace : LinqToDB Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true, Inherited = true)] public class ExpressionMethodAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ExpressionMethodAttribute(String) Declaration public ExpressionMethodAttribute(string methodName) Parameters Type Name Description System.String methodName | Improve this Doc View Source ExpressionMethodAttribute(String, String) Declaration public ExpressionMethodAttribute(string configuration, string methodName) Parameters Type Name Description System.String configuration System.String methodName Properties | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source MethodName Declaration public string MethodName { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Expressions.BinaryAggregateExpression.html": {
    "href": "api/LinqToDB.Expressions.BinaryAggregateExpression.html",
    "title": "Class BinaryAggregateExpression | Linq To DB (aka linq2db)",
    "keywords": "Class BinaryAggregateExpression Inheritance System.Object System.Linq.Expressions.Expression BinaryAggregateExpression Inherited Members System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeCatchBlock(System.Type, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Constant(System.Object) System.Linq.Expressions.Expression.Constant(System.Object, System.Type) System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo, System.Int32, System.Int32, System.Int32, System.Int32) System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo) System.Linq.Expressions.Expression.Empty() System.Linq.Expressions.Expression.Default(System.Type) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor) System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) System.Linq.Expressions.Expression.ReduceAndCheck() System.Linq.Expressions.Expression.ReduceExtensions() System.Linq.Expressions.Expression.ToString() System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Label() System.Linq.Expressions.Expression.Label(System.String) System.Linq.Expressions.Expression.Label(System.Type) System.Linq.Expressions.Expression.Label(System.Type, System.String) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.GetFuncType(System.Type[]) System.Linq.Expressions.Expression.TryGetFuncType(System.Type[], System.Type) System.Linq.Expressions.Expression.GetActionType(System.Type[]) System.Linq.Expressions.Expression.TryGetActionType(System.Type[], System.Type) System.Linq.Expressions.Expression.GetDelegateType(System.Type[]) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit[]) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>) System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Reflection.FieldInfo) System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.String) System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Type, System.String) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Type, System.String) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression, System.String) System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression, System.Reflection.MemberInfo) System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding[]) System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>) System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit[]) System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>) System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit[]) System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding[]) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding[]) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type[], System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type[], System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Reflection.MemberInfo[]) System.Linq.Expressions.Expression.New(System.Type) System.Linq.Expressions.Expression.Parameter(System.Type) System.Linq.Expressions.Expression.Variable(System.Type) System.Linq.Expressions.Expression.Parameter(System.Type, System.String) System.Linq.Expressions.Expression.Variable(System.Type, System.String) System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>) System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>) System.Linq.Expressions.Expression.SymbolDocument(System.String) System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid) System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid) System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid, System.Guid) System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[]) System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[]) System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>) System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Rethrow() System.Linq.Expressions.Expression.Rethrow(System.Type) System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public class BinaryAggregateExpression : Expression Constructors | Improve this Doc View Source BinaryAggregateExpression(ExpressionType, Type, Expression[]) Declaration public BinaryAggregateExpression(ExpressionType aggregateType, Type type, Expression[] expressions) Parameters Type Name Description System.Linq.Expressions.ExpressionType aggregateType System.Type type System.Linq.Expressions.Expression[] expressions Properties | Improve this Doc View Source AggregateType Declaration public ExpressionType AggregateType { get; } Property Value Type Description System.Linq.Expressions.ExpressionType | Improve this Doc View Source CanReduce Declaration public override bool CanReduce { get; } Property Value Type Description System.Boolean Overrides System.Linq.Expressions.Expression.CanReduce | Improve this Doc View Source Expressions Declaration public Expression[] Expressions { get; } Property Value Type Description System.Linq.Expressions.Expression[] | Improve this Doc View Source NodeType Declaration public override ExpressionType NodeType { get; } Property Value Type Description System.Linq.Expressions.ExpressionType Overrides System.Linq.Expressions.Expression.NodeType | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description System.Type Overrides System.Linq.Expressions.Expression.Type Methods | Improve this Doc View Source Reduce() Declaration public override Expression Reduce() Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.Expression.Reduce() | Improve this Doc View Source Update(Expression[]) Declaration public BinaryAggregateExpression Update(Expression[] expressions) Parameters Type Name Description System.Linq.Expressions.Expression[] expressions Returns Type Description BinaryAggregateExpression Extension Methods Extensions.GetDebugView(Expression) Extensions.GetCount(Expression, Func<Expression, Boolean>) Extensions.Visit(Expression, Action<Expression>) Extensions.Visit(Expression, Func<Expression, Boolean>) Extensions.Find(Expression, Expression) Extensions.Find(Expression, Func<Expression, Boolean>) Extensions.Transform(Expression, Func<Expression, Expression>) Extensions.Transform(Expression, Func<Expression, TransformInfo>)"
  },
  "api/LinqToDB.Linq.Builder.RequestFor.html": {
    "href": "api/LinqToDB.Linq.Builder.RequestFor.html",
    "title": "Enum RequestFor | Linq To DB (aka linq2db)",
    "keywords": "Enum RequestFor Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public enum RequestFor Fields Name Description Association Checks the sequence if the expression is an association. Expression Checks the sequence if the expression contains an SQL expression. Field Checks the sequence if the expression is a field. GroupJoin Checks the sequence if the expression is a group join. Object Checks the sequence if the expression is a table, an association, new {}, or new MyClass {}. Root Checks the context if it's a root of the expression. SubQuery Checks the context if it's a subquery. Table Checks the sequence if the expression is a table or an association. Extension Methods Sql.Between<RequestFor>(RequestFor, RequestFor) Sql.NotBetween<RequestFor>(RequestFor, RequestFor)"
  },
  "api/LinqToDB.Linq.Builder.SequenceConvertInfo.html": {
    "href": "api/LinqToDB.Linq.Builder.SequenceConvertInfo.html",
    "title": "Class SequenceConvertInfo | Linq To DB (aka linq2db)",
    "keywords": "Class SequenceConvertInfo Inheritance System.Object SequenceConvertInfo Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class SequenceConvertInfo Fields | Improve this Doc View Source Expression Declaration public Expression Expression Field Value Type Description System.Linq.Expressions.Expression | Improve this Doc View Source ExpressionsToReplace Declaration public List<SequenceConvertPath> ExpressionsToReplace Field Value Type Description System.Collections.Generic.List<LinqToDB.Linq.Builder.SequenceConvertPath> | Improve this Doc View Source Parameter Declaration public ParameterExpression Parameter Field Value Type Description System.Linq.Expressions.ParameterExpression"
  },
  "api/LinqToDB.Mapping.PrimaryKeyAttribute.html": {
    "href": "api/LinqToDB.Mapping.PrimaryKeyAttribute.html",
    "title": "Class PrimaryKeyAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class PrimaryKeyAttribute Inheritance System.Object System.Attribute PrimaryKeyAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)] public sealed class PrimaryKeyAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source PrimaryKeyAttribute() Declaration public PrimaryKeyAttribute() | Improve this Doc View Source PrimaryKeyAttribute(Int32) Declaration public PrimaryKeyAttribute(int order) Parameters Type Name Description System.Int32 order | Improve this Doc View Source PrimaryKeyAttribute(String, Int32) Declaration public PrimaryKeyAttribute(string configuration, int order) Parameters Type Name Description System.String configuration System.Int32 order Properties | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source Order Declaration public int Order { get; set; } Property Value Type Description System.Int32"
  },
  "api/LinqToDB.Mapping.PropertyMappingBuilder-1.html": {
    "href": "api/LinqToDB.Mapping.PropertyMappingBuilder-1.html",
    "title": "Class PropertyMappingBuilder<T> | Linq To DB (aka linq2db)",
    "keywords": "Class PropertyMappingBuilder<T> Inheritance System.Object PropertyMappingBuilder<T> Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class PropertyMappingBuilder<T> Type Parameters Name Description T Constructors | Improve this Doc View Source PropertyMappingBuilder(EntityMappingBuilder<T>, Expression<Func<T, Object>>) Declaration public PropertyMappingBuilder(EntityMappingBuilder<T> entity, Expression<Func<T, object>> memberGetter) Parameters Type Name Description LinqToDB.Mapping.EntityMappingBuilder<T> entity System.Linq.Expressions.Expression<System.Func<T, System.Object>> memberGetter Methods | Improve this Doc View Source Association<S, ID1, ID2>(Expression<Func<T, S>>, Expression<Func<T, ID1>>, Expression<Func<S, ID2>>) Declaration public PropertyMappingBuilder<T> Association<S, ID1, ID2>(Expression<Func<T, S>> prop, Expression<Func<T, ID1>> thisKey, Expression<Func<S, ID2>> otherKey) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, S>> prop System.Linq.Expressions.Expression<System.Func<T, ID1>> thisKey System.Linq.Expressions.Expression<System.Func<S, ID2>> otherKey Returns Type Description PropertyMappingBuilder<T> Type Parameters Name Description S ID1 ID2 | Improve this Doc View Source Entity<TE>(String) Declaration public EntityMappingBuilder<TE> Entity<TE>(string configuration = null) Parameters Type Name Description System.String configuration Returns Type Description LinqToDB.Mapping.EntityMappingBuilder<TE> Type Parameters Name Description TE | Improve this Doc View Source HasAttribute(Attribute) Declaration public PropertyMappingBuilder<T> HasAttribute(Attribute attribute) Parameters Type Name Description System.Attribute attribute Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source HasColumnName(String) Declaration public PropertyMappingBuilder<T> HasColumnName(string columnName) Parameters Type Name Description System.String columnName Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source HasCreateFormat(String) Declaration public PropertyMappingBuilder<T> HasCreateFormat(string format) Parameters Type Name Description System.String format Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source HasDataType(DataType) Declaration public PropertyMappingBuilder<T> HasDataType(DataType dataType) Parameters Type Name Description DataType dataType Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source HasDbType(String) Declaration public PropertyMappingBuilder<T> HasDbType(string dbType) Parameters Type Name Description System.String dbType Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source HasLength(Int32) Declaration public PropertyMappingBuilder<T> HasLength(int length) Parameters Type Name Description System.Int32 length Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source HasPrecision(Int32) Declaration public PropertyMappingBuilder<T> HasPrecision(int precision) Parameters Type Name Description System.Int32 precision Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source HasScale(Int32) Declaration public PropertyMappingBuilder<T> HasScale(int scale) Parameters Type Name Description System.Int32 scale Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source HasSkipOnInsert(Boolean) Declaration public PropertyMappingBuilder<T> HasSkipOnInsert(bool skipOnInsert = true) Parameters Type Name Description System.Boolean skipOnInsert Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source HasSkipOnUpdate(Boolean) Declaration public PropertyMappingBuilder<T> HasSkipOnUpdate(bool skipOnUpdate = true) Parameters Type Name Description System.Boolean skipOnUpdate Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source HasStorage(String) Declaration public PropertyMappingBuilder<T> HasStorage(string storage) Parameters Type Name Description System.String storage Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source IsColumn() Declaration public PropertyMappingBuilder<T> IsColumn() Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source IsDiscriminator(Boolean) Declaration public PropertyMappingBuilder<T> IsDiscriminator(bool isDiscriminator = true) Parameters Type Name Description System.Boolean isDiscriminator Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source IsIdentity() Declaration public PropertyMappingBuilder<T> IsIdentity() Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source IsNotColumn() Declaration public PropertyMappingBuilder<T> IsNotColumn() Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source IsNullable(Boolean) Declaration public PropertyMappingBuilder<T> IsNullable(bool isNullable = true) Parameters Type Name Description System.Boolean isNullable Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source IsPrimaryKey(Int32) Declaration public PropertyMappingBuilder<T> IsPrimaryKey(int order = -1) Parameters Type Name Description System.Int32 order Returns Type Description PropertyMappingBuilder<T> | Improve this Doc View Source Property(Expression<Func<T, Object>>) Declaration public PropertyMappingBuilder<T> Property(Expression<Func<T, object>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func Returns Type Description PropertyMappingBuilder<T>"
  },
  "api/LinqToDB.Mapping.Relationship.html": {
    "href": "api/LinqToDB.Mapping.Relationship.html",
    "title": "Enum Relationship | Linq To DB (aka linq2db)",
    "keywords": "Enum Relationship Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public enum Relationship Fields Name Description ManyToOne OneToMany OneToOne Extension Methods Sql.Between<Relationship>(Relationship, Relationship) Sql.NotBetween<Relationship>(Relationship, Relationship)"
  },
  "api/LinqToDB.Mapping.ScalarTypeAttribute.html": {
    "href": "api/LinqToDB.Mapping.ScalarTypeAttribute.html",
    "title": "Class ScalarTypeAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ScalarTypeAttribute Inheritance System.Object System.Attribute ScalarTypeAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true, Inherited = true)] public class ScalarTypeAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ScalarTypeAttribute() Declaration public ScalarTypeAttribute() | Improve this Doc View Source ScalarTypeAttribute(Boolean) Declaration public ScalarTypeAttribute(bool isScalar) Parameters Type Name Description System.Boolean isScalar | Improve this Doc View Source ScalarTypeAttribute(String) Declaration public ScalarTypeAttribute(string configuration) Parameters Type Name Description System.String configuration | Improve this Doc View Source ScalarTypeAttribute(String, Boolean) Declaration public ScalarTypeAttribute(string configuration, bool isScalar) Parameters Type Name Description System.String configuration System.Boolean isScalar Properties | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsScalar Declaration public bool IsScalar { get; set; } Property Value Type Description System.Boolean"
  },
  "api/LinqToDB.SqlQuery.ISqlTableSource.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlTableSource.html",
    "title": "Interface ISqlTableSource | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlTableSource Inherited Members ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) ISqlExpression.CanBeNull ISqlExpression.Precedence ISqlExpression.SystemType IQueryElement.ElementType IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(LinqToDB.SqlQuery.ISqlExpression) ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlTableSource : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source All Declaration SqlField All { get; } Property Value Type Description SqlField | Improve this Doc View Source SourceID Declaration int SourceID { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SqlTableType Declaration SqlTableType SqlTableType { get; } Property Value Type Description SqlTableType Methods | Improve this Doc View Source GetKeys(Boolean) Declaration IList<ISqlExpression> GetKeys(bool allIfEmpty) Parameters Type Name Description System.Boolean allIfEmpty Returns Type Description System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression> Extension Methods Extensions.InnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.Join(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.Join(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[])"
  },
  "api/LinqToDB.SqlQuery.IValueContainer.html": {
    "href": "api/LinqToDB.SqlQuery.IValueContainer.html",
    "title": "Interface IValueContainer | Linq To DB (aka linq2db)",
    "keywords": "Interface IValueContainer Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface IValueContainer Properties | Improve this Doc View Source Value Declaration object Value { get; } Property Value Type Description System.Object"
  },
  "api/LinqToDB.SqlQuery.ObjectSqlExpression.html": {
    "href": "api/LinqToDB.SqlQuery.ObjectSqlExpression.html",
    "title": "Class ObjectSqlExpression | Linq To DB (aka linq2db)",
    "keywords": "Class ObjectSqlExpression Inheritance System.Object SqlExpression ObjectSqlExpression Inherited Members SqlExpression.SystemType SqlExpression.Expr SqlExpression.Precedence SqlExpression.Parameters SqlExpression.SqlFlags SqlExpression.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SqlExpression.IEquatable<ISqlExpression>.Equals(ISqlExpression) SqlExpression.CanBeNull SqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) SqlExpression.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlExpression.ElementType SqlExpression.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) SqlExpression.NeedsEqual(IQueryElement) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class ObjectSqlExpression : SqlExpression, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source ObjectSqlExpression(MappingSchema, SqlInfo[]) Declaration public ObjectSqlExpression(MappingSchema mappingSchema, params SqlInfo[] parameters) Parameters Type Name Description MappingSchema mappingSchema LinqToDB.Linq.Builder.SqlInfo[] parameters Methods | Improve this Doc View Source GetValue(Object, Int32) Declaration public object GetValue(object obj, int index) Parameters Type Name Description System.Object obj System.Int32 index Returns Type Description System.Object"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.OrderByItem.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.OrderByItem.html",
    "title": "Class SelectQuery.OrderByItem | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.OrderByItem Inheritance System.Object SelectQuery.OrderByItem Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class OrderByItem : IQueryElement, ICloneableElement Constructors | Improve this Doc View Source OrderByItem(ISqlExpression, Boolean) Declaration public OrderByItem(ISqlExpression expression, bool isDescending) Parameters Type Name Description ISqlExpression expression System.Boolean isDescending Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source IsDescending Declaration public bool IsDescending { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Predicate.Between.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Predicate.Between.html",
    "title": "Class SelectQuery.Predicate.Between | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Predicate.Between Inheritance System.Object SelectQuery.Predicate SelectQuery.Predicate.Expr SelectQuery.Predicate.NotExpr SelectQuery.Predicate.Between Inherited Members SelectQuery.Predicate.NotExpr.IsNot SelectQuery.Predicate.Expr.Expr1 SelectQuery.Predicate.Expr.CanBeNull SelectQuery.Predicate.Precedence SelectQuery.Predicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SelectQuery.Predicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SelectQuery.Predicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Between : SelectQuery.Predicate.NotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source Between(ISqlExpression, Boolean, ISqlExpression, ISqlExpression) Declaration public Between(ISqlExpression exp1, bool isNot, ISqlExpression exp2, ISqlExpression exp3) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot ISqlExpression exp2 ISqlExpression exp3 Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SelectQuery.Predicate.NotExpr.ElementType | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Expr3 Declaration public ISqlExpression Expr3 { get; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Overrides SelectQuery.Predicate.NotExpr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Overrides SelectQuery.Predicate.NotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Overrides SelectQuery.Predicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Predicate.Expr.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Predicate.Expr.html",
    "title": "Class SelectQuery.Predicate.Expr | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Predicate.Expr Inheritance System.Object SelectQuery.Predicate SelectQuery.Predicate.Expr SelectQuery.Predicate.ExprExpr SelectQuery.Predicate.NotExpr Inherited Members SelectQuery.Predicate.Precedence SelectQuery.Predicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SelectQuery.Predicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SelectQuery.Predicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Expr : SelectQuery.Predicate, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source Expr(ISqlExpression) Declaration public Expr(ISqlExpression exp1) Parameters Type Name Description ISqlExpression exp1 | Improve this Doc View Source Expr(ISqlExpression, Int32) Declaration public Expr(ISqlExpression exp1, int precedence) Parameters Type Name Description ISqlExpression exp1 System.Int32 precedence Properties | Improve this Doc View Source CanBeNull Declaration public override bool CanBeNull { get; } Property Value Type Description System.Boolean Overrides SelectQuery.Predicate.CanBeNull | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SelectQuery.Predicate.ElementType | Improve this Doc View Source Expr1 Declaration public ISqlExpression Expr1 { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Overrides SelectQuery.Predicate.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Overrides SelectQuery.Predicate.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Overrides SelectQuery.Predicate.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Predicate.ExprExpr.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Predicate.ExprExpr.html",
    "title": "Class SelectQuery.Predicate.ExprExpr | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Predicate.ExprExpr Inheritance System.Object SelectQuery.Predicate SelectQuery.Predicate.Expr SelectQuery.Predicate.ExprExpr Inherited Members SelectQuery.Predicate.Expr.Expr1 SelectQuery.Predicate.Precedence SelectQuery.Predicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SelectQuery.Predicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SelectQuery.Predicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class ExprExpr : SelectQuery.Predicate.Expr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source ExprExpr(ISqlExpression, SelectQuery.Predicate.Operator, ISqlExpression) Declaration public ExprExpr(ISqlExpression exp1, SelectQuery.Predicate.Operator op, ISqlExpression exp2) Parameters Type Name Description ISqlExpression exp1 SelectQuery.Predicate.Operator op ISqlExpression exp2 Properties | Improve this Doc View Source CanBeNull Declaration public override bool CanBeNull { get; } Property Value Type Description System.Boolean Overrides SelectQuery.Predicate.Expr.CanBeNull | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SelectQuery.Predicate.Expr.ElementType | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Operator Declaration public SelectQuery.Predicate.Operator Operator { get; } Property Value Type Description SelectQuery.Predicate.Operator Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Overrides SelectQuery.Predicate.Expr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Overrides SelectQuery.Predicate.Expr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Overrides SelectQuery.Predicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SqlFunction.html": {
    "href": "api/LinqToDB.SqlQuery.SqlFunction.html",
    "title": "Class SqlFunction | Linq To DB (aka linq2db)",
    "keywords": "Class SqlFunction Inheritance System.Object SqlFunction Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlFunction : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlFunction(Type, String, ISqlExpression[]) Declaration public SqlFunction(Type systemType, string name, params ISqlExpression[] parameters) Parameters Type Name Description System.Type systemType System.String name LinqToDB.SqlQuery.ISqlExpression[] parameters | Improve this Doc View Source SqlFunction(Type, String, Int32, ISqlExpression[]) Declaration public SqlFunction(Type systemType, string name, int precedence, params ISqlExpression[] parameters) Parameters Type Name Description System.Type systemType System.String name System.Int32 precedence LinqToDB.SqlQuery.ISqlExpression[] parameters Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean Implements ISqlExpression.CanBeNull | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Parameters Declaration public ISqlExpression[] Parameters { get; } Property Value Type Description LinqToDB.SqlQuery.ISqlExpression[] | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlExpression.Precedence | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description System.Type Implements ISqlExpression.SystemType Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source CreateAll(SelectQuery) Declaration public static SqlFunction CreateAll(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source CreateAny(SelectQuery) Declaration public static SqlFunction CreateAny(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source CreateCount(Type, ISqlTableSource) Declaration public static SqlFunction CreateCount(Type type, ISqlTableSource table) Parameters Type Name Description System.Type type ISqlTableSource table Returns Type Description SqlFunction | Improve this Doc View Source CreateExists(SelectQuery) Declaration public static SqlFunction CreateExists(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source CreateSome(SelectQuery) Declaration public static SqlFunction CreateSome(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> action) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> action Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T)"
  },
  "api/LinqToDB.SqlQuery.SqlParameter.html": {
    "href": "api/LinqToDB.SqlQuery.SqlParameter.html",
    "title": "Class SqlParameter | Linq To DB (aka linq2db)",
    "keywords": "Class SqlParameter Inheritance System.Object SqlParameter Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlParameter : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement, IValueContainer Constructors | Improve this Doc View Source SqlParameter(Type, String, Object) Declaration public SqlParameter(Type systemType, string name, object value) Parameters Type Name Description System.Type systemType System.String name System.Object value | Improve this Doc View Source SqlParameter(Type, String, Object, Func<Object, Object>) Declaration public SqlParameter(Type systemType, string name, object value, Func<object, object> valueConverter) Parameters Type Name Description System.Type systemType System.String name System.Object value System.Func<System.Object, System.Object> valueConverter Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean Implements ISqlExpression.CanBeNull | Improve this Doc View Source DataType Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source DbSize Declaration public int DbSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source IsQueryParameter Declaration public bool IsQueryParameter { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LikeEnd Declaration public string LikeEnd { get; set; } Property Value Type Description System.String | Improve this Doc View Source LikeStart Declaration public string LikeStart { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlExpression.Precedence | Improve this Doc View Source ReplaceLike Declaration public bool ReplaceLike { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SystemType Declaration public Type SystemType { get; set; } Property Value Type Description System.Type Implements ISqlExpression.SystemType | Improve this Doc View Source Value Declaration public object Value { get; set; } Property Value Type Description System.Object Implements IValueContainer.Value | Improve this Doc View Source ValueConverter Declaration public Func<object, object> ValueConverter { get; set; } Property Value Type Description System.Func<System.Object, System.Object> Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T)"
  },
  "api/LinqToDB.SqlQuery.SqlTable-1.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTable-1.html",
    "title": "Class SqlTable<T> | Linq To DB (aka linq2db)",
    "keywords": "Class SqlTable<T> Inheritance System.Object SqlTable SqlTable<T> Inherited Members SqlTable.Item[String] SqlTable.Name SqlTable.Alias SqlTable.Database SqlTable.Owner SqlTable.ObjectType SqlTable.PhysicalName SqlTable.SqlTableType SqlTable.TableArguments SqlTable.Fields SqlTable.SequenceAttributes SqlTable.All SqlTable.GetIdentityField() SqlTable.Add(SqlField) SqlTable.AddRange(IEnumerable<SqlField>) SqlTable.SourceID SqlTable.GetKeys(Boolean) SqlTable.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SqlTable.ElementType SqlTable.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) SqlTable.ISqlExpression.CanBeNull SqlTable.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) SqlTable.ISqlExpression.Precedence SqlTable.ISqlExpression.SystemType SqlTable.IEquatable<ISqlExpression>.Equals(ISqlExpression) SqlTable.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlTable<T> : SqlTable, ISqlTableSource, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Type Parameters Name Description T Constructors | Improve this Doc View Source SqlTable() Declaration public SqlTable() | Improve this Doc View Source SqlTable(MappingSchema) Declaration public SqlTable(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Extension Methods Extensions.InnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.Join(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.Join(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[])"
  },
  "api/LinqToDB.SqlQuery.SqlTable.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTable.html",
    "title": "Class SqlTable | Linq To DB (aka linq2db)",
    "keywords": "Class SqlTable Inheritance System.Object SqlTable SqlTable<T> Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlTable : ISqlTableSource, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlTable() Declaration public SqlTable() | Improve this Doc View Source SqlTable(MappingSchema, Type) Declaration public SqlTable(MappingSchema mappingSchema, Type objectType) Parameters Type Name Description MappingSchema mappingSchema System.Type objectType | Improve this Doc View Source SqlTable(SqlTable) Declaration public SqlTable(SqlTable table) Parameters Type Name Description SqlTable table | Improve this Doc View Source SqlTable(SqlTable, IEnumerable<SqlField>, ISqlExpression[]) Declaration public SqlTable(SqlTable table, IEnumerable<SqlField> fields, ISqlExpression[] tableArguments) Parameters Type Name Description SqlTable table System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlField> fields LinqToDB.SqlQuery.ISqlExpression[] tableArguments | Improve this Doc View Source SqlTable(Type) Declaration public SqlTable(Type objectType) Parameters Type Name Description System.Type objectType Properties | Improve this Doc View Source Alias Declaration public string Alias { get; set; } Property Value Type Description System.String | Improve this Doc View Source All Declaration public SqlField All { get; } Property Value Type Description SqlField Implements ISqlTableSource.All | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description System.String | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Fields Declaration public Dictionary<string, SqlField> Fields { get; } Property Value Type Description System.Collections.Generic.Dictionary<System.String, LinqToDB.SqlQuery.SqlField> | Improve this Doc View Source Item[String] Declaration public SqlField this[string fieldName] { get; } Parameters Type Name Description System.String fieldName Property Value Type Description SqlField | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source ObjectType Declaration public Type ObjectType { get; set; } Property Value Type Description System.Type | Improve this Doc View Source Owner Declaration public string Owner { get; set; } Property Value Type Description System.String | Improve this Doc View Source PhysicalName Declaration public string PhysicalName { get; set; } Property Value Type Description System.String | Improve this Doc View Source SequenceAttributes Declaration public SequenceNameAttribute[] SequenceAttributes { get; } Property Value Type Description LinqToDB.Mapping.SequenceNameAttribute[] | Improve this Doc View Source SourceID Declaration public int SourceID { get; } Property Value Type Description System.Int32 Implements ISqlTableSource.SourceID | Improve this Doc View Source SqlTableType Declaration public SqlTableType SqlTableType { get; set; } Property Value Type Description SqlTableType Implements ISqlTableSource.SqlTableType | Improve this Doc View Source TableArguments Declaration public ISqlExpression[] TableArguments { get; set; } Property Value Type Description LinqToDB.SqlQuery.ISqlExpression[] Methods | Improve this Doc View Source Add(SqlField) Declaration public void Add(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source AddRange(IEnumerable<SqlField>) Declaration public void AddRange(IEnumerable<SqlField> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlField> collection | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) | Improve this Doc View Source GetIdentityField() Declaration public SqlField GetIdentityField() Returns Type Description SqlField | Improve this Doc View Source GetKeys(Boolean) Declaration public IList<ISqlExpression> GetKeys(bool allIfEmpty) Parameters Type Name Description System.Boolean allIfEmpty Returns Type Description System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression> Implements ISqlTableSource.GetKeys(Boolean) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpression.CanBeNull Declaration bool ISqlExpression.CanBeNull { get; } Returns Type Description System.Boolean Implements ISqlExpression.CanBeNull | Improve this Doc View Source ISqlExpression.Precedence Declaration int ISqlExpression.Precedence { get; } Returns Type Description System.Int32 Implements ISqlExpression.Precedence | Improve this Doc View Source ISqlExpression.SystemType Declaration Type ISqlExpression.SystemType { get; } Returns Type Description System.Type Implements ISqlExpression.SystemType | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) Extension Methods Extensions.InnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.Join(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.Join(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[])"
  },
  "api/LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow-1.html",
    "title": "Interface AnalyticFunctions.IAnalyticFunctionWithoutWindow<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IAnalyticFunctionWithoutWindow<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IAnalyticFunctionWithoutWindow<out TR> Type Parameters Name Description TR Methods | Improve this Doc View Source Over() Declaration [Sql.Extension(\"{function} OVER({query_partition_clause?}{_}{order_by_clause?})\", TokenName = \"over\", ChainPrecedence = 10, SqlFlags = SqlFlags.Aggregate)] AnalyticFunctions.IOverMayHavePartitionAndOrder<TR> Over() Returns Type Description LinqToDB.AnalyticFunctions.IOverMayHavePartitionAndOrder<TR>"
  },
  "api/LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing-1.html",
    "title": "Interface AnalyticFunctions.IOrderedReadyToWindowing<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IOrderedReadyToWindowing<TR> Inherited Members AnalyticFunctions.IReadyToFunction<TR>.ToValue() Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IOrderedReadyToWindowing<out TR> : AnalyticFunctions.IReadyToFunction<TR> Type Parameters Name Description TR Properties | Improve this Doc View Source Range Declaration [Sql.Extension(\"RANGE {boundary_clause}\", TokenName = \"windowing_clause\")] AnalyticFunctions.IBoundaryExpected<TR> Range { get; } Property Value Type Description LinqToDB.AnalyticFunctions.IBoundaryExpected<TR> | Improve this Doc View Source Rows Declaration [Sql.Extension(\"ROWS {boundary_clause}\", TokenName = \"windowing_clause\")] AnalyticFunctions.IBoundaryExpected<TR> Rows { get; } Property Value Type Description LinqToDB.AnalyticFunctions.IBoundaryExpected<TR> Methods | Improve this Doc View Source ThenBy<TKey>(TKey) Declaration [Sql.Extension(\"{expr}\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedReadyToWindowing<TR> ThenBy<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description AnalyticFunctions.IOrderedReadyToWindowing<TR> Type Parameters Name Description TKey | Improve this Doc View Source ThenBy<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"{expr}\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedReadyToWindowing<TR> ThenBy<TKey>([ExprParameter] TKey expr, Sql.NullsPosition nulls) Parameters Type Name Description TKey expr Sql.NullsPosition nulls Returns Type Description AnalyticFunctions.IOrderedReadyToWindowing<TR> Type Parameters Name Description TKey | Improve this Doc View Source ThenByDesc<TKey>(TKey) Declaration [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedReadyToWindowing<TR> ThenByDesc<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description AnalyticFunctions.IOrderedReadyToWindowing<TR> Type Parameters Name Description TKey | Improve this Doc View Source ThenByDesc<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedReadyToWindowing<TR> ThenByDesc<TKey>([ExprParameter] TKey expr, Sql.NullsPosition nulls) Parameters Type Name Description TKey expr Sql.NullsPosition nulls Returns Type Description AnalyticFunctions.IOrderedReadyToWindowing<TR> Type Parameters Name Description TKey"
  },
  "api/LinqToDB.AnalyticFunctions.IReadyToFunction-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IReadyToFunction-1.html",
    "title": "Interface AnalyticFunctions.IReadyToFunction<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IReadyToFunction<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IReadyToFunction<out TR> Type Parameters Name Description TR Methods | Improve this Doc View Source ToValue() Declaration [Sql.Extension(\"\")] TR ToValue() Returns Type Description TR"
  },
  "api/LinqToDB.Common.Configuration.LinqService.html": {
    "href": "api/LinqToDB.Common.Configuration.LinqService.html",
    "title": "Class Configuration.LinqService | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.LinqService Inheritance System.Object Configuration.LinqService Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class LinqService Fields | Improve this Doc View Source SerializeAssemblyQualifiedName Declaration public static bool SerializeAssemblyQualifiedName Field Value Type Description System.Boolean | Improve this Doc View Source ThrowUnresolvedTypeException Declaration public static bool ThrowUnresolvedTypeException Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.Common.DefaultValue.html": {
    "href": "api/LinqToDB.Common.DefaultValue.html",
    "title": "Class DefaultValue | Linq To DB (aka linq2db)",
    "keywords": "Class DefaultValue Inheritance System.Object DefaultValue Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class DefaultValue Methods | Improve this Doc View Source GetValue(Type, MappingSchema) Declaration public static object GetValue(Type type, MappingSchema mappingSchema = null) Parameters Type Name Description System.Type type MappingSchema mappingSchema Returns Type Description System.Object | Improve this Doc View Source GetValue<T>() Declaration public static T GetValue<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source SetValue<T>(T) Declaration public static void SetValue<T>(T value) Parameters Type Name Description T value Type Parameters Name Description T"
  },
  "api/LinqToDB.Configuration.ElementCollectionBase-1.html": {
    "href": "api/LinqToDB.Configuration.ElementCollectionBase-1.html",
    "title": "Class ElementCollectionBase<T> | Linq To DB (aka linq2db)",
    "keywords": "Class ElementCollectionBase<T> Inheritance System.Object System.Configuration.ConfigurationElement System.Configuration.ConfigurationElementCollection ElementCollectionBase<T> DataProviderElementCollection Inherited Members System.Configuration.ConfigurationElementCollection.IsModified() System.Configuration.ConfigurationElementCollection.ResetModified() System.Configuration.ConfigurationElementCollection.IsReadOnly() System.Configuration.ConfigurationElementCollection.SetReadOnly() System.Configuration.ConfigurationElementCollection.Equals(System.Object) System.Configuration.ConfigurationElementCollection.GetHashCode() System.Configuration.ConfigurationElementCollection.Unmerge(System.Configuration.ConfigurationElement, System.Configuration.ConfigurationElement, System.Configuration.ConfigurationSaveMode) System.Configuration.ConfigurationElementCollection.Reset(System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElementCollection.CopyTo(System.Configuration.ConfigurationElement[], System.Int32) System.Configuration.ConfigurationElementCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Configuration.ConfigurationElementCollection.GetEnumerator() System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement, System.Boolean) System.Configuration.ConfigurationElementCollection.BaseIndexOf(System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElementCollection.BaseAdd(System.Int32, System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElementCollection.BaseRemove(System.Object) System.Configuration.ConfigurationElementCollection.BaseGet(System.Object) System.Configuration.ConfigurationElementCollection.BaseIsRemoved(System.Object) System.Configuration.ConfigurationElementCollection.BaseGet(System.Int32) System.Configuration.ConfigurationElementCollection.BaseGetAllKeys() System.Configuration.ConfigurationElementCollection.BaseGetKey(System.Int32) System.Configuration.ConfigurationElementCollection.BaseClear() System.Configuration.ConfigurationElementCollection.BaseRemoveAt(System.Int32) System.Configuration.ConfigurationElementCollection.SerializeElement(System.Xml.XmlWriter, System.Boolean) System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String, System.Xml.XmlReader) System.Configuration.ConfigurationElementCollection.CreateNewElement(System.String) System.Configuration.ConfigurationElementCollection.IsElementRemovable(System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElementCollection.IsElementName(System.String) System.Configuration.ConfigurationElementCollection.AddElementName System.Configuration.ConfigurationElementCollection.RemoveElementName System.Configuration.ConfigurationElementCollection.ClearElementName System.Configuration.ConfigurationElementCollection.Count System.Configuration.ConfigurationElementCollection.EmitClear System.Configuration.ConfigurationElementCollection.IsSynchronized System.Configuration.ConfigurationElementCollection.SyncRoot System.Configuration.ConfigurationElementCollection.ElementName System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate System.Configuration.ConfigurationElementCollection.CollectionType System.Configuration.ConfigurationElement.Init() System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList) System.Configuration.ConfigurationElement.InitializeDefault() System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty, System.Object, System.Boolean) System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter, System.String) System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader, System.Boolean) System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String) System.Configuration.ConfigurationElement.PostDeserialize() System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter) System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String, System.String) System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String) System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String) System.Configuration.ConfigurationElement.LockAttributes System.Configuration.ConfigurationElement.LockAllAttributesExcept System.Configuration.ConfigurationElement.LockElements System.Configuration.ConfigurationElement.LockAllElementsExcept System.Configuration.ConfigurationElement.LockItem System.Configuration.ConfigurationElement.Item[System.Configuration.ConfigurationProperty] System.Configuration.ConfigurationElement.Properties System.Configuration.ConfigurationElement.ElementInformation System.Configuration.ConfigurationElement.EvaluationContext System.Configuration.ConfigurationElement.ElementProperty System.Configuration.ConfigurationElement.HasContext System.Configuration.ConfigurationElement.CurrentConfiguration Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public abstract class ElementCollectionBase<T> : ConfigurationElementCollection, ICollection, IEnumerable where T : ConfigurationElement, new () Type Parameters Name Description T Properties | Improve this Doc View Source Item[Int32] Declaration public T this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description T | Improve this Doc View Source Item[String] Declaration public T this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description T Methods | Improve this Doc View Source CreateNewElement() Declaration protected override ConfigurationElement CreateNewElement() Returns Type Description System.Configuration.ConfigurationElement Overrides System.Configuration.ConfigurationElementCollection.CreateNewElement() | Improve this Doc View Source GetElementKey(T) Declaration protected abstract object GetElementKey(T element) Parameters Type Name Description T element Returns Type Description System.Object | Improve this Doc View Source GetElementKey(ConfigurationElement) Declaration protected override sealed object GetElementKey(ConfigurationElement element) Parameters Type Name Description System.Configuration.ConfigurationElement element Returns Type Description System.Object Overrides System.Configuration.ConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement) Extension Methods Tools.IsNullOrEmpty(ICollection) ReflectionExtensions.GetListItemType(IEnumerable)"
  },
  "api/LinqToDB.Data.BulkCopyRowsCopied.html": {
    "href": "api/LinqToDB.Data.BulkCopyRowsCopied.html",
    "title": "Class BulkCopyRowsCopied | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyRowsCopied Inheritance System.Object BulkCopyRowsCopied Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class BulkCopyRowsCopied Properties | Improve this Doc View Source Abort Gets or sets a value that indicates whether the bulk copy operation should be aborted. Declaration public bool Abort { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RowsCopied Gets a value that returns the number of rows copied during the current bulk copy operation. Declaration public long RowsCopied { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source StartTime Declaration public DateTime StartTime { get; } Property Value Type Description System.DateTime"
  },
  "api/LinqToDB.Data.DataReaderAsync.html": {
    "href": "api/LinqToDB.Data.DataReaderAsync.html",
    "title": "Class DataReaderAsync | Linq To DB (aka linq2db)",
    "keywords": "Class DataReaderAsync Inheritance System.Object DataReaderAsync Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataReaderAsync : IDisposable Properties | Improve this Doc View Source CommandInfo Declaration public CommandInfo CommandInfo { get; set; } Property Value Type Description CommandInfo | Improve this Doc View Source Reader Declaration public DbDataReader Reader { get; set; } Property Value Type Description System.Data.Common.DbDataReader Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements System.IDisposable.Dispose() | Improve this Doc View Source ExecuteForEachAsync<T>() Declaration public Task<T> ExecuteForEachAsync<T>() Returns Type Description System.Threading.Tasks.Task<T> Type Parameters Name Description T | Improve this Doc View Source ExecuteForEachAsync<T>(CancellationToken) Declaration public Task<T> ExecuteForEachAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<T> Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(T, Action<T>) Declaration public Task QueryForEachAsync<T>(T template, Action<T> action) Parameters Type Name Description T template System.Action<T> action Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(T, Action<T>, CancellationToken) Declaration public Task QueryForEachAsync<T>(T template, Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description T template System.Action<T> action System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Action<T>) Declaration public Task QueryForEachAsync<T>(Action<T> action) Parameters Type Name Description System.Action<T> action Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Action<T>, CancellationToken) Declaration public Task QueryForEachAsync<T>(Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description System.Action<T> action System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Func<IDataReader, T>, Action<T>) Declaration public Task QueryForEachAsync<T>(Func<IDataReader, T> objectReader, Action<T> action) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader System.Action<T> action Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Func<IDataReader, T>, Action<T>, CancellationToken) Declaration public Task QueryForEachAsync<T>(Func<IDataReader, T> objectReader, Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader System.Action<T> action System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>() Declaration public Task<T[]> QueryToArrayAsync<T>() Returns Type Description System.Threading.Tasks.Task<T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(T) Declaration public Task<T[]> QueryToArrayAsync<T>(T template) Parameters Type Name Description T template Returns Type Description System.Threading.Tasks.Task<T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(T, CancellationToken) Declaration public Task<T[]> QueryToArrayAsync<T>(T template, CancellationToken cancellationToken) Parameters Type Name Description T template System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(Func<IDataReader, T>) Declaration public Task<T[]> QueryToArrayAsync<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader Returns Type Description System.Threading.Tasks.Task<T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(Func<IDataReader, T>, CancellationToken) Declaration public Task<T[]> QueryToArrayAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(CancellationToken) Declaration public Task<T[]> QueryToArrayAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>() Declaration public Task<List<T>> QueryToListAsync<T>() Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(T) Declaration public Task<List<T>> QueryToListAsync<T>(T template) Parameters Type Name Description T template Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(T, CancellationToken) Declaration public Task<List<T>> QueryToListAsync<T>(T template, CancellationToken cancellationToken) Parameters Type Name Description T template System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(Func<IDataReader, T>) Declaration public Task<List<T>> QueryToListAsync<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(Func<IDataReader, T>, CancellationToken) Declaration public Task<List<T>> QueryToListAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(CancellationToken) Declaration public Task<List<T>> QueryToListAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<T>> Type Parameters Name Description T"
  },
  "api/LinqToDB.DataProvider.Access.AccessDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessDataProvider.html",
    "title": "Class AccessDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class AccessDataProvider Inheritance System.Object DataProviderBase AccessDataProvider Inherited Members DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public class AccessDataProvider : DataProviderBase, IDataProvider Constructors | Improve this Doc View Source AccessDataProvider() Declaration public AccessDataProvider() | Improve this Doc View Source AccessDataProvider(String, MappingSchema) Declaration protected AccessDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source DataReaderType Declaration public override Type DataReaderType { get; } Property Value Type Description System.Type Overrides DataProviderBase.DataReaderType Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected override IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.IDbConnection Overrides DataProviderBase.CreateConnectionInternal(String) | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description System.String databaseName System.Boolean deleteIfExists | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source DropDatabase(String) Declaration public void DropDatabase(string databaseName) Parameters Type Name Description System.String databaseName | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration public override bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description System.Boolean Overrides DataProviderBase.IsCompatibleConnection(IDbConnection) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.Access.AccessMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessMappingSchema.html",
    "title": "Class AccessMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class AccessMappingSchema Inheritance System.Object MappingSchema AccessMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public class AccessMappingSchema : MappingSchema Constructors | Improve this Doc View Source AccessMappingSchema() Declaration public AccessMappingSchema() | Improve this Doc View Source AccessMappingSchema(String) Declaration protected AccessMappingSchema(string configuration) Parameters Type Name Description System.String configuration"
  },
  "api/LinqToDB.DataProvider.DB2.DB2Tools.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2Tools.html",
    "title": "Class DB2Tools | Linq To DB (aka linq2db)",
    "keywords": "Class DB2Tools Inheritance System.Object DB2Tools Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public static class DB2Tools Properties | Improve this Doc View Source AutoDetectProvider Declaration public static bool AutoDetectProvider { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source AfterInitialized(Action) Declaration public static void AfterInitialized(Action action) Parameters Type Name Description System.Action action | Improve this Doc View Source CreateDataConnection(IDbConnection, DB2Version) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, DB2Version version = DB2Version.LUW) Parameters Type Name Description System.Data.IDbConnection connection DB2Version version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, DB2Version) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, DB2Version version = DB2Version.LUW) Parameters Type Name Description System.Data.IDbTransaction transaction DB2Version version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, DB2Version) Declaration public static DataConnection CreateDataConnection(string connectionString, DB2Version version = DB2Version.LUW) Parameters Type Name Description System.String connectionString DB2Version version Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider(DB2Version) Declaration public static IDataProvider GetDataProvider(DB2Version version = DB2Version.LUW) Parameters Type Name Description DB2Version version Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Int32 maxBatchSize System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ProviderSpecificBulkCopy<T>(DataConnection, IEnumerable<T>, Nullable<Int32>, Boolean, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied ProviderSpecificBulkCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int ? bulkCopyTimeout = null, bool keepIdentity = false, int notifyAfter = 0, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Nullable<System.Int32> bulkCopyTimeout System.Boolean keepIdentity System.Int32 notifyAfter System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveDB2(Assembly) Declaration public static void ResolveDB2(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly | Improve this Doc View Source ResolveDB2(String) Declaration public static void ResolveDB2(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.DB2.DB2Types.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2Types.html",
    "title": "Class DB2Types | Linq To DB (aka linq2db)",
    "keywords": "Class DB2Types Inheritance System.Object DB2Types Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2Types Fields | Improve this Doc View Source DB2Binary Declaration public static readonly TypeCreator<byte[]> DB2Binary Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.Byte[]> | Improve this Doc View Source DB2Blob Declaration public static readonly ConnectionTypeTypeCreator<byte[]> DB2Blob Field Value Type Description LinqToDB.DataProvider.DB2.ConnectionTypeTypeCreator<System.Byte[]> | Improve this Doc View Source DB2Clob Declaration public static readonly ConnectionTypeTypeCreator<string> DB2Clob Field Value Type Description LinqToDB.DataProvider.DB2.ConnectionTypeTypeCreator<System.String> | Improve this Doc View Source DB2Date Declaration public static readonly TypeCreator<DateTime> DB2Date Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.DateTime> | Improve this Doc View Source DB2DateTime Declaration public static readonly TypeCreator<DateTime, long> DB2DateTime Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.DateTime, System.Int64> | Improve this Doc View Source DB2Decimal Declaration public static readonly TypeCreator<decimal> DB2Decimal Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.Decimal> | Improve this Doc View Source DB2DecimalFloat Declaration public static readonly TypeCreator<decimal, double, long> DB2DecimalFloat Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.Decimal, System.Double, System.Int64> | Improve this Doc View Source DB2Double Declaration public static readonly TypeCreator<double> DB2Double Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.Double> | Improve this Doc View Source DB2Int16 Declaration public static readonly TypeCreator<short> DB2Int16 Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.Int16> | Improve this Doc View Source DB2Int32 Declaration public static readonly TypeCreator<int> DB2Int32 Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.Int32> | Improve this Doc View Source DB2Int64 Declaration public static readonly TypeCreator<long> DB2Int64 Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.Int64> | Improve this Doc View Source DB2Real Declaration public static readonly TypeCreator<float> DB2Real Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.Single> | Improve this Doc View Source DB2Real370 Declaration public static readonly TypeCreator<double> DB2Real370 Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.Double> | Improve this Doc View Source DB2RowId Declaration public static readonly TypeCreator DB2RowId Field Value Type Description TypeCreator | Improve this Doc View Source DB2String Declaration public static readonly TypeCreator<string> DB2String Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.String> | Improve this Doc View Source DB2Time Declaration public static readonly TypeCreator<TimeSpan> DB2Time Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.TimeSpan> | Improve this Doc View Source DB2TimeStamp Declaration public static readonly TypeCreator<DateTime> DB2TimeStamp Field Value Type Description LinqToDB.DataProvider.DB2.TypeCreator<System.DateTime> | Improve this Doc View Source DB2Xml Declaration public static Type DB2Xml Field Value Type Description System.Type Properties | Improve this Doc View Source ConnectionType Declaration public static Type ConnectionType { get; } Property Value Type Description System.Type"
  },
  "api/LinqToDB.DataProvider.Informix.html": {
    "href": "api/LinqToDB.DataProvider.Informix.html",
    "title": "Namespace LinqToDB.DataProvider.Informix | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Informix Classes InformixDataProvider InformixMappingSchema InformixTools"
  },
  "api/LinqToDB.DataProvider.MultipleRowsHelper-1.html": {
    "href": "api/LinqToDB.DataProvider.MultipleRowsHelper-1.html",
    "title": "Class MultipleRowsHelper<T> | Linq To DB (aka linq2db)",
    "keywords": "Class MultipleRowsHelper<T> Inheritance System.Object MultipleRowsHelper<T> Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class MultipleRowsHelper<T> Type Parameters Name Description T Constructors | Improve this Doc View Source MultipleRowsHelper(DataConnection, BulkCopyOptions, Boolean) Declaration public MultipleRowsHelper(DataConnection dataConnection, BulkCopyOptions options, bool enforceKeepIdentity) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Boolean enforceKeepIdentity Fields | Improve this Doc View Source BatchSize Declaration public int BatchSize Field Value Type Description System.Int32 | Improve this Doc View Source Columns Declaration public readonly ColumnDescriptor[] Columns Field Value Type Description LinqToDB.Mapping.ColumnDescriptor[] | Improve this Doc View Source ColumnTypes Declaration public readonly SqlDataType[] ColumnTypes Field Value Type Description LinqToDB.SqlQuery.SqlDataType[] | Improve this Doc View Source CurrentCount Declaration public int CurrentCount Field Value Type Description System.Int32 | Improve this Doc View Source DataConnection Declaration public readonly DataConnection DataConnection Field Value Type Description DataConnection | Improve this Doc View Source Descriptor Declaration public readonly EntityDescriptor Descriptor Field Value Type Description EntityDescriptor | Improve this Doc View Source HeaderSize Declaration public int HeaderSize Field Value Type Description System.Int32 | Improve this Doc View Source Options Declaration public readonly BulkCopyOptions Options Field Value Type Description BulkCopyOptions | Improve this Doc View Source ParameterIndex Declaration public int ParameterIndex Field Value Type Description System.Int32 | Improve this Doc View Source ParameterName Declaration public readonly string ParameterName Field Value Type Description System.String | Improve this Doc View Source Parameters Declaration public readonly List<DataParameter> Parameters Field Value Type Description System.Collections.Generic.List<LinqToDB.Data.DataParameter> | Improve this Doc View Source RowsCopied Declaration public readonly BulkCopyRowsCopied RowsCopied Field Value Type Description BulkCopyRowsCopied | Improve this Doc View Source SqlBuilder Declaration public readonly ISqlBuilder SqlBuilder Field Value Type Description ISqlBuilder | Improve this Doc View Source StringBuilder Declaration public readonly StringBuilder StringBuilder Field Value Type Description System.Text.StringBuilder | Improve this Doc View Source TableName Declaration public readonly string TableName Field Value Type Description System.String | Improve this Doc View Source ValueConverter Declaration public readonly ValueToSqlConverter ValueConverter Field Value Type Description ValueToSqlConverter Methods | Improve this Doc View Source BuildColumns(Object, Func<ColumnDescriptor, Boolean>) Declaration public virtual void BuildColumns(object item, Func<ColumnDescriptor, bool> skipConvert = null) Parameters Type Name Description System.Object item System.Func<LinqToDB.Mapping.ColumnDescriptor, System.Boolean> skipConvert | Improve this Doc View Source Execute() Declaration public bool Execute() Returns Type Description System.Boolean | Improve this Doc View Source SetHeader() Declaration public void SetHeader()"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.html",
    "title": "Class PostgreSQLSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLSqlBuilder Inheritance System.Object BasicSqlBuilder PostgreSQLSqlBuilder Inherited Members BasicSqlBuilder.SelectQuery BasicSqlBuilder.Indent BasicSqlBuilder.BuildStep BasicSqlBuilder.SqlOptimizer BasicSqlBuilder.SqlProviderFlags BasicSqlBuilder.ValueToSqlConverter BasicSqlBuilder.StringBuilder BasicSqlBuilder.SkipAlias BasicSqlBuilder.IsNestedJoinSupported BasicSqlBuilder.IsNestedJoinParenthesisRequired BasicSqlBuilder.WrapJoinCondition BasicSqlBuilder.BuildSql(Int32, SelectQuery, StringBuilder) BasicSqlBuilder.BuildSql(Int32, SelectQuery, StringBuilder, Int32, Boolean) BasicSqlBuilder.BuildSqlBuilder(SelectQuery, Int32, Boolean) BasicSqlBuilder.WithStringBuilder<T>(StringBuilder, Func<T>) BasicSqlBuilder.ParenthesizeJoin(List<SelectQuery.JoinedTable>) BasicSqlBuilder.BuildSql() BasicSqlBuilder.BuildDeleteQuery() BasicSqlBuilder.BuildUpdateQuery() BasicSqlBuilder.BuildSelectQuery() BasicSqlBuilder.BuildInsertQuery() BasicSqlBuilder.BuildUnknownQuery() BasicSqlBuilder.ConvertTableName(StringBuilder, String, String, String) BasicSqlBuilder.BuildTableName(StringBuilder, String, String, String) BasicSqlBuilder.BuildSelectClause() BasicSqlBuilder.GetSelectedColumns() BasicSqlBuilder.BuildColumns() BasicSqlBuilder.BuildColumnExpression(ISqlExpression, String, Boolean) BasicSqlBuilder.BuildDeleteClause() BasicSqlBuilder.BuildUpdateClause() BasicSqlBuilder.BuildUpdateTable() BasicSqlBuilder.BuildUpdateTableName() BasicSqlBuilder.BuildUpdateSet() BasicSqlBuilder.BuildInsertClause() BasicSqlBuilder.BuildEmptyInsert() BasicSqlBuilder.BuildOutputSubclause() BasicSqlBuilder.BuildInsertClause(String, Boolean) BasicSqlBuilder.BuildGetIdentity() BasicSqlBuilder.BuildInsertOrUpdateQuery() BasicSqlBuilder.BuildInsertOrUpdateQueryAsMerge(String) BasicSqlBuilder.EndLine BasicSqlBuilder.BuildInsertOrUpdateQueryAsUpdateInsert() BasicSqlBuilder.BuildDropTableStatement() BasicSqlBuilder.BuildStartCreateTableStatement(SelectQuery.CreateTableStatement) BasicSqlBuilder.BuildEndCreateTableStatement(SelectQuery.CreateTableStatement) BasicSqlBuilder.BuildCreateTableStatement() BasicSqlBuilder.BuildCreateTableNullAttribute(SqlField, DefaulNullable) BasicSqlBuilder.BuildCreateTableIdentityAttribute1(SqlField) BasicSqlBuilder.BuildCreateTableIdentityAttribute2(SqlField) BasicSqlBuilder.BuildCreateTablePrimaryKey(String, IEnumerable<String>) BasicSqlBuilder.BuildPhysicalTable(ISqlTableSource, String) BasicSqlBuilder.BuildTableName(SelectQuery.TableSource, Boolean, Boolean) BasicSqlBuilder.BuildWhere() BasicSqlBuilder.BuildWhereClause() BasicSqlBuilder.BuildGroupByClause() BasicSqlBuilder.BuildHavingClause() BasicSqlBuilder.BuildOrderByClause() BasicSqlBuilder.SkipFirst BasicSqlBuilder.SkipFormat BasicSqlBuilder.FirstFormat BasicSqlBuilder.OffsetFirst BasicSqlBuilder.TakePercent BasicSqlBuilder.TakeTies BasicSqlBuilder.NeedSkip BasicSqlBuilder.NeedTake BasicSqlBuilder.BuildSkipFirst() BasicSqlBuilder.BuildTakeHints() BasicSqlBuilder.BuildOffsetLimit() BasicSqlBuilder.BuildWhereSearchCondition(SelectQuery.SearchCondition) BasicSqlBuilder.BuildSearchCondition(SelectQuery.SearchCondition) BasicSqlBuilder.BuildSearchCondition(Int32, SelectQuery.SearchCondition) BasicSqlBuilder.BuildPredicate(ISqlPredicate) BasicSqlBuilder.BuildPredicate(Int32, ISqlPredicate) BasicSqlBuilder.BuildPredicate(Int32, Int32, ISqlPredicate) BasicSqlBuilder.BuildLikePredicate(SelectQuery.Predicate.Like) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, String, Boolean, Boolean) BasicSqlBuilder.BuildExpression(ISqlExpression) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) BasicSqlBuilder.BuildExpression(Int32, ISqlExpression) BasicSqlBuilder.BuildValue(SqlDataType, Object) BasicSqlBuilder.BuildBinaryExpression(SqlBinaryExpression) BasicSqlBuilder.BuildFunction(SqlFunction) BasicSqlBuilder.GetPrecedence(ISqlPredicate) BasicSqlBuilder.AlternativeBuildSql(Boolean, Action) BasicSqlBuilder.AlternativeBuildSql2(Action) BasicSqlBuilder.AlternativeGetSelectedColumns(BasicSqlBuilder.ColumnSelector) BasicSqlBuilder.IsDateDataType(ISqlExpression, String) BasicSqlBuilder.IsTimeDataType(ISqlExpression) BasicSqlBuilder.ConvertFunctionParameters(SqlFunction) BasicSqlBuilder.GetSequenceNameAttribute(SqlTable, Boolean) BasicSqlBuilder.GetTempAliases(Int32, String) BasicSqlBuilder.GetTableAlias(ISqlTableSource) BasicSqlBuilder.GetTableDatabaseName(SqlTable) BasicSqlBuilder.GetTableOwnerName(SqlTable) BasicSqlBuilder.GetTablePhysicalName(SqlTable) BasicSqlBuilder.AppendIndent() BasicSqlBuilder.Add<T>(ISqlExpression, ISqlExpression) BasicSqlBuilder.PrintParameterName(StringBuilder, IDbDataParameter) BasicSqlBuilder.GetTypeName(IDbDataParameter) BasicSqlBuilder.GetUdtTypeName(IDbDataParameter) BasicSqlBuilder.PrintParameterType(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameterValue(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameters(StringBuilder, IDbDataParameter[]) BasicSqlBuilder.ApplyQueryHints(String, List<String>) BasicSqlBuilder.Name Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQLSqlBuilder : BasicSqlBuilder, ISqlBuilder Constructors | Improve this Doc View Source PostgreSQLSqlBuilder(ISqlOptimizer, SqlProviderFlags, ValueToSqlConverter) Declaration public PostgreSQLSqlBuilder(ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags, ValueToSqlConverter valueToSqlConverter) Parameters Type Name Description ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags ValueToSqlConverter valueToSqlConverter Fields | Improve this Doc View Source IdentifierQuoteMode Declaration public static PostgreSQLIdentifierQuoteMode IdentifierQuoteMode Field Value Type Description PostgreSQLIdentifierQuoteMode Properties | Improve this Doc View Source LimitFormat Declaration protected override string LimitFormat { get; } Property Value Type Description System.String Overrides BasicSqlBuilder.LimitFormat | Improve this Doc View Source OffsetFormat Declaration protected override string OffsetFormat { get; } Property Value Type Description System.String Overrides BasicSqlBuilder.OffsetFormat Methods | Improve this Doc View Source BuildCommand(Int32) Declaration protected override void BuildCommand(int commandNumber) Parameters Type Name Description System.Int32 commandNumber Overrides BasicSqlBuilder.BuildCommand(Int32) | Improve this Doc View Source BuildCreateTableFieldType(SqlField) Declaration protected override void BuildCreateTableFieldType(SqlField field) Parameters Type Name Description SqlField field Overrides BasicSqlBuilder.BuildCreateTableFieldType(SqlField) | Improve this Doc View Source BuildDataType(SqlDataType, Boolean) Declaration protected override void BuildDataType(SqlDataType type, bool createDbType) Parameters Type Name Description SqlDataType type System.Boolean createDbType Overrides BasicSqlBuilder.BuildDataType(SqlDataType, Boolean) | Improve this Doc View Source BuildFromClause() Declaration protected override void BuildFromClause() Overrides BasicSqlBuilder.BuildFromClause() | Improve this Doc View Source BuildJoinType(SelectQuery.JoinedTable) Declaration protected override bool BuildJoinType(SelectQuery.JoinedTable join) Parameters Type Name Description SelectQuery.JoinedTable join Returns Type Description System.Boolean Overrides BasicSqlBuilder.BuildJoinType(SelectQuery.JoinedTable) | Improve this Doc View Source CommandCount(SelectQuery) Declaration public override int CommandCount(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Int32 Overrides BasicSqlBuilder.CommandCount(SelectQuery) | Improve this Doc View Source Convert(Object, ConvertType) Declaration public override object Convert(object value, ConvertType convertType) Parameters Type Name Description System.Object value ConvertType convertType Returns Type Description System.Object Overrides BasicSqlBuilder.Convert(Object, ConvertType) | Improve this Doc View Source CreateSqlBuilder() Declaration protected override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides BasicSqlBuilder.CreateSqlBuilder() | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration public override ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression Overrides BasicSqlBuilder.GetIdentityExpression(SqlTable) | Improve this Doc View Source GetProviderTypeName(IDbDataParameter) Declaration protected override string GetProviderTypeName(IDbDataParameter parameter) Parameters Type Name Description System.Data.IDbDataParameter parameter Returns Type Description System.String Overrides BasicSqlBuilder.GetProviderTypeName(IDbDataParameter) | Improve this Doc View Source IsReserved(String) Declaration protected override sealed bool IsReserved(string word) Parameters Type Name Description System.String word Returns Type Description System.Boolean Overrides BasicSqlBuilder.IsReserved(String)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.html",
    "title": "Class PostgreSQLTools | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLTools Inheritance System.Object PostgreSQLTools Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public static class PostgreSQLTools Properties | Improve this Doc View Source AutoDetectProvider Declaration public static bool AutoDetectProvider { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection, PostgreSQLVersion) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description System.Data.IDbConnection connection PostgreSQLVersion version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, PostgreSQLVersion) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description System.Data.IDbTransaction transaction PostgreSQLVersion version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, PostgreSQLVersion) Declaration public static DataConnection CreateDataConnection(string connectionString, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description System.String connectionString PostgreSQLVersion version Returns Type Description DataConnection | Improve this Doc View Source GetBitStringType() Declaration public static Type GetBitStringType() Returns Type Description System.Type | Improve this Doc View Source GetDataProvider(PostgreSQLVersion) Declaration public static IDataProvider GetDataProvider(PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description PostgreSQLVersion version Returns Type Description IDataProvider | Improve this Doc View Source GetNpgsqlBoxType() Declaration public static Type GetNpgsqlBoxType() Returns Type Description System.Type | Improve this Doc View Source GetNpgsqlCircleType() Declaration public static Type GetNpgsqlCircleType() Returns Type Description System.Type | Improve this Doc View Source GetNpgsqlInetType() Declaration public static Type GetNpgsqlInetType() Returns Type Description System.Type | Improve this Doc View Source GetNpgsqlIntervalType() Declaration public static Type GetNpgsqlIntervalType() Returns Type Description System.Type | Improve this Doc View Source GetNpgsqlLSegType() Declaration public static Type GetNpgsqlLSegType() Returns Type Description System.Type | Improve this Doc View Source GetNpgsqlMacAddressType() Declaration public static Type GetNpgsqlMacAddressType() Returns Type Description System.Type | Improve this Doc View Source GetNpgsqlPathType() Declaration public static Type GetNpgsqlPathType() Returns Type Description System.Type | Improve this Doc View Source GetNpgsqlPointType() Declaration public static Type GetNpgsqlPointType() Returns Type Description System.Type | Improve this Doc View Source GetNpgsqlPolygonType() Declaration public static Type GetNpgsqlPolygonType() Returns Type Description System.Type | Improve this Doc View Source GetNpgsqlTimeType() Declaration public static Type GetNpgsqlTimeType() Returns Type Description System.Type | Improve this Doc View Source GetNpgsqlTimeTZType() Declaration public static Type GetNpgsqlTimeTZType() Returns Type Description System.Type | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Int32 maxBatchSize System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolvePostgreSQL(Assembly) Declaration public static void ResolvePostgreSQL(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly | Improve this Doc View Source ResolvePostgreSQL(String) Declaration public static void ResolvePostgreSQL(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.SqlCe.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.html",
    "title": "Namespace LinqToDB.DataProvider.SqlCe | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SqlCe Classes SqlCeDataProvider SqlCeMappingSchema SqlCeTools"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteDataProvider.html",
    "title": "Class SQLiteDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase SQLiteDataProvider Inherited Members DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class SQLiteDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source SQLiteDataProvider() Declaration public SQLiteDataProvider() | Improve this Doc View Source SQLiteDataProvider(String, MappingSchema) Declaration protected SQLiteDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description System.String databaseName System.Boolean deleteIfExists | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source DropDatabase(String) Declaration public void DropDatabase(string databaseName) Parameters Type Name Description System.String databaseName | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public override bool ? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description System.Data.IDataReader reader System.Int32 idx Returns Type Description System.Nullable<System.Boolean> Overrides DataProviderBase.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source NormalizeTypeName(String) Declaration protected override string NormalizeTypeName(string typeName) Parameters Type Name Description System.String typeName Returns Type Description System.String Overrides DataProviderBase.NormalizeTypeName(String) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description System.Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.html",
    "title": "Class SqlServerTools | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerTools Inheritance System.Object SqlServerTools Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public static class SqlServerTools Fields | Improve this Doc View Source DataReaderGetDecimal Declaration public static Func<IDataReader, int, decimal> DataReaderGetDecimal Field Value Type Description System.Func<System.Data.IDataReader, System.Int32, System.Decimal> | Improve this Doc View Source DataReaderGetMoney Declaration public static Func<IDataReader, int, decimal> DataReaderGetMoney Field Value Type Description System.Func<System.Data.IDataReader, System.Int32, System.Decimal> Properties | Improve this Doc View Source AutoDetectProvider Declaration public static bool AutoDetectProvider { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source AddUdtType(Type, String) Declaration public static void AddUdtType(Type type, string udtName) Parameters Type Name Description System.Type type System.String udtName | Improve this Doc View Source AddUdtType<T>(String, T, DataType) Declaration public static void AddUdtType<T>(string udtName, T nullValue, DataType dataType = DataType.Undefined) Parameters Type Name Description System.String udtName T nullValue DataType dataType Type Parameters Name Description T | Improve this Doc View Source CreateDataConnection(IDbConnection, SqlServerVersion) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, SqlServerVersion version = SqlServerVersion.v2008) Parameters Type Name Description System.Data.IDbConnection connection SqlServerVersion version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, SqlServerVersion) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, SqlServerVersion version = SqlServerVersion.v2008) Parameters Type Name Description System.Data.IDbTransaction transaction SqlServerVersion version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, SqlServerVersion) Declaration public static DataConnection CreateDataConnection(string connectionString, SqlServerVersion version = SqlServerVersion.v2008) Parameters Type Name Description System.String connectionString SqlServerVersion version Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider(SqlServerVersion) Declaration public static IDataProvider GetDataProvider(SqlServerVersion version = SqlServerVersion.v2008) Parameters Type Name Description SqlServerVersion version Returns Type Description IDataProvider | Improve this Doc View Source ProviderSpecificBulkCopy<T>(DataConnection, IEnumerable<T>, Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied ProviderSpecificBulkCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int ? maxBatchSize = null, int ? bulkCopyTimeout = null, bool keepIdentity = false, bool checkConstraints = false, int notifyAfter = 0, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Nullable<System.Int32> maxBatchSize System.Nullable<System.Int32> bulkCopyTimeout System.Boolean keepIdentity System.Boolean checkConstraints System.Int32 notifyAfter System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSqlTypes(Assembly) Declaration public static void ResolveSqlTypes(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly | Improve this Doc View Source ResolveSqlTypes(String) Declaration public static void ResolveSqlTypes(string path) Parameters Type Name Description System.String path | Improve this Doc View Source SetIdentityInsert<T>(DataConnection, ITable<T>, Boolean) Declaration public static void SetIdentityInsert<T>(this DataConnection dataConnection, ITable<T> table, bool isOn) Parameters Type Name Description DataConnection dataConnection LinqToDB.ITable<T> table System.Boolean isOn Type Parameters Name Description T | Improve this Doc View Source SetSqlTypes(Type, Type, Type) Declaration public static void SetSqlTypes(Type sqlHierarchyIdType, Type sqlGeographyType, Type sqlGeometryType) Parameters Type Name Description System.Type sqlHierarchyIdType System.Type sqlGeographyType System.Type sqlGeometryType"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerTransientExceptionDetector.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerTransientExceptionDetector.html",
    "title": "Class SqlServerTransientExceptionDetector | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerTransientExceptionDetector Detects the exceptions caused by SQL Server transient failures. Inheritance System.Object SqlServerTransientExceptionDetector Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerTransientExceptionDetector Methods | Improve this Doc View Source ShouldRetryOn(Exception) Declaration public static bool ShouldRetryOn(Exception ex) Parameters Type Name Description System.Exception ex Returns Type Description System.Boolean"
  },
  "api/LinqToDB.Expressions.IGenericInfoProvider.html": {
    "href": "api/LinqToDB.Expressions.IGenericInfoProvider.html",
    "title": "Interface IGenericInfoProvider | Linq To DB (aka linq2db)",
    "keywords": "Interface IGenericInfoProvider Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public interface IGenericInfoProvider Methods | Improve this Doc View Source SetInfo(MappingSchema) Declaration void SetInfo(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema"
  },
  "api/LinqToDB.Expressions.MemberHelper.html": {
    "href": "api/LinqToDB.Expressions.MemberHelper.html",
    "title": "Class MemberHelper | Linq To DB (aka linq2db)",
    "keywords": "Class MemberHelper Inheritance System.Object MemberHelper Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public static class MemberHelper Methods | Improve this Doc View Source ConstructorOf(Expression<Func<Object>>) Declaration public static ConstructorInfo ConstructorOf(Expression<Func<object>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<System.Object>> func Returns Type Description System.Reflection.ConstructorInfo | Improve this Doc View Source ConstructorOf<T>(Expression<Func<T, Object>>) Declaration public static ConstructorInfo ConstructorOf<T>(Expression<Func<T, object>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func Returns Type Description System.Reflection.ConstructorInfo Type Parameters Name Description T | Improve this Doc View Source FieldOf<T>(Expression<Func<T, Object>>) Declaration public static FieldInfo FieldOf<T>(Expression<Func<T, object>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func Returns Type Description System.Reflection.FieldInfo Type Parameters Name Description T | Improve this Doc View Source GetMemberInfo(LambdaExpression) Declaration public static MemberInfo GetMemberInfo(LambdaExpression func) Parameters Type Name Description System.Linq.Expressions.LambdaExpression func Returns Type Description System.Reflection.MemberInfo | Improve this Doc View Source MemberOf<T>(Expression<Func<T, Object>>) Declaration public static MemberInfo MemberOf<T>(Expression<Func<T, object>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func Returns Type Description System.Reflection.MemberInfo Type Parameters Name Description T | Improve this Doc View Source MethodOf(Expression<Func<Object>>) Declaration public static MethodInfo MethodOf(Expression<Func<object>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<System.Object>> func Returns Type Description System.Reflection.MethodInfo | Improve this Doc View Source MethodOf<T>(Expression<Func<T, Object>>) Declaration public static MethodInfo MethodOf<T>(Expression<Func<T, object>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func Returns Type Description System.Reflection.MethodInfo Type Parameters Name Description T | Improve this Doc View Source PropertyOf<T>(Expression<Func<T, Object>>) Declaration public static PropertyInfo PropertyOf<T>(Expression<Func<T, object>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func Returns Type Description System.Reflection.PropertyInfo Type Parameters Name Description T"
  },
  "api/LinqToDB.Linq.IExpressionQuery-1.html": {
    "href": "api/LinqToDB.Linq.IExpressionQuery-1.html",
    "title": "Interface IExpressionQuery<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IExpressionQuery<T> Inherited Members System.Collections.Generic.IEnumerable<T>.GetEnumerator() System.Linq.IQueryable.ElementType System.Linq.IQueryable.Provider System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression) System.Linq.IQueryProvider.CreateQuery<TElement>(System.Linq.Expressions.Expression) System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression) System.Linq.IQueryProvider.Execute<TResult>(System.Linq.Expressions.Expression) IExpressionQuery.SqlText IExpressionQuery.DataContext Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IExpressionQuery<out T> : IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable, IQueryProvider, IExpressionQuery Type Parameters Name Description T Properties | Improve this Doc View Source Expression Declaration Expression Expression { get; set; } Property Value Type Description System.Linq.Expressions.Expression Extension Methods AsyncExtensions.ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>) AsyncExtensions.ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) AsyncExtensions.ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, TaskCreationOptions) AsyncExtensions.ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToListAsync<TSource>(IQueryable<TSource>) AsyncExtensions.ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.ToListAsync<TSource>(IQueryable<TSource>, TaskCreationOptions) AsyncExtensions.ToListAsync<TSource>(IQueryable<TSource>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToArrayAsync<TSource>(IQueryable<TSource>) AsyncExtensions.ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.ToArrayAsync<TSource>(IQueryable<TSource>, TaskCreationOptions) AsyncExtensions.ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken, TaskCreationOptions) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.ContainsAsync<TSource>(IQueryable<TSource>, TSource) AsyncExtensions.ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.MinAsync<TSource>(IQueryable<TSource>) AsyncExtensions.MinAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) AsyncExtensions.MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) AsyncExtensions.MaxAsync<TSource>(IQueryable<TSource>) AsyncExtensions.MaxAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) AsyncExtensions.MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) LinqExtensions.Delete<T>(IQueryable<T>) LinqExtensions.Delete<T>(IQueryable<T>, Expression<Func<T, Boolean>>) LinqExtensions.Update<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.Update<T>(IQueryable<T>, Expression<Func<T, T>>) LinqExtensions.Update<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>) LinqExtensions.Update<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>) LinqExtensions.AsUpdatable<T>(IQueryable<T>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Insert<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.Into<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>) LinqExtensions.Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, TakeHints) LinqExtensions.Take<TSource>(IQueryable<TSource>, Int32, TakeHints) LinqExtensions.Skip<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAt<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAtOrDefault<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.Having<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.ThenOrBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) LinqExtensions.ThenOrByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) ReflectionExtensions.GetListItemType(IEnumerable)"
  },
  "api/LinqToDB.Linq.IExpressionQuery.html": {
    "href": "api/LinqToDB.Linq.IExpressionQuery.html",
    "title": "Interface IExpressionQuery | Linq To DB (aka linq2db)",
    "keywords": "Interface IExpressionQuery Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IExpressionQuery Properties | Improve this Doc View Source DataContext Declaration IDataContext DataContext { get; } Property Value Type Description IDataContext | Improve this Doc View Source Expression Declaration Expression Expression { get; } Property Value Type Description System.Linq.Expressions.Expression | Improve this Doc View Source SqlText Declaration string SqlText { get; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Mapping.InheritanceMapping.html": {
    "href": "api/LinqToDB.Mapping.InheritanceMapping.html",
    "title": "Class InheritanceMapping | Linq To DB (aka linq2db)",
    "keywords": "Class InheritanceMapping Inheritance System.Object InheritanceMapping Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class InheritanceMapping Fields | Improve this Doc View Source Code Declaration public object Code Field Value Type Description System.Object | Improve this Doc View Source Discriminator Declaration public ColumnDescriptor Discriminator Field Value Type Description ColumnDescriptor | Improve this Doc View Source IsDefault Declaration public bool IsDefault Field Value Type Description System.Boolean | Improve this Doc View Source Type Declaration public Type Type Field Value Type Description System.Type Properties | Improve this Doc View Source DiscriminatorName Declaration public string DiscriminatorName { get; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Mapping.InheritanceMappingAttribute.html": {
    "href": "api/LinqToDB.Mapping.InheritanceMappingAttribute.html",
    "title": "Class InheritanceMappingAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class InheritanceMappingAttribute Inheritance System.Object System.Attribute InheritanceMappingAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true)] public class InheritanceMappingAttribute : Attribute, _Attribute Properties | Improve this Doc View Source Code Declaration public object Code { get; set; } Property Value Type Description System.Object | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDefault Declaration public bool IsDefault { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Type Declaration public Type Type { get; set; } Property Value Type Description System.Type"
  },
  "api/LinqToDB.Mapping.MappingSchema.html": {
    "href": "api/LinqToDB.Mapping.MappingSchema.html",
    "title": "Class MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class MappingSchema Inheritance System.Object MappingSchema AccessMappingSchema DB2LUWMappingSchema DB2MappingSchema DB2zOSMappingSchema FirebirdMappingSchema InformixMappingSchema MySqlMappingSchema OracleMappingSchema OracleMappingSchema.ManagedMappingSchema OracleMappingSchema.NativeMappingSchema PostgreSQLMappingSchema SapHanaMappingSchema SqlCeMappingSchema SQLiteMappingSchema SqlServer2000MappingSchema SqlServer2005MappingSchema SqlServer2008MappingSchema SqlServer2012MappingSchema SqlServerMappingSchema SybaseMappingSchema Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class MappingSchema Constructors | Improve this Doc View Source MappingSchema() Declaration public MappingSchema() | Improve this Doc View Source MappingSchema(MappingSchema[]) Declaration public MappingSchema(params MappingSchema[] schemas) Parameters Type Name Description LinqToDB.Mapping.MappingSchema[] schemas | Improve this Doc View Source MappingSchema(String) Declaration public MappingSchema(string configuration) Parameters Type Name Description System.String configuration | Improve this Doc View Source MappingSchema(String, MappingSchema[]) Declaration public MappingSchema(string configuration, params MappingSchema[] schemas) Parameters Type Name Description System.String configuration LinqToDB.Mapping.MappingSchema[] schemas Fields | Improve this Doc View Source Default Declaration public static MappingSchema Default Field Value Type Description MappingSchema Properties | Improve this Doc View Source ColumnComparisonOption Declaration public StringComparison ColumnComparisonOption { get; set; } Property Value Type Description System.StringComparison | Improve this Doc View Source ConfigurationID Declaration public string ConfigurationID { get; } Property Value Type Description System.String | Improve this Doc View Source ConfigurationList Declaration public string[] ConfigurationList { get; } Property Value Type Description System.String[] | Improve this Doc View Source MetadataReader Declaration public IMetadataReader MetadataReader { get; set; } Property Value Type Description IMetadataReader | Improve this Doc View Source ValueToSqlConverter Declaration public ValueToSqlConverter ValueToSqlConverter { get; } Property Value Type Description ValueToSqlConverter Methods | Improve this Doc View Source AddMetadataReader(IMetadataReader) Declaration public void AddMetadataReader(IMetadataReader reader) Parameters Type Name Description IMetadataReader reader | Improve this Doc View Source AddScalarType(Type, DataType) Declaration public void AddScalarType(Type type, DataType dataType = DataType.Undefined) Parameters Type Name Description System.Type type DataType dataType | Improve this Doc View Source AddScalarType(Type, Object, DataType) Declaration public void AddScalarType(Type type, object defaultValue, DataType dataType = DataType.Undefined) Parameters Type Name Description System.Type type System.Object defaultValue DataType dataType | Improve this Doc View Source AddScalarType(Type, Object, Boolean, DataType) Declaration public void AddScalarType(Type type, object defaultValue, bool canBeNull, DataType dataType = DataType.Undefined) Parameters Type Name Description System.Type type System.Object defaultValue System.Boolean canBeNull DataType dataType | Improve this Doc View Source ChangeType(Object, Type) Declaration public object ChangeType(object value, Type conversionType) Parameters Type Name Description System.Object value System.Type conversionType Returns Type Description System.Object | Improve this Doc View Source ChangeTypeTo<T>(Object) Declaration public T ChangeTypeTo<T>(object value) Parameters Type Name Description System.Object value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source EnumToValue(Enum) Declaration public object EnumToValue(Enum value) Parameters Type Name Description System.Enum value Returns Type Description System.Object | Improve this Doc View Source GetAttribute<T>(Type, Boolean) Declaration public T GetAttribute<T>(Type type, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Boolean inherit Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetAttribute<T>(Type, Func<T, String>, Boolean) Declaration public T GetAttribute<T>(Type type, Func<T, string> configGetter, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Func<T, System.String> configGetter System.Boolean inherit Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetAttribute<T>(Type, MemberInfo, Boolean) Declaration public T GetAttribute<T>(Type type, MemberInfo memberInfo, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.Boolean inherit Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) Declaration public T GetAttribute<T>(Type type, MemberInfo memberInfo, Func<T, string> configGetter, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.Func<T, System.String> configGetter System.Boolean inherit Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, Func<T, String>, Boolean) Declaration public T[] GetAttributes<T>(Type type, Func<T, string> configGetter, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Func<T, System.String> configGetter System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, Func<T, string> configGetter, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.Func<T, System.String> configGetter System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetCanBeNull(Type) Declaration public bool GetCanBeNull(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source GetConverter<TFrom, TTo>() Declaration public Func<TFrom, TTo> GetConverter<TFrom, TTo>() Returns Type Description System.Func<TFrom, TTo> Type Parameters Name Description TFrom TTo | Improve this Doc View Source GetConvertExpression(Type, Type, Boolean, Boolean) Declaration public LambdaExpression GetConvertExpression(Type from, Type to, bool checkNull = true, bool createDefault = true) Parameters Type Name Description System.Type from System.Type to System.Boolean checkNull System.Boolean createDefault Returns Type Description System.Linq.Expressions.LambdaExpression | Improve this Doc View Source GetConvertExpression<TFrom, TTo>(Boolean, Boolean) Declaration public Expression<Func<TFrom, TTo>> GetConvertExpression<TFrom, TTo>(bool checkNull = true, bool createDefault = true) Parameters Type Name Description System.Boolean checkNull System.Boolean createDefault Returns Type Description System.Linq.Expressions.Expression<System.Func<TFrom, TTo>> Type Parameters Name Description TFrom TTo | Improve this Doc View Source GetDataType(Type) Declaration public SqlDataType GetDataType(Type type) Parameters Type Name Description System.Type type Returns Type Description SqlDataType | Improve this Doc View Source GetDefaultFromEnumType(Type) Declaration public Type GetDefaultFromEnumType(Type enumType) Parameters Type Name Description System.Type enumType Returns Type Description System.Type | Improve this Doc View Source GetDefaultValue(Type) Declaration public object GetDefaultValue(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Object | Improve this Doc View Source GetEntites() Enumerate types for cached EntityDescriptor s Declaration public Type[] GetEntites() Returns Type Description System.Type[] Array<T> See Also GetEntityDescriptor(Type) | Improve this Doc View Source GetEntityDescriptor(Type) Declaration public EntityDescriptor GetEntityDescriptor(Type type) Parameters Type Name Description System.Type type Returns Type Description EntityDescriptor | Improve this Doc View Source GetFluentMappingBuilder() Declaration public FluentMappingBuilder GetFluentMappingBuilder() Returns Type Description FluentMappingBuilder | Improve this Doc View Source GetMapValues(Type) Declaration public virtual MapValue[] GetMapValues(Type type) Parameters Type Name Description System.Type type Returns Type Description LinqToDB.Mapping.MapValue[] | Improve this Doc View Source GetUnderlyingDataType(Type, ref Boolean) Declaration public SqlDataType GetUnderlyingDataType(Type type, ref bool canBeNull) Parameters Type Name Description System.Type type System.Boolean canBeNull Returns Type Description SqlDataType | Improve this Doc View Source InitGenericConvertProvider(Type[]) Declaration public bool InitGenericConvertProvider(params Type[] types) Parameters Type Name Description System.Type[] types Returns Type Description System.Boolean | Improve this Doc View Source InitGenericConvertProvider<T>() Declaration public void InitGenericConvertProvider<T>() Type Parameters Name Description T | Improve this Doc View Source IsScalarType(Type) Declaration public bool IsScalarType(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source SetCanBeNull(Type, Boolean) Declaration public void SetCanBeNull(Type type, bool value) Parameters Type Name Description System.Type type System.Boolean value | Improve this Doc View Source SetConverter<TFrom, TTo>(Func<TFrom, TTo>) Declaration public void SetConverter<TFrom, TTo>(Func<TFrom, TTo> func) Parameters Type Name Description System.Func<TFrom, TTo> func Type Parameters Name Description TFrom TTo | Improve this Doc View Source SetConvertExpression(Type, Type, LambdaExpression, Boolean) Declaration public void SetConvertExpression(Type fromType, Type toType, LambdaExpression expr, bool addNullCheck = true) Parameters Type Name Description System.Type fromType System.Type toType System.Linq.Expressions.LambdaExpression expr System.Boolean addNullCheck | Improve this Doc View Source SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) Declaration public void SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>> expr, bool addNullCheck = true) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TFrom, TTo>> expr System.Boolean addNullCheck Type Parameters Name Description TFrom TTo | Improve this Doc View Source SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) Declaration public void SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>> checkNullExpr, Expression<Func<TFrom, TTo>> expr) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TFrom, TTo>> checkNullExpr System.Linq.Expressions.Expression<System.Func<TFrom, TTo>> expr Type Parameters Name Description TFrom TTo | Improve this Doc View Source SetCultureInfo(CultureInfo) Declaration public void SetCultureInfo(CultureInfo info) Parameters Type Name Description System.Globalization.CultureInfo info | Improve this Doc View Source SetDataType(Type, DataType) Declaration public void SetDataType(Type type, DataType dataType) Parameters Type Name Description System.Type type DataType dataType | Improve this Doc View Source SetDataType(Type, SqlDataType) Declaration public void SetDataType(Type type, SqlDataType dataType) Parameters Type Name Description System.Type type SqlDataType dataType | Improve this Doc View Source SetDefaultFromEnumType(Type, Type) Declaration public void SetDefaultFromEnumType(Type enumType, Type defaultFromType) Parameters Type Name Description System.Type enumType System.Type defaultFromType | Improve this Doc View Source SetDefaultValue(Type, Object) Declaration public void SetDefaultValue(Type type, object value) Parameters Type Name Description System.Type type System.Object value | Improve this Doc View Source SetGenericConvertProvider(Type) Declaration public void SetGenericConvertProvider(Type type) Parameters Type Name Description System.Type type | Improve this Doc View Source SetScalarType(Type, Boolean) Declaration public void SetScalarType(Type type, bool isScalarType = true) Parameters Type Name Description System.Type type System.Boolean isScalarType | Improve this Doc View Source SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) Declaration public void SetValueToSqlConverter(Type type, Action<StringBuilder, SqlDataType, object> converter) Parameters Type Name Description System.Type type System.Action<System.Text.StringBuilder, LinqToDB.SqlQuery.SqlDataType, System.Object> converter | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public virtual LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description System.Type from System.Type to Returns Type Description System.Linq.Expressions.LambdaExpression"
  },
  "api/LinqToDB.Mapping.MapValue.html": {
    "href": "api/LinqToDB.Mapping.MapValue.html",
    "title": "Class MapValue | Linq To DB (aka linq2db)",
    "keywords": "Class MapValue Inheritance System.Object MapValue Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class MapValue Constructors | Improve this Doc View Source MapValue(Object, MapValueAttribute[]) Declaration public MapValue(object origValue, params MapValueAttribute[] mapValues) Parameters Type Name Description System.Object origValue LinqToDB.Mapping.MapValueAttribute[] mapValues Properties | Improve this Doc View Source MapValues Declaration public MapValueAttribute[] MapValues { get; } Property Value Type Description LinqToDB.Mapping.MapValueAttribute[] | Improve this Doc View Source OrigValue Declaration public object OrigValue { get; } Property Value Type Description System.Object"
  },
  "api/LinqToDB.Metadata.html": {
    "href": "api/LinqToDB.Metadata.html",
    "title": "Namespace LinqToDB.Metadata | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Metadata Classes AttributeReader FluentMetadataReader MetadataException Defines the base class for the namespace exceptions. MetadataReader SystemDataLinqAttributeReader SystemDataSqlServerAttributeReader XmlAttributeReader Interfaces IMetadataReader"
  },
  "api/LinqToDB.ProviderName.html": {
    "href": "api/LinqToDB.ProviderName.html",
    "title": "Class ProviderName | Linq To DB (aka linq2db)",
    "keywords": "Class ProviderName Inheritance System.Object ProviderName Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class ProviderName Fields | Improve this Doc View Source Access Declaration public const string Access = \"Access\" Field Value Type Description System.String | Improve this Doc View Source DB2 Declaration public const string DB2 = \"DB2\" Field Value Type Description System.String | Improve this Doc View Source DB2LUW Declaration public const string DB2LUW = \"DB2.LUW\" Field Value Type Description System.String | Improve this Doc View Source DB2zOS Declaration public const string DB2zOS = \"DB2.z/OS\" Field Value Type Description System.String | Improve this Doc View Source Firebird Declaration public const string Firebird = \"Firebird\" Field Value Type Description System.String | Improve this Doc View Source Informix Declaration public const string Informix = \"Informix\" Field Value Type Description System.String | Improve this Doc View Source MySql Declaration public const string MySql = \"MySql\" Field Value Type Description System.String | Improve this Doc View Source Oracle Declaration public const string Oracle = \"Oracle\" Field Value Type Description System.String | Improve this Doc View Source OracleManaged Declaration public const string OracleManaged = \"Oracle.Managed\" Field Value Type Description System.String | Improve this Doc View Source OracleNative Declaration public const string OracleNative = \"Oracle.Native\" Field Value Type Description System.String | Improve this Doc View Source PostgreSQL Declaration public const string PostgreSQL = \"PostgreSQL\" Field Value Type Description System.String | Improve this Doc View Source PostgreSQL92 Declaration public const string PostgreSQL92 = \"PostgreSQL.9.2\" Field Value Type Description System.String | Improve this Doc View Source PostgreSQL93 Declaration public const string PostgreSQL93 = \"PostgreSQL.9.3\" Field Value Type Description System.String | Improve this Doc View Source SapHana Declaration public const string SapHana = \"SapHana\" Field Value Type Description System.String | Improve this Doc View Source SqlCe Declaration public const string SqlCe = \"SqlCe\" Field Value Type Description System.String | Improve this Doc View Source SQLite Declaration public const string SQLite = \"SQLite\" Field Value Type Description System.String | Improve this Doc View Source SqlServer Declaration public const string SqlServer = \"SqlServer\" Field Value Type Description System.String | Improve this Doc View Source SqlServer2000 Declaration public const string SqlServer2000 = \"SqlServer.2000\" Field Value Type Description System.String | Improve this Doc View Source SqlServer2005 Declaration public const string SqlServer2005 = \"SqlServer.2005\" Field Value Type Description System.String | Improve this Doc View Source SqlServer2008 Declaration public const string SqlServer2008 = \"SqlServer.2008\" Field Value Type Description System.String | Improve this Doc View Source SqlServer2012 Declaration public const string SqlServer2012 = \"SqlServer.2012\" Field Value Type Description System.String | Improve this Doc View Source SqlServer2014 Declaration public const string SqlServer2014 = \"SqlServer.2014\" Field Value Type Description System.String | Improve this Doc View Source Sybase Declaration public const string Sybase = \"Sybase\" Field Value Type Description System.String"
  },
  "api/LinqToDB.Reflection.IObjectFactory.html": {
    "href": "api/LinqToDB.Reflection.IObjectFactory.html",
    "title": "Interface IObjectFactory | Linq To DB (aka linq2db)",
    "keywords": "Interface IObjectFactory Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public interface IObjectFactory Methods | Improve this Doc View Source CreateInstance(TypeAccessor) Declaration object CreateInstance(TypeAccessor typeAccessor) Parameters Type Name Description TypeAccessor typeAccessor Returns Type Description System.Object"
  },
  "api/LinqToDB.Reflection.MemberAccessor.html": {
    "href": "api/LinqToDB.Reflection.MemberAccessor.html",
    "title": "Class MemberAccessor | Linq To DB (aka linq2db)",
    "keywords": "Class MemberAccessor Inheritance System.Object MemberAccessor Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public class MemberAccessor Constructors | Improve this Doc View Source MemberAccessor(TypeAccessor, MemberInfo) Declaration public MemberAccessor(TypeAccessor typeAccessor, MemberInfo memberInfo) Parameters Type Name Description TypeAccessor typeAccessor System.Reflection.MemberInfo memberInfo Properties | Improve this Doc View Source Getter Declaration public Func<object, object> Getter { get; } Property Value Type Description System.Func<System.Object, System.Object> | Improve this Doc View Source GetterExpression Declaration public LambdaExpression GetterExpression { get; } Property Value Type Description System.Linq.Expressions.LambdaExpression | Improve this Doc View Source HasGetter Declaration public bool HasGetter { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasSetter Declaration public bool HasSetter { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsComplex Declaration public bool IsComplex { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MemberInfo Declaration public MemberInfo MemberInfo { get; } Property Value Type Description System.Reflection.MemberInfo | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Setter Declaration public Action<object, object> Setter { get; } Property Value Type Description System.Action<System.Object, System.Object> | Improve this Doc View Source SetterExpression Declaration public LambdaExpression SetterExpression { get; } Property Value Type Description System.Linq.Expressions.LambdaExpression | Improve this Doc View Source Type Declaration public Type Type { get; } Property Value Type Description System.Type | Improve this Doc View Source TypeAccessor Declaration public TypeAccessor TypeAccessor { get; } Property Value Type Description TypeAccessor Methods | Improve this Doc View Source GetAttribute<T>() Declaration public T GetAttribute<T>()where T : Attribute Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetAttributes() Declaration public object[] GetAttributes() Returns Type Description System.Object[] | Improve this Doc View Source GetAttributes<T>() Declaration public T[] GetAttributes<T>()where T : Attribute Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetTypeAttributes<T>() Declaration public T[] GetTypeAttributes<T>()where T : Attribute Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetValue(Object) Declaration public virtual object GetValue(object o) Parameters Type Name Description System.Object o Returns Type Description System.Object | Improve this Doc View Source SetValue(Object, Object) Declaration public virtual void SetValue(object o, object value) Parameters Type Name Description System.Object o System.Object value"
  },
  "api/LinqToDB.ServiceModel.ILinqSoapService.html": {
    "href": "api/LinqToDB.ServiceModel.ILinqSoapService.html",
    "title": "Interface ILinqSoapService | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqSoapService Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax [ServiceContract] public interface ILinqSoapService Methods | Improve this Doc View Source ExecuteBatch(String, String) Declaration [OperationContract] int ExecuteBatch(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteNonQuery(String, String) Declaration [OperationContract] int ExecuteNonQuery(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteReader(String, String) Declaration [OperationContract] string ExecuteReader(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.String | Improve this Doc View Source ExecuteScalar(String, String) Declaration [OperationContract] object ExecuteScalar(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.Object | Improve this Doc View Source GetInfo(String) Declaration [OperationContract] LinqServiceInfo GetInfo(string configuration) Parameters Type Name Description System.String configuration Returns Type Description LinqServiceInfo"
  },
  "api/LinqToDB.ServiceModel.LinqService.html": {
    "href": "api/LinqToDB.ServiceModel.LinqService.html",
    "title": "Class LinqService | Linq To DB (aka linq2db)",
    "keywords": "Class LinqService Inheritance System.Object LinqService Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Multiple)] [WebService(Namespace = \"http://tempuri.org/\")] [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)] public class LinqService : ILinqService Fields | Improve this Doc View Source TypeResolver Declaration public static Func<string, Type> TypeResolver Field Value Type Description System.Func<System.String, System.Type> Properties | Improve this Doc View Source AllowUpdates Declaration public bool AllowUpdates { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CreateDataContext(String) Declaration public virtual DataConnection CreateDataContext(string configuration) Parameters Type Name Description System.String configuration Returns Type Description DataConnection | Improve this Doc View Source ExecuteBatch(String, String) Declaration [WebMethod] public int ExecuteBatch(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.Int32 Implements ILinqService.ExecuteBatch(String, String) | Improve this Doc View Source ExecuteNonQuery(String, String) Declaration [WebMethod] public int ExecuteNonQuery(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.Int32 Implements ILinqService.ExecuteNonQuery(String, String) | Improve this Doc View Source ExecuteReader(String, String) Declaration [WebMethod] public string ExecuteReader(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.String Implements ILinqService.ExecuteReader(String, String) | Improve this Doc View Source ExecuteScalar(String, String) Declaration [WebMethod] public object ExecuteScalar(string configuration, string queryData) Parameters Type Name Description System.String configuration System.String queryData Returns Type Description System.Object Implements ILinqService.ExecuteScalar(String, String) | Improve this Doc View Source GetInfo(String) Declaration [WebMethod] public virtual LinqServiceInfo GetInfo(string configuration) Parameters Type Name Description System.String configuration Returns Type Description LinqServiceInfo Implements ILinqService.GetInfo(String) | Improve this Doc View Source HandleException(Exception) Declaration protected virtual void HandleException(Exception exception) Parameters Type Name Description System.Exception exception | Improve this Doc View Source ValidateQuery(LinqServiceQuery) Declaration protected virtual void ValidateQuery(LinqServiceQuery query) Parameters Type Name Description LinqServiceQuery query"
  },
  "api/LinqToDB.ServiceModel.LinqServiceInfo.html": {
    "href": "api/LinqToDB.ServiceModel.LinqServiceInfo.html",
    "title": "Class LinqServiceInfo | Linq To DB (aka linq2db)",
    "keywords": "Class LinqServiceInfo Inheritance System.Object LinqServiceInfo Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class LinqServiceInfo Properties | Improve this Doc View Source ConfigurationList Declaration public string[] ConfigurationList { get; set; } Property Value Type Description System.String[] | Improve this Doc View Source MappingSchemaType Declaration public string MappingSchemaType { get; set; } Property Value Type Description System.String | Improve this Doc View Source SqlBuilderType Declaration public string SqlBuilderType { get; set; } Property Value Type Description System.String | Improve this Doc View Source SqlOptimizerType Declaration public string SqlOptimizerType { get; set; } Property Value Type Description System.String | Improve this Doc View Source SqlProviderFlags Declaration public SqlProviderFlags SqlProviderFlags { get; set; } Property Value Type Description SqlProviderFlags"
  },
  "api/LinqToDB.ServiceModel.LinqServiceQuery.html": {
    "href": "api/LinqToDB.ServiceModel.LinqServiceQuery.html",
    "title": "Class LinqServiceQuery | Linq To DB (aka linq2db)",
    "keywords": "Class LinqServiceQuery Inheritance System.Object LinqServiceQuery Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class LinqServiceQuery Properties | Improve this Doc View Source Parameters Declaration public SqlParameter[] Parameters { get; set; } Property Value Type Description LinqToDB.SqlQuery.SqlParameter[] | Improve this Doc View Source Query Declaration public SelectQuery Query { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source QueryHints Declaration public List<string> QueryHints { get; set; } Property Value Type Description System.Collections.Generic.List<System.String>"
  },
  "api/LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction-1.html",
    "title": "Interface AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> Inherited Members AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR>.Over() AnalyticFunctions.IReadyToFunction<TR>.ToValue() Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IOrderedAcceptOverReadyToFunction<out TR> : AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR>, AnalyticFunctions.IReadyToFunction<TR> Type Parameters Name Description TR Methods | Improve this Doc View Source ThenBy<TKey>(TKey) Declaration [Sql.Extension(\"{expr}\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> ThenBy<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source ThenBy<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"{expr}\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> ThenBy<TKey>([ExprParameter] TKey expr, Sql.NullsPosition nulls) Parameters Type Name Description TKey expr Sql.NullsPosition nulls Returns Type Description AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source ThenByDesc<TKey>(TKey) Declaration [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> ThenByDesc<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source ThenByDesc<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> ThenByDesc<TKey>([ExprParameter] TKey expr, Sql.NullsPosition nulls) Parameters Type Name Description TKey expr Sql.NullsPosition nulls Returns Type Description AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> Type Parameters Name Description TKey"
  },
  "api/LinqToDB.AnalyticFunctions.IPartitionedMayHaveOrder-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IPartitionedMayHaveOrder-1.html",
    "title": "Interface AnalyticFunctions.IPartitionedMayHaveOrder<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IPartitionedMayHaveOrder<TR> Inherited Members AnalyticFunctions.IReadyToFunction<TR>.ToValue() AnalyticFunctions.INeedsOrderByOnly<TR>.OrderBy<TKey>(TKey) AnalyticFunctions.INeedsOrderByOnly<TR>.OrderBy<TKey>(TKey, Sql.NullsPosition) AnalyticFunctions.INeedsOrderByOnly<TR>.OrderByDesc<TKey>(TKey) AnalyticFunctions.INeedsOrderByOnly<TR>.OrderByDesc<TKey>(TKey, Sql.NullsPosition) Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IPartitionedMayHaveOrder<out TR> : AnalyticFunctions.IReadyToFunction<TR>, AnalyticFunctions.INeedsOrderByOnly<TR> Type Parameters Name Description TR"
  },
  "api/LinqToDB.Common.Configuration.Linq.html": {
    "href": "api/LinqToDB.Common.Configuration.Linq.html",
    "title": "Class Configuration.Linq | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.Linq Inheritance System.Object Configuration.Linq Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Linq Fields | Improve this Doc View Source AllowMultipleQuery Declaration public static bool AllowMultipleQuery Field Value Type Description System.Boolean | Improve this Doc View Source CheckNullForNotEquals If set to true nullable fields would be checked for IS NULL when comparasion type is NotEqual public class MyEntity { public int? Value; } db.MyEntity.Where(e => e.Value != 10) Would be converted to SELECT Value FROM MyEntity WHERE Value IS NULL OR Value != 10 Declaration public static bool CheckNullForNotEquals Field Value Type Description System.Boolean | Improve this Doc View Source DoNotClearOrderBys Declaration public static bool DoNotClearOrderBys Field Value Type Description System.Boolean | Improve this Doc View Source GenerateExpressionTest Declaration public static bool GenerateExpressionTest Field Value Type Description System.Boolean | Improve this Doc View Source GuardGrouping Prevents to use constructions like q.GroupBy( => .SomeValue) which leads to unexpected behaviour. Declaration public static bool GuardGrouping Field Value Type Description System.Boolean Remarks https://github.com/linq2db/linq2db/issues/365 | Improve this Doc View Source IgnoreEmptyUpdate Declaration public static bool IgnoreEmptyUpdate Field Value Type Description System.Boolean | Improve this Doc View Source OptimizeJoins Declaration public static bool OptimizeJoins Field Value Type Description System.Boolean | Improve this Doc View Source PreloadGroups Declaration public static bool PreloadGroups Field Value Type Description System.Boolean | Improve this Doc View Source TraceMapperExpression Declaration public static bool TraceMapperExpression Field Value Type Description System.Boolean | Improve this Doc View Source UseBinaryAggregateExpression Experimental Used to optimize big logical operations with great number of operands like expr1.and.axpr2...and.exprN into to one BinaryAggregateExpression . This saves from deep recursion in visitors. Default: false Switched off in 1.8.2 as unstable Declaration public static bool UseBinaryAggregateExpression Field Value Type Description System.Boolean Remarks See: https://github.com/linq2db/linq2db/issues/447 https://github.com/linq2db/linq2db/pull/563"
  },
  "api/LinqToDB.Common.DefaultValue-1.html": {
    "href": "api/LinqToDB.Common.DefaultValue-1.html",
    "title": "Class DefaultValue<T> | Linq To DB (aka linq2db)",
    "keywords": "Class DefaultValue<T> Inheritance System.Object DefaultValue<T> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class DefaultValue<T> Type Parameters Name Description T Properties | Improve this Doc View Source Value Declaration public static T Value { get; set; } Property Value Type Description T"
  },
  "api/LinqToDB.Configuration.ElementBase.html": {
    "href": "api/LinqToDB.Configuration.ElementBase.html",
    "title": "Class ElementBase | Linq To DB (aka linq2db)",
    "keywords": "Class ElementBase Inheritance System.Object System.Configuration.ConfigurationElement ElementBase DataProviderElement Inherited Members System.Configuration.ConfigurationElement.Init() System.Configuration.ConfigurationElement.IsModified() System.Configuration.ConfigurationElement.ResetModified() System.Configuration.ConfigurationElement.IsReadOnly() System.Configuration.ConfigurationElement.SetReadOnly() System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList) System.Configuration.ConfigurationElement.InitializeDefault() System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElement.Equals(System.Object) System.Configuration.ConfigurationElement.GetHashCode() System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty, System.Object, System.Boolean) System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement, System.Configuration.ConfigurationElement, System.Configuration.ConfigurationSaveMode) System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter, System.String) System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter, System.Boolean) System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader, System.Boolean) System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String) System.Configuration.ConfigurationElement.PostDeserialize() System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter) System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String, System.Xml.XmlReader) System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String) System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String) System.Configuration.ConfigurationElement.LockAttributes System.Configuration.ConfigurationElement.LockAllAttributesExcept System.Configuration.ConfigurationElement.LockElements System.Configuration.ConfigurationElement.LockAllElementsExcept System.Configuration.ConfigurationElement.LockItem System.Configuration.ConfigurationElement.Item[System.Configuration.ConfigurationProperty] System.Configuration.ConfigurationElement.Item[System.String] System.Configuration.ConfigurationElement.ElementInformation System.Configuration.ConfigurationElement.EvaluationContext System.Configuration.ConfigurationElement.ElementProperty System.Configuration.ConfigurationElement.HasContext System.Configuration.ConfigurationElement.CurrentConfiguration Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public abstract class ElementBase : ConfigurationElement Properties | Improve this Doc View Source Attributes Declaration public NameValueCollection Attributes { get; } Property Value Type Description System.Collections.Specialized.NameValueCollection | Improve this Doc View Source Properties Declaration protected override ConfigurationPropertyCollection Properties { get; } Property Value Type Description System.Configuration.ConfigurationPropertyCollection Overrides System.Configuration.ConfigurationElement.Properties Methods | Improve this Doc View Source OnDeserializeUnrecognizedAttribute(String, String) Gets a value indicating whether an unknown attribute is encountered during deserialization. Declaration protected override bool OnDeserializeUnrecognizedAttribute(string name, string value) Parameters Type Name Description System.String name The name of the unrecognized attribute. System.String value The value of the unrecognized attribute. Returns Type Description System.Boolean True when an unknown attribute is encountered while deserializing. Overrides System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String, System.String)"
  },
  "api/LinqToDB.Data.BulkCopyOptions.html": {
    "href": "api/LinqToDB.Data.BulkCopyOptions.html",
    "title": "Class BulkCopyOptions | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyOptions Inheritance System.Object BulkCopyOptions Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class BulkCopyOptions Properties | Improve this Doc View Source BulkCopyTimeout Declaration public int ? BulkCopyTimeout { get; set; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source BulkCopyType Declaration public BulkCopyType BulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source CheckConstraints Declaration public bool ? CheckConstraints { get; set; } Property Value Type Description System.Nullable<System.Boolean> | Improve this Doc View Source DatabaseName Declaration public string DatabaseName { get; set; } Property Value Type Description System.String | Improve this Doc View Source FireTriggers Declaration public bool ? FireTriggers { get; set; } Property Value Type Description System.Nullable<System.Boolean> | Improve this Doc View Source IgnoreSkipOnInsert Declaration [Obsolete] public bool ? IgnoreSkipOnInsert { get; set; } Property Value Type Description System.Nullable<System.Boolean> | Improve this Doc View Source KeepIdentity Declaration public bool ? KeepIdentity { get; set; } Property Value Type Description System.Nullable<System.Boolean> | Improve this Doc View Source KeepNulls Declaration public bool ? KeepNulls { get; set; } Property Value Type Description System.Nullable<System.Boolean> | Improve this Doc View Source MaxBatchSize Declaration public int ? MaxBatchSize { get; set; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source NotifyAfter Declaration public int NotifyAfter { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source RetrieveSequence Declaration public bool RetrieveSequence { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RowsCopiedCallback Declaration public Action<BulkCopyRowsCopied> RowsCopiedCallback { get; set; } Property Value Type Description System.Action<LinqToDB.Data.BulkCopyRowsCopied> | Improve this Doc View Source SchemaName Declaration public string SchemaName { get; set; } Property Value Type Description System.String | Improve this Doc View Source TableLock Declaration public bool ? TableLock { get; set; } Property Value Type Description System.Nullable<System.Boolean> | Improve this Doc View Source TableName Declaration public string TableName { get; set; } Property Value Type Description System.String | Improve this Doc View Source UseInternalTransaction Declaration public bool ? UseInternalTransaction { get; set; } Property Value Type Description System.Nullable<System.Boolean>"
  },
  "api/LinqToDB.Data.DataParameter.html": {
    "href": "api/LinqToDB.Data.DataParameter.html",
    "title": "Class DataParameter | Linq To DB (aka linq2db)",
    "keywords": "Class DataParameter Inheritance System.Object DataParameter Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax [ScalarType] public class DataParameter Constructors | Improve this Doc View Source DataParameter() Declaration public DataParameter() | Improve this Doc View Source DataParameter(String, Object) Declaration public DataParameter(string name, object value) Parameters Type Name Description System.String name System.Object value | Improve this Doc View Source DataParameter(String, Object, DataType) Declaration public DataParameter(string name, object value, DataType dataType) Parameters Type Name Description System.String name System.Object value DataType dataType Properties | Improve this Doc View Source DataType Gets or sets the DataType of the parameter. Declaration public DataType DataType { get; set; } Property Value Type Description DataType One of the DataType values. The default is Undefined . | Improve this Doc View Source Direction Gets or sets a value indicating whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter. Declaration public ParameterDirection? Direction { get; set; } Property Value Type Description System.Nullable<System.Data.ParameterDirection> One of the System.Data.ParameterDirection values. The default is Input. | Improve this Doc View Source IsArray Declaration public bool IsArray { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets or sets the name of the DataParameter . Declaration public string Name { get; set; } Property Value Type Description System.String The name of the DataParameter . The default is an empty string. | Improve this Doc View Source Size Gets or sets the maximum size, in bytes, of the data within the column. Declaration public int ? Size { get; set; } Property Value Type Description System.Nullable<System.Int32> The maximum size, in bytes, of the data within the column. The default value is inferred from the parameter value. | Improve this Doc View Source Value Gets or sets the value of the parameter. Declaration public object Value { get; set; } Property Value Type Description System.Object An System.Object that is the value of the parameter. The default value is null. Methods | Improve this Doc View Source Binary(String, Byte[]) Declaration public static DataParameter Binary(string name, byte[] value) Parameters Type Name Description System.String name System.Byte[] value Returns Type Description DataParameter | Improve this Doc View Source Binary(String, Binary) Declaration public static DataParameter Binary(string name, Binary value) Parameters Type Name Description System.String name System.Data.Linq.Binary value Returns Type Description DataParameter | Improve this Doc View Source BinaryJson(String, String) Declaration public static DataParameter BinaryJson(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description DataParameter | Improve this Doc View Source BitArray(String, BitArray) Declaration public static DataParameter BitArray(string name, BitArray value) Parameters Type Name Description System.String name System.Collections.BitArray value Returns Type Description DataParameter | Improve this Doc View Source Blob(String, Byte[]) Declaration public static DataParameter Blob(string name, byte[] value) Parameters Type Name Description System.String name System.Byte[] value Returns Type Description DataParameter | Improve this Doc View Source Boolean(String, Boolean) Declaration public static DataParameter Boolean(string name, bool value) Parameters Type Name Description System.String name System.Boolean value Returns Type Description DataParameter | Improve this Doc View Source Byte(String, Byte) Declaration public static DataParameter Byte(string name, byte value) Parameters Type Name Description System.String name System.Byte value Returns Type Description DataParameter | Improve this Doc View Source Char(String, Char) Declaration public static DataParameter Char(string name, char value) Parameters Type Name Description System.String name System.Char value Returns Type Description DataParameter | Improve this Doc View Source Char(String, String) Declaration public static DataParameter Char(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Boolean) Declaration public static DataParameter Create(string name, bool value) Parameters Type Name Description System.String name System.Boolean value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Byte) Declaration public static DataParameter Create(string name, byte value) Parameters Type Name Description System.String name System.Byte value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Byte[]) Declaration public static DataParameter Create(string name, byte[] value) Parameters Type Name Description System.String name System.Byte[] value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Char) Declaration public static DataParameter Create(string name, char value) Parameters Type Name Description System.String name System.Char value Returns Type Description DataParameter | Improve this Doc View Source Create(String, BitArray) Declaration public static DataParameter Create(string name, BitArray value) Parameters Type Name Description System.String name System.Collections.BitArray value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Dictionary<String, String>) Declaration public static DataParameter Create(string name, Dictionary<string, string> value) Parameters Type Name Description System.String name System.Collections.Generic.Dictionary<System.String, System.String> value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Binary) Declaration public static DataParameter Create(string name, Binary value) Parameters Type Name Description System.String name System.Data.Linq.Binary value Returns Type Description DataParameter | Improve this Doc View Source Create(String, DateTime) Declaration public static DataParameter Create(string name, DateTime value) Parameters Type Name Description System.String name System.DateTime value Returns Type Description DataParameter | Improve this Doc View Source Create(String, DateTimeOffset) Declaration public static DataParameter Create(string name, DateTimeOffset value) Parameters Type Name Description System.String name System.DateTimeOffset value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Decimal) Declaration public static DataParameter Create(string name, decimal value) Parameters Type Name Description System.String name System.Decimal value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Double) Declaration public static DataParameter Create(string name, double value) Parameters Type Name Description System.String name System.Double value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Guid) Declaration public static DataParameter Create(string name, Guid value) Parameters Type Name Description System.String name System.Guid value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Int16) Declaration public static DataParameter Create(string name, short value) Parameters Type Name Description System.String name System.Int16 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Int32) Declaration public static DataParameter Create(string name, int value) Parameters Type Name Description System.String name System.Int32 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Int64) Declaration public static DataParameter Create(string name, long value) Parameters Type Name Description System.String name System.Int64 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, SByte) Declaration [CLSCompliant(false)] public static DataParameter Create(string name, sbyte value) Parameters Type Name Description System.String name System.SByte value Returns Type Description DataParameter | Improve this Doc View Source Create(String, Single) Declaration public static DataParameter Create(string name, float value) Parameters Type Name Description System.String name System.Single value Returns Type Description DataParameter | Improve this Doc View Source Create(String, String) Declaration public static DataParameter Create(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description DataParameter | Improve this Doc View Source Create(String, TimeSpan) Declaration public static DataParameter Create(string name, TimeSpan value) Parameters Type Name Description System.String name System.TimeSpan value Returns Type Description DataParameter | Improve this Doc View Source Create(String, UInt16) Declaration [CLSCompliant(false)] public static DataParameter Create(string name, ushort value) Parameters Type Name Description System.String name System.UInt16 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, UInt32) Declaration [CLSCompliant(false)] public static DataParameter Create(string name, uint value) Parameters Type Name Description System.String name System.UInt32 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, UInt64) Declaration [CLSCompliant(false)] public static DataParameter Create(string name, ulong value) Parameters Type Name Description System.String name System.UInt64 value Returns Type Description DataParameter | Improve this Doc View Source Create(String, XDocument) Declaration public static DataParameter Create(string name, XDocument value) Parameters Type Name Description System.String name System.Xml.Linq.XDocument value Returns Type Description DataParameter | Improve this Doc View Source Create(String, XmlDocument) Declaration public static DataParameter Create(string name, XmlDocument value) Parameters Type Name Description System.String name System.Xml.XmlDocument value Returns Type Description DataParameter | Improve this Doc View Source Date(String, DateTime) Declaration public static DataParameter Date(string name, DateTime value) Parameters Type Name Description System.String name System.DateTime value Returns Type Description DataParameter | Improve this Doc View Source DateTime(String, DateTime) Declaration public static DataParameter DateTime(string name, DateTime value) Parameters Type Name Description System.String name System.DateTime value Returns Type Description DataParameter | Improve this Doc View Source DateTime2(String, DateTime) Declaration public static DataParameter DateTime2(string name, DateTime value) Parameters Type Name Description System.String name System.DateTime value Returns Type Description DataParameter | Improve this Doc View Source DateTimeOffset(String, DateTimeOffset) Declaration public static DataParameter DateTimeOffset(string name, DateTimeOffset value) Parameters Type Name Description System.String name System.DateTimeOffset value Returns Type Description DataParameter | Improve this Doc View Source Decimal(String, Decimal) Declaration public static DataParameter Decimal(string name, decimal value) Parameters Type Name Description System.String name System.Decimal value Returns Type Description DataParameter | Improve this Doc View Source Dictionary(String, IDictionary) Declaration public static DataParameter Dictionary(string name, IDictionary value) Parameters Type Name Description System.String name System.Collections.IDictionary value Returns Type Description DataParameter | Improve this Doc View Source Double(String, Double) Declaration public static DataParameter Double(string name, double value) Parameters Type Name Description System.String name System.Double value Returns Type Description DataParameter | Improve this Doc View Source Guid(String, Guid) Declaration public static DataParameter Guid(string name, Guid value) Parameters Type Name Description System.String name System.Guid value Returns Type Description DataParameter | Improve this Doc View Source Image(String, Byte[]) Declaration public static DataParameter Image(string name, byte[] value) Parameters Type Name Description System.String name System.Byte[] value Returns Type Description DataParameter | Improve this Doc View Source Int16(String, Int16) Declaration public static DataParameter Int16(string name, short value) Parameters Type Name Description System.String name System.Int16 value Returns Type Description DataParameter | Improve this Doc View Source Int32(String, Int32) Declaration public static DataParameter Int32(string name, int value) Parameters Type Name Description System.String name System.Int32 value Returns Type Description DataParameter | Improve this Doc View Source Int64(String, Int64) Declaration public static DataParameter Int64(string name, long value) Parameters Type Name Description System.String name System.Int64 value Returns Type Description DataParameter | Improve this Doc View Source Json(String, String) Declaration public static DataParameter Json(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description DataParameter | Improve this Doc View Source Money(String, Decimal) Declaration public static DataParameter Money(string name, decimal value) Parameters Type Name Description System.String name System.Decimal value Returns Type Description DataParameter | Improve this Doc View Source NChar(String, Char) Declaration public static DataParameter NChar(string name, char value) Parameters Type Name Description System.String name System.Char value Returns Type Description DataParameter | Improve this Doc View Source NChar(String, String) Declaration public static DataParameter NChar(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description DataParameter | Improve this Doc View Source NText(String, String) Declaration public static DataParameter NText(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description DataParameter | Improve this Doc View Source NVarChar(String, Char) Declaration public static DataParameter NVarChar(string name, char value) Parameters Type Name Description System.String name System.Char value Returns Type Description DataParameter | Improve this Doc View Source NVarChar(String, String) Declaration public static DataParameter NVarChar(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description DataParameter | Improve this Doc View Source SByte(String, SByte) Declaration [CLSCompliant(false)] public static DataParameter SByte(string name, sbyte value) Parameters Type Name Description System.String name System.SByte value Returns Type Description DataParameter | Improve this Doc View Source Single(String, Single) Declaration public static DataParameter Single(string name, float value) Parameters Type Name Description System.String name System.Single value Returns Type Description DataParameter | Improve this Doc View Source SmallDateTime(String, DateTime) Declaration public static DataParameter SmallDateTime(string name, DateTime value) Parameters Type Name Description System.String name System.DateTime value Returns Type Description DataParameter | Improve this Doc View Source SmallMoney(String, Decimal) Declaration public static DataParameter SmallMoney(string name, decimal value) Parameters Type Name Description System.String name System.Decimal value Returns Type Description DataParameter | Improve this Doc View Source Text(String, String) Declaration public static DataParameter Text(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description DataParameter | Improve this Doc View Source Time(String, TimeSpan) Declaration public static DataParameter Time(string name, TimeSpan value) Parameters Type Name Description System.String name System.TimeSpan value Returns Type Description DataParameter | Improve this Doc View Source Timestamp(String, Byte[]) Declaration public static DataParameter Timestamp(string name, byte[] value) Parameters Type Name Description System.String name System.Byte[] value Returns Type Description DataParameter | Improve this Doc View Source Udt(String, Object) Declaration public static DataParameter Udt(string name, object value) Parameters Type Name Description System.String name System.Object value Returns Type Description DataParameter | Improve this Doc View Source UInt16(String, UInt16) Declaration [CLSCompliant(false)] public static DataParameter UInt16(string name, ushort value) Parameters Type Name Description System.String name System.UInt16 value Returns Type Description DataParameter | Improve this Doc View Source UInt32(String, UInt32) Declaration [CLSCompliant(false)] public static DataParameter UInt32(string name, uint value) Parameters Type Name Description System.String name System.UInt32 value Returns Type Description DataParameter | Improve this Doc View Source UInt64(String, UInt64) Declaration [CLSCompliant(false)] public static DataParameter UInt64(string name, ulong value) Parameters Type Name Description System.String name System.UInt64 value Returns Type Description DataParameter | Improve this Doc View Source VarBinary(String, Byte[]) Declaration public static DataParameter VarBinary(string name, byte[] value) Parameters Type Name Description System.String name System.Byte[] value Returns Type Description DataParameter | Improve this Doc View Source VarBinary(String, Binary) Declaration public static DataParameter VarBinary(string name, Binary value) Parameters Type Name Description System.String name System.Data.Linq.Binary value Returns Type Description DataParameter | Improve this Doc View Source VarChar(String, Char) Declaration public static DataParameter VarChar(string name, char value) Parameters Type Name Description System.String name System.Char value Returns Type Description DataParameter | Improve this Doc View Source VarChar(String, String) Declaration public static DataParameter VarChar(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description DataParameter | Improve this Doc View Source Variant(String, Object) Declaration public static DataParameter Variant(string name, object value) Parameters Type Name Description System.String name System.Object value Returns Type Description DataParameter | Improve this Doc View Source VarNumeric(String, Decimal) Declaration public static DataParameter VarNumeric(string name, decimal value) Parameters Type Name Description System.String name System.Decimal value Returns Type Description DataParameter | Improve this Doc View Source Xml(String, String) Declaration public static DataParameter Xml(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description DataParameter | Improve this Doc View Source Xml(String, XDocument) Declaration public static DataParameter Xml(string name, XDocument value) Parameters Type Name Description System.String name System.Xml.Linq.XDocument value Returns Type Description DataParameter | Improve this Doc View Source Xml(String, XmlDocument) Declaration public static DataParameter Xml(string name, XmlDocument value) Parameters Type Name Description System.String name System.Xml.XmlDocument value Returns Type Description DataParameter"
  },
  "api/LinqToDB.DataProvider.Access.AccessTools.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessTools.html",
    "title": "Class AccessTools | Linq To DB (aka linq2db)",
    "keywords": "Class AccessTools Inheritance System.Object AccessTools Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public static class AccessTools Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public static void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description System.String databaseName System.Boolean deleteIfExists | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description DataConnection | Improve this Doc View Source DropDatabase(String) Declaration public static void DropDatabase(string databaseName) Parameters Type Name Description System.String databaseName | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Int32 maxBatchSize System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T"
  },
  "api/LinqToDB.DataProvider.Access.html": {
    "href": "api/LinqToDB.DataProvider.Access.html",
    "title": "Namespace LinqToDB.DataProvider.Access | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Access Classes AccessDataProvider AccessMappingSchema AccessTools"
  },
  "api/LinqToDB.DataProvider.DataTools.html": {
    "href": "api/LinqToDB.DataProvider.DataTools.html",
    "title": "Class DataTools | Linq To DB (aka linq2db)",
    "keywords": "Class DataTools Inheritance System.Object DataTools Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class DataTools Fields | Improve this Doc View Source GetChar Declaration public static Func<IDataReader, int, string> GetChar Field Value Type Description System.Func<System.Data.IDataReader, System.Int32, System.String> Methods | Improve this Doc View Source ConvertCharToSql(StringBuilder, String, Action<StringBuilder, Int32>, Char) Declaration public static void ConvertCharToSql(StringBuilder stringBuilder, string startString, Action<StringBuilder, int> appendConversion, char value) Parameters Type Name Description System.Text.StringBuilder stringBuilder System.String startString System.Action<System.Text.StringBuilder, System.Int32> appendConversion System.Char value | Improve this Doc View Source ConvertStringToSql(StringBuilder, String, String, Action<StringBuilder, Int32>, String) Declaration public static void ConvertStringToSql(StringBuilder stringBuilder, string plusOperator, string startString, Action<StringBuilder, int> appendConversion, string value) Parameters Type Name Description System.Text.StringBuilder stringBuilder System.String plusOperator System.String startString System.Action<System.Text.StringBuilder, System.Int32> appendConversion System.String value"
  },
  "api/LinqToDB.DataProvider.DB2.ConnectionTypeTypeCreator-1.html": {
    "href": "api/LinqToDB.DataProvider.DB2.ConnectionTypeTypeCreator-1.html",
    "title": "Class ConnectionTypeTypeCreator<T> | Linq To DB (aka linq2db)",
    "keywords": "Class ConnectionTypeTypeCreator<T> Inheritance System.Object TypeCreatorBase LinqToDB.DataProvider.DB2.TypeCreatorNoDefault<T> ConnectionTypeTypeCreator<T> Inherited Members TypeCreatorNoDefault<T>.CreateInstance(T) TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class ConnectionTypeTypeCreator<T> : TypeCreatorNoDefault<T> Type Parameters Name Description T Methods | Improve this Doc View Source CreateInstance(DataConnection) Declaration public dynamic CreateInstance(DataConnection value) Parameters Type Name Description DataConnection value Returns Type Description System.Object"
  },
  "api/LinqToDB.DataProvider.DB2.html": {
    "href": "api/LinqToDB.DataProvider.DB2.html",
    "title": "Namespace LinqToDB.DataProvider.DB2 | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.DB2 Classes ConnectionTypeTypeCreator<T> DB2DataProvider DB2LUWMappingSchema DB2MappingSchema DB2Tools DB2Types DB2zOSMappingSchema TypeCreator TypeCreator<T> TypeCreator<T1, T> TypeCreator<T1, T2, T> TypeCreatorBase TypeCreatorNoDefault<T> Enums DB2IdentifierQuoteMode DB2Version"
  },
  "api/LinqToDB.DataProvider.DynamicDataProviderBase.html": {
    "href": "api/LinqToDB.DataProvider.DynamicDataProviderBase.html",
    "title": "Class DynamicDataProviderBase | Linq To DB (aka linq2db)",
    "keywords": "Class DynamicDataProviderBase Inheritance System.Object DataProviderBase DynamicDataProviderBase DB2DataProvider FirebirdDataProvider InformixDataProvider MySqlDataProvider OracleDataProvider PostgreSQLDataProvider SapHanaDataProvider SqlCeDataProvider SQLiteDataProvider SybaseDataProvider Inherited Members DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.ConnectionNamespace DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.CreateSqlBuilder() DataProviderBase.GetSqlOptimizer() DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.GetSchemaProvider() DataProviderBase.SetParameterType(IDbDataParameter, DataType) DataProviderBase.BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public abstract class DynamicDataProviderBase : DataProviderBase, IDataProvider Constructors | Improve this Doc View Source DynamicDataProviderBase(String, MappingSchema) Declaration protected DynamicDataProviderBase(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionTypeName Declaration protected abstract string ConnectionTypeName { get; } Property Value Type Description System.String | Improve this Doc View Source DataReaderType Declaration public override Type DataReaderType { get; } Property Value Type Description System.Type Overrides DataProviderBase.DataReaderType | Improve this Doc View Source DataReaderTypeName Declaration protected abstract string DataReaderTypeName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateConnectionExpression(Type) Declaration public static Expression<Func<string, IDbConnection>> CreateConnectionExpression(Type connectionType) Parameters Type Name Description System.Type connectionType Returns Type Description System.Linq.Expressions.Expression<System.Func<System.String, System.Data.IDbConnection>> | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected override IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.IDbConnection Overrides DataProviderBase.CreateConnectionInternal(String) | Improve this Doc View Source EnsureConnection() Declaration protected void EnsureConnection() | Improve this Doc View Source GetConnectionType() Declaration protected Type GetConnectionType() Returns Type Description System.Type | Improve this Doc View Source GetSetParameter(Type, String, String, String, String) Declaration protected Action<IDbDataParameter> GetSetParameter(Type connectionType, string parameterTypeName, string propertyName, string dbTypeName, string valueName) Parameters Type Name Description System.Type connectionType System.String parameterTypeName System.String propertyName System.String dbTypeName System.String valueName Returns Type Description System.Action<System.Data.IDbDataParameter> | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration public override bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description System.Boolean Overrides DataProviderBase.IsCompatibleConnection(IDbConnection) | Improve this Doc View Source IsGetParameter(Type, String, String, String, String) Declaration protected Func<IDbDataParameter, bool> IsGetParameter(Type connectionType, string parameterTypeName, string propertyName, string dbTypeName, string valueName) Parameters Type Name Description System.Type connectionType System.String parameterTypeName System.String propertyName System.String dbTypeName System.String valueName Returns Type Description System.Func<System.Data.IDbDataParameter, System.Boolean> | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected abstract void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description System.Type connectionType | Improve this Doc View Source SetField(Type, String, String) Declaration protected void SetField(Type fieldType, string dataTypeName, string methodName) Parameters Type Name Description System.Type fieldType System.String dataTypeName System.String methodName | Improve this Doc View Source SetProviderField(Type, String) Declaration protected void SetProviderField(Type fieldType, string methodName) Parameters Type Name Description System.Type fieldType System.String methodName | Improve this Doc View Source SetProviderField(Type, Type, String) Declaration protected void SetProviderField(Type toType, Type fieldType, string methodName) Parameters Type Name Description System.Type toType System.Type fieldType System.String methodName | Improve this Doc View Source SetToTypeField(Type, String) Declaration protected void SetToTypeField(Type toType, string methodName) Parameters Type Name Description System.Type toType System.String methodName"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlDataProvider.html",
    "title": "Class MySqlDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase MySqlDataProvider Inherited Members DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public class MySqlDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source MySqlDataProvider() Declaration public MySqlDataProvider() | Improve this Doc View Source MySqlDataProvider(String, MappingSchema) Declaration protected MySqlDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description System.Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlMappingSchema.html",
    "title": "Class MySqlMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlMappingSchema Inheritance System.Object MappingSchema MySqlMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public class MySqlMappingSchema : MappingSchema Constructors | Improve this Doc View Source MySqlMappingSchema() Declaration public MySqlMappingSchema() | Improve this Doc View Source MySqlMappingSchema(String) Declaration protected MySqlMappingSchema(string configuration) Parameters Type Name Description System.String configuration"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.html",
    "title": "Enum PostgreSQLVersion | Linq To DB (aka linq2db)",
    "keywords": "Enum PostgreSQLVersion Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public enum PostgreSQLVersion Fields Name Description v92 v93 Extension Methods Sql.Between<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion) Sql.NotBetween<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.html",
    "title": "Namespace LinqToDB.DataProvider.PostgreSQL | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.PostgreSQL Classes PostgreSQLDataProvider PostgreSQLMappingSchema PostgreSQLSqlBuilder PostgreSQLTools Enums PostgreSQLIdentifierQuoteMode PostgreSQLVersion"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.html",
    "title": "Class SQLiteMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteMappingSchema Inheritance System.Object MappingSchema SQLiteMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class SQLiteMappingSchema : MappingSchema Constructors | Improve this Doc View Source SQLiteMappingSchema() Declaration public SQLiteMappingSchema() | Improve this Doc View Source SQLiteMappingSchema(String) Declaration protected SQLiteMappingSchema(string configuration) Parameters Type Name Description System.String configuration"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.html",
    "title": "Class SQLiteSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteSqlBuilder Inheritance System.Object BasicSqlBuilder SQLiteSqlBuilder Inherited Members BasicSqlBuilder.SelectQuery BasicSqlBuilder.Indent BasicSqlBuilder.BuildStep BasicSqlBuilder.SqlOptimizer BasicSqlBuilder.SqlProviderFlags BasicSqlBuilder.ValueToSqlConverter BasicSqlBuilder.StringBuilder BasicSqlBuilder.SkipAlias BasicSqlBuilder.IsNestedJoinParenthesisRequired BasicSqlBuilder.WrapJoinCondition BasicSqlBuilder.BuildSql(Int32, SelectQuery, StringBuilder) BasicSqlBuilder.BuildSql(Int32, SelectQuery, StringBuilder, Int32, Boolean) BasicSqlBuilder.BuildSqlBuilder(SelectQuery, Int32, Boolean) BasicSqlBuilder.WithStringBuilder<T>(StringBuilder, Func<T>) BasicSqlBuilder.ParenthesizeJoin(List<SelectQuery.JoinedTable>) BasicSqlBuilder.BuildSql() BasicSqlBuilder.BuildDeleteQuery() BasicSqlBuilder.BuildUpdateQuery() BasicSqlBuilder.BuildSelectQuery() BasicSqlBuilder.BuildInsertQuery() BasicSqlBuilder.BuildUnknownQuery() BasicSqlBuilder.ConvertTableName(StringBuilder, String, String, String) BasicSqlBuilder.BuildSelectClause() BasicSqlBuilder.GetSelectedColumns() BasicSqlBuilder.BuildColumns() BasicSqlBuilder.BuildColumnExpression(ISqlExpression, String, Boolean) BasicSqlBuilder.BuildDeleteClause() BasicSqlBuilder.BuildUpdateClause() BasicSqlBuilder.BuildUpdateTable() BasicSqlBuilder.BuildUpdateTableName() BasicSqlBuilder.BuildUpdateSet() BasicSqlBuilder.BuildInsertClause() BasicSqlBuilder.BuildEmptyInsert() BasicSqlBuilder.BuildOutputSubclause() BasicSqlBuilder.BuildInsertClause(String, Boolean) BasicSqlBuilder.BuildGetIdentity() BasicSqlBuilder.BuildInsertOrUpdateQuery() BasicSqlBuilder.BuildInsertOrUpdateQueryAsMerge(String) BasicSqlBuilder.EndLine BasicSqlBuilder.BuildInsertOrUpdateQueryAsUpdateInsert() BasicSqlBuilder.BuildDropTableStatement() BasicSqlBuilder.BuildStartCreateTableStatement(SelectQuery.CreateTableStatement) BasicSqlBuilder.BuildEndCreateTableStatement(SelectQuery.CreateTableStatement) BasicSqlBuilder.BuildCreateTableStatement() BasicSqlBuilder.BuildCreateTableFieldType(SqlField) BasicSqlBuilder.BuildCreateTableNullAttribute(SqlField, DefaulNullable) BasicSqlBuilder.BuildCreateTableIdentityAttribute1(SqlField) BasicSqlBuilder.BuildPhysicalTable(ISqlTableSource, String) BasicSqlBuilder.BuildTableName(SelectQuery.TableSource, Boolean, Boolean) BasicSqlBuilder.BuildJoinType(SelectQuery.JoinedTable) BasicSqlBuilder.BuildWhere() BasicSqlBuilder.BuildWhereClause() BasicSqlBuilder.BuildGroupByClause() BasicSqlBuilder.BuildHavingClause() BasicSqlBuilder.BuildOrderByClause() BasicSqlBuilder.SkipFirst BasicSqlBuilder.SkipFormat BasicSqlBuilder.FirstFormat BasicSqlBuilder.OffsetFirst BasicSqlBuilder.TakePercent BasicSqlBuilder.TakeTies BasicSqlBuilder.NeedSkip BasicSqlBuilder.NeedTake BasicSqlBuilder.BuildSkipFirst() BasicSqlBuilder.BuildTakeHints() BasicSqlBuilder.BuildOffsetLimit() BasicSqlBuilder.BuildWhereSearchCondition(SelectQuery.SearchCondition) BasicSqlBuilder.BuildSearchCondition(SelectQuery.SearchCondition) BasicSqlBuilder.BuildSearchCondition(Int32, SelectQuery.SearchCondition) BasicSqlBuilder.BuildPredicate(Int32, ISqlPredicate) BasicSqlBuilder.BuildPredicate(Int32, Int32, ISqlPredicate) BasicSqlBuilder.BuildLikePredicate(SelectQuery.Predicate.Like) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, String, Boolean, Boolean) BasicSqlBuilder.BuildExpression(ISqlExpression) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) BasicSqlBuilder.BuildExpression(Int32, ISqlExpression) BasicSqlBuilder.BuildValue(SqlDataType, Object) BasicSqlBuilder.BuildBinaryExpression(SqlBinaryExpression) BasicSqlBuilder.BuildFunction(SqlFunction) BasicSqlBuilder.GetPrecedence(ISqlPredicate) BasicSqlBuilder.AlternativeBuildSql(Boolean, Action) BasicSqlBuilder.AlternativeBuildSql2(Action) BasicSqlBuilder.AlternativeGetSelectedColumns(BasicSqlBuilder.ColumnSelector) BasicSqlBuilder.IsDateDataType(ISqlExpression, String) BasicSqlBuilder.IsTimeDataType(ISqlExpression) BasicSqlBuilder.ConvertFunctionParameters(SqlFunction) BasicSqlBuilder.GetSequenceNameAttribute(SqlTable, Boolean) BasicSqlBuilder.GetTempAliases(Int32, String) BasicSqlBuilder.GetTableAlias(ISqlTableSource) BasicSqlBuilder.GetTableDatabaseName(SqlTable) BasicSqlBuilder.GetTableOwnerName(SqlTable) BasicSqlBuilder.GetTablePhysicalName(SqlTable) BasicSqlBuilder.AppendIndent() BasicSqlBuilder.Add<T>(ISqlExpression, ISqlExpression) BasicSqlBuilder.IsReserved(String) BasicSqlBuilder.GetIdentityExpression(SqlTable) BasicSqlBuilder.PrintParameterName(StringBuilder, IDbDataParameter) BasicSqlBuilder.GetTypeName(IDbDataParameter) BasicSqlBuilder.GetUdtTypeName(IDbDataParameter) BasicSqlBuilder.GetProviderTypeName(IDbDataParameter) BasicSqlBuilder.PrintParameterType(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameterValue(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameters(StringBuilder, IDbDataParameter[]) BasicSqlBuilder.ApplyQueryHints(String, List<String>) BasicSqlBuilder.Name Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class SQLiteSqlBuilder : BasicSqlBuilder, ISqlBuilder Constructors | Improve this Doc View Source SQLiteSqlBuilder(ISqlOptimizer, SqlProviderFlags, ValueToSqlConverter) Declaration public SQLiteSqlBuilder(ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags, ValueToSqlConverter valueToSqlConverter) Parameters Type Name Description ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags ValueToSqlConverter valueToSqlConverter Properties | Improve this Doc View Source IsNestedJoinSupported Declaration public override bool IsNestedJoinSupported { get; } Property Value Type Description System.Boolean Overrides BasicSqlBuilder.IsNestedJoinSupported | Improve this Doc View Source LimitFormat Declaration protected override string LimitFormat { get; } Property Value Type Description System.String Overrides BasicSqlBuilder.LimitFormat | Improve this Doc View Source OffsetFormat Declaration protected override string OffsetFormat { get; } Property Value Type Description System.String Overrides BasicSqlBuilder.OffsetFormat Methods | Improve this Doc View Source BuildCommand(Int32) Declaration protected override void BuildCommand(int commandNumber) Parameters Type Name Description System.Int32 commandNumber Overrides BasicSqlBuilder.BuildCommand(Int32) | Improve this Doc View Source BuildCreateTableIdentityAttribute2(SqlField) Declaration protected override void BuildCreateTableIdentityAttribute2(SqlField field) Parameters Type Name Description SqlField field Overrides BasicSqlBuilder.BuildCreateTableIdentityAttribute2(SqlField) | Improve this Doc View Source BuildCreateTablePrimaryKey(String, IEnumerable<String>) Declaration protected override void BuildCreateTablePrimaryKey(string pkName, IEnumerable<string> fieldNames) Parameters Type Name Description System.String pkName System.Collections.Generic.IEnumerable<System.String> fieldNames Overrides BasicSqlBuilder.BuildCreateTablePrimaryKey(String, IEnumerable<String>) | Improve this Doc View Source BuildDataType(SqlDataType, Boolean) Declaration protected override void BuildDataType(SqlDataType type, bool createDbType) Parameters Type Name Description SqlDataType type System.Boolean createDbType Overrides BasicSqlBuilder.BuildDataType(SqlDataType, Boolean) | Improve this Doc View Source BuildFromClause() Declaration protected override void BuildFromClause() Overrides BasicSqlBuilder.BuildFromClause() | Improve this Doc View Source BuildPredicate(ISqlPredicate) Declaration protected override void BuildPredicate(ISqlPredicate predicate) Parameters Type Name Description ISqlPredicate predicate Overrides BasicSqlBuilder.BuildPredicate(ISqlPredicate) | Improve this Doc View Source BuildTableName(StringBuilder, String, String, String) Declaration public override StringBuilder BuildTableName(StringBuilder sb, string database, string owner, string table) Parameters Type Name Description System.Text.StringBuilder sb System.String database System.String owner System.String table Returns Type Description System.Text.StringBuilder Overrides BasicSqlBuilder.BuildTableName(StringBuilder, String, String, String) | Improve this Doc View Source CommandCount(SelectQuery) Declaration public override int CommandCount(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Int32 Overrides BasicSqlBuilder.CommandCount(SelectQuery) | Improve this Doc View Source Convert(Object, ConvertType) Declaration public override object Convert(object value, ConvertType convertType) Parameters Type Name Description System.Object value ConvertType convertType Returns Type Description System.Object Overrides BasicSqlBuilder.Convert(Object, ConvertType) | Improve this Doc View Source CreateSqlBuilder() Declaration protected override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides BasicSqlBuilder.CreateSqlBuilder()"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseDataProvider.html",
    "title": "Class SybaseDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase SybaseDataProvider Inherited Members DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class SybaseDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source SybaseDataProvider() Declaration public SybaseDataProvider() | Improve this Doc View Source SybaseDataProvider(String, MappingSchema) Declaration protected SybaseDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description System.Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.html",
    "title": "Class SybaseMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseMappingSchema Inheritance System.Object MappingSchema SybaseMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class SybaseMappingSchema : MappingSchema Constructors | Improve this Doc View Source SybaseMappingSchema() Declaration public SybaseMappingSchema() | Improve this Doc View Source SybaseMappingSchema(String) Declaration protected SybaseMappingSchema(string configuration) Parameters Type Name Description System.String configuration"
  },
  "api/LinqToDB.Extensions.ReflectionExtensions.html": {
    "href": "api/LinqToDB.Extensions.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class ReflectionExtensions Inheritance System.Object ReflectionExtensions Namespace : LinqToDB.Extensions Assembly : linq2db.dll Syntax public static class ReflectionExtensions Methods | Improve this Doc View Source AssemblyEx(Type) Declaration public static Assembly AssemblyEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Reflection.Assembly | Improve this Doc View Source BaseTypeEx(Type) Declaration public static Type BaseTypeEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Type | Improve this Doc View Source CanConvertTo(Type, Type) Declaration public static bool CanConvertTo(this Type fromType, Type toType) Parameters Type Name Description System.Type fromType System.Type toType Returns Type Description System.Boolean | Improve this Doc View Source EqualsTo(MemberInfo, MemberInfo, Type) Declaration public static bool EqualsTo(this MemberInfo member1, MemberInfo member2, Type declaringType = null) Parameters Type Name Description System.Reflection.MemberInfo member1 System.Reflection.MemberInfo member2 System.Type declaringType Returns Type Description System.Boolean | Improve this Doc View Source GetAttributes<T>(Type) Returns an array of custom attributes applied to a type. Declaration public static T[] GetAttributes<T>(this Type type)where T : Attribute Parameters Type Name Description System.Type type A type instance. Returns Type Description T[] An array of custom attributes applied to this type, or an array with zero (0) elements if no attributes have been applied. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. | Improve this Doc View Source GetConstructorEx(Type, Type[]) Declaration public static ConstructorInfo GetConstructorEx(this Type type, Type[] parameterTypes) Parameters Type Name Description System.Type type System.Type[] parameterTypes Returns Type Description System.Reflection.ConstructorInfo | Improve this Doc View Source GetConstructorsEx(Type) Declaration public static ConstructorInfo[] GetConstructorsEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Reflection.ConstructorInfo[] | Improve this Doc View Source GetCustomAttributesEx(MemberInfo, Boolean) Declaration public static object[] GetCustomAttributesEx(this MemberInfo memberInfo, bool inherit) Parameters Type Name Description System.Reflection.MemberInfo memberInfo System.Boolean inherit Returns Type Description System.Object[] | Improve this Doc View Source GetCustomAttributesEx(MemberInfo, Type, Boolean) Declaration public static object[] GetCustomAttributesEx(this MemberInfo memberInfo, Type attributeType, bool inherit) Parameters Type Name Description System.Reflection.MemberInfo memberInfo System.Type attributeType System.Boolean inherit Returns Type Description System.Object[] | Improve this Doc View Source GetCustomAttributesEx(ParameterInfo, Boolean) Declaration public static object[] GetCustomAttributesEx(this ParameterInfo parameterInfo, bool inherit) Parameters Type Name Description System.Reflection.ParameterInfo parameterInfo System.Boolean inherit Returns Type Description System.Object[] | Improve this Doc View Source GetCustomAttributesEx(Type, Boolean) Declaration public static object[] GetCustomAttributesEx(this Type type, bool inherit) Parameters Type Name Description System.Type type System.Boolean inherit Returns Type Description System.Object[] | Improve this Doc View Source GetCustomAttributesEx(Type, Type, Boolean) Declaration public static object[] GetCustomAttributesEx(this Type type, Type attributeType, bool inherit) Parameters Type Name Description System.Type type System.Type attributeType System.Boolean inherit Returns Type Description System.Object[] | Improve this Doc View Source GetDefaultConstructorEx(Type) Declaration public static ConstructorInfo GetDefaultConstructorEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Reflection.ConstructorInfo | Improve this Doc View Source GetDefaultValue(Type) Declaration public static object GetDefaultValue(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Object | Improve this Doc View Source GetDefiningTypes(Type, MemberInfo) Declaration public static IEnumerable<Type> GetDefiningTypes(this Type child, MemberInfo member) Parameters Type Name Description System.Type child System.Reflection.MemberInfo member Returns Type Description System.Collections.Generic.IEnumerable<System.Type> | Improve this Doc View Source GetEventEx(Type, String) Declaration public static EventInfo GetEventEx(this Type type, string eventName) Parameters Type Name Description System.Type type System.String eventName Returns Type Description System.Reflection.EventInfo | Improve this Doc View Source GetFieldEx(Type, String) Declaration public static FieldInfo GetFieldEx(this Type type, string propertyName) Parameters Type Name Description System.Type type System.String propertyName Returns Type Description System.Reflection.FieldInfo | Improve this Doc View Source GetFieldsEx(Type) Declaration public static FieldInfo[] GetFieldsEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Reflection.FieldInfo[] | Improve this Doc View Source GetFirstAttribute<T>(Type) Retrieves a custom attribute applied to a type. Declaration public static T GetFirstAttribute<T>(this Type type)where T : Attribute Parameters Type Name Description System.Type type A type instance. Returns Type Description T A reference to the first custom attribute of type attributeType that is applied to element, or null if there is no such attribute. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. | Improve this Doc View Source GetGenericArguments(Type, Type) Returns an array of Type objects that represent the type arguments of a generic type or the type parameters of a generic type definition. Declaration public static Type[] GetGenericArguments(this Type type, Type baseType) Parameters Type Name Description System.Type type A System.Type instance. System.Type baseType Non generic base type. Returns Type Description System.Type[] An array of Type objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type. | Improve this Doc View Source GetGenericArgumentsEx(Type) Declaration public static Type[] GetGenericArgumentsEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Type[] | Improve this Doc View Source GetGenericType(Type, Type) Declaration public static Type GetGenericType(this Type genericType, Type type) Parameters Type Name Description System.Type genericType System.Type type Returns Type Description System.Type | Improve this Doc View Source GetGetMethodEx(PropertyInfo) Declaration public static MethodInfo GetGetMethodEx(this PropertyInfo propertyInfo) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo Returns Type Description System.Reflection.MethodInfo | Improve this Doc View Source GetGetMethodEx(PropertyInfo, Boolean) Declaration public static MethodInfo GetGetMethodEx(this PropertyInfo propertyInfo, bool nonPublic) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo System.Boolean nonPublic Returns Type Description System.Reflection.MethodInfo | Improve this Doc View Source GetInstanceMemberEx(Type, String) Declaration public static MemberInfo[] GetInstanceMemberEx(this Type type, string name) Parameters Type Name Description System.Type type System.String name Returns Type Description System.Reflection.MemberInfo[] | Improve this Doc View Source GetInterfaceMapEx(Type, Type) Declaration public static InterfaceMapping GetInterfaceMapEx(this Type type, Type interfaceType) Parameters Type Name Description System.Type type System.Type interfaceType Returns Type Description System.Reflection.InterfaceMapping | Improve this Doc View Source GetInterfacesEx(Type) Declaration public static Type[] GetInterfacesEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Type[] | Improve this Doc View Source GetItemType(Type) Declaration public static Type GetItemType(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Type | Improve this Doc View Source GetListItemType(IEnumerable) Gets the Type of a list item. Declaration public static Type GetListItemType(this IEnumerable list) Parameters Type Name Description System.Collections.IEnumerable list A System.Object instance. Returns Type Description System.Type The Type instance that represents the exact runtime type of a list item. | Improve this Doc View Source GetListItemType(Type) Gets the Type of a list item. Declaration public static Type GetListItemType(this Type listType) Parameters Type Name Description System.Type listType A System.Type instance. Returns Type Description System.Type The Type instance that represents the exact runtime type of a list item. | Improve this Doc View Source GetMemberEx(Type, MemberInfo) Returns System.Reflection.MemberInfo of type described by memberInfo It us useful when member's declared and reflected types are not the same Declaration public static MemberInfo GetMemberEx(this Type type, MemberInfo memberInfo) Parameters Type Name Description System.Type type System.Type to find member info System.Reflection.MemberInfo memberInfo System.Reflection.MemberInfo Returns Type Description System.Reflection.MemberInfo System.Reflection.MemberInfo or null Remarks This method searches only properties, fields and methods | Improve this Doc View Source GetMemberType(MemberInfo) Declaration public static Type GetMemberType(this MemberInfo memberInfo) Parameters Type Name Description System.Reflection.MemberInfo memberInfo Returns Type Description System.Type | Improve this Doc View Source GetMethodEx(Type, String) Declaration public static MethodInfo GetMethodEx(this Type type, string name) Parameters Type Name Description System.Type type System.String name Returns Type Description System.Reflection.MethodInfo | Improve this Doc View Source GetMethodEx(Type, String, Type[]) Declaration public static MethodInfo GetMethodEx(this Type type, string name, params Type[] types) Parameters Type Name Description System.Type type System.String name System.Type[] types Returns Type Description System.Reflection.MethodInfo | Improve this Doc View Source GetMethodsEx(Type) Declaration public static MethodInfo[] GetMethodsEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Reflection.MethodInfo[] | Improve this Doc View Source GetNonPublicPropertiesEx(Type) Declaration public static PropertyInfo[] GetNonPublicPropertiesEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Reflection.PropertyInfo[] | Improve this Doc View Source GetPropertiesEx(Type) Declaration public static PropertyInfo[] GetPropertiesEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Reflection.PropertyInfo[] | Improve this Doc View Source GetPropertiesEx(Type, BindingFlags) Declaration public static PropertyInfo[] GetPropertiesEx(this Type type, BindingFlags flags) Parameters Type Name Description System.Type type System.Reflection.BindingFlags flags Returns Type Description System.Reflection.PropertyInfo[] | Improve this Doc View Source GetPropertyEx(Type, String) Declaration public static PropertyInfo GetPropertyEx(this Type type, string propertyName) Parameters Type Name Description System.Type type System.String propertyName Returns Type Description System.Reflection.PropertyInfo | Improve this Doc View Source GetPropertyInfo(MethodInfo) Declaration public static PropertyInfo GetPropertyInfo(this MethodInfo method) Parameters Type Name Description System.Reflection.MethodInfo method Returns Type Description System.Reflection.PropertyInfo | Improve this Doc View Source GetPublicInstanceMembersEx(Type) Declaration public static MemberInfo[] GetPublicInstanceMembersEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Reflection.MemberInfo[] | Improve this Doc View Source GetPublicMemberEx(Type, String) Declaration public static MemberInfo[] GetPublicMemberEx(this Type type, string name) Parameters Type Name Description System.Type type System.String name Returns Type Description System.Reflection.MemberInfo[] | Improve this Doc View Source GetSetMethodEx(PropertyInfo) Declaration public static MethodInfo GetSetMethodEx(this PropertyInfo propertyInfo) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo Returns Type Description System.Reflection.MethodInfo | Improve this Doc View Source GetSetMethodEx(PropertyInfo, Boolean) Declaration public static MethodInfo GetSetMethodEx(this PropertyInfo propertyInfo, bool nonPublic) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo System.Boolean nonPublic Returns Type Description System.Reflection.MethodInfo | Improve this Doc View Source GetStaticMembersEx(Type, String) Declaration public static MemberInfo[] GetStaticMembersEx(this Type type, string name) Parameters Type Name Description System.Type type System.String name Returns Type Description System.Reflection.MemberInfo[] | Improve this Doc View Source GetTypeCodeEx(Type) Declaration public static TypeCode GetTypeCodeEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.TypeCode | Improve this Doc View Source IsAbstractEx(Type) Declaration public static bool IsAbstractEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source IsAssignableFromEx(Type, Type) Declaration public static bool IsAssignableFromEx(this Type type, Type c) Parameters Type Name Description System.Type type System.Type c Returns Type Description System.Boolean | Improve this Doc View Source IsClassEx(Type) Declaration public static bool IsClassEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source IsEnumEx(Type) Declaration public static bool IsEnumEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source IsFieldEx(MemberInfo) Declaration public static bool IsFieldEx(this MemberInfo memberInfo) Parameters Type Name Description System.Reflection.MemberInfo memberInfo Returns Type Description System.Boolean | Improve this Doc View Source IsFloatType(Type) Declaration public static bool IsFloatType(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source IsGenericTypeDefinitionEx(Type) Declaration public static bool IsGenericTypeDefinitionEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source IsGenericTypeEx(Type) Declaration public static bool IsGenericTypeEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source IsIntegerType(Type) Declaration public static bool IsIntegerType(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source IsInterfaceEx(Type) Declaration public static bool IsInterfaceEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source IsMethodEx(MemberInfo) Declaration public static bool IsMethodEx(this MemberInfo memberInfo) Parameters Type Name Description System.Reflection.MemberInfo memberInfo Returns Type Description System.Boolean | Improve this Doc View Source IsNullable(Type) Gets a value indicating whether a type (or type's element type) instance can be null in the underlying data store. Declaration public static bool IsNullable(this Type type) Parameters Type Name Description System.Type type A System.Type instance. Returns Type Description System.Boolean True, if the type parameter is a closed generic nullable type; otherwise, False. Remarks Arrays of Nullable types are treated as Nullable types. | Improve this Doc View Source IsNullableHasValueMember(MemberInfo) Declaration public static bool IsNullableHasValueMember(this MemberInfo member) Parameters Type Name Description System.Reflection.MemberInfo member Returns Type Description System.Boolean | Improve this Doc View Source IsNullableValueMember(MemberInfo) Declaration public static bool IsNullableValueMember(this MemberInfo member) Parameters Type Name Description System.Reflection.MemberInfo member Returns Type Description System.Boolean | Improve this Doc View Source IsPrimitiveEx(Type) Declaration public static bool IsPrimitiveEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source IsPropertyEx(MemberInfo) Declaration public static bool IsPropertyEx(this MemberInfo memberInfo) Parameters Type Name Description System.Reflection.MemberInfo memberInfo Returns Type Description System.Boolean | Improve this Doc View Source IsPublicEx(Type) Declaration public static bool IsPublicEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source IsSameOrParentOf(Type, Type) Determines whether the specified types are considered equal. Declaration public static bool IsSameOrParentOf(this Type parent, Type child) Parameters Type Name Description System.Type parent A System.Type instance. System.Type child A type possible derived from the parent type Returns Type Description System.Boolean True, when an object instance of the type child can be used as an object of the type parent ; otherwise, false. Remarks Note that nullable types does not have a parent-child relation to it's underlying type. For example, the 'int?' type (nullable int) and the 'int' type aren't a parent and it's child. | Improve this Doc View Source IsScalar(Type, Boolean) Gets a value indicating whether a type can be used as a db primitive. Declaration public static bool IsScalar(this Type type, bool checkArrayElementType = true) Parameters Type Name Description System.Type type A System.Type instance. System.Boolean checkArrayElementType Returns Type Description System.Boolean True, if the type parameter is a primitive type; otherwise, False. Remarks System.String . System.IO.Stream . System.Xml.XmlReader . System.Xml.XmlDocument . are specially handled by the library and, therefore, can be treated as scalar types. | Improve this Doc View Source IsSubclassOfEx(Type, Type) Declaration public static bool IsSubclassOfEx(this Type type, Type c) Parameters Type Name Description System.Type type System.Type c Returns Type Description System.Boolean | Improve this Doc View Source IsValueTypeEx(Type) Declaration public static bool IsValueTypeEx(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source ReflectedTypeEx(MemberInfo) Declaration public static Type ReflectedTypeEx(this MemberInfo memberInfo) Parameters Type Name Description System.Reflection.MemberInfo memberInfo Returns Type Description System.Type | Improve this Doc View Source ToNullableUnderlying(Type) Declaration public static Type ToNullableUnderlying(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Type | Improve this Doc View Source ToUnderlying(Type) Returns the underlying type argument of the specified type. Declaration public static Type ToUnderlying(this Type type) Parameters Type Name Description System.Type type A System.Type instance. Returns Type Description System.Type"
  },
  "api/LinqToDB.Extensions.html": {
    "href": "api/LinqToDB.Extensions.html",
    "title": "Namespace LinqToDB.Extensions | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Extensions Classes ReflectionExtensions"
  },
  "api/LinqToDB.Linq.LinqException.html": {
    "href": "api/LinqToDB.Linq.LinqException.html",
    "title": "Class LinqException | Linq To DB (aka linq2db)",
    "keywords": "Class LinqException Defines the base class for the namespace exceptions. Inheritance System.Object System.Exception LinqException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax [Serializable] public class LinqException : Exception, ISerializable, _Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source LinqException() Initializes a new instance of the LinqException class. Declaration public LinqException() Remarks This constructor initializes the System.Exception.Message property of the new instance to a system-supplied message that describes the error, such as \"LinqToDB Linq error has occurred.\" | Improve this Doc View Source LinqException(Exception) Initializes a new instance of the LinqException class with the InnerException property. Declaration public LinqException(Exception innerException) Parameters Type Name Description System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.InnerException | Improve this Doc View Source LinqException(SerializationInfo, StreamingContext) Initializes a new instance of the LinqException class with serialized data. Declaration protected LinqException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The object that holds the serialized object data. System.Runtime.Serialization.StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source LinqException(String, Exception) Initializes a new instance of the LinqException class with the specified error message and InnerException property. Declaration public LinqException(string message, Exception innerException) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.Message System.Exception.InnerException | Improve this Doc View Source LinqException(String, Object[]) Initializes a new instance of the LinqException class with the specified error message. Declaration public LinqException(string message, params object[] args) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. System.Object[] args An System.Object array containing zero or more objects to format. See Also System.Exception.Message"
  },
  "api/LinqToDB.Linq.ParameterAccessor.html": {
    "href": "api/LinqToDB.Linq.ParameterAccessor.html",
    "title": "Class ParameterAccessor | Linq To DB (aka linq2db)",
    "keywords": "Class ParameterAccessor Inheritance System.Object ParameterAccessor Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public class ParameterAccessor Constructors | Improve this Doc View Source ParameterAccessor(Expression, Func<Expression, Object[], Object>, Func<Expression, Object[], DataType>, SqlParameter) Declaration public ParameterAccessor(Expression expression, Func<Expression, object[], object> accessor, Func<Expression, object[], DataType> dataTypeAccessor, SqlParameter sqlParameter) Parameters Type Name Description System.Linq.Expressions.Expression expression System.Func<System.Linq.Expressions.Expression, System.Object[], System.Object> accessor System.Func<System.Linq.Expressions.Expression, System.Object[], LinqToDB.DataType> dataTypeAccessor SqlParameter sqlParameter Fields | Improve this Doc View Source Accessor Declaration public readonly Func<Expression, object[], object> Accessor Field Value Type Description System.Func<System.Linq.Expressions.Expression, System.Object[], System.Object> | Improve this Doc View Source DataTypeAccessor Declaration public readonly Func<Expression, object[], DataType> DataTypeAccessor Field Value Type Description System.Func<System.Linq.Expressions.Expression, System.Object[], LinqToDB.DataType> | Improve this Doc View Source Expression Declaration public Expression Expression Field Value Type Description System.Linq.Expressions.Expression | Improve this Doc View Source SqlParameter Declaration public readonly SqlParameter SqlParameter Field Value Type Description SqlParameter"
  },
  "api/LinqToDB.Linq.html": {
    "href": "api/LinqToDB.Linq.html",
    "title": "Namespace LinqToDB.Linq | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Linq Classes Expressions Expressions.LazyExpressionInfo LinqException Defines the base class for the namespace exceptions. ParameterAccessor Interfaces IExpressionInfo IExpressionQuery IExpressionQuery<T> IQueryContext ISelectInsertable<TSource, TTarget> IUpdatable<T> IValueInsertable<T>"
  },
  "api/LinqToDB.LinqExtensions.html": {
    "href": "api/LinqToDB.LinqExtensions.html",
    "title": "Class LinqExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class LinqExtensions Inheritance System.Object LinqExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class LinqExtensions Methods | Improve this Doc View Source AsUpdatable<T>(IQueryable<T>) Declaration public static IUpdatable<T> AsUpdatable<T>(this IQueryable<T> source) Parameters Type Name Description System.Linq.IQueryable<T> source Returns Type Description LinqToDB.Linq.IUpdatable<T> Type Parameters Name Description T | Improve this Doc View Source DatabaseName<T>(ITable<T>, String) Declaration public static ITable<T> DatabaseName<T>(this ITable<T> table, string name) Parameters Type Name Description LinqToDB.ITable<T> table System.String name Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source Delete<T>(IQueryable<T>) Declaration public static int Delete<T>(this IQueryable<T> source) Parameters Type Name Description System.Linq.IQueryable<T> source Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Delete<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Declaration public static int Delete<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate) Parameters Type Name Description System.Linq.IQueryable<T> source System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> predicate Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Drop<T>(ITable<T>) Declaration public static int Drop<T>(this ITable<T> target) Parameters Type Name Description LinqToDB.ITable<T> target Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source ElementAt<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Declaration public static TSource ElementAt<TSource>(this IQueryable<TSource> source, Expression<Func<int>> index) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<System.Int32>> index Returns Type Description TSource Type Parameters Name Description TSource | Improve this Doc View Source ElementAtOrDefault<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Declaration public static TSource ElementAtOrDefault<TSource>(this IQueryable<TSource> source, Expression<Func<int>> index) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<System.Int32>> index Returns Type Description TSource Type Parameters Name Description TSource | Improve this Doc View Source Having<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Declaration public static IQueryable<TSource> Having<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate Returns Type Description System.Linq.IQueryable<TSource> Type Parameters Name Description TSource | Improve this Doc View Source Insert<T>(ITable<T>, Expression<Func<T>>) Declaration public static int Insert<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description LinqToDB.ITable<T> target System.Linq.Expressions.Expression<System.Func<T>> setter Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Insert<T>(IValueInsertable<T>) Declaration public static int Insert<T>(this IValueInsertable<T> source) Parameters Type Name Description LinqToDB.Linq.IValueInsertable<T> source Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Insert<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Declaration public static int Insert<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description LinqToDB.Linq.ISelectInsertable<TSource, TTarget> source Returns Type Description System.Int32 Type Parameters Name Description TSource TTarget | Improve this Doc View Source Insert<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Declaration public static int Insert<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description System.Linq.IQueryable<TSource> source LinqToDB.ITable<TTarget> target System.Linq.Expressions.Expression<System.Func<TSource, TTarget>> setter Returns Type Description System.Int32 Type Parameters Name Description TSource TTarget | Improve this Doc View Source InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>) Declaration public static int InsertOrUpdate<T>(this ITable<T> target, Expression<Func<T>> insertSetter, Expression<Func<T, T>> onDuplicateKeyUpdateSetter) Parameters Type Name Description LinqToDB.ITable<T> target System.Linq.Expressions.Expression<System.Func<T>> insertSetter System.Linq.Expressions.Expression<System.Func<T, T>> onDuplicateKeyUpdateSetter Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>, Expression<Func<T>>) Declaration public static int InsertOrUpdate<T>(this ITable<T> target, Expression<Func<T>> insertSetter, Expression<Func<T, T>> onDuplicateKeyUpdateSetter, Expression<Func<T>> keySelector) Parameters Type Name Description LinqToDB.ITable<T> target System.Linq.Expressions.Expression<System.Func<T>> insertSetter System.Linq.Expressions.Expression<System.Func<T, T>> onDuplicateKeyUpdateSetter System.Linq.Expressions.Expression<System.Func<T>> keySelector Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source InsertWithIdentity<T>(ITable<T>, Expression<Func<T>>) Declaration public static object InsertWithIdentity<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description LinqToDB.ITable<T> target System.Linq.Expressions.Expression<System.Func<T>> setter Returns Type Description System.Object Type Parameters Name Description T | Improve this Doc View Source InsertWithIdentity<T>(IValueInsertable<T>) Declaration public static object InsertWithIdentity<T>(this IValueInsertable<T> source) Parameters Type Name Description LinqToDB.Linq.IValueInsertable<T> source Returns Type Description System.Object Type Parameters Name Description T | Improve this Doc View Source InsertWithIdentity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Declaration public static object InsertWithIdentity<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description LinqToDB.Linq.ISelectInsertable<TSource, TTarget> source Returns Type Description System.Object Type Parameters Name Description TSource TTarget | Improve this Doc View Source InsertWithIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Declaration public static object InsertWithIdentity<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description System.Linq.IQueryable<TSource> source LinqToDB.ITable<TTarget> target System.Linq.Expressions.Expression<System.Func<TSource, TTarget>> setter Returns Type Description System.Object Type Parameters Name Description TSource TTarget | Improve this Doc View Source Into<T>(IDataContext, ITable<T>) Declaration public static IValueInsertable<T> Into<T>(this IDataContext dataContext, ITable<T> target) Parameters Type Name Description IDataContext dataContext LinqToDB.ITable<T> target Returns Type Description LinqToDB.Linq.IValueInsertable<T> Type Parameters Name Description T | Improve this Doc View Source Into<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>) Declaration public static ISelectInsertable<TSource, TTarget> Into<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target) Parameters Type Name Description System.Linq.IQueryable<TSource> source LinqToDB.ITable<TTarget> target Returns Type Description LinqToDB.Linq.ISelectInsertable<TSource, TTarget> Type Parameters Name Description TSource TTarget | Improve this Doc View Source LoadWith<T>(ITable<T>, Expression<Func<T, Object>>) Declaration public static ITable<T> LoadWith<T>(this ITable<T> table, Expression<Func<T, object>> selector) Parameters Type Name Description LinqToDB.ITable<T> table System.Linq.Expressions.Expression<System.Func<T, System.Object>> selector Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source OwnerName<T>(ITable<T>, String) Declaration public static ITable<T> OwnerName<T>(this ITable<T> table, string name) Parameters Type Name Description LinqToDB.ITable<T> table System.String name Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source SchemaName<T>(ITable<T>, String) Declaration public static ITable<T> SchemaName<T>(this ITable<T> table, string name) Parameters Type Name Description LinqToDB.ITable<T> table System.String name Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source Select<T>(IDataContext, Expression<Func<T>>) Declaration public static T Select<T>(this IDataContext dataContext, Expression<Func<T>> selector) Parameters Type Name Description IDataContext dataContext System.Linq.Expressions.Expression<System.Func<T>> selector Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, TV) Declaration public static IUpdatable<T> Set<T, TV>(this IUpdatable<T> source, Expression<Func<T, TV>> extract, TV value) Parameters Type Name Description LinqToDB.Linq.IUpdatable<T> source System.Linq.Expressions.Expression<System.Func<T, TV>> extract TV value Returns Type Description LinqToDB.Linq.IUpdatable<T> Type Parameters Name Description T TV | Improve this Doc View Source Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) Declaration public static IUpdatable<T> Set<T, TV>(this IUpdatable<T> source, Expression<Func<T, TV>> extract, Expression<Func<T, TV>> update) Parameters Type Name Description LinqToDB.Linq.IUpdatable<T> source System.Linq.Expressions.Expression<System.Func<T, TV>> extract System.Linq.Expressions.Expression<System.Func<T, TV>> update Returns Type Description LinqToDB.Linq.IUpdatable<T> Type Parameters Name Description T TV | Improve this Doc View Source Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Declaration public static IUpdatable<T> Set<T, TV>(this IUpdatable<T> source, Expression<Func<T, TV>> extract, Expression<Func<TV>> update) Parameters Type Name Description LinqToDB.Linq.IUpdatable<T> source System.Linq.Expressions.Expression<System.Func<T, TV>> extract System.Linq.Expressions.Expression<System.Func<TV>> update Returns Type Description LinqToDB.Linq.IUpdatable<T> Type Parameters Name Description T TV | Improve this Doc View Source Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, TV) Declaration public static IUpdatable<T> Set<T, TV>(this IQueryable<T> source, Expression<Func<T, TV>> extract, TV value) Parameters Type Name Description System.Linq.IQueryable<T> source System.Linq.Expressions.Expression<System.Func<T, TV>> extract TV value Returns Type Description LinqToDB.Linq.IUpdatable<T> Type Parameters Name Description T TV | Improve this Doc View Source Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) Declaration public static IUpdatable<T> Set<T, TV>(this IQueryable<T> source, Expression<Func<T, TV>> extract, Expression<Func<T, TV>> update) Parameters Type Name Description System.Linq.IQueryable<T> source System.Linq.Expressions.Expression<System.Func<T, TV>> extract System.Linq.Expressions.Expression<System.Func<T, TV>> update Returns Type Description LinqToDB.Linq.IUpdatable<T> Type Parameters Name Description T TV | Improve this Doc View Source Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Declaration public static IUpdatable<T> Set<T, TV>(this IQueryable<T> source, Expression<Func<T, TV>> extract, Expression<Func<TV>> update) Parameters Type Name Description System.Linq.IQueryable<T> source System.Linq.Expressions.Expression<System.Func<T, TV>> extract System.Linq.Expressions.Expression<System.Func<TV>> update Returns Type Description LinqToDB.Linq.IUpdatable<T> Type Parameters Name Description T TV | Improve this Doc View Source Skip<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Declaration public static IQueryable<TSource> Skip<TSource>(this IQueryable<TSource> source, Expression<Func<int>> count) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<System.Int32>> count Returns Type Description System.Linq.IQueryable<TSource> Type Parameters Name Description TSource | Improve this Doc View Source TableName<T>(ITable<T>, String) Declaration public static ITable<T> TableName<T>(this ITable<T> table, string name) Parameters Type Name Description LinqToDB.ITable<T> table System.String name Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source Take<TSource>(IQueryable<TSource>, Int32, TakeHints) System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32) Using this method may cause runtime LinqException if take hints are not supported by database Declaration public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, int count, TakeHints hints) Parameters Type Name Description System.Linq.IQueryable<TSource> source source System.Int32 count number of records to take TakeHints hints TakeHints hints for SQL Take expression Returns Type Description System.Linq.IQueryable<TSource> Type Parameters Name Description TSource Remarks Hints are not supported with System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32) | Improve this Doc View Source Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Declaration public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, Expression<Func<int>> count) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<System.Int32>> count Returns Type Description System.Linq.IQueryable<TSource> Type Parameters Name Description TSource | Improve this Doc View Source Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, TakeHints) System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32) Using this method may cause runtime LinqException if take hints are not supported by database Declaration public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, Expression<Func<int>> count, TakeHints hints) Parameters Type Name Description System.Linq.IQueryable<TSource> source source System.Linq.Expressions.Expression<System.Func<System.Int32>> count number of records to take TakeHints hints TakeHints hints for SQL Take expression Returns Type Description System.Linq.IQueryable<TSource> Type Parameters Name Description TSource Remarks Hints are not supported with System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32) | Improve this Doc View Source ThenOrBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) Declaration public static IOrderedQueryable<TSource> ThenOrBy<TSource, TKey>(this IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector Returns Type Description System.Linq.IOrderedQueryable<TSource> Type Parameters Name Description TSource TKey | Improve this Doc View Source ThenOrByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) Declaration public static IOrderedQueryable<TSource> ThenOrByDescending<TSource, TKey>(this IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector Returns Type Description System.Linq.IOrderedQueryable<TSource> Type Parameters Name Description TSource TKey | Improve this Doc View Source Update<T>(IUpdatable<T>) Declaration public static int Update<T>(this IUpdatable<T> source) Parameters Type Name Description LinqToDB.Linq.IUpdatable<T> source Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Update<T>(IQueryable<T>, Expression<Func<T, T>>) Declaration public static int Update<T>(this IQueryable<T> source, Expression<Func<T, T>> setter) Parameters Type Name Description System.Linq.IQueryable<T> source System.Linq.Expressions.Expression<System.Func<T, T>> setter Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Update<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>) Declaration public static int Update<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, Expression<Func<T, T>> setter) Parameters Type Name Description System.Linq.IQueryable<T> source System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> predicate System.Linq.Expressions.Expression<System.Func<T, T>> setter Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Update<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Declaration public static int Update<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description System.Linq.IQueryable<TSource> source LinqToDB.ITable<TTarget> target System.Linq.Expressions.Expression<System.Func<TSource, TTarget>> setter Returns Type Description System.Int32 Type Parameters Name Description TSource TTarget | Improve this Doc View Source Update<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>) Declaration public static int Update<TSource, TTarget>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, TTarget>> target System.Linq.Expressions.Expression<System.Func<TSource, TTarget>> setter Returns Type Description System.Int32 Type Parameters Name Description TSource TTarget | Improve this Doc View Source Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, TV) Declaration public static IValueInsertable<T> Value<T, TV>(this ITable<T> source, Expression<Func<T, TV>> field, TV value) Parameters Type Name Description LinqToDB.ITable<T> source System.Linq.Expressions.Expression<System.Func<T, TV>> field TV value Returns Type Description LinqToDB.Linq.IValueInsertable<T> Type Parameters Name Description T TV | Improve this Doc View Source Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Declaration public static IValueInsertable<T> Value<T, TV>(this ITable<T> source, Expression<Func<T, TV>> field, Expression<Func<TV>> value) Parameters Type Name Description LinqToDB.ITable<T> source System.Linq.Expressions.Expression<System.Func<T, TV>> field System.Linq.Expressions.Expression<System.Func<TV>> value Returns Type Description LinqToDB.Linq.IValueInsertable<T> Type Parameters Name Description T TV | Improve this Doc View Source Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, TV) Declaration public static IValueInsertable<T> Value<T, TV>(this IValueInsertable<T> source, Expression<Func<T, TV>> field, TV value) Parameters Type Name Description LinqToDB.Linq.IValueInsertable<T> source System.Linq.Expressions.Expression<System.Func<T, TV>> field TV value Returns Type Description LinqToDB.Linq.IValueInsertable<T> Type Parameters Name Description T TV | Improve this Doc View Source Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Declaration public static IValueInsertable<T> Value<T, TV>(this IValueInsertable<T> source, Expression<Func<T, TV>> field, Expression<Func<TV>> value) Parameters Type Name Description LinqToDB.Linq.IValueInsertable<T> source System.Linq.Expressions.Expression<System.Func<T, TV>> field System.Linq.Expressions.Expression<System.Func<TV>> value Returns Type Description LinqToDB.Linq.IValueInsertable<T> Type Parameters Name Description T TV | Improve this Doc View Source Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, TValue) Declaration public static ISelectInsertable<TSource, TTarget> Value<TSource, TTarget, TValue>(this ISelectInsertable<TSource, TTarget> source, Expression<Func<TTarget, TValue>> field, TValue value) Parameters Type Name Description LinqToDB.Linq.ISelectInsertable<TSource, TTarget> source System.Linq.Expressions.Expression<System.Func<TTarget, TValue>> field TValue value Returns Type Description LinqToDB.Linq.ISelectInsertable<TSource, TTarget> Type Parameters Name Description TSource TTarget TValue | Improve this Doc View Source Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TSource, TValue>>) Declaration public static ISelectInsertable<TSource, TTarget> Value<TSource, TTarget, TValue>(this ISelectInsertable<TSource, TTarget> source, Expression<Func<TTarget, TValue>> field, Expression<Func<TSource, TValue>> value) Parameters Type Name Description LinqToDB.Linq.ISelectInsertable<TSource, TTarget> source System.Linq.Expressions.Expression<System.Func<TTarget, TValue>> field System.Linq.Expressions.Expression<System.Func<TSource, TValue>> value Returns Type Description LinqToDB.Linq.ISelectInsertable<TSource, TTarget> Type Parameters Name Description TSource TTarget TValue | Improve this Doc View Source Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TValue>>) Declaration public static ISelectInsertable<TSource, TTarget> Value<TSource, TTarget, TValue>(this ISelectInsertable<TSource, TTarget> source, Expression<Func<TTarget, TValue>> field, Expression<Func<TValue>> value) Parameters Type Name Description LinqToDB.Linq.ISelectInsertable<TSource, TTarget> source System.Linq.Expressions.Expression<System.Func<TTarget, TValue>> field System.Linq.Expressions.Expression<System.Func<TValue>> value Returns Type Description LinqToDB.Linq.ISelectInsertable<TSource, TTarget> Type Parameters Name Description TSource TTarget TValue | Improve this Doc View Source With<T>(ITable<T>, String) Declaration public static ITable<T> With<T>(this ITable<T> table, string args) Parameters Type Name Description LinqToDB.ITable<T> table System.String args Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source WithTableExpression<T>(ITable<T>, String) Declaration public static ITable<T> WithTableExpression<T>(this ITable<T> table, string expression) Parameters Type Name Description LinqToDB.ITable<T> table System.String expression Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T"
  },
  "api/LinqToDB.Metadata.AttributeReader.html": {
    "href": "api/LinqToDB.Metadata.AttributeReader.html",
    "title": "Class AttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class AttributeReader Inheritance System.Object AttributeReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class AttributeReader : IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, Boolean) | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, MemberInfo, Boolean)"
  },
  "api/LinqToDB.Metadata.FluentMetadataReader.html": {
    "href": "api/LinqToDB.Metadata.FluentMetadataReader.html",
    "title": "Class FluentMetadataReader | Linq To DB (aka linq2db)",
    "keywords": "Class FluentMetadataReader Inheritance System.Object FluentMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class FluentMetadataReader : IMetadataReader Methods | Improve this Doc View Source AddAttribute(MemberInfo, Attribute) Declaration public void AddAttribute(MemberInfo memberInfo, Attribute attribute) Parameters Type Name Description System.Reflection.MemberInfo memberInfo System.Attribute attribute | Improve this Doc View Source AddAttribute(Type, Attribute) Declaration public void AddAttribute(Type type, Attribute attribute) Parameters Type Name Description System.Type type System.Attribute attribute | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, Boolean) | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T Implements IMetadataReader.GetAttributes<T>(Type, MemberInfo, Boolean)"
  },
  "api/LinqToDB.Metadata.IMetadataReader.html": {
    "href": "api/LinqToDB.Metadata.IMetadataReader.html",
    "title": "Interface IMetadataReader | Linq To DB (aka linq2db)",
    "keywords": "Interface IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public interface IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration T[] GetAttributes<T>(Type type, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T"
  },
  "api/LinqToDB.Metadata.MetadataException.html": {
    "href": "api/LinqToDB.Metadata.MetadataException.html",
    "title": "Class MetadataException | Linq To DB (aka linq2db)",
    "keywords": "Class MetadataException Defines the base class for the namespace exceptions. Inheritance System.Object System.Exception MetadataException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax [Serializable] public class MetadataException : Exception, ISerializable, _Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source MetadataException() Initializes a new instance of the MetadataException class. Declaration public MetadataException() Remarks This constructor initializes the System.Exception.Message property of the new instance such as \"A Build Type exception has occurred.\" | Improve this Doc View Source MetadataException(Exception) Initializes a new instance of the MetadataException class with the specified InnerException property. Declaration public MetadataException(Exception innerException) Parameters Type Name Description System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.InnerException | Improve this Doc View Source MetadataException(SerializationInfo, StreamingContext) Initializes a new instance of the MetadataException class with serialized data. Declaration protected MetadataException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The object that holds the serialized object data. System.Runtime.Serialization.StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source MetadataException(String) Initializes a new instance of the MetadataException class with the specified error message. Declaration public MetadataException(string message) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. See Also System.Exception.Message | Improve this Doc View Source MetadataException(String, Exception) Initializes a new instance of the MetadataException class with the specified error message and InnerException property. Declaration public MetadataException(string message, Exception innerException) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.Message System.Exception.InnerException"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Condition.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Condition.html",
    "title": "Class SelectQuery.Condition | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Condition Inheritance System.Object SelectQuery.Condition Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Condition : IQueryElement, ICloneableElement Constructors | Improve this Doc View Source Condition(Boolean, ISqlPredicate) Declaration public Condition(bool isNot, ISqlPredicate predicate) Parameters Type Name Description System.Boolean isNot ISqlPredicate predicate | Improve this Doc View Source Condition(Boolean, ISqlPredicate, Boolean) Declaration public Condition(bool isNot, ISqlPredicate predicate, bool isOr) Parameters Type Name Description System.Boolean isNot ISqlPredicate predicate System.Boolean isOr Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source IsNot Declaration public bool IsNot { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOr Declaration public bool IsOr { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Predicate Declaration public ISqlPredicate Predicate { get; set; } Property Value Type Description ISqlPredicate Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.ConditionBase-2.Expr_.Op_.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.ConditionBase-2.Expr_.Op_.html",
    "title": "Class SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ Inheritance System.Object SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Op_ : SelectQuery.IConditionExpr<T2> Methods | Improve this Doc View Source All(SelectQuery) Declaration public T2 All(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Any(SelectQuery) Declaration public T2 Any(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Expr(ISqlExpression) Declaration public T2 Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description T2 | Improve this Doc View Source Field(SqlField) Declaration public T2 Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description T2 | Improve this Doc View Source Some(SelectQuery) Declaration public T2 Some(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source SubQuery(SelectQuery) Declaration public T2 SubQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description T2 | Improve this Doc View Source Value(Object) Declaration public T2 Value(object value) Parameters Type Name Description System.Object value Returns Type Description T2"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.ConditionBase-2.Expr_.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.ConditionBase-2.Expr_.html",
    "title": "Class SelectQuery.ConditionBase<T1, T2>.Expr_ | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.ConditionBase<T1, T2>.Expr_ Inheritance System.Object SelectQuery.ConditionBase<T1, T2>.Expr_ Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Expr_ Properties | Improve this Doc View Source Equal Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ Equal { get; } Property Value Type Description SelectQuery.ConditionBase.Expr_.Op_<> | Improve this Doc View Source Greater Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ Greater { get; } Property Value Type Description SelectQuery.ConditionBase.Expr_.Op_<> | Improve this Doc View Source GreaterOrEqual Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ GreaterOrEqual { get; } Property Value Type Description SelectQuery.ConditionBase.Expr_.Op_<> | Improve this Doc View Source IsNotNull Declaration public T2 IsNotNull { get; } Property Value Type Description T2 | Improve this Doc View Source IsNull Declaration public T2 IsNull { get; } Property Value Type Description T2 | Improve this Doc View Source Less Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ Less { get; } Property Value Type Description SelectQuery.ConditionBase.Expr_.Op_<> | Improve this Doc View Source LessOrEqual Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ LessOrEqual { get; } Property Value Type Description SelectQuery.ConditionBase.Expr_.Op_<> | Improve this Doc View Source NotEqual Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ NotEqual { get; } Property Value Type Description SelectQuery.ConditionBase.Expr_.Op_<> | Improve this Doc View Source NotGreater Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ NotGreater { get; } Property Value Type Description SelectQuery.ConditionBase.Expr_.Op_<> | Improve this Doc View Source NotLess Declaration public SelectQuery.ConditionBase<T1, T2>.Expr_.Op_ NotLess { get; } Property Value Type Description SelectQuery.ConditionBase.Expr_.Op_<> Methods | Improve this Doc View Source Between(ISqlExpression, ISqlExpression) Declaration public T2 Between(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description T2 | Improve this Doc View Source In(SelectQuery) Declaration public T2 In(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source In(Object[]) Declaration public T2 In(params object[] exprs) Parameters Type Name Description System.Object[] exprs Returns Type Description T2 | Improve this Doc View Source Like(ISqlExpression) Declaration public T2 Like(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description T2 | Improve this Doc View Source Like(ISqlExpression, SqlValue) Declaration public T2 Like(ISqlExpression expression, SqlValue escape) Parameters Type Name Description ISqlExpression expression SqlValue escape Returns Type Description T2 | Improve this Doc View Source Like(String) Declaration public T2 Like(string expression) Parameters Type Name Description System.String expression Returns Type Description T2 | Improve this Doc View Source Like(String, SqlValue) Declaration public T2 Like(string expression, SqlValue escape) Parameters Type Name Description System.String expression SqlValue escape Returns Type Description T2 | Improve this Doc View Source NotBetween(ISqlExpression, ISqlExpression) Declaration public T2 NotBetween(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description T2 | Improve this Doc View Source NotIn(SelectQuery) Declaration public T2 NotIn(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source NotIn(Object[]) Declaration public T2 NotIn(params object[] exprs) Parameters Type Name Description System.Object[] exprs Returns Type Description T2"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.TableSource.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.TableSource.html",
    "title": "Class SelectQuery.TableSource | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.TableSource Inheritance System.Object SelectQuery.TableSource Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class TableSource : ISqlTableSource, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source TableSource(ISqlTableSource, String) Declaration public TableSource(ISqlTableSource source, string alias) Parameters Type Name Description ISqlTableSource source System.String alias | Improve this Doc View Source TableSource(ISqlTableSource, String, SelectQuery.JoinedTable[]) Declaration public TableSource(ISqlTableSource source, string alias, params SelectQuery.JoinedTable[] joins) Parameters Type Name Description ISqlTableSource source System.String alias LinqToDB.SqlQuery.SelectQuery.JoinedTable[] joins | Improve this Doc View Source TableSource(ISqlTableSource, String, IEnumerable<SelectQuery.JoinedTable>) Declaration public TableSource(ISqlTableSource source, string alias, IEnumerable<SelectQuery.JoinedTable> joins) Parameters Type Name Description ISqlTableSource source System.String alias System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SelectQuery.JoinedTable> joins Properties | Improve this Doc View Source Alias Declaration public string Alias { get; set; } Property Value Type Description System.String | Improve this Doc View Source All Declaration public SqlField All { get; } Property Value Type Description SqlField Implements ISqlTableSource.All | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean Implements ISqlExpression.CanBeNull | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Item[ISqlTableSource] Declaration public SelectQuery.TableSource this[ISqlTableSource table] { get; } Parameters Type Name Description ISqlTableSource table Property Value Type Description SelectQuery.TableSource | Improve this Doc View Source Item[ISqlTableSource, String] Declaration public SelectQuery.TableSource this[ISqlTableSource table, string alias] { get; } Parameters Type Name Description ISqlTableSource table System.String alias Property Value Type Description SelectQuery.TableSource | Improve this Doc View Source Joins Declaration public List<SelectQuery.JoinedTable> Joins { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.SelectQuery.JoinedTable> | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlExpression.Precedence | Improve this Doc View Source Source Declaration public ISqlTableSource Source { get; set; } Property Value Type Description ISqlTableSource | Improve this Doc View Source SourceID Declaration public int SourceID { get; } Property Value Type Description System.Int32 Implements ISqlTableSource.SourceID | Improve this Doc View Source SqlTableType Declaration public SqlTableType SqlTableType { get; } Property Value Type Description SqlTableType Implements ISqlTableSource.SqlTableType | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description System.Type Implements ISqlExpression.SystemType Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) | Improve this Doc View Source ForEach(Action<SelectQuery.TableSource>, HashSet<SelectQuery>) Declaration public void ForEach(Action<SelectQuery.TableSource> action, HashSet<SelectQuery> visitedQueries) Parameters Type Name Description System.Action<LinqToDB.SqlQuery.SelectQuery.TableSource> action System.Collections.Generic.HashSet<LinqToDB.SqlQuery.SelectQuery> visitedQueries | Improve this Doc View Source GetJoinNumber() Declaration public int GetJoinNumber() Returns Type Description System.Int32 | Improve this Doc View Source GetTables() Declaration public IEnumerable<ISqlTableSource> GetTables() Returns Type Description System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlTableSource> | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlTableSource.GetKeys(Boolean) Declaration IList<ISqlExpression> ISqlTableSource.GetKeys(bool allIfEmpty) Parameters Type Name Description System.Boolean allIfEmpty Returns Type Description System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression> Implements ISqlTableSource.GetKeys(Boolean) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) Extension Methods Extensions.InnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.Join(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.Join(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[])"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Union.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Union.html",
    "title": "Class SelectQuery.Union | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Union Inheritance System.Object SelectQuery.Union Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Union : IQueryElement Constructors | Improve this Doc View Source Union() Declaration public Union() | Improve this Doc View Source Union(SelectQuery, Boolean) Declaration public Union(SelectQuery selectQuery, bool isAll) Parameters Type Name Description SelectQuery selectQuery System.Boolean isAll Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source IsAll Declaration public bool IsAll { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SelectQuery Declaration public SelectQuery SelectQuery { get; } Property Value Type Description SelectQuery Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.UpdateClause.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.UpdateClause.html",
    "title": "Class SelectQuery.UpdateClause | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.UpdateClause Inheritance System.Object SelectQuery.UpdateClause Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class UpdateClause : IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source UpdateClause() Declaration public UpdateClause() Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Items Declaration public List<SelectQuery.SetExpression> Items { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.SelectQuery.SetExpression> | Improve this Doc View Source Keys Declaration public List<SelectQuery.SetExpression> Keys { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.SelectQuery.SetExpression> | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.WhereClause.Next.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.WhereClause.Next.html",
    "title": "Class SelectQuery.WhereClause.Next | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.WhereClause.Next Inheritance System.Object SelectQuery.ClauseBase SelectQuery.WhereClause.Next Inherited Members SelectQuery.ClauseBase.Select SelectQuery.ClauseBase.From SelectQuery.ClauseBase.Where SelectQuery.ClauseBase.GroupBy SelectQuery.ClauseBase.Having SelectQuery.ClauseBase.OrderBy SelectQuery.ClauseBase.End() SelectQuery.ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Next : SelectQuery.ClauseBase Properties | Improve this Doc View Source And Declaration public SelectQuery.WhereClause And { get; } Property Value Type Description SelectQuery.WhereClause | Improve this Doc View Source Or Declaration public SelectQuery.WhereClause Or { get; } Property Value Type Description SelectQuery.WhereClause"
  },
  "api/LinqToDB.AnalyticFunctions.IAndExpected-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IAndExpected-1.html",
    "title": "Interface AnalyticFunctions.IAndExpected<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IAndExpected<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IAndExpected<out TR> Type Parameters Name Description TR Properties | Improve this Doc View Source And Declaration [Sql.Extension(\"\")] AnalyticFunctions.ISecondBoundaryExpected<TR> And { get; } Property Value Type Description LinqToDB.AnalyticFunctions.ISecondBoundaryExpected<TR>"
  },
  "api/LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly-1.html",
    "title": "Interface AnalyticFunctions.INeedsWithinGroupWithOrderOnly<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.INeedsWithinGroupWithOrderOnly<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface INeedsWithinGroupWithOrderOnly<out TR> Type Parameters Name Description TR Properties | Improve this Doc View Source WithinGroup Declaration [Sql.Extension(\"WITHIN GROUP ({order_by_clause})\", TokenName = \"within_group\")] AnalyticFunctions.INeedsOrderByOnly<TR> WithinGroup { get; } Property Value Type Description LinqToDB.AnalyticFunctions.INeedsOrderByOnly<TR>"
  },
  "api/LinqToDB.AnalyticFunctions.IOverWithPartitionNeeded-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IOverWithPartitionNeeded-1.html",
    "title": "Interface AnalyticFunctions.IOverWithPartitionNeeded<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IOverWithPartitionNeeded<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IOverWithPartitionNeeded<out TR> Type Parameters Name Description TR Methods | Improve this Doc View Source Over() Declaration [Sql.Extension(\"OVER({query_partition_clause?})\", TokenName = \"over\")] AnalyticFunctions.IOverMayHavePartition<TR> Over() Returns Type Description LinqToDB.AnalyticFunctions.IOverMayHavePartition<TR>"
  },
  "api/LinqToDB.AnalyticFunctions.html": {
    "href": "api/LinqToDB.AnalyticFunctions.html",
    "title": "Class AnalyticFunctions | Linq To DB (aka linq2db)",
    "keywords": "Class AnalyticFunctions Inheritance System.Object AnalyticFunctions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class AnalyticFunctions Methods | Improve this Doc View Source Average<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"AVG({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Average<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source Average<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier) Declaration [Sql.Extension(\"AVG({modifier?}{_}{expr})\", BuilderType = typeof (AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Average<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source Corr<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"CORR({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Corr<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr1 System.Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source Count(Sql.ISqlExtension) Declaration [Sql.Extension(\"COUNT(*)\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<long> Count(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<System.Int64> | Improve this Doc View Source Count(Sql.ISqlExtension, Object, Sql.AggregateModifier) Declaration [Sql.Extension(\"COUNT({modifier?}{_}{expr})\", BuilderType = typeof (AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<long> Count(this Sql.ISqlExtension ext, [ExprParameter] object expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<System.Int64> | Improve this Doc View Source Count<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"COUNT({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Count<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source CovarPop<T>(Sql.ISqlExtension, T, T) Declaration [Sql.Extension(\"COVAR_POP({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> CovarPop<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr1, [ExprParameter] T expr2) Parameters Type Name Description Sql.ISqlExtension ext T expr1 T expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source CovarSamp<T>(Sql.ISqlExtension, T, T) Declaration [Sql.Extension(\"COVAR_SAMP({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> CovarSamp<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr1, [ExprParameter] T expr2) Parameters Type Name Description Sql.ISqlExtension ext T expr1 T expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source CumeDist<TR>(Sql.ISqlExtension) Declaration [Sql.Extension(\"CUME_DIST()\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<TR> CumeDist<TR>(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<TR> Type Parameters Name Description TR | Improve this Doc View Source CumeDist<TR>(Sql.ISqlExtension, Object[]) Declaration [Sql.Extension(\"CUME_DIST({expr, ', '}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<TR> CumeDist<TR>(this Sql.ISqlExtension ext, [ExprParameter] params object[] expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object[] expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly<TR> Type Parameters Name Description TR | Improve this Doc View Source DenseRank(Sql.ISqlExtension) Declaration [Sql.Extension(\"DENSE_RANK()\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<long> DenseRank(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<System.Int64> | Improve this Doc View Source DenseRank(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"DENSE_RANK({expr1}, {expr2}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<long> DenseRank(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr1 System.Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly<System.Int64> | Improve this Doc View Source FirstValue<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration [Sql.Extension(\"FIRST_VALUE({expr}{_}{modifier?})\", TokenName = \"function\", BuilderType = typeof (AnalyticFunctions.ApplyNullsModifier), ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> FirstValue<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source KeepFirst<TR>(AnalyticFunctions.IAggregateFunction<TR>) Declaration [Sql.Extension(\"{function} KEEP (DENSE_RANK FIRST {order_by_clause}){_}{over?}\", ChainPrecedence = 10, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> KeepFirst<TR>(this AnalyticFunctions.IAggregateFunction<TR> ext) Parameters Type Name Description LinqToDB.AnalyticFunctions.IAggregateFunction<TR> ext Returns Type Description LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> Type Parameters Name Description TR | Improve this Doc View Source KeepLast<TR>(AnalyticFunctions.IAggregateFunction<TR>) Declaration [Sql.Extension(\"{function} KEEP (DENSE_RANK LAST {order_by_clause}){_}{over?}\", ChainPrecedence = 10, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> KeepLast<TR>(this AnalyticFunctions.IAggregateFunction<TR> ext) Parameters Type Name Description LinqToDB.AnalyticFunctions.IAggregateFunction<TR> ext Returns Type Description LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> Type Parameters Name Description TR | Improve this Doc View Source Lag<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration [Sql.Extension(\"LAG({expr}{_}{modifier?})\", TokenName = \"function\", BuilderType = typeof (AnalyticFunctions.ApplyNullsModifier), ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lag<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Type Parameters Name Description T | Improve this Doc View Source Lag<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) Declaration [Sql.Extension(\"LAG({expr}{_}{modifier?}, {offset}, {default})\", TokenName = \"function\", BuilderType = typeof (AnalyticFunctions.ApplyNullsModifier), ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lag<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls, [ExprParameter] int offset, [ExprParameter] int ? default) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls System.Int32 offset System.Nullable<System.Int32> default Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Type Parameters Name Description T | Improve this Doc View Source LastValue<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration [Sql.Extension(\"LAST_VALUE({expr}{_}{modifier?})\", TokenName = \"function\", BuilderType = typeof (AnalyticFunctions.ApplyNullsModifier), ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> LastValue<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source Lead<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration [Sql.Extension(\"LEAD({expr}{_}{modifier?})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lead<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Type Parameters Name Description T | Improve this Doc View Source Lead<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) Declaration [Sql.Extension(\"LEAD({expr}{_}{modifier?}, {offset}, {default})\", TokenName = \"function\", BuilderType = typeof (AnalyticFunctions.ApplyNullsModifier), ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lead<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.Nulls nulls, [ExprParameter] int offset, [ExprParameter] int ? default) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls System.Int32 offset System.Nullable<System.Int32> default Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Type Parameters Name Description T | Improve this Doc View Source ListAgg<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"LISTAGG({expr}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<string> ListAgg<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<System.String> Type Parameters Name Description T | Improve this Doc View Source ListAgg<T>(Sql.ISqlExtension, T, String) Declaration [Sql.Extension(\"LISTAGG({expr}, {delimiter}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<string> ListAgg<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, [ExprParameter] string delimiter) Parameters Type Name Description Sql.ISqlExtension ext T expr System.String delimiter Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<System.String> Type Parameters Name Description T | Improve this Doc View Source Max<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"MAX({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Max<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source Max<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) Declaration [Sql.Extension(\"MAX({modifier?}{_}{expr})\", BuilderType = typeof (AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Max<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source Median<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"MEDIAN({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IReadyToFunctionOrOverWithPartition<T> Median<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition<T> Type Parameters Name Description T | Improve this Doc View Source Min<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"MIN({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Min<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source Min<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) Declaration [Sql.Extension(\"MIN({modifier?}{_}{expr})\", BuilderType = typeof (AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Min<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source NthValue<T>(Sql.ISqlExtension, T, Int64) Declaration [Sql.Extension(\"NTH_VALUE({expr}, {n})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> NthValue<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, [ExprParameter] long n) Parameters Type Name Description Sql.ISqlExtension ext T expr System.Int64 n Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source NthValue<T>(Sql.ISqlExtension, T, Int64, Sql.From, Sql.Nulls) Declaration [Sql.Extension(\"NTH_VALUE({expr}, {n}){_}{from?}{_}{nulls?}\", TokenName = \"function\", BuilderType = typeof (AnalyticFunctions.ApplyFromAndNullsModifier), ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> NthValue<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, [ExprParameter] long n, Sql.From from, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr System.Int64 n Sql.From from Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source NTile<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"NTILE({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> NTile<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Type Parameters Name Description T | Improve this Doc View Source PercentileCont<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"PERCENTILE_CONT({expr}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<T> PercentileCont<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<T> Type Parameters Name Description T | Improve this Doc View Source PercentileDisc<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"PERCENTILE_DISC({expr}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<T> PercentileDisc<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<T> Type Parameters Name Description T | Improve this Doc View Source PercentRank<T>(Sql.ISqlExtension) Declaration [Sql.Extension(\"PERCENT_RANK()\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> PercentRank<T>(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Type Parameters Name Description T | Improve this Doc View Source PercentRank<T>(Sql.ISqlExtension, Object[]) Declaration [Sql.Extension(\"PERCENT_RANK({expr, ', '}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<T> PercentRank<T>(this Sql.ISqlExtension ext, [ExprParameter] params object[] expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object[] expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly<T> Type Parameters Name Description T | Improve this Doc View Source Rank(Sql.ISqlExtension) Declaration [Sql.Extension(\"RANK()\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<long> Rank(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<System.Int64> | Improve this Doc View Source Rank(Sql.ISqlExtension, Object[]) Declaration [Sql.Extension(\"RANK({expr, ', '}) {within_group}\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<long> Rank(this Sql.ISqlExtension ext, [ExprParameter] params object[] expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object[] expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly<System.Int64> | Improve this Doc View Source RatioToReport<TR>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"RATIO_TO_REPORT({expr}) {over}\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IOverWithPartitionNeeded<TR> RatioToReport<TR>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Returns Type Description LinqToDB.AnalyticFunctions.IOverWithPartitionNeeded<TR> Type Parameters Name Description TR | Improve this Doc View Source RegrAvgX<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_AVGX({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrAvgX<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr1 System.Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source RegrAvgY<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_AVGY({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrAvgY<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr1 System.Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source RegrCount(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_COUNT({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<long> RegrCount(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr1 System.Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<System.Int64> | Improve this Doc View Source RegrIntercept<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_INTERCEPT({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrIntercept<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr1 System.Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source RegrR2<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_R2({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrR2<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr1 System.Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source RegrSlope<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_SLOPE({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSlope<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr1 System.Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source RegrSXX<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_SXX({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSXX<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr1 System.Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source RegrSXY<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_SXY({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSXY<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr1 System.Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source RegrSYY<T>(Sql.ISqlExtension, Object, Object) Declaration [Sql.Extension(\"REGR_SYY({expr1}, {expr2})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSYY<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr1, [ExprParameter] object expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr1 System.Object expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source RowNumber(Sql.ISqlExtension) Declaration [Sql.Extension(\"ROW_NUMBER()\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<long> RowNumber(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<System.Int64> | Improve this Doc View Source StdDev<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"STDDEV({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDev<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source StdDev<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier) Declaration [Sql.Extension(\"STDDEV({modifier?}{_}{expr})\", TokenName = \"function\", BuilderType = typeof (AnalyticFunctions.ApplyAggregateModifier), ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDev<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source StdDevPop<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"STDDEV_POP({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDevPop<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source StdDevSamp<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"STDDEV_SAMP({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDevSamp<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source Sum<T>(Sql.ISqlExtension, T) Declaration [Sql.Extension(\"SUM({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Sum<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source Sum<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) Declaration [Sql.Extension(\"SUM({modifier?}{_}{expr})\", BuilderType = typeof (AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Sum<T>(this Sql.ISqlExtension ext, [ExprParameter] T expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source Variance<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"VARIANCE({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Variance<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source Variance<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier) Declaration [Sql.Extension(\"VARIANCE({modifier?}{_}{expr})\", BuilderType = typeof (AnalyticFunctions.ApplyAggregateModifier), TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Variance<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source VarPop<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"VAR_POP({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> VarPop<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T | Improve this Doc View Source VarSamp<T>(Sql.ISqlExtension, Object) Declaration [Sql.Extension(\"VAR_SAMP({expr})\", TokenName = \"function\", ChainPrecedence = 1, SqlFlags = SqlFlags.Aggregate)] public static AnalyticFunctions.IAggregateFunctionSelfContained<T> VarSamp<T>(this Sql.ISqlExtension ext, [ExprParameter] object expr) Parameters Type Name Description Sql.ISqlExtension ext System.Object expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T> Type Parameters Name Description T"
  },
  "api/LinqToDB.Common.Converter.html": {
    "href": "api/LinqToDB.Common.Converter.html",
    "title": "Class Converter | Linq To DB (aka linq2db)",
    "keywords": "Class Converter Inheritance System.Object Converter Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Converter Methods | Improve this Doc View Source ChangeType(Object, Type, MappingSchema) Declaration public static object ChangeType(object value, Type conversionType, MappingSchema mappingSchema = null) Parameters Type Name Description System.Object value System.Type conversionType MappingSchema mappingSchema Returns Type Description System.Object | Improve this Doc View Source ChangeTypeTo<T>(Object, MappingSchema) Declaration public static T ChangeTypeTo<T>(object value, MappingSchema mappingSchema = null) Parameters Type Name Description System.Object value MappingSchema mappingSchema Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetDefaultMappingFromEnumType(MappingSchema, Type) Declaration public static Type GetDefaultMappingFromEnumType(MappingSchema mappingSchema, Type enumType) Parameters Type Name Description MappingSchema mappingSchema System.Type enumType Returns Type Description System.Type | Improve this Doc View Source SetConverter<TFrom, TTo>(Expression<Func<TFrom, TTo>>) Declaration public static void SetConverter<TFrom, TTo>(Expression<Func<TFrom, TTo>> expr) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TFrom, TTo>> expr Type Parameters Name Description TFrom TTo"
  },
  "api/LinqToDB.Configuration.DataProviderElement.html": {
    "href": "api/LinqToDB.Configuration.DataProviderElement.html",
    "title": "Class DataProviderElement | Linq To DB (aka linq2db)",
    "keywords": "Class DataProviderElement Inheritance System.Object System.Configuration.ConfigurationElement ElementBase DataProviderElement Inherited Members ElementBase.Properties ElementBase.OnDeserializeUnrecognizedAttribute(String, String) ElementBase.Attributes System.Configuration.ConfigurationElement.Init() System.Configuration.ConfigurationElement.IsModified() System.Configuration.ConfigurationElement.ResetModified() System.Configuration.ConfigurationElement.IsReadOnly() System.Configuration.ConfigurationElement.SetReadOnly() System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList) System.Configuration.ConfigurationElement.InitializeDefault() System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElement.Equals(System.Object) System.Configuration.ConfigurationElement.GetHashCode() System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty, System.Object, System.Boolean) System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement, System.Configuration.ConfigurationElement, System.Configuration.ConfigurationSaveMode) System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter, System.String) System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter, System.Boolean) System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader, System.Boolean) System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String) System.Configuration.ConfigurationElement.PostDeserialize() System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter) System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String, System.Xml.XmlReader) System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String) System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String) System.Configuration.ConfigurationElement.LockAttributes System.Configuration.ConfigurationElement.LockAllAttributesExcept System.Configuration.ConfigurationElement.LockElements System.Configuration.ConfigurationElement.LockAllElementsExcept System.Configuration.ConfigurationElement.LockItem System.Configuration.ConfigurationElement.Item[System.Configuration.ConfigurationProperty] System.Configuration.ConfigurationElement.Item[System.String] System.Configuration.ConfigurationElement.ElementInformation System.Configuration.ConfigurationElement.EvaluationContext System.Configuration.ConfigurationElement.ElementProperty System.Configuration.ConfigurationElement.HasContext System.Configuration.ConfigurationElement.CurrentConfiguration Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public sealed class DataProviderElement : ElementBase, IDataProviderSettings Constructors | Improve this Doc View Source DataProviderElement() Declaration public DataProviderElement() Properties | Improve this Doc View Source Default Gets a value indicating whether the provider is default. Declaration public bool Default { get; } Property Value Type Description System.Boolean Implements IDataProviderSettings.Default | Improve this Doc View Source Name Gets or sets a name of this data provider. If not set, Name is used. Declaration public string Name { get; } Property Value Type Description System.String Implements IDataProviderSettings.Name | Improve this Doc View Source TypeName Gets or sets an assembly qualified type name of this data provider. Declaration public string TypeName { get; } Property Value Type Description System.String Implements IDataProviderSettings.TypeName Explicit Interface Implementations | Improve this Doc View Source IDataProviderSettings.Attributes Declaration IEnumerable<NamedValue> IDataProviderSettings.Attributes { get; } Returns Type Description System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue> Implements IDataProviderSettings.Attributes"
  },
  "api/LinqToDB.Configuration.NamedValue.html": {
    "href": "api/LinqToDB.Configuration.NamedValue.html",
    "title": "Class NamedValue | Linq To DB (aka linq2db)",
    "keywords": "Class NamedValue Inheritance System.Object NamedValue Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public class NamedValue Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value Declaration public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Data.DataReader.html": {
    "href": "api/LinqToDB.Data.DataReader.html",
    "title": "Class DataReader | Linq To DB (aka linq2db)",
    "keywords": "Class DataReader Inheritance System.Object DataReader Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataReader : IDisposable Properties | Improve this Doc View Source CommandInfo Declaration public CommandInfo CommandInfo { get; set; } Property Value Type Description CommandInfo | Improve this Doc View Source Reader Declaration public IDataReader Reader { get; set; } Property Value Type Description System.Data.IDataReader Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements System.IDisposable.Dispose() | Improve this Doc View Source Execute<T>() Declaration public T Execute<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Query<T>() Declaration public IEnumerable<T> Query<T>() Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(T) Declaration public IEnumerable<T> Query<T>(T template) Parameters Type Name Description T template Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(Func<IDataReader, T>) Declaration public IEnumerable<T> Query<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T"
  },
  "api/LinqToDB.Data.html": {
    "href": "api/LinqToDB.Data.html",
    "title": "Namespace LinqToDB.Data | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Data Classes BulkCopyOptions BulkCopyRowsCopied CommandInfo DataConnection DataConnectionExtensions DataConnectionTransaction DataParameter DataReader DataReaderAsync TraceInfo Enums BulkCopyType TraceInfoStep"
  },
  "api/LinqToDB.DataContext.html": {
    "href": "api/LinqToDB.DataContext.html",
    "title": "Class DataContext | Linq To DB (aka linq2db)",
    "keywords": "Class DataContext Inheritance System.Object DataContext Namespace : LinqToDB Assembly : linq2db.dll Syntax public class DataContext : IDataContext, IDisposable Constructors | Improve this Doc View Source DataContext() Declaration public DataContext() | Improve this Doc View Source DataContext(IDataProvider, String) Declaration public DataContext(IDataProvider dataProvider, string connectionString) Parameters Type Name Description IDataProvider dataProvider System.String connectionString | Improve this Doc View Source DataContext(String) Declaration public DataContext(string configurationString) Parameters Type Name Description System.String configurationString Properties | Improve this Doc View Source CloseAfterUse Declaration public bool CloseAfterUse { get; set; } Property Value Type Description System.Boolean Implements IDataContext.CloseAfterUse | Improve this Doc View Source ConfigurationString Declaration public string ConfigurationString { get; } Property Value Type Description System.String | Improve this Doc View Source ConnectionString Declaration public string ConnectionString { get; } Property Value Type Description System.String | Improve this Doc View Source ContextID Declaration public string ContextID { get; set; } Property Value Type Description System.String Implements IDataContext.ContextID | Improve this Doc View Source DataProvider Declaration public IDataProvider DataProvider { get; } Property Value Type Description IDataProvider | Improve this Doc View Source InlineParameters Declaration public bool InlineParameters { get; set; } Property Value Type Description System.Boolean Implements IDataContext.InlineParameters | Improve this Doc View Source IsMarsEnabled Declaration public bool IsMarsEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source KeepConnectionAlive Declaration public bool KeepConnectionAlive { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LastQuery Declaration public string LastQuery { get; set; } Property Value Type Description System.String | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; set; } Property Value Type Description MappingSchema Implements IDataContext.MappingSchema | Improve this Doc View Source NextQueryHints Declaration public List<string> NextQueryHints { get; } Property Value Type Description System.Collections.Generic.List<System.String> Implements IDataContext.NextQueryHints | Improve this Doc View Source QueryHints Declaration public List<string> QueryHints { get; } Property Value Type Description System.Collections.Generic.List<System.String> Implements IDataContext.QueryHints Methods | Improve this Doc View Source BeginTransaction(Boolean) Declaration public virtual DataContextTransaction BeginTransaction(bool autoCommitOnDispose = true) Parameters Type Name Description System.Boolean autoCommitOnDispose Returns Type Description DataContextTransaction | Improve this Doc View Source BeginTransaction(IsolationLevel) Declaration public virtual DataContextTransaction BeginTransaction(IsolationLevel level) Parameters Type Name Description System.Data.IsolationLevel level Returns Type Description DataContextTransaction Events | Improve this Doc View Source OnClosing Declaration public event EventHandler OnClosing Event Type Type Description System.EventHandler Implements IDataContext.OnClosing Explicit Interface Implementations | Improve this Doc View Source IDataContext.Clone(Boolean) Declaration IDataContext IDataContext.Clone(bool forNestedQuery) Parameters Type Name Description System.Boolean forNestedQuery Returns Type Description IDataContext Implements IDataContext.Clone(Boolean) | Improve this Doc View Source IDataContext.Close() Declaration void IDataContext.Close() Implements IDataContext.Close() | Improve this Doc View Source IDataContext.CreateSqlProvider Declaration Func<ISqlBuilder> IDataContext.CreateSqlProvider { get; } Returns Type Description System.Func<LinqToDB.SqlProvider.ISqlBuilder> Implements IDataContext.CreateSqlProvider | Improve this Doc View Source IDataContext.DataReaderType Declaration Type IDataContext.DataReaderType { get; } Returns Type Description System.Type Implements IDataContext.DataReaderType | Improve this Doc View Source IDataContext.ExecuteNonQuery(Object) Declaration int IDataContext.ExecuteNonQuery(object query) Parameters Type Name Description System.Object query Returns Type Description System.Int32 Implements IDataContext.ExecuteNonQuery(Object) | Improve this Doc View Source IDataContext.ExecuteReader(Object) Declaration IDataReader IDataContext.ExecuteReader(object query) Parameters Type Name Description System.Object query Returns Type Description System.Data.IDataReader Implements IDataContext.ExecuteReader(Object) | Improve this Doc View Source IDataContext.ExecuteScalar(Object) Declaration object IDataContext.ExecuteScalar(object query) Parameters Type Name Description System.Object query Returns Type Description System.Object Implements IDataContext.ExecuteScalar(Object) | Improve this Doc View Source IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration Expression IDataContext.GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema System.Data.IDataReader reader System.Int32 idx System.Linq.Expressions.Expression readerExpression System.Type toType Returns Type Description System.Linq.Expressions.Expression Implements IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) | Improve this Doc View Source IDataContext.GetSqlOptimizer Declaration Func<ISqlOptimizer> IDataContext.GetSqlOptimizer { get; } Returns Type Description System.Func<LinqToDB.SqlProvider.ISqlOptimizer> Implements IDataContext.GetSqlOptimizer | Improve this Doc View Source IDataContext.GetSqlText(Object) Declaration string IDataContext.GetSqlText(object query) Parameters Type Name Description System.Object query Returns Type Description System.String Implements IDataContext.GetSqlText(Object) | Improve this Doc View Source IDataContext.IsDBNullAllowed(IDataReader, Int32) Declaration bool ? IDataContext.IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description System.Data.IDataReader reader System.Int32 idx Returns Type Description System.Nullable<System.Boolean> Implements IDataContext.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source IDataContext.ReleaseQuery(Object) Declaration void IDataContext.ReleaseQuery(object query) Parameters Type Name Description System.Object query Implements IDataContext.ReleaseQuery(Object) | Improve this Doc View Source IDataContext.SetQuery(IQueryContext) Declaration object IDataContext.SetQuery(IQueryContext queryContext) Parameters Type Name Description IQueryContext queryContext Returns Type Description System.Object Implements IDataContext.SetQuery(IQueryContext) | Improve this Doc View Source IDataContext.SqlProviderFlags Declaration SqlProviderFlags IDataContext.SqlProviderFlags { get; } Returns Type Description SqlProviderFlags Implements IDataContext.SqlProviderFlags | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable.Dispose() Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplace<T>(IDataContext, T) DataExtensions.InsertWithIdentity<T>(IDataContext, T) DataExtensions.Update<T>(IDataContext, T) DataExtensions.Delete<T>(IDataContext, T) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaulNullable) DataExtensions.DropTable<T>(IDataContext, String, String, String) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2LUWMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2LUWMappingSchema.html",
    "title": "Class DB2LUWMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DB2LUWMappingSchema Inheritance System.Object MappingSchema DB2LUWMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2LUWMappingSchema : MappingSchema Constructors | Improve this Doc View Source DB2LUWMappingSchema() Declaration public DB2LUWMappingSchema()"
  },
  "api/LinqToDB.DataProvider.DB2.DB2MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2MappingSchema.html",
    "title": "Class DB2MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DB2MappingSchema Inheritance System.Object MappingSchema DB2MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2MappingSchema : MappingSchema Constructors | Improve this Doc View Source DB2MappingSchema() Declaration public DB2MappingSchema() | Improve this Doc View Source DB2MappingSchema(String) Declaration protected DB2MappingSchema(string configuration) Parameters Type Name Description System.String configuration"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdConfiguration.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdConfiguration.html",
    "title": "Class FirebirdConfiguration | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdConfiguration Inheritance System.Object FirebirdConfiguration Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax [Obsolete(\"Use FirebirdSqlBuilder.IdentifierQuoteMode instead.\")] public static class FirebirdConfiguration Properties | Improve this Doc View Source QuoteIdentifiers Declaration public static bool QuoteIdentifiers { get; set; } Property Value Type Description System.Boolean"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdDataProvider.html",
    "title": "Class FirebirdDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase FirebirdDataProvider Inherited Members DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.ConvertParameterType(Type, DataType) Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source FirebirdDataProvider() Declaration public FirebirdDataProvider() | Improve this Doc View Source FirebirdDataProvider(String, MappingSchema) Declaration protected FirebirdDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public override bool ? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description System.Data.IDataReader reader System.Int32 idx Returns Type Description System.Nullable<System.Boolean> Overrides DataProviderBase.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public override int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName)where T : class Parameters Type Name Description DataConnection dataConnection System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> deletePredicate System.Boolean delete System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.Merge<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description System.Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlTools.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlTools.html",
    "title": "Class MySqlTools | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlTools Inheritance System.Object MySqlTools Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public static class MySqlTools Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Int32 maxBatchSize System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveMySql(Assembly) Declaration public static void ResolveMySql(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly | Improve this Doc View Source ResolveMySql(String) Declaration public static void ResolveMySql(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.MySql.html": {
    "href": "api/LinqToDB.DataProvider.MySql.html",
    "title": "Namespace LinqToDB.DataProvider.MySql | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.MySql Classes MySqlDataProvider MySqlMappingSchema MySqlTools"
  },
  "api/LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions.html",
    "title": "Class GetHanaSchemaOptions | Linq To DB (aka linq2db)",
    "keywords": "Class GetHanaSchemaOptions Inheritance System.Object GetSchemaOptions GetHanaSchemaOptions Inherited Members GetSchemaOptions.GetTables GetSchemaOptions.GetProcedures GetSchemaOptions.GenerateChar1AsString GetSchemaOptions.IncludedSchemas GetSchemaOptions.ExcludedSchemas GetSchemaOptions.IncludedCatalogs GetSchemaOptions.ExcludedCatalogs GetSchemaOptions.StringComparer GetSchemaOptions.LoadProcedure GetSchemaOptions.GetAssociationMemberName GetSchemaOptions.ProcedureLoadingProgress Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class GetHanaSchemaOptions : GetSchemaOptions Fields | Improve this Doc View Source GetStoredProcedureParameters Declaration public Func<ProcedureSchema, DataParameter[]> GetStoredProcedureParameters Field Value Type Description System.Func<LinqToDB.SchemaProvider.ProcedureSchema, LinqToDB.Data.DataParameter[]> | Improve this Doc View Source ThrowExceptionIfCalculationViewsNotAuthorized Declaration public bool ThrowExceptionIfCalculationViewsNotAuthorized Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaDataProvider.html",
    "title": "Class SapHanaDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase SapHanaDataProvider Inherited Members DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class SapHanaDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source SapHanaDataProvider() Declaration public SapHanaDataProvider() | Improve this Doc View Source SapHanaDataProvider(String, MappingSchema) Declaration protected SapHanaDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source ConvertParameterType(Type, DataType) Declaration public override Type ConvertParameterType(Type type, DataType dataType) Parameters Type Name Description System.Type type DataType dataType Returns Type Description System.Type Overrides DataProviderBase.ConvertParameterType(Type, DataType) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description System.Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.SqlServer.FreeTextTableExpressionAttribute.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.FreeTextTableExpressionAttribute.html",
    "title": "Class FreeTextTableExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class FreeTextTableExpressionAttribute Inheritance System.Object System.Attribute Sql.TableFunctionAttribute Sql.TableExpressionAttribute FreeTextTableExpressionAttribute Inherited Members Sql.TableExpressionAttribute.Name Sql.TableExpressionAttribute.Expression Sql.TableFunctionAttribute.Configuration Sql.TableFunctionAttribute.Schema Sql.TableFunctionAttribute.Database Sql.TableFunctionAttribute.ArgIndices Sql.TableFunctionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class FreeTextTableExpressionAttribute : Sql.TableExpressionAttribute, _Attribute Constructors | Improve this Doc View Source FreeTextTableExpressionAttribute() Declaration public FreeTextTableExpressionAttribute() Methods | Improve this Doc View Source SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>) Declaration public override void SetTable(MappingSchema mappingSchema, SqlTable table, MemberInfo member, IEnumerable<Expression> expArgs, IEnumerable<ISqlExpression> sqlArgs) Parameters Type Name Description MappingSchema mappingSchema SqlTable table System.Reflection.MemberInfo member System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expArgs System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlExpression> sqlArgs Overrides Sql.TableExpressionAttribute.SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2000MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2000MappingSchema.html",
    "title": "Class SqlServer2000MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2000MappingSchema Inheritance System.Object MappingSchema SqlServer2000MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2000MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2000MappingSchema() Declaration public SqlServer2000MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description System.Type from System.Type to Returns Type Description System.Linq.Expressions.LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseTools.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseTools.html",
    "title": "Class SybaseTools | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseTools Inheritance System.Object SybaseTools Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public static class SybaseTools Fields | Improve this Doc View Source AssemblyName Declaration public static string AssemblyName Field Value Type Description System.String Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Int32 maxBatchSize System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSybase(Assembly) Declaration public static void ResolveSybase(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly | Improve this Doc View Source ResolveSybase(String) Declaration public static void ResolveSybase(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.Sybase.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.html",
    "title": "Namespace LinqToDB.DataProvider.Sybase | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Sybase Classes SybaseDataProvider SybaseMappingSchema SybaseTools"
  },
  "api/LinqToDB.KeepConnectionAliveScope.html": {
    "href": "api/LinqToDB.KeepConnectionAliveScope.html",
    "title": "Class KeepConnectionAliveScope | Linq To DB (aka linq2db)",
    "keywords": "Class KeepConnectionAliveScope Inheritance System.Object KeepConnectionAliveScope Namespace : LinqToDB Assembly : linq2db.dll Syntax public class KeepConnectionAliveScope : IDisposable Constructors | Improve this Doc View Source KeepConnectionAliveScope(DataContext) Declaration public KeepConnectionAliveScope(DataContext dataContext) Parameters Type Name Description DataContext dataContext Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements System.IDisposable.Dispose()"
  },
  "api/LinqToDB.Linq.Builder.ConvertFlags.html": {
    "href": "api/LinqToDB.Linq.Builder.ConvertFlags.html",
    "title": "Enum ConvertFlags | Linq To DB (aka linq2db)",
    "keywords": "Enum ConvertFlags Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public enum ConvertFlags Fields Name Description All Field Key Extension Methods Sql.Between<ConvertFlags>(ConvertFlags, ConvertFlags) Sql.NotBetween<ConvertFlags>(ConvertFlags, ConvertFlags)"
  },
  "api/LinqToDB.LinqToDBConstants.html": {
    "href": "api/LinqToDB.LinqToDBConstants.html",
    "title": "Class LinqToDBConstants | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBConstants Inheritance System.Object LinqToDBConstants Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class LinqToDBConstants Fields | Improve this Doc View Source Copyright Declaration public const string Copyright = \"© 2011-2016 blog.linq2db.com\" Field Value Type Description System.String | Improve this Doc View Source FullVersionString Declaration public const string FullVersionString = \"1.8.4.0\" Field Value Type Description System.String | Improve this Doc View Source ProductDescription Declaration public const string ProductDescription = \"Linq to DB\" Field Value Type Description System.String | Improve this Doc View Source ProductName Declaration public const string ProductName = \"Linq to DB\" Field Value Type Description System.String"
  },
  "api/LinqToDB.LinqToDBException.html": {
    "href": "api/LinqToDB.LinqToDBException.html",
    "title": "Class LinqToDBException | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBException Defines the base class for the namespace exceptions. Inheritance System.Object System.Exception LinqToDBException LinqToDBConvertException RetryLimitExceededException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] public class LinqToDBException : Exception, ISerializable, _Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source LinqToDBException() Initializes a new instance of the LinqToDBException class. Declaration public LinqToDBException() Remarks This constructor initializes the System.Exception.Message property of the new instance such as \"A Build Type exception has occurred.\" | Improve this Doc View Source LinqToDBException(Exception) Initializes a new instance of the LinqToDBException class with the specified InnerException property. Declaration public LinqToDBException(Exception innerException) Parameters Type Name Description System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.InnerException | Improve this Doc View Source LinqToDBException(SerializationInfo, StreamingContext) Initializes a new instance of the LinqToDBException class with serialized data. Declaration protected LinqToDBException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The object that holds the serialized object data. System.Runtime.Serialization.StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source LinqToDBException(String) Initializes a new instance of the LinqToDBException class with the specified error message. Declaration public LinqToDBException(string message) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. See Also System.Exception.Message | Improve this Doc View Source LinqToDBException(String, Exception) Initializes a new instance of the LinqToDBException class with the specified error message and InnerException property. Declaration public LinqToDBException(string message, Exception innerException) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.Message System.Exception.InnerException"
  },
  "api/LinqToDB.Mapping.AssociationAttribute.html": {
    "href": "api/LinqToDB.Mapping.AssociationAttribute.html",
    "title": "Class AssociationAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class AssociationAttribute Inheritance System.Object System.Attribute AssociationAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)] public class AssociationAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source AssociationAttribute() Declaration public AssociationAttribute() Properties | Improve this Doc View Source BackReferenceName Declaration public string BackReferenceName { get; set; } Property Value Type Description System.String | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source ExpressionPredicate Declaration public string ExpressionPredicate { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsBackReference Declaration public bool IsBackReference { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source KeyName Declaration public string KeyName { get; set; } Property Value Type Description System.String | Improve this Doc View Source OtherKey Declaration public string OtherKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source Relationship Declaration public Relationship Relationship { get; set; } Property Value Type Description Relationship | Improve this Doc View Source Storage Declaration public string Storage { get; set; } Property Value Type Description System.String | Improve this Doc View Source ThisKey Declaration public string ThisKey { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source GetOtherKeys() Declaration public string[] GetOtherKeys() Returns Type Description System.String[] | Improve this Doc View Source GetThisKeys() Declaration public string[] GetThisKeys() Returns Type Description System.String[]"
  },
  "api/LinqToDB.Mapping.AssociationDescriptor.html": {
    "href": "api/LinqToDB.Mapping.AssociationDescriptor.html",
    "title": "Class AssociationDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Class AssociationDescriptor Inheritance System.Object AssociationDescriptor Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class AssociationDescriptor Constructors | Improve this Doc View Source AssociationDescriptor(Type, MemberInfo, String[], String[], String, String, Boolean) Declaration public AssociationDescriptor(Type type, MemberInfo memberInfo, string[] thisKey, string[] otherKey, string expressionPredicate, string storage, bool canBeNull) Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo System.String[] thisKey System.String[] otherKey System.String expressionPredicate System.String storage System.Boolean canBeNull Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ExpressionPredicate Declaration public string ExpressionPredicate { get; set; } Property Value Type Description System.String | Improve this Doc View Source MemberInfo Declaration public MemberInfo MemberInfo { get; set; } Property Value Type Description System.Reflection.MemberInfo | Improve this Doc View Source OtherKey Declaration public string[] OtherKey { get; set; } Property Value Type Description System.String[] | Improve this Doc View Source Storage Declaration public string Storage { get; set; } Property Value Type Description System.String | Improve this Doc View Source ThisKey Declaration public string[] ThisKey { get; set; } Property Value Type Description System.String[] Methods | Improve this Doc View Source GetPredicate() Declaration public LambdaExpression GetPredicate() Returns Type Description System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseKeys(String) Declaration public static string[] ParseKeys(string keys) Parameters Type Name Description System.String keys Returns Type Description System.String[]"
  },
  "api/LinqToDB.SchemaProvider.AssociationType.html": {
    "href": "api/LinqToDB.SchemaProvider.AssociationType.html",
    "title": "Enum AssociationType | Linq To DB (aka linq2db)",
    "keywords": "Enum AssociationType Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public enum AssociationType Fields Name Description Auto ManyToOne OneToMany OneToOne Extension Methods Sql.Between<AssociationType>(AssociationType, AssociationType) Sql.NotBetween<AssociationType>(AssociationType, AssociationType)"
  },
  "api/LinqToDB.SchemaProvider.ColumnInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ColumnInfo.html",
    "title": "Class ColumnInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnInfo Inheritance System.Object ColumnInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ColumnInfo Fields | Improve this Doc View Source ColumnType Declaration public string ColumnType Field Value Type Description System.String | Improve this Doc View Source DataType Declaration public string DataType Field Value Type Description System.String | Improve this Doc View Source Description Declaration public string Description Field Value Type Description System.String | Improve this Doc View Source IsIdentity Declaration public bool IsIdentity Field Value Type Description System.Boolean | Improve this Doc View Source IsNullable Declaration public bool IsNullable Field Value Type Description System.Boolean | Improve this Doc View Source Length Declaration public long ? Length Field Value Type Description System.Nullable<System.Int64> | Improve this Doc View Source Name Declaration public string Name Field Value Type Description System.String | Improve this Doc View Source Ordinal Declaration public int Ordinal Field Value Type Description System.Int32 | Improve this Doc View Source Precision Declaration public int ? Precision Field Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source Scale Declaration public int ? Scale Field Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source SkipOnInsert Declaration public bool SkipOnInsert Field Value Type Description System.Boolean | Improve this Doc View Source SkipOnUpdate Declaration public bool SkipOnUpdate Field Value Type Description System.Boolean | Improve this Doc View Source TableID Declaration public string TableID Field Value Type Description System.String"
  },
  "api/LinqToDB.SchemaProvider.ColumnSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ColumnSchema.html",
    "title": "Class ColumnSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnSchema Inheritance System.Object ColumnSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ColumnSchema Fields | Improve this Doc View Source Table Declaration public TableSchema Table Field Value Type Description TableSchema Properties | Improve this Doc View Source ColumnName Declaration public string ColumnName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ColumnType Declaration public string ColumnType { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataType Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsIdentity Declaration public bool IsIdentity { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNullable Declaration public bool IsNullable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPrimaryKey Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Declaration public long ? Length { get; set; } Property Value Type Description System.Nullable<System.Int64> | Improve this Doc View Source MemberName Declaration public string MemberName { get; set; } Property Value Type Description System.String | Improve this Doc View Source MemberType Declaration public string MemberType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Precision Declaration public int ? Precision { get; set; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source PrimaryKeyOrder Declaration public int PrimaryKeyOrder { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ProviderSpecificType Declaration public string ProviderSpecificType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Scale Declaration public int ? Scale { get; set; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source SkipOnInsert Declaration public bool SkipOnInsert { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipOnUpdate Declaration public bool SkipOnUpdate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SystemType Declaration public Type SystemType { get; set; } Property Value Type Description System.Type"
  },
  "api/LinqToDB.SchemaProvider.DatabaseSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.DatabaseSchema.html",
    "title": "Class DatabaseSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DatabaseSchema Inheritance System.Object DatabaseSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class DatabaseSchema Properties | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataSource Declaration public string DataSource { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataTypesSchema Declaration public DataTable DataTypesSchema { get; set; } Property Value Type Description System.Data.DataTable | Improve this Doc View Source Procedures Declaration public List<ProcedureSchema> Procedures { get; set; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ProcedureSchema> | Improve this Doc View Source ProviderSpecificTypeNamespace Declaration public string ProviderSpecificTypeNamespace { get; set; } Property Value Type Description System.String | Improve this Doc View Source ServerVersion Declaration public string ServerVersion { get; set; } Property Value Type Description System.String | Improve this Doc View Source Tables Declaration public List<TableSchema> Tables { get; set; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.TableSchema>"
  },
  "api/LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder.html": {
    "href": "api/LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder.html",
    "title": "Class Sql.ExtensionAttribute.ExtensionBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ExtensionAttribute.ExtensionBuilder Inheritance System.Object Sql.ExtensionAttribute.ExtensionBuilder Namespace : LinqToDB Assembly : linq2db.dll Syntax protected class ExtensionBuilder : Sql.ISqExtensionBuilder Constructors | Improve this Doc View Source ExtensionBuilder(String, MappingSchema, Sql.SqlExtension, Sql.ExtensionAttribute.ConvertHelper, MemberInfo, Expression[]) Declaration public ExtensionBuilder(string configuration, MappingSchema mapping, Sql.SqlExtension extension, Sql.ExtensionAttribute.ConvertHelper convertHeper, MemberInfo member, Expression[] arguments) Parameters Type Name Description System.String configuration MappingSchema mapping Sql.SqlExtension extension Sql.ExtensionAttribute.ConvertHelper convertHeper System.Reflection.MemberInfo member System.Linq.Expressions.Expression[] arguments Properties | Improve this Doc View Source Arguments Declaration public Expression[] Arguments { get; } Property Value Type Description System.Linq.Expressions.Expression[] | Improve this Doc View Source Configuration Declaration public string Configuration { get; } Property Value Type Description System.String Implements Sql.ISqExtensionBuilder.Configuration | Improve this Doc View Source Expression Declaration public string Expression { get; set; } Property Value Type Description System.String Implements Sql.ISqExtensionBuilder.Expression | Improve this Doc View Source Extension Declaration public Sql.SqlExtension Extension { get; } Property Value Type Description Sql.SqlExtension Implements Sql.ISqExtensionBuilder.Extension | Improve this Doc View Source Mapping Declaration public MappingSchema Mapping { get; } Property Value Type Description MappingSchema Implements Sql.ISqExtensionBuilder.Mapping | Improve this Doc View Source Member Declaration public MemberInfo Member { get; } Property Value Type Description System.Reflection.MemberInfo Implements Sql.ISqExtensionBuilder.Member | Improve this Doc View Source Method Declaration public MethodInfo Method { get; } Property Value Type Description System.Reflection.MethodInfo | Improve this Doc View Source ResultExpression Declaration public ISqlExpression ResultExpression { get; set; } Property Value Type Description ISqlExpression Implements Sql.ISqExtensionBuilder.ResultExpression Methods | Improve this Doc View Source AddParameter(String, ISqlExpression) Declaration public Sql.SqlExtensionParam AddParameter(string name, ISqlExpression expr) Parameters Type Name Description System.String name ISqlExpression expr Returns Type Description Sql.SqlExtensionParam Implements Sql.ISqExtensionBuilder.AddParameter(String, ISqlExpression) | Improve this Doc View Source ConvertExpression(Expression) Declaration public ISqlExpression ConvertExpression(Expression expr) Parameters Type Name Description System.Linq.Expressions.Expression expr Returns Type Description ISqlExpression | Improve this Doc View Source ConvertToSqlExpression() Declaration public ISqlExpression ConvertToSqlExpression() Returns Type Description ISqlExpression Implements Sql.ISqExtensionBuilder.ConvertToSqlExpression() | Improve this Doc View Source ConvertToSqlExpression(Int32) Declaration public ISqlExpression ConvertToSqlExpression(int precedence) Parameters Type Name Description System.Int32 precedence Returns Type Description ISqlExpression Implements Sql.ISqExtensionBuilder.ConvertToSqlExpression(Int32) | Improve this Doc View Source GetExpression(Int32) Declaration public ISqlExpression GetExpression(int index) Parameters Type Name Description System.Int32 index Returns Type Description ISqlExpression Implements Sql.ISqExtensionBuilder.GetExpression(Int32) | Improve this Doc View Source GetExpression(String) Declaration public ISqlExpression GetExpression(string argName) Parameters Type Name Description System.String argName Returns Type Description ISqlExpression Implements Sql.ISqExtensionBuilder.GetExpression(String) | Improve this Doc View Source GetValue<T>(Int32) Declaration public T GetValue<T>(int index) Parameters Type Name Description System.Int32 index Returns Type Description T Type Parameters Name Description T Implements Sql.ISqExtensionBuilder.GetValue<T>(Int32) | Improve this Doc View Source GetValue<T>(String) Declaration public T GetValue<T>(string argName) Parameters Type Name Description System.String argName Returns Type Description T Type Parameters Name Description T Implements Sql.ISqExtensionBuilder.GetValue<T>(String) Extension Methods ExtensionlBuilderExtensions.AddParameter(Sql.ISqExtensionBuilder, String, String) ExtensionlBuilderExtensions.AddExpression(Sql.ISqExtensionBuilder, String, String) ExtensionlBuilderExtensions.Add(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Add<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Add(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Inc(Sql.ISqExtensionBuilder, ISqlExpression) ExtensionlBuilderExtensions.Sub(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Sub<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Sub(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Dec(Sql.ISqExtensionBuilder, ISqlExpression) ExtensionlBuilderExtensions.Mul(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Mul<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Mul(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Div(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Div<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Div(Sql.ISqExtensionBuilder, ISqlExpression, Int32)"
  },
  "api/LinqToDB.Sql.ExtensionAttribute.html": {
    "href": "api/LinqToDB.Sql.ExtensionAttribute.html",
    "title": "Class Sql.ExtensionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ExtensionAttribute Inheritance System.Object System.Attribute Sql.ExpressionAttribute Sql.ExtensionAttribute Inherited Members Sql.ExpressionAttribute.Expression Sql.ExpressionAttribute.ArgIndices Sql.ExpressionAttribute.Precedence Sql.ExpressionAttribute.Configuration Sql.ExpressionAttribute.ServerSideOnly Sql.ExpressionAttribute.PreferServerSide Sql.ExpressionAttribute.InlineParameters Sql.ExpressionAttribute.ExpectExpression Sql.ExpressionAttribute.IsPredicate Sql.ExpressionAttribute.CanBeNull Sql.ExpressionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Sql.ExpressionAttribute.GetExpression(MemberInfo, ISqlExpression[]) Namespace : LinqToDB Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)] public class ExtensionAttribute : Sql.ExpressionAttribute, _Attribute Constructors | Improve this Doc View Source ExtensionAttribute(String) Declaration public ExtensionAttribute(string expression) Parameters Type Name Description System.String expression | Improve this Doc View Source ExtensionAttribute(String, String) Declaration public ExtensionAttribute(string configuration, string expression) Parameters Type Name Description System.String configuration System.String expression | Improve this Doc View Source ExtensionAttribute(Type) Declaration public ExtensionAttribute(Type builderType) Parameters Type Name Description System.Type builderType Properties | Improve this Doc View Source BuilderType Declaration public Type BuilderType { get; set; } Property Value Type Description System.Type | Improve this Doc View Source ChainPrecedence Declaration public int ChainPrecedence { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SqlFlags Declaration public SqlFlags SqlFlags { get; set; } Property Value Type Description SqlFlags | Improve this Doc View Source TokenName Declaration public string TokenName { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source BuildFunctionsChain(MappingSchema, Expression, Sql.ExtensionAttribute.ConvertHelper) Declaration protected List<Sql.SqlExtensionParam> BuildFunctionsChain(MappingSchema mapping, Expression expr, Sql.ExtensionAttribute.ConvertHelper convertHelper) Parameters Type Name Description MappingSchema mapping System.Linq.Expressions.Expression expr Sql.ExtensionAttribute.ConvertHelper convertHelper Returns Type Description System.Collections.Generic.List<LinqToDB.Sql.SqlExtensionParam> | Improve this Doc View Source BuildSqlExpression(Sql.SqlExtension, Type, Int32, SqlFlags) Declaration public static SqlExpression BuildSqlExpression(Sql.SqlExtension root, Type systemType, int precedence, SqlFlags sqlFlags) Parameters Type Name Description Sql.SqlExtension root System.Type systemType System.Int32 precedence SqlFlags sqlFlags Returns Type Description SqlExpression | Improve this Doc View Source GetExpression(MappingSchema, Expression, Func<Expression, ISqlExpression>) Declaration public override ISqlExpression GetExpression(MappingSchema mapping, Expression expression, Func<Expression, ISqlExpression> converter) Parameters Type Name Description MappingSchema mapping System.Linq.Expressions.Expression expression System.Func<System.Linq.Expressions.Expression, LinqToDB.SqlQuery.ISqlExpression> converter Returns Type Description ISqlExpression Overrides Sql.ExpressionAttribute.GetExpression(MappingSchema, Expression, Func<Expression, ISqlExpression>) | Improve this Doc View Source ResolveExpressionValues(String, Func<String, String, String>) Declaration public static string ResolveExpressionValues(string expression, Func<string, string, string> valueProvider) Parameters Type Name Description System.String expression System.Func<System.String, System.String, System.String> valueProvider Returns Type Description System.String"
  },
  "api/LinqToDB.Sql.From.html": {
    "href": "api/LinqToDB.Sql.From.html",
    "title": "Enum Sql.From | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.From Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum From Fields Name Description First Last None Extension Methods Sql.Between<Sql.From>(Sql.From, Sql.From) Sql.NotBetween<Sql.From>(Sql.From, Sql.From)"
  },
  "api/LinqToDB.Sql.FunctionAttribute.html": {
    "href": "api/LinqToDB.Sql.FunctionAttribute.html",
    "title": "Class Sql.FunctionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.FunctionAttribute Inheritance System.Object System.Attribute Sql.ExpressionAttribute Sql.FunctionAttribute Inherited Members Sql.ExpressionAttribute.Expression Sql.ExpressionAttribute.ArgIndices Sql.ExpressionAttribute.Precedence Sql.ExpressionAttribute.Configuration Sql.ExpressionAttribute.ServerSideOnly Sql.ExpressionAttribute.PreferServerSide Sql.ExpressionAttribute.InlineParameters Sql.ExpressionAttribute.ExpectExpression Sql.ExpressionAttribute.IsPredicate Sql.ExpressionAttribute.CanBeNull Sql.ExpressionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Sql.ExpressionAttribute.GetExpression(MappingSchema, Expression, Func<Expression, ISqlExpression>) Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true, Inherited = false)] public class FunctionAttribute : Sql.ExpressionAttribute, _Attribute Constructors | Improve this Doc View Source FunctionAttribute() Declaration public FunctionAttribute() | Improve this Doc View Source FunctionAttribute(String) Declaration public FunctionAttribute(string name) Parameters Type Name Description System.String name | Improve this Doc View Source FunctionAttribute(String, Int32[]) Declaration public FunctionAttribute(string name, params int[] argIndices) Parameters Type Name Description System.String name System.Int32[] argIndices | Improve this Doc View Source FunctionAttribute(String, String) Declaration public FunctionAttribute(string configuration, string name) Parameters Type Name Description System.String configuration System.String name | Improve this Doc View Source FunctionAttribute(String, String, Int32[]) Declaration public FunctionAttribute(string configuration, string name, params int[] argIndices) Parameters Type Name Description System.String configuration System.String name System.Int32[] argIndices Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source GetExpression(MemberInfo, ISqlExpression[]) Declaration public override ISqlExpression GetExpression(MemberInfo member, params ISqlExpression[] args) Parameters Type Name Description System.Reflection.MemberInfo member LinqToDB.SqlQuery.ISqlExpression[] args Returns Type Description ISqlExpression Overrides Sql.ExpressionAttribute.GetExpression(MemberInfo, ISqlExpression[])"
  },
  "api/LinqToDB.SqlQuery.ICloneableElement.html": {
    "href": "api/LinqToDB.SqlQuery.ICloneableElement.html",
    "title": "Interface ICloneableElement | Linq To DB (aka linq2db)",
    "keywords": "Interface ICloneableElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ICloneableElement Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement"
  },
  "api/LinqToDB.SqlQuery.IQueryElement.html": {
    "href": "api/LinqToDB.SqlQuery.IQueryElement.html",
    "title": "Interface IQueryElement | Linq To DB (aka linq2db)",
    "keywords": "Interface IQueryElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface IQueryElement Properties | Improve this Doc View Source ElementType Declaration QueryElementType ElementType { get; } Property Value Type Description QueryElementType Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder"
  },
  "api/LinqToDB.SqlQuery.ISqlExpression.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlExpression.html",
    "title": "Interface ISqlExpression | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlExpression Inherited Members IQueryElement.ElementType IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(LinqToDB.SqlQuery.ISqlExpression) ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlExpression : IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source CanBeNull Declaration bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Precedence Declaration int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SystemType Declaration Type SystemType { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean"
  },
  "api/LinqToDB.SqlQuery.ISqlExpressionWalkable.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlExpressionWalkable.html",
    "title": "Interface ISqlExpressionWalkable | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlExpressionWalkable Methods | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.InsertClause.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.InsertClause.html",
    "title": "Class SelectQuery.InsertClause | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.InsertClause Inheritance System.Object SelectQuery.InsertClause Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class InsertClause : IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source InsertClause() Declaration public InsertClause() Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Into Declaration public SqlTable Into { get; set; } Property Value Type Description SqlTable | Improve this Doc View Source Items Declaration public List<SelectQuery.SetExpression> Items { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.SelectQuery.SetExpression> | Improve this Doc View Source WithIdentity Declaration public bool WithIdentity { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.JoinType.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.JoinType.html",
    "title": "Enum SelectQuery.JoinType | Linq To DB (aka linq2db)",
    "keywords": "Enum SelectQuery.JoinType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum JoinType Fields Name Description Auto CrossApply Inner Left OuterApply Extension Methods Sql.Between<SelectQuery.JoinType>(SelectQuery.JoinType, SelectQuery.JoinType) Sql.NotBetween<SelectQuery.JoinType>(SelectQuery.JoinType, SelectQuery.JoinType)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.OrderByClause.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.OrderByClause.html",
    "title": "Class SelectQuery.OrderByClause | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.OrderByClause Inheritance System.Object SelectQuery.ClauseBase SelectQuery.OrderByClause Inherited Members SelectQuery.ClauseBase.Select SelectQuery.ClauseBase.From SelectQuery.ClauseBase.Where SelectQuery.ClauseBase.GroupBy SelectQuery.ClauseBase.Having SelectQuery.ClauseBase.OrderBy SelectQuery.ClauseBase.End() SelectQuery.ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class OrderByClause : SelectQuery.ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Items Declaration public List<SelectQuery.OrderByItem> Items { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.SelectQuery.OrderByItem> Methods | Improve this Doc View Source Expr(ISqlExpression) Declaration public SelectQuery.OrderByClause Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SelectQuery.OrderByClause | Improve this Doc View Source Expr(ISqlExpression, Boolean) Declaration public SelectQuery.OrderByClause Expr(ISqlExpression expr, bool isDescending) Parameters Type Name Description ISqlExpression expr System.Boolean isDescending Returns Type Description SelectQuery.OrderByClause | Improve this Doc View Source ExprAsc(ISqlExpression) Declaration public SelectQuery.OrderByClause ExprAsc(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SelectQuery.OrderByClause | Improve this Doc View Source ExprDesc(ISqlExpression) Declaration public SelectQuery.OrderByClause ExprDesc(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SelectQuery.OrderByClause | Improve this Doc View Source Field(SqlField) Declaration public SelectQuery.OrderByClause Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SelectQuery.OrderByClause | Improve this Doc View Source Field(SqlField, Boolean) Declaration public SelectQuery.OrderByClause Field(SqlField field, bool isDescending) Parameters Type Name Description SqlField field System.Boolean isDescending Returns Type Description SelectQuery.OrderByClause | Improve this Doc View Source FieldAsc(SqlField) Declaration public SelectQuery.OrderByClause FieldAsc(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SelectQuery.OrderByClause | Improve this Doc View Source FieldDesc(SqlField) Declaration public SelectQuery.OrderByClause FieldDesc(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SelectQuery.OrderByClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SqlException.html": {
    "href": "api/LinqToDB.SqlQuery.SqlException.html",
    "title": "Class SqlException | Linq To DB (aka linq2db)",
    "keywords": "Class SqlException Inheritance System.Object System.Exception SqlException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source SqlException() Declaration public SqlException() | Improve this Doc View Source SqlException(Exception) Declaration public SqlException(Exception innerException) Parameters Type Name Description System.Exception innerException | Improve this Doc View Source SqlException(SerializationInfo, StreamingContext) Declaration protected SqlException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source SqlException(String) Declaration public SqlException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source SqlException(String, Exception) Declaration public SqlException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException | Improve this Doc View Source SqlException(String, Object[]) Declaration public SqlException(string message, params object[] args) Parameters Type Name Description System.String message System.Object[] args"
  },
  "api/LinqToDB.SqlQuery.SqlExpression.html": {
    "href": "api/LinqToDB.SqlQuery.SqlExpression.html",
    "title": "Class SqlExpression | Linq To DB (aka linq2db)",
    "keywords": "Class SqlExpression Inheritance System.Object SqlExpression ObjectSqlExpression Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlExpression : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlExpression(String, ISqlExpression[]) Declaration public SqlExpression(string expr, params ISqlExpression[] parameters) Parameters Type Name Description System.String expr LinqToDB.SqlQuery.ISqlExpression[] parameters | Improve this Doc View Source SqlExpression(String, Int32, ISqlExpression[]) Declaration public SqlExpression(string expr, int precedence, params ISqlExpression[] parameters) Parameters Type Name Description System.String expr System.Int32 precedence LinqToDB.SqlQuery.ISqlExpression[] parameters | Improve this Doc View Source SqlExpression(Type, String, ISqlExpression[]) Declaration public SqlExpression(Type systemType, string expr, params ISqlExpression[] parameters) Parameters Type Name Description System.Type systemType System.String expr LinqToDB.SqlQuery.ISqlExpression[] parameters | Improve this Doc View Source SqlExpression(Type, String, Int32, ISqlExpression[]) Declaration public SqlExpression(Type systemType, string expr, int precedence, params ISqlExpression[] parameters) Parameters Type Name Description System.Type systemType System.String expr System.Int32 precedence LinqToDB.SqlQuery.ISqlExpression[] parameters | Improve this Doc View Source SqlExpression(Type, String, Int32, SqlFlags, ISqlExpression[]) Declaration public SqlExpression(Type systemType, string expr, int precedence, SqlFlags sqlFlags, params ISqlExpression[] parameters) Parameters Type Name Description System.Type systemType System.String expr System.Int32 precedence SqlFlags sqlFlags LinqToDB.SqlQuery.ISqlExpression[] parameters Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean Implements ISqlExpression.CanBeNull | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Expr Declaration public string Expr { get; } Property Value Type Description System.String | Improve this Doc View Source Parameters Declaration public ISqlExpression[] Parameters { get; } Property Value Type Description LinqToDB.SqlQuery.ISqlExpression[] | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlExpression.Precedence | Improve this Doc View Source SqlFlags Declaration public SqlFlags SqlFlags { get; } Property Value Type Description SqlFlags | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description System.Type Implements ISqlExpression.SystemType Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) | Improve this Doc View Source NeedsEqual(IQueryElement) Declaration public static bool NeedsEqual(IQueryElement ex) Parameters Type Name Description IQueryElement ex Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T)"
  },
  "api/LinqToDB.SqlQuery.SqlField.html": {
    "href": "api/LinqToDB.SqlQuery.SqlField.html",
    "title": "Class SqlField | Linq To DB (aka linq2db)",
    "keywords": "Class SqlField Inheritance System.Object SqlField Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlField : ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source SqlField() Declaration public SqlField() | Improve this Doc View Source SqlField(SqlField) Declaration public SqlField(SqlField field) Parameters Type Name Description SqlField field Properties | Improve this Doc View Source Alias Declaration public string Alias { get; set; } Property Value Type Description System.String | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean Implements ISqlExpression.CanBeNull | Improve this Doc View Source ColumnDescriptor Declaration public ColumnDescriptor ColumnDescriptor { get; set; } Property Value Type Description ColumnDescriptor | Improve this Doc View Source CreateFormat Declaration public string CreateFormat { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataType Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source DbType Declaration public string DbType { get; set; } Property Value Type Description System.String | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source IsIdentity Declaration public bool IsIdentity { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInsertable Declaration public bool IsInsertable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPrimaryKey Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsUpdatable Declaration public bool IsUpdatable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Declaration public int ? Length { get; set; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source PhysicalName Declaration public string PhysicalName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlExpression.Precedence | Improve this Doc View Source Precision Declaration public int ? Precision { get; set; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source PrimaryKeyOrder Declaration public int PrimaryKeyOrder { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Scale Declaration public int ? Scale { get; set; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source SystemType Declaration public Type SystemType { get; set; } Property Value Type Description System.Type Implements ISqlExpression.SystemType | Improve this Doc View Source Table Declaration public ISqlTableSource Table { get; set; } Property Value Type Description ISqlTableSource Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T)"
  },
  "api/LinqToDB.SqlQuery.SqlFlags.html": {
    "href": "api/LinqToDB.SqlQuery.SqlFlags.html",
    "title": "Enum SqlFlags | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlFlags Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax [Flags] public enum SqlFlags Fields Name Description Aggregate None Extension Methods Sql.Between<SqlFlags>(SqlFlags, SqlFlags) Sql.NotBetween<SqlFlags>(SqlFlags, SqlFlags)"
  },
  "api/LinqToDB.AnalyticFunctions.IAggregateFunction-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IAggregateFunction-1.html",
    "title": "Interface AnalyticFunctions.IAggregateFunction<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IAggregateFunction<TR> Inherited Members AnalyticFunctions.IAnalyticFunction<TR>.Over() Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IAggregateFunction<out TR> : AnalyticFunctions.IAnalyticFunction<TR> Type Parameters Name Description TR Extension Methods AnalyticFunctions.KeepFirst<TR>(AnalyticFunctions.IAggregateFunction<TR>) AnalyticFunctions.KeepLast<TR>(AnalyticFunctions.IAggregateFunction<TR>)"
  },
  "api/LinqToDB.DataExtensions.html": {
    "href": "api/LinqToDB.DataExtensions.html",
    "title": "Class DataExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class DataExtensions Inheritance System.Object DataExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class DataExtensions Methods | Improve this Doc View Source Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) Compiles the query. Declaration public static Func<TDc, TResult> Compile<TDc, TResult>(this IDataContext dataContext, Expression<Func<TDc, TResult>> query)where TDc : IDataContext Parameters Type Name Description IDataContext dataContext System.Linq.Expressions.Expression<System.Func<TDc, TResult>> query The query expression to be compiled. Returns Type Description System.Func<TDc, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TResult Returned type of the delegate returned by the method. | Improve this Doc View Source Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) Compiles the query. Declaration public static Func<TDc, TArg1, TResult> Compile<TDc, TArg1, TResult>(this IDataContext dataContext, Expression<Func<TDc, TArg1, TResult>> query)where TDc : IDataContext Parameters Type Name Description IDataContext dataContext System.Linq.Expressions.Expression<System.Func<TDc, TArg1, TResult>> query The query expression to be compiled. Returns Type Description System.Func<TDc, TArg1, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg1 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TResult Returned type of the delegate returned by the method. | Improve this Doc View Source Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) Compiles the query. Declaration public static Func<TDc, TArg1, TArg2, TResult> Compile<TDc, TArg1, TArg2, TResult>(this IDataContext dataContext, Expression<Func<TDc, TArg1, TArg2, TResult>> query)where TDc : IDataContext Parameters Type Name Description IDataContext dataContext System.Linq.Expressions.Expression<System.Func<TDc, TArg1, TArg2, TResult>> query The query expression to be compiled. Returns Type Description System.Func<TDc, TArg1, TArg2, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg1 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg2 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TResult Returned type of the delegate returned by the method. | Improve this Doc View Source Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) Compiles the query. Declaration public static Func<TDc, TArg1, TArg2, TArg3, TResult> Compile<TDc, TArg1, TArg2, TArg3, TResult>(this IDataContext dataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>> query)where TDc : IDataContext Parameters Type Name Description IDataContext dataContext System.Linq.Expressions.Expression<System.Func<TDc, TArg1, TArg2, TArg3, TResult>> query The query expression to be compiled. Returns Type Description System.Func<TDc, TArg1, TArg2, TArg3, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg1 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg2 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg3 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TResult Returned type of the delegate returned by the method. | Improve this Doc View Source CreateTable<T>(IDataContext, String, String, String, String, String, DefaulNullable) Declaration public static ITable<T> CreateTable<T>(this IDataContext dataContext, string tableName = null, string databaseName = null, string schemaName = null, string statementHeader = null, string statementFooter = null, DefaulNullable defaulNullable = DefaulNullable.None) Parameters Type Name Description IDataContext dataContext System.String tableName System.String databaseName System.String schemaName System.String statementHeader System.String statementFooter DefaulNullable defaulNullable Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source Delete<T>(IDataContext, T) Declaration public static int Delete<T>(this IDataContext dataContext, T obj) Parameters Type Name Description IDataContext dataContext T obj Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source DropTable<T>(IDataContext, String, String, String) Declaration public static void DropTable<T>(this IDataContext dataContext, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext dataContext System.String tableName System.String databaseName System.String schemaName Type Parameters Name Description T | Improve this Doc View Source DropTable<T>(ITable<T>, String, String, String) Declaration public static void DropTable<T>(this ITable<T> table, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description LinqToDB.ITable<T> table System.String tableName System.String databaseName System.String schemaName Type Parameters Name Description T | Improve this Doc View Source GetTable<T>(IDataContext) Declaration public static ITable<T> GetTable<T>(this IDataContext dataContext)where T : class Parameters Type Name Description IDataContext dataContext Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source GetTable<T>(IDataContext, Object, MethodInfo, Object[]) Declaration public static ITable<T> GetTable<T>(this IDataContext dataContext, object instance, MethodInfo methodInfo, params object[] parameters)where T : class Parameters Type Name Description IDataContext dataContext System.Object instance System.Reflection.MethodInfo methodInfo System.Object[] parameters Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source Insert<T>(IDataContext, T, String, String, String) Declaration public static int Insert<T>(this IDataContext dataContext, T obj, string tableName = null, string databaseName = null, string schemaName = null) Parameters Type Name Description IDataContext dataContext T obj System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source InsertOrReplace<T>(IDataContext, T) Declaration public static int InsertOrReplace<T>(this IDataContext dataContext, T obj) Parameters Type Name Description IDataContext dataContext T obj Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source InsertWithIdentity<T>(IDataContext, T) Declaration public static object InsertWithIdentity<T>(this IDataContext dataContext, T obj) Parameters Type Name Description IDataContext dataContext T obj Returns Type Description System.Object Type Parameters Name Description T | Improve this Doc View Source Update<T>(IDataContext, T) Declaration public static int Update<T>(this IDataContext dataContext, T obj) Parameters Type Name Description IDataContext dataContext T obj Returns Type Description System.Int32 Type Parameters Name Description T"
  },
  "api/LinqToDB.DataProvider.DB2.DB2DataProvider.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2DataProvider.html",
    "title": "Class DB2DataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class DB2DataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase DB2DataProvider Inherited Members DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.SetParameterType(IDbDataParameter, DataType) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2DataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source DB2DataProvider(String, DB2Version) Declaration public DB2DataProvider(string name, DB2Version version) Parameters Type Name Description System.String name DB2Version version Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.DataReaderTypeName | Improve this Doc View Source MappingSchema Declaration public override MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Overrides DataProviderBase.MappingSchema | Improve this Doc View Source Version Declaration public DB2Version Version { get; } Property Value Type Description DB2Version Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[]) Declaration public override void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection System.Data.CommandType commandType System.String commandText LinqToDB.Data.DataParameter[] parameters Overrides DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public override int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName)where T : class Parameters Type Name Description DataConnection dataConnection System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> deletePredicate System.Boolean delete System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.Merge<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description System.Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode.html",
    "title": "Enum DB2IdentifierQuoteMode | Linq To DB (aka linq2db)",
    "keywords": "Enum DB2IdentifierQuoteMode Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public enum DB2IdentifierQuoteMode Fields Name Description Auto None Quote Extension Methods Sql.Between<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode) Sql.NotBetween<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.html",
    "title": "Enum FirebirdIdentifierQuoteMode | Linq To DB (aka linq2db)",
    "keywords": "Enum FirebirdIdentifierQuoteMode Possible modes for Firebird identifier quotes. Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public enum FirebirdIdentifierQuoteMode Fields Name Description Auto quote identifiers if needed. None Do not quote identifiers. Quote Always quote identifiers. Extension Methods Sql.Between<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode) Sql.NotBetween<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdMappingSchema.html",
    "title": "Class FirebirdMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdMappingSchema Inheritance System.Object MappingSchema FirebirdMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdMappingSchema : MappingSchema Constructors | Improve this Doc View Source FirebirdMappingSchema() Declaration public FirebirdMappingSchema() | Improve this Doc View Source FirebirdMappingSchema(String) Declaration protected FirebirdMappingSchema(string configuration) Parameters Type Name Description System.String configuration"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleDataProvider.html",
    "title": "Class OracleDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class OracleDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase OracleDataProvider Inherited Members DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source OracleDataProvider() Declaration public OracleDataProvider() | Improve this Doc View Source OracleDataProvider(String) Declaration public OracleDataProvider(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source AssemblyName Declaration public string AssemblyName { get; } Property Value Type Description System.String | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.DataReaderTypeName | Improve this Doc View Source IsXmlTypeSupported Declaration public bool IsXmlTypeSupported { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MappingSchema Declaration public override MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Overrides DataProviderBase.MappingSchema Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source ConvertParameterType(Type, DataType) Declaration public override Type ConvertParameterType(Type type, DataType dataType) Parameters Type Name Description System.Type type DataType dataType Returns Type Description System.Type Overrides DataProviderBase.ConvertParameterType(Type, DataType) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source DisposeCommand(DataConnection) Declaration public override void DisposeCommand(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Overrides DataProviderBase.DisposeCommand(DataConnection) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[]) Declaration public override void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection System.Data.CommandType commandType System.String commandText LinqToDB.Data.DataParameter[] parameters Overrides DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public override int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName)where T : class Parameters Type Name Description DataConnection dataConnection System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> deletePredicate System.Boolean delete System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.Merge<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description System.Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.ManagedMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.ManagedMappingSchema.html",
    "title": "Class OracleMappingSchema.ManagedMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class OracleMappingSchema.ManagedMappingSchema Inheritance System.Object MappingSchema OracleMappingSchema.ManagedMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class ManagedMappingSchema : MappingSchema Constructors | Improve this Doc View Source ManagedMappingSchema() Declaration public ManagedMappingSchema()"
  },
  "api/LinqToDB.DataProvider.ReaderInfo.html": {
    "href": "api/LinqToDB.DataProvider.ReaderInfo.html",
    "title": "Class ReaderInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ReaderInfo Inheritance System.Object ReaderInfo Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class ReaderInfo : IEquatable<ReaderInfo> Properties | Improve this Doc View Source DataTypeName Declaration public string DataTypeName { get; set; } Property Value Type Description System.String | Improve this Doc View Source FieldType Declaration public Type FieldType { get; set; } Property Value Type Description System.Type | Improve this Doc View Source ProviderFieldType Declaration public Type ProviderFieldType { get; set; } Property Value Type Description System.Type | Improve this Doc View Source ToType Declaration public Type ToType { get; set; } Property Value Type Description System.Type Methods | Improve this Doc View Source Equals(ReaderInfo) Declaration public bool Equals(ReaderInfo other) Parameters Type Name Description ReaderInfo other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode()"
  },
  "api/LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute.html",
    "title": "Class CalculationViewInputParametersExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class CalculationViewInputParametersExpressionAttribute Inheritance System.Object System.Attribute Sql.TableFunctionAttribute Sql.TableExpressionAttribute CalculationViewInputParametersExpressionAttribute Inherited Members Sql.TableExpressionAttribute.Name Sql.TableExpressionAttribute.Expression Sql.TableFunctionAttribute.Configuration Sql.TableFunctionAttribute.Schema Sql.TableFunctionAttribute.Database Sql.TableFunctionAttribute.ArgIndices Sql.TableFunctionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class CalculationViewInputParametersExpressionAttribute : Sql.TableExpressionAttribute, _Attribute Constructors | Improve this Doc View Source CalculationViewInputParametersExpressionAttribute() Declaration public CalculationViewInputParametersExpressionAttribute() Methods | Improve this Doc View Source SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>) Declaration public override void SetTable(MappingSchema mappingSchema, SqlTable table, MemberInfo member, IEnumerable<Expression> expArgs, IEnumerable<ISqlExpression> sqlArgs) Parameters Type Name Description MappingSchema mappingSchema SqlTable table System.Reflection.MemberInfo member System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expArgs System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlExpression> sqlArgs Overrides Sql.TableExpressionAttribute.SetTable(MappingSchema, SqlTable, MemberInfo, IEnumerable<Expression>, IEnumerable<ISqlExpression>)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteTools.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteTools.html",
    "title": "Class SQLiteTools | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteTools Inheritance System.Object SQLiteTools Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public static class SQLiteTools Fields | Improve this Doc View Source AlwaysCheckDbNull Declaration public static bool AlwaysCheckDbNull Field Value Type Description System.Boolean | Improve this Doc View Source AssemblyName Declaration public static string AssemblyName Field Value Type Description System.String | Improve this Doc View Source ConnectionName Declaration public static string ConnectionName Field Value Type Description System.String | Improve this Doc View Source DataReaderName Declaration public static string DataReaderName Field Value Type Description System.String Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public static void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description System.String databaseName System.Boolean deleteIfExists | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description DataConnection | Improve this Doc View Source DropDatabase(String) Declaration public static void DropDatabase(string databaseName) Parameters Type Name Description System.String databaseName | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Int32 maxBatchSize System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSQLite(Assembly) Declaration public static void ResolveSQLite(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly | Improve this Doc View Source ResolveSQLite(String) Declaration public static void ResolveSQLite(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.SQLite.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.html",
    "title": "Namespace LinqToDB.DataProvider.SQLite | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SQLite Classes SQLiteDataProvider SQLiteMappingSchema SQLiteSqlBuilder SQLiteTools"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerVersion.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerVersion.html",
    "title": "Enum SqlServerVersion | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlServerVersion Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public enum SqlServerVersion Fields Name Description v2000 v2005 v2008 v2012 Extension Methods Sql.Between<SqlServerVersion>(SqlServerVersion, SqlServerVersion) Sql.NotBetween<SqlServerVersion>(SqlServerVersion, SqlServerVersion)"
  },
  "api/LinqToDB.DataProvider.SqlServer.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.html",
    "title": "Namespace LinqToDB.DataProvider.SqlServer | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SqlServer Classes FreeTextTableExpressionAttribute SqlServer2000MappingSchema SqlServer2005MappingSchema SqlServer2008MappingSchema SqlServer2012MappingSchema SqlServerConfiguration SqlServerDataProvider SqlServerMappingSchema SqlServerRetryPolicy SqlServerTools SqlServerTools.Sql SqlServerTransientExceptionDetector Detects the exceptions caused by SQL Server transient failures. Enums SqlServerVersion"
  },
  "api/LinqToDB.ExprParameterAttribute.html": {
    "href": "api/LinqToDB.ExprParameterAttribute.html",
    "title": "Class ExprParameterAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ExprParameterAttribute Inheritance System.Object System.Attribute ExprParameterAttribute Namespace : LinqToDB Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class ExprParameterAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ExprParameterAttribute() Declaration public ExprParameterAttribute() | Improve this Doc View Source ExprParameterAttribute(String) Declaration public ExprParameterAttribute(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.ExtensionlBuilderExtensions.html": {
    "href": "api/LinqToDB.ExtensionlBuilderExtensions.html",
    "title": "Class ExtensionlBuilderExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class ExtensionlBuilderExtensions Inheritance System.Object ExtensionlBuilderExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class ExtensionlBuilderExtensions Methods | Improve this Doc View Source Add(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Add(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right System.Type type Returns Type Description ISqlExpression | Improve this Doc View Source Add(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Add(this Sql.ISqExtensionBuilder builder, ISqlExpression left, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Add<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Add<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source AddExpression(Sql.ISqExtensionBuilder, String, String) Declaration public static Sql.SqlExtensionParam AddExpression(this Sql.ISqExtensionBuilder builder, string name, string expr) Parameters Type Name Description Sql.ISqExtensionBuilder builder System.String name System.String expr Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source AddParameter(Sql.ISqExtensionBuilder, String, String) Declaration public static Sql.SqlExtensionParam AddParameter(this Sql.ISqExtensionBuilder builder, string name, string value) Parameters Type Name Description Sql.ISqExtensionBuilder builder System.String name System.String value Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source Dec(Sql.ISqExtensionBuilder, ISqlExpression) Declaration public static ISqlExpression Dec(this Sql.ISqExtensionBuilder builder, ISqlExpression expr) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr Returns Type Description ISqlExpression | Improve this Doc View Source Div(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Div(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 ISqlExpression expr2 System.Type type Returns Type Description ISqlExpression | Improve this Doc View Source Div(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Div(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Div<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Div<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source Inc(Sql.ISqExtensionBuilder, ISqlExpression) Declaration public static ISqlExpression Inc(this Sql.ISqExtensionBuilder builder, ISqlExpression expr) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr Returns Type Description ISqlExpression | Improve this Doc View Source Mul(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Mul(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right System.Type type Returns Type Description ISqlExpression | Improve this Doc View Source Mul(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Mul(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Mul<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Mul<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source Sub(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Sub(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right System.Type type Returns Type Description ISqlExpression | Improve this Doc View Source Sub(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Sub(this Sql.ISqExtensionBuilder builder, ISqlExpression left, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Sub<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Sub<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Returns Type Description ISqlExpression Type Parameters Name Description T"
  },
  "api/LinqToDB.Linq.IQueryContext.html": {
    "href": "api/LinqToDB.Linq.IQueryContext.html",
    "title": "Interface IQueryContext | Linq To DB (aka linq2db)",
    "keywords": "Interface IQueryContext Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IQueryContext Properties | Improve this Doc View Source Context Declaration object Context { get; set; } Property Value Type Description System.Object | Improve this Doc View Source QueryHints Declaration List<string> QueryHints { get; } Property Value Type Description System.Collections.Generic.List<System.String> | Improve this Doc View Source SelectQuery Declaration SelectQuery SelectQuery { get; } Property Value Type Description SelectQuery Methods | Improve this Doc View Source GetParameters() Declaration SqlParameter[] GetParameters() Returns Type Description LinqToDB.SqlQuery.SqlParameter[]"
  },
  "api/LinqToDB.Linq.ISelectInsertable-2.html": {
    "href": "api/LinqToDB.Linq.ISelectInsertable-2.html",
    "title": "Interface ISelectInsertable<TSource, TTarget> | Linq To DB (aka linq2db)",
    "keywords": "Interface ISelectInsertable<TSource, TTarget> Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface ISelectInsertable<TSource, TTarget> Type Parameters Name Description TSource TTarget Extension Methods LinqExtensions.Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TSource, TValue>>) LinqExtensions.Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TValue>>) LinqExtensions.Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, TValue) LinqExtensions.Insert<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertWithIdentity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>)"
  },
  "api/LinqToDB.Linq.IUpdatable-1.html": {
    "href": "api/LinqToDB.Linq.IUpdatable-1.html",
    "title": "Interface IUpdatable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IUpdatable<T> Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IUpdatable<T> Type Parameters Name Description T Extension Methods LinqExtensions.Update<T>(IUpdatable<T>) LinqExtensions.Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) LinqExtensions.Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, TV)"
  },
  "api/LinqToDB.Linq.IValueInsertable-1.html": {
    "href": "api/LinqToDB.Linq.IValueInsertable-1.html",
    "title": "Interface IValueInsertable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IValueInsertable<T> Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IValueInsertable<T> Type Parameters Name Description T Extension Methods LinqExtensions.Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Insert<T>(IValueInsertable<T>) LinqExtensions.InsertWithIdentity<T>(IValueInsertable<T>)"
  },
  "api/LinqToDB.Mapping.MapValueAttribute.html": {
    "href": "api/LinqToDB.Mapping.MapValueAttribute.html",
    "title": "Class MapValueAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class MapValueAttribute Defines bidirectional mapping between enum field value, used on client and database value, stored in database and used in queries. Enumeration field could have multiple MapValueAttribute attributes. Mapping from database value to enumeration performed when you load data from database. Linq2db will search for enumeration field with MapValueAttribute with required value. If attribute with such value is not found, you will receive LinqToDBException error. If you cannot specify all possible values using MapValueAttribute , you can specify custom mapping using methods like SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) . Mapping from enumeration value performed when you save it to database or use in query. If your enum field has multiple MapValueAttribute attributes, you should mark one of them as default using IsDefault property. Inheritance System.Object System.Attribute MapValueAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = true)] public class MapValueAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source MapValueAttribute() Adds MapValueAttribute mapping to enum field. If you don't specify Value property, null value will be used. Declaration public MapValueAttribute() | Improve this Doc View Source MapValueAttribute(Object) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(object value) Parameters Type Name Description System.Object value Database value, mapped to current enumeration field. | Improve this Doc View Source MapValueAttribute(Object, Boolean) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(object value, bool isDefault) Parameters Type Name Description System.Object value Database value, mapped to current enumeration field. System.Boolean isDefault If true , database value from this attribute will be used for mapping to database value. | Improve this Doc View Source MapValueAttribute(String, Object) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(string configuration, object value) Parameters Type Name Description System.String configuration Name of configuration, for which this attribute instance will be used. System.Object value Database value, mapped to current enumeration field. | Improve this Doc View Source MapValueAttribute(String, Object, Boolean) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(string configuration, object value, bool isDefault) Parameters Type Name Description System.String configuration Name of configuration, for which this attribute instance will be used. System.Object value Database value, mapped to current enumeration field. System.Boolean isDefault If true , database value from this attribute will be used for mapping to database value. Properties | Improve this Doc View Source Configuration Name of configuration, for which this attribute instance will be used. null or empty string values correspond to default configuration. Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDefault If true , Value property value will be used for conversion from enumeration to database value. Declaration public bool IsDefault { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Database value, to which current enumeration field will be mapped when used in query or saved to database. This value, when loaded from database, will be converted to current enumeration field. Declaration public object Value { get; set; } Property Value Type Description System.Object"
  },
  "api/LinqToDB.Mapping.NotColumnAttribute.html": {
    "href": "api/LinqToDB.Mapping.NotColumnAttribute.html",
    "title": "Class NotColumnAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class NotColumnAttribute Inheritance System.Object System.Attribute ColumnAttribute NotColumnAttribute Inherited Members ColumnAttribute.Configuration ColumnAttribute.Name ColumnAttribute.MemberName ColumnAttribute.DataType ColumnAttribute.DbType ColumnAttribute.IsColumn ColumnAttribute.Storage ColumnAttribute.IsDiscriminator ColumnAttribute.SkipOnInsert ColumnAttribute.HasSkipOnInsert() ColumnAttribute.SkipOnUpdate ColumnAttribute.HasSkipOnUpdate() ColumnAttribute.IsIdentity ColumnAttribute.HasIsIdentity() ColumnAttribute.IsPrimaryKey ColumnAttribute.HasIsPrimaryKey() ColumnAttribute.PrimaryKeyOrder ColumnAttribute.CanBeNull ColumnAttribute.HasCanBeNull() ColumnAttribute.Length ColumnAttribute.HasLength() ColumnAttribute.Precision ColumnAttribute.HasPrecision() ColumnAttribute.Scale ColumnAttribute.HasScale() ColumnAttribute.CreateFormat Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true, Inherited = true)] public class NotColumnAttribute : ColumnAttribute, _Attribute Constructors | Improve this Doc View Source NotColumnAttribute() Declaration public NotColumnAttribute()"
  },
  "api/LinqToDB.Mapping.NotNullAttribute.html": {
    "href": "api/LinqToDB.Mapping.NotNullAttribute.html",
    "title": "Class NotNullAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class NotNullAttribute Inheritance System.Object System.Attribute NullableAttribute NotNullAttribute Inherited Members NullableAttribute.Configuration NullableAttribute.CanBeNull Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public sealed class NotNullAttribute : NullableAttribute, _Attribute Constructors | Improve this Doc View Source NotNullAttribute() Declaration public NotNullAttribute() | Improve this Doc View Source NotNullAttribute(String) Declaration public NotNullAttribute(string configuration) Parameters Type Name Description System.String configuration"
  },
  "api/LinqToDB.Mapping.NullableAttribute.html": {
    "href": "api/LinqToDB.Mapping.NullableAttribute.html",
    "title": "Class NullableAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class NullableAttribute Inheritance System.Object System.Attribute NullableAttribute NotNullAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)] public class NullableAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source NullableAttribute() Declaration public NullableAttribute() | Improve this Doc View Source NullableAttribute(Boolean) Declaration public NullableAttribute(bool isNullable) Parameters Type Name Description System.Boolean isNullable | Improve this Doc View Source NullableAttribute(String, Boolean) Declaration public NullableAttribute(string configuration, bool isNullable) Parameters Type Name Description System.String configuration System.Boolean isNullable Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.SchemaProvider.DataTypeInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.DataTypeInfo.html",
    "title": "Class DataTypeInfo | Linq To DB (aka linq2db)",
    "keywords": "Class DataTypeInfo Inheritance System.Object DataTypeInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class DataTypeInfo Fields | Improve this Doc View Source CreateFormat Declaration public string CreateFormat Field Value Type Description System.String | Improve this Doc View Source CreateParameters Declaration public string CreateParameters Field Value Type Description System.String | Improve this Doc View Source DataType Declaration public string DataType Field Value Type Description System.String | Improve this Doc View Source ProviderDbType Declaration public int ProviderDbType Field Value Type Description System.Int32 | Improve this Doc View Source TypeName Declaration public string TypeName Field Value Type Description System.String"
  },
  "api/LinqToDB.SchemaProvider.ForeignKeySchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ForeignKeySchema.html",
    "title": "Class ForeignKeySchema | Linq To DB (aka linq2db)",
    "keywords": "Class ForeignKeySchema Inheritance System.Object ForeignKeySchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ForeignKeySchema Properties | Improve this Doc View Source AssociationType Declaration public AssociationType AssociationType { get; set; } Property Value Type Description AssociationType | Improve this Doc View Source BackReference Declaration public ForeignKeySchema BackReference { get; set; } Property Value Type Description ForeignKeySchema | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source KeyName Declaration public string KeyName { get; set; } Property Value Type Description System.String | Improve this Doc View Source MemberName Declaration public string MemberName { get; set; } Property Value Type Description System.String | Improve this Doc View Source OtherColumns Declaration public List<ColumnSchema> OtherColumns { get; set; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema> | Improve this Doc View Source OtherTable Declaration public TableSchema OtherTable { get; set; } Property Value Type Description TableSchema | Improve this Doc View Source ThisColumns Declaration public List<ColumnSchema> ThisColumns { get; set; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema> | Improve this Doc View Source ThisTable Declaration public TableSchema ThisTable { get; set; } Property Value Type Description TableSchema"
  },
  "api/LinqToDB.SchemaProvider.ForeingKeyInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ForeingKeyInfo.html",
    "title": "Class ForeingKeyInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ForeingKeyInfo Inheritance System.Object ForeingKeyInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ForeingKeyInfo Fields | Improve this Doc View Source Name Declaration public string Name Field Value Type Description System.String | Improve this Doc View Source Ordinal Declaration public int Ordinal Field Value Type Description System.Int32 | Improve this Doc View Source OtherColumn Declaration public string OtherColumn Field Value Type Description System.String | Improve this Doc View Source OtherTableID Declaration public string OtherTableID Field Value Type Description System.String | Improve this Doc View Source ThisColumn Declaration public string ThisColumn Field Value Type Description System.String | Improve this Doc View Source ThisTableID Declaration public string ThisTableID Field Value Type Description System.String"
  },
  "api/LinqToDB.SchemaProvider.GetSchemaOptions.html": {
    "href": "api/LinqToDB.SchemaProvider.GetSchemaOptions.html",
    "title": "Class GetSchemaOptions | Linq To DB (aka linq2db)",
    "keywords": "Class GetSchemaOptions Inheritance System.Object GetSchemaOptions GetHanaSchemaOptions Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class GetSchemaOptions Fields | Improve this Doc View Source ExcludedCatalogs Declaration public string[] ExcludedCatalogs Field Value Type Description System.String[] | Improve this Doc View Source ExcludedSchemas Declaration public string[] ExcludedSchemas Field Value Type Description System.String[] | Improve this Doc View Source GenerateChar1AsString Declaration public bool GenerateChar1AsString Field Value Type Description System.Boolean | Improve this Doc View Source GetAssociationMemberName Declaration public Func<ForeignKeySchema, string> GetAssociationMemberName Field Value Type Description System.Func<LinqToDB.SchemaProvider.ForeignKeySchema, System.String> | Improve this Doc View Source GetProcedures Declaration public bool GetProcedures Field Value Type Description System.Boolean | Improve this Doc View Source GetTables Declaration public bool GetTables Field Value Type Description System.Boolean | Improve this Doc View Source IncludedCatalogs Declaration public string[] IncludedCatalogs Field Value Type Description System.String[] | Improve this Doc View Source IncludedSchemas Declaration public string[] IncludedSchemas Field Value Type Description System.String[] | Improve this Doc View Source LoadProcedure Declaration public Func<ProcedureSchema, bool> LoadProcedure Field Value Type Description System.Func<LinqToDB.SchemaProvider.ProcedureSchema, System.Boolean> | Improve this Doc View Source ProcedureLoadingProgress Declaration public Action<int, int> ProcedureLoadingProgress Field Value Type Description System.Action<System.Int32, System.Int32> | Improve this Doc View Source StringComparer Declaration public IEqualityComparer<string> StringComparer Field Value Type Description System.Collections.Generic.IEqualityComparer<System.String>"
  },
  "api/LinqToDB.Sql.DateParts.html": {
    "href": "api/LinqToDB.Sql.DateParts.html",
    "title": "Enum Sql.DateParts | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.DateParts Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum DateParts Fields Name Description Day DayOfYear Hour Millisecond Minute Month Quarter Second Week WeekDay Year Extension Methods Sql.Between<Sql.DateParts>(Sql.DateParts, Sql.DateParts) Sql.NotBetween<Sql.DateParts>(Sql.DateParts, Sql.DateParts)"
  },
  "api/LinqToDB.Sql.EnumAttribute.html": {
    "href": "api/LinqToDB.Sql.EnumAttribute.html",
    "title": "Class Sql.EnumAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.EnumAttribute Inheritance System.Object System.Attribute Sql.EnumAttribute Namespace : LinqToDB Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Enum, AllowMultiple = false, Inherited = false)] public class EnumAttribute : Attribute, _Attribute"
  },
  "api/LinqToDB.Sql.ExpressionAttribute.html": {
    "href": "api/LinqToDB.Sql.ExpressionAttribute.html",
    "title": "Class Sql.ExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ExpressionAttribute Inheritance System.Object System.Attribute Sql.ExpressionAttribute Sql.DatePartAttribute Sql.ExtensionAttribute Sql.FunctionAttribute Sql.PropertyAttribute Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true, Inherited = false)] public class ExpressionAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ExpressionAttribute(String) Declaration public ExpressionAttribute(string expression) Parameters Type Name Description System.String expression | Improve this Doc View Source ExpressionAttribute(String, Int32[]) Declaration public ExpressionAttribute(string expression, params int[] argIndices) Parameters Type Name Description System.String expression System.Int32[] argIndices | Improve this Doc View Source ExpressionAttribute(String, String) Declaration public ExpressionAttribute(string configuration, string expression) Parameters Type Name Description System.String configuration System.String expression | Improve this Doc View Source ExpressionAttribute(String, String, Int32[]) Declaration public ExpressionAttribute(string configuration, string expression, params int[] argIndices) Parameters Type Name Description System.String configuration System.String expression System.Int32[] argIndices Properties | Improve this Doc View Source ArgIndices Declaration public int[] ArgIndices { get; set; } Property Value Type Description System.Int32[] | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source ExpectExpression Declaration public bool ExpectExpression { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Expression Declaration public string Expression { get; set; } Property Value Type Description System.String | Improve this Doc View Source InlineParameters Declaration public bool InlineParameters { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPredicate Declaration public bool IsPredicate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Precedence Declaration public int Precedence { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PreferServerSide Declaration public bool PreferServerSide { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ServerSideOnly Declaration public bool ServerSideOnly { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ConvertArgs(MemberInfo, ISqlExpression[]) Declaration protected ISqlExpression[] ConvertArgs(MemberInfo member, ISqlExpression[] args) Parameters Type Name Description System.Reflection.MemberInfo member LinqToDB.SqlQuery.ISqlExpression[] args Returns Type Description LinqToDB.SqlQuery.ISqlExpression[] | Improve this Doc View Source GetExpression(MappingSchema, Expression, Func<Expression, ISqlExpression>) Declaration public virtual ISqlExpression GetExpression(MappingSchema mapping, Expression expression, Func<Expression, ISqlExpression> converter) Parameters Type Name Description MappingSchema mapping System.Linq.Expressions.Expression expression System.Func<System.Linq.Expressions.Expression, LinqToDB.SqlQuery.ISqlExpression> converter Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(MemberInfo, ISqlExpression[]) Declaration public virtual ISqlExpression GetExpression(MemberInfo member, params ISqlExpression[] args) Parameters Type Name Description System.Reflection.MemberInfo member LinqToDB.SqlQuery.ISqlExpression[] args Returns Type Description ISqlExpression"
  },
  "api/LinqToDB.Sql.ExtensionAttribute.ConvertHelper.html": {
    "href": "api/LinqToDB.Sql.ExtensionAttribute.ConvertHelper.html",
    "title": "Class Sql.ExtensionAttribute.ConvertHelper | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ExtensionAttribute.ConvertHelper Inheritance System.Object Sql.ExtensionAttribute.ConvertHelper Namespace : LinqToDB Assembly : linq2db.dll Syntax protected class ConvertHelper Constructors | Improve this Doc View Source ConvertHelper(Func<Expression, ISqlExpression>) Declaration public ConvertHelper(Func<Expression, ISqlExpression> converter) Parameters Type Name Description System.Func<System.Linq.Expressions.Expression, LinqToDB.SqlQuery.ISqlExpression> converter Methods | Improve this Doc View Source AddTypeMapping(Type, Expression) Declaration public void AddTypeMapping(Type type, Expression expr) Parameters Type Name Description System.Type type System.Linq.Expressions.Expression expr | Improve this Doc View Source Convert(Expression) Declaration public ISqlExpression Convert(Expression exp) Parameters Type Name Description System.Linq.Expressions.Expression exp Returns Type Description ISqlExpression"
  },
  "api/LinqToDB.SqlProvider.ValueToSqlConverter.html": {
    "href": "api/LinqToDB.SqlProvider.ValueToSqlConverter.html",
    "title": "Class ValueToSqlConverter | Linq To DB (aka linq2db)",
    "keywords": "Class ValueToSqlConverter Inheritance System.Object ValueToSqlConverter Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public class ValueToSqlConverter Constructors | Improve this Doc View Source ValueToSqlConverter(ValueToSqlConverter[]) Declaration public ValueToSqlConverter(params ValueToSqlConverter[] converters) Parameters Type Name Description LinqToDB.SqlProvider.ValueToSqlConverter[] converters Methods | Improve this Doc View Source Convert(StringBuilder, SqlDataType, Object) Declaration public StringBuilder Convert(StringBuilder stringBuilder, SqlDataType dataType, object value) Parameters Type Name Description System.Text.StringBuilder stringBuilder SqlDataType dataType System.Object value Returns Type Description System.Text.StringBuilder | Improve this Doc View Source Convert(StringBuilder, Object) Declaration public StringBuilder Convert(StringBuilder stringBuilder, object value) Parameters Type Name Description System.Text.StringBuilder stringBuilder System.Object value Returns Type Description System.Text.StringBuilder | Improve this Doc View Source SetConverter(Type, Action<StringBuilder, SqlDataType, Object>) Declaration public void SetConverter(Type type, Action<StringBuilder, SqlDataType, object> converter) Parameters Type Name Description System.Type type System.Action<System.Text.StringBuilder, LinqToDB.SqlQuery.SqlDataType, System.Object> converter | Improve this Doc View Source TryConvert(StringBuilder, SqlDataType, Object) Declaration public bool TryConvert(StringBuilder stringBuilder, SqlDataType dataType, object value) Parameters Type Name Description System.Text.StringBuilder stringBuilder SqlDataType dataType System.Object value Returns Type Description System.Boolean | Improve this Doc View Source TryConvert(StringBuilder, Object) Declaration public bool TryConvert(StringBuilder stringBuilder, object value) Parameters Type Name Description System.Text.StringBuilder stringBuilder System.Object value Returns Type Description System.Boolean"
  },
  "api/LinqToDB.SqlQuery.ReservedWords.html": {
    "href": "api/LinqToDB.SqlQuery.ReservedWords.html",
    "title": "Class ReservedWords | Linq To DB (aka linq2db)",
    "keywords": "Class ReservedWords Inheritance System.Object ReservedWords Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class ReservedWords Methods | Improve this Doc View Source Add(String, String) Declaration public static void Add(string word, string providerName = null) Parameters Type Name Description System.String word System.String providerName | Improve this Doc View Source IsReserved(String, String) Declaration public static bool IsReserved(string word, string providerName = null) Parameters Type Name Description System.String word System.String providerName Returns Type Description System.Boolean"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.ClauseBase-2.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.ClauseBase-2.html",
    "title": "Class SelectQuery.ClauseBase<T1, T2> | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.ClauseBase<T1, T2> Inheritance System.Object LinqToDB.SqlQuery.SelectQuery.ConditionBase<T1, T2> SelectQuery.ClauseBase<T1, T2> SelectQuery.WhereClause Inherited Members SelectQuery.ConditionBase<T1, T2>.Search SelectQuery.ConditionBase<T1, T2>.GetNext() SelectQuery.ConditionBase<T1, T2>.SetOr(Boolean) SelectQuery.ConditionBase<T1, T2>.Not SelectQuery.ConditionBase<T1, T2>.Expr(ISqlExpression) SelectQuery.ConditionBase<T1, T2>.Field(SqlField) SelectQuery.ConditionBase<T1, T2>.SubQuery(SelectQuery) SelectQuery.ConditionBase<T1, T2>.Value(Object) SelectQuery.ConditionBase<T1, T2>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class ClauseBase<T1, T2> : SelectQuery.ConditionBase<T1, T2>, SelectQuery.IConditionExpr<SelectQuery.ConditionBase<T1, T2>.Expr_> where T1 : SelectQuery.ClauseBase<T1, T2> Type Parameters Name Description T1 T2 Constructors | Improve this Doc View Source ClauseBase(SelectQuery) Declaration protected ClauseBase(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source From Declaration public SelectQuery.FromClause From { get; } Property Value Type Description SelectQuery.FromClause | Improve this Doc View Source GroupBy Declaration public SelectQuery.GroupByClause GroupBy { get; } Property Value Type Description SelectQuery.GroupByClause | Improve this Doc View Source Having Declaration public SelectQuery.WhereClause Having { get; } Property Value Type Description SelectQuery.WhereClause | Improve this Doc View Source OrderBy Declaration public SelectQuery.OrderByClause OrderBy { get; } Property Value Type Description SelectQuery.OrderByClause | Improve this Doc View Source Select Declaration public SelectQuery.SelectClause Select { get; } Property Value Type Description SelectQuery.SelectClause | Improve this Doc View Source SelectQuery Declaration protected SelectQuery SelectQuery { get; } Property Value Type Description SelectQuery Methods | Improve this Doc View Source End() Declaration public SelectQuery End() Returns Type Description SelectQuery"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.ClauseBase.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.ClauseBase.html",
    "title": "Class SelectQuery.ClauseBase | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.ClauseBase Inheritance System.Object SelectQuery.ClauseBase SelectQuery.FromClause SelectQuery.GroupByClause SelectQuery.OrderByClause SelectQuery.SelectClause SelectQuery.WhereClause.Next Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class ClauseBase Constructors | Improve this Doc View Source ClauseBase(SelectQuery) Declaration protected ClauseBase(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source From Declaration public SelectQuery.FromClause From { get; } Property Value Type Description SelectQuery.FromClause | Improve this Doc View Source GroupBy Declaration public SelectQuery.GroupByClause GroupBy { get; } Property Value Type Description SelectQuery.GroupByClause | Improve this Doc View Source Having Declaration public SelectQuery.WhereClause Having { get; } Property Value Type Description SelectQuery.WhereClause | Improve this Doc View Source OrderBy Declaration public SelectQuery.OrderByClause OrderBy { get; } Property Value Type Description SelectQuery.OrderByClause | Improve this Doc View Source Select Declaration public SelectQuery.SelectClause Select { get; } Property Value Type Description SelectQuery.SelectClause | Improve this Doc View Source SelectQuery Declaration protected SelectQuery SelectQuery { get; } Property Value Type Description SelectQuery | Improve this Doc View Source Where Declaration public SelectQuery.WhereClause Where { get; } Property Value Type Description SelectQuery.WhereClause Methods | Improve this Doc View Source End() Declaration public SelectQuery End() Returns Type Description SelectQuery"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Predicate.Like.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Predicate.Like.html",
    "title": "Class SelectQuery.Predicate.Like | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Predicate.Like Inheritance System.Object SelectQuery.Predicate SelectQuery.Predicate.Expr SelectQuery.Predicate.NotExpr SelectQuery.Predicate.Like Inherited Members SelectQuery.Predicate.NotExpr.IsNot SelectQuery.Predicate.Expr.Expr1 SelectQuery.Predicate.Expr.CanBeNull SelectQuery.Predicate.Precedence SelectQuery.Predicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SelectQuery.Predicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SelectQuery.Predicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Like : SelectQuery.Predicate.NotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source Like(ISqlExpression, Boolean, ISqlExpression, ISqlExpression) Declaration public Like(ISqlExpression exp1, bool isNot, ISqlExpression exp2, ISqlExpression escape) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot ISqlExpression exp2 ISqlExpression escape Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SelectQuery.Predicate.NotExpr.ElementType | Improve this Doc View Source Escape Declaration public ISqlExpression Escape { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Overrides SelectQuery.Predicate.NotExpr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Overrides SelectQuery.Predicate.NotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Overrides SelectQuery.Predicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Predicate.NotExpr.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Predicate.NotExpr.html",
    "title": "Class SelectQuery.Predicate.NotExpr | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Predicate.NotExpr Inheritance System.Object SelectQuery.Predicate SelectQuery.Predicate.Expr SelectQuery.Predicate.NotExpr SelectQuery.Predicate.Between SelectQuery.Predicate.InList SelectQuery.Predicate.InSubQuery SelectQuery.Predicate.IsNull SelectQuery.Predicate.Like Inherited Members SelectQuery.Predicate.Expr.Expr1 SelectQuery.Predicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SelectQuery.Predicate.Expr.CanBeNull SelectQuery.Predicate.Precedence SelectQuery.Predicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SelectQuery.Predicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SelectQuery.Predicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class NotExpr : SelectQuery.Predicate.Expr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source NotExpr(ISqlExpression, Boolean, Int32) Declaration public NotExpr(ISqlExpression exp1, bool isNot, int precedence) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot System.Int32 precedence Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SelectQuery.Predicate.Expr.ElementType | Improve this Doc View Source IsNot Declaration public bool IsNot { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Overrides SelectQuery.Predicate.Expr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Overrides SelectQuery.Predicate.Expr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Predicate.Operator.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Predicate.Operator.html",
    "title": "Enum SelectQuery.Predicate.Operator | Linq To DB (aka linq2db)",
    "keywords": "Enum SelectQuery.Predicate.Operator Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum Operator Fields Name Description Equal Greater GreaterOrEqual Less LessOrEqual NotEqual NotGreater NotLess Extension Methods Sql.Between<SelectQuery.Predicate.Operator>(SelectQuery.Predicate.Operator, SelectQuery.Predicate.Operator) Sql.NotBetween<SelectQuery.Predicate.Operator>(SelectQuery.Predicate.Operator, SelectQuery.Predicate.Operator)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Predicate.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Predicate.html",
    "title": "Class SelectQuery.Predicate | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Predicate Inheritance System.Object SelectQuery.Predicate SelectQuery.Predicate.Expr SelectQuery.Predicate.FuncLike Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class Predicate : ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source Predicate(Int32) Declaration protected Predicate(int precedence) Parameters Type Name Description System.Int32 precedence Properties | Improve this Doc View Source CanBeNull Declaration public abstract bool CanBeNull { get; } Property Value Type Description System.Boolean Implements ISqlPredicate.CanBeNull | Improve this Doc View Source ElementType Declaration public abstract QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlPredicate.Precedence Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected abstract ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected abstract void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected abstract void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> action) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> action Explicit Interface Implementations | Improve this Doc View Source ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration ICloneableElement ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.AnalyticFunctions.IBetweenStartExpected-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IBetweenStartExpected-1.html",
    "title": "Interface AnalyticFunctions.IBetweenStartExpected<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IBetweenStartExpected<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IBetweenStartExpected<out TR> Type Parameters Name Description TR Properties | Improve this Doc View Source CurrentRow Declaration [Sql.Extension(\"CURRENT ROW\", TokenName = \"start_boundary\")] AnalyticFunctions.IAndExpected<TR> CurrentRow { get; } Property Value Type Description LinqToDB.AnalyticFunctions.IAndExpected<TR> | Improve this Doc View Source UnboundedPreceding Declaration [Sql.Extension(\"UNBOUNDED PRECEDING\", TokenName = \"start_boundary\")] AnalyticFunctions.IAndExpected<TR> UnboundedPreceding { get; } Property Value Type Description LinqToDB.AnalyticFunctions.IAndExpected<TR> Methods | Improve this Doc View Source ValuePreceding<T>(T) Declaration [Sql.Extension(\"{value_expr} PRECEDING\", TokenName = \"start_boundary\")] AnalyticFunctions.IAndExpected<TR> ValuePreceding<T>([ExprParameter(\"value_expr\")] T value) Parameters Type Name Description T value Returns Type Description LinqToDB.AnalyticFunctions.IAndExpected<TR> Type Parameters Name Description T"
  },
  "api/LinqToDB.AnalyticFunctions.INeedsOrderByOnly-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.INeedsOrderByOnly-1.html",
    "title": "Interface AnalyticFunctions.INeedsOrderByOnly<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.INeedsOrderByOnly<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface INeedsOrderByOnly<out TR> Type Parameters Name Description TR Methods | Improve this Doc View Source OrderBy<TKey>(TKey) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr}\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedReadyToFunction<TR> OrderBy<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source OrderBy<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr}\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedReadyToFunction<TR> OrderBy<TKey>([ExprParameter] TKey expr, Sql.NullsPosition nulls) Parameters Type Name Description TKey expr Sql.NullsPosition nulls Returns Type Description LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source OrderByDesc<TKey>(TKey) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedReadyToFunction<TR> OrderByDesc<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source OrderByDesc<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"ORDER BY {order_item, ', '}\", TokenName = \"order_by_clause\")] [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedReadyToFunction<TR> OrderByDesc<TKey>([ExprParameter] TKey expr, Sql.NullsPosition nulls) Parameters Type Name Description TKey expr Sql.NullsPosition nulls Returns Type Description LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR> Type Parameters Name Description TKey"
  },
  "api/LinqToDB.AnalyticFunctions.IOverMayHavePartition-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IOverMayHavePartition-1.html",
    "title": "Interface AnalyticFunctions.IOverMayHavePartition<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IOverMayHavePartition<TR> Inherited Members AnalyticFunctions.IReadyToFunction<TR>.ToValue() Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IOverMayHavePartition<out TR> : AnalyticFunctions.IReadyToFunction<TR> Type Parameters Name Description TR Methods | Improve this Doc View Source PartitionBy(Object[]) Declaration [Sql.Extension(\"PARTITION BY {expr, ', '}\", TokenName = \"query_partition_clause\")] AnalyticFunctions.IReadyToFunction<TR> PartitionBy([ExprParameter(\"expr\")] params object[] expressions) Parameters Type Name Description System.Object[] expressions Returns Type Description LinqToDB.AnalyticFunctions.IReadyToFunction<TR>"
  },
  "api/LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition-1.html",
    "title": "Interface AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR> Inherited Members AnalyticFunctions.IReadyToFunction<TR>.ToValue() Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IReadyToFunctionOrOverWithPartition<out TR> : AnalyticFunctions.IReadyToFunction<TR> Type Parameters Name Description TR Methods | Improve this Doc View Source Over() Declaration [Sql.Extension(\"OVER({query_partition_clause?})\", TokenName = \"over\")] AnalyticFunctions.IOverMayHavePartition<TR> Over() Returns Type Description LinqToDB.AnalyticFunctions.IOverMayHavePartition<TR>"
  },
  "api/LinqToDB.Common.Convert-2.html": {
    "href": "api/LinqToDB.Common.Convert-2.html",
    "title": "Class Convert<TFrom, TTo> | Linq To DB (aka linq2db)",
    "keywords": "Class Convert<TFrom, TTo> Inheritance System.Object Convert<TFrom, TTo> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Convert<TFrom, TTo> Type Parameters Name Description TFrom TTo Properties | Improve this Doc View Source Expression Declaration public static Expression<Func<TFrom, TTo>> Expression { get; set; } Property Value Type Description System.Linq.Expressions.Expression<System.Func<TFrom, TTo>> | Improve this Doc View Source From Declaration public static Func<TFrom, TTo> From { get; } Property Value Type Description System.Func<TFrom, TTo> | Improve this Doc View Source Lambda Declaration public static Func<TFrom, TTo> Lambda { get; set; } Property Value Type Description System.Func<TFrom, TTo>"
  },
  "api/LinqToDB.CompiledQuery.html": {
    "href": "api/LinqToDB.CompiledQuery.html",
    "title": "Class CompiledQuery | Linq To DB (aka linq2db)",
    "keywords": "Class CompiledQuery Provides for compilation and caching of queries for reuse. Inheritance System.Object CompiledQuery Namespace : LinqToDB Assembly : linq2db.dll Syntax public class CompiledQuery Constructors | Improve this Doc View Source CompiledQuery(LambdaExpression) Declaration protected CompiledQuery(LambdaExpression query) Parameters Type Name Description System.Linq.Expressions.LambdaExpression query Methods | Improve this Doc View Source Compile<TDC, TResult>(Expression<Func<TDC, TResult>>) Compiles the query. Declaration public static Func<TDC, TResult> Compile<TDC, TResult>(Expression<Func<TDC, TResult>> query)where TDC : IDataContext Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TDC, TResult>> query The query expression to be compiled. Returns Type Description System.Func<TDC, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC TResult Returned type of the delegate returned by the method. | Improve this Doc View Source Compile<TDC, TArg1, TResult>(Expression<Func<TDC, TArg1, TResult>>) Compiles the query. Declaration public static Func<TDC, TArg1, TResult> Compile<TDC, TArg1, TResult>(Expression<Func<TDC, TArg1, TResult>> query)where TDC : IDataContext Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TDC, TArg1, TResult>> query The query expression to be compiled. Returns Type Description System.Func<TDC, TArg1, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg1 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TResult Returned type of the delegate returned by the method. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TResult>(Expression<Func<TDC, TArg1, TArg2, TResult>>) Compiles the query. Declaration public static Func<TDC, TArg1, TArg2, TResult> Compile<TDC, TArg1, TArg2, TResult>(Expression<Func<TDC, TArg1, TArg2, TResult>> query)where TDC : IDataContext Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TDC, TArg1, TArg2, TResult>> query The query expression to be compiled. Returns Type Description System.Func<TDC, TArg1, TArg2, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC TArg1 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg2 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TResult Returned type of the delegate returned by the method. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TArg3, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TResult>>) Compiles the query. Declaration public static Func<TDC, TArg1, TArg2, TArg3, TResult> Compile<TDC, TArg1, TArg2, TArg3, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TResult>> query)where TDC : IDataContext Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TDC, TArg1, TArg2, TArg3, TResult>> query The query expression to be compiled. Returns Type Description System.Func<TDC, TArg1, TArg2, TArg3, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC TArg1 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg2 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg3 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TResult Returned type of the delegate returned by the method. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TArg3, TArg4, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult>>) Compiles the query. Declaration public static Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult> Compile<TDC, TArg1, TArg2, TArg3, TArg4, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult>> query)where TDC : IDataContext Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult>> query The query expression to be compiled. Returns Type Description System.Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC TArg1 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg2 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg3 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg4 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TResult Returned type of the delegate returned by the method. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>>) Compiles the query. Declaration public static Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Compile<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> query)where TDC : IDataContext Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> query The query expression to be compiled. Returns Type Description System.Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC TArg1 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg2 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg3 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg4 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TArg5 Represents the type of the parameter that has to be passed in when executing the delegate returned by the method. TResult Returned type of the delegate returned by the method. | Improve this Doc View Source Invoke<TDC, TResult>(TDC) Declaration public TResult Invoke<TDC, TResult>(TDC dataContext) Parameters Type Name Description TDC dataContext Returns Type Description TResult Type Parameters Name Description TDC TResult | Improve this Doc View Source Invoke<TDC, T1, TResult>(TDC, T1) Declaration public TResult Invoke<TDC, T1, TResult>(TDC dataContext, T1 arg1) Parameters Type Name Description TDC dataContext T1 arg1 Returns Type Description TResult Type Parameters Name Description TDC T1 TResult | Improve this Doc View Source Invoke<TDC, T1, T2, TResult>(TDC, T1, T2) Declaration public TResult Invoke<TDC, T1, T2, TResult>(TDC dataContext, T1 arg1, T2 arg2) Parameters Type Name Description TDC dataContext T1 arg1 T2 arg2 Returns Type Description TResult Type Parameters Name Description TDC T1 T2 TResult | Improve this Doc View Source Invoke<TDC, T1, T2, T3, TResult>(TDC, T1, T2, T3) Declaration public TResult Invoke<TDC, T1, T2, T3, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description TDC dataContext T1 arg1 T2 arg2 T3 arg3 Returns Type Description TResult Type Parameters Name Description TDC T1 T2 T3 TResult | Improve this Doc View Source Invoke<TDC, T1, T2, T3, T4, TResult>(TDC, T1, T2, T3, T4) Declaration public TResult Invoke<TDC, T1, T2, T3, T4, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description TDC dataContext T1 arg1 T2 arg2 T3 arg3 T4 arg4 Returns Type Description TResult Type Parameters Name Description TDC T1 T2 T3 T4 TResult | Improve this Doc View Source Invoke<TDC, T1, T2, T3, T4, T5, TResult>(TDC, T1, T2, T3, T4, T5) Declaration public TResult Invoke<TDC, T1, T2, T3, T4, T5, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description TDC dataContext T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 Returns Type Description TResult Type Parameters Name Description TDC T1 T2 T3 T4 T5 TResult"
  },
  "api/LinqToDB.Configuration.ILinqToDBSettings.html": {
    "href": "api/LinqToDB.Configuration.ILinqToDBSettings.html",
    "title": "Interface ILinqToDBSettings | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqToDBSettings Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public interface ILinqToDBSettings Properties | Improve this Doc View Source ConnectionStrings Declaration IEnumerable<IConnectionStringSettings> ConnectionStrings { get; } Property Value Type Description System.Collections.Generic.IEnumerable<LinqToDB.Configuration.IConnectionStringSettings> | Improve this Doc View Source DataProviders Declaration IEnumerable<IDataProviderSettings> DataProviders { get; } Property Value Type Description System.Collections.Generic.IEnumerable<LinqToDB.Configuration.IDataProviderSettings> | Improve this Doc View Source DefaultConfiguration Declaration string DefaultConfiguration { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultDataProvider Declaration string DefaultDataProvider { get; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Data.CommandInfo.html": {
    "href": "api/LinqToDB.Data.CommandInfo.html",
    "title": "Class CommandInfo | Linq To DB (aka linq2db)",
    "keywords": "Class CommandInfo Inheritance System.Object CommandInfo Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class CommandInfo Constructors | Improve this Doc View Source CommandInfo(DataConnection, String) Declaration public CommandInfo(DataConnection dataConnection, string commandText) Parameters Type Name Description DataConnection dataConnection System.String commandText | Improve this Doc View Source CommandInfo(DataConnection, String, DataParameter) Declaration public CommandInfo(DataConnection dataConnection, string commandText, DataParameter parameter) Parameters Type Name Description DataConnection dataConnection System.String commandText DataParameter parameter | Improve this Doc View Source CommandInfo(DataConnection, String, DataParameter[]) Declaration public CommandInfo(DataConnection dataConnection, string commandText, params DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection System.String commandText LinqToDB.Data.DataParameter[] parameters | Improve this Doc View Source CommandInfo(DataConnection, String, Object) Declaration public CommandInfo(DataConnection dataConnection, string commandText, object parameters) Parameters Type Name Description DataConnection dataConnection System.String commandText System.Object parameters Fields | Improve this Doc View Source CommandBehavior Declaration public CommandBehavior CommandBehavior Field Value Type Description System.Data.CommandBehavior | Improve this Doc View Source CommandText Declaration public string CommandText Field Value Type Description System.String | Improve this Doc View Source CommandType Declaration public CommandType CommandType Field Value Type Description System.Data.CommandType | Improve this Doc View Source DataConnection Declaration public DataConnection DataConnection Field Value Type Description DataConnection | Improve this Doc View Source Parameters Declaration public DataParameter[] Parameters Field Value Type Description LinqToDB.Data.DataParameter[] Methods | Improve this Doc View Source ClearObjectReaderCache() Declaration public static void ClearObjectReaderCache() | Improve this Doc View Source Execute() Declaration public int Execute() Returns Type Description System.Int32 | Improve this Doc View Source Execute<T>() Declaration public T Execute<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteAsync() Declaration public Task<int> ExecuteAsync() Returns Type Description System.Threading.Tasks.Task<System.Int32> | Improve this Doc View Source ExecuteAsync(CancellationToken) Declaration public Task<int> ExecuteAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Int32> | Improve this Doc View Source ExecuteAsync<T>() Declaration public Task<T> ExecuteAsync<T>() Returns Type Description System.Threading.Tasks.Task<T> Type Parameters Name Description T | Improve this Doc View Source ExecuteAsync<T>(CancellationToken) Declaration public Task<T> ExecuteAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<T> Type Parameters Name Description T | Improve this Doc View Source ExecuteProc() Declaration public int ExecuteProc() Returns Type Description System.Int32 | Improve this Doc View Source ExecuteProc<T>() Declaration public T ExecuteProc<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteProcAsync() Declaration public Task<int> ExecuteProcAsync() Returns Type Description System.Threading.Tasks.Task<System.Int32> | Improve this Doc View Source ExecuteProcAsync(CancellationToken) Declaration public Task<int> ExecuteProcAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Int32> | Improve this Doc View Source ExecuteReader() Declaration public DataReader ExecuteReader() Returns Type Description DataReader | Improve this Doc View Source ExecuteReaderAsync() Declaration public Task<DataReaderAsync> ExecuteReaderAsync() Returns Type Description System.Threading.Tasks.Task<LinqToDB.Data.DataReaderAsync> | Improve this Doc View Source ExecuteReaderAsync(CancellationToken) Declaration public Task<DataReaderAsync> ExecuteReaderAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<LinqToDB.Data.DataReaderAsync> | Improve this Doc View Source ExecuteReaderProc() Declaration public DataReader ExecuteReaderProc() Returns Type Description DataReader | Improve this Doc View Source Query<T>() Declaration public IEnumerable<T> Query<T>() Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(T) Declaration public IEnumerable<T> Query<T>(T template) Parameters Type Name Description T template Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(Func<IDataReader, T>) Declaration public IEnumerable<T> Query<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Action<T>) Declaration public Task QueryForEachAsync<T>(Action<T> action) Parameters Type Name Description System.Action<T> action Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Action<T>, CancellationToken) Declaration public Task QueryForEachAsync<T>(Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description System.Action<T> action System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Func<IDataReader, T>, Action<T>) Declaration public Task QueryForEachAsync<T>(Func<IDataReader, T> objectReader, Action<T> action) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader System.Action<T> action Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Func<IDataReader, T>, Action<T>, CancellationToken) Declaration public Task QueryForEachAsync<T>(Func<IDataReader, T> objectReader, Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader System.Action<T> action System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source QueryProc<T>() Declaration public IEnumerable<T> QueryProc<T>() Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source QueryProc<T>(T) Declaration public IEnumerable<T> QueryProc<T>(T template) Parameters Type Name Description T template Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source QueryProc<T>(Func<IDataReader, T>) Declaration public IEnumerable<T> QueryProc<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>() Declaration public Task<T[]> QueryToArrayAsync<T>() Returns Type Description System.Threading.Tasks.Task<T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(Func<IDataReader, T>) Declaration public Task<T[]> QueryToArrayAsync<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader Returns Type Description System.Threading.Tasks.Task<T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(Func<IDataReader, T>, CancellationToken) Declaration public Task<T[]> QueryToArrayAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(CancellationToken) Declaration public Task<T[]> QueryToArrayAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>() Declaration public Task<List<T>> QueryToListAsync<T>() Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(Func<IDataReader, T>) Declaration public Task<List<T>> QueryToListAsync<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(Func<IDataReader, T>, CancellationToken) Declaration public Task<List<T>> QueryToListAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken) Parameters Type Name Description System.Func<System.Data.IDataReader, T> objectReader System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(CancellationToken) Declaration public Task<List<T>> QueryToListAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<T>> Type Parameters Name Description T"
  },
  "api/LinqToDB.Data.RetryPolicy.RetryLimitExceededException.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.RetryLimitExceededException.html",
    "title": "Class RetryLimitExceededException | Linq To DB (aka linq2db)",
    "keywords": "Class RetryLimitExceededException Inheritance System.Object System.Exception LinqToDBException RetryLimitExceededException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState Namespace : LinqToDB.Data.RetryPolicy Assembly : linq2db.dll Syntax public class RetryLimitExceededException : LinqToDBException, ISerializable, _Exception Constructors | Improve this Doc View Source RetryLimitExceededException() Declaration public RetryLimitExceededException() | Improve this Doc View Source RetryLimitExceededException(Exception) Declaration public RetryLimitExceededException(Exception innerException) Parameters Type Name Description System.Exception innerException | Improve this Doc View Source RetryLimitExceededException(SerializationInfo, StreamingContext) Declaration protected RetryLimitExceededException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context"
  },
  "api/LinqToDB.Data.RetryPolicy.RetryPolicyBase.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.RetryPolicyBase.html",
    "title": "Class RetryPolicyBase | Linq To DB (aka linq2db)",
    "keywords": "Class RetryPolicyBase Inheritance System.Object RetryPolicyBase SqlServerRetryPolicy Namespace : LinqToDB.Data.RetryPolicy Assembly : linq2db.dll Syntax public abstract class RetryPolicyBase : IRetryPolicy Constructors | Improve this Doc View Source RetryPolicyBase(Int32, TimeSpan) Creates a new instance of RetryPolicyBase . Declaration protected RetryPolicyBase(int maxRetryCount, TimeSpan maxRetryDelay) Parameters Type Name Description System.Int32 maxRetryCount The maximum number of retry attempts. System.TimeSpan maxRetryDelay The maximum delay in milliseconds between retries. Properties | Improve this Doc View Source ExceptionsEncountered The list of exceptions that caused the operation to be retried so far. Declaration protected virtual List<Exception> ExceptionsEncountered { get; } Property Value Type Description System.Collections.Generic.List<System.Exception> | Improve this Doc View Source MaxRetryCount The maximum number of retry attempts. Declaration protected virtual int MaxRetryCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxRetryDelay The maximum delay in milliseconds between retries. Declaration protected virtual TimeSpan MaxRetryDelay { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Random A pseudo-random number generater that can be used to vary the delay between retries. Declaration protected virtual Random Random { get; } Property Value Type Description System.Random | Improve this Doc View Source Suspended Indicates whether the strategy is suspended. The strategy is typically suspending while executing to avoid recursive execution from nested operations. Declaration protected static bool Suspended { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Execute(Action) Declaration public virtual void Execute(Action operation) Parameters Type Name Description System.Action operation Implements IRetryPolicy.Execute(Action) | Improve this Doc View Source Execute<TResult>(Func<TResult>) Executes the specified operation and returns the result. Declaration public virtual TResult Execute<TResult>(Func<TResult> operation) Parameters Type Name Description System.Func<TResult> operation A delegate representing an executable operation that returns the result of type TResult . Returns Type Description TResult The result from the operation. Type Parameters Name Description TResult The return type of operation . Implements IRetryPolicy.Execute<TResult>(Func<TResult>) | Improve this Doc View Source ExecuteAsync(Func<CancellationToken, Task>, CancellationToken) Declaration public Task ExecuteAsync(Func<CancellationToken, Task> operation, CancellationToken cancellationToken = null) Parameters Type Name Description System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> operation System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Implements IRetryPolicy.ExecuteAsync(Func<CancellationToken, Task>, CancellationToken) | Improve this Doc View Source ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) Executes the specified asynchronous operation and returns the result. Declaration public virtual Task<TResult> ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken = null) Parameters Type Name Description System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>> operation A function that returns a started task of type TResult . System.Threading.CancellationToken cancellationToken A cancellation token used to cancel the retry operation, but not operations that are already in flight or that already completed successfully. Returns Type Description System.Threading.Tasks.Task<TResult> A task that will run to completion if the original task completes successfully (either the first time or after retrying transient failures). If the task fails with a non-transient error or the retry limit is reached, the returned task will become faulted and the exception must be observed. Type Parameters Name Description TResult The result type of the System.Threading.Tasks.Task<TResult> returned by operation . Implements IRetryPolicy.ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) Exceptions Type Condition RetryLimitExceededException Thrown if the operation has not succeeded after the configured number of retries. | Improve this Doc View Source GetNextDelay(Exception) Determines whether the operation should be retried and the delay before the next attempt. Declaration protected virtual TimeSpan? GetNextDelay(Exception lastException) Parameters Type Name Description System.Exception lastException The exception thrown during the last execution attempt. Returns Type Description System.Nullable<System.TimeSpan> Returns the delay indicating how long to wait for before the next execution attempt if the operation should be retried; null otherwise | Improve this Doc View Source OnFirstExecution() Method called before the first operation execution Declaration protected virtual void OnFirstExecution() | Improve this Doc View Source OnRetry() Method called before retrying the operation execution Declaration protected virtual void OnRetry() | Improve this Doc View Source ShouldRetryOn(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration protected abstract bool ShouldRetryOn(Exception exception) Parameters Type Name Description System.Exception exception The exception object to be verified. Returns Type Description System.Boolean true if the specified exception is considered as transient, otherwise false ."
  },
  "api/LinqToDB.DataProvider.BulkCopyReader.html": {
    "href": "api/LinqToDB.DataProvider.BulkCopyReader.html",
    "title": "Class BulkCopyReader | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyReader Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbDataReader BulkCopyReader Inherited Members System.Data.Common.DbDataReader.Dispose(System.Boolean) System.Data.Common.DbDataReader.System.Data.IDataRecord.GetData(System.Int32) System.Data.Common.DbDataReader.GetDbDataReader(System.Int32) System.Data.Common.DbDataReader.GetStream(System.Int32) System.Data.Common.DbDataReader.GetTextReader(System.Int32) System.Data.Common.DbDataReader.GetFieldValue<T>(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32, System.Threading.CancellationToken) System.Data.Common.DbDataReader.ReadAsync() System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken) System.Data.Common.DbDataReader.NextResultAsync() System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken) System.Data.Common.DbDataReader.VisibleFieldCount System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class BulkCopyReader : DbDataReader, IEnumerable, IDataReader, IDisposable, IDataRecord Constructors | Improve this Doc View Source BulkCopyReader(IDataProvider, MappingSchema, List<ColumnDescriptor>, IEnumerable) Declaration public BulkCopyReader(IDataProvider dataProvider, MappingSchema mappingSchema, List<ColumnDescriptor> columns, IEnumerable collection) Parameters Type Name Description IDataProvider dataProvider MappingSchema mappingSchema System.Collections.Generic.List<LinqToDB.Mapping.ColumnDescriptor> columns System.Collections.IEnumerable collection Fields | Improve this Doc View Source Count Declaration public int Count Field Value Type Description System.Int32 Properties | Improve this Doc View Source Depth Declaration public override int Depth { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.Depth Implements System.Data.IDataReader.Depth | Improve this Doc View Source FieldCount Declaration public override int FieldCount { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.FieldCount Implements System.Data.IDataRecord.FieldCount | Improve this Doc View Source HasRows Declaration public override bool HasRows { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.HasRows | Improve this Doc View Source IsClosed Declaration public override bool IsClosed { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.IsClosed Implements System.Data.IDataReader.IsClosed | Improve this Doc View Source Item[Int32] Declaration public override object this[int i] { get; } Parameters Type Name Description System.Int32 i Property Value Type Description System.Object Overrides System.Data.Common.DbDataReader.Item[System.Int32] Implements System.Data.IDataRecord.Item[System.Int32] | Improve this Doc View Source Item[String] Declaration public override object this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description System.Object Overrides System.Data.Common.DbDataReader.Item[System.String] Implements System.Data.IDataRecord.Item[System.String] | Improve this Doc View Source RecordsAffected Declaration public override int RecordsAffected { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.RecordsAffected Implements System.Data.IDataReader.RecordsAffected Methods | Improve this Doc View Source Close() Declaration public override void Close() Overrides System.Data.Common.DbDataReader.Close() Implements System.Data.IDataReader.Close() | Improve this Doc View Source GetBoolean(Int32) Declaration public override bool GetBoolean(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.GetBoolean(System.Int32) Implements System.Data.IDataRecord.GetBoolean(System.Int32) | Improve this Doc View Source GetByte(Int32) Declaration public override byte GetByte(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Byte Overrides System.Data.Common.DbDataReader.GetByte(System.Int32) Implements System.Data.IDataRecord.GetByte(System.Int32) | Improve this Doc View Source GetBytes(Int32, Int64, Byte[], Int32, Int32) Declaration public override long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i System.Int64 fieldOffset System.Byte[] buffer System.Int32 bufferoffset System.Int32 length Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32) Implements System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32) | Improve this Doc View Source GetChar(Int32) Declaration public override char GetChar(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Char Overrides System.Data.Common.DbDataReader.GetChar(System.Int32) Implements System.Data.IDataRecord.GetChar(System.Int32) | Improve this Doc View Source GetChars(Int32, Int64, Char[], Int32, Int32) Declaration public override long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i System.Int64 fieldoffset System.Char[] buffer System.Int32 bufferoffset System.Int32 length Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32) Implements System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32) | Improve this Doc View Source GetDataTypeName(Int32) Declaration public override string GetDataTypeName(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String Overrides System.Data.Common.DbDataReader.GetDataTypeName(System.Int32) Implements System.Data.IDataRecord.GetDataTypeName(System.Int32) | Improve this Doc View Source GetDateTime(Int32) Declaration public override DateTime GetDateTime(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.DateTime Overrides System.Data.Common.DbDataReader.GetDateTime(System.Int32) Implements System.Data.IDataRecord.GetDateTime(System.Int32) | Improve this Doc View Source GetDecimal(Int32) Declaration public override decimal GetDecimal(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Decimal Overrides System.Data.Common.DbDataReader.GetDecimal(System.Int32) Implements System.Data.IDataRecord.GetDecimal(System.Int32) | Improve this Doc View Source GetDouble(Int32) Declaration public override double GetDouble(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Double Overrides System.Data.Common.DbDataReader.GetDouble(System.Int32) Implements System.Data.IDataRecord.GetDouble(System.Int32) | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Overrides System.Data.Common.DbDataReader.GetEnumerator() | Improve this Doc View Source GetFieldType(Int32) Declaration public override Type GetFieldType(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Type Overrides System.Data.Common.DbDataReader.GetFieldType(System.Int32) Implements System.Data.IDataRecord.GetFieldType(System.Int32) | Improve this Doc View Source GetFloat(Int32) Declaration public override float GetFloat(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Single Overrides System.Data.Common.DbDataReader.GetFloat(System.Int32) Implements System.Data.IDataRecord.GetFloat(System.Int32) | Improve this Doc View Source GetGuid(Int32) Declaration public override Guid GetGuid(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Guid Overrides System.Data.Common.DbDataReader.GetGuid(System.Int32) Implements System.Data.IDataRecord.GetGuid(System.Int32) | Improve this Doc View Source GetInt16(Int32) Declaration public override short GetInt16(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int16 Overrides System.Data.Common.DbDataReader.GetInt16(System.Int32) Implements System.Data.IDataRecord.GetInt16(System.Int32) | Improve this Doc View Source GetInt32(Int32) Declaration public override int GetInt32(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int32 Overrides System.Data.Common.DbDataReader.GetInt32(System.Int32) Implements System.Data.IDataRecord.GetInt32(System.Int32) | Improve this Doc View Source GetInt64(Int32) Declaration public override long GetInt64(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetInt64(System.Int32) Implements System.Data.IDataRecord.GetInt64(System.Int32) | Improve this Doc View Source GetName(Int32) Declaration public override string GetName(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String Overrides System.Data.Common.DbDataReader.GetName(System.Int32) Implements System.Data.IDataRecord.GetName(System.Int32) | Improve this Doc View Source GetOrdinal(String) Declaration public override int GetOrdinal(string name) Parameters Type Name Description System.String name Returns Type Description System.Int32 Overrides System.Data.Common.DbDataReader.GetOrdinal(System.String) Implements System.Data.IDataRecord.GetOrdinal(System.String) | Improve this Doc View Source GetSchemaTable() Declaration public override DataTable GetSchemaTable() Returns Type Description System.Data.DataTable Overrides System.Data.Common.DbDataReader.GetSchemaTable() Implements System.Data.IDataReader.GetSchemaTable() | Improve this Doc View Source GetString(Int32) Declaration public override string GetString(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String Overrides System.Data.Common.DbDataReader.GetString(System.Int32) Implements System.Data.IDataRecord.GetString(System.Int32) | Improve this Doc View Source GetValue(Int32) Declaration public override object GetValue(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Object Overrides System.Data.Common.DbDataReader.GetValue(System.Int32) Implements System.Data.IDataRecord.GetValue(System.Int32) | Improve this Doc View Source GetValues(Object[]) Declaration public override int GetValues(object[] values) Parameters Type Name Description System.Object[] values Returns Type Description System.Int32 Overrides System.Data.Common.DbDataReader.GetValues(System.Object[]) Implements System.Data.IDataRecord.GetValues(System.Object[]) | Improve this Doc View Source IsDBNull(Int32) Declaration public override bool IsDBNull(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.IsDBNull(System.Int32) Implements System.Data.IDataRecord.IsDBNull(System.Int32) | Improve this Doc View Source NextResult() Declaration public override bool NextResult() Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.NextResult() Implements System.Data.IDataReader.NextResult() | Improve this Doc View Source Read() Declaration public override bool Read() Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.Read() Implements System.Data.IDataReader.Read() Extension Methods ReflectionExtensions.GetListItemType(IEnumerable)"
  },
  "api/LinqToDB.DataProvider.DataProviderBase.html": {
    "href": "api/LinqToDB.DataProvider.DataProviderBase.html",
    "title": "Class DataProviderBase | Linq To DB (aka linq2db)",
    "keywords": "Class DataProviderBase Inheritance System.Object DataProviderBase AccessDataProvider DynamicDataProviderBase SapHanaOdbcDataProvider SqlServerDataProvider Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public abstract class DataProviderBase : IDataProvider Constructors | Improve this Doc View Source DataProviderBase(String, MappingSchema) Declaration protected DataProviderBase(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Fields | Improve this Doc View Source DefaultMaxRetryCount The default number of retry attempts. Declaration protected static readonly int DefaultMaxRetryCount Field Value Type Description System.Int32 | Improve this Doc View Source ReaderExpressions Declaration public readonly ConcurrentDictionary<ReaderInfo, Expression> ReaderExpressions Field Value Type Description System.Collections.Concurrent.ConcurrentDictionary<LinqToDB.DataProvider.ReaderInfo, System.Linq.Expressions.Expression> Properties | Improve this Doc View Source ConnectionNamespace Declaration public abstract string ConnectionNamespace { get; } Property Value Type Description System.String Implements IDataProvider.ConnectionNamespace | Improve this Doc View Source DataReaderType Declaration public abstract Type DataReaderType { get; } Property Value Type Description System.Type Implements IDataProvider.DataReaderType | Improve this Doc View Source MappingSchema Declaration public virtual MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Implements IDataProvider.MappingSchema | Improve this Doc View Source MaxRetryCount The maximum number of retry attempts. Declaration protected virtual int MaxRetryCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Implements IDataProvider.Name | Improve this Doc View Source OnConnectionCreated Declaration public static Func<IDataProvider, IDbConnection, IDbConnection> OnConnectionCreated { get; set; } Property Value Type Description System.Func<LinqToDB.DataProvider.IDataProvider, System.Data.IDbConnection, System.Data.IDbConnection> | Improve this Doc View Source SqlProviderFlags Declaration public SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags Implements IDataProvider.SqlProviderFlags Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public virtual BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Implements IDataProvider.BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source ConvertParameterType(Type, DataType) Declaration public virtual Type ConvertParameterType(Type type, DataType dataType) Parameters Type Name Description System.Type type DataType dataType Returns Type Description System.Type Implements IDataProvider.ConvertParameterType(Type, DataType) | Improve this Doc View Source CreateConnection(String) Declaration public IDbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.IDbConnection Implements IDataProvider.CreateConnection(String) | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected abstract IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.IDbConnection | Improve this Doc View Source CreateSqlBuilder() Declaration public abstract ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Implements IDataProvider.CreateSqlBuilder() | Improve this Doc View Source DisposeCommand(DataConnection) Declaration public virtual void DisposeCommand(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Implements IDataProvider.DisposeCommand(DataConnection) | Improve this Doc View Source FindExpression(ReaderInfo, out Expression) Declaration protected bool FindExpression(ReaderInfo info, out Expression expr) Parameters Type Name Description ReaderInfo info System.Linq.Expressions.Expression expr Returns Type Description System.Boolean | Improve this Doc View Source GetCommandBehavior(CommandBehavior) Declaration public virtual CommandBehavior GetCommandBehavior(CommandBehavior commandBehavior) Parameters Type Name Description System.Data.CommandBehavior commandBehavior Returns Type Description System.Data.CommandBehavior Implements IDataProvider.GetCommandBehavior(CommandBehavior) | Improve this Doc View Source GetConnectionInfo(DataConnection, String) Declaration public virtual object GetConnectionInfo(DataConnection dataConnection, string parameterName) Parameters Type Name Description DataConnection dataConnection System.String parameterName Returns Type Description System.Object Implements IDataProvider.GetConnectionInfo(DataConnection, String) | Improve this Doc View Source GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration public virtual Expression GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema System.Data.IDataReader reader System.Int32 idx System.Linq.Expressions.Expression readerExpression System.Type toType Returns Type Description System.Linq.Expressions.Expression Implements IDataProvider.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) | Improve this Doc View Source GetSchemaProvider() Declaration public abstract ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Implements IDataProvider.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public abstract ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Implements IDataProvider.GetSqlOptimizer() | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[]) Declaration public virtual void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection System.Data.CommandType commandType System.String commandText LinqToDB.Data.DataParameter[] parameters Implements IDataProvider.InitCommand(DataConnection, CommandType, String, DataParameter[]) | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration public abstract bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description System.Boolean Implements IDataProvider.IsCompatibleConnection(IDbConnection) | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public virtual bool ? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description System.Data.IDataReader reader System.Int32 idx Returns Type Description System.Nullable<System.Boolean> Implements IDataProvider.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public virtual int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName)where T : class Parameters Type Name Description DataConnection dataConnection System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> deletePredicate System.Boolean delete System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T Implements IDataProvider.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) | Improve this Doc View Source NormalizeTypeName(String) Declaration protected virtual string NormalizeTypeName(string typeName) Parameters Type Name Description System.String typeName Returns Type Description System.String | Improve this Doc View Source SetCharField(String, Expression<Func<IDataReader, Int32, String>>) Declaration protected void SetCharField(string dataTypeName, Expression<Func<IDataReader, int, string>> expr) Parameters Type Name Description System.String dataTypeName System.Linq.Expressions.Expression<System.Func<System.Data.IDataReader, System.Int32, System.String>> expr | Improve this Doc View Source SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) Declaration protected void SetCharFieldToType<T>(string dataTypeName, Expression<Func<IDataReader, int, string>> expr) Parameters Type Name Description System.String dataTypeName System.Linq.Expressions.Expression<System.Func<System.Data.IDataReader, System.Int32, System.String>> expr Type Parameters Name Description T | Improve this Doc View Source SetField<TP, T>(Expression<Func<TP, Int32, T>>) Declaration protected void SetField<TP, T>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TP, System.Int32, T>> expr Type Parameters Name Description TP T | Improve this Doc View Source SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) Declaration protected void SetField<TP, T>(string dataTypeName, Expression<Func<TP, int, T>> expr) Parameters Type Name Description System.String dataTypeName System.Linq.Expressions.Expression<System.Func<TP, System.Int32, T>> expr Type Parameters Name Description TP T | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public virtual void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Implements IDataProvider.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected virtual void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType | Improve this Doc View Source SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) Declaration protected void SetProviderField<TP, T>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TP, System.Int32, T>> expr Type Parameters Name Description TP T | Improve this Doc View Source SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) Declaration protected void SetProviderField<TP, T, TS>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TP, System.Int32, T>> expr Type Parameters Name Description TP T TS | Improve this Doc View Source SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) Declaration protected void SetToType<TP, T, TF>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TP, System.Int32, T>> expr Type Parameters Name Description TP T TF"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreatorBase.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreatorBase.html",
    "title": "Class TypeCreatorBase | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreatorBase Inheritance System.Object TypeCreatorBase TypeCreator TypeCreatorNoDefault<T> Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public abstract class TypeCreatorBase Fields | Improve this Doc View Source Type Declaration public Type Type Field Value Type Description System.Type Properties | Improve this Doc View Source IsSupported Declaration public bool IsSupported { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source GetCreator<T>() Declaration protected Func<T, object> GetCreator<T>() Returns Type Description System.Func<T, System.Object> Type Parameters Name Description T | Improve this Doc View Source GetCreator<T>(Type) Declaration protected Func<T, object> GetCreator<T>(Type paramType) Parameters Type Name Description System.Type paramType Returns Type Description System.Func<T, System.Object> Type Parameters Name Description T Operators | Improve this Doc View Source Implicit(TypeCreatorBase to Type) Declaration public static implicit operator Type(TypeCreatorBase typeCreator) Parameters Type Name Description TypeCreatorBase typeCreator Returns Type Description System.Type"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreatorNoDefault-1.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreatorNoDefault-1.html",
    "title": "Class TypeCreatorNoDefault<T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreatorNoDefault<T> Inheritance System.Object TypeCreatorBase TypeCreatorNoDefault<T> ConnectionTypeTypeCreator<T> Inherited Members TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class TypeCreatorNoDefault<T> : TypeCreatorBase Type Parameters Name Description T Methods | Improve this Doc View Source CreateInstance(T) Declaration public dynamic CreateInstance(T value) Parameters Type Name Description T value Returns Type Description System.Object"
  },
  "api/LinqToDB.DataProvider.Informix.InformixMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixMappingSchema.html",
    "title": "Class InformixMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class InformixMappingSchema Inheritance System.Object MappingSchema InformixMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class InformixMappingSchema : MappingSchema Constructors | Improve this Doc View Source InformixMappingSchema() Declaration public InformixMappingSchema() | Improve this Doc View Source InformixMappingSchema(String) Declaration protected InformixMappingSchema(string configuration) Parameters Type Name Description System.String configuration"
  },
  "api/LinqToDB.DataProvider.Informix.InformixTools.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixTools.html",
    "title": "Class InformixTools | Linq To DB (aka linq2db)",
    "keywords": "Class InformixTools Inheritance System.Object InformixTools Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public static class InformixTools Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Int32 maxBatchSize System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveInformix(Assembly) Declaration public static void ResolveInformix(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly | Improve this Doc View Source ResolveInformix(String) Declaration public static void ResolveInformix(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode.html",
    "title": "Enum PostgreSQLIdentifierQuoteMode | Linq To DB (aka linq2db)",
    "keywords": "Enum PostgreSQLIdentifierQuoteMode Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public enum PostgreSQLIdentifierQuoteMode Fields Name Description Auto Needed None Quote Extension Methods Sql.Between<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode) Sql.NotBetween<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLMappingSchema.html",
    "title": "Class PostgreSQLMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLMappingSchema Inheritance System.Object MappingSchema PostgreSQLMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQLMappingSchema : MappingSchema Constructors | Improve this Doc View Source PostgreSQLMappingSchema() Declaration public PostgreSQLMappingSchema() | Improve this Doc View Source PostgreSQLMappingSchema(String) Declaration protected PostgreSQLMappingSchema(string configuration) Parameters Type Name Description System.String configuration"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeMappingSchema.html",
    "title": "Class SqlCeMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeMappingSchema Inheritance System.Object MappingSchema SqlCeMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public class SqlCeMappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlCeMappingSchema() Declaration public SqlCeMappingSchema() | Improve this Doc View Source SqlCeMappingSchema(String) Declaration protected SqlCeMappingSchema(string configuration) Parameters Type Name Description System.String configuration"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeTools.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeTools.html",
    "title": "Class SqlCeTools | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeTools Inheritance System.Object SqlCeTools Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public static class SqlCeTools Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public static void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description System.String databaseName System.Boolean deleteIfExists | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description DataConnection | Improve this Doc View Source DropDatabase(String) Declaration public static void DropDatabase(string databaseName) Parameters Type Name Description System.String databaseName | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Int32 maxBatchSize System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSqlCe(Assembly) Declaration public static void ResolveSqlCe(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly | Improve this Doc View Source ResolveSqlCe(String) Declaration public static void ResolveSqlCe(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerDataProvider.html",
    "title": "Class SqlServerDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerDataProvider Inheritance System.Object DataProviderBase SqlServerDataProvider Inherited Members DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerDataProvider : DataProviderBase, IDataProvider Constructors | Improve this Doc View Source SqlServerDataProvider(String, SqlServerVersion) Declaration public SqlServerDataProvider(string name, SqlServerVersion version) Parameters Type Name Description System.String name SqlServerVersion version Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source DataReaderType Declaration public override Type DataReaderType { get; } Property Value Type Description System.Type Overrides DataProviderBase.DataReaderType | Improve this Doc View Source MappingSchema Declaration public override MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Overrides DataProviderBase.MappingSchema | Improve this Doc View Source Version Declaration public SqlServerVersion Version { get; } Property Value Type Description SqlServerVersion Methods | Improve this Doc View Source AddUdtType(Type, String) Declaration public void AddUdtType(Type type, string udtName) Parameters Type Name Description System.Type type System.String udtName | Improve this Doc View Source AddUdtType<T>(String, T, DataType) Declaration public void AddUdtType<T>(string udtName, T defaultValue, DataType dataType = DataType.Undefined) Parameters Type Name Description System.String udtName T defaultValue DataType dataType Type Parameters Name Description T | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected override IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.IDbConnection Overrides DataProviderBase.CreateConnectionInternal(String) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetConnectionInfo(DataConnection, String) Declaration public override object GetConnectionInfo(DataConnection dataConnection, string parameterName) Parameters Type Name Description DataConnection dataConnection System.String parameterName Returns Type Description System.Object Overrides DataProviderBase.GetConnectionInfo(DataConnection, String) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration public override bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description System.Boolean Overrides DataProviderBase.IsCompatibleConnection(IDbConnection) | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public override int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName)where T : class Parameters Type Name Description DataConnection dataConnection System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> deletePredicate System.Boolean delete System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.Merge<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.html",
    "title": "Class SqlServerMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerMappingSchema Inheritance System.Object MappingSchema SqlServerMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerMappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServerMappingSchema() Declaration public SqlServerMappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description System.Type from System.Type to Returns Type Description System.Linq.Expressions.LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type)"
  },
  "api/LinqToDB.Expressions.DefaultValueExpression.html": {
    "href": "api/LinqToDB.Expressions.DefaultValueExpression.html",
    "title": "Class DefaultValueExpression | Linq To DB (aka linq2db)",
    "keywords": "Class DefaultValueExpression Inheritance System.Object System.Linq.Expressions.Expression DefaultValueExpression Inherited Members System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeCatchBlock(System.Type, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Constant(System.Object) System.Linq.Expressions.Expression.Constant(System.Object, System.Type) System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo, System.Int32, System.Int32, System.Int32, System.Int32) System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo) System.Linq.Expressions.Expression.Empty() System.Linq.Expressions.Expression.Default(System.Type) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor) System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) System.Linq.Expressions.Expression.ReduceAndCheck() System.Linq.Expressions.Expression.ReduceExtensions() System.Linq.Expressions.Expression.ToString() System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Label() System.Linq.Expressions.Expression.Label(System.String) System.Linq.Expressions.Expression.Label(System.Type) System.Linq.Expressions.Expression.Label(System.Type, System.String) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.GetFuncType(System.Type[]) System.Linq.Expressions.Expression.TryGetFuncType(System.Type[], System.Type) System.Linq.Expressions.Expression.GetActionType(System.Type[]) System.Linq.Expressions.Expression.TryGetActionType(System.Type[], System.Type) System.Linq.Expressions.Expression.GetDelegateType(System.Type[]) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit[]) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>) System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Reflection.FieldInfo) System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.String) System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Type, System.String) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Type, System.String) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression, System.String) System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression, System.Reflection.MemberInfo) System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding[]) System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>) System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit[]) System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>) System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit[]) System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding[]) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding[]) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type[], System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type[], System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Reflection.MemberInfo[]) System.Linq.Expressions.Expression.New(System.Type) System.Linq.Expressions.Expression.Parameter(System.Type) System.Linq.Expressions.Expression.Variable(System.Type) System.Linq.Expressions.Expression.Parameter(System.Type, System.String) System.Linq.Expressions.Expression.Variable(System.Type, System.String) System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>) System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>) System.Linq.Expressions.Expression.SymbolDocument(System.String) System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid) System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid) System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid, System.Guid) System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[]) System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[]) System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>) System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Rethrow() System.Linq.Expressions.Expression.Rethrow(System.Type) System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public class DefaultValueExpression : Expression Constructors | Improve this Doc View Source DefaultValueExpression(MappingSchema, Type) Declaration public DefaultValueExpression(MappingSchema mappingSchema, Type type) Parameters Type Name Description MappingSchema mappingSchema System.Type type Properties | Improve this Doc View Source CanReduce Declaration public override bool CanReduce { get; } Property Value Type Description System.Boolean Overrides System.Linq.Expressions.Expression.CanReduce | Improve this Doc View Source NodeType Declaration public override ExpressionType NodeType { get; } Property Value Type Description System.Linq.Expressions.ExpressionType Overrides System.Linq.Expressions.Expression.NodeType | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description System.Type Overrides System.Linq.Expressions.Expression.Type Methods | Improve this Doc View Source Reduce() Declaration public override Expression Reduce() Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.Expression.Reduce() Extension Methods Extensions.GetDebugView(Expression) Extensions.GetCount(Expression, Func<Expression, Boolean>) Extensions.Visit(Expression, Action<Expression>) Extensions.Visit(Expression, Func<Expression, Boolean>) Extensions.Find(Expression, Expression) Extensions.Find(Expression, Func<Expression, Boolean>) Extensions.Transform(Expression, Func<Expression, Expression>) Extensions.Transform(Expression, Func<Expression, TransformInfo>)"
  },
  "api/LinqToDB.Expressions.Extensions.html": {
    "href": "api/LinqToDB.Expressions.Extensions.html",
    "title": "Class Extensions | Linq To DB (aka linq2db)",
    "keywords": "Class Extensions Inheritance System.Object Extensions Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public static class Extensions Methods | Improve this Doc View Source Find(Expression, Func<Expression, Boolean>) Enumerates the given expr and returns the first sub-expression which matches the given func . If no expression was found, null is returned. Declaration public static Expression Find(this Expression expr, Func<Expression, bool> func) Parameters Type Name Description System.Linq.Expressions.Expression expr System.Func<System.Linq.Expressions.Expression, System.Boolean> func Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Find(Expression, Expression) Enumerates the expression tree and returns the exprToFind if it's contained within the expr . Declaration public static Expression Find(this Expression expr, Expression exprToFind) Parameters Type Name Description System.Linq.Expressions.Expression expr System.Linq.Expressions.Expression exprToFind Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GetBody(LambdaExpression, Expression) Returns the body of lambda but replaces the first parameter of that lambda expression with the exprToReplaceParameter expression. Declaration public static Expression GetBody(this LambdaExpression lambda, Expression exprToReplaceParameter) Parameters Type Name Description System.Linq.Expressions.LambdaExpression lambda System.Linq.Expressions.Expression exprToReplaceParameter Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GetBody(LambdaExpression, Expression, Expression) Returns the body of lambda but replaces the first two parameters of that lambda expression with the given replace expressions. Declaration public static Expression GetBody(this LambdaExpression lambda, Expression exprToReplaceParameter1, Expression exprToReplaceParameter2) Parameters Type Name Description System.Linq.Expressions.LambdaExpression lambda System.Linq.Expressions.Expression exprToReplaceParameter1 System.Linq.Expressions.Expression exprToReplaceParameter2 Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GetCount(Expression, Func<Expression, Boolean>) Returns the total number of expression items which are matching the given. func . Declaration public static int GetCount(this Expression expr, Func<Expression, bool> func) Parameters Type Name Description System.Linq.Expressions.Expression expr Expression-Tree which gets counted. System.Func<System.Linq.Expressions.Expression, System.Boolean> func Predicate which is used to test if the given expression should be counted. Returns Type Description System.Int32 | Improve this Doc View Source GetDebugView(Expression) Gets the DebugView internal property value of provided expression. Declaration public static string GetDebugView(this Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression Expression to get DebugView. Returns Type Description System.String DebugView value. | Improve this Doc View Source Transform(Expression, Func<Expression, TransformInfo>) Declaration public static Expression Transform(this Expression expr, Func<Expression, TransformInfo> func) Parameters Type Name Description System.Linq.Expressions.Expression expr System.Func<System.Linq.Expressions.Expression, LinqToDB.Expressions.TransformInfo> func Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Transform(Expression, Func<Expression, Expression>) Enumerates the expression tree of expr and might replace expression with the returned value of the given func . Declaration public static Expression Transform(this Expression expr, Func<Expression, Expression> func) Parameters Type Name Description System.Linq.Expressions.Expression expr System.Func<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression> func Returns Type Description System.Linq.Expressions.Expression The modified expression. | Improve this Doc View Source Visit(Expression, Action<Expression>) Calls the given func for each child node of the expr . Declaration public static void Visit(this Expression expr, Action<Expression> func) Parameters Type Name Description System.Linq.Expressions.Expression expr System.Action<System.Linq.Expressions.Expression> func | Improve this Doc View Source Visit(Expression, Func<Expression, Boolean>) Calls the given func for each node of the expr . If the func returns false, no childs of the tested expression will be enumerated. Declaration public static void Visit(this Expression expr, Func<Expression, bool> func) Parameters Type Name Description System.Linq.Expressions.Expression expr System.Func<System.Linq.Expressions.Expression, System.Boolean> func"
  },
  "api/LinqToDB.SqlQuery.ISqlPredicate.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlPredicate.html",
    "title": "Interface ISqlPredicate | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlPredicate Inherited Members IQueryElement.ElementType IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlPredicate : IQueryElement, ISqlExpressionWalkable, ICloneableElement Properties | Improve this Doc View Source CanBeNull Declaration bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Precedence Declaration int Precedence { get; } Property Value Type Description System.Int32"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.SearchCondition.Next.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.SearchCondition.Next.html",
    "title": "Class SelectQuery.SearchCondition.Next | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.SearchCondition.Next Inheritance System.Object SelectQuery.SearchCondition.Next Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Next Properties | Improve this Doc View Source And Declaration public SelectQuery.SearchCondition And { get; } Property Value Type Description SelectQuery.SearchCondition | Improve this Doc View Source Or Declaration public SelectQuery.SearchCondition Or { get; } Property Value Type Description SelectQuery.SearchCondition Methods | Improve this Doc View Source ToExpr() Declaration public ISqlExpression ToExpr() Returns Type Description ISqlExpression"
  },
  "api/LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained-1.html",
    "title": "Interface AnalyticFunctions.IAggregateFunctionSelfContained<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IAggregateFunctionSelfContained<TR> Inherited Members AnalyticFunctions.IAnalyticFunction<TR>.Over() AnalyticFunctions.IReadyToFunction<TR>.ToValue() Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IAggregateFunctionSelfContained<out TR> : AnalyticFunctions.IAggregateFunction<TR>, AnalyticFunctions.IAnalyticFunction<TR>, AnalyticFunctions.IReadyToFunction<TR> Type Parameters Name Description TR Extension Methods AnalyticFunctions.KeepFirst<TR>(AnalyticFunctions.IAggregateFunction<TR>) AnalyticFunctions.KeepLast<TR>(AnalyticFunctions.IAggregateFunction<TR>)"
  },
  "api/LinqToDB.SchemaProvider.ProcedureParameterInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ProcedureParameterInfo.html",
    "title": "Class ProcedureParameterInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ProcedureParameterInfo Inheritance System.Object ProcedureParameterInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ProcedureParameterInfo Fields | Improve this Doc View Source DataType Declaration public string DataType Field Value Type Description System.String | Improve this Doc View Source IsIn Declaration public bool IsIn Field Value Type Description System.Boolean | Improve this Doc View Source IsOut Declaration public bool IsOut Field Value Type Description System.Boolean | Improve this Doc View Source IsResult Declaration public bool IsResult Field Value Type Description System.Boolean | Improve this Doc View Source Length Declaration public long ? Length Field Value Type Description System.Nullable<System.Int64> | Improve this Doc View Source Ordinal Declaration public int Ordinal Field Value Type Description System.Int32 | Improve this Doc View Source ParameterName Declaration public string ParameterName Field Value Type Description System.String | Improve this Doc View Source Precision Declaration public int ? Precision Field Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source ProcedureID Declaration public string ProcedureID Field Value Type Description System.String | Improve this Doc View Source Scale Declaration public int ? Scale Field Value Type Description System.Nullable<System.Int32>"
  },
  "api/LinqToDB.SchemaProvider.ProcedureSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ProcedureSchema.html",
    "title": "Class ProcedureSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ProcedureSchema Inheritance System.Object ProcedureSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ProcedureSchema Properties | Improve this Doc View Source CatalogName Declaration public string CatalogName { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsAggregateFunction Declaration public bool IsAggregateFunction { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDefaultSchema Declaration public bool IsDefaultSchema { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsFunction Declaration public bool IsFunction { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsLoaded Declaration public bool IsLoaded { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsTableFunction Declaration public bool IsTableFunction { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MemberName Declaration public string MemberName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Parameters Declaration public List<ParameterSchema> Parameters { get; set; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ParameterSchema> | Improve this Doc View Source ProcedureName Declaration public string ProcedureName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ResultException Declaration public Exception ResultException { get; set; } Property Value Type Description System.Exception | Improve this Doc View Source ResultTable Declaration public TableSchema ResultTable { get; set; } Property Value Type Description TableSchema | Improve this Doc View Source SchemaName Declaration public string SchemaName { get; set; } Property Value Type Description System.String | Improve this Doc View Source SimilarTables Declaration public List<TableSchema> SimilarTables { get; set; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.TableSchema>"
  },
  "api/LinqToDB.SchemaProvider.SchemaProviderBase.html": {
    "href": "api/LinqToDB.SchemaProvider.SchemaProviderBase.html",
    "title": "Class SchemaProviderBase | Linq To DB (aka linq2db)",
    "keywords": "Class SchemaProviderBase Inheritance System.Object SchemaProviderBase Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public abstract class SchemaProviderBase : ISchemaProvider Fields | Improve this Doc View Source DataTypes Declaration protected List<DataTypeInfo> DataTypes Field Value Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.DataTypeInfo> | Improve this Doc View Source DataTypesDic Declaration protected Dictionary<string, DataTypeInfo> DataTypesDic Field Value Type Description System.Collections.Generic.Dictionary<System.String, LinqToDB.SchemaProvider.DataTypeInfo> | Improve this Doc View Source DataTypesSchema Declaration protected DataTable DataTypesSchema Field Value Type Description System.Data.DataTable | Improve this Doc View Source ExcludedCatalogs Declaration protected HashSet<string> ExcludedCatalogs Field Value Type Description System.Collections.Generic.HashSet<System.String> | Improve this Doc View Source ExcludedSchemas Declaration protected HashSet<string> ExcludedSchemas Field Value Type Description System.Collections.Generic.HashSet<System.String> | Improve this Doc View Source GenerateChar1AsString Declaration protected bool GenerateChar1AsString Field Value Type Description System.Boolean | Improve this Doc View Source IncludedCatalogs Declaration protected HashSet<string> IncludedCatalogs Field Value Type Description System.Collections.Generic.HashSet<System.String> | Improve this Doc View Source IncludedSchemas Declaration protected HashSet<string> IncludedSchemas Field Value Type Description System.Collections.Generic.HashSet<System.String> Methods | Improve this Doc View Source GetColumns(DataConnection) Declaration protected abstract List<ColumnInfo> GetColumns(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnInfo> | Improve this Doc View Source GetDatabaseName(DbConnection) Declaration protected virtual string GetDatabaseName(DbConnection dbConnection) Parameters Type Name Description System.Data.Common.DbConnection dbConnection Returns Type Description System.String | Improve this Doc View Source GetDataSourceName(DbConnection) Declaration protected virtual string GetDataSourceName(DbConnection dbConnection) Parameters Type Name Description System.Data.Common.DbConnection dbConnection Returns Type Description System.String | Improve this Doc View Source GetDataType(String) Declaration protected DataTypeInfo GetDataType(string typeName) Parameters Type Name Description System.String typeName Returns Type Description DataTypeInfo | Improve this Doc View Source GetDataType(String, String, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>) Declaration protected abstract DataType GetDataType(string dataType, string columnType, long ? length, int ? prec, int ? scale) Parameters Type Name Description System.String dataType System.String columnType System.Nullable<System.Int64> length System.Nullable<System.Int32> prec System.Nullable<System.Int32> scale Returns Type Description DataType | Improve this Doc View Source GetDataTypes(DataConnection) Declaration protected virtual List<DataTypeInfo> GetDataTypes(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.DataTypeInfo> | Improve this Doc View Source GetDbType(String, DataTypeInfo, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>) Declaration protected virtual string GetDbType(string columnType, DataTypeInfo dataType, long ? length, int ? prec, int ? scale) Parameters Type Name Description System.String columnType DataTypeInfo dataType System.Nullable<System.Int64> length System.Nullable<System.Int32> prec System.Nullable<System.Int32> scale Returns Type Description System.String | Improve this Doc View Source GetForeignKeys(DataConnection) Declaration protected abstract List<ForeingKeyInfo> GetForeignKeys(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ForeingKeyInfo> | Improve this Doc View Source GetHashSet(String[], IEqualityComparer<String>) Declaration protected static HashSet<string> GetHashSet(string[] data, IEqualityComparer<string> comparer) Parameters Type Name Description System.String[] data System.Collections.Generic.IEqualityComparer<System.String> comparer Returns Type Description System.Collections.Generic.HashSet<System.String> | Improve this Doc View Source GetPrimaryKeys(DataConnection) Declaration protected abstract List<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.PrimaryKeyInfo> | Improve this Doc View Source GetProcedureParameters(DataConnection) Declaration protected virtual List<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ProcedureParameterInfo> | Improve this Doc View Source GetProcedureResultColumns(DataTable) Declaration protected virtual List<ColumnSchema> GetProcedureResultColumns(DataTable resultTable) Parameters Type Name Description System.Data.DataTable resultTable Returns Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema> | Improve this Doc View Source GetProcedures(DataConnection) Declaration protected virtual List<ProcedureInfo> GetProcedures(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ProcedureInfo> | Improve this Doc View Source GetProcedureSchema(DataConnection, String, CommandType, DataParameter[]) Declaration protected virtual DataTable GetProcedureSchema(DataConnection dataConnection, string commandText, CommandType commandType, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection System.String commandText System.Data.CommandType commandType LinqToDB.Data.DataParameter[] parameters Returns Type Description System.Data.DataTable | Improve this Doc View Source GetProviderSpecificProcedures(DataConnection) Declaration protected virtual List<ProcedureSchema> GetProviderSpecificProcedures(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ProcedureSchema> | Improve this Doc View Source GetProviderSpecificTables(DataConnection) Declaration protected virtual List<TableSchema> GetProviderSpecificTables(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.TableSchema> | Improve this Doc View Source GetProviderSpecificType(String) Declaration protected virtual string GetProviderSpecificType(string dataType) Parameters Type Name Description System.String dataType Returns Type Description System.String | Improve this Doc View Source GetProviderSpecificTypeNamespace() Declaration protected abstract string GetProviderSpecificTypeNamespace() Returns Type Description System.String | Improve this Doc View Source GetSchema(DataConnection, GetSchemaOptions) Declaration public virtual DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options = null) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options Returns Type Description DatabaseSchema Implements ISchemaProvider.GetSchema(DataConnection, GetSchemaOptions) | Improve this Doc View Source GetSystemType(String, String, DataTypeInfo, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>) Declaration protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, long ? length, int ? precision, int ? scale) Parameters Type Name Description System.String dataType System.String columnType DataTypeInfo dataTypeInfo System.Nullable<System.Int64> length System.Nullable<System.Int32> precision System.Nullable<System.Int32> scale Returns Type Description System.Type | Improve this Doc View Source GetTables(DataConnection) Declaration protected abstract List<TableInfo> GetTables(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo> | Improve this Doc View Source InitProvider(DataConnection) Declaration protected virtual void InitProvider(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection | Improve this Doc View Source LoadProcedureTableSchema(DataConnection, ProcedureSchema, String, List<TableSchema>) Declaration protected virtual void LoadProcedureTableSchema(DataConnection dataConnection, ProcedureSchema procedure, string commandText, List<TableSchema> tables) Parameters Type Name Description DataConnection dataConnection ProcedureSchema procedure System.String commandText System.Collections.Generic.List<LinqToDB.SchemaProvider.TableSchema> tables | Improve this Doc View Source ProcessSchema(DatabaseSchema, GetSchemaOptions) Declaration protected virtual DatabaseSchema ProcessSchema(DatabaseSchema databaseSchema, GetSchemaOptions schemaOptions) Parameters Type Name Description DatabaseSchema databaseSchema GetSchemaOptions schemaOptions Returns Type Description DatabaseSchema | Improve this Doc View Source ToTypeName(Type, Boolean) Declaration protected string ToTypeName(Type type, bool isNullable) Parameters Type Name Description System.Type type System.Boolean isNullable Returns Type Description System.String"
  },
  "api/LinqToDB.SchemaProvider.TableInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.TableInfo.html",
    "title": "Class TableInfo | Linq To DB (aka linq2db)",
    "keywords": "Class TableInfo Inheritance System.Object TableInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class TableInfo Fields | Improve this Doc View Source CatalogName Declaration public string CatalogName Field Value Type Description System.String | Improve this Doc View Source Description Declaration public string Description Field Value Type Description System.String | Improve this Doc View Source IsDefaultSchema Declaration public bool IsDefaultSchema Field Value Type Description System.Boolean | Improve this Doc View Source IsProviderSpecific Declaration public bool IsProviderSpecific Field Value Type Description System.Boolean | Improve this Doc View Source IsView Declaration public bool IsView Field Value Type Description System.Boolean | Improve this Doc View Source SchemaName Declaration public string SchemaName Field Value Type Description System.String | Improve this Doc View Source TableID Declaration public string TableID Field Value Type Description System.String | Improve this Doc View Source TableName Declaration public string TableName Field Value Type Description System.String"
  },
  "api/LinqToDB.Sql.Nulls.html": {
    "href": "api/LinqToDB.Sql.Nulls.html",
    "title": "Enum Sql.Nulls | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.Nulls Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum Nulls Fields Name Description Ignore None Respect Extension Methods Sql.Between<Sql.Nulls>(Sql.Nulls, Sql.Nulls) Sql.NotBetween<Sql.Nulls>(Sql.Nulls, Sql.Nulls)"
  },
  "api/LinqToDB.Sql.NullsPosition.html": {
    "href": "api/LinqToDB.Sql.NullsPosition.html",
    "title": "Enum Sql.NullsPosition | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.NullsPosition Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum NullsPosition Fields Name Description First Last None Extension Methods Sql.Between<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition) Sql.NotBetween<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition)"
  },
  "api/LinqToDB.Sql.PropertyAttribute.html": {
    "href": "api/LinqToDB.Sql.PropertyAttribute.html",
    "title": "Class Sql.PropertyAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.PropertyAttribute Inheritance System.Object System.Attribute Sql.ExpressionAttribute Sql.PropertyAttribute Inherited Members Sql.ExpressionAttribute.Expression Sql.ExpressionAttribute.ArgIndices Sql.ExpressionAttribute.Precedence Sql.ExpressionAttribute.Configuration Sql.ExpressionAttribute.ServerSideOnly Sql.ExpressionAttribute.PreferServerSide Sql.ExpressionAttribute.InlineParameters Sql.ExpressionAttribute.ExpectExpression Sql.ExpressionAttribute.IsPredicate Sql.ExpressionAttribute.CanBeNull Sql.ExpressionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Sql.ExpressionAttribute.GetExpression(MappingSchema, Expression, Func<Expression, ISqlExpression>) Namespace : LinqToDB Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true, Inherited = false)] public class PropertyAttribute : Sql.ExpressionAttribute, _Attribute Constructors | Improve this Doc View Source PropertyAttribute() Declaration public PropertyAttribute() | Improve this Doc View Source PropertyAttribute(String) Declaration public PropertyAttribute(string name) Parameters Type Name Description System.String name | Improve this Doc View Source PropertyAttribute(String, String) Declaration public PropertyAttribute(string configuraion, string name) Parameters Type Name Description System.String configuraion System.String name Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source GetExpression(MemberInfo, ISqlExpression[]) Declaration public override ISqlExpression GetExpression(MemberInfo member, params ISqlExpression[] args) Parameters Type Name Description System.Reflection.MemberInfo member LinqToDB.SqlQuery.ISqlExpression[] args Returns Type Description ISqlExpression Overrides Sql.ExpressionAttribute.GetExpression(MemberInfo, ISqlExpression[])"
  },
  "api/LinqToDB.Sql.SqlExtension.html": {
    "href": "api/LinqToDB.Sql.SqlExtension.html",
    "title": "Class Sql.SqlExtension | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.SqlExtension Inheritance System.Object Sql.SqlExtension Namespace : LinqToDB Assembly : linq2db.dll Syntax public class SqlExtension Constructors | Improve this Doc View Source SqlExtension(String, Sql.SqlExtensionParam[]) Declaration public SqlExtension(string expr, params Sql.SqlExtensionParam[] parameters) Parameters Type Name Description System.String expr LinqToDB.Sql.SqlExtensionParam[] parameters | Improve this Doc View Source SqlExtension(Type, String, Int32, Int32, Sql.SqlExtensionParam[]) Declaration public SqlExtension(Type systemType, string expr, int precedence, int chainPrecedence, params Sql.SqlExtensionParam[] parameters) Parameters Type Name Description System.Type systemType System.String expr System.Int32 precedence System.Int32 chainPrecedence LinqToDB.Sql.SqlExtensionParam[] parameters Properties | Improve this Doc View Source ChainPrecedence Declaration public int ChainPrecedence { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Expr Declaration public string Expr { get; set; } Property Value Type Description System.String | Improve this Doc View Source NamedParameters Declaration public Dictionary<string, List<Sql.SqlExtensionParam>> NamedParameters { get; } Property Value Type Description System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<LinqToDB.Sql.SqlExtensionParam>> | Improve this Doc View Source Precedence Declaration public int Precedence { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SqlFlags Declaration public SqlFlags SqlFlags { get; set; } Property Value Type Description SqlFlags | Improve this Doc View Source SystemType Declaration public Type SystemType { get; set; } Property Value Type Description System.Type Methods | Improve this Doc View Source AddParameter(Sql.SqlExtensionParam) Declaration public Sql.SqlExtensionParam AddParameter(Sql.SqlExtensionParam param) Parameters Type Name Description Sql.SqlExtensionParam param Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source AddParameter(String, ISqlExpression) Declaration public Sql.SqlExtensionParam AddParameter(string name, ISqlExpression sqlExpression) Parameters Type Name Description System.String name ISqlExpression sqlExpression Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source GetParameters() Declaration public Sql.SqlExtensionParam[] GetParameters() Returns Type Description LinqToDB.Sql.SqlExtensionParam[] | Improve this Doc View Source GetParametersByName(String) Declaration public IEnumerable<Sql.SqlExtensionParam> GetParametersByName(string name) Parameters Type Name Description System.String name Returns Type Description System.Collections.Generic.IEnumerable<LinqToDB.Sql.SqlExtensionParam>"
  },
  "api/LinqToDB.SqlQuery.Precedence.html": {
    "href": "api/LinqToDB.SqlQuery.Precedence.html",
    "title": "Class Precedence | Linq To DB (aka linq2db)",
    "keywords": "Class Precedence Inheritance System.Object Precedence Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Precedence Fields | Improve this Doc View Source Additive Declaration public const int Additive = 60 Field Value Type Description System.Int32 | Improve this Doc View Source Bitwise Declaration public const int Bitwise = 40 Field Value Type Description System.Int32 | Improve this Doc View Source Comparison Declaration public const int Comparison = 50 Field Value Type Description System.Int32 | Improve this Doc View Source LogicalConjunction Declaration public const int LogicalConjunction = 20 Field Value Type Description System.Int32 | Improve this Doc View Source LogicalDisjunction Declaration public const int LogicalDisjunction = 10 Field Value Type Description System.Int32 | Improve this Doc View Source LogicalNegation Declaration public const int LogicalNegation = 30 Field Value Type Description System.Int32 | Improve this Doc View Source Multiplicative Declaration public const int Multiplicative = 80 Field Value Type Description System.Int32 | Improve this Doc View Source Primary Declaration public const int Primary = 100 Field Value Type Description System.Int32 | Improve this Doc View Source Subtraction Declaration public const int Subtraction = 70 Field Value Type Description System.Int32 | Improve this Doc View Source Unary Declaration public const int Unary = 90 Field Value Type Description System.Int32 | Improve this Doc View Source Unknown Declaration public const int Unknown = 0 Field Value Type Description System.Int32"
  },
  "api/LinqToDB.SqlQuery.QueryElementType.html": {
    "href": "api/LinqToDB.SqlQuery.QueryElementType.html",
    "title": "Enum QueryElementType | Linq To DB (aka linq2db)",
    "keywords": "Enum QueryElementType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum QueryElementType Fields Name Description BetweenPredicate Column Condition CreateTableStatement DeleteClause ExprExprPredicate ExprPredicate FromClause FuncLikePredicate GroupByClause InListPredicate InsertClause InSubQueryPredicate IsNullPredicate JoinedTable LikePredicate NotExprPredicate OrderByClause OrderByItem SearchCondition SelectClause SetExpression SqlBinaryExpression SqlDataType SqlExpression SqlField SqlFunction SqlParameter SqlQuery SqlTable SqlValue TableSource Union UpdateClause WhereClause Extension Methods Sql.Between<QueryElementType>(QueryElementType, QueryElementType) Sql.NotBetween<QueryElementType>(QueryElementType, QueryElementType)"
  },
  "api/LinqToDB.SqlQuery.QueryHelper.html": {
    "href": "api/LinqToDB.SqlQuery.QueryHelper.html",
    "title": "Class QueryHelper | Linq To DB (aka linq2db)",
    "keywords": "Class QueryHelper Inheritance System.Object QueryHelper Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class QueryHelper Methods | Improve this Doc View Source CollectDependencies(IQueryElement, IEnumerable<ISqlTableSource>, HashSet<ISqlExpression>, IEnumerable<IQueryElement>) Declaration public static void CollectDependencies(IQueryElement root, IEnumerable<ISqlTableSource> sources, HashSet<ISqlExpression> found, IEnumerable<IQueryElement> ignore = null) Parameters Type Name Description IQueryElement root System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlTableSource> sources System.Collections.Generic.HashSet<LinqToDB.SqlQuery.ISqlExpression> found System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.IQueryElement> ignore | Improve this Doc View Source ConcatSearchCondition(SelectQuery.WhereClause, SelectQuery.SearchCondition) Declaration public static void ConcatSearchCondition(this SelectQuery.WhereClause where, SelectQuery.SearchCondition search) Parameters Type Name Description SelectQuery.WhereClause where SelectQuery.SearchCondition search | Improve this Doc View Source FindJoin(SelectQuery, Func<SelectQuery.JoinedTable, Boolean>) Declaration public static SelectQuery.JoinedTable FindJoin(this SelectQuery query, Func<SelectQuery.JoinedTable, bool> match) Parameters Type Name Description SelectQuery query System.Func<LinqToDB.SqlQuery.SelectQuery.JoinedTable, System.Boolean> match Returns Type Description SelectQuery.JoinedTable | Improve this Doc View Source RootQuery(SelectQuery) Declaration public static SelectQuery RootQuery(this SelectQuery query) Parameters Type Name Description SelectQuery query Returns Type Description SelectQuery"
  },
  "api/LinqToDB.SqlQuery.QueryType.html": {
    "href": "api/LinqToDB.SqlQuery.QueryType.html",
    "title": "Enum QueryType | Linq To DB (aka linq2db)",
    "keywords": "Enum QueryType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum QueryType Fields Name Description CreateTable Delete Insert InsertOrUpdate Select Update Extension Methods Sql.Between<QueryType>(QueryType, QueryType) Sql.NotBetween<QueryType>(QueryType, QueryType)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Predicate.FuncLike.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Predicate.FuncLike.html",
    "title": "Class SelectQuery.Predicate.FuncLike | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Predicate.FuncLike Inheritance System.Object SelectQuery.Predicate SelectQuery.Predicate.FuncLike Inherited Members SelectQuery.Predicate.Precedence SelectQuery.Predicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SelectQuery.Predicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SelectQuery.Predicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class FuncLike : SelectQuery.Predicate, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source FuncLike(SqlFunction) Declaration public FuncLike(SqlFunction func) Parameters Type Name Description SqlFunction func Properties | Improve this Doc View Source CanBeNull Declaration public override bool CanBeNull { get; } Property Value Type Description System.Boolean Overrides SelectQuery.Predicate.CanBeNull | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SelectQuery.Predicate.ElementType | Improve this Doc View Source Function Declaration public SqlFunction Function { get; } Property Value Type Description SqlFunction Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Overrides SelectQuery.Predicate.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Overrides SelectQuery.Predicate.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Overrides SelectQuery.Predicate.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Predicate.InList.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Predicate.InList.html",
    "title": "Class SelectQuery.Predicate.InList | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Predicate.InList Inheritance System.Object SelectQuery.Predicate SelectQuery.Predicate.Expr SelectQuery.Predicate.NotExpr SelectQuery.Predicate.InList Inherited Members SelectQuery.Predicate.NotExpr.IsNot SelectQuery.Predicate.Expr.Expr1 SelectQuery.Predicate.Expr.CanBeNull SelectQuery.Predicate.Precedence SelectQuery.Predicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SelectQuery.Predicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SelectQuery.Predicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class InList : SelectQuery.Predicate.NotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source InList(ISqlExpression, Boolean, ISqlExpression[]) Declaration public InList(ISqlExpression exp1, bool isNot, params ISqlExpression[] values) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot LinqToDB.SqlQuery.ISqlExpression[] values | Improve this Doc View Source InList(ISqlExpression, Boolean, IEnumerable<ISqlExpression>) Declaration public InList(ISqlExpression exp1, bool isNot, IEnumerable<ISqlExpression> values) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlExpression> values Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SelectQuery.Predicate.NotExpr.ElementType | Improve this Doc View Source Values Declaration public List<ISqlExpression> Values { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.ISqlExpression> Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Overrides SelectQuery.Predicate.NotExpr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Overrides SelectQuery.Predicate.NotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> action) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> action Overrides SelectQuery.Predicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Predicate.InSubQuery.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Predicate.InSubQuery.html",
    "title": "Class SelectQuery.Predicate.InSubQuery | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Predicate.InSubQuery Inheritance System.Object SelectQuery.Predicate SelectQuery.Predicate.Expr SelectQuery.Predicate.NotExpr SelectQuery.Predicate.InSubQuery Inherited Members SelectQuery.Predicate.NotExpr.IsNot SelectQuery.Predicate.Expr.Expr1 SelectQuery.Predicate.Expr.CanBeNull SelectQuery.Predicate.Precedence SelectQuery.Predicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SelectQuery.Predicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SelectQuery.Predicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class InSubQuery : SelectQuery.Predicate.NotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source InSubQuery(ISqlExpression, Boolean, SelectQuery) Declaration public InSubQuery(ISqlExpression exp1, bool isNot, SelectQuery subQuery) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot SelectQuery subQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SelectQuery.Predicate.NotExpr.ElementType | Improve this Doc View Source SubQuery Declaration public SelectQuery SubQuery { get; } Property Value Type Description SelectQuery Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Overrides SelectQuery.Predicate.NotExpr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Overrides SelectQuery.Predicate.NotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration protected override void Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Overrides SelectQuery.Predicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Predicate.IsNull.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Predicate.IsNull.html",
    "title": "Class SelectQuery.Predicate.IsNull | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Predicate.IsNull Inheritance System.Object SelectQuery.Predicate SelectQuery.Predicate.Expr SelectQuery.Predicate.NotExpr SelectQuery.Predicate.IsNull Inherited Members SelectQuery.Predicate.NotExpr.IsNot SelectQuery.Predicate.Expr.Expr1 SelectQuery.Predicate.Expr.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SelectQuery.Predicate.Expr.CanBeNull SelectQuery.Predicate.Precedence SelectQuery.Predicate.ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) SelectQuery.Predicate.ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) SelectQuery.Predicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class IsNull : SelectQuery.Predicate.NotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source IsNull(ISqlExpression, Boolean) Declaration public IsNull(ISqlExpression exp1, bool isNot) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SelectQuery.Predicate.NotExpr.ElementType Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration protected override ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Overrides SelectQuery.Predicate.NotExpr.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Overrides SelectQuery.Predicate.NotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>)"
  },
  "api/LinqToDB.SqlQuery.DefaulNullable.html": {
    "href": "api/LinqToDB.SqlQuery.DefaulNullable.html",
    "title": "Enum DefaulNullable | Linq To DB (aka linq2db)",
    "keywords": "Enum DefaulNullable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum DefaulNullable Fields Name Description None NotNull Null Extension Methods Sql.Between<DefaulNullable>(DefaulNullable, DefaulNullable) Sql.NotBetween<DefaulNullable>(DefaulNullable, DefaulNullable)"
  },
  "api/LinqToDB.SqlQuery.Extensions.html": {
    "href": "api/LinqToDB.SqlQuery.Extensions.html",
    "title": "Class Extensions | Linq To DB (aka linq2db)",
    "keywords": "Class Extensions Inheritance System.Object Extensions Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class Extensions Methods | Improve this Doc View Source CrossApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join CrossApply(this ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source CrossApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join CrossApply(this ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source InnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join InnerJoin(this ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source InnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join InnerJoin(this ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source Join(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join Join(this ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source Join(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join Join(this ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source LeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join LeftJoin(this ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source LeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join LeftJoin(this ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source OuterApply(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join OuterApply(this ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source OuterApply(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join OuterApply(this ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source WeakInnerJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakInnerJoin(this ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source WeakInnerJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakInnerJoin(this ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source WeakJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakJoin(this ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source WeakJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakJoin(this ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source WeakLeftJoin(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakLeftJoin(this ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join | Improve this Doc View Source WeakLeftJoin(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public static SelectQuery.FromClause.Join WeakLeftJoin(this ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause.Join"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.FromClause.Join.Next.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.FromClause.Join.Next.html",
    "title": "Class SelectQuery.FromClause.Join.Next | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.FromClause.Join.Next Inheritance System.Object SelectQuery.FromClause.Join.Next Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Next Properties | Improve this Doc View Source And Declaration public SelectQuery.FromClause.Join And { get; } Property Value Type Description SelectQuery.FromClause.Join | Improve this Doc View Source Or Declaration public SelectQuery.FromClause.Join Or { get; } Property Value Type Description SelectQuery.FromClause.Join Operators | Improve this Doc View Source Implicit(SelectQuery.FromClause.Join.Next to SelectQuery.FromClause.Join) Declaration public static implicit operator SelectQuery.FromClause.Join(SelectQuery.FromClause.Join.Next next) Parameters Type Name Description SelectQuery.FromClause.Join.Next next Returns Type Description SelectQuery.FromClause.Join"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.FromClause.Join.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.FromClause.Join.html",
    "title": "Class SelectQuery.FromClause.Join | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.FromClause.Join Inheritance System.Object LinqToDB.SqlQuery.SelectQuery.ConditionBase<LinqToDB.SqlQuery.SelectQuery.FromClause.Join, LinqToDB.SqlQuery.SelectQuery.FromClause.Join.Next> SelectQuery.FromClause.Join Inherited Members SelectQuery.ConditionBase<SelectQuery.FromClause.Join, SelectQuery.FromClause.Join.Next>.Search SelectQuery.ConditionBase<SelectQuery.FromClause.Join, SelectQuery.FromClause.Join.Next>.GetNext() SelectQuery.ConditionBase<SelectQuery.FromClause.Join, SelectQuery.FromClause.Join.Next>.SetOr(Boolean) SelectQuery.ConditionBase<SelectQuery.FromClause.Join, SelectQuery.FromClause.Join.Next>.Not SelectQuery.ConditionBase<SelectQuery.FromClause.Join, SelectQuery.FromClause.Join.Next>.Expr(ISqlExpression) SelectQuery.ConditionBase<SelectQuery.FromClause.Join, SelectQuery.FromClause.Join.Next>.Field(SqlField) SelectQuery.ConditionBase<SelectQuery.FromClause.Join, SelectQuery.FromClause.Join.Next>.SubQuery(SelectQuery) SelectQuery.ConditionBase<SelectQuery.FromClause.Join, SelectQuery.FromClause.Join.Next>.Value(Object) SelectQuery.ConditionBase<SelectQuery.FromClause.Join, SelectQuery.FromClause.Join.Next>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Join : SelectQuery.ConditionBase<SelectQuery.FromClause.Join, SelectQuery.FromClause.Join.Next>, SelectQuery.IConditionExpr<SelectQuery.ConditionBase<SelectQuery.FromClause.Join, SelectQuery.FromClause.Join.Next>.Expr_> Properties | Improve this Doc View Source JoinedTable Declaration public SelectQuery.JoinedTable JoinedTable { get; } Property Value Type Description SelectQuery.JoinedTable | Improve this Doc View Source Search Declaration protected override SelectQuery.SearchCondition Search { get; } Property Value Type Description SelectQuery.SearchCondition Overrides LinqToDB.SqlQuery.SelectQuery.ConditionBase<LinqToDB.SqlQuery.SelectQuery.FromClause.Join, LinqToDB.SqlQuery.SelectQuery.FromClause.Join.Next>.Search Methods | Improve this Doc View Source GetNext() Declaration protected override SelectQuery.FromClause.Join.Next GetNext() Returns Type Description SelectQuery.FromClause.Join.Next Overrides LinqToDB.SqlQuery.SelectQuery.ConditionBase<LinqToDB.SqlQuery.SelectQuery.FromClause.Join, LinqToDB.SqlQuery.SelectQuery.FromClause.Join.Next>.GetNext()"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.FromClause.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.FromClause.html",
    "title": "Class SelectQuery.FromClause | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.FromClause Inheritance System.Object SelectQuery.ClauseBase SelectQuery.FromClause Inherited Members SelectQuery.ClauseBase.Select SelectQuery.ClauseBase.From SelectQuery.ClauseBase.Where SelectQuery.ClauseBase.GroupBy SelectQuery.ClauseBase.Having SelectQuery.ClauseBase.OrderBy SelectQuery.ClauseBase.End() SelectQuery.ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class FromClause : SelectQuery.ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Item[ISqlTableSource] Declaration public SelectQuery.TableSource this[ISqlTableSource table] { get; } Parameters Type Name Description ISqlTableSource table Property Value Type Description SelectQuery.TableSource | Improve this Doc View Source Item[ISqlTableSource, String] Declaration public SelectQuery.TableSource this[ISqlTableSource table, string alias] { get; } Parameters Type Name Description ISqlTableSource table System.String alias Property Value Type Description SelectQuery.TableSource | Improve this Doc View Source Tables Declaration public List<SelectQuery.TableSource> Tables { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.SelectQuery.TableSource> Methods | Improve this Doc View Source FindTableSource(SqlTable) Declaration public ISqlTableSource FindTableSource(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlTableSource | Improve this Doc View Source IsChild(ISqlTableSource) Declaration public bool IsChild(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description System.Boolean | Improve this Doc View Source Table(ISqlTableSource, SelectQuery.FromClause.Join[]) Declaration public SelectQuery.FromClause Table(ISqlTableSource table, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause | Improve this Doc View Source Table(ISqlTableSource, String, SelectQuery.FromClause.Join[]) Declaration public SelectQuery.FromClause Table(ISqlTableSource table, string alias, params SelectQuery.FromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias LinqToDB.SqlQuery.SelectQuery.FromClause.Join[] joins Returns Type Description SelectQuery.FromClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.GroupByClause.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.GroupByClause.html",
    "title": "Class SelectQuery.GroupByClause | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.GroupByClause Inheritance System.Object SelectQuery.ClauseBase SelectQuery.GroupByClause Inherited Members SelectQuery.ClauseBase.Select SelectQuery.ClauseBase.From SelectQuery.ClauseBase.Where SelectQuery.ClauseBase.GroupBy SelectQuery.ClauseBase.Having SelectQuery.ClauseBase.OrderBy SelectQuery.ClauseBase.End() SelectQuery.ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class GroupByClause : SelectQuery.ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Items Declaration public List<ISqlExpression> Items { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SqlQuery.ISqlExpression> Methods | Improve this Doc View Source Expr(ISqlExpression) Declaration public SelectQuery.GroupByClause Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SelectQuery.GroupByClause | Improve this Doc View Source Field(SqlField) Declaration public SelectQuery.GroupByClause Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SelectQuery.GroupByClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>)"
  },
  "api/LinqToDB.html": {
    "href": "api/LinqToDB.html",
    "title": "Namespace LinqToDB | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB Classes AnalyticFunctions AsyncExtensions CompiledQuery Provides for compilation and caching of queries for reuse. DataContext DataContextTransaction DataExtensions ExpressionMethodAttribute ExprParameterAttribute ExtensionlBuilderExtensions KeepConnectionAliveScope LinqExtensions LinqToDBConstants LinqToDBException Defines the base class for the namespace exceptions. ProviderName Sql Sql.ConvertTo<TTo> Sql.DatePartAttribute Sql.EnumAttribute Sql.ExpressionAttribute Sql.ExtensionAttribute Sql.ExtensionAttribute.ConvertHelper Sql.ExtensionAttribute.ExtensionBuilder Sql.FunctionAttribute Sql.PropertyAttribute Sql.SqlExtension Sql.SqlExtensionParam Sql.TableExpressionAttribute Sql.TableFunctionAttribute Interfaces AnalyticFunctions.IAggregateFunction<TR> AnalyticFunctions.IAggregateFunctionSelfContained<TR> AnalyticFunctions.IAnalyticFunction<TR> AnalyticFunctions.IAnalyticFunctionWithoutWindow<TR> AnalyticFunctions.IAndExpected<TR> AnalyticFunctions.IBetweenStartExpected<TR> AnalyticFunctions.IBoundaryExpected<TR> AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> AnalyticFunctions.INeedSingleOrderByAndMaybeOverWithPartition<TR> AnalyticFunctions.INeedsOrderByOnly<TR> AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<TR> AnalyticFunctions.INeedsWithinGroupWithOrderOnly<TR> AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<TR> AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR> AnalyticFunctions.IOrderedReadyToFunction<TR> AnalyticFunctions.IOrderedReadyToWindowing<TR> AnalyticFunctions.IOverMayHavePartition<TR> AnalyticFunctions.IOverMayHavePartitionAndOrder<TR> AnalyticFunctions.IOverWithPartitionNeeded<TR> AnalyticFunctions.IPartitionDefinedReadyForSortingWithWindow<TR> AnalyticFunctions.IPartitionedMayHaveOrder<TR> AnalyticFunctions.IReadyForFullAnalyticClause<TR> AnalyticFunctions.IReadyForSortingWithWindow<TR> AnalyticFunctions.IReadyToFunction<TR> AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR> AnalyticFunctions.ISecondBoundaryExpected<TR> IDataContext ITable<T> Sql.IExtensionCallBuilder Sql.ISqExtensionBuilder Sql.ISqlExtension Enums DataType Sql.AggregateModifier Sql.DateParts Sql.From Sql.GroupBy Sql.Nulls Sql.NullsPosition TakeHints Hints for Take"
  },
  "api/LinqToDB.AnalyticFunctions.IBoundaryExpected-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IBoundaryExpected-1.html",
    "title": "Interface AnalyticFunctions.IBoundaryExpected<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IBoundaryExpected<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IBoundaryExpected<out TR> Type Parameters Name Description TR Properties | Improve this Doc View Source Between Declaration [Sql.Extension(\"BETWEEN {start_boundary} AND {end_boundary}\", TokenName = \"boundary_clause\")] AnalyticFunctions.IBetweenStartExpected<TR> Between { get; } Property Value Type Description LinqToDB.AnalyticFunctions.IBetweenStartExpected<TR> | Improve this Doc View Source CurrentRow Declaration [Sql.Extension(\"CURRENT ROW\", TokenName = \"boundary_clause\")] AnalyticFunctions.IReadyToFunction<TR> CurrentRow { get; } Property Value Type Description LinqToDB.AnalyticFunctions.IReadyToFunction<TR> | Improve this Doc View Source UnboundedPreceding Declaration [Sql.Extension(\"UNBOUNDED PRECEDING\", TokenName = \"boundary_clause\")] AnalyticFunctions.IReadyToFunction<TR> UnboundedPreceding { get; } Property Value Type Description LinqToDB.AnalyticFunctions.IReadyToFunction<TR> Methods | Improve this Doc View Source ValuePreceding<T>(T) Declaration [Sql.Extension(\"{value_expr} PRECEDING\", TokenName = \"boundary_clause\")] AnalyticFunctions.IReadyToFunction<TR> ValuePreceding<T>([ExprParameter(\"value_expr\")] T value) Parameters Type Name Description T value Returns Type Description LinqToDB.AnalyticFunctions.IReadyToFunction<TR> Type Parameters Name Description T"
  },
  "api/LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition-1.html",
    "title": "Interface AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface INeedsWithinGroupWithSingleOrderAndMaybePartition<out TR> Type Parameters Name Description TR Properties | Improve this Doc View Source WithinGroup Declaration [Sql.Extension(\"WITHIN GROUP ({order_by_clause}){_}{over?}\", TokenName = \"within_group\")] AnalyticFunctions.INeedSingleOrderByAndMaybeOverWithPartition<TR> WithinGroup { get; } Property Value Type Description LinqToDB.AnalyticFunctions.INeedSingleOrderByAndMaybeOverWithPartition<TR>"
  },
  "api/LinqToDB.AnalyticFunctions.IReadyForFullAnalyticClause-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IReadyForFullAnalyticClause-1.html",
    "title": "Interface AnalyticFunctions.IReadyForFullAnalyticClause<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IReadyForFullAnalyticClause<TR> Inherited Members AnalyticFunctions.IReadyToFunction<TR>.ToValue() AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderBy<TKey>(TKey) AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderBy<TKey>(TKey, Sql.NullsPosition) AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderByDesc<TKey>(TKey) AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderByDesc<TKey>(TKey, Sql.NullsPosition) Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IReadyForFullAnalyticClause<out TR> : AnalyticFunctions.IReadyToFunction<TR>, AnalyticFunctions.IReadyForSortingWithWindow<TR> Type Parameters Name Description TR Methods | Improve this Doc View Source PartitionBy(Object[]) Declaration [Sql.Extension(\"PARTITION BY {expr, ', '}\", TokenName = \"query_partition_clause\")] AnalyticFunctions.IPartitionDefinedReadyForSortingWithWindow<TR> PartitionBy([ExprParameter(\"expr\")] params object[] expressions) Parameters Type Name Description System.Object[] expressions Returns Type Description LinqToDB.AnalyticFunctions.IPartitionDefinedReadyForSortingWithWindow<TR>"
  },
  "api/LinqToDB.Common.Array-1.html": {
    "href": "api/LinqToDB.Common.Array-1.html",
    "title": "Class Array<T> | Linq To DB (aka linq2db)",
    "keywords": "Class Array<T> Inheritance System.Object Array<T> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Array<T> Type Parameters Name Description T Fields | Improve this Doc View Source Empty Declaration public static readonly T[] Empty Field Value Type Description T[]"
  },
  "api/LinqToDB.Common.LinqToDBConvertException.html": {
    "href": "api/LinqToDB.Common.LinqToDBConvertException.html",
    "title": "Class LinqToDBConvertException | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBConvertException Defines the base class for the namespace exceptions. Inheritance System.Object System.Exception LinqToDBException LinqToDBConvertException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax [Serializable] public class LinqToDBConvertException : LinqToDBException, ISerializable, _Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source LinqToDBConvertException() Initializes a new instance of the LinqToDBConvertException class. Declaration public LinqToDBConvertException() Remarks This constructor initializes the System.Exception.Message property of the new instance such as \"A Build Type exception has occurred.\" | Improve this Doc View Source LinqToDBConvertException(Exception) Initializes a new instance of the LinqToDBConvertException class with the specified InnerException property. Declaration public LinqToDBConvertException(Exception innerException) Parameters Type Name Description System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.InnerException | Improve this Doc View Source LinqToDBConvertException(SerializationInfo, StreamingContext) Initializes a new instance of the LinqToDBConvertException class with serialized data. Declaration protected LinqToDBConvertException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The object that holds the serialized object data. System.Runtime.Serialization.StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source LinqToDBConvertException(String) Initializes a new instance of the LinqToDBConvertException class with the specified error message. Declaration public LinqToDBConvertException(string message) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. See Also System.Exception.Message | Improve this Doc View Source LinqToDBConvertException(String, Exception) Initializes a new instance of the LinqToDBConvertException class with the specified error message and InnerException property. Declaration public LinqToDBConvertException(string message, Exception innerException) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.Message System.Exception.InnerException"
  },
  "api/LinqToDB.Configuration.LinqToDBSection.html": {
    "href": "api/LinqToDB.Configuration.LinqToDBSection.html",
    "title": "Class LinqToDBSection | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBSection Implementation of custom configuration section. Inheritance System.Object System.Configuration.ConfigurationElement System.Configuration.ConfigurationSection LinqToDBSection Inherited Members System.Configuration.ConfigurationSection.GetRuntimeObject() System.Configuration.ConfigurationSection.IsModified() System.Configuration.ConfigurationSection.ResetModified() System.Configuration.ConfigurationSection.DeserializeSection(System.Xml.XmlReader) System.Configuration.ConfigurationSection.SerializeSection(System.Configuration.ConfigurationElement, System.String, System.Configuration.ConfigurationSaveMode) System.Configuration.ConfigurationSection.ShouldSerializePropertyInTargetVersion(System.Configuration.ConfigurationProperty, System.String, System.Runtime.Versioning.FrameworkName, System.Configuration.ConfigurationElement) System.Configuration.ConfigurationSection.ShouldSerializeElementInTargetVersion(System.Configuration.ConfigurationElement, System.String, System.Runtime.Versioning.FrameworkName) System.Configuration.ConfigurationSection.ShouldSerializeSectionInTargetVersion(System.Runtime.Versioning.FrameworkName) System.Configuration.ConfigurationSection.SectionInformation System.Configuration.ConfigurationElement.Init() System.Configuration.ConfigurationElement.IsReadOnly() System.Configuration.ConfigurationElement.SetReadOnly() System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList) System.Configuration.ConfigurationElement.InitializeDefault() System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElement.Equals(System.Object) System.Configuration.ConfigurationElement.GetHashCode() System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty, System.Object, System.Boolean) System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement, System.Configuration.ConfigurationElement, System.Configuration.ConfigurationSaveMode) System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter, System.String) System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter, System.Boolean) System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader, System.Boolean) System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String) System.Configuration.ConfigurationElement.PostDeserialize() System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter) System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String, System.String) System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String, System.Xml.XmlReader) System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String) System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String) System.Configuration.ConfigurationElement.LockAttributes System.Configuration.ConfigurationElement.LockAllAttributesExcept System.Configuration.ConfigurationElement.LockElements System.Configuration.ConfigurationElement.LockAllElementsExcept System.Configuration.ConfigurationElement.LockItem System.Configuration.ConfigurationElement.Item[System.Configuration.ConfigurationProperty] System.Configuration.ConfigurationElement.Item[System.String] System.Configuration.ConfigurationElement.ElementInformation System.Configuration.ConfigurationElement.EvaluationContext System.Configuration.ConfigurationElement.ElementProperty System.Configuration.ConfigurationElement.HasContext System.Configuration.ConfigurationElement.CurrentConfiguration Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public class LinqToDBSection : ConfigurationSection, ILinqToDBSettings Properties | Improve this Doc View Source DataProviders Declaration public DataProviderElementCollection DataProviders { get; } Property Value Type Description DataProviderElementCollection | Improve this Doc View Source DefaultConfiguration Declaration public string DefaultConfiguration { get; } Property Value Type Description System.String Implements ILinqToDBSettings.DefaultConfiguration | Improve this Doc View Source DefaultDataProvider Declaration public string DefaultDataProvider { get; } Property Value Type Description System.String Implements ILinqToDBSettings.DefaultDataProvider | Improve this Doc View Source Instance Declaration public static LinqToDBSection Instance { get; } Property Value Type Description LinqToDBSection | Improve this Doc View Source Properties Declaration protected override ConfigurationPropertyCollection Properties { get; } Property Value Type Description System.Configuration.ConfigurationPropertyCollection Overrides System.Configuration.ConfigurationElement.Properties Explicit Interface Implementations | Improve this Doc View Source ILinqToDBSettings.ConnectionStrings Declaration IEnumerable<IConnectionStringSettings> ILinqToDBSettings.ConnectionStrings { get; } Returns Type Description System.Collections.Generic.IEnumerable<LinqToDB.Configuration.IConnectionStringSettings> Implements ILinqToDBSettings.ConnectionStrings | Improve this Doc View Source ILinqToDBSettings.DataProviders Declaration IEnumerable<IDataProviderSettings> ILinqToDBSettings.DataProviders { get; } Returns Type Description System.Collections.Generic.IEnumerable<LinqToDB.Configuration.IDataProviderSettings> Implements ILinqToDBSettings.DataProviders"
  },
  "api/LinqToDB.Data.DataConnection.html": {
    "href": "api/LinqToDB.Data.DataConnection.html",
    "title": "Class DataConnection | Linq To DB (aka linq2db)",
    "keywords": "Class DataConnection Inheritance System.Object DataConnection Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataConnection : IDataContext, IDisposable, ICloneable Constructors | Improve this Doc View Source DataConnection() Declaration public DataConnection() | Improve this Doc View Source DataConnection(IDataProvider, IDbConnection) Declaration public DataConnection(IDataProvider dataProvider, IDbConnection connection) Parameters Type Name Description IDataProvider dataProvider System.Data.IDbConnection connection | Improve this Doc View Source DataConnection(IDataProvider, IDbConnection, MappingSchema) Declaration public DataConnection(IDataProvider dataProvider, IDbConnection connection, MappingSchema mappingSchema) Parameters Type Name Description IDataProvider dataProvider System.Data.IDbConnection connection MappingSchema mappingSchema | Improve this Doc View Source DataConnection(IDataProvider, IDbTransaction) Declaration public DataConnection(IDataProvider dataProvider, IDbTransaction transaction) Parameters Type Name Description IDataProvider dataProvider System.Data.IDbTransaction transaction | Improve this Doc View Source DataConnection(IDataProvider, IDbTransaction, MappingSchema) Declaration public DataConnection(IDataProvider dataProvider, IDbTransaction transaction, MappingSchema mappingSchema) Parameters Type Name Description IDataProvider dataProvider System.Data.IDbTransaction transaction MappingSchema mappingSchema | Improve this Doc View Source DataConnection(IDataProvider, String) Declaration public DataConnection(IDataProvider dataProvider, string connectionString) Parameters Type Name Description IDataProvider dataProvider System.String connectionString | Improve this Doc View Source DataConnection(IDataProvider, String, MappingSchema) Declaration public DataConnection(IDataProvider dataProvider, string connectionString, MappingSchema mappingSchema) Parameters Type Name Description IDataProvider dataProvider System.String connectionString MappingSchema mappingSchema | Improve this Doc View Source DataConnection(MappingSchema) Declaration public DataConnection(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema | Improve this Doc View Source DataConnection(String) Declaration public DataConnection(string configurationString) Parameters Type Name Description System.String configurationString | Improve this Doc View Source DataConnection(String, MappingSchema) Declaration public DataConnection(string configurationString, MappingSchema mappingSchema) Parameters Type Name Description System.String configurationString MappingSchema mappingSchema | Improve this Doc View Source DataConnection(String, String) Declaration public DataConnection(string providerName, string connectionString) Parameters Type Name Description System.String providerName System.String connectionString | Improve this Doc View Source DataConnection(String, String, MappingSchema) Declaration public DataConnection(string providerName, string connectionString, MappingSchema mappingSchema) Parameters Type Name Description System.String providerName System.String connectionString MappingSchema mappingSchema Fields | Improve this Doc View Source LastQuery Declaration public string LastQuery Field Value Type Description System.String | Improve this Doc View Source WriteTraceLine Declaration public static Action<string, string> WriteTraceLine Field Value Type Description System.Action<System.String, System.String> Properties | Improve this Doc View Source Command Declaration public IDbCommand Command { get; set; } Property Value Type Description System.Data.IDbCommand | Improve this Doc View Source CommandTimeout Declaration public int CommandTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConfigurationString Declaration public string ConfigurationString { get; } Property Value Type Description System.String | Improve this Doc View Source Connection Declaration public IDbConnection Connection { get; } Property Value Type Description System.Data.IDbConnection | Improve this Doc View Source ConnectionString Declaration public string ConnectionString { get; } Property Value Type Description System.String | Improve this Doc View Source DataProvider Declaration public IDataProvider DataProvider { get; } Property Value Type Description IDataProvider | Improve this Doc View Source DefaultConfiguration Declaration public static string DefaultConfiguration { get; set; } Property Value Type Description System.String | Improve this Doc View Source DefaultDataProvider Declaration public static string DefaultDataProvider { get; set; } Property Value Type Description System.String | Improve this Doc View Source DefaultSettings Declaration public static ILinqToDBSettings DefaultSettings { get; set; } Property Value Type Description ILinqToDBSettings | Improve this Doc View Source Disposed Declaration protected bool Disposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ID Declaration public int ID { get; } Property Value Type Description System.Int32 | Improve this Doc View Source InlineParameters Declaration public bool InlineParameters { get; set; } Property Value Type Description System.Boolean Implements IDataContext.InlineParameters | Improve this Doc View Source IsMarsEnabled Declaration public bool IsMarsEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Implements IDataContext.MappingSchema | Improve this Doc View Source NextQueryHints Declaration public List<string> NextQueryHints { get; } Property Value Type Description System.Collections.Generic.List<System.String> Implements IDataContext.NextQueryHints | Improve this Doc View Source OnTrace Declaration public static Action<TraceInfo> OnTrace { get; set; } Property Value Type Description System.Action<LinqToDB.Data.TraceInfo> | Improve this Doc View Source OnTraceConnection Declaration public Action<TraceInfo> OnTraceConnection { get; set; } Property Value Type Description System.Action<LinqToDB.Data.TraceInfo> | Improve this Doc View Source QueryHints Declaration public List<string> QueryHints { get; } Property Value Type Description System.Collections.Generic.List<System.String> Implements IDataContext.QueryHints | Improve this Doc View Source RetryPolicy Declaration public IRetryPolicy RetryPolicy { get; set; } Property Value Type Description IRetryPolicy | Improve this Doc View Source TraceSwitch Declaration public static TraceSwitch TraceSwitch { get; set; } Property Value Type Description System.Diagnostics.TraceSwitch | Improve this Doc View Source Transaction Declaration public IDbTransaction Transaction { get; } Property Value Type Description System.Data.IDbTransaction Methods | Improve this Doc View Source AddConfiguration(String, String, IDataProvider) Declaration public static void AddConfiguration(string configuration, string connectionString, IDataProvider dataProvider = null) Parameters Type Name Description System.String configuration System.String connectionString IDataProvider dataProvider | Improve this Doc View Source AddDataProvider(IDataProvider) Declaration public static void AddDataProvider(IDataProvider dataProvider) Parameters Type Name Description IDataProvider dataProvider | Improve this Doc View Source AddDataProvider(String, IDataProvider) Declaration public static void AddDataProvider(string providerName, IDataProvider dataProvider) Parameters Type Name Description System.String providerName IDataProvider dataProvider | Improve this Doc View Source AddMappingSchema(MappingSchema) Declaration public DataConnection AddMappingSchema(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description DataConnection | Improve this Doc View Source AddProviderDetector(Func<IConnectionStringSettings, String, IDataProvider>) Declaration public static void AddProviderDetector(Func<IConnectionStringSettings, string, IDataProvider> providerDetector) Parameters Type Name Description System.Func<LinqToDB.Configuration.IConnectionStringSettings, System.String, LinqToDB.DataProvider.IDataProvider> providerDetector | Improve this Doc View Source BeginTransaction() Declaration public virtual DataConnectionTransaction BeginTransaction() Returns Type Description DataConnectionTransaction | Improve this Doc View Source BeginTransaction(IsolationLevel) Declaration public virtual DataConnectionTransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Returns Type Description DataConnectionTransaction | Improve this Doc View Source ClearObjectReaderCache() Declaration public static void ClearObjectReaderCache() | Improve this Doc View Source Clone() Declaration public object Clone() Returns Type Description System.Object Implements System.ICloneable.Clone() | Improve this Doc View Source Close() Declaration public virtual void Close() Implements IDataContext.Close() | Improve this Doc View Source CommitTransaction() Declaration public virtual void CommitTransaction() | Improve this Doc View Source CreateCommand() Declaration public IDbCommand CreateCommand() Returns Type Description System.Data.IDbCommand | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements System.IDisposable.Dispose() | Improve this Doc View Source DisposeCommand() Declaration public void DisposeCommand() | Improve this Doc View Source GetConnectionString(String) Declaration public static string GetConnectionString(string configurationString) Parameters Type Name Description System.String configurationString Returns Type Description System.String | Improve this Doc View Source GetDataProvider(String) Declaration public static IDataProvider GetDataProvider(string configurationString) Parameters Type Name Description System.String configurationString Returns Type Description IDataProvider | Improve this Doc View Source GetTable<T>() Declaration public ITable<T> GetTable<T>()where T : class Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source GetTable<T>(Object, MethodInfo, Object[]) Declaration public ITable<T> GetTable<T>(object instance, MethodInfo methodInfo, params object[] parameters)where T : class Parameters Type Name Description System.Object instance System.Reflection.MethodInfo methodInfo System.Object[] parameters Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source ProcessQuery(SelectQuery) Declaration protected virtual SelectQuery ProcessQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SelectQuery | Improve this Doc View Source RollbackTransaction() Declaration public virtual void RollbackTransaction() | Improve this Doc View Source SetConnectionString(String, String) Declaration public static void SetConnectionString(string configuration, string connectionString) Parameters Type Name Description System.String configuration System.String connectionString | Improve this Doc View Source SetConnectionStrings(IEnumerable<IConnectionStringSettings>) Declaration public static void SetConnectionStrings(IEnumerable<IConnectionStringSettings> connectionStrings) Parameters Type Name Description System.Collections.Generic.IEnumerable<LinqToDB.Configuration.IConnectionStringSettings> connectionStrings | Improve this Doc View Source ThrowOnDisposed() Declaration protected void ThrowOnDisposed() | Improve this Doc View Source TurnTraceSwitchOn(TraceLevel) Declaration public static void TurnTraceSwitchOn(TraceLevel traceLevel = TraceLevel.Info) Parameters Type Name Description System.Diagnostics.TraceLevel traceLevel Events | Improve this Doc View Source OnClosed Declaration public event EventHandler OnClosed Event Type Type Description System.EventHandler | Improve this Doc View Source OnClosing Declaration public event EventHandler OnClosing Event Type Type Description System.EventHandler Implements IDataContext.OnClosing Explicit Interface Implementations | Improve this Doc View Source IDataContext.Clone(Boolean) Declaration IDataContext IDataContext.Clone(bool forNestedQuery) Parameters Type Name Description System.Boolean forNestedQuery Returns Type Description IDataContext Implements IDataContext.Clone(Boolean) | Improve this Doc View Source IDataContext.CloseAfterUse Declaration bool IDataContext.CloseAfterUse { get; set; } Returns Type Description System.Boolean Implements IDataContext.CloseAfterUse | Improve this Doc View Source IDataContext.ContextID Declaration string IDataContext.ContextID { get; } Returns Type Description System.String Implements IDataContext.ContextID | Improve this Doc View Source IDataContext.CreateSqlProvider Declaration Func<ISqlBuilder> IDataContext.CreateSqlProvider { get; } Returns Type Description System.Func<LinqToDB.SqlProvider.ISqlBuilder> Implements IDataContext.CreateSqlProvider | Improve this Doc View Source IDataContext.DataReaderType Declaration Type IDataContext.DataReaderType { get; } Returns Type Description System.Type Implements IDataContext.DataReaderType | Improve this Doc View Source IDataContext.ExecuteNonQuery(Object) Declaration int IDataContext.ExecuteNonQuery(object query) Parameters Type Name Description System.Object query Returns Type Description System.Int32 Implements IDataContext.ExecuteNonQuery(Object) | Improve this Doc View Source IDataContext.ExecuteReader(Object) Declaration IDataReader IDataContext.ExecuteReader(object query) Parameters Type Name Description System.Object query Returns Type Description System.Data.IDataReader Implements IDataContext.ExecuteReader(Object) | Improve this Doc View Source IDataContext.ExecuteScalar(Object) Declaration object IDataContext.ExecuteScalar(object query) Parameters Type Name Description System.Object query Returns Type Description System.Object Implements IDataContext.ExecuteScalar(Object) | Improve this Doc View Source IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration Expression IDataContext.GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema System.Data.IDataReader reader System.Int32 idx System.Linq.Expressions.Expression readerExpression System.Type toType Returns Type Description System.Linq.Expressions.Expression Implements IDataContext.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) | Improve this Doc View Source IDataContext.GetSqlOptimizer Declaration Func<ISqlOptimizer> IDataContext.GetSqlOptimizer { get; } Returns Type Description System.Func<LinqToDB.SqlProvider.ISqlOptimizer> Implements IDataContext.GetSqlOptimizer | Improve this Doc View Source IDataContext.GetSqlText(Object) Declaration string IDataContext.GetSqlText(object query) Parameters Type Name Description System.Object query Returns Type Description System.String Implements IDataContext.GetSqlText(Object) | Improve this Doc View Source IDataContext.IsDBNullAllowed(IDataReader, Int32) Declaration bool ? IDataContext.IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description System.Data.IDataReader reader System.Int32 idx Returns Type Description System.Nullable<System.Boolean> Implements IDataContext.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source IDataContext.ReleaseQuery(Object) Declaration void IDataContext.ReleaseQuery(object query) Parameters Type Name Description System.Object query Implements IDataContext.ReleaseQuery(Object) | Improve this Doc View Source IDataContext.SetQuery(IQueryContext) Declaration object IDataContext.SetQuery(IQueryContext queryContext) Parameters Type Name Description IQueryContext queryContext Returns Type Description System.Object Implements IDataContext.SetQuery(IQueryContext) | Improve this Doc View Source IDataContext.SqlProviderFlags Declaration SqlProviderFlags IDataContext.SqlProviderFlags { get; } Returns Type Description SqlProviderFlags Implements IDataContext.SqlProviderFlags Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplace<T>(IDataContext, T) DataExtensions.InsertWithIdentity<T>(IDataContext, T) DataExtensions.Update<T>(IDataContext, T) DataExtensions.Delete<T>(IDataContext, T) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaulNullable) DataExtensions.DropTable<T>(IDataContext, String, String, String) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) DataConnectionExtensions.SetCommand(DataConnection, String) DataConnectionExtensions.Query<T>(DataConnection, Func<IDataReader, T>, String) DataConnectionExtensions.QueryProc<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) DataConnectionExtensions.Query<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) DataConnectionExtensions.Query<T>(DataConnection, Func<IDataReader, T>, String, Object) DataConnectionExtensions.Query<T>(DataConnection, String) DataConnectionExtensions.Query<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryProc<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.Query<T>(DataConnection, String, DataParameter) DataConnectionExtensions.Query<T>(DataConnection, String, Object) DataConnectionExtensions.Query<T>(DataConnection, T, String, DataParameter[]) DataConnectionExtensions.Query<T>(DataConnection, T, String, Object) DataConnectionExtensions.Execute(DataConnection, String) DataConnectionExtensions.Execute(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteProc(DataConnection, String, DataParameter[]) DataConnectionExtensions.Execute(DataConnection, String, Object) DataConnectionExtensions.Execute<T>(DataConnection, String) DataConnectionExtensions.Execute<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteProc<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.Execute<T>(DataConnection, String, DataParameter) DataConnectionExtensions.Execute<T>(DataConnection, String, Object) DataConnectionExtensions.ExecuteReader(DataConnection, String) DataConnectionExtensions.ExecuteReader(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteReader(DataConnection, String, DataParameter) DataConnectionExtensions.ExecuteReader(DataConnection, String, Object) DataConnectionExtensions.ExecuteReader(DataConnection, String, CommandType, CommandBehavior, DataParameter[]) DataConnectionExtensions.BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(DataConnection, Int32, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(DataConnection, IEnumerable<T>) DataConnectionExtensions.Merge<T>(DataConnection, IQueryable<T>, Expression<Func<T, Boolean>>, String, String, String) DataConnectionExtensions.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, IEnumerable<T>, String, String, String) DataConnectionExtensions.Merge<T>(DataConnection, Boolean, IEnumerable<T>, String, String, String) DataConnectionExtensions.Merge<T>(DataConnection, IEnumerable<T>, String, String, String) SqlServerTools.SetIdentityInsert<T>(DataConnection, ITable<T>, Boolean) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>) OracleTools.MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>)"
  },
  "api/LinqToDB.Data.RetryPolicy.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.html",
    "title": "Namespace LinqToDB.Data.RetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Data.RetryPolicy Classes RetryLimitExceededException RetryPolicyBase Interfaces IRetryPolicy"
  },
  "api/LinqToDB.DataProvider.BasicMerge.html": {
    "href": "api/LinqToDB.DataProvider.BasicMerge.html",
    "title": "Class BasicMerge | Linq To DB (aka linq2db)",
    "keywords": "Class BasicMerge Inheritance System.Object BasicMerge Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class BasicMerge Fields | Improve this Doc View Source ByTargetText Declaration protected string ByTargetText Field Value Type Description System.String | Improve this Doc View Source Columns Declaration protected List<BasicMerge.ColumnInfo> Columns Field Value Type Description System.Collections.Generic.List<LinqToDB.DataProvider.BasicMerge.ColumnInfo> | Improve this Doc View Source Parameters Declaration protected List<DataParameter> Parameters Field Value Type Description System.Collections.Generic.List<LinqToDB.Data.DataParameter> | Improve this Doc View Source StringBuilder Declaration protected StringBuilder StringBuilder Field Value Type Description System.Text.StringBuilder Properties | Improve this Doc View Source IsIdentitySupported Declaration protected virtual bool IsIdentitySupported { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source BuildCommand<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration protected virtual bool BuildCommand<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName)where T : class Parameters Type Name Description DataConnection dataConnection System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> deletePredicate System.Boolean delete System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source BuildUsing<T>(DataConnection, IEnumerable<T>) Declaration protected virtual bool BuildUsing<T>(DataConnection dataConnection, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source BuildUsing2<T>(DataConnection, IEnumerable<T>, String, String) Declaration protected bool BuildUsing2<T>(DataConnection dataConnection, IEnumerable<T> source, string top, string fromDummyTable) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.String top System.String fromDummyTable Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Execute(DataConnection) Declaration protected virtual int Execute(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Int32 | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public virtual int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> predicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName)where T : class Parameters Type Name Description DataConnection dataConnection System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> predicate System.Boolean delete System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T"
  },
  "api/LinqToDB.DataProvider.BulkCopyReader.Parameter.html": {
    "href": "api/LinqToDB.DataProvider.BulkCopyReader.Parameter.html",
    "title": "Class BulkCopyReader.Parameter | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyReader.Parameter Inheritance System.Object BulkCopyReader.Parameter Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class Parameter : IDbDataParameter, IDataParameter Properties | Improve this Doc View Source DbType Declaration public DbType DbType { get; set; } Property Value Type Description System.Data.DbType Implements System.Data.IDataParameter.DbType | Improve this Doc View Source Direction Declaration public ParameterDirection Direction { get; set; } Property Value Type Description System.Data.ParameterDirection Implements System.Data.IDataParameter.Direction | Improve this Doc View Source IsNullable Declaration public bool IsNullable { get; } Property Value Type Description System.Boolean Implements System.Data.IDataParameter.IsNullable | Improve this Doc View Source ParameterName Declaration public string ParameterName { get; set; } Property Value Type Description System.String Implements System.Data.IDataParameter.ParameterName | Improve this Doc View Source Precision Declaration public byte Precision { get; set; } Property Value Type Description System.Byte Implements System.Data.IDbDataParameter.Precision | Improve this Doc View Source Scale Declaration public byte Scale { get; set; } Property Value Type Description System.Byte Implements System.Data.IDbDataParameter.Scale | Improve this Doc View Source Size Declaration public int Size { get; set; } Property Value Type Description System.Int32 Implements System.Data.IDbDataParameter.Size | Improve this Doc View Source SourceColumn Declaration public string SourceColumn { get; set; } Property Value Type Description System.String Implements System.Data.IDataParameter.SourceColumn | Improve this Doc View Source SourceVersion Declaration public DataRowVersion SourceVersion { get; set; } Property Value Type Description System.Data.DataRowVersion Implements System.Data.IDataParameter.SourceVersion | Improve this Doc View Source Value Declaration public object Value { get; set; } Property Value Type Description System.Object Implements System.Data.IDataParameter.Value"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreator-3.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreator-3.html",
    "title": "Class TypeCreator<T1, T2, T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreator<T1, T2, T> Inheritance System.Object TypeCreatorBase TypeCreator LinqToDB.DataProvider.DB2.TypeCreator<T1> LinqToDB.DataProvider.DB2.TypeCreator<T1, T2> TypeCreator<T1, T2, T> Inherited Members TypeCreator<T1, T2>.CreateInstance(T2) TypeCreator<T1>.CreateInstance(T1) TypeCreator.CreateInstance() TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class TypeCreator<T1, T2, T> : TypeCreator<T1, T2> Type Parameters Name Description T1 T2 T Methods | Improve this Doc View Source CreateInstance(T) Declaration public dynamic CreateInstance(T value) Parameters Type Name Description T value Returns Type Description System.Object"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreator.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreator.html",
    "title": "Class TypeCreator | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreator Inheritance System.Object TypeCreatorBase TypeCreator TypeCreator<T> Inherited Members TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class TypeCreator : TypeCreatorBase Methods | Improve this Doc View Source CreateInstance() Declaration public dynamic CreateInstance() Returns Type Description System.Object"
  },
  "api/LinqToDB.DataProvider.IDataProviderFactory.html": {
    "href": "api/LinqToDB.DataProvider.IDataProviderFactory.html",
    "title": "Interface IDataProviderFactory | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataProviderFactory Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public interface IDataProviderFactory Methods | Improve this Doc View Source GetDataProvider(IEnumerable<NamedValue>) Declaration IDataProvider GetDataProvider(IEnumerable<NamedValue> attributes) Parameters Type Name Description System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue> attributes Returns Type Description IDataProvider"
  },
  "api/LinqToDB.DataProvider.Informix.InformixDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixDataProvider.html",
    "title": "Class InformixDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class InformixDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase InformixDataProvider Inherited Members DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class InformixDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source InformixDataProvider() Declaration public InformixDataProvider() | Improve this Doc View Source InformixDataProvider(String, MappingSchema) Declaration protected InformixDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration public override int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> deletePredicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName)where T : class Parameters Type Name Description DataConnection dataConnection System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> deletePredicate System.Boolean delete System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.Merge<T>(LinqToDB.Data.DataConnection, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Collections.Generic.IEnumerable<T>, System.String, System.String, System.String) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description System.Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.Oracle.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.html",
    "title": "Namespace LinqToDB.DataProvider.Oracle | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Oracle Classes OracleDataProvider OracleMappingSchema OracleMappingSchema.ManagedMappingSchema OracleMappingSchema.NativeMappingSchema OracleSqlOptimizer OracleTools"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider.html",
    "title": "Class PostgreSQLDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase PostgreSQLDataProvider Inherited Members DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQLDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source PostgreSQLDataProvider(PostgreSQLVersion) Declaration public PostgreSQLDataProvider(PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description PostgreSQLVersion version | Improve this Doc View Source PostgreSQLDataProvider(String, PostgreSQLVersion) Declaration public PostgreSQLDataProvider(string providerName, PostgreSQLVersion version) Parameters Type Name Description System.String providerName PostgreSQLVersion version | Improve this Doc View Source PostgreSQLDataProvider(String, MappingSchema, PostgreSQLVersion) Declaration protected PostgreSQLDataProvider(string name, MappingSchema mappingSchema, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description System.String name MappingSchema mappingSchema PostgreSQLVersion version Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.DataReaderTypeName | Improve this Doc View Source Version Declaration public PostgreSQLVersion Version { get; } Property Value Type Description PostgreSQLVersion Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source GetCommandBehavior(CommandBehavior) Declaration public override CommandBehavior GetCommandBehavior(CommandBehavior commandBehavior) Parameters Type Name Description System.Data.CommandBehavior commandBehavior Returns Type Description System.Data.CommandBehavior Overrides DataProviderBase.GetCommandBehavior(CommandBehavior) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description System.Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.SapHana.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.html",
    "title": "Namespace LinqToDB.DataProvider.SapHana | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SapHana Classes CalculationViewInputParametersExpressionAttribute GetHanaSchemaOptions SapHanaDataProvider SapHanaMappingSchema SapHanaOdbcDataProvider SapHanaTools ViewWithParametersTableSchema"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeDataProvider.html",
    "title": "Class SqlCeDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase SqlCeDataProvider Inherited Members DynamicDataProviderBase.EnsureConnection() DynamicDataProviderBase.GetConnectionType() DynamicDataProviderBase.IsCompatibleConnection(IDbConnection) DynamicDataProviderBase.DataReaderType DynamicDataProviderBase.CreateConnectionInternal(String) DynamicDataProviderBase.CreateConnectionExpression(Type) DynamicDataProviderBase.GetSetParameter(Type, String, String, String, String) DynamicDataProviderBase.IsGetParameter(Type, String, String, String, String) DynamicDataProviderBase.SetField(Type, String, String) DynamicDataProviderBase.SetProviderField(Type, String) DynamicDataProviderBase.SetToTypeField(Type, String) DynamicDataProviderBase.SetProviderField(Type, Type, String) DataProviderBase.DefaultMaxRetryCount DataProviderBase.MaxRetryCount DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[]) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(String) DataProviderBase.GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Expression) DataProviderBase.ConvertParameterType(Type, DataType) DataProviderBase.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public class SqlCeDataProvider : DynamicDataProviderBase, IDataProvider Constructors | Improve this Doc View Source SqlCeDataProvider() Declaration public SqlCeDataProvider() | Improve this Doc View Source SqlCeDataProvider(String, MappingSchema) Declaration protected SqlCeDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source ConnectionNamespace Declaration public override string ConnectionNamespace { get; } Property Value Type Description System.String Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source ConnectionTypeName Declaration protected override string ConnectionTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.ConnectionTypeName | Improve this Doc View Source DataReaderTypeName Declaration protected override string DataReaderTypeName { get; } Property Value Type Description System.String Overrides DynamicDataProviderBase.DataReaderTypeName Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.Data.DataConnection, LinqToDB.Data.BulkCopyOptions, System.Collections.Generic.IEnumerable<T>) | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description System.String databaseName System.Boolean deleteIfExists | Improve this Doc View Source CreateSqlBuilder() Declaration public override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder() | Improve this Doc View Source DropDatabase(String) Declaration public void DropDatabase(string databaseName) Parameters Type Name Description System.String databaseName | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public override bool ? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description System.Data.IDataReader reader System.Int32 idx Returns Type Description System.Nullable<System.Boolean> Overrides DataProviderBase.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source OnConnectionTypeCreated(Type) Declaration protected override void OnConnectionTypeCreated(Type connectionType) Parameters Type Name Description System.Type connectionType Overrides DynamicDataProviderBase.OnConnectionTypeCreated(Type) | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration public override void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value Overrides DataProviderBase.SetParameter(IDbDataParameter, String, DataType, Object) | Improve this Doc View Source SetParameterType(IDbDataParameter, DataType) Declaration protected override void SetParameterType(IDbDataParameter parameter, DataType dataType) Parameters Type Name Description System.Data.IDbDataParameter parameter DataType dataType Overrides DataProviderBase.SetParameterType(IDbDataParameter, DataType)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2012MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2012MappingSchema.html",
    "title": "Class SqlServer2012MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2012MappingSchema Inheritance System.Object MappingSchema SqlServer2012MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Object) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Object) MappingSchema.ChangeType(Object, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, String>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, String>, Boolean) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationID MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Object, DataType) MappingSchema.AddScalarType(Type, Object, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnComparisonOption MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetEntites() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2012MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2012MappingSchema() Declaration public SqlServer2012MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description System.Type from System.Type to Returns Type Description System.Linq.Expressions.LambdaExpression Overrides MappingSchema.TryGetConvertExpression(Type, Type)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerConfiguration.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerConfiguration.html",
    "title": "Class SqlServerConfiguration | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerConfiguration Inheritance System.Object SqlServerConfiguration Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public static class SqlServerConfiguration Fields | Improve this Doc View Source GenerateScopeIdentity Declaration public static bool GenerateScopeIdentity Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.DataProvider.html": {
    "href": "api/LinqToDB.DataProvider.html",
    "title": "Namespace LinqToDB.DataProvider | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider Classes BasicBulkCopy BasicMerge BasicMerge.ColumnInfo BulkCopyReader BulkCopyReader.Parameter DataProviderBase DataTools DynamicDataProviderBase MultipleRowsHelper<T> ReaderInfo Interfaces IDataProvider IDataProviderFactory"
  },
  "api/LinqToDB.DataType.html": {
    "href": "api/LinqToDB.DataType.html",
    "title": "Enum DataType | Linq To DB (aka linq2db)",
    "keywords": "Enum DataType Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum DataType Fields Name Description Binary A fixed-length stream of binary data ranging between 1 and 8,000 bytes. BinaryJson Binary type utilized postgres provider (jsonb) BitArray Array of bits. Blob Binary large object. Boolean A simple type representing Boolean values of true or false. Byte An 8-bit unsigned integer ranging in value from 0 to 255. Char A fixed-length stream of non-Unicode characters ranging between 1 and 8,000 characters. Cursor Result set (for example OracleDbType.RefCursor) Date A type representing a date value. DateTime Date and time data ranging in value from January 1, 1753 to December 31, 9999 to an accuracy of 3.33 milliseconds. DateTime2 Date and time data. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds. DateTimeOffset Date and time data with time zone awareness. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds. Time zone value range is -14:00 through +14:00. Decimal A simple type representing values with fixed precision and scale numbers. When maximum precision is used, valid values are from -10^38+1 through 10^38-1. Dictionary Dictionary type for key-value pairs Double A floating point number within the range of -1.79E +308 through 1.79E +308. Guid A globally unique identifier (or GUID). Image A variable-length stream of binary data ranging from 0 to 2 31 -1 (or 2,147,483,647) bytes. Int16 An integral type representing signed 16-bit integers with values between -32768 and 32767. Int32 An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647. Int64 An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807. Json Json type utilized in postgres provider Money A currency value ranging from -2 63 (or -9,223,372,036,854,775,808) to 2 63 -1 (or +9,223,372,036,854,775,807) with an accuracy to a ten-thousandth of a currency unit. NChar A fixed-length stream of Unicode characters ranging between 1 and 4,000 characters. NText A variable-length stream of Unicode data with a maximum length of 2 30 - 1 (or 1,073,741,823) characters. NVarChar A variable-length stream of Unicode characters ranging between 1 and 4,000 characters. Implicit conversion fails if the string is greater than 4,000 characters. SByte An integral type representing signed 8-bit integers with values between -128 and 127. Single A floating point number within the range of -3.40E +38 through 3.40E +38. SmallDateTime Date and time data ranging in value from January 1, 1900 to June 6, 2079 to an accuracy of one minute. SmallMoney A currency value ranging from -214,748.3648 to +214,748.3647 with an accuracy to a ten-thousandth of a currency unit. Text A variable-length stream of non-Unicode data with a maximum length of 2 31 -1 (or 2,147,483,647) characters. Time A type representing a time value. Timestamp Array of type Byte. Automatically generated binary numbers, which are guaranteed to be unique within a database. timestamp is used typically as a mechanism for version-stamping table rows. The storage size is 8 bytes. Udt A SQL Server 2005 user-defined type (UDT). UInt16 An integral type representing unsigned 16-bit integers with values between 0 and 65535. UInt32 An integral type representing unsigned 32-bit integers with values between 0 and 4294967295. UInt64 An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615. Undefined Undefined data type. VarBinary A variable-length stream of binary data ranging between 1 and 8,000 bytes. Implicit conversion fails if the byte array is greater than 8,000 bytes. VarChar A variable-length stream of non-Unicode characters ranging between 1 and 8,000 characters. Use VarChar when the database column is varchar(max). Variant A general type representing any reference or value type not explicitly represented by another DataType value. VarNumeric A variable-length numeric value. Xml An XML value. Obtain the XML as a string using the GetValue method or Value property, or as an XmlReader by calling the CreateReader method. Extension Methods Sql.Between<DataType>(DataType, DataType) Sql.NotBetween<DataType>(DataType, DataType)"
  },
  "api/LinqToDB.IDataContext.html": {
    "href": "api/LinqToDB.IDataContext.html",
    "title": "Interface IDataContext | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataContext Inherited Members System.IDisposable.Dispose() Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IDataContext : IDisposable Properties | Improve this Doc View Source CloseAfterUse Declaration bool CloseAfterUse { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ContextID Declaration string ContextID { get; } Property Value Type Description System.String | Improve this Doc View Source CreateSqlProvider Declaration Func<ISqlBuilder> CreateSqlProvider { get; } Property Value Type Description System.Func<LinqToDB.SqlProvider.ISqlBuilder> | Improve this Doc View Source DataReaderType Declaration Type DataReaderType { get; } Property Value Type Description System.Type | Improve this Doc View Source GetSqlOptimizer Declaration Func<ISqlOptimizer> GetSqlOptimizer { get; } Property Value Type Description System.Func<LinqToDB.SqlProvider.ISqlOptimizer> | Improve this Doc View Source InlineParameters Declaration bool InlineParameters { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MappingSchema Declaration MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source NextQueryHints Declaration List<string> NextQueryHints { get; } Property Value Type Description System.Collections.Generic.List<System.String> | Improve this Doc View Source QueryHints Declaration List<string> QueryHints { get; } Property Value Type Description System.Collections.Generic.List<System.String> | Improve this Doc View Source SqlProviderFlags Declaration SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags Methods | Improve this Doc View Source Clone(Boolean) Declaration IDataContext Clone(bool forNestedQuery) Parameters Type Name Description System.Boolean forNestedQuery Returns Type Description IDataContext | Improve this Doc View Source Close() Declaration void Close() | Improve this Doc View Source ExecuteNonQuery(Object) Declaration int ExecuteNonQuery(object query) Parameters Type Name Description System.Object query Returns Type Description System.Int32 | Improve this Doc View Source ExecuteReader(Object) Declaration IDataReader ExecuteReader(object query) Parameters Type Name Description System.Object query Returns Type Description System.Data.IDataReader | Improve this Doc View Source ExecuteScalar(Object) Declaration object ExecuteScalar(object query) Parameters Type Name Description System.Object query Returns Type Description System.Object | Improve this Doc View Source GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration Expression GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema System.Data.IDataReader reader System.Int32 idx System.Linq.Expressions.Expression readerExpression System.Type toType Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GetSqlText(Object) Declaration string GetSqlText(object query) Parameters Type Name Description System.Object query Returns Type Description System.String | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration bool ? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description System.Data.IDataReader reader System.Int32 idx Returns Type Description System.Nullable<System.Boolean> | Improve this Doc View Source ReleaseQuery(Object) Declaration void ReleaseQuery(object query) Parameters Type Name Description System.Object query | Improve this Doc View Source SetQuery(IQueryContext) Declaration object SetQuery(IQueryContext queryContext) Parameters Type Name Description IQueryContext queryContext Returns Type Description System.Object Events | Improve this Doc View Source OnClosing Declaration event EventHandler OnClosing Event Type Type Description System.EventHandler Extension Methods DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Object, MethodInfo, Object[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, String, String, String) DataExtensions.InsertOrReplace<T>(IDataContext, T) DataExtensions.InsertWithIdentity<T>(IDataContext, T) DataExtensions.Update<T>(IDataContext, T) DataExtensions.Delete<T>(IDataContext, T) DataExtensions.CreateTable<T>(IDataContext, String, String, String, String, String, DefaulNullable) DataExtensions.DropTable<T>(IDataContext, String, String, String) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>)"
  },
  "api/LinqToDB.ITable-1.html": {
    "href": "api/LinqToDB.ITable-1.html",
    "title": "Interface ITable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface ITable<T> Inherited Members IExpressionQuery<T>.Expression System.Collections.Generic.IEnumerable<T>.GetEnumerator() System.Linq.IQueryable.ElementType System.Linq.IQueryable.Provider System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression) System.Linq.IQueryProvider.CreateQuery<TElement>(System.Linq.Expressions.Expression) System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression) System.Linq.IQueryProvider.Execute<TResult>(System.Linq.Expressions.Expression) IExpressionQuery.SqlText IExpressionQuery.DataContext Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ITable<out T> : IExpressionQuery<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable, IQueryProvider, IExpressionQuery Type Parameters Name Description T Extension Methods AsyncExtensions.ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>) AsyncExtensions.ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) AsyncExtensions.ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, TaskCreationOptions) AsyncExtensions.ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToListAsync<TSource>(IQueryable<TSource>) AsyncExtensions.ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.ToListAsync<TSource>(IQueryable<TSource>, TaskCreationOptions) AsyncExtensions.ToListAsync<TSource>(IQueryable<TSource>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToArrayAsync<TSource>(IQueryable<TSource>) AsyncExtensions.ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.ToArrayAsync<TSource>(IQueryable<TSource>, TaskCreationOptions) AsyncExtensions.ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, TaskCreationOptions) AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken, TaskCreationOptions) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.ContainsAsync<TSource>(IQueryable<TSource>, TSource) AsyncExtensions.ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) AsyncExtensions.LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) AsyncExtensions.MinAsync<TSource>(IQueryable<TSource>) AsyncExtensions.MinAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) AsyncExtensions.MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) AsyncExtensions.MaxAsync<TSource>(IQueryable<TSource>) AsyncExtensions.MaxAsync<TSource>(IQueryable<TSource>, CancellationToken) AsyncExtensions.MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) AsyncExtensions.MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>) AsyncExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>) AsyncExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) DataExtensions.DropTable<T>(ITable<T>, String, String, String) LinqExtensions.TableName<T>(ITable<T>, String) LinqExtensions.DatabaseName<T>(ITable<T>, String) LinqExtensions.OwnerName<T>(ITable<T>, String) LinqExtensions.SchemaName<T>(ITable<T>, String) LinqExtensions.WithTableExpression<T>(ITable<T>, String) LinqExtensions.With<T>(ITable<T>, String) LinqExtensions.LoadWith<T>(ITable<T>, Expression<Func<T, Object>>) LinqExtensions.Delete<T>(IQueryable<T>) LinqExtensions.Delete<T>(IQueryable<T>, Expression<Func<T, Boolean>>) LinqExtensions.Update<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.Update<T>(IQueryable<T>, Expression<Func<T, T>>) LinqExtensions.Update<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>) LinqExtensions.Update<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>) LinqExtensions.AsUpdatable<T>(IQueryable<T>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Insert<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithIdentity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Insert<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWithIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) LinqExtensions.Into<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>) LinqExtensions.InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>) LinqExtensions.InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Expression<Func<T, T>>, Expression<Func<T>>) LinqExtensions.Drop<T>(ITable<T>) LinqExtensions.Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, TakeHints) LinqExtensions.Take<TSource>(IQueryable<TSource>, Int32, TakeHints) LinqExtensions.Skip<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAt<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.ElementAtOrDefault<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) LinqExtensions.Having<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) LinqExtensions.ThenOrBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) LinqExtensions.ThenOrByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) DataConnectionExtensions.BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(ITable<T>, Int32, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(ITable<T>, IEnumerable<T>) ReflectionExtensions.GetListItemType(IEnumerable)"
  },
  "api/LinqToDB.SqlQuery.QueryVisitor.html": {
    "href": "api/LinqToDB.SqlQuery.QueryVisitor.html",
    "title": "Class QueryVisitor | Linq To DB (aka linq2db)",
    "keywords": "Class QueryVisitor Inheritance System.Object QueryVisitor Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class QueryVisitor Properties | Improve this Doc View Source VisitedElements Declaration public Dictionary<IQueryElement, IQueryElement> VisitedElements { get; } Property Value Type Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> Methods | Improve this Doc View Source Convert<T>(T, Func<IQueryElement, IQueryElement>) Declaration public T Convert<T>(T element, Func<IQueryElement, IQueryElement> action)where T : class, IQueryElement Parameters Type Name Description T element System.Func<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> action Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Find(IQueryElement, Func<IQueryElement, Boolean>) Declaration public static IQueryElement Find(IQueryElement element, Func<IQueryElement, bool> find) Parameters Type Name Description IQueryElement element System.Func<LinqToDB.SqlQuery.IQueryElement, System.Boolean> find Returns Type Description IQueryElement | Improve this Doc View Source Visit(IQueryElement, Action<IQueryElement>) Declaration public void Visit(IQueryElement element, Action<IQueryElement> action) Parameters Type Name Description IQueryElement element System.Action<LinqToDB.SqlQuery.IQueryElement> action | Improve this Doc View Source VisitAll(IQueryElement, Action<IQueryElement>) Declaration public void VisitAll(IQueryElement element, Action<IQueryElement> action) Parameters Type Name Description IQueryElement element System.Action<LinqToDB.SqlQuery.IQueryElement> action | Improve this Doc View Source VisitParentFirst(IQueryElement, Func<IQueryElement, Boolean>) Declaration public void VisitParentFirst(IQueryElement element, Func<IQueryElement, bool> action) Parameters Type Name Description IQueryElement element System.Func<LinqToDB.SqlQuery.IQueryElement, System.Boolean> action"
  },
  "api/LinqToDB.Linq.Builder.SequenceConvertPath.html": {
    "href": "api/LinqToDB.Linq.Builder.SequenceConvertPath.html",
    "title": "Class SequenceConvertPath | Linq To DB (aka linq2db)",
    "keywords": "Class SequenceConvertPath Inheritance System.Object SequenceConvertPath Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class SequenceConvertPath Fields | Improve this Doc View Source Expr Declaration public Expression Expr Field Value Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Level Declaration public int Level Field Value Type Description System.Int32 | Improve this Doc View Source Path Declaration public Expression Path Field Value Type Description System.Linq.Expressions.Expression"
  },
  "api/LinqToDB.Linq.Builder.SqlInfo.html": {
    "href": "api/LinqToDB.Linq.Builder.SqlInfo.html",
    "title": "Class SqlInfo | Linq To DB (aka linq2db)",
    "keywords": "Class SqlInfo Inheritance System.Object SqlInfo Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class SqlInfo Constructors | Improve this Doc View Source SqlInfo() Declaration public SqlInfo() | Improve this Doc View Source SqlInfo(IEnumerable<MemberInfo>) Declaration public SqlInfo(IEnumerable<MemberInfo> mi) Parameters Type Name Description System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> mi | Improve this Doc View Source SqlInfo(MemberInfo) Declaration public SqlInfo(MemberInfo mi) Parameters Type Name Description System.Reflection.MemberInfo mi Fields | Improve this Doc View Source Index Declaration public int Index Field Value Type Description System.Int32 | Improve this Doc View Source Members Declaration public readonly List<MemberInfo> Members Field Value Type Description System.Collections.Generic.List<System.Reflection.MemberInfo> | Improve this Doc View Source Query Declaration public SelectQuery Query Field Value Type Description SelectQuery | Improve this Doc View Source Sql Declaration public ISqlExpression Sql Field Value Type Description ISqlExpression Methods | Improve this Doc View Source Clone() Declaration public SqlInfo Clone() Returns Type Description SqlInfo | Improve this Doc View Source Clone(MemberInfo) Declaration public SqlInfo Clone(MemberInfo mi) Parameters Type Name Description System.Reflection.MemberInfo mi Returns Type Description SqlInfo | Improve this Doc View Source CompareLastMember(SqlInfo) Declaration public bool CompareLastMember(SqlInfo info) Parameters Type Name Description SqlInfo info Returns Type Description System.Boolean | Improve this Doc View Source CompareMembers(SqlInfo) Declaration public bool CompareMembers(SqlInfo info) Parameters Type Name Description SqlInfo info Returns Type Description System.Boolean"
  },
  "api/LinqToDB.Linq.Builder.html": {
    "href": "api/LinqToDB.Linq.Builder.html",
    "title": "Namespace LinqToDB.Linq.Builder | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Linq.Builder Classes SequenceConvertInfo SequenceConvertPath SqlInfo Enums ConvertFlags RequestFor"
  },
  "api/LinqToDB.Linq.Expressions.LazyExpressionInfo.html": {
    "href": "api/LinqToDB.Linq.Expressions.LazyExpressionInfo.html",
    "title": "Class Expressions.LazyExpressionInfo | Linq To DB (aka linq2db)",
    "keywords": "Class Expressions.LazyExpressionInfo Inheritance System.Object Expressions.LazyExpressionInfo Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public class LazyExpressionInfo : IExpressionInfo Fields | Improve this Doc View Source Lambda Declaration public Func<LambdaExpression> Lambda Field Value Type Description System.Func<System.Linq.Expressions.LambdaExpression> Methods | Improve this Doc View Source GetExpression(MappingSchema) Declaration public LambdaExpression GetExpression(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description System.Linq.Expressions.LambdaExpression Implements IExpressionInfo.GetExpression(MappingSchema) | Improve this Doc View Source SetExpression(LambdaExpression) Declaration public void SetExpression(LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.LambdaExpression expression"
  },
  "api/LinqToDB.Mapping.SequenceNameAttribute.html": {
    "href": "api/LinqToDB.Mapping.SequenceNameAttribute.html",
    "title": "Class SequenceNameAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class SequenceNameAttribute Inheritance System.Object System.Attribute SequenceNameAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)] public class SequenceNameAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source SequenceNameAttribute(String) Declaration public SequenceNameAttribute(string sequenceName) Parameters Type Name Description System.String sequenceName | Improve this Doc View Source SequenceNameAttribute(String, String) Declaration public SequenceNameAttribute(string configuration, string sequenceName) Parameters Type Name Description System.String configuration System.String sequenceName Properties | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source SequenceName Declaration public string SequenceName { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Mapping.StoredProcedure.html": {
    "href": "api/LinqToDB.Mapping.StoredProcedure.html",
    "title": "Class StoredProcedure | Linq To DB (aka linq2db)",
    "keywords": "Class StoredProcedure Inheritance System.Object System.Attribute StoredProcedure Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)] public class StoredProcedure : Attribute, _Attribute Constructors | Improve this Doc View Source StoredProcedure() Declaration public StoredProcedure() | Improve this Doc View Source StoredProcedure(String) Declaration public StoredProcedure(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Schema Declaration public string Schema { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Mapping.TableAttribute.html": {
    "href": "api/LinqToDB.Mapping.TableAttribute.html",
    "title": "Class TableAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class TableAttribute Inheritance System.Object System.Attribute TableAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)] public class TableAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source TableAttribute() Declaration public TableAttribute() | Improve this Doc View Source TableAttribute(String) Declaration public TableAttribute(string tableName) Parameters Type Name Description System.String tableName Properties | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsColumnAttributeRequired Declaration public bool IsColumnAttributeRequired { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsView Declaration public bool IsView { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Schema Declaration public string Schema { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Mapping.html": {
    "href": "api/LinqToDB.Mapping.html",
    "title": "Namespace LinqToDB.Mapping | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Mapping Classes AssociationAttribute AssociationDescriptor ColumnAliasAttribute Associates a property with another column property in a class. ColumnAttribute Associates a class with a column in a database table. ColumnDescriptor DataTypeAttribute Associates a member with a column type in a database table. EntityDescriptor EntityMappingBuilder<T> FluentMappingBuilder IdentityAttribute InheritanceMapping InheritanceMappingAttribute MappingSchema MapValue MapValueAttribute Defines bidirectional mapping between enum field value, used on client and database value, stored in database and used in queries. Enumeration field could have multiple MapValueAttribute attributes. Mapping from database value to enumeration performed when you load data from database. Linq2db will search for enumeration field with MapValueAttribute with required value. If attribute with such value is not found, you will receive LinqToDBException error. If you cannot specify all possible values using MapValueAttribute , you can specify custom mapping using methods like SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) . Mapping from enumeration value performed when you save it to database or use in query. If your enum field has multiple MapValueAttribute attributes, you should mark one of them as default using IsDefault property. NotColumnAttribute NotNullAttribute NullableAttribute PrimaryKeyAttribute PropertyMappingBuilder<T> ScalarTypeAttribute SequenceNameAttribute StoredProcedure TableAttribute Enums Relationship"
  },
  "api/LinqToDB.SchemaProvider.ISchemaProvider.html": {
    "href": "api/LinqToDB.SchemaProvider.ISchemaProvider.html",
    "title": "Interface ISchemaProvider | Linq To DB (aka linq2db)",
    "keywords": "Interface ISchemaProvider Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public interface ISchemaProvider Methods | Improve this Doc View Source GetSchema(DataConnection, GetSchemaOptions) Declaration DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options = null) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options Returns Type Description DatabaseSchema"
  },
  "api/LinqToDB.SchemaProvider.ParameterSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ParameterSchema.html",
    "title": "Class ParameterSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ParameterSchema Inheritance System.Object ParameterSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ParameterSchema Properties | Improve this Doc View Source DataType Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source IsIn Declaration public bool IsIn { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOut Declaration public bool IsOut { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsResult Declaration public bool IsResult { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ParameterName Declaration public string ParameterName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ParameterType Declaration public string ParameterType { get; set; } Property Value Type Description System.String | Improve this Doc View Source ProviderSpecificType Declaration public string ProviderSpecificType { get; set; } Property Value Type Description System.String | Improve this Doc View Source SchemaName Declaration public string SchemaName { get; set; } Property Value Type Description System.String | Improve this Doc View Source SchemaType Declaration public string SchemaType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Size Declaration public long ? Size { get; set; } Property Value Type Description System.Nullable<System.Int64> | Improve this Doc View Source SystemType Declaration public Type SystemType { get; set; } Property Value Type Description System.Type"
  },
  "api/LinqToDB.SchemaProvider.PrimaryKeyInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.PrimaryKeyInfo.html",
    "title": "Class PrimaryKeyInfo | Linq To DB (aka linq2db)",
    "keywords": "Class PrimaryKeyInfo Inheritance System.Object PrimaryKeyInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class PrimaryKeyInfo Fields | Improve this Doc View Source ColumnName Declaration public string ColumnName Field Value Type Description System.String | Improve this Doc View Source Ordinal Declaration public int Ordinal Field Value Type Description System.Int32 | Improve this Doc View Source PrimaryKeyName Declaration public string PrimaryKeyName Field Value Type Description System.String | Improve this Doc View Source TableID Declaration public string TableID Field Value Type Description System.String"
  },
  "api/LinqToDB.SchemaProvider.ProcedureInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ProcedureInfo.html",
    "title": "Class ProcedureInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ProcedureInfo Inheritance System.Object ProcedureInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ProcedureInfo Fields | Improve this Doc View Source CatalogName Declaration public string CatalogName Field Value Type Description System.String | Improve this Doc View Source IsAggregateFunction Declaration public bool IsAggregateFunction Field Value Type Description System.Boolean | Improve this Doc View Source IsDefaultSchema Declaration public bool IsDefaultSchema Field Value Type Description System.Boolean | Improve this Doc View Source IsFunction Declaration public bool IsFunction Field Value Type Description System.Boolean | Improve this Doc View Source IsTableFunction Declaration public bool IsTableFunction Field Value Type Description System.Boolean | Improve this Doc View Source ProcedureDefinition Declaration public string ProcedureDefinition Field Value Type Description System.String | Improve this Doc View Source ProcedureID Declaration public string ProcedureID Field Value Type Description System.String | Improve this Doc View Source ProcedureName Declaration public string ProcedureName Field Value Type Description System.String | Improve this Doc View Source SchemaName Declaration public string SchemaName Field Value Type Description System.String"
  },
  "api/LinqToDB.Sql.GroupBy.html": {
    "href": "api/LinqToDB.Sql.GroupBy.html",
    "title": "Enum Sql.GroupBy | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.GroupBy Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum GroupBy Fields Name Description None Extension Methods Sql.Between<Sql.GroupBy>(Sql.GroupBy, Sql.GroupBy) Sql.NotBetween<Sql.GroupBy>(Sql.GroupBy, Sql.GroupBy)"
  },
  "api/LinqToDB.Sql.IExtensionCallBuilder.html": {
    "href": "api/LinqToDB.Sql.IExtensionCallBuilder.html",
    "title": "Interface Sql.IExtensionCallBuilder | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.IExtensionCallBuilder Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IExtensionCallBuilder Methods | Improve this Doc View Source Build(Sql.ISqExtensionBuilder) Declaration void Build(Sql.ISqExtensionBuilder builder) Parameters Type Name Description Sql.ISqExtensionBuilder builder"
  },
  "api/LinqToDB.Sql.ISqExtensionBuilder.html": {
    "href": "api/LinqToDB.Sql.ISqExtensionBuilder.html",
    "title": "Interface Sql.ISqExtensionBuilder | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.ISqExtensionBuilder Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ISqExtensionBuilder Properties | Improve this Doc View Source Configuration Declaration string Configuration { get; } Property Value Type Description System.String | Improve this Doc View Source Expression Declaration string Expression { get; set; } Property Value Type Description System.String | Improve this Doc View Source Extension Declaration Sql.SqlExtension Extension { get; } Property Value Type Description Sql.SqlExtension | Improve this Doc View Source Mapping Declaration MappingSchema Mapping { get; } Property Value Type Description MappingSchema | Improve this Doc View Source Member Declaration MemberInfo Member { get; } Property Value Type Description System.Reflection.MemberInfo | Improve this Doc View Source ResultExpression Declaration ISqlExpression ResultExpression { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source AddParameter(String, ISqlExpression) Declaration Sql.SqlExtensionParam AddParameter(string name, ISqlExpression expr) Parameters Type Name Description System.String name ISqlExpression expr Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source ConvertToSqlExpression() Declaration ISqlExpression ConvertToSqlExpression() Returns Type Description ISqlExpression | Improve this Doc View Source ConvertToSqlExpression(Int32) Declaration ISqlExpression ConvertToSqlExpression(int precedence) Parameters Type Name Description System.Int32 precedence Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(Int32) Declaration ISqlExpression GetExpression(int index) Parameters Type Name Description System.Int32 index Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(String) Declaration ISqlExpression GetExpression(string argName) Parameters Type Name Description System.String argName Returns Type Description ISqlExpression | Improve this Doc View Source GetValue<T>(Int32) Declaration T GetValue<T>(int index) Parameters Type Name Description System.Int32 index Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValue<T>(String) Declaration T GetValue<T>(string argName) Parameters Type Name Description System.String argName Returns Type Description T Type Parameters Name Description T Extension Methods ExtensionlBuilderExtensions.AddParameter(Sql.ISqExtensionBuilder, String, String) ExtensionlBuilderExtensions.AddExpression(Sql.ISqExtensionBuilder, String, String) ExtensionlBuilderExtensions.Add(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Add<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Add(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Inc(Sql.ISqExtensionBuilder, ISqlExpression) ExtensionlBuilderExtensions.Sub(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Sub<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Sub(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Dec(Sql.ISqExtensionBuilder, ISqlExpression) ExtensionlBuilderExtensions.Mul(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Mul<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Mul(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Div(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Div<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Div(Sql.ISqExtensionBuilder, ISqlExpression, Int32)"
  },
  "api/LinqToDB.Sql.ISqlExtension.html": {
    "href": "api/LinqToDB.Sql.ISqlExtension.html",
    "title": "Interface Sql.ISqlExtension | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.ISqlExtension Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ISqlExtension Extension Methods AnalyticFunctions.Average<T>(Sql.ISqlExtension, Object) AnalyticFunctions.Average<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier) AnalyticFunctions.Corr<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.Count(Sql.ISqlExtension) AnalyticFunctions.Count<T>(Sql.ISqlExtension, T) AnalyticFunctions.Count(Sql.ISqlExtension, Object, Sql.AggregateModifier) AnalyticFunctions.CovarPop<T>(Sql.ISqlExtension, T, T) AnalyticFunctions.CovarSamp<T>(Sql.ISqlExtension, T, T) AnalyticFunctions.CumeDist<TR>(Sql.ISqlExtension, Object[]) AnalyticFunctions.CumeDist<TR>(Sql.ISqlExtension) AnalyticFunctions.DenseRank(Sql.ISqlExtension, Object, Object) AnalyticFunctions.DenseRank(Sql.ISqlExtension) AnalyticFunctions.FirstValue<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lag<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lag<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) AnalyticFunctions.LastValue<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lead<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lead<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) AnalyticFunctions.ListAgg<T>(Sql.ISqlExtension, T) AnalyticFunctions.ListAgg<T>(Sql.ISqlExtension, T, String) AnalyticFunctions.Max<T>(Sql.ISqlExtension, T) AnalyticFunctions.Max<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) AnalyticFunctions.Median<T>(Sql.ISqlExtension, T) AnalyticFunctions.Min<T>(Sql.ISqlExtension, T) AnalyticFunctions.Min<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) AnalyticFunctions.NthValue<T>(Sql.ISqlExtension, T, Int64) AnalyticFunctions.NthValue<T>(Sql.ISqlExtension, T, Int64, Sql.From, Sql.Nulls) AnalyticFunctions.NTile<T>(Sql.ISqlExtension, T) AnalyticFunctions.PercentRank<T>(Sql.ISqlExtension, Object[]) AnalyticFunctions.PercentRank<T>(Sql.ISqlExtension) AnalyticFunctions.PercentileCont<T>(Sql.ISqlExtension, Object) AnalyticFunctions.PercentileDisc<T>(Sql.ISqlExtension, Object) AnalyticFunctions.Rank(Sql.ISqlExtension, Object[]) AnalyticFunctions.Rank(Sql.ISqlExtension) AnalyticFunctions.RatioToReport<TR>(Sql.ISqlExtension, Object) AnalyticFunctions.RegrSlope<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrIntercept<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrCount(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrR2<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrAvgX<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrAvgY<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrSXX<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrSYY<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RegrSXY<T>(Sql.ISqlExtension, Object, Object) AnalyticFunctions.RowNumber(Sql.ISqlExtension) AnalyticFunctions.StdDev<T>(Sql.ISqlExtension, Object) AnalyticFunctions.StdDev<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier) AnalyticFunctions.StdDevPop<T>(Sql.ISqlExtension, Object) AnalyticFunctions.StdDevSamp<T>(Sql.ISqlExtension, Object) AnalyticFunctions.Sum<T>(Sql.ISqlExtension, T) AnalyticFunctions.Sum<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) AnalyticFunctions.VarPop<T>(Sql.ISqlExtension, Object) AnalyticFunctions.VarSamp<T>(Sql.ISqlExtension, Object) AnalyticFunctions.Variance<T>(Sql.ISqlExtension, Object) AnalyticFunctions.Variance<T>(Sql.ISqlExtension, Object, Sql.AggregateModifier)"
  },
  "api/LinqToDB.AnalyticFunctions.IAnalyticFunction-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IAnalyticFunction-1.html",
    "title": "Interface AnalyticFunctions.IAnalyticFunction<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IAnalyticFunction<TR> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IAnalyticFunction<out TR> Type Parameters Name Description TR Methods | Improve this Doc View Source Over() Declaration [Sql.Extension(\"{function} OVER({query_partition_clause?}{_}{order_by_clause?}{_}{windowing_clause?})\", TokenName = \"over\", ChainPrecedence = 10, SqlFlags = SqlFlags.Aggregate)] AnalyticFunctions.IReadyForFullAnalyticClause<TR> Over() Returns Type Description LinqToDB.AnalyticFunctions.IReadyForFullAnalyticClause<TR>"
  },
  "api/LinqToDB.AnalyticFunctions.IOrderedReadyToFunction-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IOrderedReadyToFunction-1.html",
    "title": "Interface AnalyticFunctions.IOrderedReadyToFunction<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IOrderedReadyToFunction<TR> Inherited Members AnalyticFunctions.IReadyToFunction<TR>.ToValue() Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IOrderedReadyToFunction<out TR> : AnalyticFunctions.IReadyToFunction<TR> Type Parameters Name Description TR Methods | Improve this Doc View Source ThenBy<TKey>(TKey) Declaration [Sql.Extension(\"{expr}\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedReadyToFunction<TR> ThenBy<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description AnalyticFunctions.IOrderedReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source ThenBy<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"{expr}\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedReadyToFunction<TR> ThenBy<TKey>([ExprParameter] TKey expr, Sql.NullsPosition nulls) Parameters Type Name Description TKey expr Sql.NullsPosition nulls Returns Type Description AnalyticFunctions.IOrderedReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source ThenByDesc<TKey>(TKey) Declaration [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\")] AnalyticFunctions.IOrderedReadyToFunction<TR> ThenByDesc<TKey>([ExprParameter] TKey expr) Parameters Type Name Description TKey expr Returns Type Description AnalyticFunctions.IOrderedReadyToFunction<TR> Type Parameters Name Description TKey | Improve this Doc View Source ThenByDesc<TKey>(TKey, Sql.NullsPosition) Declaration [Sql.Extension(\"{expr} DESC\", TokenName = \"order_item\", BuilderType = typeof (AnalyticFunctions.OrderItemBuilder))] AnalyticFunctions.IOrderedReadyToFunction<TR> ThenByDesc<TKey>([ExprParameter] TKey expr, Sql.NullsPosition nulls) Parameters Type Name Description TKey expr Sql.NullsPosition nulls Returns Type Description AnalyticFunctions.IOrderedReadyToFunction<TR> Type Parameters Name Description TKey"
  },
  "api/LinqToDB.AnalyticFunctions.IPartitionDefinedReadyForSortingWithWindow-1.html": {
    "href": "api/LinqToDB.AnalyticFunctions.IPartitionDefinedReadyForSortingWithWindow-1.html",
    "title": "Interface AnalyticFunctions.IPartitionDefinedReadyForSortingWithWindow<TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface AnalyticFunctions.IPartitionDefinedReadyForSortingWithWindow<TR> Inherited Members AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderBy<TKey>(TKey) AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderBy<TKey>(TKey, Sql.NullsPosition) AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderByDesc<TKey>(TKey) AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderByDesc<TKey>(TKey, Sql.NullsPosition) AnalyticFunctions.IReadyToFunction<TR>.ToValue() Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IPartitionDefinedReadyForSortingWithWindow<out TR> : AnalyticFunctions.IReadyForSortingWithWindow<TR>, AnalyticFunctions.IReadyToFunction<TR> Type Parameters Name Description TR"
  },
  "api/LinqToDB.AsyncExtensions.html": {
    "href": "api/LinqToDB.AsyncExtensions.html",
    "title": "Class AsyncExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class AsyncExtensions Inheritance System.Object AsyncExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class AsyncExtensions Methods | Improve this Doc View Source AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Declaration public static Task<bool> AllAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate Returns Type Description System.Threading.Tasks.Task<System.Boolean> Type Parameters Name Description TSource | Improve this Doc View Source AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<bool> AllAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Boolean> Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>) Declaration public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source) Parameters Type Name Description System.Linq.IQueryable<TSource> source Returns Type Description System.Threading.Tasks.Task<System.Boolean> Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Declaration public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate Returns Type Description System.Threading.Tasks.Task<System.Boolean> Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Boolean> Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Boolean> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync(IQueryable<Decimal>) Declaration public static Task<decimal> AverageAsync(this IQueryable<decimal> source) Parameters Type Name Description System.Linq.IQueryable<System.Decimal> source Returns Type Description System.Threading.Tasks.Task<System.Decimal> | Improve this Doc View Source AverageAsync(IQueryable<Decimal>, CancellationToken) Declaration public static Task<decimal> AverageAsync(this IQueryable<decimal> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Decimal> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Decimal> | Improve this Doc View Source AverageAsync(IQueryable<Double>) Declaration public static Task<double> AverageAsync(this IQueryable<double> source) Parameters Type Name Description System.Linq.IQueryable<System.Double> source Returns Type Description System.Threading.Tasks.Task<System.Double> | Improve this Doc View Source AverageAsync(IQueryable<Double>, CancellationToken) Declaration public static Task<double> AverageAsync(this IQueryable<double> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Double> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Double> | Improve this Doc View Source AverageAsync(IQueryable<Int32>) Declaration public static Task<double> AverageAsync(this IQueryable<int> source) Parameters Type Name Description System.Linq.IQueryable<System.Int32> source Returns Type Description System.Threading.Tasks.Task<System.Double> | Improve this Doc View Source AverageAsync(IQueryable<Int32>, CancellationToken) Declaration public static Task<double> AverageAsync(this IQueryable<int> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Int32> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Double> | Improve this Doc View Source AverageAsync(IQueryable<Int64>) Declaration public static Task<double> AverageAsync(this IQueryable<long> source) Parameters Type Name Description System.Linq.IQueryable<System.Int64> source Returns Type Description System.Threading.Tasks.Task<System.Double> | Improve this Doc View Source AverageAsync(IQueryable<Int64>, CancellationToken) Declaration public static Task<double> AverageAsync(this IQueryable<long> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Int64> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Double> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Decimal>>) Declaration public static Task<decimal ? > AverageAsync(this IQueryable<decimal ? > source) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Decimal>> source Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Decimal>> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public static Task<decimal ? > AverageAsync(this IQueryable<decimal ? > source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Decimal>> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Decimal>> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Double>>) Declaration public static Task<double ? > AverageAsync(this IQueryable<double ? > source) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Double>> source Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration public static Task<double ? > AverageAsync(this IQueryable<double ? > source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Double>> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int32>>) Declaration public static Task<double ? > AverageAsync(this IQueryable<int ? > source) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Int32>> source Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public static Task<double ? > AverageAsync(this IQueryable<int ? > source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Int32>> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int64>>) Declaration public static Task<double ? > AverageAsync(this IQueryable<long ? > source) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Int64>> source Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public static Task<double ? > AverageAsync(this IQueryable<long ? > source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Int64>> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Single>>) Declaration public static Task<float ? > AverageAsync(this IQueryable<float ? > source) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Single>> source Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Single>> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration public static Task<float ? > AverageAsync(this IQueryable<float ? > source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Single>> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Single>> | Improve this Doc View Source AverageAsync(IQueryable<Single>) Declaration public static Task<float> AverageAsync(this IQueryable<float> source) Parameters Type Name Description System.Linq.IQueryable<System.Single> source Returns Type Description System.Threading.Tasks.Task<System.Single> | Improve this Doc View Source AverageAsync(IQueryable<Single>, CancellationToken) Declaration public static Task<float> AverageAsync(this IQueryable<float> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Single> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Single> | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>) Declaration public static Task<decimal> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>> selector Returns Type Description System.Threading.Tasks.Task<System.Decimal> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public static Task<decimal> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Decimal> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Double>> selector Returns Type Description System.Threading.Tasks.Task<System.Double> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Double>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Double> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>> selector Returns Type Description System.Threading.Tasks.Task<System.Double> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Double> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>> selector Returns Type Description System.Threading.Tasks.Task<System.Double> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Double> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>) Declaration public static Task<decimal ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>> selector Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Decimal>> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public static Task<decimal ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Decimal>> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>) Declaration public static Task<double ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>> selector Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public static Task<double ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>) Declaration public static Task<double ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>> selector Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public static Task<double ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>) Declaration public static Task<double ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>> selector Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public static Task<double ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>) Declaration public static Task<float ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>> selector Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Single>> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public static Task<float ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Single>> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>) Declaration public static Task<float> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Single>> selector Returns Type Description System.Threading.Tasks.Task<System.Single> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public static Task<float> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Single>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Single> Type Parameters Name Description TSource | Improve this Doc View Source ContainsAsync<TSource>(IQueryable<TSource>, TSource) Declaration public static Task<bool> ContainsAsync<TSource>(this IQueryable<TSource> source, TSource item) Parameters Type Name Description System.Linq.IQueryable<TSource> source TSource item Returns Type Description System.Threading.Tasks.Task<System.Boolean> Type Parameters Name Description TSource | Improve this Doc View Source ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken) Declaration public static Task<bool> ContainsAsync<TSource>(this IQueryable<TSource> source, TSource item, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source TSource item System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Boolean> Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>) Declaration public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source) Parameters Type Name Description System.Linq.IQueryable<TSource> source Returns Type Description System.Threading.Tasks.Task<System.Int32> Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Declaration public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate Returns Type Description System.Threading.Tasks.Task<System.Int32> Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Int32> Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Int32> Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>) Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source) Parameters Type Name Description System.Linq.IQueryable<TSource> source Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>) Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source) Parameters Type Name Description System.Linq.IQueryable<TSource> source Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>) Declaration public static Task ForEachAsync<TSource>(this IQueryable<TSource> source, Action<TSource> action) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Action<TSource> action Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TSource | Improve this Doc View Source ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) Declaration public static Task ForEachAsync<TSource>(this IQueryable<TSource> source, Action<TSource> action, CancellationToken token) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Action<TSource> action System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TSource | Improve this Doc View Source ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken, TaskCreationOptions) Declaration public static Task ForEachAsync<TSource>(this IQueryable<TSource> source, Action<TSource> action, CancellationToken token, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Action<TSource> action System.Threading.CancellationToken token System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TSource | Improve this Doc View Source ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, TaskCreationOptions) Declaration public static Task ForEachAsync<TSource>(this IQueryable<TSource> source, Action<TSource> action, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Action<TSource> action System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>) Declaration public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source) Parameters Type Name Description System.Linq.IQueryable<TSource> source Returns Type Description System.Threading.Tasks.Task<System.Int64> Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Declaration public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate Returns Type Description System.Threading.Tasks.Task<System.Int64> Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Int64> Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Int64> Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource>(IQueryable<TSource>) Declaration public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> source) Parameters Type Name Description System.Linq.IQueryable<TSource> source Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) Declaration public static Task<TResult> MaxAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector Returns Type Description System.Threading.Tasks.Task<TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public static Task<TResult> MaxAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source MinAsync<TSource>(IQueryable<TSource>) Declaration public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> source) Parameters Type Name Description System.Linq.IQueryable<TSource> source Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source MinAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) Declaration public static Task<TResult> MinAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector Returns Type Description System.Threading.Tasks.Task<TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public static Task<TResult> MinAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>) Declaration public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source) Parameters Type Name Description System.Linq.IQueryable<TSource> source Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Declaration public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>) Declaration public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source) Parameters Type Name Description System.Linq.IQueryable<TSource> source Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Declaration public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<TSource> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync(IQueryable<Decimal>) Declaration public static Task<decimal> SumAsync(this IQueryable<decimal> source) Parameters Type Name Description System.Linq.IQueryable<System.Decimal> source Returns Type Description System.Threading.Tasks.Task<System.Decimal> | Improve this Doc View Source SumAsync(IQueryable<Decimal>, CancellationToken) Declaration public static Task<decimal> SumAsync(this IQueryable<decimal> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Decimal> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Decimal> | Improve this Doc View Source SumAsync(IQueryable<Double>) Declaration public static Task<double> SumAsync(this IQueryable<double> source) Parameters Type Name Description System.Linq.IQueryable<System.Double> source Returns Type Description System.Threading.Tasks.Task<System.Double> | Improve this Doc View Source SumAsync(IQueryable<Double>, CancellationToken) Declaration public static Task<double> SumAsync(this IQueryable<double> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Double> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Double> | Improve this Doc View Source SumAsync(IQueryable<Int32>) Declaration public static Task<int> SumAsync(this IQueryable<int> source) Parameters Type Name Description System.Linq.IQueryable<System.Int32> source Returns Type Description System.Threading.Tasks.Task<System.Int32> | Improve this Doc View Source SumAsync(IQueryable<Int32>, CancellationToken) Declaration public static Task<int> SumAsync(this IQueryable<int> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Int32> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Int32> | Improve this Doc View Source SumAsync(IQueryable<Int64>) Declaration public static Task<long> SumAsync(this IQueryable<long> source) Parameters Type Name Description System.Linq.IQueryable<System.Int64> source Returns Type Description System.Threading.Tasks.Task<System.Int64> | Improve this Doc View Source SumAsync(IQueryable<Int64>, CancellationToken) Declaration public static Task<long> SumAsync(this IQueryable<long> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Int64> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Int64> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Decimal>>) Declaration public static Task<decimal ? > SumAsync(this IQueryable<decimal ? > source) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Decimal>> source Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Decimal>> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public static Task<decimal ? > SumAsync(this IQueryable<decimal ? > source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Decimal>> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Decimal>> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Double>>) Declaration public static Task<double ? > SumAsync(this IQueryable<double ? > source) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Double>> source Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration public static Task<double ? > SumAsync(this IQueryable<double ? > source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Double>> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int32>>) Declaration public static Task<int ? > SumAsync(this IQueryable<int ? > source) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Int32>> source Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Int32>> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public static Task<int ? > SumAsync(this IQueryable<int ? > source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Int32>> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Int32>> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int64>>) Declaration public static Task<long ? > SumAsync(this IQueryable<long ? > source) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Int64>> source Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Int64>> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public static Task<long ? > SumAsync(this IQueryable<long ? > source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Int64>> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Int64>> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Single>>) Declaration public static Task<float ? > SumAsync(this IQueryable<float ? > source) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Single>> source Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Single>> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration public static Task<float ? > SumAsync(this IQueryable<float ? > source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Nullable<System.Single>> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Single>> | Improve this Doc View Source SumAsync(IQueryable<Single>) Declaration public static Task<float> SumAsync(this IQueryable<float> source) Parameters Type Name Description System.Linq.IQueryable<System.Single> source Returns Type Description System.Threading.Tasks.Task<System.Single> | Improve this Doc View Source SumAsync(IQueryable<Single>, CancellationToken) Declaration public static Task<float> SumAsync(this IQueryable<float> source, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<System.Single> source System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Single> | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>) Declaration public static Task<decimal> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>> selector Returns Type Description System.Threading.Tasks.Task<System.Decimal> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public static Task<decimal> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Decimal> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>) Declaration public static Task<double> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Double>> selector Returns Type Description System.Threading.Tasks.Task<System.Double> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public static Task<double> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Double>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Double> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>) Declaration public static Task<int> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>> selector Returns Type Description System.Threading.Tasks.Task<System.Int32> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public static Task<int> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Int32> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>) Declaration public static Task<long> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>> selector Returns Type Description System.Threading.Tasks.Task<System.Int64> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public static Task<long> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Int64> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>) Declaration public static Task<decimal ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>> selector Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Decimal>> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public static Task<decimal ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Decimal>> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>) Declaration public static Task<double ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>> selector Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public static Task<double ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Double>> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>) Declaration public static Task<int ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>> selector Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Int32>> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public static Task<int ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Int32>> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>) Declaration public static Task<long ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>> selector Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Int64>> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public static Task<long ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Int64>> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>) Declaration public static Task<float ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>> selector Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Single>> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public static Task<float ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Nullable<System.Single>> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>) Declaration public static Task<float> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Single>> selector Returns Type Description System.Threading.Tasks.Task<System.Single> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public static Task<float> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Linq.Expressions.Expression<System.Func<TSource, System.Single>> selector System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task<System.Single> Type Parameters Name Description TSource | Improve this Doc View Source ToArrayAsync<TSource>(IQueryable<TSource>) Declaration public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source) Parameters Type Name Description System.Linq.IQueryable<TSource> source Returns Type Description System.Threading.Tasks.Task<TSource[]> Type Parameters Name Description TSource | Improve this Doc View Source ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task<TSource[]> Type Parameters Name Description TSource | Improve this Doc View Source ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken, TaskCreationOptions) Declaration public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source, CancellationToken token, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken token System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<TSource[]> Type Parameters Name Description TSource | Improve this Doc View Source ToArrayAsync<TSource>(IQueryable<TSource>, TaskCreationOptions) Declaration public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<TSource[]> Type Parameters Name Description TSource | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>) Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Collections.Generic.IEqualityComparer<TKey> comparer Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken token) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Collections.Generic.IEqualityComparer<TKey> comparer System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken, TaskCreationOptions) Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken token, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Collections.Generic.IEqualityComparer<TKey> comparer System.Threading.CancellationToken token System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, TaskCreationOptions) Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Collections.Generic.IEqualityComparer<TKey> comparer System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken token) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken, TaskCreationOptions) Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken token, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Threading.CancellationToken token System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, TaskCreationOptions) Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Func<TSource, TElement> elementSelector Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Func<TSource, TElement> elementSelector System.Collections.Generic.IEqualityComparer<TKey> comparer Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken token) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Func<TSource, TElement> elementSelector System.Collections.Generic.IEqualityComparer<TKey> comparer System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken, TaskCreationOptions) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken token, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Func<TSource, TElement> elementSelector System.Collections.Generic.IEqualityComparer<TKey> comparer System.Threading.CancellationToken token System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, TaskCreationOptions) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Func<TSource, TElement> elementSelector System.Collections.Generic.IEqualityComparer<TKey> comparer System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken token) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Func<TSource, TElement> elementSelector System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken, TaskCreationOptions) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken token, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Func<TSource, TElement> elementSelector System.Threading.CancellationToken token System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TaskCreationOptions) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Func<TSource, TKey> keySelector System.Func<TSource, TElement> elementSelector System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToListAsync<TSource>(IQueryable<TSource>) Declaration public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source) Parameters Type Name Description System.Linq.IQueryable<TSource> source Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<TSource>> Type Parameters Name Description TSource | Improve this Doc View Source ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<TSource>> Type Parameters Name Description TSource | Improve this Doc View Source ToListAsync<TSource>(IQueryable<TSource>, CancellationToken, TaskCreationOptions) Declaration public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source, CancellationToken token, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.CancellationToken token System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<TSource>> Type Parameters Name Description TSource | Improve this Doc View Source ToListAsync<TSource>(IQueryable<TSource>, TaskCreationOptions) Declaration public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source, TaskCreationOptions options) Parameters Type Name Description System.Linq.IQueryable<TSource> source System.Threading.Tasks.TaskCreationOptions options Returns Type Description System.Threading.Tasks.Task<System.Collections.Generic.List<TSource>> Type Parameters Name Description TSource"
  },
  "api/LinqToDB.Common.ConvertTo-1.html": {
    "href": "api/LinqToDB.Common.ConvertTo-1.html",
    "title": "Class ConvertTo<TTo> | Linq To DB (aka linq2db)",
    "keywords": "Class ConvertTo<TTo> Inheritance System.Object ConvertTo<TTo> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class ConvertTo<TTo> Type Parameters Name Description TTo Methods | Improve this Doc View Source From<TFrom>(TFrom) Declaration public static TTo From<TFrom>(TFrom o) Parameters Type Name Description TFrom o Returns Type Description TTo Type Parameters Name Description TFrom"
  },
  "api/LinqToDB.Configuration.DataProviderElementCollection.html": {
    "href": "api/LinqToDB.Configuration.DataProviderElementCollection.html",
    "title": "Class DataProviderElementCollection | Linq To DB (aka linq2db)",
    "keywords": "Class DataProviderElementCollection Inheritance System.Object System.Configuration.ConfigurationElement System.Configuration.ConfigurationElementCollection LinqToDB.Configuration.ElementCollectionBase<LinqToDB.Configuration.DataProviderElement> DataProviderElementCollection Inherited Members ElementCollectionBase<DataProviderElement>.CreateNewElement() ElementCollectionBase<DataProviderElement>.GetElementKey(ConfigurationElement) ElementCollectionBase<DataProviderElement>.Item[String] ElementCollectionBase<DataProviderElement>.Item[Int32] System.Configuration.ConfigurationElementCollection.IsModified() System.Configuration.ConfigurationElementCollection.ResetModified() System.Configuration.ConfigurationElementCollection.IsReadOnly() System.Configuration.ConfigurationElementCollection.SetReadOnly() System.Configuration.ConfigurationElementCollection.Equals(System.Object) System.Configuration.ConfigurationElementCollection.GetHashCode() System.Configuration.ConfigurationElementCollection.Unmerge(System.Configuration.ConfigurationElement, System.Configuration.ConfigurationElement, System.Configuration.ConfigurationSaveMode) System.Configuration.ConfigurationElementCollection.Reset(System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElementCollection.CopyTo(System.Configuration.ConfigurationElement[], System.Int32) System.Configuration.ConfigurationElementCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Configuration.ConfigurationElementCollection.GetEnumerator() System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement, System.Boolean) System.Configuration.ConfigurationElementCollection.BaseIndexOf(System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElementCollection.BaseAdd(System.Int32, System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElementCollection.BaseRemove(System.Object) System.Configuration.ConfigurationElementCollection.BaseGet(System.Object) System.Configuration.ConfigurationElementCollection.BaseIsRemoved(System.Object) System.Configuration.ConfigurationElementCollection.BaseGet(System.Int32) System.Configuration.ConfigurationElementCollection.BaseGetAllKeys() System.Configuration.ConfigurationElementCollection.BaseGetKey(System.Int32) System.Configuration.ConfigurationElementCollection.BaseClear() System.Configuration.ConfigurationElementCollection.BaseRemoveAt(System.Int32) System.Configuration.ConfigurationElementCollection.SerializeElement(System.Xml.XmlWriter, System.Boolean) System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String, System.Xml.XmlReader) System.Configuration.ConfigurationElementCollection.CreateNewElement(System.String) System.Configuration.ConfigurationElementCollection.IsElementRemovable(System.Configuration.ConfigurationElement) System.Configuration.ConfigurationElementCollection.IsElementName(System.String) System.Configuration.ConfigurationElementCollection.AddElementName System.Configuration.ConfigurationElementCollection.RemoveElementName System.Configuration.ConfigurationElementCollection.ClearElementName System.Configuration.ConfigurationElementCollection.Count System.Configuration.ConfigurationElementCollection.EmitClear System.Configuration.ConfigurationElementCollection.IsSynchronized System.Configuration.ConfigurationElementCollection.SyncRoot System.Configuration.ConfigurationElementCollection.ElementName System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate System.Configuration.ConfigurationElementCollection.CollectionType System.Configuration.ConfigurationElement.Init() System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList) System.Configuration.ConfigurationElement.InitializeDefault() System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty, System.Object, System.Boolean) System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter, System.String) System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader, System.Boolean) System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String) System.Configuration.ConfigurationElement.PostDeserialize() System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter) System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String, System.String) System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String) System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String) System.Configuration.ConfigurationElement.LockAttributes System.Configuration.ConfigurationElement.LockAllAttributesExcept System.Configuration.ConfigurationElement.LockElements System.Configuration.ConfigurationElement.LockAllElementsExcept System.Configuration.ConfigurationElement.LockItem System.Configuration.ConfigurationElement.Item[System.Configuration.ConfigurationProperty] System.Configuration.ConfigurationElement.Properties System.Configuration.ConfigurationElement.ElementInformation System.Configuration.ConfigurationElement.EvaluationContext System.Configuration.ConfigurationElement.ElementProperty System.Configuration.ConfigurationElement.HasContext System.Configuration.ConfigurationElement.CurrentConfiguration Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax [ConfigurationCollection(typeof (DataProviderElement))] public class DataProviderElementCollection : ElementCollectionBase<DataProviderElement>, ICollection, IEnumerable Methods | Improve this Doc View Source GetElementKey(DataProviderElement) Declaration protected override object GetElementKey(DataProviderElement element) Parameters Type Name Description DataProviderElement element Returns Type Description System.Object Overrides LinqToDB.Configuration.ElementCollectionBase<LinqToDB.Configuration.DataProviderElement>.GetElementKey(LinqToDB.Configuration.DataProviderElement) Extension Methods Tools.IsNullOrEmpty(ICollection) ReflectionExtensions.GetListItemType(IEnumerable)"
  },
  "api/LinqToDB.Configuration.html": {
    "href": "api/LinqToDB.Configuration.html",
    "title": "Namespace LinqToDB.Configuration | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Configuration Classes DataProviderElement DataProviderElementCollection ElementBase ElementCollectionBase<T> LinqToDBSection Implementation of custom configuration section. NamedValue Interfaces IConnectionStringSettings IDataProviderSettings ILinqToDBSettings"
  },
  "api/LinqToDB.Data.DataConnectionExtensions.html": {
    "href": "api/LinqToDB.Data.DataConnectionExtensions.html",
    "title": "Class DataConnectionExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class DataConnectionExtensions Inheritance System.Object DataConnectionExtensions Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public static class DataConnectionExtensions Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source BulkCopy<T>(DataConnection, IEnumerable<T>) Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source BulkCopy<T>(DataConnection, Int32, IEnumerable<T>) Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, int maxBatchSize, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection System.Int32 maxBatchSize System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public static BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description LinqToDB.ITable<T> table BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source BulkCopy<T>(ITable<T>, IEnumerable<T>) Declaration public static BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, IEnumerable<T> source) Parameters Type Name Description LinqToDB.ITable<T> table System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source BulkCopy<T>(ITable<T>, Int32, IEnumerable<T>) Declaration public static BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, int maxBatchSize, IEnumerable<T> source) Parameters Type Name Description LinqToDB.ITable<T> table System.Int32 maxBatchSize System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source Execute(DataConnection, String) Declaration public static int Execute(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection System.String sql Returns Type Description System.Int32 | Improve this Doc View Source Execute(DataConnection, String, DataParameter[]) Declaration public static int Execute(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection System.String sql LinqToDB.Data.DataParameter[] parameters Returns Type Description System.Int32 | Improve this Doc View Source Execute(DataConnection, String, Object) Declaration public static int Execute(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection System.String sql System.Object parameters Returns Type Description System.Int32 | Improve this Doc View Source Execute<T>(DataConnection, String) Declaration public static T Execute<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection System.String sql Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Execute<T>(DataConnection, String, DataParameter) Declaration public static T Execute<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection System.String sql DataParameter parameter Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Execute<T>(DataConnection, String, DataParameter[]) Declaration public static T Execute<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection System.String sql LinqToDB.Data.DataParameter[] parameters Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Execute<T>(DataConnection, String, Object) Declaration public static T Execute<T>(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection System.String sql System.Object parameters Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteProc(DataConnection, String, DataParameter[]) Declaration public static int ExecuteProc(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection System.String sql LinqToDB.Data.DataParameter[] parameters Returns Type Description System.Int32 | Improve this Doc View Source ExecuteProc<T>(DataConnection, String, DataParameter[]) Declaration public static T ExecuteProc<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection System.String sql LinqToDB.Data.DataParameter[] parameters Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteReader(DataConnection, String) Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection System.String sql Returns Type Description DataReader | Improve this Doc View Source ExecuteReader(DataConnection, String, DataParameter) Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection System.String sql DataParameter parameter Returns Type Description DataReader | Improve this Doc View Source ExecuteReader(DataConnection, String, DataParameter[]) Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection System.String sql LinqToDB.Data.DataParameter[] parameters Returns Type Description DataReader | Improve this Doc View Source ExecuteReader(DataConnection, String, CommandType, CommandBehavior, DataParameter[]) Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, CommandType commandType, CommandBehavior commandBehavior, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection System.String sql System.Data.CommandType commandType System.Data.CommandBehavior commandBehavior LinqToDB.Data.DataParameter[] parameters Returns Type Description DataReader | Improve this Doc View Source ExecuteReader(DataConnection, String, Object) Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection System.String sql System.Object parameters Returns Type Description DataReader | Improve this Doc View Source Merge<T>(DataConnection, Boolean, IEnumerable<T>, String, String, String) Declaration public static int Merge<T>(this DataConnection dataConnection, bool delete, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null)where T : class Parameters Type Name Description DataConnection dataConnection System.Boolean delete System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Merge<T>(DataConnection, IEnumerable<T>, String, String, String) Declaration public static int Merge<T>(this DataConnection dataConnection, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null)where T : class Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, IEnumerable<T>, String, String, String) Declaration public static int Merge<T>(this DataConnection dataConnection, Expression<Func<T, bool>> predicate, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null)where T : class Parameters Type Name Description DataConnection dataConnection System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> predicate System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Merge<T>(DataConnection, IQueryable<T>, Expression<Func<T, Boolean>>, String, String, String) Declaration public static int Merge<T>(this DataConnection dataConnection, IQueryable<T> source, Expression<Func<T, bool>> predicate, string tableName = null, string databaseName = null, string schemaName = null)where T : class Parameters Type Name Description DataConnection dataConnection System.Linq.IQueryable<T> source System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> predicate System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Merge<T>(ITable<T>, Boolean, IEnumerable<T>, String, String, String) Declaration public static int Merge<T>(this ITable<T> table, bool delete, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null)where T : class Parameters Type Name Description LinqToDB.ITable<T> table System.Boolean delete System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Merge<T>(ITable<T>, IEnumerable<T>, String, String, String) Declaration public static int Merge<T>(this ITable<T> table, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null)where T : class Parameters Type Name Description LinqToDB.ITable<T> table System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Merge<T>(ITable<T>, Expression<Func<T, Boolean>>, IEnumerable<T>, String, String, String) Declaration public static int Merge<T>(this ITable<T> table, Expression<Func<T, bool>> predicate, IEnumerable<T> source, string tableName = null, string databaseName = null, string schemaName = null)where T : class Parameters Type Name Description LinqToDB.ITable<T> table System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> predicate System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Merge<T>(ITable<T>, IQueryable<T>, Expression<Func<T, Boolean>>, String, String, String) Declaration public static int Merge<T>(this ITable<T> table, IQueryable<T> source, Expression<Func<T, bool>> predicate, string tableName = null, string databaseName = null, string schemaName = null)where T : class Parameters Type Name Description LinqToDB.ITable<T> table System.Linq.IQueryable<T> source System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> predicate System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Query<T>(DataConnection, T, String, DataParameter[]) Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, T template, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection T template System.String sql LinqToDB.Data.DataParameter[] parameters Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(DataConnection, T, String, Object) Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, T template, string sql, object parameters) Parameters Type Name Description DataConnection connection T template System.String sql System.Object parameters Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(DataConnection, Func<IDataReader, T>, String) Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql) Parameters Type Name Description DataConnection connection System.Func<System.Data.IDataReader, T> objectReader System.String sql Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection System.Func<System.Data.IDataReader, T> objectReader System.String sql LinqToDB.Data.DataParameter[] parameters Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(DataConnection, Func<IDataReader, T>, String, Object) Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, object parameters) Parameters Type Name Description DataConnection connection System.Func<System.Data.IDataReader, T> objectReader System.String sql System.Object parameters Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(DataConnection, String) Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection System.String sql Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(DataConnection, String, DataParameter) Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection System.String sql DataParameter parameter Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(DataConnection, String, DataParameter[]) Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection System.String sql LinqToDB.Data.DataParameter[] parameters Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(DataConnection, String, Object) Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql, object parameters) Parameters Type Name Description DataConnection connection System.String sql System.Object parameters Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source QueryProc<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) Declaration public static IEnumerable<T> QueryProc<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection System.Func<System.Data.IDataReader, T> objectReader System.String sql LinqToDB.Data.DataParameter[] parameters Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source QueryProc<T>(DataConnection, String, DataParameter[]) Declaration public static IEnumerable<T> QueryProc<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection System.String sql LinqToDB.Data.DataParameter[] parameters Returns Type Description System.Collections.Generic.IEnumerable<T> Type Parameters Name Description T | Improve this Doc View Source SetCommand(DataConnection, String) Declaration public static CommandInfo SetCommand(this DataConnection dataConnection, string commandText) Parameters Type Name Description DataConnection dataConnection System.String commandText Returns Type Description CommandInfo | Improve this Doc View Source SetCommand(DataConnection, String, DataParameter) Declaration public static CommandInfo SetCommand(DataConnection dataConnection, string commandText, DataParameter parameter) Parameters Type Name Description DataConnection dataConnection System.String commandText DataParameter parameter Returns Type Description CommandInfo | Improve this Doc View Source SetCommand(DataConnection, String, DataParameter[]) Declaration public static CommandInfo SetCommand(DataConnection dataConnection, string commandText, params DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection System.String commandText LinqToDB.Data.DataParameter[] parameters Returns Type Description CommandInfo | Improve this Doc View Source SetCommand(DataConnection, String, Object) Declaration public static CommandInfo SetCommand(DataConnection dataConnection, string commandText, object parameters) Parameters Type Name Description DataConnection dataConnection System.String commandText System.Object parameters Returns Type Description CommandInfo"
  },
  "api/LinqToDB.Data.TraceInfo.html": {
    "href": "api/LinqToDB.Data.TraceInfo.html",
    "title": "Class TraceInfo | Linq To DB (aka linq2db)",
    "keywords": "Class TraceInfo Inheritance System.Object TraceInfo Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class TraceInfo Constructors | Improve this Doc View Source TraceInfo(TraceInfoStep) Declaration public TraceInfo(TraceInfoStep traceInfoStep) Parameters Type Name Description TraceInfoStep traceInfoStep Properties | Improve this Doc View Source BeforeExecute Declaration [Obsolete(\"Use TraceInfoStep instead.\")] public bool BeforeExecute { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Command Declaration public IDbCommand Command { get; set; } Property Value Type Description System.Data.IDbCommand | Improve this Doc View Source CommandText Declaration public string CommandText { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataConnection Declaration public DataConnection DataConnection { get; set; } Property Value Type Description DataConnection | Improve this Doc View Source Exception Declaration public Exception Exception { get; set; } Property Value Type Description System.Exception | Improve this Doc View Source ExecutionTime Declaration public TimeSpan? ExecutionTime { get; set; } Property Value Type Description System.Nullable<System.TimeSpan> | Improve this Doc View Source MapperExpression Declaration public Expression MapperExpression { get; set; } Property Value Type Description System.Linq.Expressions.Expression | Improve this Doc View Source RecordsAffected Declaration public int ? RecordsAffected { get; set; } Property Value Type Description System.Nullable<System.Int32> | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description System.String | Improve this Doc View Source TraceInfoStep Declaration public TraceInfoStep TraceInfoStep { get; } Property Value Type Description TraceInfoStep | Improve this Doc View Source TraceLevel Declaration public TraceLevel TraceLevel { get; set; } Property Value Type Description System.Diagnostics.TraceLevel"
  },
  "api/LinqToDB.Data.TraceInfoStep.html": {
    "href": "api/LinqToDB.Data.TraceInfoStep.html",
    "title": "Enum TraceInfoStep | Linq To DB (aka linq2db)",
    "keywords": "Enum TraceInfoStep Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public enum TraceInfoStep Fields Name Description AfterExecute BeforeExecute Completed Error MapperCreated Extension Methods Sql.Between<TraceInfoStep>(TraceInfoStep, TraceInfoStep) Sql.NotBetween<TraceInfoStep>(TraceInfoStep, TraceInfoStep)"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreator-1.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreator-1.html",
    "title": "Class TypeCreator<T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreator<T> Inheritance System.Object TypeCreatorBase TypeCreator TypeCreator<T> TypeCreator<T1, T> Inherited Members TypeCreator.CreateInstance() TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class TypeCreator<T> : TypeCreator Type Parameters Name Description T Methods | Improve this Doc View Source CreateInstance(T) Declaration public dynamic CreateInstance(T value) Parameters Type Name Description T value Returns Type Description System.Object"
  },
  "api/LinqToDB.DataProvider.DB2.TypeCreator-2.html": {
    "href": "api/LinqToDB.DataProvider.DB2.TypeCreator-2.html",
    "title": "Class TypeCreator<T1, T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeCreator<T1, T> Inheritance System.Object TypeCreatorBase TypeCreator LinqToDB.DataProvider.DB2.TypeCreator<T1> TypeCreator<T1, T> TypeCreator<T1, T2, T> Inherited Members TypeCreator<T1>.CreateInstance(T1) TypeCreator.CreateInstance() TypeCreatorBase.Type TypeCreatorBase.GetCreator<T>() TypeCreatorBase.GetCreator<T>(Type) TypeCreatorBase.IsSupported Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class TypeCreator<T1, T> : TypeCreator<T1> Type Parameters Name Description T1 T Methods | Improve this Doc View Source CreateInstance(T) Declaration public dynamic CreateInstance(T value) Parameters Type Name Description T value Returns Type Description System.Object"
  },
  "api/LinqToDB.DataProvider.Firebird.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.html",
    "title": "Namespace LinqToDB.DataProvider.Firebird | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Firebird Classes FirebirdConfiguration FirebirdDataProvider FirebirdMappingSchema FirebirdSqlBuilder FirebirdTools Enums FirebirdIdentifierQuoteMode Possible modes for Firebird identifier quotes."
  },
  "api/LinqToDB.DataProvider.IDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.IDataProvider.html",
    "title": "Interface IDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataProvider Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public interface IDataProvider Properties | Improve this Doc View Source ConnectionNamespace Declaration string ConnectionNamespace { get; } Property Value Type Description System.String | Improve this Doc View Source DataReaderType Declaration Type DataReaderType { get; } Property Value Type Description System.Type | Improve this Doc View Source MappingSchema Declaration MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source Name Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source SqlProviderFlags Declaration SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Declaration BulkCopyRowsCopied BulkCopy<T>(DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description DataConnection dataConnection BulkCopyOptions options System.Collections.Generic.IEnumerable<T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ConvertParameterType(Type, DataType) Declaration Type ConvertParameterType(Type type, DataType dataType) Parameters Type Name Description System.Type type DataType dataType Returns Type Description System.Type | Improve this Doc View Source CreateConnection(String) Declaration IDbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.IDbConnection | Improve this Doc View Source CreateSqlBuilder() Declaration ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder | Improve this Doc View Source DisposeCommand(DataConnection) Declaration void DisposeCommand(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection | Improve this Doc View Source GetCommandBehavior(CommandBehavior) Declaration CommandBehavior GetCommandBehavior(CommandBehavior commandBehavior) Parameters Type Name Description System.Data.CommandBehavior commandBehavior Returns Type Description System.Data.CommandBehavior | Improve this Doc View Source GetConnectionInfo(DataConnection, String) Declaration object GetConnectionInfo(DataConnection dataConnection, string parameterName) Parameters Type Name Description DataConnection dataConnection System.String parameterName Returns Type Description System.Object | Improve this Doc View Source GetReaderExpression(MappingSchema, IDataReader, Int32, Expression, Type) Declaration Expression GetReaderExpression(MappingSchema mappingSchema, IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description MappingSchema mappingSchema System.Data.IDataReader reader System.Int32 idx System.Linq.Expressions.Expression readerExpression System.Type toType Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GetSchemaProvider() Declaration ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider | Improve this Doc View Source GetSqlOptimizer() Declaration ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[]) Declaration void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection System.Data.CommandType commandType System.String commandText LinqToDB.Data.DataParameter[] parameters | Improve this Doc View Source IsCompatibleConnection(IDbConnection) Declaration bool IsCompatibleConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description System.Boolean | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration bool ? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description System.Data.IDataReader reader System.Int32 idx Returns Type Description System.Nullable<System.Boolean> | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, Boolean, IEnumerable<T>, String, String, String) Declaration int Merge<T>(DataConnection dataConnection, Expression<Func<T, bool>> predicate, bool delete, IEnumerable<T> source, string tableName, string databaseName, string schemaName)where T : class Parameters Type Name Description DataConnection dataConnection System.Linq.Expressions.Expression<System.Func<T, System.Boolean>> predicate System.Boolean delete System.Collections.Generic.IEnumerable<T> source System.String tableName System.String databaseName System.String schemaName Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source SetParameter(IDbDataParameter, String, DataType, Object) Declaration void SetParameter(IDbDataParameter parameter, string name, DataType dataType, object value) Parameters Type Name Description System.Data.IDbDataParameter parameter System.String name DataType dataType System.Object value"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleSqlOptimizer.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleSqlOptimizer.html",
    "title": "Class OracleSqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Class OracleSqlOptimizer Inheritance System.Object BasicSqlOptimizer OracleSqlOptimizer Inherited Members BasicSqlOptimizer.SqlProviderFlags BasicSqlOptimizer.ConvertCountSubQuery(SelectQuery) BasicSqlOptimizer.ConvertPredicate(SelectQuery, ISqlPredicate) BasicSqlOptimizer.ConvertEqualPredicate(SelectQuery.Predicate.ExprExpr) BasicSqlOptimizer.GetMaxLength(SqlDataType) BasicSqlOptimizer.GetMaxPrecision(SqlDataType) BasicSqlOptimizer.GetMaxScale(SqlDataType) BasicSqlOptimizer.GetMaxDisplaySize(SqlDataType) BasicSqlOptimizer.ConvertConvertion(SqlFunction) BasicSqlOptimizer.AlternativeConvertToBoolean(SqlFunction, Int32) BasicSqlOptimizer.IsDateDataType(ISqlExpression, String) BasicSqlOptimizer.IsTimeDataType(ISqlExpression) BasicSqlOptimizer.FloorBeforeConvert(SqlFunction) BasicSqlOptimizer.GetAlternativeDelete(SelectQuery) BasicSqlOptimizer.GetAlternativeUpdate(SelectQuery) BasicSqlOptimizer.CheckAliases(SelectQuery, Int32) BasicSqlOptimizer.Add(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Add<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Add(ISqlExpression, Int32) BasicSqlOptimizer.Inc(ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Sub<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, Int32) BasicSqlOptimizer.Dec(ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Mul<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, Int32) BasicSqlOptimizer.Div(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Div<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Div(ISqlExpression, Int32) BasicSqlOptimizer.OptimizeJoins(SelectQuery) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleSqlOptimizer : BasicSqlOptimizer, ISqlOptimizer Constructors | Improve this Doc View Source OracleSqlOptimizer(SqlProviderFlags) Declaration public OracleSqlOptimizer(SqlProviderFlags sqlProviderFlags) Parameters Type Name Description SqlProviderFlags sqlProviderFlags Methods | Improve this Doc View Source ConvertExpression(ISqlExpression) Declaration public override ISqlExpression ConvertExpression(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description ISqlExpression Overrides BasicSqlOptimizer.ConvertExpression(ISqlExpression) | Improve this Doc View Source Finalize(SelectQuery) Declaration public override SelectQuery Finalize(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SelectQuery Overrides BasicSqlOptimizer.Finalize(SelectQuery)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleTools.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleTools.html",
    "title": "Class OracleTools | Linq To DB (aka linq2db)",
    "keywords": "Class OracleTools Inheritance System.Object OracleTools Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public static class OracleTools Fields | Improve this Doc View Source AssemblyName Declaration public static string AssemblyName Field Value Type Description System.String | Improve this Doc View Source DataReaderGetDecimal Declaration public static Func<IDataReader, int, decimal> DataReaderGetDecimal Field Value Type Description System.Func<System.Data.IDataReader, System.Int32, System.Decimal> | Improve this Doc View Source UseAlternativeBulkCopy Declaration public static bool UseAlternativeBulkCopy Field Value Type Description System.Boolean Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source DetectedProviderName Declaration public static string DetectedProviderName { get; } Property Value Type Description System.String | Improve this Doc View Source IsXmlTypeSupported Declaration public static bool IsXmlTypeSupported { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source GetXmlData<T>(MappingSchema, IEnumerable<T>) Declaration public static string GetXmlData<T>(MappingSchema mappingSchema, IEnumerable<T> data) Parameters Type Name Description MappingSchema mappingSchema System.Collections.Generic.IEnumerable<T> data Returns Type Description System.String Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(this DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Int32 maxBatchSize System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source OracleXmlTable<T>(IDataContext, IEnumerable<T>) Declaration public static ITable<T> OracleXmlTable<T>(this IDataContext dataContext, IEnumerable<T> data)where T : class Parameters Type Name Description IDataContext dataContext System.Collections.Generic.IEnumerable<T> data Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source OracleXmlTable<T>(IDataContext, Func<String>) Declaration public static ITable<T> OracleXmlTable<T>(this IDataContext dataContext, Func<string> xmlData)where T : class Parameters Type Name Description IDataContext dataContext System.Func<System.String> xmlData Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source OracleXmlTable<T>(IDataContext, String) Declaration public static ITable<T> OracleXmlTable<T>(this IDataContext dataContext, string xmlData)where T : class Parameters Type Name Description IDataContext dataContext System.String xmlData Returns Type Description LinqToDB.ITable<T> Type Parameters Name Description T | Improve this Doc View Source ProviderSpecificBulkCopy<T>(DataConnection, IEnumerable<T>, Nullable<Int32>, Nullable<Int32>, Int32, Action<BulkCopyRowsCopied>) Declaration public static BulkCopyRowsCopied ProviderSpecificBulkCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int ? maxBatchSize = null, int ? bulkCopyTimeout = null, int notifyAfter = 0, Action<BulkCopyRowsCopied> rowsCopiedCallback = null) Parameters Type Name Description DataConnection dataConnection System.Collections.Generic.IEnumerable<T> source System.Nullable<System.Int32> maxBatchSize System.Nullable<System.Int32> bulkCopyTimeout System.Int32 notifyAfter System.Action<LinqToDB.Data.BulkCopyRowsCopied> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveOracle(Assembly) Declaration public static void ResolveOracle(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly | Improve this Doc View Source ResolveOracle(String) Declaration public static void ResolveOracle(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaTools.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaTools.html",
    "title": "Class SapHanaTools | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaTools Inheritance System.Object SapHanaTools Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public static class SapHanaTools Fields | Improve this Doc View Source AssemblyName Declaration public static string AssemblyName Field Value Type Description System.String Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source ResolveSapHana(Assembly) Declaration public static void ResolveSapHana(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly | Improve this Doc View Source ResolveSapHana(String) Declaration public static void ResolveSapHana(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.SapHana.ViewWithParametersTableSchema.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.ViewWithParametersTableSchema.html",
    "title": "Class ViewWithParametersTableSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ViewWithParametersTableSchema Inheritance System.Object TableSchema ViewWithParametersTableSchema Inherited Members TableSchema.ID TableSchema.CatalogName TableSchema.SchemaName TableSchema.TableName TableSchema.Description TableSchema.IsDefaultSchema TableSchema.IsView TableSchema.IsProcedureResult TableSchema.TypeName TableSchema.IsProviderSpecific TableSchema.Columns TableSchema.ForeignKeys Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class ViewWithParametersTableSchema : TableSchema Constructors | Improve this Doc View Source ViewWithParametersTableSchema() Declaration public ViewWithParametersTableSchema() Properties | Improve this Doc View Source Parameters Declaration public List<ParameterSchema> Parameters { get; set; } Property Value Type Description System.Collections.Generic.List<LinqToDB.SchemaProvider.ParameterSchema>"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.html",
    "title": "Class SqlServerRetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerRetryPolicy Inheritance System.Object RetryPolicyBase SqlServerRetryPolicy Inherited Members RetryPolicyBase.ExceptionsEncountered RetryPolicyBase.Random RetryPolicyBase.MaxRetryCount RetryPolicyBase.MaxRetryDelay RetryPolicyBase.Suspended RetryPolicyBase.Execute<TResult>(Func<TResult>) RetryPolicyBase.Execute(Action) RetryPolicyBase.ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) RetryPolicyBase.ExecuteAsync(Func<CancellationToken, Task>, CancellationToken) RetryPolicyBase.OnFirstExecution() RetryPolicyBase.OnRetry() Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerRetryPolicy : RetryPolicyBase, IRetryPolicy Constructors | Improve this Doc View Source SqlServerRetryPolicy() Creates a new instance of SqlServerRetryPolicy . Declaration public SqlServerRetryPolicy() Remarks The default retry limit is 5, which means that the total amount of time spent before failing is 26 seconds plus the random factor. | Improve this Doc View Source SqlServerRetryPolicy(Int32) Creates a new instance of SqlServerRetryPolicy . Declaration public SqlServerRetryPolicy(int maxRetryCount) Parameters Type Name Description System.Int32 maxRetryCount The maximum number of retry attempts. | Improve this Doc View Source SqlServerRetryPolicy(Int32, TimeSpan, ICollection<Int32>) Creates a new instance of SqlServerRetryPolicy . Declaration public SqlServerRetryPolicy(int maxRetryCount, TimeSpan maxRetryDelay, ICollection<int> errorNumbersToAdd) Parameters Type Name Description System.Int32 maxRetryCount The maximum number of retry attempts. System.TimeSpan maxRetryDelay The maximum delay in milliseconds between retries. System.Collections.Generic.ICollection<System.Int32> errorNumbersToAdd Additional SQL error numbers that should be considered transient. Methods | Improve this Doc View Source GetNextDelay(Exception) Declaration protected override TimeSpan? GetNextDelay(Exception lastException) Parameters Type Name Description System.Exception lastException Returns Type Description System.Nullable<System.TimeSpan> Overrides RetryPolicyBase.GetNextDelay(Exception) | Improve this Doc View Source ShouldRetryOn(Exception) Declaration protected override bool ShouldRetryOn(Exception exception) Parameters Type Name Description System.Exception exception Returns Type Description System.Boolean Overrides RetryPolicyBase.ShouldRetryOn(Exception)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.Sql.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.Sql.html",
    "title": "Class SqlServerTools.Sql | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerTools.Sql Inheritance System.Object SqlServerTools.Sql Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public static class Sql Fields | Improve this Doc View Source OptionRecompile Declaration public const string OptionRecompile = \"OPTION(RECOMPILE)\" Field Value Type Description System.String"
  },
  "api/LinqToDB.Expressions.TransformInfo.html": {
    "href": "api/LinqToDB.Expressions.TransformInfo.html",
    "title": "Struct TransformInfo | Linq To DB (aka linq2db)",
    "keywords": "Struct TransformInfo Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public struct TransformInfo Constructors | Improve this Doc View Source TransformInfo(Expression) Declaration public TransformInfo(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression | Improve this Doc View Source TransformInfo(Expression, Boolean) Declaration public TransformInfo(Expression expression, bool stop) Parameters Type Name Description System.Linq.Expressions.Expression expression System.Boolean stop Fields | Improve this Doc View Source Expression Declaration public Expression Expression Field Value Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Stop Declaration public bool Stop Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.Expressions.html": {
    "href": "api/LinqToDB.Expressions.html",
    "title": "Namespace LinqToDB.Expressions | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Expressions Classes BinaryAggregateExpression DefaultValueExpression Extensions MemberHelper Structs TransformInfo Interfaces IGenericInfoProvider"
  },
  "api/LinqToDB.Linq.Expressions.html": {
    "href": "api/LinqToDB.Linq.Expressions.html",
    "title": "Class Expressions | Linq To DB (aka linq2db)",
    "keywords": "Class Expressions Inheritance System.Object Expressions Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public static class Expressions Methods | Improve this Doc View Source AccessInt<T>(T) Declaration [CLSCompliant(false)] [Sql.Function(\"Int\", new int[]{0})] public static T AccessInt<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AccessRound<T>(T, Nullable<Int32>) Declaration [CLSCompliant(false)] [Sql.Function(\"Round\", new int[]{0, 1})] public static T AccessRound<T>(T value, int ? precision) Parameters Type Name Description T value System.Nullable<System.Int32> precision Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AltStuff(String, Nullable<Int32>, Nullable<Int32>, String) Declaration [Sql.Function] public static string AltStuff(string str, int ? startLocation, int ? length, string value) Parameters Type Name Description System.String str System.Nullable<System.Int32> startLocation System.Nullable<System.Int32> length System.String value Returns Type Description System.String | Improve this Doc View Source ConvertMember(MappingSchema, Type, MemberInfo) Declaration public static LambdaExpression ConvertMember(MappingSchema mappingSchema, Type objectType, MemberInfo mi) Parameters Type Name Description MappingSchema mappingSchema System.Type objectType System.Reflection.MemberInfo mi Returns Type Description System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ConvertToCaseCompareTo(String, String) Declaration [Sql.Function] public static int ? ConvertToCaseCompareTo(string str, string value) Parameters Type Name Description System.String str System.String value Returns Type Description System.Nullable<System.Int32> | Improve this Doc View Source DateAdd(Sql.DateParts, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? DateAdd(Sql.DateParts part, int ? number, int ? days) Parameters Type Name Description Sql.DateParts part System.Nullable<System.Int32> number System.Nullable<System.Int32> days Returns Type Description System.Nullable<System.DateTime> | Improve this Doc View Source DecimalPI() Declaration [Sql.Function(\"PI\", ServerSideOnly = true)] public static decimal DecimalPI() Returns Type Description System.Decimal | Improve this Doc View Source DoublePI() Declaration [Sql.Function(\"PI\", ServerSideOnly = true)] public static double DoublePI() Returns Type Description System.Double | Improve this Doc View Source Hex(Nullable<Guid>) Declaration [Sql.Function] public static string Hex(Guid? guid) Parameters Type Name Description System.Nullable<System.Guid> guid Returns Type Description System.String | Improve this Doc View Source L<TR>(Expression<Func<TR>>) Declaration public static LambdaExpression L<TR>(Expression<Func<TR>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TR>> func Returns Type Description System.Linq.Expressions.LambdaExpression Type Parameters Name Description TR | Improve this Doc View Source L<T1, TR>(Expression<Func<T1, TR>>) Declaration public static LambdaExpression L<T1, TR>(Expression<Func<T1, TR>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T1, TR>> func Returns Type Description System.Linq.Expressions.LambdaExpression Type Parameters Name Description T1 TR | Improve this Doc View Source L<T1, T2, TR>(Expression<Func<T1, T2, TR>>) Declaration public static LambdaExpression L<T1, T2, TR>(Expression<Func<T1, T2, TR>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T1, T2, TR>> func Returns Type Description System.Linq.Expressions.LambdaExpression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source L<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>> func Returns Type Description System.Linq.Expressions.LambdaExpression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source L<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>> func Returns Type Description System.Linq.Expressions.LambdaExpression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source L<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>> func Returns Type Description System.Linq.Expressions.LambdaExpression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source L<T1, T2, T3, T4, T5, T6, TR>(Expression<Func<T1, T2, T3, T4, T5, T6, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, T4, T5, T6, TR>(Expression<Func<T1, T2, T3, T4, T5, T6, TR>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, TR>> func Returns Type Description System.Linq.Expressions.LambdaExpression Type Parameters Name Description T1 T2 T3 T4 T5 T6 TR | Improve this Doc View Source M<T>(Expression<Func<T, Object>>) Declaration public static MemberInfo M<T>(Expression<Func<T, object>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func Returns Type Description System.Reflection.MemberInfo Type Parameters Name Description T | Improve this Doc View Source M<T>(Expression<Func<T>>) Declaration public static MemberInfo M<T>(Expression<Func<T>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T>> func Returns Type Description System.Reflection.MemberInfo Type Parameters Name Description T | Improve this Doc View Source MakeDateTime2(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function(\"Access\", \"DateSerial\")] public static DateTime? MakeDateTime2(int ? year, int ? month, int ? day) Parameters Type Name Description System.Nullable<System.Int32> year System.Nullable<System.Int32> month System.Nullable<System.Int32> day Returns Type Description System.Nullable<System.DateTime> | Improve this Doc View Source MapMember(Expression<Func<Object>>, LambdaExpression) Declaration public static void MapMember(Expression<Func<object>> memberInfo, LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<System.Object>> memberInfo System.Linq.Expressions.LambdaExpression expression | Improve this Doc View Source MapMember(MemberInfo, IExpressionInfo) Declaration public static void MapMember(MemberInfo memberInfo, IExpressionInfo expressionInfo) Parameters Type Name Description System.Reflection.MemberInfo memberInfo IExpressionInfo expressionInfo | Improve this Doc View Source MapMember(MemberInfo, LambdaExpression) Declaration public static void MapMember(MemberInfo memberInfo, LambdaExpression expression) Parameters Type Name Description System.Reflection.MemberInfo memberInfo System.Linq.Expressions.LambdaExpression expression | Improve this Doc View Source MapMember(String, Expression<Func<Object>>, LambdaExpression) Declaration public static void MapMember(string providerName, Expression<Func<object>> memberInfo, LambdaExpression expression) Parameters Type Name Description System.String providerName System.Linq.Expressions.Expression<System.Func<System.Object>> memberInfo System.Linq.Expressions.LambdaExpression expression | Improve this Doc View Source MapMember(String, MemberInfo, IExpressionInfo) Declaration public static void MapMember(string providerName, MemberInfo memberInfo, IExpressionInfo expressionInfo) Parameters Type Name Description System.String providerName System.Reflection.MemberInfo memberInfo IExpressionInfo expressionInfo | Improve this Doc View Source MapMember(String, MemberInfo, LambdaExpression) Declaration public static void MapMember(string providerName, MemberInfo memberInfo, LambdaExpression expression) Parameters Type Name Description System.String providerName System.Reflection.MemberInfo memberInfo System.Linq.Expressions.LambdaExpression expression | Improve this Doc View Source MapMember(String, Type, MemberInfo, IExpressionInfo) Declaration public static void MapMember(string providerName, Type objectType, MemberInfo memberInfo, IExpressionInfo expressionInfo) Parameters Type Name Description System.String providerName System.Type objectType System.Reflection.MemberInfo memberInfo IExpressionInfo expressionInfo | Improve this Doc View Source MapMember(String, Type, MemberInfo, LambdaExpression) Declaration public static void MapMember(string providerName, Type objectType, MemberInfo memberInfo, LambdaExpression expression) Parameters Type Name Description System.String providerName System.Type objectType System.Reflection.MemberInfo memberInfo System.Linq.Expressions.LambdaExpression expression | Improve this Doc View Source MapMember<T>(Expression<Func<T, Object>>, LambdaExpression) Declaration public static void MapMember<T>(Expression<Func<T, object>> memberInfo, LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> memberInfo System.Linq.Expressions.LambdaExpression expression Type Parameters Name Description T | Improve this Doc View Source MapMember<TR>(Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<TR>> memberInfo System.Linq.Expressions.Expression<System.Func<TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<T>(String, Expression<Func<T, Object>>, LambdaExpression) Declaration public static void MapMember<T>(string providerName, Expression<Func<T, object>> memberInfo, LambdaExpression expression) Parameters Type Name Description System.String providerName System.Linq.Expressions.Expression<System.Func<T, System.Object>> memberInfo System.Linq.Expressions.LambdaExpression expression Type Parameters Name Description T | Improve this Doc View Source MapMember<TR>(String, Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(string providerName, Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description System.String providerName System.Linq.Expressions.Expression<System.Func<TR>> memberInfo System.Linq.Expressions.Expression<System.Func<TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<TR>(String, Type, Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(string providerName, Type objectType, Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description System.String providerName System.Type objectType System.Linq.Expressions.Expression<System.Func<TR>> memberInfo System.Linq.Expressions.Expression<System.Func<TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<TR>(Type, Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(Type objectType, Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description System.Type objectType System.Linq.Expressions.Expression<System.Func<TR>> memberInfo System.Linq.Expressions.Expression<System.Func<TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<T1, TR>(Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T1, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, TR>(String, Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(string providerName, Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description System.String providerName System.Linq.Expressions.Expression<System.Func<T1, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, TR>(String, Type, Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(string providerName, Type objectType, Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description System.String providerName System.Type objectType System.Linq.Expressions.Expression<System.Func<T1, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, TR>(Type, Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(Type objectType, Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description System.Type objectType System.Linq.Expressions.Expression<System.Func<T1, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, T2, TR>(Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T1, T2, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, TR>(String, Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(string providerName, Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description System.String providerName System.Linq.Expressions.Expression<System.Func<T1, T2, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, TR>(String, Type, Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(string providerName, Type objectType, Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description System.String providerName System.Type objectType System.Linq.Expressions.Expression<System.Func<T1, T2, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, TR>(Type, Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(Type objectType, Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description System.Type objectType System.Linq.Expressions.Expression<System.Func<T1, T2, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(String, Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(string providerName, Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description System.String providerName System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(String, Type, Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(string providerName, Type objectType, Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description System.String providerName System.Type objectType System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(Type, Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(Type objectType, Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description System.Type objectType System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(String, Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(string providerName, Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description System.String providerName System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(String, Type, Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(string providerName, Type objectType, Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description System.String providerName System.Type objectType System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(Type, Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(Type objectType, Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description System.Type objectType System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(String, Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(string providerName, Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description System.String providerName System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(String, Type, Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(string providerName, Type objectType, Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description System.String providerName System.Type objectType System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(Type, Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(Type objectType, Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description System.Type objectType System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>> memberInfo System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source Mdy(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration [Sql.Function] public static DateTime? Mdy(int ? month, int ? day, int ? year) Parameters Type Name Description System.Nullable<System.Int32> month System.Nullable<System.Int32> day System.Nullable<System.Int32> year Returns Type Description System.Nullable<System.DateTime> | Improve this Doc View Source N(Func<LambdaExpression>) Declaration public static Expressions.LazyExpressionInfo N(Func<LambdaExpression> func) Parameters Type Name Description System.Func<System.Linq.Expressions.LambdaExpression> func Returns Type Description Expressions.LazyExpressionInfo | Improve this Doc View Source Replicate(Nullable<Char>, Nullable<Int32>) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.Function(\"DB2\", \"Repeat\")] [Sql.Function(\"PostgreSQL\", \"Repeat\")] [Sql.Function(\"Access\", \"String\", new int[]{1, 0})] public static string Replicate(char ? ch, int ? count) Parameters Type Name Description System.Nullable<System.Char> ch System.Nullable<System.Int32> count Returns Type Description System.String | Improve this Doc View Source Replicate(String, Nullable<Int32>) Declaration [CLSCompliant(false)] [Sql.Function] [Sql.Function(\"DB2\", \"Repeat\")] [Sql.Function(\"PostgreSQL\", \"Repeat\")] [Sql.Function(\"Access\", \"String\", new int[]{1, 0})] public static string Replicate(string str, int ? count) Parameters Type Name Description System.String str System.Nullable<System.Int32> count Returns Type Description System.String | Improve this Doc View Source Round(Nullable<Decimal>, Int32, Int32) Declaration [Sql.Function] public static decimal ? Round(decimal ? value, int precision, int mode) Parameters Type Name Description System.Nullable<System.Decimal> value System.Int32 precision System.Int32 mode Returns Type Description System.Nullable<System.Decimal> | Improve this Doc View Source Round(Nullable<Double>, Int32, Int32) Declaration [Sql.Function] public static double ? Round(double ? value, int precision, int mode) Parameters Type Name Description System.Nullable<System.Double> value System.Int32 precision System.Int32 mode Returns Type Description System.Nullable<System.Double> | Improve this Doc View Source SetGenericInfoProvider(Type) Declaration public static void SetGenericInfoProvider(Type type) Parameters Type Name Description System.Type type | Improve this Doc View Source TrimLeft(String, Char[]) Declaration [CLSCompliant(false)] [Sql.Function(\"LTrim\", new int[]{0})] public static string TrimLeft(string str, char[] trimChars) Parameters Type Name Description System.String str System.Char[] trimChars Returns Type Description System.String | Improve this Doc View Source TrimRight(String, Char[]) Declaration [CLSCompliant(false)] [Sql.Function(\"RTrim\", new int[]{0})] public static string TrimRight(string str, char[] trimChars) Parameters Type Name Description System.String str System.Char[] trimChars Returns Type Description System.String | Improve this Doc View Source VarChar(Object, Nullable<Int32>) Declaration [Sql.Function] public static string VarChar(object obj, int ? size) Parameters Type Name Description System.Object obj System.Nullable<System.Int32> size Returns Type Description System.String"
  },
  "api/LinqToDB.Linq.IExpressionInfo.html": {
    "href": "api/LinqToDB.Linq.IExpressionInfo.html",
    "title": "Interface IExpressionInfo | Linq To DB (aka linq2db)",
    "keywords": "Interface IExpressionInfo Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IExpressionInfo Methods | Improve this Doc View Source GetExpression(MappingSchema) Declaration LambdaExpression GetExpression(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description System.Linq.Expressions.LambdaExpression"
  },
  "api/LinqToDB.Mapping.EntityDescriptor.html": {
    "href": "api/LinqToDB.Mapping.EntityDescriptor.html",
    "title": "Class EntityDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Class EntityDescriptor Inheritance System.Object EntityDescriptor Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class EntityDescriptor Constructors | Improve this Doc View Source EntityDescriptor(MappingSchema, Type) Declaration public EntityDescriptor(MappingSchema mappingSchema, Type type) Parameters Type Name Description MappingSchema mappingSchema System.Type type Properties | Improve this Doc View Source Aliases Declaration public Dictionary<string, string> Aliases { get; } Property Value Type Description System.Collections.Generic.Dictionary<System.String, System.String> | Improve this Doc View Source Associations Declaration public List<AssociationDescriptor> Associations { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.Mapping.AssociationDescriptor> | Improve this Doc View Source Columns Declaration public List<ColumnDescriptor> Columns { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.Mapping.ColumnDescriptor> | Improve this Doc View Source DatabaseName Declaration public string DatabaseName { get; } Property Value Type Description System.String | Improve this Doc View Source InheritanceMapping Declaration public List<InheritanceMapping> InheritanceMapping { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.Mapping.InheritanceMapping> | Improve this Doc View Source IsColumnAttributeRequired Declaration public bool IsColumnAttributeRequired { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] Declaration public ColumnDescriptor this[string memberName] { get; } Parameters Type Name Description System.String memberName Property Value Type Description ColumnDescriptor | Improve this Doc View Source ObjectType Declaration public Type ObjectType { get; } Property Value Type Description System.Type | Improve this Doc View Source SchemaName Declaration public string SchemaName { get; } Property Value Type Description System.String | Improve this Doc View Source TableName Declaration public string TableName { get; } Property Value Type Description System.String | Improve this Doc View Source TypeAccessor Declaration public TypeAccessor TypeAccessor { get; } Property Value Type Description TypeAccessor"
  },
  "api/LinqToDB.Mapping.EntityMappingBuilder-1.html": {
    "href": "api/LinqToDB.Mapping.EntityMappingBuilder-1.html",
    "title": "Class EntityMappingBuilder<T> | Linq To DB (aka linq2db)",
    "keywords": "Class EntityMappingBuilder<T> Inheritance System.Object EntityMappingBuilder<T> Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class EntityMappingBuilder<T> Type Parameters Name Description T Constructors | Improve this Doc View Source EntityMappingBuilder(FluentMappingBuilder, String) Declaration public EntityMappingBuilder(FluentMappingBuilder builder, string configuration) Parameters Type Name Description FluentMappingBuilder builder System.String configuration Properties | Improve this Doc View Source Configuration Declaration public string Configuration { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Association<S, ID1, ID2>(Expression<Func<T, S>>, Expression<Func<T, ID1>>, Expression<Func<S, ID2>>) Declaration public PropertyMappingBuilder<T> Association<S, ID1, ID2>(Expression<Func<T, S>> prop, Expression<Func<T, ID1>> thisKey, Expression<Func<S, ID2>> otherKey) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, S>> prop System.Linq.Expressions.Expression<System.Func<T, ID1>> thisKey System.Linq.Expressions.Expression<System.Func<S, ID2>> otherKey Returns Type Description LinqToDB.Mapping.PropertyMappingBuilder<T> Type Parameters Name Description S ID1 ID2 | Improve this Doc View Source Entity<TE>(String) Declaration public EntityMappingBuilder<TE> Entity<TE>(string configuration = null) Parameters Type Name Description System.String configuration Returns Type Description LinqToDB.Mapping.EntityMappingBuilder<TE> Type Parameters Name Description TE | Improve this Doc View Source GetAttributes<TA>() Declaration public TA[] GetAttributes<TA>()where TA : Attribute Returns Type Description TA[] Type Parameters Name Description TA | Improve this Doc View Source GetAttributes<TA>(Func<TA, String>) Declaration public TA[] GetAttributes<TA>(Func<TA, string> configGetter)where TA : Attribute Parameters Type Name Description System.Func<TA, System.String> configGetter Returns Type Description TA[] Type Parameters Name Description TA | Improve this Doc View Source GetAttributes<TA>(MemberInfo) Declaration public TA[] GetAttributes<TA>(MemberInfo memberInfo)where TA : Attribute Parameters Type Name Description System.Reflection.MemberInfo memberInfo Returns Type Description TA[] Type Parameters Name Description TA | Improve this Doc View Source GetAttributes<TA>(MemberInfo, Func<TA, String>) Declaration public TA[] GetAttributes<TA>(MemberInfo memberInfo, Func<TA, string> configGetter)where TA : Attribute Parameters Type Name Description System.Reflection.MemberInfo memberInfo System.Func<TA, System.String> configGetter Returns Type Description TA[] Type Parameters Name Description TA | Improve this Doc View Source GetAttributes<TA>(Type) Declaration public TA[] GetAttributes<TA>(Type type)where TA : Attribute Parameters Type Name Description System.Type type Returns Type Description TA[] Type Parameters Name Description TA | Improve this Doc View Source GetAttributes<TA>(Type, Func<TA, String>) Declaration public TA[] GetAttributes<TA>(Type type, Func<TA, string> configGetter)where TA : Attribute Parameters Type Name Description System.Type type System.Func<TA, System.String> configGetter Returns Type Description TA[] Type Parameters Name Description TA | Improve this Doc View Source HasAttribute(Attribute) Declaration public EntityMappingBuilder<T> HasAttribute(Attribute attribute) Parameters Type Name Description System.Attribute attribute Returns Type Description EntityMappingBuilder<T> | Improve this Doc View Source HasAttribute(Expression<Func<T, Object>>, Attribute) Declaration public EntityMappingBuilder<T> HasAttribute(Expression<Func<T, object>> func, Attribute attribute) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func System.Attribute attribute Returns Type Description EntityMappingBuilder<T> | Improve this Doc View Source HasAttribute(LambdaExpression, Attribute) Declaration public EntityMappingBuilder<T> HasAttribute(LambdaExpression func, Attribute attribute) Parameters Type Name Description System.Linq.Expressions.LambdaExpression func System.Attribute attribute Returns Type Description EntityMappingBuilder<T> | Improve this Doc View Source HasAttribute(MemberInfo, Attribute) Declaration public EntityMappingBuilder<T> HasAttribute(MemberInfo memberInfo, Attribute attribute) Parameters Type Name Description System.Reflection.MemberInfo memberInfo System.Attribute attribute Returns Type Description EntityMappingBuilder<T> | Improve this Doc View Source HasColumn(Expression<Func<T, Object>>, Int32) Declaration public EntityMappingBuilder<T> HasColumn(Expression<Func<T, object>> func, int order = -1) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func System.Int32 order Returns Type Description EntityMappingBuilder<T> | Improve this Doc View Source HasDatabaseName(String) Declaration public EntityMappingBuilder<T> HasDatabaseName(string databaseName) Parameters Type Name Description System.String databaseName Returns Type Description EntityMappingBuilder<T> | Improve this Doc View Source HasIdentity(Expression<Func<T, Object>>) Declaration public EntityMappingBuilder<T> HasIdentity(Expression<Func<T, object>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func Returns Type Description EntityMappingBuilder<T> | Improve this Doc View Source HasPrimaryKey(Expression<Func<T, Object>>, Int32) Declaration public EntityMappingBuilder<T> HasPrimaryKey(Expression<Func<T, object>> func, int order = -1) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func System.Int32 order Returns Type Description EntityMappingBuilder<T> | Improve this Doc View Source HasSchemaName(String) Declaration public EntityMappingBuilder<T> HasSchemaName(string schemaName) Parameters Type Name Description System.String schemaName Returns Type Description EntityMappingBuilder<T> | Improve this Doc View Source HasTableName(String) Declaration public EntityMappingBuilder<T> HasTableName(string tableName) Parameters Type Name Description System.String tableName Returns Type Description EntityMappingBuilder<T> | Improve this Doc View Source Ignore(Expression<Func<T, Object>>, Int32) Declaration public EntityMappingBuilder<T> Ignore(Expression<Func<T, object>> func, int order = -1) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func System.Int32 order Returns Type Description EntityMappingBuilder<T> | Improve this Doc View Source Inheritance<S>(Expression<Func<T, S>>, S, Type, Boolean) Declaration public EntityMappingBuilder<T> Inheritance<S>(Expression<Func<T, S>> key, S value, Type type, bool isDefault = false) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, S>> key S value System.Type type System.Boolean isDefault Returns Type Description EntityMappingBuilder<T> Type Parameters Name Description S | Improve this Doc View Source Property(Expression<Func<T, Object>>) Declaration public PropertyMappingBuilder<T> Property(Expression<Func<T, object>> func) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func Returns Type Description LinqToDB.Mapping.PropertyMappingBuilder<T>"
  },
  "api/LinqToDB.Mapping.FluentMappingBuilder.html": {
    "href": "api/LinqToDB.Mapping.FluentMappingBuilder.html",
    "title": "Class FluentMappingBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class FluentMappingBuilder Inheritance System.Object FluentMappingBuilder Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class FluentMappingBuilder Constructors | Improve this Doc View Source FluentMappingBuilder(MappingSchema) Declaration public FluentMappingBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Properties | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Methods | Improve this Doc View Source Entity<T>(String) Declaration public EntityMappingBuilder<T> Entity<T>(string configuration = null) Parameters Type Name Description System.String configuration Returns Type Description LinqToDB.Mapping.EntityMappingBuilder<T> Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type) Declaration public T[] GetAttributes<T>(Type type)where T : Attribute Parameters Type Name Description System.Type type Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo)where T : Attribute Parameters Type Name Description System.Type type System.Reflection.MemberInfo memberInfo Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source HasAttribute(LambdaExpression, Attribute) Declaration public FluentMappingBuilder HasAttribute(LambdaExpression func, Attribute attribute) Parameters Type Name Description System.Linq.Expressions.LambdaExpression func System.Attribute attribute Returns Type Description FluentMappingBuilder | Improve this Doc View Source HasAttribute(MemberInfo, Attribute) Declaration public FluentMappingBuilder HasAttribute(MemberInfo memberInfo, Attribute attribute) Parameters Type Name Description System.Reflection.MemberInfo memberInfo System.Attribute attribute Returns Type Description FluentMappingBuilder | Improve this Doc View Source HasAttribute(Type, Attribute) Declaration public FluentMappingBuilder HasAttribute(Type type, Attribute attribute) Parameters Type Name Description System.Type type System.Attribute attribute Returns Type Description FluentMappingBuilder | Improve this Doc View Source HasAttribute<T>(Attribute) Declaration public FluentMappingBuilder HasAttribute<T>(Attribute attribute) Parameters Type Name Description System.Attribute attribute Returns Type Description FluentMappingBuilder Type Parameters Name Description T | Improve this Doc View Source HasAttribute<T>(Expression<Func<T, Object>>, Attribute) Declaration public FluentMappingBuilder HasAttribute<T>(Expression<Func<T, object>> func, Attribute attribute) Parameters Type Name Description System.Linq.Expressions.Expression<System.Func<T, System.Object>> func System.Attribute attribute Returns Type Description FluentMappingBuilder Type Parameters Name Description T"
  },
  "api/LinqToDB.Mapping.IdentityAttribute.html": {
    "href": "api/LinqToDB.Mapping.IdentityAttribute.html",
    "title": "Class IdentityAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityAttribute Inheritance System.Object System.Attribute IdentityAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax [Serializable] [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)] public class IdentityAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source IdentityAttribute() Declaration public IdentityAttribute() | Improve this Doc View Source IdentityAttribute(String) Declaration public IdentityAttribute(string configuration) Parameters Type Name Description System.String configuration Properties | Improve this Doc View Source Configuration Declaration public string Configuration { get; set; } Property Value Type Description System.String"
  },
  "api/LinqToDB.Reflection.ObjectFactoryAttribute.html": {
    "href": "api/LinqToDB.Reflection.ObjectFactoryAttribute.html",
    "title": "Class ObjectFactoryAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ObjectFactoryAttribute Inheritance System.Object System.Attribute ObjectFactoryAttribute Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface)] public class ObjectFactoryAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ObjectFactoryAttribute(Type) Declaration public ObjectFactoryAttribute(Type type) Parameters Type Name Description System.Type type Properties | Improve this Doc View Source ObjectFactory Declaration public IObjectFactory ObjectFactory { get; } Property Value Type Description IObjectFactory"
  },
  "api/LinqToDB.Reflection.TypeAccessor-1.html": {
    "href": "api/LinqToDB.Reflection.TypeAccessor-1.html",
    "title": "Class TypeAccessor<T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeAccessor<T> Inheritance System.Object TypeAccessor TypeAccessor<T> Inherited Members TypeAccessor.AddMember(MemberAccessor) TypeAccessor.CreateInstanceEx() TypeAccessor.ObjectFactory TypeAccessor.Members TypeAccessor.Item[String] TypeAccessor.Item[Int32] TypeAccessor.GetAccessor(Type) TypeAccessor.GetAccessor<T>() Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public class TypeAccessor<T> : TypeAccessor Type Parameters Name Description T Properties | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description System.Type Overrides TypeAccessor.Type Methods | Improve this Doc View Source Create() Declaration public T Create() Returns Type Description T | Improve this Doc View Source CreateInstance() Declaration public override object CreateInstance() Returns Type Description System.Object Overrides TypeAccessor.CreateInstance()"
  },
  "api/LinqToDB.Reflection.TypeAccessor.html": {
    "href": "api/LinqToDB.Reflection.TypeAccessor.html",
    "title": "Class TypeAccessor | Linq To DB (aka linq2db)",
    "keywords": "Class TypeAccessor Inheritance System.Object TypeAccessor TypeAccessor<T> Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public abstract class TypeAccessor Properties | Improve this Doc View Source Item[Int32] Declaration public MemberAccessor this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description MemberAccessor | Improve this Doc View Source Item[String] Declaration public MemberAccessor this[string memberName] { get; } Parameters Type Name Description System.String memberName Property Value Type Description MemberAccessor | Improve this Doc View Source Members Declaration public List<MemberAccessor> Members { get; } Property Value Type Description System.Collections.Generic.List<LinqToDB.Reflection.MemberAccessor> | Improve this Doc View Source ObjectFactory Declaration public IObjectFactory ObjectFactory { get; set; } Property Value Type Description IObjectFactory | Improve this Doc View Source Type Declaration public abstract Type Type { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source AddMember(MemberAccessor) Declaration protected void AddMember(MemberAccessor member) Parameters Type Name Description MemberAccessor member | Improve this Doc View Source CreateInstance() Declaration public virtual object CreateInstance() Returns Type Description System.Object | Improve this Doc View Source CreateInstanceEx() Declaration public object CreateInstanceEx() Returns Type Description System.Object | Improve this Doc View Source GetAccessor(Type) Declaration public static TypeAccessor GetAccessor(Type type) Parameters Type Name Description System.Type type Returns Type Description TypeAccessor | Improve this Doc View Source GetAccessor<T>() Declaration public static TypeAccessor<T> GetAccessor<T>() Returns Type Description LinqToDB.Reflection.TypeAccessor<T> Type Parameters Name Description T"
  },
  "api/LinqToDB.Reflection.html": {
    "href": "api/LinqToDB.Reflection.html",
    "title": "Namespace LinqToDB.Reflection | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Reflection Classes MemberAccessor ObjectFactoryAttribute TypeAccessor TypeAccessor<T> Interfaces IObjectFactory"
  },
  "api/LinqToDB.ServiceModel.html": {
    "href": "api/LinqToDB.ServiceModel.html",
    "title": "Namespace LinqToDB.ServiceModel | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.ServiceModel Classes DataService<T> LinqService LinqServiceInfo LinqServiceQuery LinqServiceResult RemoteDataContextBase ServiceModelDataContext SoapDataContext Interfaces ILinqService ILinqSoapService"
  },
  "api/LinqToDB.Sql.AggregateModifier.html": {
    "href": "api/LinqToDB.Sql.AggregateModifier.html",
    "title": "Enum Sql.AggregateModifier | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.AggregateModifier Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum AggregateModifier Fields Name Description All Distinct None Extension Methods Sql.Between<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier) Sql.NotBetween<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier)"
  },
  "api/LinqToDB.Sql.ConvertTo-1.html": {
    "href": "api/LinqToDB.Sql.ConvertTo-1.html",
    "title": "Class Sql.ConvertTo<TTo> | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ConvertTo<TTo> Inheritance System.Object Sql.ConvertTo<TTo> Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class ConvertTo<TTo> Type Parameters Name Description TTo Methods | Improve this Doc View Source From<TFrom>(TFrom) Declaration [CLSCompliant(false)] [Sql.Function(\"$Convert$\", new int[]{1, 2, 0})] public static TTo From<TFrom>(TFrom obj) Parameters Type Name Description TFrom obj Returns Type Description TTo Type Parameters Name Description TFrom"
  },
  "api/LinqToDB.Sql.DatePartAttribute.html": {
    "href": "api/LinqToDB.Sql.DatePartAttribute.html",
    "title": "Class Sql.DatePartAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.DatePartAttribute Inheritance System.Object System.Attribute Sql.ExpressionAttribute Sql.DatePartAttribute Inherited Members Sql.ExpressionAttribute.Expression Sql.ExpressionAttribute.ArgIndices Sql.ExpressionAttribute.Precedence Sql.ExpressionAttribute.Configuration Sql.ExpressionAttribute.ServerSideOnly Sql.ExpressionAttribute.PreferServerSide Sql.ExpressionAttribute.InlineParameters Sql.ExpressionAttribute.ExpectExpression Sql.ExpressionAttribute.IsPredicate Sql.ExpressionAttribute.CanBeNull Sql.ExpressionAttribute.ConvertArgs(MemberInfo, ISqlExpression[]) Sql.ExpressionAttribute.GetExpression(MappingSchema, Expression, Func<Expression, ISqlExpression>) Namespace : LinqToDB Assembly : linq2db.dll Syntax [CLSCompliant(false)] public class DatePartAttribute : Sql.ExpressionAttribute, _Attribute Constructors | Improve this Doc View Source DatePartAttribute(String, String, Boolean, Int32, Int32[]) Declaration public DatePartAttribute(string sqlProvider, string expression, bool isExpression, int datePartIndex, params int[] argIndices) Parameters Type Name Description System.String sqlProvider System.String expression System.Boolean isExpression System.Int32 datePartIndex System.Int32[] argIndices | Improve this Doc View Source DatePartAttribute(String, String, Boolean, String[], Int32, Int32[]) Declaration public DatePartAttribute(string sqlProvider, string expression, bool isExpression, string[] partMapping, int datePartIndex, params int[] argIndices) Parameters Type Name Description System.String sqlProvider System.String expression System.Boolean isExpression System.String[] partMapping System.Int32 datePartIndex System.Int32[] argIndices | Improve this Doc View Source DatePartAttribute(String, String, Int32, Boolean, String[], Int32, Int32[]) Declaration public DatePartAttribute(string sqlProvider, string expression, int precedence, bool isExpression, string[] partMapping, int datePartIndex, params int[] argIndices) Parameters Type Name Description System.String sqlProvider System.String expression System.Int32 precedence System.Boolean isExpression System.String[] partMapping System.Int32 datePartIndex System.Int32[] argIndices | Improve this Doc View Source DatePartAttribute(String, String, Int32, Int32[]) Declaration public DatePartAttribute(string sqlProvider, string expression, int datePartIndex, params int[] argIndices) Parameters Type Name Description System.String sqlProvider System.String expression System.Int32 datePartIndex System.Int32[] argIndices Methods | Improve this Doc View Source GetExpression(MemberInfo, ISqlExpression[]) Declaration public override ISqlExpression GetExpression(MemberInfo member, params ISqlExpression[] args) Parameters Type Name Description System.Reflection.MemberInfo member LinqToDB.SqlQuery.ISqlExpression[] args Returns Type Description ISqlExpression Overrides Sql.ExpressionAttribute.GetExpression(MemberInfo, ISqlExpression[])"
  },
  "api/LinqToDB.SqlProvider.BasicSqlBuilder.ColumnSelector.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlBuilder.ColumnSelector.html",
    "title": "Delegate BasicSqlBuilder.ColumnSelector | Linq To DB (aka linq2db)",
    "keywords": "Delegate BasicSqlBuilder.ColumnSelector Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax protected delegate IEnumerable<SelectQuery.Column> ColumnSelector(); Returns Type Description System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SelectQuery.Column>"
  },
  "api/LinqToDB.SqlProvider.BasicSqlBuilder.Step.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlBuilder.Step.html",
    "title": "Enum BasicSqlBuilder.Step | Linq To DB (aka linq2db)",
    "keywords": "Enum BasicSqlBuilder.Step Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax protected enum Step Fields Name Description DeleteClause FromClause GroupByClause HavingClause InsertClause OffsetLimit OrderByClause SelectClause UpdateClause WhereClause Extension Methods Sql.Between<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step) Sql.NotBetween<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step)"
  },
  "api/LinqToDB.SqlProvider.BasicSqlBuilder.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlBuilder.html",
    "title": "Class BasicSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class BasicSqlBuilder Inheritance System.Object BasicSqlBuilder FirebirdSqlBuilder PostgreSQLSqlBuilder SQLiteSqlBuilder Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public abstract class BasicSqlBuilder : ISqlBuilder Constructors | Improve this Doc View Source BasicSqlBuilder(ISqlOptimizer, SqlProviderFlags, ValueToSqlConverter) Declaration protected BasicSqlBuilder(ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags, ValueToSqlConverter valueToSqlConverter) Parameters Type Name Description ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags ValueToSqlConverter valueToSqlConverter Fields | Improve this Doc View Source BuildStep Declaration protected BasicSqlBuilder.Step BuildStep Field Value Type Description BasicSqlBuilder.Step | Improve this Doc View Source EndLine Declaration protected static readonly char[] EndLine Field Value Type Description System.Char[] | Improve this Doc View Source Indent Declaration protected int Indent Field Value Type Description System.Int32 | Improve this Doc View Source SelectQuery Declaration protected SelectQuery SelectQuery Field Value Type Description SelectQuery | Improve this Doc View Source SkipAlias Declaration protected bool SkipAlias Field Value Type Description System.Boolean | Improve this Doc View Source SqlOptimizer Declaration protected ISqlOptimizer SqlOptimizer Field Value Type Description ISqlOptimizer | Improve this Doc View Source SqlProviderFlags Declaration protected SqlProviderFlags SqlProviderFlags Field Value Type Description SqlProviderFlags | Improve this Doc View Source StringBuilder Declaration protected StringBuilder StringBuilder Field Value Type Description System.Text.StringBuilder | Improve this Doc View Source ValueToSqlConverter Declaration protected ValueToSqlConverter ValueToSqlConverter Field Value Type Description ValueToSqlConverter Properties | Improve this Doc View Source FirstFormat Declaration protected virtual string FirstFormat { get; } Property Value Type Description System.String | Improve this Doc View Source IsNestedJoinParenthesisRequired Declaration public virtual bool IsNestedJoinParenthesisRequired { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNestedJoinSupported Declaration public virtual bool IsNestedJoinSupported { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LimitFormat Declaration protected virtual string LimitFormat { get; } Property Value Type Description System.String | Improve this Doc View Source Name Declaration public virtual string Name { get; } Property Value Type Description System.String Implements ISqlBuilder.Name | Improve this Doc View Source NeedSkip Declaration protected bool NeedSkip { get; } Property Value Type Description System.Boolean | Improve this Doc View Source NeedTake Declaration protected bool NeedTake { get; } Property Value Type Description System.Boolean | Improve this Doc View Source OffsetFirst Declaration protected virtual bool OffsetFirst { get; } Property Value Type Description System.Boolean | Improve this Doc View Source OffsetFormat Declaration protected virtual string OffsetFormat { get; } Property Value Type Description System.String | Improve this Doc View Source SkipFirst Declaration protected virtual bool SkipFirst { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipFormat Declaration protected virtual string SkipFormat { get; } Property Value Type Description System.String | Improve this Doc View Source TakePercent Declaration protected virtual string TakePercent { get; } Property Value Type Description System.String | Improve this Doc View Source TakeTies Declaration protected virtual string TakeTies { get; } Property Value Type Description System.String | Improve this Doc View Source WrapJoinCondition True if it is needed to wrap join condition with () Declaration public virtual bool WrapJoinCondition { get; } Property Value Type Description System.Boolean Examples INNER JOIN Table2 t2 ON (t1.Value = t2.Value) Methods | Improve this Doc View Source Add<T>(ISqlExpression, ISqlExpression) Declaration protected ISqlExpression Add<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source AlternativeBuildSql(Boolean, Action) Declaration protected void AlternativeBuildSql(bool implementOrderBy, Action buildSql) Parameters Type Name Description System.Boolean implementOrderBy System.Action buildSql | Improve this Doc View Source AlternativeBuildSql2(Action) Declaration protected void AlternativeBuildSql2(Action buildSql) Parameters Type Name Description System.Action buildSql | Improve this Doc View Source AlternativeGetSelectedColumns(BasicSqlBuilder.ColumnSelector) Declaration protected IEnumerable<SelectQuery.Column> AlternativeGetSelectedColumns(BasicSqlBuilder.ColumnSelector columnSelector) Parameters Type Name Description BasicSqlBuilder.ColumnSelector columnSelector Returns Type Description System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SelectQuery.Column> | Improve this Doc View Source AppendIndent() Declaration protected StringBuilder AppendIndent() Returns Type Description System.Text.StringBuilder | Improve this Doc View Source ApplyQueryHints(String, List<String>) Declaration public string ApplyQueryHints(string sql, List<string> queryHints) Parameters Type Name Description System.String sql System.Collections.Generic.List<System.String> queryHints Returns Type Description System.String Implements ISqlBuilder.ApplyQueryHints(String, List<String>) | Improve this Doc View Source BuildBinaryExpression(SqlBinaryExpression) Declaration protected virtual void BuildBinaryExpression(SqlBinaryExpression expr) Parameters Type Name Description SqlBinaryExpression expr | Improve this Doc View Source BuildColumnExpression(ISqlExpression, String, ref Boolean) Declaration protected virtual void BuildColumnExpression(ISqlExpression expr, string alias, ref bool addAlias) Parameters Type Name Description ISqlExpression expr System.String alias System.Boolean addAlias | Improve this Doc View Source BuildColumns() Declaration protected virtual void BuildColumns() | Improve this Doc View Source BuildCommand(Int32) Declaration protected virtual void BuildCommand(int commandNumber) Parameters Type Name Description System.Int32 commandNumber | Improve this Doc View Source BuildCreateTableFieldType(SqlField) Declaration protected virtual void BuildCreateTableFieldType(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source BuildCreateTableIdentityAttribute1(SqlField) Declaration protected virtual void BuildCreateTableIdentityAttribute1(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source BuildCreateTableIdentityAttribute2(SqlField) Declaration protected virtual void BuildCreateTableIdentityAttribute2(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source BuildCreateTableNullAttribute(SqlField, DefaulNullable) Declaration protected virtual void BuildCreateTableNullAttribute(SqlField field, DefaulNullable defaulNullable) Parameters Type Name Description SqlField field DefaulNullable defaulNullable | Improve this Doc View Source BuildCreateTablePrimaryKey(String, IEnumerable<String>) Declaration protected virtual void BuildCreateTablePrimaryKey(string pkName, IEnumerable<string> fieldNames) Parameters Type Name Description System.String pkName System.Collections.Generic.IEnumerable<System.String> fieldNames | Improve this Doc View Source BuildCreateTableStatement() Declaration protected virtual void BuildCreateTableStatement() | Improve this Doc View Source BuildDataType(SqlDataType, Boolean) Declaration protected virtual void BuildDataType(SqlDataType type, bool createDbType) Parameters Type Name Description SqlDataType type System.Boolean createDbType | Improve this Doc View Source BuildDeleteClause() Declaration protected virtual void BuildDeleteClause() | Improve this Doc View Source BuildDeleteQuery() Declaration protected virtual void BuildDeleteQuery() | Improve this Doc View Source BuildDropTableStatement() Declaration protected virtual void BuildDropTableStatement() | Improve this Doc View Source BuildEmptyInsert() Declaration protected virtual void BuildEmptyInsert() | Improve this Doc View Source BuildEndCreateTableStatement(SelectQuery.CreateTableStatement) Declaration protected virtual void BuildEndCreateTableStatement(SelectQuery.CreateTableStatement createTable) Parameters Type Name Description SelectQuery.CreateTableStatement createTable | Improve this Doc View Source BuildExpression(ISqlExpression) Declaration protected StringBuilder BuildExpression(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Text.StringBuilder | Improve this Doc View Source BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) Declaration protected void BuildExpression(ISqlExpression expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound = true) Parameters Type Name Description ISqlExpression expr System.Boolean buildTableName System.Boolean checkParentheses System.Boolean throwExceptionIfTableNotFound | Improve this Doc View Source BuildExpression(ISqlExpression, Boolean, Boolean, String, ref Boolean, Boolean) Declaration protected virtual StringBuilder BuildExpression(ISqlExpression expr, bool buildTableName, bool checkParentheses, string alias, ref bool addAlias, bool throwExceptionIfTableNotFound = true) Parameters Type Name Description ISqlExpression expr System.Boolean buildTableName System.Boolean checkParentheses System.String alias System.Boolean addAlias System.Boolean throwExceptionIfTableNotFound Returns Type Description System.Text.StringBuilder | Improve this Doc View Source BuildExpression(Int32, ISqlExpression) Declaration protected void BuildExpression(int precedence, ISqlExpression expr) Parameters Type Name Description System.Int32 precedence ISqlExpression expr | Improve this Doc View Source BuildFromClause() Declaration protected virtual void BuildFromClause() | Improve this Doc View Source BuildFunction(SqlFunction) Declaration protected virtual void BuildFunction(SqlFunction func) Parameters Type Name Description SqlFunction func | Improve this Doc View Source BuildGetIdentity() Declaration protected virtual void BuildGetIdentity() | Improve this Doc View Source BuildGroupByClause() Declaration protected virtual void BuildGroupByClause() | Improve this Doc View Source BuildHavingClause() Declaration protected virtual void BuildHavingClause() | Improve this Doc View Source BuildInsertClause() Declaration protected void BuildInsertClause() | Improve this Doc View Source BuildInsertClause(String, Boolean) Declaration protected virtual void BuildInsertClause(string insertText, bool appendTableName) Parameters Type Name Description System.String insertText System.Boolean appendTableName | Improve this Doc View Source BuildInsertOrUpdateQuery() Declaration protected virtual void BuildInsertOrUpdateQuery() | Improve this Doc View Source BuildInsertOrUpdateQueryAsMerge(String) Declaration protected virtual void BuildInsertOrUpdateQueryAsMerge(string fromDummyTable) Parameters Type Name Description System.String fromDummyTable | Improve this Doc View Source BuildInsertOrUpdateQueryAsUpdateInsert() Declaration protected void BuildInsertOrUpdateQueryAsUpdateInsert() | Improve this Doc View Source BuildInsertQuery() Declaration protected virtual void BuildInsertQuery() | Improve this Doc View Source BuildJoinType(SelectQuery.JoinedTable) Declaration protected virtual bool BuildJoinType(SelectQuery.JoinedTable join) Parameters Type Name Description SelectQuery.JoinedTable join Returns Type Description System.Boolean | Improve this Doc View Source BuildLikePredicate(SelectQuery.Predicate.Like) Declaration protected virtual void BuildLikePredicate(SelectQuery.Predicate.Like predicate) Parameters Type Name Description SelectQuery.Predicate.Like predicate | Improve this Doc View Source BuildOffsetLimit() Declaration protected virtual void BuildOffsetLimit() | Improve this Doc View Source BuildOrderByClause() Declaration protected virtual void BuildOrderByClause() | Improve this Doc View Source BuildOutputSubclause() Declaration protected virtual void BuildOutputSubclause() | Improve this Doc View Source BuildPhysicalTable(ISqlTableSource, String) Declaration protected void BuildPhysicalTable(ISqlTableSource table, string alias) Parameters Type Name Description ISqlTableSource table System.String alias | Improve this Doc View Source BuildPredicate(ISqlPredicate) Declaration protected virtual void BuildPredicate(ISqlPredicate predicate) Parameters Type Name Description ISqlPredicate predicate | Improve this Doc View Source BuildPredicate(Int32, ISqlPredicate) Declaration protected void BuildPredicate(int parentPrecedence, ISqlPredicate predicate) Parameters Type Name Description System.Int32 parentPrecedence ISqlPredicate predicate | Improve this Doc View Source BuildPredicate(Int32, Int32, ISqlPredicate) Declaration protected void BuildPredicate(int parentPrecedence, int precedence, ISqlPredicate predicate) Parameters Type Name Description System.Int32 parentPrecedence System.Int32 precedence ISqlPredicate predicate | Improve this Doc View Source BuildSearchCondition(SelectQuery.SearchCondition) Declaration protected virtual void BuildSearchCondition(SelectQuery.SearchCondition condition) Parameters Type Name Description SelectQuery.SearchCondition condition | Improve this Doc View Source BuildSearchCondition(Int32, SelectQuery.SearchCondition) Declaration protected virtual void BuildSearchCondition(int parentPrecedence, SelectQuery.SearchCondition condition) Parameters Type Name Description System.Int32 parentPrecedence SelectQuery.SearchCondition condition | Improve this Doc View Source BuildSelectClause() Declaration protected virtual void BuildSelectClause() | Improve this Doc View Source BuildSelectQuery() Declaration protected virtual void BuildSelectQuery() | Improve this Doc View Source BuildSkipFirst() Declaration protected virtual void BuildSkipFirst() | Improve this Doc View Source BuildSql() Declaration protected virtual void BuildSql() | Improve this Doc View Source BuildSql(Int32, SelectQuery, StringBuilder) Declaration public void BuildSql(int commandNumber, SelectQuery selectQuery, StringBuilder sb) Parameters Type Name Description System.Int32 commandNumber SelectQuery selectQuery System.Text.StringBuilder sb Implements ISqlBuilder.BuildSql(Int32, SelectQuery, StringBuilder) | Improve this Doc View Source BuildSql(Int32, SelectQuery, StringBuilder, Int32, Boolean) Declaration protected virtual void BuildSql(int commandNumber, SelectQuery selectQuery, StringBuilder sb, int indent, bool skipAlias) Parameters Type Name Description System.Int32 commandNumber SelectQuery selectQuery System.Text.StringBuilder sb System.Int32 indent System.Boolean skipAlias | Improve this Doc View Source BuildSqlBuilder(SelectQuery, Int32, Boolean) Declaration protected virtual void BuildSqlBuilder(SelectQuery selectQuery, int indent, bool skipAlias) Parameters Type Name Description SelectQuery selectQuery System.Int32 indent System.Boolean skipAlias | Improve this Doc View Source BuildStartCreateTableStatement(SelectQuery.CreateTableStatement) Declaration protected virtual void BuildStartCreateTableStatement(SelectQuery.CreateTableStatement createTable) Parameters Type Name Description SelectQuery.CreateTableStatement createTable | Improve this Doc View Source BuildTableName(SelectQuery.TableSource, Boolean, Boolean) Declaration protected void BuildTableName(SelectQuery.TableSource ts, bool buildName, bool buildAlias) Parameters Type Name Description SelectQuery.TableSource ts System.Boolean buildName System.Boolean buildAlias | Improve this Doc View Source BuildTableName(StringBuilder, String, String, String) Declaration public virtual StringBuilder BuildTableName(StringBuilder sb, string database, string owner, string table) Parameters Type Name Description System.Text.StringBuilder sb System.String database System.String owner System.String table Returns Type Description System.Text.StringBuilder Implements ISqlBuilder.BuildTableName(StringBuilder, String, String, String) | Improve this Doc View Source BuildTakeHints() Declaration protected virtual void BuildTakeHints() | Improve this Doc View Source BuildUnknownQuery() Declaration protected virtual void BuildUnknownQuery() | Improve this Doc View Source BuildUpdateClause() Declaration protected virtual void BuildUpdateClause() | Improve this Doc View Source BuildUpdateQuery() Declaration protected virtual void BuildUpdateQuery() | Improve this Doc View Source BuildUpdateSet() Declaration protected virtual void BuildUpdateSet() | Improve this Doc View Source BuildUpdateTable() Declaration protected virtual void BuildUpdateTable() | Improve this Doc View Source BuildUpdateTableName() Declaration protected virtual void BuildUpdateTableName() | Improve this Doc View Source BuildValue(SqlDataType, Object) Declaration protected void BuildValue(SqlDataType dataType, object value) Parameters Type Name Description SqlDataType dataType System.Object value | Improve this Doc View Source BuildWhere() Declaration protected virtual bool BuildWhere() Returns Type Description System.Boolean | Improve this Doc View Source BuildWhereClause() Declaration protected virtual void BuildWhereClause() | Improve this Doc View Source BuildWhereSearchCondition(SelectQuery.SearchCondition) Declaration protected virtual void BuildWhereSearchCondition(SelectQuery.SearchCondition condition) Parameters Type Name Description SelectQuery.SearchCondition condition | Improve this Doc View Source CommandCount(SelectQuery) Declaration public virtual int CommandCount(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Int32 Implements ISqlBuilder.CommandCount(SelectQuery) | Improve this Doc View Source Convert(Object, ConvertType) Declaration public virtual object Convert(object value, ConvertType convertType) Parameters Type Name Description System.Object value ConvertType convertType Returns Type Description System.Object Implements ISqlBuilder.Convert(Object, ConvertType) | Improve this Doc View Source ConvertFunctionParameters(SqlFunction) Declaration protected SqlFunction ConvertFunctionParameters(SqlFunction func) Parameters Type Name Description SqlFunction func Returns Type Description SqlFunction | Improve this Doc View Source ConvertTableName(StringBuilder, String, String, String) Declaration public virtual StringBuilder ConvertTableName(StringBuilder sb, string database, string owner, string table) Parameters Type Name Description System.Text.StringBuilder sb System.String database System.String owner System.String table Returns Type Description System.Text.StringBuilder Implements ISqlBuilder.ConvertTableName(StringBuilder, String, String, String) | Improve this Doc View Source CreateSqlBuilder() Declaration protected abstract ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration public virtual ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression Implements ISqlBuilder.GetIdentityExpression(SqlTable) | Improve this Doc View Source GetPrecedence(ISqlPredicate) Declaration protected static int GetPrecedence(ISqlPredicate predicate) Parameters Type Name Description ISqlPredicate predicate Returns Type Description System.Int32 | Improve this Doc View Source GetProviderTypeName(IDbDataParameter) Declaration protected virtual string GetProviderTypeName(IDbDataParameter parameter) Parameters Type Name Description System.Data.IDbDataParameter parameter Returns Type Description System.String | Improve this Doc View Source GetSelectedColumns() Declaration protected virtual IEnumerable<SelectQuery.Column> GetSelectedColumns() Returns Type Description System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SelectQuery.Column> | Improve this Doc View Source GetSequenceNameAttribute(SqlTable, Boolean) Declaration protected SequenceNameAttribute GetSequenceNameAttribute(SqlTable table, bool throwException) Parameters Type Name Description SqlTable table System.Boolean throwException Returns Type Description SequenceNameAttribute | Improve this Doc View Source GetTableAlias(ISqlTableSource) Declaration protected static string GetTableAlias(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description System.String | Improve this Doc View Source GetTableDatabaseName(SqlTable) Declaration protected virtual string GetTableDatabaseName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.String | Improve this Doc View Source GetTableOwnerName(SqlTable) Declaration protected virtual string GetTableOwnerName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.String | Improve this Doc View Source GetTablePhysicalName(SqlTable) Declaration protected virtual string GetTablePhysicalName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.String | Improve this Doc View Source GetTempAliases(Int32, String) Declaration protected string[] GetTempAliases(int n, string defaultAlias) Parameters Type Name Description System.Int32 n System.String defaultAlias Returns Type Description System.String[] | Improve this Doc View Source GetTypeName(IDbDataParameter) Declaration protected virtual string GetTypeName(IDbDataParameter parameter) Parameters Type Name Description System.Data.IDbDataParameter parameter Returns Type Description System.String | Improve this Doc View Source GetUdtTypeName(IDbDataParameter) Declaration protected virtual string GetUdtTypeName(IDbDataParameter parameter) Parameters Type Name Description System.Data.IDbDataParameter parameter Returns Type Description System.String | Improve this Doc View Source IsDateDataType(ISqlExpression, String) Declaration protected static bool IsDateDataType(ISqlExpression expr, string dateName) Parameters Type Name Description ISqlExpression expr System.String dateName Returns Type Description System.Boolean | Improve this Doc View Source IsReserved(String) Declaration protected virtual bool IsReserved(string word) Parameters Type Name Description System.String word Returns Type Description System.Boolean | Improve this Doc View Source IsTimeDataType(ISqlExpression) Declaration protected static bool IsTimeDataType(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Boolean | Improve this Doc View Source ParenthesizeJoin(List<SelectQuery.JoinedTable>) Declaration protected virtual bool ParenthesizeJoin(List<SelectQuery.JoinedTable> joins) Parameters Type Name Description System.Collections.Generic.List<LinqToDB.SqlQuery.SelectQuery.JoinedTable> joins Returns Type Description System.Boolean | Improve this Doc View Source PrintParameterName(StringBuilder, IDbDataParameter) Declaration protected virtual void PrintParameterName(StringBuilder sb, IDbDataParameter parameter) Parameters Type Name Description System.Text.StringBuilder sb System.Data.IDbDataParameter parameter | Improve this Doc View Source PrintParameters(StringBuilder, IDbDataParameter[]) Declaration public virtual StringBuilder PrintParameters(StringBuilder sb, IDbDataParameter[] parameters) Parameters Type Name Description System.Text.StringBuilder sb System.Data.IDbDataParameter[] parameters Returns Type Description System.Text.StringBuilder Implements ISqlBuilder.PrintParameters(StringBuilder, IDbDataParameter[]) | Improve this Doc View Source PrintParameterType(StringBuilder, IDbDataParameter) Declaration protected virtual void PrintParameterType(StringBuilder sb, IDbDataParameter parameter) Parameters Type Name Description System.Text.StringBuilder sb System.Data.IDbDataParameter parameter | Improve this Doc View Source PrintParameterValue(StringBuilder, IDbDataParameter) Declaration protected virtual void PrintParameterValue(StringBuilder sb, IDbDataParameter parameter) Parameters Type Name Description System.Text.StringBuilder sb System.Data.IDbDataParameter parameter | Improve this Doc View Source WithStringBuilder<T>(StringBuilder, Func<T>) Declaration protected T WithStringBuilder<T>(StringBuilder sb, Func<T> func) Parameters Type Name Description System.Text.StringBuilder sb System.Func<T> func Returns Type Description T Type Parameters Name Description T"
  },
  "api/LinqToDB.SqlProvider.BasicSqlOptimizer.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlOptimizer.html",
    "title": "Class BasicSqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Class BasicSqlOptimizer Inheritance System.Object BasicSqlOptimizer OracleSqlOptimizer Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public class BasicSqlOptimizer : ISqlOptimizer Constructors | Improve this Doc View Source BasicSqlOptimizer(SqlProviderFlags) Declaration protected BasicSqlOptimizer(SqlProviderFlags sqlProviderFlags) Parameters Type Name Description SqlProviderFlags sqlProviderFlags Properties | Improve this Doc View Source SqlProviderFlags Declaration public SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags Methods | Improve this Doc View Source Add(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Add(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 System.Type type Returns Type Description ISqlExpression | Improve this Doc View Source Add(ISqlExpression, Int32) Declaration public ISqlExpression Add(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Add<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Add<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source AlternativeConvertToBoolean(SqlFunction, Int32) Declaration protected ISqlExpression AlternativeConvertToBoolean(SqlFunction func, int paramNumber) Parameters Type Name Description SqlFunction func System.Int32 paramNumber Returns Type Description ISqlExpression | Improve this Doc View Source CheckAliases(SelectQuery, Int32) Declaration protected void CheckAliases(SelectQuery selectQuery, int maxLen) Parameters Type Name Description SelectQuery selectQuery System.Int32 maxLen | Improve this Doc View Source ConvertConvertion(SqlFunction) Declaration protected virtual ISqlExpression ConvertConvertion(SqlFunction func) Parameters Type Name Description SqlFunction func Returns Type Description ISqlExpression | Improve this Doc View Source ConvertCountSubQuery(SelectQuery) Declaration public virtual bool ConvertCountSubQuery(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description System.Boolean | Improve this Doc View Source ConvertEqualPredicate(SelectQuery.Predicate.ExprExpr) Declaration protected ISqlPredicate ConvertEqualPredicate(SelectQuery.Predicate.ExprExpr expr) Parameters Type Name Description SelectQuery.Predicate.ExprExpr expr Returns Type Description ISqlPredicate | Improve this Doc View Source ConvertExpression(ISqlExpression) Declaration public virtual ISqlExpression ConvertExpression(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description ISqlExpression Implements ISqlOptimizer.ConvertExpression(ISqlExpression) | Improve this Doc View Source ConvertPredicate(SelectQuery, ISqlPredicate) Declaration public virtual ISqlPredicate ConvertPredicate(SelectQuery selectQuery, ISqlPredicate predicate) Parameters Type Name Description SelectQuery selectQuery ISqlPredicate predicate Returns Type Description ISqlPredicate Implements ISqlOptimizer.ConvertPredicate(SelectQuery, ISqlPredicate) | Improve this Doc View Source Dec(ISqlExpression) Declaration public ISqlExpression Dec(ISqlExpression expr1) Parameters Type Name Description ISqlExpression expr1 Returns Type Description ISqlExpression | Improve this Doc View Source Div(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Div(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 System.Type type Returns Type Description ISqlExpression | Improve this Doc View Source Div(ISqlExpression, Int32) Declaration public ISqlExpression Div(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Div<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Div<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source Finalize(SelectQuery) Declaration public virtual SelectQuery Finalize(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SelectQuery Implements ISqlOptimizer.Finalize(SelectQuery) | Improve this Doc View Source FloorBeforeConvert(SqlFunction) Declaration protected ISqlExpression FloorBeforeConvert(SqlFunction func) Parameters Type Name Description SqlFunction func Returns Type Description ISqlExpression | Improve this Doc View Source GetAlternativeDelete(SelectQuery) Declaration protected SelectQuery GetAlternativeDelete(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SelectQuery | Improve this Doc View Source GetAlternativeUpdate(SelectQuery) Declaration protected SelectQuery GetAlternativeUpdate(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SelectQuery | Improve this Doc View Source GetMaxDisplaySize(SqlDataType) Declaration protected virtual int GetMaxDisplaySize(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description System.Int32 | Improve this Doc View Source GetMaxLength(SqlDataType) Declaration protected virtual int GetMaxLength(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description System.Int32 | Improve this Doc View Source GetMaxPrecision(SqlDataType) Declaration protected virtual int GetMaxPrecision(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description System.Int32 | Improve this Doc View Source GetMaxScale(SqlDataType) Declaration protected virtual int GetMaxScale(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description System.Int32 | Improve this Doc View Source Inc(ISqlExpression) Declaration public ISqlExpression Inc(ISqlExpression expr1) Parameters Type Name Description ISqlExpression expr1 Returns Type Description ISqlExpression | Improve this Doc View Source IsDateDataType(ISqlExpression, String) Declaration protected static bool IsDateDataType(ISqlExpression expr, string dateName) Parameters Type Name Description ISqlExpression expr System.String dateName Returns Type Description System.Boolean | Improve this Doc View Source IsTimeDataType(ISqlExpression) Declaration protected static bool IsTimeDataType(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Boolean | Improve this Doc View Source Mul(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Mul(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 System.Type type Returns Type Description ISqlExpression | Improve this Doc View Source Mul(ISqlExpression, Int32) Declaration public ISqlExpression Mul(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Mul<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Mul<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source OptimizeJoins(SelectQuery) Declaration public SelectQuery OptimizeJoins(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SelectQuery | Improve this Doc View Source Sub(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Sub(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 System.Type type Returns Type Description ISqlExpression | Improve this Doc View Source Sub(ISqlExpression, Int32) Declaration public ISqlExpression Sub(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Sub<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Sub<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.Column.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.Column.html",
    "title": "Class SelectQuery.Column | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery.Column Inheritance System.Object SelectQuery.Column Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Column : IEquatable<SelectQuery.Column>, ISqlExpression, IQueryElement, IEquatable<ISqlExpression>, ISqlExpressionWalkable, ICloneableElement Constructors | Improve this Doc View Source Column(SelectQuery, ISqlExpression) Declaration public Column(SelectQuery builder, ISqlExpression expression) Parameters Type Name Description SelectQuery builder ISqlExpression expression | Improve this Doc View Source Column(SelectQuery, ISqlExpression, String) Declaration public Column(SelectQuery parent, ISqlExpression expression, string alias) Parameters Type Name Description SelectQuery parent ISqlExpression expression System.String alias Properties | Improve this Doc View Source Alias Declaration public string Alias { get; set; } Property Value Type Description System.String | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean Implements ISqlExpression.CanBeNull | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Implements IQueryElement.ElementType | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source Parent Declaration public SelectQuery Parent { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Implements ISqlExpression.Precedence | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description System.Type Implements ISqlExpression.SystemType | Improve this Doc View Source UnderlyingColumn Declaration public SelectQuery.Column UnderlyingColumn { get; } Property Value Type Description SelectQuery.Column Methods | Improve this Doc View Source Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) Declaration public ICloneableElement Clone(Dictionary<ICloneableElement, ICloneableElement> objectTree, Predicate<ICloneableElement> doClone) Parameters Type Name Description System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.ICloneableElement, LinqToDB.SqlQuery.ICloneableElement> objectTree System.Predicate<LinqToDB.SqlQuery.ICloneableElement> doClone Returns Type Description ICloneableElement Implements ICloneableElement.Clone(Dictionary<ICloneableElement, ICloneableElement>, Predicate<ICloneableElement>) | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression, System.Boolean> comparer Returns Type Description System.Boolean Implements ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) | Improve this Doc View Source Equals(SelectQuery.Column) Declaration public bool Equals(SelectQuery.Column other) Parameters Type Name Description SelectQuery.Column other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk(bool skipColumns, Func<ISqlExpression, ISqlExpression> func) Parameters Type Name Description System.Boolean skipColumns System.Func<LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression> func Returns Type Description ISqlExpression Implements ISqlExpressionWalkable.Walk(Boolean, Func<ISqlExpression, ISqlExpression>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description System.Text.StringBuilder sb System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement, LinqToDB.SqlQuery.IQueryElement> dic Returns Type Description System.Text.StringBuilder Implements IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source IEquatable<ISqlExpression>.Equals(ISqlExpression) Declaration bool IEquatable<ISqlExpression>.Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T)"
  }
}