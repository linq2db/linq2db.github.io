{
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ApiResource.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ApiResource.html",
    "title": "Class ApiResource | Linq To DB (aka linq2db)",
    "keywords": "Class ApiResource Represents in database Inheritance System.Object ApiResource Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ApiResource : Models.ApiResource Properties | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ApiResourceClaim.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ApiResourceClaim.html",
    "title": "Class ApiResourceClaim | Linq To DB (aka linq2db)",
    "keywords": "Class ApiResourceClaim Represents in database Inheritance System.Object UserClaim ApiResourceClaim Inherited Members UserClaim.Id UserClaim.Type Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ApiResourceClaim : UserClaim Properties | Improve this Doc View Source ApiResourceId Id Declaration public int ApiResourceId { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ApiScope.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ApiScope.html",
    "title": "Class ApiScope | Linq To DB (aka linq2db)",
    "keywords": "Class ApiScope Represents in database Inheritance System.Object ApiScope Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ApiScope : Scope Properties | Improve this Doc View Source ApiResourceId Id Declaration public int ApiResourceId { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ApiScopeClaim.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ApiScopeClaim.html",
    "title": "Class ApiScopeClaim | Linq To DB (aka linq2db)",
    "keywords": "Class ApiScopeClaim Represents claims of in database Inheritance System.Object UserClaim ApiScopeClaim Inherited Members UserClaim.Id UserClaim.Type Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ApiScopeClaim : UserClaim Properties | Improve this Doc View Source ApiScopeId Id Declaration public int ApiScopeId { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ApiSecret.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ApiSecret.html",
    "title": "Class ApiSecret | Linq To DB (aka linq2db)",
    "keywords": "Class ApiSecret Represents in database Inheritance System.Object Secret ApiSecret Inherited Members Secret.Id Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ApiSecret : Secret Properties | Improve this Doc View Source ApiResourceId Id Declaration public int ApiResourceId { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.Client.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.Client.html",
    "title": "Class Client | Linq To DB (aka linq2db)",
    "keywords": "Class Client Represents in database Inheritance System.Object Client Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class Client : Models.Client Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientClaim.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientClaim.html",
    "title": "Class ClientClaim | Linq To DB (aka linq2db)",
    "keywords": "Class ClientClaim Represents in database Inheritance System.Object ClientClaim Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ClientClaim : Claim Constructors | Improve this Doc View Source ClientClaim() Default constuctor Declaration public ClientClaim() | Improve this Doc View Source ClientClaim(String, String) Constructor Declaration public ClientClaim(string type, string value) Parameters Type Name Description System.String type sets System.String value sets Properties | Improve this Doc View Source ClientId Declaration public string ClientId { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientCorsOrigin.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientCorsOrigin.html",
    "title": "Class ClientCorsOrigin | Linq To DB (aka linq2db)",
    "keywords": "Class ClientCorsOrigin Represents in database Inheritance System.Object ClientCorsOrigin Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ClientCorsOrigin : object Properties | Improve this Doc View Source ClientId Declaration public string ClientId { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Origin Origin value Declaration public string Origin { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientGrantType.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientGrantType.html",
    "title": "Class ClientGrantType | Linq To DB (aka linq2db)",
    "keywords": "Class ClientGrantType Represents in database Inheritance System.Object ClientGrantType Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ClientGrantType : object Properties | Improve this Doc View Source ClientId Declaration public string ClientId { get; set; } Property Value Type Description System.String | Improve this Doc View Source GrantType Grant type value Declaration public string GrantType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientIdentityProviderRestrictions.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientIdentityProviderRestrictions.html",
    "title": "Class ClientIdentityProviderRestrictions | Linq To DB (aka linq2db)",
    "keywords": "Class ClientIdentityProviderRestrictions Represents in database Inheritance System.Object ClientIdentityProviderRestrictions Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ClientIdentityProviderRestrictions : object Properties | Improve this Doc View Source ClientId Declaration public string ClientId { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Provider Represents provider restrictions Declaration public string Provider { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientPostLogoutRedirectUri.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientPostLogoutRedirectUri.html",
    "title": "Class ClientPostLogoutRedirectUri | Linq To DB (aka linq2db)",
    "keywords": "Class ClientPostLogoutRedirectUri Represents in database Inheritance System.Object ClientPostLogoutRedirectUri Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ClientPostLogoutRedirectUri : object Properties | Improve this Doc View Source ClientId Declaration public string ClientId { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PostLogoutRedirectUri Represents post logout redirect Uri Declaration public string PostLogoutRedirectUri { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientRedirectUri.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientRedirectUri.html",
    "title": "Class ClientRedirectUri | Linq To DB (aka linq2db)",
    "keywords": "Class ClientRedirectUri Represents in database Inheritance System.Object ClientRedirectUri Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ClientRedirectUri : object Properties | Improve this Doc View Source ClientId Declaration public string ClientId { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source RedirectUri Represents redirect Uri Declaration public string RedirectUri { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientScope.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientScope.html",
    "title": "Class ClientScope | Linq To DB (aka linq2db)",
    "keywords": "Class ClientScope Represents in database Inheritance System.Object ClientScope Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ClientScope : object Properties | Improve this Doc View Source ClientId Declaration public string ClientId { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Scope Represents Scope Declaration public string Scope { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientSecret.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.ClientSecret.html",
    "title": "Class ClientSecret | Linq To DB (aka linq2db)",
    "keywords": "Class ClientSecret Represents in database Inheritance System.Object Secret ClientSecret Inherited Members Secret.Id Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ClientSecret : Secret Properties | Improve this Doc View Source ClientId Declaration public string ClientId { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.html",
    "title": "Namespace IdentityServer4.Contrib.LinqToDB.Entities | Linq To DB (aka linq2db)",
    "keywords": "Namespace IdentityServer4.Contrib.LinqToDB.Entities Classes ApiResource Represents in database ApiResourceClaim Represents in database ApiScope Represents in database ApiScopeClaim Represents claims of in database ApiSecret Represents in database Client Represents in database ClientClaim Represents in database ClientCorsOrigin Represents in database ClientGrantType Represents in database ClientIdentityProviderRestrictions Represents in database ClientPostLogoutRedirectUri Represents in database ClientRedirectUri Represents in database ClientScope Represents in database ClientSecret Represents in database IdentityClaim Represents in database IdentityResource Represents in database MappingExtensions This class contains extensions for IdentityServer4.Contrib.LinqToDB.Entities namespace Secret Base class for storing secrets UserClaim Base class for storing claims"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.IdentityClaim.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.IdentityClaim.html",
    "title": "Class IdentityClaim | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityClaim Represents in database Inheritance System.Object UserClaim IdentityClaim Inherited Members UserClaim.Id UserClaim.Type Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class IdentityClaim : UserClaim Properties | Improve this Doc View Source IdentityResourceId Id Declaration public int IdentityResourceId { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.IdentityResource.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.IdentityResource.html",
    "title": "Class IdentityResource | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityResource Represents in database Inheritance System.Object IdentityResource Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class IdentityResource : Models.IdentityResource Properties | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.MappingExtensions.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.MappingExtensions.html",
    "title": "Class MappingExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class MappingExtensions This class contains extensions for IdentityServer4.Contrib.LinqToDB.Entities namespace Inheritance System.Object MappingExtensions Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public static class MappingExtensions : object Methods | Improve this Doc View Source ApplyDefaultEntitiesMappings() Applies default mappings for Entities for provided Declaration public static MappingSchema ApplyDefaultEntitiesMappings() Returns Type Description MappingSchema | Improve this Doc View Source ApplyDefaultEntitiesMappings(MappingSchema) Applies default mappings for Entities for provided Declaration public static MappingSchema ApplyDefaultEntitiesMappings(this MappingSchema schema) Parameters Type Name Description MappingSchema schema to apply mappings Returns Type Description MappingSchema schema"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.Secret.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.Secret.html",
    "title": "Class Secret | Linq To DB (aka linq2db)",
    "keywords": "Class Secret Base class for storing secrets Inheritance System.Object Secret ApiSecret ClientSecret Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public abstract class Secret : Models.Secret Properties | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Entities.UserClaim.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Entities.UserClaim.html",
    "title": "Class UserClaim | Linq To DB (aka linq2db)",
    "keywords": "Class UserClaim Base class for storing claims Inheritance System.Object UserClaim ApiResourceClaim ApiScopeClaim IdentityClaim Namespace : IdentityServer4.Contrib.LinqToDB.Entities Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public abstract class UserClaim : object Properties | Improve this Doc View Source Id identity field Declaration public int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Type Claim's Type Declaration public string Type { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.html",
    "title": "Namespace IdentityServer4.Contrib.LinqToDB | Linq To DB (aka linq2db)",
    "keywords": "Namespace IdentityServer4.Contrib.LinqToDB Classes TokenCleanupOptions"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Interfaces.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Interfaces.html",
    "title": "Namespace IdentityServer4.Contrib.LinqToDB.Interfaces | Linq To DB (aka linq2db)",
    "keywords": "Namespace IdentityServer4.Contrib.LinqToDB.Interfaces Interfaces IDataConnectionFactory"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Interfaces.IDataConnectionFactory.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Interfaces.IDataConnectionFactory.html",
    "title": "Interface IDataConnectionFactory | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataConnectionFactory Namespace : IdentityServer4.Contrib.LinqToDB.Interfaces Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public interface IDataConnectionFactory Methods | Improve this Doc View Source GetConnection() Declaration DataConnection GetConnection() Returns Type Description DataConnection | Improve this Doc View Source GetContext() Declaration DataContext GetContext() Returns Type Description DataContext Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Services.CorsPolicyService.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Services.CorsPolicyService.html",
    "title": "Class CorsPolicyService | Linq To DB (aka linq2db)",
    "keywords": "Class CorsPolicyService Inheritance System.Object CorsPolicyService Namespace : IdentityServer4.Contrib.LinqToDB.Services Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class CorsPolicyService : ICorsPolicyService Constructors | Improve this Doc View Source CorsPolicyService(IDataConnectionFactory, ILogger<CorsPolicyService>) Declaration public CorsPolicyService(IDataConnectionFactory dataConnectionFactory, ILogger<CorsPolicyService> logger) Parameters Type Name Description IDataConnectionFactory dataConnectionFactory ILogger < CorsPolicyService > logger Methods | Improve this Doc View Source IsOriginAllowedAsync(String) Declaration public Task<bool> IsOriginAllowedAsync(string origin) Parameters Type Name Description System.String origin Returns Type Description Task < System.Boolean > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Services.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Services.html",
    "title": "Namespace IdentityServer4.Contrib.LinqToDB.Services | Linq To DB (aka linq2db)",
    "keywords": "Namespace IdentityServer4.Contrib.LinqToDB.Services Classes CorsPolicyService"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Stores.ClientStore.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Stores.ClientStore.html",
    "title": "Class ClientStore | Linq To DB (aka linq2db)",
    "keywords": "Class ClientStore Inheritance System.Object ClientStore Namespace : IdentityServer4.Contrib.LinqToDB.Stores Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ClientStore : IClientStore Constructors | Improve this Doc View Source ClientStore(IDataConnectionFactory, ILogger<ClientStore>) Declaration public ClientStore(IDataConnectionFactory dataConnectionFactory, ILogger<ClientStore> logger) Parameters Type Name Description IDataConnectionFactory dataConnectionFactory ILogger < ClientStore > logger Methods | Improve this Doc View Source FindClientByIdAsync(String) Declaration public Task<Models.Client> FindClientByIdAsync(string clientId) Parameters Type Name Description System.String clientId Returns Type Description Task < IdentityServer4.Models.Client > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Stores.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Stores.html",
    "title": "Namespace IdentityServer4.Contrib.LinqToDB.Stores | Linq To DB (aka linq2db)",
    "keywords": "Namespace IdentityServer4.Contrib.LinqToDB.Stores Classes ClientStore PersistedGrantStore ResourceStore"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Stores.PersistedGrantStore.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Stores.PersistedGrantStore.html",
    "title": "Class PersistedGrantStore | Linq To DB (aka linq2db)",
    "keywords": "Class PersistedGrantStore Inheritance System.Object PersistedGrantStore Namespace : IdentityServer4.Contrib.LinqToDB.Stores Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class PersistedGrantStore : IPersistedGrantStore Constructors | Improve this Doc View Source PersistedGrantStore(IDataConnectionFactory, ILogger<PersistedGrantStore>) Declaration public PersistedGrantStore(IDataConnectionFactory dataConnectionFactory, ILogger<PersistedGrantStore> logger) Parameters Type Name Description IDataConnectionFactory dataConnectionFactory ILogger < PersistedGrantStore > logger Methods | Improve this Doc View Source GetAllAsync(String) Declaration public Task<IEnumerable<PersistedGrant>> GetAllAsync(string subjectId) Parameters Type Name Description System.String subjectId Returns Type Description Task < IEnumerable < PersistedGrant >> | Improve this Doc View Source GetAsync(String) Declaration public Task<PersistedGrant> GetAsync(string key) Parameters Type Name Description System.String key Returns Type Description Task < PersistedGrant > | Improve this Doc View Source RemoveAllAsync(String, String) Declaration public Task RemoveAllAsync(string subjectId, string clientId) Parameters Type Name Description System.String subjectId System.String clientId Returns Type Description Task | Improve this Doc View Source RemoveAllAsync(String, String, String) Declaration public Task RemoveAllAsync(string subjectId, string clientId, string type) Parameters Type Name Description System.String subjectId System.String clientId System.String type Returns Type Description Task | Improve this Doc View Source RemoveAsync(String) Declaration public Task RemoveAsync(string key) Parameters Type Name Description System.String key Returns Type Description Task | Improve this Doc View Source StoreAsync(PersistedGrant) Declaration public Task StoreAsync(PersistedGrant token) Parameters Type Name Description PersistedGrant token Returns Type Description Task Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.Stores.ResourceStore.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.Stores.ResourceStore.html",
    "title": "Class ResourceStore | Linq To DB (aka linq2db)",
    "keywords": "Class ResourceStore Inheritance System.Object ResourceStore Namespace : IdentityServer4.Contrib.LinqToDB.Stores Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class ResourceStore : IResourceStore Constructors | Improve this Doc View Source ResourceStore(IDataConnectionFactory, ILogger<ResourceStore>) Declaration public ResourceStore(IDataConnectionFactory dataConnectionFactory, ILogger<ResourceStore> logger) Parameters Type Name Description IDataConnectionFactory dataConnectionFactory ILogger < ResourceStore > logger Methods | Improve this Doc View Source FindApiResourceAsync(String) Declaration public Task<Models.ApiResource> FindApiResourceAsync(string name) Parameters Type Name Description System.String name Returns Type Description Task < IdentityServer4.Models.ApiResource > | Improve this Doc View Source FindApiResourcesByScopeAsync(IEnumerable<String>) Declaration public Task<IEnumerable<Models.ApiResource>> FindApiResourcesByScopeAsync(IEnumerable<string> scopeNames) Parameters Type Name Description IEnumerable < System.String > scopeNames Returns Type Description Task < IEnumerable < IdentityServer4.Models.ApiResource >> | Improve this Doc View Source FindIdentityResourcesByScopeAsync(IEnumerable<String>) Declaration public Task<IEnumerable<Models.IdentityResource>> FindIdentityResourcesByScopeAsync(IEnumerable<string> scopeNames) Parameters Type Name Description IEnumerable < System.String > scopeNames Returns Type Description Task < IEnumerable < IdentityServer4.Models.IdentityResource >> | Improve this Doc View Source GetAllResources() Declaration public Task<Resources> GetAllResources() Returns Type Description Task < Resources > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/IdentityServer4.Contrib.LinqToDB.TokenCleanupOptions.html": {
    "href": "api/IdentityServer4.Contrib.LinqToDB.TokenCleanupOptions.html",
    "title": "Class TokenCleanupOptions | Linq To DB (aka linq2db)",
    "keywords": "Class TokenCleanupOptions Inheritance System.Object TokenCleanupOptions Namespace : IdentityServer4.Contrib.LinqToDB Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public class TokenCleanupOptions : object Properties | Improve this Doc View Source Interval Declaration public TimeSpan Interval { get; set; } Property Value Type Description TimeSpan Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.AnalyticFunctions.html": {
    "href": "api/LinqToDB.AnalyticFunctions.html",
    "title": "Class AnalyticFunctions | Linq To DB (aka linq2db)",
    "keywords": "Class AnalyticFunctions Inheritance System.Object AnalyticFunctions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class AnalyticFunctions : object Fields | Improve this Doc View Source FunctionToken Token name for analytic function. Used for resolving method chain. Declaration public const string FunctionToken = null Field Value Type Description System.String Methods | Improve this Doc View Source Average<T>(Sql.ISqlExtension, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Average<T>(this Sql.ISqlExtension ext, object? expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Average<T>(Sql.ISqlExtension, Nullable<Object>, Sql.AggregateModifier) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Average<T>(this Sql.ISqlExtension ext, object? expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Average<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration public static double Average<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description System.Double Type Parameters Name Description TEntity TV | Improve this Doc View Source Average<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration public static double Average<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description System.Double Type Parameters Name Description TEntity TV | Improve this Doc View Source Corr<T>(IEnumerable<T>, Expression<Func<T, Nullable<Object>>>, Expression<Func<T, Nullable<Object>>>) Declaration public static decimal Corr<T>(this IEnumerable<T> source, Expression<Func<T, object?>> expr1, Expression<Func<T, object?>> expr2) Parameters Type Name Description IEnumerable <T> source Expression < Func <T, System.Nullable < System.Object >>> expr1 Expression < Func <T, System.Nullable < System.Object >>> expr2 Returns Type Description System.Decimal Type Parameters Name Description T | Improve this Doc View Source Corr<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Nullable<Object>>>, Expression<Func<TEntity, Nullable<Object>>>) Declaration public static decimal Corr<TEntity>(this IQueryable<TEntity> source, Expression<Func<TEntity, object?>> expr1, Expression<Func<TEntity, object?>> expr2) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, System.Nullable < System.Object >>> expr1 Expression < Func <TEntity, System.Nullable < System.Object >>> expr2 Returns Type Description System.Decimal Type Parameters Name Description TEntity | Improve this Doc View Source Corr<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Corr<T>(this Sql.ISqlExtension ext, object? expr1, object? expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr1 System.Nullable < System.Object > expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Count(Sql.ISqlExtension) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<int> Count(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained < System.Int32 > | Improve this Doc View Source Count(Sql.ISqlExtension, Nullable<Object>, Sql.AggregateModifier) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<int> Count(this Sql.ISqlExtension ext, object? expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained < System.Int32 > | Improve this Doc View Source Count<T>(Sql.ISqlExtension, T) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<int> Count<T>(this Sql.ISqlExtension ext, T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained < System.Int32 > Type Parameters Name Description T | Improve this Doc View Source CountExt<TEntity>(IEnumerable<TEntity>, Func<TEntity, Nullable<Object>>) Declaration public static int CountExt<TEntity>(this IEnumerable<TEntity> source, Func<TEntity, object?> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, System.Nullable < System.Object >> expr Returns Type Description System.Int32 Type Parameters Name Description TEntity | Improve this Doc View Source CountExt<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration public static int CountExt<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description System.Int32 Type Parameters Name Description TEntity TV | Improve this Doc View Source CountExt<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration public static int CountExt<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description System.Int32 Type Parameters Name Description TEntity TV | Improve this Doc View Source CountExt<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration public static int CountExt<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier = Sql.AggregateModifier.None) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description System.Int32 Type Parameters Name Description TEntity TV | Improve this Doc View Source CovarPop<T>(IEnumerable<T>, Expression<Func<T, Nullable<Object>>>, Expression<Func<T, Nullable<Object>>>) Declaration public static decimal CovarPop<T>(this IEnumerable<T> source, Expression<Func<T, object?>> expr1, Expression<Func<T, object?>> expr2) Parameters Type Name Description IEnumerable <T> source Expression < Func <T, System.Nullable < System.Object >>> expr1 Expression < Func <T, System.Nullable < System.Object >>> expr2 Returns Type Description System.Decimal Type Parameters Name Description T | Improve this Doc View Source CovarPop<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Nullable<Object>>>, Expression<Func<TEntity, Nullable<Object>>>) Declaration public static decimal CovarPop<TEntity>(this IQueryable<TEntity> source, Expression<Func<TEntity, object?>> expr1, Expression<Func<TEntity, object?>> expr2) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, System.Nullable < System.Object >>> expr1 Expression < Func <TEntity, System.Nullable < System.Object >>> expr2 Returns Type Description System.Decimal Type Parameters Name Description TEntity | Improve this Doc View Source CovarPop<T>(Sql.ISqlExtension, T, T) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> CovarPop<T>(this Sql.ISqlExtension ext, T expr1, T expr2) Parameters Type Name Description Sql.ISqlExtension ext T expr1 T expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source CovarSamp<T>(IEnumerable<T>, Expression<Func<T, Nullable<Object>>>, Expression<Func<T, Nullable<Object>>>) Declaration public static decimal CovarSamp<T>(this IEnumerable<T> source, Expression<Func<T, object?>> expr1, Expression<Func<T, object?>> expr2) Parameters Type Name Description IEnumerable <T> source Expression < Func <T, System.Nullable < System.Object >>> expr1 Expression < Func <T, System.Nullable < System.Object >>> expr2 Returns Type Description System.Decimal Type Parameters Name Description T | Improve this Doc View Source CovarSamp<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Nullable<Object>>>, Expression<Func<TEntity, Nullable<Object>>>) Declaration public static decimal CovarSamp<TEntity>(this IQueryable<TEntity> source, Expression<Func<TEntity, object?>> expr1, Expression<Func<TEntity, object?>> expr2) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, System.Nullable < System.Object >>> expr1 Expression < Func <TEntity, System.Nullable < System.Object >>> expr2 Returns Type Description System.Decimal Type Parameters Name Description TEntity | Improve this Doc View Source CovarSamp<T>(Sql.ISqlExtension, T, T) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> CovarSamp<T>(this Sql.ISqlExtension ext, T expr1, T expr2) Parameters Type Name Description Sql.ISqlExtension ext T expr1 T expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source CumeDist<TR>(Sql.ISqlExtension) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<TR> CumeDist<TR>(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <TR> Type Parameters Name Description TR | Improve this Doc View Source CumeDist<TR>(Sql.ISqlExtension, Nullable<Object>[]) Declaration public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<TR> CumeDist<TR>(this Sql.ISqlExtension ext, params object? [] expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object >[] expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly <TR> Type Parameters Name Description TR | Improve this Doc View Source DenseRank(Sql.ISqlExtension) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<long> DenseRank(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow < System.Int64 > | Improve this Doc View Source DenseRank(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) Declaration public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<long> DenseRank(this Sql.ISqlExtension ext, object? expr1, object? expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr1 System.Nullable < System.Object > expr2 Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly < System.Int64 > | Improve this Doc View Source Filter<T>(AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>, Boolean) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Filter<T>(this AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> func, bool filter) Parameters Type Name Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> func System.Boolean filter Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source FirstValue<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> FirstValue<T>(this Sql.ISqlExtension ext, T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source KeepFirst<TR>(AnalyticFunctions.IAggregateFunction<TR>) Declaration public static AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> KeepFirst<TR>(this AnalyticFunctions.IAggregateFunction<TR> ext) Parameters Type Name Description LinqToDB.AnalyticFunctions.IAggregateFunction <TR> ext Returns Type Description LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition <TR> Type Parameters Name Description TR | Improve this Doc View Source KeepLast<TR>(AnalyticFunctions.IAggregateFunction<TR>) Declaration public static AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR> KeepLast<TR>(this AnalyticFunctions.IAggregateFunction<TR> ext) Parameters Type Name Description LinqToDB.AnalyticFunctions.IAggregateFunction <TR> ext Returns Type Description LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition <TR> Type Parameters Name Description TR | Improve this Doc View Source Lag<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lag<T>(this Sql.ISqlExtension ext, T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source Lag<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lag<T>(this Sql.ISqlExtension ext, T expr, Sql.Nulls nulls, int offset, int? default) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls System.Int32 offset System.Nullable < System.Int32 > default Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source LastValue<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> LastValue<T>(this Sql.ISqlExtension ext, T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Lead<T>(Sql.ISqlExtension, T, Sql.Nulls) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lead<T>(this Sql.ISqlExtension ext, T expr, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source Lead<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> Lead<T>(this Sql.ISqlExtension ext, T expr, Sql.Nulls nulls, int offset, int? default) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.Nulls nulls System.Int32 offset System.Nullable < System.Int32 > default Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source ListAgg<T>(Sql.ISqlExtension, T) Declaration public static AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<string> ListAgg<T>(this Sql.ISqlExtension ext, T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition < System.String > Type Parameters Name Description T | Improve this Doc View Source ListAgg<T>(Sql.ISqlExtension, T, String) Declaration public static AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<string> ListAgg<T>(this Sql.ISqlExtension ext, T expr, string delimiter) Parameters Type Name Description Sql.ISqlExtension ext T expr System.String delimiter Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition < System.String > Type Parameters Name Description T | Improve this Doc View Source LongCount(Sql.ISqlExtension) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<long> LongCount(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained < System.Int64 > | Improve this Doc View Source LongCount(Sql.ISqlExtension, Nullable<Object>, Sql.AggregateModifier) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<long> LongCount(this Sql.ISqlExtension ext, object? expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained < System.Int64 > | Improve this Doc View Source LongCount<T>(Sql.ISqlExtension, T) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<long> LongCount<T>(this Sql.ISqlExtension ext, T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained < System.Int64 > Type Parameters Name Description T | Improve this Doc View Source LongCountExt<TEntity>(IEnumerable<TEntity>, Func<TEntity, Nullable<Object>>) Declaration public static long LongCountExt<TEntity>(this IEnumerable<TEntity> source, Func<TEntity, object?> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, System.Nullable < System.Object >> expr Returns Type Description System.Int64 Type Parameters Name Description TEntity | Improve this Doc View Source LongCountExt<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration public static long LongCountExt<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description System.Int64 Type Parameters Name Description TEntity TV | Improve this Doc View Source LongCountExt<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration public static long LongCountExt<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier = Sql.AggregateModifier.None) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description System.Int64 Type Parameters Name Description TEntity TV | Improve this Doc View Source Max<T>(Sql.ISqlExtension, T) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Max<T>(this Sql.ISqlExtension ext, T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Max<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Max<T>(this Sql.ISqlExtension ext, T expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Max<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration public static TV Max<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source Max<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration public static TV Max<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source Median<T>(Sql.ISqlExtension, T) Declaration public static AnalyticFunctions.IReadyToFunctionOrOverWithPartition<T> Median<T>(this Sql.ISqlExtension ext, T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition <T> Type Parameters Name Description T | Improve this Doc View Source Median<TEntity, T>(IEnumerable<TEntity>, Func<TEntity, T>) Declaration public static long Median<TEntity, T>(this IEnumerable<TEntity> source, Func<TEntity, T> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, T> expr Returns Type Description System.Int64 Type Parameters Name Description TEntity T | Improve this Doc View Source Median<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration public static long Median<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description System.Int64 Type Parameters Name Description TEntity TV | Improve this Doc View Source Min<T>(Sql.ISqlExtension, T) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Min<T>(this Sql.ISqlExtension ext, T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Min<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Min<T>(this Sql.ISqlExtension ext, T expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Min<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration public static TV Min<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source Min<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration public static TV Min<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source NthValue<T>(Sql.ISqlExtension, T, Int64) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> NthValue<T>(this Sql.ISqlExtension ext, T expr, long n) Parameters Type Name Description Sql.ISqlExtension ext T expr System.Int64 n Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source NthValue<T>(Sql.ISqlExtension, T, Int64, Sql.From, Sql.Nulls) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> NthValue<T>(this Sql.ISqlExtension ext, T expr, long n, Sql.From from, Sql.Nulls nulls) Parameters Type Name Description Sql.ISqlExtension ext T expr System.Int64 n Sql.From from Sql.Nulls nulls Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source NTile<T>(Sql.ISqlExtension, T) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> NTile<T>(this Sql.ISqlExtension ext, T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source PercentileCont<T>(Sql.ISqlExtension, Nullable<Object>) Declaration public static AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<T> PercentileCont<T>(this Sql.ISqlExtension ext, object? expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition <T> Type Parameters Name Description T | Improve this Doc View Source PercentileDisc<T>(Sql.ISqlExtension, Nullable<Object>) Declaration public static AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<T> PercentileDisc<T>(this Sql.ISqlExtension ext, object? expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition <T> Type Parameters Name Description T | Improve this Doc View Source PercentRank<T>(Sql.ISqlExtension) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T> PercentRank<T>(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T> Type Parameters Name Description T | Improve this Doc View Source PercentRank<T>(Sql.ISqlExtension, Nullable<Object>[]) Declaration public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<T> PercentRank<T>(this Sql.ISqlExtension ext, params object? [] expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object >[] expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly <T> Type Parameters Name Description T | Improve this Doc View Source Rank(Sql.ISqlExtension) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<long> Rank(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow < System.Int64 > | Improve this Doc View Source Rank(Sql.ISqlExtension, Nullable<Object>[]) Declaration public static AnalyticFunctions.INeedsWithinGroupWithOrderOnly<long> Rank(this Sql.ISqlExtension ext, params object? [] expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object >[] expr Returns Type Description LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly < System.Int64 > | Improve this Doc View Source RatioToReport<TR>(Sql.ISqlExtension, Nullable<Object>) Declaration public static AnalyticFunctions.IOverWithPartitionNeeded<TR> RatioToReport<TR>(this Sql.ISqlExtension ext, object? expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Returns Type Description LinqToDB.AnalyticFunctions.IOverWithPartitionNeeded <TR> Type Parameters Name Description TR | Improve this Doc View Source RegrAvgX<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrAvgX<T>(this Sql.ISqlExtension ext, object? expr1, object? expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr1 System.Nullable < System.Object > expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrAvgY<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrAvgY<T>(this Sql.ISqlExtension ext, object? expr1, object? expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr1 System.Nullable < System.Object > expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrCount(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<long> RegrCount(this Sql.ISqlExtension ext, object? expr1, object? expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr1 System.Nullable < System.Object > expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained < System.Int64 > | Improve this Doc View Source RegrIntercept<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrIntercept<T>(this Sql.ISqlExtension ext, object? expr1, object? expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr1 System.Nullable < System.Object > expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrR2<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrR2<T>(this Sql.ISqlExtension ext, object? expr1, object? expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr1 System.Nullable < System.Object > expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrSlope<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSlope<T>(this Sql.ISqlExtension ext, object? expr1, object? expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr1 System.Nullable < System.Object > expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrSXX<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSXX<T>(this Sql.ISqlExtension ext, object? expr1, object? expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr1 System.Nullable < System.Object > expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrSXY<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSXY<T>(this Sql.ISqlExtension ext, object? expr1, object? expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr1 System.Nullable < System.Object > expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RegrSYY<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> RegrSYY<T>(this Sql.ISqlExtension ext, object? expr1, object? expr2) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr1 System.Nullable < System.Object > expr2 Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source RowNumber(Sql.ISqlExtension) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<long> RowNumber(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow < System.Int64 > | Improve this Doc View Source StdDev<T>(Sql.ISqlExtension, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDev<T>(this Sql.ISqlExtension ext, object? expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source StdDev<T>(Sql.ISqlExtension, Nullable<Object>, Sql.AggregateModifier) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDev<T>(this Sql.ISqlExtension ext, object? expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source StdDev<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration public static double StdDev<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description System.Double Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDev<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration public static double StdDev<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description System.Double Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDev<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration public static double StdDev<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier = Sql.AggregateModifier.None) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description System.Double Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDevPop<T>(Sql.ISqlExtension, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDevPop<T>(this Sql.ISqlExtension ext, object? expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source StdDevPop<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration public static decimal StdDevPop<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description System.Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDevPop<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration public static decimal StdDevPop<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description System.Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDevSamp<T>(Sql.ISqlExtension, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> StdDevSamp<T>(this Sql.ISqlExtension ext, object? expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source StdDevSamp<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration public static decimal StdDevSamp<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description System.Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source StdDevSamp<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration public static decimal StdDevSamp<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description System.Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source Sum<T>(Sql.ISqlExtension, T) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Sum<T>(this Sql.ISqlExtension ext, T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Sum<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Sum<T>(this Sql.ISqlExtension ext, T expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Variance<T>(Sql.ISqlExtension, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Variance<T>(this Sql.ISqlExtension ext, object? expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Variance<T>(Sql.ISqlExtension, Nullable<Object>, Sql.AggregateModifier) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> Variance<T>(this Sql.ISqlExtension ext, object? expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source Variance<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration public static TV Variance<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source Variance<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration public static TV Variance<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source Variance<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration public static TV Variance<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier = Sql.AggregateModifier.None) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description TV Type Parameters Name Description TEntity TV | Improve this Doc View Source VarPop<T>(Sql.ISqlExtension, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> VarPop<T>(this Sql.ISqlExtension ext, object? expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source VarPop<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration public static decimal VarPop<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description System.Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source VarPop<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration public static decimal VarPop<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description System.Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source VarSamp<T>(Sql.ISqlExtension, Nullable<Object>) Declaration public static AnalyticFunctions.IAggregateFunctionSelfContained<T> VarSamp<T>(this Sql.ISqlExtension ext, object? expr) Parameters Type Name Description Sql.ISqlExtension ext System.Nullable < System.Object > expr Returns Type Description LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained <T> Type Parameters Name Description T | Improve this Doc View Source VarSamp<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>) Declaration public static decimal VarSamp<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Returns Type Description System.Decimal Type Parameters Name Description TEntity TV | Improve this Doc View Source VarSamp<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration public static decimal VarSamp<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description System.Decimal Type Parameters Name Description TEntity TV"
  },
  "api/LinqToDB.Async.AsyncDbConnection.html": {
    "href": "api/LinqToDB.Async.AsyncDbConnection.html",
    "title": "Class AsyncDbConnection | Linq To DB (aka linq2db)",
    "keywords": "Class AsyncDbConnection Implements IAsyncDbConnection wrapper over instance with synchronous implementation of asynchronous methods. Providers with async operations support could override its methods with asynchronous implementations. Inheritance System.Object AsyncDbConnection Implements IAsyncDbConnection IDbConnection IAsyncDisposable Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public class AsyncDbConnection : object, IAsyncDbConnection, IAsyncDisposable Constructors | Improve this Doc View Source AsyncDbConnection(IDbConnection) Declaration protected AsyncDbConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Properties | Improve this Doc View Source Connection Declaration public virtual IDbConnection Connection { get; } Property Value Type Description IDbConnection | Improve this Doc View Source ConnectionString Declaration public virtual string ConnectionString { get; set; } Property Value Type Description System.String | Improve this Doc View Source ConnectionTimeout Declaration public virtual int ConnectionTimeout { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Database Declaration public virtual string Database { get; } Property Value Type Description System.String | Improve this Doc View Source State Declaration public virtual ConnectionState State { get; } Property Value Type Description ConnectionState Methods | Improve this Doc View Source BeginTransaction() Declaration public virtual IDbTransaction BeginTransaction() Returns Type Description IDbTransaction | Improve this Doc View Source BeginTransaction(IsolationLevel) Declaration public virtual IDbTransaction BeginTransaction(IsolationLevel il) Parameters Type Name Description IsolationLevel il Returns Type Description IDbTransaction | Improve this Doc View Source BeginTransactionAsync(CancellationToken) Declaration public virtual Task<IAsyncDbTransaction> BeginTransactionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IAsyncDbTransaction > | Improve this Doc View Source BeginTransactionAsync(IsolationLevel, CancellationToken) Declaration public virtual Task<IAsyncDbTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken = null) Parameters Type Name Description IsolationLevel isolationLevel CancellationToken cancellationToken Returns Type Description Task < IAsyncDbTransaction > | Improve this Doc View Source ChangeDatabase(String) Declaration public virtual void ChangeDatabase(string databaseName) Parameters Type Name Description System.String databaseName | Improve this Doc View Source Close() Declaration public virtual void Close() | Improve this Doc View Source CloseAsync() Declaration public virtual Task CloseAsync() Returns Type Description Task | Improve this Doc View Source CreateCommand() Declaration public virtual IDbCommand CreateCommand() Returns Type Description IDbCommand | Improve this Doc View Source Dispose() Declaration public virtual void Dispose() | Improve this Doc View Source DisposeAsync() Declaration public virtual Task DisposeAsync() Returns Type Description Task | Improve this Doc View Source Open() Declaration public virtual void Open() | Improve this Doc View Source OpenAsync(CancellationToken) Declaration public virtual Task OpenAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source TryClone() Declaration public virtual IAsyncDbConnection TryClone() Returns Type Description IAsyncDbConnection Implements IAsyncDbConnection IDbConnection IAsyncDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Async.AsyncDbTransaction.html": {
    "href": "api/LinqToDB.Async.AsyncDbTransaction.html",
    "title": "Class AsyncDbTransaction | Linq To DB (aka linq2db)",
    "keywords": "Class AsyncDbTransaction Asynchronous version of the interface, allowing asynchronous operations, missing from . Providers with async operations support could override its methods with asynchronous implementations. Inheritance System.Object AsyncDbTransaction Implements IAsyncDbTransaction IDbTransaction IAsyncDisposable Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public class AsyncDbTransaction : object, IAsyncDbTransaction, IAsyncDisposable Constructors | Improve this Doc View Source AsyncDbTransaction(IDbTransaction) Declaration protected AsyncDbTransaction(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Properties | Improve this Doc View Source Connection Declaration public virtual IDbConnection Connection { get; } Property Value Type Description IDbConnection | Improve this Doc View Source IsolationLevel Declaration public virtual IsolationLevel IsolationLevel { get; } Property Value Type Description IsolationLevel | Improve this Doc View Source Transaction Declaration public IDbTransaction Transaction { get; } Property Value Type Description IDbTransaction Methods | Improve this Doc View Source Commit() Declaration public virtual void Commit() | Improve this Doc View Source CommitAsync(CancellationToken) Declaration public virtual Task CommitAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Dispose() Declaration public virtual void Dispose() | Improve this Doc View Source DisposeAsync() Declaration public virtual Task DisposeAsync() Returns Type Description Task | Improve this Doc View Source Rollback() Declaration public virtual void Rollback() | Improve this Doc View Source RollbackAsync(CancellationToken) Declaration public virtual Task RollbackAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task Implements IAsyncDbTransaction IDbTransaction IAsyncDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Async.AsyncFactory.html": {
    "href": "api/LinqToDB.Async.AsyncFactory.html",
    "title": "Class AsyncFactory | Linq To DB (aka linq2db)",
    "keywords": "Class AsyncFactory Provides factory methods to create async wrappers for and instances. Inheritance System.Object AsyncFactory Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public static class AsyncFactory : object Methods | Improve this Doc View Source Create(IDbConnection) Wraps instance into type, implementing IAsyncDbConnection . Declaration public static IAsyncDbConnection Create(IDbConnection connection) Parameters Type Name Description IDbConnection connection Connection to wrap. Returns Type Description IAsyncDbConnection IAsyncDbConnection implementation for provided connection instance. | Improve this Doc View Source Create(IDbTransaction) Wraps instance into type, implementing IAsyncDbTransaction . Declaration public static IAsyncDbTransaction Create(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Transaction to wrap. Returns Type Description IAsyncDbTransaction IAsyncDbTransaction implementation for provided transaction instance. | Improve this Doc View Source RegisterConnectionFactory<TConnection>(Func<IDbConnection, IAsyncDbConnection>) Register or replace custom IAsyncDbConnection for TConnection type. Declaration public static void RegisterConnectionFactory<TConnection>(Func<IDbConnection, IAsyncDbConnection> factory) where TConnection : IDbConnection Parameters Type Name Description Func < IDbConnection , IAsyncDbConnection > factory IAsyncDbConnection factory. Type Parameters Name Description TConnection Connection type, which should use provided factory. | Improve this Doc View Source RegisterTransactionFactory<TTransaction>(Func<IDbTransaction, IAsyncDbTransaction>) Register or replace custom IAsyncDbTransaction for TTransaction type. Declaration public static void RegisterTransactionFactory<TTransaction>(Func<IDbTransaction, IAsyncDbTransaction> factory) where TTransaction : IDbTransaction Parameters Type Name Description Func < IDbTransaction , IAsyncDbTransaction > factory IAsyncDbTransaction factory. Type Parameters Name Description TTransaction Transaction type, which should use provided factory."
  },
  "api/LinqToDB.Async.html": {
    "href": "api/LinqToDB.Async.html",
    "title": "Namespace LinqToDB.Async | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Async Classes AsyncDbConnection Implements IAsyncDbConnection wrapper over instance with synchronous implementation of asynchronous methods. Providers with async operations support could override its methods with asynchronous implementations. AsyncDbTransaction Asynchronous version of the interface, allowing asynchronous operations, missing from . Providers with async operations support could override its methods with asynchronous implementations. AsyncFactory Provides factory methods to create async wrappers for and instances. Interfaces IAsyncDbConnection Asynchronous version of the interface, allowing asynchronous operations, missing from . IAsyncDbTransaction Asynchronous version of the interface, allowing asynchronous operations, missing from . IAsyncDisposable Provides a mechanism for releasing unmanaged resources asynchronously. IAsyncEnumerable<T> This API supports the LinqToDB infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. IAsyncEnumerator<T> Asynchronous version of the IEnumerator<T> interface, allowing elements to be retrieved asynchronously. IQueryProviderAsync This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice."
  },
  "api/LinqToDB.Async.IAsyncDbConnection.html": {
    "href": "api/LinqToDB.Async.IAsyncDbConnection.html",
    "title": "Interface IAsyncDbConnection | Linq To DB (aka linq2db)",
    "keywords": "Interface IAsyncDbConnection Asynchronous version of the interface, allowing asynchronous operations, missing from . Inherited Members IAsyncDisposable.DisposeAsync() Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public interface IAsyncDbConnection : IAsyncDisposable Properties | Improve this Doc View Source Connection Gets underlying connection instance. Declaration IDbConnection Connection { get; } Property Value Type Description IDbConnection Methods | Improve this Doc View Source BeginTransactionAsync(CancellationToken) Starts new transaction asynchronously for current connection with default isolation level. Declaration Task<IAsyncDbTransaction> BeginTransactionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IAsyncDbTransaction > Database transaction object. | Improve this Doc View Source BeginTransactionAsync(IsolationLevel, CancellationToken) Starts new transaction asynchronously for current connection with specified isolation level. Declaration Task<IAsyncDbTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken = null) Parameters Type Name Description IsolationLevel isolationLevel Transaction isolation level. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IAsyncDbTransaction > Database transaction object. | Improve this Doc View Source CloseAsync() Closes current connection asynchonously. Declaration Task CloseAsync() Returns Type Description Task Async operation task. | Improve this Doc View Source OpenAsync(CancellationToken) Opens current connection asynchonously. Declaration Task OpenAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Async operation task. | Improve this Doc View Source TryClone() Returns cloned connection instance, if underlying provider supports cloning or null otherwise. Declaration IAsyncDbConnection TryClone() Returns Type Description IAsyncDbConnection Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Async.IAsyncDbTransaction.html": {
    "href": "api/LinqToDB.Async.IAsyncDbTransaction.html",
    "title": "Interface IAsyncDbTransaction | Linq To DB (aka linq2db)",
    "keywords": "Interface IAsyncDbTransaction Asynchronous version of the interface, allowing asynchronous operations, missing from . Inherited Members IAsyncDisposable.DisposeAsync() Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public interface IAsyncDbTransaction : IAsyncDisposable Properties | Improve this Doc View Source Transaction Gets underlying transaction instance. Declaration IDbTransaction Transaction { get; } Property Value Type Description IDbTransaction Methods | Improve this Doc View Source CommitAsync(CancellationToken) Commits transaction asynchronously. Declaration Task CommitAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. | Improve this Doc View Source RollbackAsync(CancellationToken) Rollbacks transaction asynchronously. Declaration Task RollbackAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Async.IAsyncDisposable.html": {
    "href": "api/LinqToDB.Async.IAsyncDisposable.html",
    "title": "Interface IAsyncDisposable | Linq To DB (aka linq2db)",
    "keywords": "Interface IAsyncDisposable Provides a mechanism for releasing unmanaged resources asynchronously. Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public interface IAsyncDisposable Methods | Improve this Doc View Source DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. Declaration Task DisposeAsync() Returns Type Description Task Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Async.IAsyncEnumerable-1.html": {
    "href": "api/LinqToDB.Async.IAsyncEnumerable-1.html",
    "title": "Interface IAsyncEnumerable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IAsyncEnumerable<T> This API supports the LinqToDB infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public interface IAsyncEnumerable<out T> Type Parameters Name Description T Methods | Improve this Doc View Source GetAsyncEnumerator(CancellationToken) This API supports the LinqToDB infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description IAsyncEnumerator <T> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Async.IAsyncEnumerator-1.html": {
    "href": "api/LinqToDB.Async.IAsyncEnumerator-1.html",
    "title": "Interface IAsyncEnumerator<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IAsyncEnumerator<T> Asynchronous version of the IEnumerator<T> interface, allowing elements to be retrieved asynchronously. Inherited Members IAsyncDisposable.DisposeAsync() Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public interface IAsyncEnumerator<out T> : IAsyncDisposable Type Parameters Name Description T Element type. Properties | Improve this Doc View Source Current Gets the current element in the iteration. Declaration T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source MoveNextAsync() Advances the enumerator to the next element in the sequence, returning the result asynchronously. Declaration Task<bool> MoveNextAsync() Returns Type Description Task < System.Boolean > Task containing the result of the operation: true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the sequence. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Async.IQueryProviderAsync.html": {
    "href": "api/LinqToDB.Async.IQueryProviderAsync.html",
    "title": "Interface IQueryProviderAsync | Linq To DB (aka linq2db)",
    "keywords": "Interface IQueryProviderAsync This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Namespace : LinqToDB.Async Assembly : linq2db.dll Syntax public interface IQueryProviderAsync Methods | Improve this Doc View Source ExecuteAsync<TResult>(Expression, CancellationToken) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) Parameters Type Name Description Expression expression CancellationToken cancellationToken Returns Type Description Task <TResult> Type Parameters Name Description TResult | Improve this Doc View Source ExecuteAsyncEnumerable<TResult>(Expression, CancellationToken) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration Task<IAsyncEnumerable<TResult>> ExecuteAsyncEnumerable<TResult>(Expression expression, CancellationToken cancellationToken) Parameters Type Name Description Expression expression CancellationToken cancellationToken Returns Type Description Task < IAsyncEnumerable <TResult>> Type Parameters Name Description TResult Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.AsyncExtensions.html": {
    "href": "api/LinqToDB.AsyncExtensions.html",
    "title": "Class AsyncExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class AsyncExtensions Provides helper methods for asynchronous operations. Inheritance System.Object AsyncExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class AsyncExtensions : object Methods | Improve this Doc View Source AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<bool> AllAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AsAsyncEnumerable<TSource>(IQueryable<TSource>) Returns an IAsyncEnumerable<T> that can be enumerated asynchronously. Declaration public static IAsyncEnumerable<TSource> AsAsyncEnumerable<TSource>(this IQueryable<TSource> source) Parameters Type Name Description IQueryable <TSource> source Source sequence. Returns Type Description IAsyncEnumerable <TSource> A query that can be enumerated asynchronously. Type Parameters Name Description TSource Source sequence element type. | Improve this Doc View Source AverageAsync(IQueryable<Decimal>, CancellationToken) Declaration public static Task<decimal> AverageAsync(this IQueryable<decimal> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Decimal > source CancellationToken token Returns Type Description Task < System.Decimal > | Improve this Doc View Source AverageAsync(IQueryable<Double>, CancellationToken) Declaration public static Task<double> AverageAsync(this IQueryable<double> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Double > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsync(IQueryable<Int32>, CancellationToken) Declaration public static Task<double> AverageAsync(this IQueryable<int> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Int32 > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsync(IQueryable<Int64>, CancellationToken) Declaration public static Task<double> AverageAsync(this IQueryable<long> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Int64 > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public static Task<decimal?> AverageAsync(this IQueryable<decimal?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Decimal >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration public static Task<double?> AverageAsync(this IQueryable<double?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Double >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public static Task<double?> AverageAsync(this IQueryable<int?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int32 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public static Task<double?> AverageAsync(this IQueryable<long?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int64 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration public static Task<float?> AverageAsync(this IQueryable<float?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Single >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> | Improve this Doc View Source AverageAsync(IQueryable<Single>, CancellationToken) Declaration public static Task<float> AverageAsync(this IQueryable<float> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Single > source CancellationToken token Returns Type Description Task < System.Single > | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public static Task<decimal> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Decimal >> selector CancellationToken token Returns Type Description Task < System.Decimal > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Double >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int32 >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int64 >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public static Task<decimal?> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Decimal >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Double >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int32 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int64 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public static Task<float?> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Single >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public static Task<float> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Single >> selector CancellationToken token Returns Type Description Task < System.Single > Type Parameters Name Description TSource | Improve this Doc View Source ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken) Declaration public static Task<bool> ContainsAsync<TSource>(this IQueryable<TSource> source, TSource item, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source TSource item CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) Asynchronously apply provided action to each element in source sequence. Sequence elements processed sequentially. Declaration public static Task ForEachAsync<TSource>(this IQueryable<TSource> source, Action<TSource> action, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source sequence. Action <TSource> action Action to apply to each sequence element. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. Type Parameters Name Description TSource Source sequence element type. | Improve this Doc View Source ForEachUntilAsync<TSource>(IQueryable<TSource>, Func<TSource, Boolean>, CancellationToken) Asynchronously apply provided function to each element in source sequence sequentially. Sequence enumeration stops if function returns false . Declaration public static Task ForEachUntilAsync<TSource>(this IQueryable<TSource> source, Func<TSource, bool> func, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source sequence. Func <TSource, System.Boolean > func Function to apply to each sequence element. Returning false from function will stop numeration. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. Type Parameters Name Description TSource Source sequence element type. | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public static Task<TResult> MaxAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source MinAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public static Task<TResult> MinAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync(IQueryable<Decimal>, CancellationToken) Declaration public static Task<decimal> SumAsync(this IQueryable<decimal> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Decimal > source CancellationToken token Returns Type Description Task < System.Decimal > | Improve this Doc View Source SumAsync(IQueryable<Double>, CancellationToken) Declaration public static Task<double> SumAsync(this IQueryable<double> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Double > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source SumAsync(IQueryable<Int32>, CancellationToken) Declaration public static Task<int> SumAsync(this IQueryable<int> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Int32 > source CancellationToken token Returns Type Description Task < System.Int32 > | Improve this Doc View Source SumAsync(IQueryable<Int64>, CancellationToken) Declaration public static Task<long> SumAsync(this IQueryable<long> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Int64 > source CancellationToken token Returns Type Description Task < System.Int64 > | Improve this Doc View Source SumAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public static Task<decimal?> SumAsync(this IQueryable<decimal?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Decimal >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration public static Task<double?> SumAsync(this IQueryable<double?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Double >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public static Task<int?> SumAsync(this IQueryable<int?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int32 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Int32 >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public static Task<long?> SumAsync(this IQueryable<long?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int64 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Int64 >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration public static Task<float?> SumAsync(this IQueryable<float?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Single >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> | Improve this Doc View Source SumAsync(IQueryable<Single>, CancellationToken) Declaration public static Task<float> SumAsync(this IQueryable<float> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Single > source CancellationToken token Returns Type Description Task < System.Single > | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public static Task<decimal> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Decimal >> selector CancellationToken token Returns Type Description Task < System.Decimal > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public static Task<double> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Double >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public static Task<int> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int32 >> selector CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public static Task<long> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int64 >> selector CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public static Task<decimal?> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Decimal >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public static Task<double?> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Double >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public static Task<int?> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int32 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Int32 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public static Task<long?> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int64 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Int64 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public static Task<float?> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Single >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public static Task<float> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Single >> selector CancellationToken token Returns Type Description Task < System.Single > Type Parameters Name Description TSource | Improve this Doc View Source ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously loads data from query to an array. Declaration public static async Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TSource[]> Array with query results. Type Parameters Name Description TSource Query element type. | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) Asynchronously loads data from query to a dictionary. Declaration public static async Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query. Func <TSource, TKey> keySelector Source element key selector. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Dictionary <TKey, TSource>> Dictionary with query results. Type Parameters Name Description TSource Query element type. TKey Dictionary key type. | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) Asynchronously loads data from query to a dictionary. Declaration public static async Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query. Func <TSource, TKey> keySelector Source element key selector. IEqualityComparer <TKey> comparer Dictionary key comparer. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Dictionary <TKey, TSource>> Dictionary with query results. Type Parameters Name Description TSource Query element type. TKey Dictionary key type. | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) Asynchronously loads data from query to a dictionary. Declaration public static async Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query. Func <TSource, TKey> keySelector Source element key selector. Func <TSource, TElement> elementSelector Dictionary element selector. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Dictionary <TKey, TElement>> Dictionary with query results. Type Parameters Name Description TSource Query element type. TKey Dictionary key type. TElement Dictionary element type. | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) Asynchronously loads data from query to a dictionary. Declaration public static async Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query. Func <TSource, TKey> keySelector Source element key selector. Func <TSource, TElement> elementSelector Dictionary element selector. IEqualityComparer <TKey> comparer Dictionary key comparer. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < Dictionary <TKey, TElement>> Dictionary with query results. Type Parameters Name Description TSource Query element type. TKey Dictionary key type. TElement Dictionary element type. | Improve this Doc View Source ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously loads data from query to a list. Declaration public static async Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < List <TSource>> List with query results. Type Parameters Name Description TSource Query element type."
  },
  "api/LinqToDB.Common.Array-1.html": {
    "href": "api/LinqToDB.Common.Array-1.html",
    "title": "Class Array<T> | Linq To DB (aka linq2db)",
    "keywords": "Class Array<T> Empty array instance helper. Inheritance System.Object Array<T> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Array<T> : object Type Parameters Name Description T Array element type. Fields | Improve this Doc View Source Empty Static instance of empty array of specific type. Declaration public static readonly T[] Empty Field Value Type Description T[]"
  },
  "api/LinqToDB.Common.Compilation.html": {
    "href": "api/LinqToDB.Common.Compilation.html",
    "title": "Class Compilation | Linq To DB (aka linq2db)",
    "keywords": "Class Compilation Contains LINQ expression compilation options. Inheritance System.Object Compilation Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Compilation : object Methods | Improve this Doc View Source SetExpressionCompiler(Nullable<Func<LambdaExpression, Nullable<Delegate>>>) Sets LINQ expression compilation method. Declaration public static void SetExpressionCompiler(Func<LambdaExpression, Delegate?>? compiler) Parameters Type Name Description System.Nullable < Func < LambdaExpression , System.Nullable < Delegate >>> compiler Method to use for expression compilation or null to reset compilation logic to defaults."
  },
  "api/LinqToDB.Common.Configuration.Data.html": {
    "href": "api/LinqToDB.Common.Configuration.Data.html",
    "title": "Class Configuration.Data | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.Data Inheritance System.Object Configuration.Data Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Data : object Fields | Improve this Doc View Source BulkCopyUseConnectionCommandTimeout Controls behavior of bulk copy timeout if BulkCopyTimeout is not provided. if true - the current timeout on the DataConnection is used if false - command timeout is infinite. Default value: false . Declaration public static bool BulkCopyUseConnectionCommandTimeout Field Value Type Description System.Boolean | Improve this Doc View Source ThrowOnDisposed Enables throwing of when access disposed DataConnection instance. Default value: true . Declaration public static bool ThrowOnDisposed Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.Common.Configuration.html": {
    "href": "api/LinqToDB.Common.Configuration.html",
    "title": "Class Configuration | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration Contains global linq2db settings. Inheritance System.Object Configuration Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Configuration : object Fields | Improve this Doc View Source ContinueOnCapturedContext Defines value to pass to method for all linq2db internal await operations. Default value: true . Declaration public static bool ContinueOnCapturedContext Field Value Type Description System.Boolean | Improve this Doc View Source IsStructIsScalarType If true - non-primitive and non-enum value types (structures) will be treated as scalar types (e.g. ) during mapping; otherwise they will be treated the same way as classes. Default value: true . Declaration public static bool IsStructIsScalarType Field Value Type Description System.Boolean | Improve this Doc View Source OptimizeForSequentialAccess Enables mapping expression to be compatible with behavior. Note that it doesn't switch linq2db to use behavior for queries, so this optimization could be used for too. Default value: false . Declaration public static bool OptimizeForSequentialAccess Field Value Type Description System.Boolean | Improve this Doc View Source UseEnumValueNameForStringColumns If true - Enum values are stored as by calling ToString(). Default value: true . Declaration public static bool UseEnumValueNameForStringColumns Field Value Type Description System.Boolean Properties | Improve this Doc View Source MaxBinaryParameterLengthLogging Determines the length after which logging of binary data in SQL will be truncated. This is to avoid Out-Of-Memory exceptions when getting SqlText from TraceInfo or IExpressionQuery for logging or other purposes. Declaration public static int MaxBinaryParameterLengthLogging { get; set; } Property Value Type Description System.Int32 Remarks This value defaults to 100. Use a value of -1 to disable and always log full binary. Set to 0 to truncate all binary data. | Improve this Doc View Source MaxStringParameterLengthLogging Determines the length after which logging of string data in SQL will be truncated. This is to avoid Out-Of-Memory exceptions when getting SqlText from TraceInfo or IExpressionQuery for logging or other purposes. Declaration public static int MaxStringParameterLengthLogging { get; set; } Property Value Type Description System.Int32 Remarks This value defaults to 200. Use a value of -1 to disable and always log full string. Set to 0 to truncate all string data."
  },
  "api/LinqToDB.Common.Configuration.Linq.html": {
    "href": "api/LinqToDB.Common.Configuration.Linq.html",
    "title": "Class Configuration.Linq | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.Linq LINQ query settings. Inheritance System.Object Configuration.Linq Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Linq : object Fields | Improve this Doc View Source AllowMultipleQuery Controls behavior of linq2db when multiple queries required to load requested data: if true - multiple queries allowed; if false - LinqException will be thrown. This option required, if you want to select related collections, e.g. using method. Default value: false . Declaration public static bool AllowMultipleQuery Field Value Type Description System.Boolean | Improve this Doc View Source CacheSlidingExpiration Specifies timeout when query will be evicted from cache since last execution of query. Default value is 1 hour. Declaration public static TimeSpan CacheSlidingExpiration Field Value Type Description TimeSpan | Improve this Doc View Source CompareNullsAsValues If set to true nullable fields would be checked for IS NULL in Equal/NotEqual comparisons. This affects: Equal, NotEqual, Not Contains Default value: true . Declaration public static bool CompareNullsAsValues Field Value Type Description System.Boolean Examples public class MyEntity { public int? Value; } db.MyEntity.Where(e => e.Value != 10) from e1 in db.MyEntity join e2 in db.MyEntity on e1.Value equals e2.Value select e1 var filter = new [] {1, 2, 3}; db.MyEntity.Where(e => ! filter.Contains(e.Value)) Would be converted to next queries: SELECT Value FROM MyEntity WHERE Value IS NULL OR Value != 10 SELECT e1.Value FROM MyEntity e1 INNER JOIN MyEntity e2 ON e1.Value = e2.Value OR (e1.Value IS NULL AND e2.Value IS NULL) SELECT Value FROM MyEntity WHERE Value IS NULL OR NOT Value IN (1, 2, 3) | Improve this Doc View Source DisableQueryCache Used to disable LINQ expressions caching for queries. This cache reduces time, required for query parsing but have several side-effects: cached LINQ expressions could contain references to external objects as parameters, which could lead to memory leaks if those objects are not used anymore by other code cache access synchronization could lead to bigger latencies than it saves. Default value: false . It is not recommended to enable this option as it could lead to severe slowdown. Better approach will be to call LinqToDB.Linq.Query`1.ClearCache method to cleanup cache after queries, that produce severe memory leaks you need to fix. More details . Declaration public static bool DisableQueryCache Field Value Type Description System.Boolean | Improve this Doc View Source DoNotClearOrderBys Controls behavior, when LINQ query chain contains multiple or calls: if true - non-first OrderBy* call will be treated as ThenBy* call; if false - OrderBy* call will discard sort specifications, added by previous OrderBy* and ThenBy* calls. Default value: false . Declaration public static bool DoNotClearOrderBys Field Value Type Description System.Boolean | Improve this Doc View Source GenerateExpressionTest Enables generation of test class for each LINQ query, executed while this option is enabled. This option could be useful for issue reporting, when you need to provide reproducible case. Test file will be placed to linq2db subfolder of temp folder and exact file path will be logged to data connection tracing infrastructure. See TraceSwitch for more details. Default value: false . Declaration public static bool GenerateExpressionTest Field Value Type Description System.Boolean | Improve this Doc View Source GuardGrouping Controls behavior of LINQ query, which ends with GroupBy call. if true - LinqToDBException will be thrown for such queries; if false - behavior is controlled by PreloadGroups option. Default value: true . Declaration public static bool GuardGrouping Field Value Type Description System.Boolean Remarks More details . | Improve this Doc View Source IgnoreEmptyUpdate Controls behavior of linq2db when there is no updateable fields in Update query: if true - query not executed and Update operation returns 0 as number of affected records; if false - LinqException will be thrown. Default value: false . Declaration public static bool IgnoreEmptyUpdate Field Value Type Description System.Boolean | Improve this Doc View Source KeepDistinctOrdered Allows SQL generation to automatically transform SELECT DISTINCT value FROM Table ORDER BY date Into GROUP BY equivalent if syntax is not supported Default value: true . Declaration public static bool KeepDistinctOrdered Field Value Type Description System.Boolean | Improve this Doc View Source OptimizeJoins If enabled, linq2db will try to reduce number of generated SQL JOINs for LINQ query. Attempted optimizations: removes duplicate joins by unique target table key; removes self-joins by unique key; removes left joins if joined table is not used in query. Default value: true . Declaration public static bool OptimizeJoins Field Value Type Description System.Boolean | Improve this Doc View Source ParameterizeTakeSkip Enables Take/Skip parameterization. Default value: true . Declaration public static bool ParameterizeTakeSkip Field Value Type Description System.Boolean | Improve this Doc View Source PreferApply Used to generate CROSS APPLY or OUTER APPLY if possible. Default value: true . Declaration public static bool PreferApply Field Value Type Description System.Boolean | Improve this Doc View Source PreloadGroups Controls how group data for LINQ queries ended with GroupBy will be loaded: if true - group data will be loaded together with main query, resulting in 1 + N queries, where N - number of groups; if false - group data will be loaded when you call enumerator for specific group . Default value: false . Declaration public static bool PreloadGroups Field Value Type Description System.Boolean | Improve this Doc View Source TraceMapperExpression Enables logging of generated mapping expression to data connection tracing infrastructure. See TraceSwitch for more details. Default value: false . Declaration public static bool TraceMapperExpression Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.Common.Configuration.LinqService.html": {
    "href": "api/LinqToDB.Common.Configuration.LinqService.html",
    "title": "Class Configuration.LinqService | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.LinqService Linq over WCF global settings. Inheritance System.Object Configuration.LinqService Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class LinqService : object Fields | Improve this Doc View Source SerializeAssemblyQualifiedName Controls format of type name, sent over remote context: if true - name from used; if false - name from used. Default value: false . Declaration public static bool SerializeAssemblyQualifiedName Field Value Type Description System.Boolean | Improve this Doc View Source ThrowUnresolvedTypeException Controls behavior of linq2db, when it cannot load by type name on query deserialization: if true - LinqToDBException will be thrown; if false - type load error will be ignored. Default value: false . Declaration public static bool ThrowUnresolvedTypeException Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.Common.Configuration.RetryPolicy.html": {
    "href": "api/LinqToDB.Common.Configuration.RetryPolicy.html",
    "title": "Class Configuration.RetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.RetryPolicy Retry policy global settings. Inheritance System.Object Configuration.RetryPolicy Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class RetryPolicy : object Fields | Improve this Doc View Source DefaultCoefficient The default coefficient for the exponential function used to compute the delay between retries, must be nonnegative. Default value: 1 second. Declaration public static TimeSpan DefaultCoefficient Field Value Type Description TimeSpan | Improve this Doc View Source DefaultExponentialBase The default base for the exponential function used to compute the delay between retries, must be positive. Default value: 2 . Declaration public static double DefaultExponentialBase Field Value Type Description System.Double | Improve this Doc View Source DefaultMaxDelay The default maximum time delay between retries, must be nonnegative. Default value: 30 seconds. Declaration public static TimeSpan DefaultMaxDelay Field Value Type Description TimeSpan | Improve this Doc View Source DefaultMaxRetryCount The default number of retry attempts. Default value: 5 . Declaration public static int DefaultMaxRetryCount Field Value Type Description System.Int32 | Improve this Doc View Source DefaultRandomFactor The default maximum random factor, must not be lesser than 1. Default value: 1.1 . Declaration public static double DefaultRandomFactor Field Value Type Description System.Double | Improve this Doc View Source Factory Retry policy factory method, used to create retry policy for new DataConnection instance. If factory method is not set, retry policy is not used. Not set by default. Declaration public static Func<DataConnection, IRetryPolicy>? Factory Field Value Type Description System.Nullable < Func < DataConnection , IRetryPolicy >> Properties | Improve this Doc View Source UseDefaultPolicy Status of use of default retry policy. Getter returns true if default retry policy used, and false if custom retry policy used or retry policy is not set. Setter sets Factory to default retry policy factory if value is true , otherwise removes retry policy. Declaration public static bool UseDefaultPolicy { get; set; } Property Value Type Description System.Boolean"
  },
  "api/LinqToDB.Common.Configuration.Sql.html": {
    "href": "api/LinqToDB.Common.Configuration.Sql.html",
    "title": "Class Configuration.Sql | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.Sql SQL generation global settings. Inheritance System.Object Configuration.Sql Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Sql : object Properties | Improve this Doc View Source AssociationAlias Format for association alias. Default value: \"a_{0}\" . In the following query var query = from child in db.Child select new { child.ChildID, child.Parent.Value1 }; for association Parent will be generated association A_Parent in resulting SQL. SELECT [child].[ChildID], [a_Parent].[Value1] FROM [Child] [child] LEFT JOIN [Parent] [a_Parent] ON ([child].[ParentID] = [a_Parent].[ParentID]) Set this value to null to disable special alias generation queries. Declaration public static string? AssociationAlias { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source GenerateFinalAliases Indicates whether SQL Builder should generate aliases for final projection. It is not required for correct query processing but simplifies SQL analysis. Default value: false . For the query var query = from child in db.Child select new { TrackId = child.ChildID, }; When property is true SELECT [child].[ChildID] as [TrackId] FROM [Child] [child] Otherwise alias will be removed SELECT [child].[ChildID] FROM [Child] [child] Declaration public static bool GenerateFinalAliases { get; set; } Property Value Type Description System.Boolean"
  },
  "api/LinqToDB.Common.Configuration.SqlServer.html": {
    "href": "api/LinqToDB.Common.Configuration.SqlServer.html",
    "title": "Class Configuration.SqlServer | Linq To DB (aka linq2db)",
    "keywords": "Class Configuration.SqlServer SqlServer specific global settings. Inheritance System.Object Configuration.SqlServer Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class SqlServer : object Fields | Improve this Doc View Source UseSchemaOnlyToGetSchema if set to true , SchemaProvider uses to get metadata. Otherwise the sp_describe_first_result_set sproc is used. Default value: false . Declaration public static bool UseSchemaOnlyToGetSchema Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.Common.Convert-2.html": {
    "href": "api/LinqToDB.Common.Convert-2.html",
    "title": "Class Convert<TFrom, TTo> | Linq To DB (aka linq2db)",
    "keywords": "Class Convert<TFrom, TTo> Converters provider for value conversion from TFrom to TTo type. Inheritance System.Object Convert<TFrom, TTo> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Convert<TFrom, TTo> : object Type Parameters Name Description TFrom Source conversion type. TTo Target conversion type. Properties | Improve this Doc View Source Expression Gets or sets an expression that converts a value of TFrom type to TTo type. Setter updates both expression and delegate forms of converter. Assigning null value will reset converter to default conversion logic. Assigning non-null value will also set converter as default converter. Declaration public static Expression<Func<TFrom, TTo>> Expression { get; set; } Property Value Type Description Expression < Func <TFrom, TTo>> | Improve this Doc View Source From Gets conversion function delegate. Declaration public static Func<TFrom, TTo> From { get; } Property Value Type Description Func <TFrom, TTo> | Improve this Doc View Source Lambda Gets or sets a function that converts a value of TFrom type to TTo type. Setter updates both expression and delegate forms of converter. Assigning null value will reset converter to default conversion logic. Assigning non-null value will also set converter as default converter. Declaration public static Func<TFrom, TTo> Lambda { get; set; } Property Value Type Description Func <TFrom, TTo>"
  },
  "api/LinqToDB.Common.Converter.html": {
    "href": "api/LinqToDB.Common.Converter.html",
    "title": "Class Converter | Linq To DB (aka linq2db)",
    "keywords": "Class Converter Type conversion manager. Inheritance System.Object Converter Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Converter : object Methods | Improve this Doc View Source ChangeType(Nullable<Object>, Type, MappingSchema) Converts value to conversionType type. Declaration public static object? ChangeType(object? value, Type conversionType, MappingSchema mappingSchema = null) Parameters Type Name Description System.Nullable < System.Object > value Value to convert. Type conversionType Target conversion type. MappingSchema mappingSchema Optional mapping schema. Returns Type Description System.Nullable < System.Object > Converted value. | Improve this Doc View Source ChangeTypeTo<T>(Nullable<Object>, MappingSchema) Converts value to T type. Declaration public static T ChangeTypeTo<T>(object? value, MappingSchema mappingSchema = null) Parameters Type Name Description System.Nullable < System.Object > value Value to convert. MappingSchema mappingSchema Optional mapping schema. Returns Type Description T Converted value. Type Parameters Name Description T Target conversion type. | Improve this Doc View Source GetDefaultMappingFromEnumType(MappingSchema, Type) Returns type, to which provided enumeration values should be mapped. Declaration public static Type? GetDefaultMappingFromEnumType(MappingSchema mappingSchema, Type enumType) Parameters Type Name Description MappingSchema mappingSchema Current mapping schema Type enumType Enumeration type. Returns Type Description System.Nullable < Type > Underlying mapping type. | Improve this Doc View Source SetConverter<TFrom, TTo>(Expression<Func<TFrom, TTo>>) Sets custom converter from TFrom to TTo type. Declaration public static void SetConverter<TFrom, TTo>(Expression<Func<TFrom, TTo>> expr) Parameters Type Name Description Expression < Func <TFrom, TTo>> expr Converter expression. Type Parameters Name Description TFrom Source conversion type. TTo Target conversion type."
  },
  "api/LinqToDB.Common.ConvertTo-1.html": {
    "href": "api/LinqToDB.Common.ConvertTo-1.html",
    "title": "Class ConvertTo<TTo> | Linq To DB (aka linq2db)",
    "keywords": "Class ConvertTo<TTo> Value converter to TTo type. Inheritance System.Object ConvertTo<TTo> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class ConvertTo<TTo> : object Type Parameters Name Description TTo Target conversion type. Methods | Improve this Doc View Source From<TFrom>(TFrom) Converts value from TFrom to TTo type. Declaration public static TTo From<TFrom>(TFrom o) Parameters Type Name Description TFrom o Value to convert. Returns Type Description TTo Converted value. Type Parameters Name Description TFrom Source conversion type. Examples ConvertTo<int>.From(\"123\");"
  },
  "api/LinqToDB.Common.DbDataType.html": {
    "href": "api/LinqToDB.Common.DbDataType.html",
    "title": "Struct DbDataType | Linq To DB (aka linq2db)",
    "keywords": "Struct DbDataType Stores database type attributes. Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public struct DbDataType Constructors | Improve this Doc View Source DbDataType(Type) Declaration public DbDataType(Type systemType) Parameters Type Name Description Type systemType | Improve this Doc View Source DbDataType(Type, DataType) Declaration public DbDataType(Type systemType, DataType dataType) Parameters Type Name Description Type systemType DataType dataType | Improve this Doc View Source DbDataType(Type, DataType, Nullable<String>) Declaration public DbDataType(Type systemType, DataType dataType, string? dbType) Parameters Type Name Description Type systemType DataType dataType System.Nullable < System.String > dbType | Improve this Doc View Source DbDataType(Type, DataType, Nullable<String>, Nullable<Int32>) Declaration public DbDataType(Type systemType, DataType dataType, string? dbType, int? length) Parameters Type Name Description Type systemType DataType dataType System.Nullable < System.String > dbType System.Nullable < System.Int32 > length | Improve this Doc View Source DbDataType(Type, DataType, Nullable<String>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration public DbDataType(Type systemType, DataType dataType, string? dbType, int? length, int? precision, int? scale) Parameters Type Name Description Type systemType DataType dataType System.Nullable < System.String > dbType System.Nullable < System.Int32 > length System.Nullable < System.Int32 > precision System.Nullable < System.Int32 > scale | Improve this Doc View Source DbDataType(Type, String) Declaration public DbDataType(Type systemType, string dbType) Parameters Type Name Description Type systemType System.String dbType Properties | Improve this Doc View Source DataType Declaration public readonly DataType DataType { get; } Property Value Type Description DataType | Improve this Doc View Source DbType Declaration public readonly string? DbType { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Length Declaration public readonly int? Length { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Precision Declaration public readonly int? Precision { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Scale Declaration public readonly int? Scale { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source SystemType Declaration public readonly Type SystemType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Equals(DbDataType) Declaration public bool Equals(DbDataType other) Parameters Type Name Description DbDataType other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source WithDataType(DataType) Declaration public DbDataType WithDataType(DataType dataType) Parameters Type Name Description DataType dataType Returns Type Description DbDataType | Improve this Doc View Source WithDbType(Nullable<String>) Declaration public DbDataType WithDbType(string? dbName) Parameters Type Name Description System.Nullable < System.String > dbName Returns Type Description DbDataType | Improve this Doc View Source WithLength(Nullable<Int32>) Declaration public DbDataType WithLength(int? length) Parameters Type Name Description System.Nullable < System.Int32 > length Returns Type Description DbDataType | Improve this Doc View Source WithoutSystemType(DbDataType) Declaration public DbDataType WithoutSystemType(DbDataType from) Parameters Type Name Description DbDataType from Returns Type Description DbDataType | Improve this Doc View Source WithoutSystemType(ColumnDescriptor) Declaration public DbDataType WithoutSystemType(ColumnDescriptor from) Parameters Type Name Description ColumnDescriptor from Returns Type Description DbDataType | Improve this Doc View Source WithPrecision(Nullable<Int32>) Declaration public DbDataType WithPrecision(int? precision) Parameters Type Name Description System.Nullable < System.Int32 > precision Returns Type Description DbDataType | Improve this Doc View Source WithScale(Nullable<Int32>) Declaration public DbDataType WithScale(int? scale) Parameters Type Name Description System.Nullable < System.Int32 > scale Returns Type Description DbDataType | Improve this Doc View Source WithSetValues(DbDataType) Declaration public DbDataType WithSetValues(DbDataType from) Parameters Type Name Description DbDataType from Returns Type Description DbDataType | Improve this Doc View Source WithSystemType(Type) Declaration public DbDataType WithSystemType(Type systemType) Parameters Type Name Description Type systemType Returns Type Description DbDataType Operators | Improve this Doc View Source Equality(DbDataType, DbDataType) Declaration public static bool operator ==(DbDataType t1, DbDataType t2) Parameters Type Name Description DbDataType t1 DbDataType t2 Returns Type Description System.Boolean | Improve this Doc View Source Inequality(DbDataType, DbDataType) Declaration public static bool operator !=(DbDataType t1, DbDataType t2) Parameters Type Name Description DbDataType t1 DbDataType t2 Returns Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsDistinctFrom<T>(T, Nullable<T>) Sql.IsNotDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, Nullable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.DefaultValue.html": {
    "href": "api/LinqToDB.Common.DefaultValue.html",
    "title": "Class DefaultValue | Linq To DB (aka linq2db)",
    "keywords": "Class DefaultValue Default value provider. Default value used for mapping from NULL database value to C# value. Inheritance System.Object DefaultValue Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class DefaultValue : object Methods | Improve this Doc View Source GetValue(Type, MappingSchema) Returns default value for provided type. Declaration public static object? GetValue(Type type, MappingSchema mappingSchema = null) Parameters Type Name Description Type type Type, for which default value requested. MappingSchema mappingSchema Optional mapping schema to provide mapping information for enum type. Returns Type Description System.Nullable < System.Object > Default value for specific type. | Improve this Doc View Source GetValue<T>() Returns default value for provided type. Declaration public static T GetValue<T>() Returns Type Description T Default value for specific type. Type Parameters Name Description T Type, for which default value requested. | Improve this Doc View Source SetValue<T>(T) Sets default value for provided type. Declaration public static void SetValue<T>(T value) Parameters Type Name Description T value Default value for specific type. Type Parameters Name Description T Type, for which default value set."
  },
  "api/LinqToDB.Common.DefaultValue-1.html": {
    "href": "api/LinqToDB.Common.DefaultValue-1.html",
    "title": "Class DefaultValue<T> | Linq To DB (aka linq2db)",
    "keywords": "Class DefaultValue<T> Default value provider for specific type. Default value used for mapping from NULL database value to C# value. Inheritance System.Object DefaultValue<T> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class DefaultValue<T> : object Type Parameters Name Description T Type parameter. Properties | Improve this Doc View Source Value Gets or sets default value for specific type. Declaration public static T Value { get; set; } Property Value Type Description T"
  },
  "api/LinqToDB.Common.html": {
    "href": "api/LinqToDB.Common.html",
    "title": "Namespace LinqToDB.Common | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Common Classes Array<T> Empty array instance helper. Compilation Contains LINQ expression compilation options. Configuration Contains global linq2db settings. Configuration.Data Configuration.Linq LINQ query settings. Configuration.LinqService Linq over WCF global settings. Configuration.RetryPolicy Retry policy global settings. Configuration.Sql SQL generation global settings. Configuration.SqlServer SqlServer specific global settings. Convert<TFrom, TTo> Converters provider for value conversion from TFrom to TTo type. Converter Type conversion manager. ConvertTo<TTo> Value converter to TTo type. DefaultValue Default value provider. Default value used for mapping from NULL database value to C# value. DefaultValue<T> Default value provider for specific type. Default value used for mapping from NULL database value to C# value. LinqToDBConvertException Defines the base class for the namespace exceptions. MemberInfoEqualityComparer StringBuilderExtensions Tools Various general-purpose helpers. TypeHelper Utils Utils.ObjectReferenceEqualityComparer<T> ValueConverter<TModel, TProvider> ValueConverterFunc<TModel, TProvider> Structs DbDataType Stores database type attributes. RawSqlString A string representing a raw SQL query. This type enables overload resolution between the regular and interpolated . Interfaces IValueConverter Defines conversions from an object of one type in a model to an object of the same or different type in the database."
  },
  "api/LinqToDB.Common.Internal.Cache.CacheEntryExtensions.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.CacheEntryExtensions.html",
    "title": "Class CacheEntryExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class CacheEntryExtensions Inheritance System.Object CacheEntryExtensions Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public static class CacheEntryExtensions : object Methods | Improve this Doc View Source AddExpirationToken<TKey>(ICacheEntry<TKey>, IChangeToken) Expire the cache entry if the given IChangeToken expires. Declaration public static ICacheEntry<TKey> AddExpirationToken<TKey>(this ICacheEntry<TKey> entry, IChangeToken expirationToken) Parameters Type Name Description ICacheEntry <TKey> entry The ICacheEntry<TKey> . IChangeToken expirationToken The IChangeToken that causes the cache entry to expire. Returns Type Description ICacheEntry <TKey> The ICacheEntry<TKey> for chaining. Type Parameters Name Description TKey | Improve this Doc View Source RegisterPostEvictionCallback<TKey>(ICacheEntry<TKey>, PostEvictionDelegate<TKey>) The given callback will be fired after the cache entry is evicted from the cache. Declaration public static ICacheEntry<TKey> RegisterPostEvictionCallback<TKey>(this ICacheEntry<TKey> entry, PostEvictionDelegate<TKey> callback) Parameters Type Name Description ICacheEntry <TKey> entry The ICacheEntry<TKey> . PostEvictionDelegate <TKey> callback The callback to run after the entry is evicted. Returns Type Description ICacheEntry <TKey> The ICacheEntry<TKey> for chaining. Type Parameters Name Description TKey | Improve this Doc View Source RegisterPostEvictionCallback<TKey>(ICacheEntry<TKey>, PostEvictionDelegate<TKey>, Nullable<Object>) The given callback will be fired after the cache entry is evicted from the cache. Declaration public static ICacheEntry<TKey> RegisterPostEvictionCallback<TKey>(this ICacheEntry<TKey> entry, PostEvictionDelegate<TKey> callback, object? state) Parameters Type Name Description ICacheEntry <TKey> entry The ICacheEntry<TKey> . PostEvictionDelegate <TKey> callback The callback to run after the entry is evicted. System.Nullable < System.Object > state The state to pass to the post-eviction callback. Returns Type Description ICacheEntry <TKey> The ICacheEntry<TKey> for chaining. Type Parameters Name Description TKey | Improve this Doc View Source SetAbsoluteExpiration<TKey>(ICacheEntry<TKey>, DateTimeOffset) Sets an absolute expiration date for the cache entry. Declaration public static ICacheEntry<TKey> SetAbsoluteExpiration<TKey>(this ICacheEntry<TKey> entry, DateTimeOffset absolute) Parameters Type Name Description ICacheEntry <TKey> entry The ICacheEntry<TKey> . DateTimeOffset absolute A representing the expiration time in absolute terms. Returns Type Description ICacheEntry <TKey> The ICacheEntry<TKey> for chaining. Type Parameters Name Description TKey | Improve this Doc View Source SetAbsoluteExpiration<TKey>(ICacheEntry<TKey>, TimeSpan) Sets an absolute expiration time, relative to now. Declaration public static ICacheEntry<TKey> SetAbsoluteExpiration<TKey>(this ICacheEntry<TKey> entry, TimeSpan relative) Parameters Type Name Description ICacheEntry <TKey> entry The ICacheEntry<TKey> . TimeSpan relative The representing the expiration time relative to now. Returns Type Description ICacheEntry <TKey> The ICacheEntry<TKey> for chaining. Type Parameters Name Description TKey | Improve this Doc View Source SetOptions<TKey>(ICacheEntry<TKey>, MemoryCacheEntryOptions<TKey>) Applies the values of an existing MemoryCacheEntryOptions<TKey> to the entry. Declaration public static ICacheEntry<TKey> SetOptions<TKey>(this ICacheEntry<TKey> entry, MemoryCacheEntryOptions<TKey> options) Parameters Type Name Description ICacheEntry <TKey> entry The ICacheEntry<TKey> . MemoryCacheEntryOptions <TKey> options Set the values of these options on the entry . Returns Type Description ICacheEntry <TKey> The ICacheEntry<TKey> for chaining. Type Parameters Name Description TKey | Improve this Doc View Source SetPriority<TKey>(ICacheEntry<TKey>, CacheItemPriority) Sets the priority for keeping the cache entry in the cache during a memory pressure tokened cleanup. Declaration public static ICacheEntry<TKey> SetPriority<TKey>(this ICacheEntry<TKey> entry, CacheItemPriority priority) Parameters Type Name Description ICacheEntry <TKey> entry The entry to set the priority for. CacheItemPriority priority The CacheItemPriority to set on the entry. Returns Type Description ICacheEntry <TKey> The ICacheEntry<TKey> for chaining. Type Parameters Name Description TKey | Improve this Doc View Source SetSize<TKey>(ICacheEntry<TKey>, Int64) Sets the size of the cache entry value. Declaration public static ICacheEntry<TKey> SetSize<TKey>(this ICacheEntry<TKey> entry, long size) Parameters Type Name Description ICacheEntry <TKey> entry The ICacheEntry<TKey> . System.Int64 size The size to set on the entry . Returns Type Description ICacheEntry <TKey> The ICacheEntry<TKey> for chaining. Type Parameters Name Description TKey | Improve this Doc View Source SetSlidingExpiration<TKey>(ICacheEntry<TKey>, TimeSpan) Sets how long the cache entry can be inactive (e.g. not accessed) before it will be removed. This will not extend the entry lifetime beyond the absolute expiration (if set). Declaration public static ICacheEntry<TKey> SetSlidingExpiration<TKey>(this ICacheEntry<TKey> entry, TimeSpan offset) Parameters Type Name Description ICacheEntry <TKey> entry The ICacheEntry<TKey> . TimeSpan offset A representing a sliding expiration. Returns Type Description ICacheEntry <TKey> The ICacheEntry<TKey> for chaining. Type Parameters Name Description TKey | Improve this Doc View Source SetValue<TKey>(ICacheEntry<TKey>, Nullable<Object>) Sets the value of the cache entry. Declaration public static ICacheEntry<TKey> SetValue<TKey>(this ICacheEntry<TKey> entry, object? value) Parameters Type Name Description ICacheEntry <TKey> entry The ICacheEntry<TKey> . System.Nullable < System.Object > value The value to set on the entry . Returns Type Description ICacheEntry <TKey> The ICacheEntry<TKey> for chaining. Type Parameters Name Description TKey"
  },
  "api/LinqToDB.Common.Internal.Cache.CacheExtensions.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.CacheExtensions.html",
    "title": "Class CacheExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class CacheExtensions Inheritance System.Object CacheExtensions Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public static class CacheExtensions : object Methods | Improve this Doc View Source Get<TKey>(IMemoryCache<TKey>, TKey) Declaration public static object? Get<TKey>(this IMemoryCache<TKey> cache, TKey key) Parameters Type Name Description IMemoryCache <TKey> cache TKey key Returns Type Description System.Nullable < System.Object > Type Parameters Name Description TKey | Improve this Doc View Source Get<TKey, TItem>(IMemoryCache<TKey>, TKey) Declaration public static TItem Get<TKey, TItem>(this IMemoryCache<TKey> cache, TKey key) Parameters Type Name Description IMemoryCache <TKey> cache TKey key Returns Type Description TItem Type Parameters Name Description TKey TItem | Improve this Doc View Source GetOrCreate<TKey, TItem>(IMemoryCache<TKey>, TKey, Func<ICacheEntry<TKey>, TItem>) Declaration public static TItem GetOrCreate<TKey, TItem>(this IMemoryCache<TKey> cache, TKey key, Func<ICacheEntry<TKey>, TItem> factory) Parameters Type Name Description IMemoryCache <TKey> cache TKey key Func < ICacheEntry <TKey>, TItem> factory Returns Type Description TItem Type Parameters Name Description TKey TItem | Improve this Doc View Source GetOrCreate<TItem, TKey, TContext>(IMemoryCache<TKey>, TKey, TContext, Func<ICacheEntry<TKey>, TContext, TItem>) Declaration public static TItem GetOrCreate<TItem, TKey, TContext>(this IMemoryCache<TKey> cache, TKey key, TContext context, Func<ICacheEntry<TKey>, TContext, TItem> factory) Parameters Type Name Description IMemoryCache <TKey> cache TKey key TContext context Func < ICacheEntry <TKey>, TContext, TItem> factory Returns Type Description TItem Type Parameters Name Description TItem TKey TContext | Improve this Doc View Source GetOrCreate<TItem, TKey, TDerivedKey, TContext>(IMemoryCache<TKey>, TDerivedKey, TContext, Func<ICacheEntry<TKey>, TDerivedKey, TContext, TItem>) Declaration public static TItem GetOrCreate<TItem, TKey, TDerivedKey, TContext>(this IMemoryCache<TKey> cache, TDerivedKey key, TContext context, Func<ICacheEntry<TKey>, TDerivedKey, TContext, TItem> factory) where TDerivedKey : TKey Parameters Type Name Description IMemoryCache <TKey> cache TDerivedKey key TContext context Func < ICacheEntry <TKey>, TDerivedKey, TContext, TItem> factory Returns Type Description TItem Type Parameters Name Description TItem TKey TDerivedKey TContext | Improve this Doc View Source GetOrCreateAsync<TKey, TItem>(IMemoryCache<TKey>, TKey, Func<ICacheEntry<TKey>, Task<TItem>>) Declaration public static async Task<TItem> GetOrCreateAsync<TKey, TItem>(this IMemoryCache<TKey> cache, TKey key, Func<ICacheEntry<TKey>, Task<TItem>> factory) Parameters Type Name Description IMemoryCache <TKey> cache TKey key Func < ICacheEntry <TKey>, Task <TItem>> factory Returns Type Description Task <TItem> Type Parameters Name Description TKey TItem | Improve this Doc View Source Set<TKey, TItem>(IMemoryCache<TKey>, TKey, TItem) Declaration public static TItem Set<TKey, TItem>(this IMemoryCache<TKey> cache, TKey key, TItem value) Parameters Type Name Description IMemoryCache <TKey> cache TKey key TItem value Returns Type Description TItem Type Parameters Name Description TKey TItem | Improve this Doc View Source Set<TKey, TItem>(IMemoryCache<TKey>, TKey, TItem, DateTimeOffset) Declaration public static TItem Set<TKey, TItem>(this IMemoryCache<TKey> cache, TKey key, TItem value, DateTimeOffset absoluteExpiration) Parameters Type Name Description IMemoryCache <TKey> cache TKey key TItem value DateTimeOffset absoluteExpiration Returns Type Description TItem Type Parameters Name Description TKey TItem | Improve this Doc View Source Set<TKey, TItem>(IMemoryCache<TKey>, TKey, TItem, IChangeToken) Declaration public static TItem Set<TKey, TItem>(this IMemoryCache<TKey> cache, TKey key, TItem value, IChangeToken expirationToken) Parameters Type Name Description IMemoryCache <TKey> cache TKey key TItem value IChangeToken expirationToken Returns Type Description TItem Type Parameters Name Description TKey TItem | Improve this Doc View Source Set<TKey, TItem>(IMemoryCache<TKey>, TKey, TItem, MemoryCacheEntryOptions<TKey>) Declaration public static TItem Set<TKey, TItem>(this IMemoryCache<TKey> cache, TKey key, TItem value, MemoryCacheEntryOptions<TKey> options) Parameters Type Name Description IMemoryCache <TKey> cache TKey key TItem value MemoryCacheEntryOptions <TKey> options Returns Type Description TItem Type Parameters Name Description TKey TItem | Improve this Doc View Source Set<TKey, TItem>(IMemoryCache<TKey>, TKey, TItem, TimeSpan) Declaration public static TItem Set<TKey, TItem>(this IMemoryCache<TKey> cache, TKey key, TItem value, TimeSpan absoluteExpirationRelativeToNow) Parameters Type Name Description IMemoryCache <TKey> cache TKey key TItem value TimeSpan absoluteExpirationRelativeToNow Returns Type Description TItem Type Parameters Name Description TKey TItem | Improve this Doc View Source TryGetValue<TKey, TItem>(IMemoryCache<TKey>, TKey, out TItem) Declaration public static bool TryGetValue<TKey, TItem>(this IMemoryCache<TKey> cache, TKey key, out TItem value) Parameters Type Name Description IMemoryCache <TKey> cache TKey key TItem value Returns Type Description System.Boolean Type Parameters Name Description TKey TItem"
  },
  "api/LinqToDB.Common.Internal.Cache.CacheItemPriority.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.CacheItemPriority.html",
    "title": "Enum CacheItemPriority | Linq To DB (aka linq2db)",
    "keywords": "Enum CacheItemPriority Specifies how items are prioritized for preservation during a memory pressure triggered cleanup. Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public enum CacheItemPriority : int Fields Name Description High Low NeverRemove Normal Extension Methods Map.DeepCopy<CacheItemPriority>() Sql.IsDistinctFrom<CacheItemPriority>(CacheItemPriority) Sql.IsDistinctFrom<CacheItemPriority>(Nullable<CacheItemPriority>) Sql.IsNotDistinctFrom<CacheItemPriority>(CacheItemPriority) Sql.IsNotDistinctFrom<CacheItemPriority>(Nullable<CacheItemPriority>) SqlExtensions.In<CacheItemPriority>(IEnumerable<CacheItemPriority>) SqlExtensions.In<CacheItemPriority>(IQueryable<CacheItemPriority>) SqlExtensions.In<CacheItemPriority>(CacheItemPriority[]) SqlExtensions.In<CacheItemPriority>(CacheItemPriority, CacheItemPriority) SqlExtensions.In<CacheItemPriority>(CacheItemPriority, CacheItemPriority, CacheItemPriority) SqlExtensions.NotIn<CacheItemPriority>(IEnumerable<CacheItemPriority>) SqlExtensions.NotIn<CacheItemPriority>(IQueryable<CacheItemPriority>) SqlExtensions.NotIn<CacheItemPriority>(CacheItemPriority[]) SqlExtensions.NotIn<CacheItemPriority>(CacheItemPriority, CacheItemPriority) SqlExtensions.NotIn<CacheItemPriority>(CacheItemPriority, CacheItemPriority, CacheItemPriority)"
  },
  "api/LinqToDB.Common.Internal.Cache.EvictionReason.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.EvictionReason.html",
    "title": "Enum EvictionReason | Linq To DB (aka linq2db)",
    "keywords": "Enum EvictionReason Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public enum EvictionReason : int Fields Name Description Capacity Overflow Expired Timed out None Removed Manually Replaced Overwritten TokenExpired Event Extension Methods Map.DeepCopy<EvictionReason>() Sql.IsDistinctFrom<EvictionReason>(EvictionReason) Sql.IsDistinctFrom<EvictionReason>(Nullable<EvictionReason>) Sql.IsNotDistinctFrom<EvictionReason>(EvictionReason) Sql.IsNotDistinctFrom<EvictionReason>(Nullable<EvictionReason>) SqlExtensions.In<EvictionReason>(IEnumerable<EvictionReason>) SqlExtensions.In<EvictionReason>(IQueryable<EvictionReason>) SqlExtensions.In<EvictionReason>(EvictionReason[]) SqlExtensions.In<EvictionReason>(EvictionReason, EvictionReason) SqlExtensions.In<EvictionReason>(EvictionReason, EvictionReason, EvictionReason) SqlExtensions.NotIn<EvictionReason>(IEnumerable<EvictionReason>) SqlExtensions.NotIn<EvictionReason>(IQueryable<EvictionReason>) SqlExtensions.NotIn<EvictionReason>(EvictionReason[]) SqlExtensions.NotIn<EvictionReason>(EvictionReason, EvictionReason) SqlExtensions.NotIn<EvictionReason>(EvictionReason, EvictionReason, EvictionReason)"
  },
  "api/LinqToDB.Common.Internal.Cache.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.html",
    "title": "Namespace LinqToDB.Common.Internal.Cache | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Common.Internal.Cache Classes CacheEntryExtensions CacheExtensions MemoryCache<TKey> An implementation of IMemoryCache<TKey> using a dictionary to store its entries. MemoryCacheEntryExtensions MemoryCacheEntryOptions<TKey> Represents the cache options applied to an entry of the IMemoryCache<TKey> instance. MemoryCacheOptions PostEvictionCallbackRegistration<TKey> SystemClock Provides access to the normal system clock. Interfaces ICacheEntry<TKey> Represents an entry in the IMemoryCache<TKey> implementation. IChangeToken Propagates notifications that a change has occurred. IMemoryCache<TKey> Represents a local in-memory cache whose values are not serialized. ISystemClock Abstracts the system clock to facilitate testing. Enums CacheItemPriority Specifies how items are prioritized for preservation during a memory pressure triggered cleanup. EvictionReason Delegates PostEvictionDelegate<TKey> Signature of the callback which gets called when a cache entry expires."
  },
  "api/LinqToDB.Common.Internal.Cache.ICacheEntry-1.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.ICacheEntry-1.html",
    "title": "Interface ICacheEntry<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Interface ICacheEntry<TKey> Represents an entry in the IMemoryCache<TKey> implementation. Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public interface ICacheEntry<TKey> Type Parameters Name Description TKey Properties | Improve this Doc View Source AbsoluteExpiration Gets or sets an absolute expiration date for the cache entry. Declaration DateTimeOffset? AbsoluteExpiration { get; set; } Property Value Type Description System.Nullable < DateTimeOffset > | Improve this Doc View Source AbsoluteExpirationRelativeToNow Gets or sets an absolute expiration time, relative to now. Declaration TimeSpan? AbsoluteExpirationRelativeToNow { get; set; } Property Value Type Description System.Nullable < TimeSpan > | Improve this Doc View Source ExpirationTokens Gets the IChangeToken instances which cause the cache entry to expire. Declaration IList<IChangeToken> ExpirationTokens { get; } Property Value Type Description IList < IChangeToken > | Improve this Doc View Source Key Gets the key of the cache entry. Declaration TKey Key { get; } Property Value Type Description TKey | Improve this Doc View Source PostEvictionCallbacks Gets or sets the callbacks will be fired after the cache entry is evicted from the cache. Declaration IList<PostEvictionCallbackRegistration<TKey>> PostEvictionCallbacks { get; } Property Value Type Description IList < PostEvictionCallbackRegistration <TKey>> | Improve this Doc View Source Priority Gets or sets the priority for keeping the cache entry in the cache during a cleanup. The default is Normal . Declaration CacheItemPriority Priority { get; set; } Property Value Type Description CacheItemPriority | Improve this Doc View Source Size Gets or set the size of the cache entry value. Declaration long? Size { get; set; } Property Value Type Description System.Nullable < System.Int64 > | Improve this Doc View Source SlidingExpiration Gets or sets how long a cache entry can be inactive (e.g. not accessed) before it will be removed. This will not extend the entry lifetime beyond the absolute expiration (if set). Declaration TimeSpan? SlidingExpiration { get; set; } Property Value Type Description System.Nullable < TimeSpan > | Improve this Doc View Source Value Gets or set the value of the cache entry. Declaration object? Value { get; set; } Property Value Type Description System.Nullable < System.Object > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) CacheEntryExtensions.SetPriority<TKey>(ICacheEntry<TKey>, CacheItemPriority) CacheEntryExtensions.AddExpirationToken<TKey>(ICacheEntry<TKey>, IChangeToken) CacheEntryExtensions.SetAbsoluteExpiration<TKey>(ICacheEntry<TKey>, TimeSpan) CacheEntryExtensions.SetAbsoluteExpiration<TKey>(ICacheEntry<TKey>, DateTimeOffset) CacheEntryExtensions.SetSlidingExpiration<TKey>(ICacheEntry<TKey>, TimeSpan) CacheEntryExtensions.RegisterPostEvictionCallback<TKey>(ICacheEntry<TKey>, PostEvictionDelegate<TKey>) CacheEntryExtensions.RegisterPostEvictionCallback<TKey>(ICacheEntry<TKey>, PostEvictionDelegate<TKey>, Nullable<Object>) CacheEntryExtensions.SetValue<TKey>(ICacheEntry<TKey>, Nullable<Object>) CacheEntryExtensions.SetSize<TKey>(ICacheEntry<TKey>, Int64) CacheEntryExtensions.SetOptions<TKey>(ICacheEntry<TKey>, MemoryCacheEntryOptions<TKey>)"
  },
  "api/LinqToDB.Common.Internal.Cache.IChangeToken.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.IChangeToken.html",
    "title": "Interface IChangeToken | Linq To DB (aka linq2db)",
    "keywords": "Interface IChangeToken Propagates notifications that a change has occurred. Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public interface IChangeToken Properties | Improve this Doc View Source ActiveChangeCallbacks Indicates if this token will pro-actively raise callbacks. If false , the token consumer must poll HasChanged to detect changes. Declaration bool ActiveChangeCallbacks { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasChanged Gets a value that indicates if a change has occurred. Declaration bool HasChanged { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source RegisterChangeCallback(Action<Object>, Object) Registers for a callback that will be invoked when the entry has changed. HasChanged MUST be set before the callback is invoked. Declaration IDisposable RegisterChangeCallback(Action<object> callback, object state) Parameters Type Name Description Action < System.Object > callback The to invoke. System.Object state State to be passed into the callback. Returns Type Description IDisposable An that is used to unregister the callback. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.Internal.Cache.IMemoryCache-1.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.IMemoryCache-1.html",
    "title": "Interface IMemoryCache<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Interface IMemoryCache<TKey> Represents a local in-memory cache whose values are not serialized. Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public interface IMemoryCache<TKey> Type Parameters Name Description TKey Methods | Improve this Doc View Source CreateEntry(TKey) Create or overwrite an entry in the cache. Declaration ICacheEntry<TKey> CreateEntry(TKey key) Parameters Type Name Description TKey key An object identifying the entry. Returns Type Description ICacheEntry <TKey> The newly created ICacheEntry<TKey> instance. | Improve this Doc View Source Remove(TKey) Removes the object associated with the given key. Declaration void Remove(TKey key) Parameters Type Name Description TKey key An object identifying the entry. | Improve this Doc View Source TryGetValue(TKey, out Nullable<Object>) Gets the item associated with this key if present. Declaration bool TryGetValue(TKey key, out object? value) Parameters Type Name Description TKey key An object identifying the requested entry. System.Nullable < System.Object > value The located value or null. Returns Type Description System.Boolean True if the key was found. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) CacheExtensions.Get<TKey>(IMemoryCache<TKey>, TKey) CacheExtensions.Get<TKey, TItem>(IMemoryCache<TKey>, TKey) CacheExtensions.TryGetValue<TKey, TItem>(IMemoryCache<TKey>, TKey, out TItem) CacheExtensions.Set<TKey, TItem>(IMemoryCache<TKey>, TKey, TItem) CacheExtensions.Set<TKey, TItem>(IMemoryCache<TKey>, TKey, TItem, DateTimeOffset) CacheExtensions.Set<TKey, TItem>(IMemoryCache<TKey>, TKey, TItem, TimeSpan) CacheExtensions.Set<TKey, TItem>(IMemoryCache<TKey>, TKey, TItem, IChangeToken) CacheExtensions.Set<TKey, TItem>(IMemoryCache<TKey>, TKey, TItem, MemoryCacheEntryOptions<TKey>) CacheExtensions.GetOrCreate<TKey, TItem>(IMemoryCache<TKey>, TKey, Func<ICacheEntry<TKey>, TItem>) CacheExtensions.GetOrCreate<TItem, TKey, TContext>(IMemoryCache<TKey>, TKey, TContext, Func<ICacheEntry<TKey>, TContext, TItem>) CacheExtensions.GetOrCreate<TItem, TKey, TDerivedKey, TContext>(IMemoryCache<TKey>, TDerivedKey, TContext, Func<ICacheEntry<TKey>, TDerivedKey, TContext, TItem>) CacheExtensions.GetOrCreateAsync<TKey, TItem>(IMemoryCache<TKey>, TKey, Func<ICacheEntry<TKey>, Task<TItem>>)"
  },
  "api/LinqToDB.Common.Internal.Cache.ISystemClock.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.ISystemClock.html",
    "title": "Interface ISystemClock | Linq To DB (aka linq2db)",
    "keywords": "Interface ISystemClock Abstracts the system clock to facilitate testing. Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public interface ISystemClock Properties | Improve this Doc View Source UtcNow Retrieves the current system time in UTC. Declaration DateTimeOffset UtcNow { get; } Property Value Type Description DateTimeOffset Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.Internal.Cache.MemoryCache-1.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.MemoryCache-1.html",
    "title": "Class MemoryCache<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class MemoryCache<TKey> An implementation of IMemoryCache<TKey> using a dictionary to store its entries. Inheritance System.Object MemoryCache<TKey> Implements IMemoryCache <TKey> IDisposable Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public class MemoryCache<TKey> : object, IMemoryCache<TKey> Type Parameters Name Description TKey Constructors | Improve this Doc View Source MemoryCache(MemoryCacheOptions) Creates a new MemoryCache<TKey> instance. Declaration public MemoryCache(MemoryCacheOptions optionsAccessor) Parameters Type Name Description MemoryCacheOptions optionsAccessor The options of the cache. Properties | Improve this Doc View Source Count Gets the count of the current entries for diagnostic purposes. Declaration public int Count { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Remove all cache entries. Declaration public void Clear() | Improve this Doc View Source Compact(Double) Declaration public void Compact(double percentage) Parameters Type Name Description System.Double percentage | Improve this Doc View Source CreateEntry(TKey) Create or overwrite an entry in the cache. Declaration public ICacheEntry<TKey> CreateEntry(TKey key) Parameters Type Name Description TKey key An object identifying the entry. Returns Type Description ICacheEntry <TKey> The newly created ICacheEntry<TKey> instance. | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Finalize() Cleans up the background collection events. Declaration protected void Finalize() | Improve this Doc View Source Remove(TKey) Removes the object associated with the given key. Declaration public void Remove(TKey key) Parameters Type Name Description TKey key An object identifying the entry. | Improve this Doc View Source TryGetValue(TKey, out Nullable<Object>) Gets the item associated with this key if present. Declaration public bool TryGetValue(TKey key, out object? value) Parameters Type Name Description TKey key An object identifying the requested entry. System.Nullable < System.Object > value The located value or null. Returns Type Description System.Boolean True if the key was found. Implements IMemoryCache<TKey> IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.Internal.Cache.MemoryCacheEntryExtensions.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.MemoryCacheEntryExtensions.html",
    "title": "Class MemoryCacheEntryExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class MemoryCacheEntryExtensions Inheritance System.Object MemoryCacheEntryExtensions Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public static class MemoryCacheEntryExtensions : object Methods | Improve this Doc View Source AddExpirationToken<TKey>(MemoryCacheEntryOptions<TKey>, IChangeToken) Expire the cache entry if the given IChangeToken expires. Declaration public static MemoryCacheEntryOptions<TKey> AddExpirationToken<TKey>(this MemoryCacheEntryOptions<TKey> options, IChangeToken expirationToken) Parameters Type Name Description MemoryCacheEntryOptions <TKey> options The MemoryCacheEntryOptions<TKey> . IChangeToken expirationToken The IChangeToken that causes the cache entry to expire. Returns Type Description MemoryCacheEntryOptions <TKey> The MemoryCacheEntryOptions<TKey> so that additional calls can be chained. Type Parameters Name Description TKey | Improve this Doc View Source RegisterPostEvictionCallback<TKey>(MemoryCacheEntryOptions<TKey>, PostEvictionDelegate<TKey>) The given callback will be fired after the cache entry is evicted from the cache. Declaration public static MemoryCacheEntryOptions<TKey> RegisterPostEvictionCallback<TKey>(this MemoryCacheEntryOptions<TKey> options, PostEvictionDelegate<TKey> callback) Parameters Type Name Description MemoryCacheEntryOptions <TKey> options The MemoryCacheEntryOptions<TKey> . PostEvictionDelegate <TKey> callback The callback to register for calling after an entry is evicted. Returns Type Description MemoryCacheEntryOptions <TKey> The MemoryCacheEntryOptions<TKey> so that additional calls can be chained. Type Parameters Name Description TKey | Improve this Doc View Source RegisterPostEvictionCallback<TKey>(MemoryCacheEntryOptions<TKey>, PostEvictionDelegate<TKey>, Nullable<Object>) The given callback will be fired after the cache entry is evicted from the cache. Declaration public static MemoryCacheEntryOptions<TKey> RegisterPostEvictionCallback<TKey>(this MemoryCacheEntryOptions<TKey> options, PostEvictionDelegate<TKey> callback, object? state) Parameters Type Name Description MemoryCacheEntryOptions <TKey> options The MemoryCacheEntryOptions<TKey> . PostEvictionDelegate <TKey> callback The callback to register for calling after an entry is evicted. System.Nullable < System.Object > state The state to pass to the callback. Returns Type Description MemoryCacheEntryOptions <TKey> The MemoryCacheEntryOptions<TKey> so that additional calls can be chained. Type Parameters Name Description TKey | Improve this Doc View Source SetAbsoluteExpiration<TKey>(MemoryCacheEntryOptions<TKey>, DateTimeOffset) Sets an absolute expiration date for the cache entry. Declaration public static MemoryCacheEntryOptions<TKey> SetAbsoluteExpiration<TKey>(this MemoryCacheEntryOptions<TKey> options, DateTimeOffset absolute) Parameters Type Name Description MemoryCacheEntryOptions <TKey> options The MemoryCacheEntryOptions<TKey> . DateTimeOffset absolute The expiration time, in absolute terms. Returns Type Description MemoryCacheEntryOptions <TKey> The MemoryCacheEntryOptions<TKey> so that additional calls can be chained. Type Parameters Name Description TKey | Improve this Doc View Source SetAbsoluteExpiration<TKey>(MemoryCacheEntryOptions<TKey>, TimeSpan) Sets an absolute expiration time, relative to now. Declaration public static MemoryCacheEntryOptions<TKey> SetAbsoluteExpiration<TKey>(this MemoryCacheEntryOptions<TKey> options, TimeSpan relative) Parameters Type Name Description MemoryCacheEntryOptions <TKey> options The MemoryCacheEntryOptions<TKey> . TimeSpan relative The expiration time, relative to now. Returns Type Description MemoryCacheEntryOptions <TKey> The MemoryCacheEntryOptions<TKey> so that additional calls can be chained. Type Parameters Name Description TKey | Improve this Doc View Source SetPriority<TKey>(MemoryCacheEntryOptions<TKey>, CacheItemPriority) Sets the priority for keeping the cache entry in the cache during a memory pressure tokened cleanup. Declaration public static MemoryCacheEntryOptions<TKey> SetPriority<TKey>(this MemoryCacheEntryOptions<TKey> options, CacheItemPriority priority) Parameters Type Name Description MemoryCacheEntryOptions <TKey> options The option on which to set the priority. CacheItemPriority priority The CacheItemPriority to set on the option. Returns Type Description MemoryCacheEntryOptions <TKey> The MemoryCacheEntryOptions<TKey> so that additional calls can be chained. Type Parameters Name Description TKey | Improve this Doc View Source SetSize<TKey>(MemoryCacheEntryOptions<TKey>, Int64) Sets the size of the cache entry value. Declaration public static MemoryCacheEntryOptions<TKey> SetSize<TKey>(this MemoryCacheEntryOptions<TKey> options, long size) Parameters Type Name Description MemoryCacheEntryOptions <TKey> options The options to set the entry size on. System.Int64 size The size to set on the MemoryCacheEntryOptions<TKey> . Returns Type Description MemoryCacheEntryOptions <TKey> The MemoryCacheEntryOptions<TKey> so that additional calls can be chained. Type Parameters Name Description TKey | Improve this Doc View Source SetSlidingExpiration<TKey>(MemoryCacheEntryOptions<TKey>, TimeSpan) Sets how long the cache entry can be inactive (e.g. not accessed) before it will be removed. This will not extend the entry lifetime beyond the absolute expiration (if set). Declaration public static MemoryCacheEntryOptions<TKey> SetSlidingExpiration<TKey>(this MemoryCacheEntryOptions<TKey> options, TimeSpan offset) Parameters Type Name Description MemoryCacheEntryOptions <TKey> options The MemoryCacheEntryOptions<TKey> . TimeSpan offset The sliding expiration time. Returns Type Description MemoryCacheEntryOptions <TKey> The MemoryCacheEntryOptions<TKey> so that additional calls can be chained. Type Parameters Name Description TKey"
  },
  "api/LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions-1.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions-1.html",
    "title": "Class MemoryCacheEntryOptions<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class MemoryCacheEntryOptions<TKey> Represents the cache options applied to an entry of the IMemoryCache<TKey> instance. Inheritance System.Object MemoryCacheEntryOptions<TKey> Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public class MemoryCacheEntryOptions<TKey> : object Type Parameters Name Description TKey Properties | Improve this Doc View Source AbsoluteExpiration Gets or sets an absolute expiration date for the cache entry. Declaration public DateTimeOffset? AbsoluteExpiration { get; set; } Property Value Type Description System.Nullable < DateTimeOffset > | Improve this Doc View Source AbsoluteExpirationRelativeToNow Gets or sets an absolute expiration time, relative to now. Declaration public TimeSpan? AbsoluteExpirationRelativeToNow { get; set; } Property Value Type Description System.Nullable < TimeSpan > | Improve this Doc View Source ExpirationTokens Gets the IChangeToken instances which cause the cache entry to expire. Declaration public IList<IChangeToken> ExpirationTokens { get; } Property Value Type Description IList < IChangeToken > | Improve this Doc View Source PostEvictionCallbacks Gets or sets the callbacks will be fired after the cache entry is evicted from the cache. Declaration public IList<PostEvictionCallbackRegistration<TKey>> PostEvictionCallbacks { get; } Property Value Type Description IList < PostEvictionCallbackRegistration <TKey>> | Improve this Doc View Source Priority Gets or sets the priority for keeping the cache entry in the cache during a memory pressure triggered cleanup. The default is Normal . Declaration public CacheItemPriority Priority { get; set; } Property Value Type Description CacheItemPriority | Improve this Doc View Source Size Gets or sets the size of the cache entry value. Declaration public long? Size { get; set; } Property Value Type Description System.Nullable < System.Int64 > | Improve this Doc View Source SlidingExpiration Gets or sets how long a cache entry can be inactive (e.g. not accessed) before it will be removed. This will not extend the entry lifetime beyond the absolute expiration (if set). Declaration public TimeSpan? SlidingExpiration { get; set; } Property Value Type Description System.Nullable < TimeSpan > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) MemoryCacheEntryExtensions.SetPriority<TKey>(MemoryCacheEntryOptions<TKey>, CacheItemPriority) MemoryCacheEntryExtensions.SetSize<TKey>(MemoryCacheEntryOptions<TKey>, Int64) MemoryCacheEntryExtensions.AddExpirationToken<TKey>(MemoryCacheEntryOptions<TKey>, IChangeToken) MemoryCacheEntryExtensions.SetAbsoluteExpiration<TKey>(MemoryCacheEntryOptions<TKey>, TimeSpan) MemoryCacheEntryExtensions.SetAbsoluteExpiration<TKey>(MemoryCacheEntryOptions<TKey>, DateTimeOffset) MemoryCacheEntryExtensions.SetSlidingExpiration<TKey>(MemoryCacheEntryOptions<TKey>, TimeSpan) MemoryCacheEntryExtensions.RegisterPostEvictionCallback<TKey>(MemoryCacheEntryOptions<TKey>, PostEvictionDelegate<TKey>) MemoryCacheEntryExtensions.RegisterPostEvictionCallback<TKey>(MemoryCacheEntryOptions<TKey>, PostEvictionDelegate<TKey>, Nullable<Object>)"
  },
  "api/LinqToDB.Common.Internal.Cache.MemoryCacheOptions.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.MemoryCacheOptions.html",
    "title": "Class MemoryCacheOptions | Linq To DB (aka linq2db)",
    "keywords": "Class MemoryCacheOptions Inheritance System.Object MemoryCacheOptions Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public class MemoryCacheOptions : object Properties | Improve this Doc View Source Clock Declaration public ISystemClock Clock { get; set; } Property Value Type Description ISystemClock | Improve this Doc View Source CompactionPercentage Gets or sets the amount to compact the cache by when the maximum size is exceeded. Declaration public double CompactionPercentage { get; set; } Property Value Type Description System.Double | Improve this Doc View Source ExpirationScanFrequency Gets or sets the minimum length of time between successive scans for expired items. Declaration public TimeSpan ExpirationScanFrequency { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source SizeLimit Gets or sets the maximum size of the cache. Declaration public long? SizeLimit { get; set; } Property Value Type Description System.Nullable < System.Int64 > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.Internal.Cache.PostEvictionCallbackRegistration-1.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.PostEvictionCallbackRegistration-1.html",
    "title": "Class PostEvictionCallbackRegistration<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class PostEvictionCallbackRegistration<TKey> Inheritance System.Object PostEvictionCallbackRegistration<TKey> Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public class PostEvictionCallbackRegistration<TKey> : object Type Parameters Name Description TKey Properties | Improve this Doc View Source EvictionCallback Declaration public PostEvictionDelegate<TKey> EvictionCallback { get; set; } Property Value Type Description PostEvictionDelegate <TKey> | Improve this Doc View Source State Declaration public object? State { get; set; } Property Value Type Description System.Nullable < System.Object > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.Internal.Cache.PostEvictionDelegate-1.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.PostEvictionDelegate-1.html",
    "title": "Delegate PostEvictionDelegate<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Delegate PostEvictionDelegate<TKey> Signature of the callback which gets called when a cache entry expires. Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public delegate void PostEvictionDelegate<TKey>(TKey key, object? value, EvictionReason reason, object? state); Parameters Type Name Description TKey key The key of the entry being evicted. System.Nullable < System.Object > value The value of the entry being evicted. EvictionReason reason The EvictionReason . System.Nullable < System.Object > state The information that was passed when registering the callback. Type Parameters Name Description TKey Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.Internal.Cache.SystemClock.html": {
    "href": "api/LinqToDB.Common.Internal.Cache.SystemClock.html",
    "title": "Class SystemClock | Linq To DB (aka linq2db)",
    "keywords": "Class SystemClock Provides access to the normal system clock. Inheritance System.Object SystemClock Implements ISystemClock Namespace : LinqToDB.Common.Internal.Cache Assembly : linq2db.dll Syntax public class SystemClock : object, ISystemClock Properties | Improve this Doc View Source UtcNow Retrieves the current system time in UTC. Declaration public DateTimeOffset UtcNow { get; } Property Value Type Description DateTimeOffset Implements ISystemClock Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.Internal.html": {
    "href": "api/LinqToDB.Common.Internal.html",
    "title": "Namespace LinqToDB.Common.Internal | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Common.Internal Classes MethodInfoExtensions TypeExtensions ValueComparer ValueComparer<T>"
  },
  "api/LinqToDB.Common.Internal.MethodInfoExtensions.html": {
    "href": "api/LinqToDB.Common.Internal.MethodInfoExtensions.html",
    "title": "Class MethodInfoExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class MethodInfoExtensions Inheritance System.Object MethodInfoExtensions Namespace : LinqToDB.Common.Internal Assembly : linq2db.dll Syntax public static class MethodInfoExtensions : object Methods | Improve this Doc View Source DisplayName(MethodInfo, Boolean, Boolean) Declaration public static string DisplayName(this MethodInfo methodInfo, bool fullName = true, bool multiline = true) Parameters Type Name Description MethodInfo methodInfo System.Boolean fullName System.Boolean multiline Returns Type Description System.String | Improve this Doc View Source ShortDisplayName(MethodInfo) Declaration public static string ShortDisplayName(this MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo Returns Type Description System.String"
  },
  "api/LinqToDB.Common.Internal.TypeExtensions.html": {
    "href": "api/LinqToDB.Common.Internal.TypeExtensions.html",
    "title": "Class TypeExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class TypeExtensions Inheritance System.Object TypeExtensions Namespace : LinqToDB.Common.Internal Assembly : linq2db.dll Syntax public static class TypeExtensions : object Methods | Improve this Doc View Source DisplayName(Type, Boolean) Declaration public static string DisplayName(this Type type, bool fullName = true) Parameters Type Name Description Type type System.Boolean fullName Returns Type Description System.String | Improve this Doc View Source GetFieldInfo(Type, String) Declaration public static FieldInfo GetFieldInfo(this Type type, string fieldName) Parameters Type Name Description Type type System.String fieldName Returns Type Description FieldInfo | Improve this Doc View Source GetNamespaces(Type) Declaration public static IEnumerable<string> GetNamespaces(this Type type) Parameters Type Name Description Type type Returns Type Description IEnumerable < System.String > | Improve this Doc View Source IsDefaultValue(Type, Nullable<Object>) Declaration public static bool IsDefaultValue(this Type type, object? value) Parameters Type Name Description Type type System.Nullable < System.Object > value Returns Type Description System.Boolean | Improve this Doc View Source IsInteger(Type) Declaration public static bool IsInteger(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean | Improve this Doc View Source IsNullableType(Type) Returns true if type is reference type or . Declaration public static bool IsNullableType(this Type type) Parameters Type Name Description Type type Type to test. Returns Type Description System.Boolean true if type is reference type or . | Improve this Doc View Source IsNumericType(Nullable<Type>) Declaration public static bool IsNumericType(this Type? type) Parameters Type Name Description System.Nullable < Type > type Returns Type Description System.Boolean | Improve this Doc View Source IsSignedInteger(Type) Declaration public static bool IsSignedInteger(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean | Improve this Doc View Source IsSignedType(Nullable<Type>) Declaration public static bool IsSignedType(this Type? type) Parameters Type Name Description System.Nullable < Type > type Returns Type Description System.Boolean | Improve this Doc View Source IsTupleType(Type) Declaration public static bool IsTupleType(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean | Improve this Doc View Source ShortDisplayName(Type) Declaration public static string ShortDisplayName(this Type type) Parameters Type Name Description Type type Returns Type Description System.String | Improve this Doc View Source UnwrapNullableType(Type) Declaration public static Type UnwrapNullableType(this Type type) Parameters Type Name Description Type type Returns Type Description Type"
  },
  "api/LinqToDB.Common.Internal.ValueComparer.html": {
    "href": "api/LinqToDB.Common.Internal.ValueComparer.html",
    "title": "Class ValueComparer | Linq To DB (aka linq2db)",
    "keywords": "Class ValueComparer Inheritance System.Object ValueComparer ValueComparer <T> Implements IEqualityComparer < System.Object > Namespace : LinqToDB.Common.Internal Assembly : linq2db.dll Syntax public abstract class ValueComparer : IEqualityComparer Constructors | Improve this Doc View Source ValueComparer(LambdaExpression, LambdaExpression) Creates a new ValueComparer with the given comparison. Declaration protected ValueComparer(LambdaExpression equalsExpression, LambdaExpression hashCodeExpression) Parameters Type Name Description LambdaExpression equalsExpression The comparison expression. LambdaExpression hashCodeExpression The associated hash code generator. Properties | Improve this Doc View Source EqualsExpression The comparison expression. Declaration public virtual LambdaExpression EqualsExpression { get; } Property Value Type Description LambdaExpression | Improve this Doc View Source HashCodeExpression The hash code expression. Declaration public virtual LambdaExpression HashCodeExpression { get; } Property Value Type Description LambdaExpression | Improve this Doc View Source Type The type. Declaration public abstract Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source CreateDefault(Type, Boolean) Creates a default ValueComparer<T> for the given type. Declaration public static ValueComparer CreateDefault(Type type, bool favorStructuralComparisons) Parameters Type Name Description Type type The type. System.Boolean favorStructuralComparisons If true , then will be used if the type implements it. This is usually used when byte arrays act as keys. Returns Type Description ValueComparer The ValueComparer<T> . | Improve this Doc View Source Equals(Nullable<Object>, Nullable<Object>) Compares the two instances to determine if they are equal. Declaration public abstract bool Equals(object? x, object? y) Parameters Type Name Description System.Nullable < System.Object > x The first instance. System.Nullable < System.Object > y The second instance. Returns Type Description System.Boolean true if they are equal; false otherwise. | Improve this Doc View Source ExtractEqualsBody(Expression, Expression) Takes EqualsExpression and replaces the two parameters with the given expressions, returning the transformed body. Declaration public virtual Expression ExtractEqualsBody(Expression leftExpression, Expression rightExpression) Parameters Type Name Description Expression leftExpression The new left expression. Expression rightExpression The new right expression. Returns Type Description Expression The body of the lambda with left and right parameters replaced. | Improve this Doc View Source GetDefaultValueComparer(Type, Boolean) Declaration public static ValueComparer GetDefaultValueComparer(Type type, bool favorStructuralComparisons) Parameters Type Name Description Type type System.Boolean favorStructuralComparisons Returns Type Description ValueComparer | Improve this Doc View Source GetDefaultValueComparer<T>(Boolean) Declaration public static ValueComparer<T> GetDefaultValueComparer<T>(bool favorStructuralComparisons) Parameters Type Name Description System.Boolean favorStructuralComparisons Returns Type Description ValueComparer <T> Type Parameters Name Description T | Improve this Doc View Source GetHashCode(Nullable<Object>) Returns the hash code for the given instance. Declaration public abstract int GetHashCode(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The instance. Returns Type Description System.Int32 The hash code. Implements IEqualityComparer<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.Internal.ValueComparer-1.html": {
    "href": "api/LinqToDB.Common.Internal.ValueComparer-1.html",
    "title": "Class ValueComparer<T> | Linq To DB (aka linq2db)",
    "keywords": "Class ValueComparer<T> Inheritance System.Object ValueComparer ValueComparer<T> Implements IEqualityComparer < System.Object > IEqualityComparer <T> Inherited Members ValueComparer.ExtractEqualsBody(Expression, Expression) ValueComparer.CreateDefault(Type, Boolean) ValueComparer.GetDefaultValueComparer(Type, Boolean) ValueComparer.GetDefaultValueComparer<T>(Boolean) Namespace : LinqToDB.Common.Internal Assembly : linq2db.dll Syntax public class ValueComparer<T> : ValueComparer Type Parameters Name Description T Constructors | Improve this Doc View Source ValueComparer(Expression<Func<T, T, Boolean>>, Expression<Func<T, Int32>>) Creates a new ValueComparer<T> with the given comparison expression. A shallow copy will be used for the snapshot. Declaration public ValueComparer(Expression<Func<T, T, bool>> equalsExpression, Expression<Func<T, int>> hashCodeExpression) Parameters Type Name Description Expression < Func <T, T, System.Boolean >> equalsExpression The comparison expression. Expression < Func <T, System.Int32 >> hashCodeExpression The associated hash code generator. | Improve this Doc View Source ValueComparer(Boolean) Creates a new ValueComparer<T> with a default comparison expression and a shallow copy for the snapshot. Declaration public ValueComparer(bool favorStructuralComparisons) Parameters Type Name Description System.Boolean favorStructuralComparisons If true , then EF will use if the type implements it. This is usually used when byte arrays act as keys. Properties | Improve this Doc View Source EqualsExpression The comparison expression. Declaration public virtual Expression<Func<T, T, bool>> EqualsExpression { get; } Property Value Type Description Expression < Func <T, T, System.Boolean >> | Improve this Doc View Source HashCodeExpression The hash code expression. Declaration public virtual Expression<Func<T, int>> HashCodeExpression { get; } Property Value Type Description Expression < Func <T, System.Int32 >> | Improve this Doc View Source Type The type. Declaration public override Type Type { get; } Property Value Type Description Type Overrides ValueComparer.Type Methods | Improve this Doc View Source CreateDefaultEqualsExpression() Creates an expression for equality. Declaration protected static Expression<Func<T, T, bool>> CreateDefaultEqualsExpression() Returns Type Description Expression < Func <T, T, System.Boolean >> The equality expression. | Improve this Doc View Source CreateDefaultHashCodeExpression(Boolean) Creates an expression for generating a hash code. Declaration protected static Expression<Func<T, int>> CreateDefaultHashCodeExpression(bool favorStructuralComparisons) Parameters Type Name Description System.Boolean favorStructuralComparisons If true , then is used if the type implements it. Returns Type Description Expression < Func <T, System.Int32 >> The hash code expression. | Improve this Doc View Source Equals(T, T) Compares the two instances to determine if they are equal. Declaration public virtual bool Equals(T x, T y) Parameters Type Name Description T x The first instance. T y The second instance. Returns Type Description System.Boolean true if they are equal; false otherwise. | Improve this Doc View Source Equals(Nullable<Object>, Nullable<Object>) Compares the two instances to determine if they are equal. Declaration public override bool Equals(object? x, object? y) Parameters Type Name Description System.Nullable < System.Object > x The first instance. System.Nullable < System.Object > y The second instance. Returns Type Description System.Boolean true if they are equal; false otherwise. Overrides ValueComparer.Equals(Nullable<Object>, Nullable<Object>) | Improve this Doc View Source GetHashCode(T) Returns the hash code for the given instance. Declaration public virtual int GetHashCode(T obj) Parameters Type Name Description T obj The instance. Returns Type Description System.Int32 The hash code. | Improve this Doc View Source GetHashCode(Nullable<Object>) Returns the hash code for the given instance. Declaration public override int GetHashCode(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The instance. Returns Type Description System.Int32 The hash code. Overrides ValueComparer.GetHashCode(Nullable<Object>) Implements IEqualityComparer<> IEqualityComparer<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.IValueConverter.html": {
    "href": "api/LinqToDB.Common.IValueConverter.html",
    "title": "Interface IValueConverter | Linq To DB (aka linq2db)",
    "keywords": "Interface IValueConverter Defines conversions from an object of one type in a model to an object of the same or different type in the database. Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public interface IValueConverter Properties | Improve this Doc View Source FromProviderExpression Gets the expression to convert objects when reading data from the database. Declaration LambdaExpression FromProviderExpression { get; } Property Value Type Description LambdaExpression | Improve this Doc View Source HandlesNulls Identifies that convert expressions can handle null values. Declaration bool HandlesNulls { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ToProviderExpression Gets the expression to convert objects when writing data to the database. Declaration LambdaExpression ToProviderExpression { get; } Property Value Type Description LambdaExpression Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.LinqToDBConvertException.html": {
    "href": "api/LinqToDB.Common.LinqToDBConvertException.html",
    "title": "Class LinqToDBConvertException | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBConvertException Defines the base class for the namespace exceptions. Inheritance System.Object LinqToDBException LinqToDBConvertException Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public class LinqToDBConvertException : LinqToDBException Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source LinqToDBConvertException() Initializes a new instance of the LinqToDBConvertException class. Declaration public LinqToDBConvertException() Remarks This constructor initializes the property of the new instance such as \"A Build Type exception has occurred.\" | Improve this Doc View Source LinqToDBConvertException(Exception) Initializes a new instance of the LinqToDBConvertException class with the specified InnerException property. Declaration public LinqToDBConvertException(Exception innerException) Parameters Type Name Description Exception innerException The InnerException, if any, that threw the current exception. | Improve this Doc View Source LinqToDBConvertException(SerializationInfo, StreamingContext) Initializes a new instance of the LinqToDBConvertException class with serialized data. Declaration protected LinqToDBConvertException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source LinqToDBConvertException(String) Initializes a new instance of the LinqToDBConvertException class with the specified error message. Declaration public LinqToDBConvertException(string message) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. | Improve this Doc View Source LinqToDBConvertException(String, Exception) Initializes a new instance of the LinqToDBConvertException class with the specified error message and InnerException property. Declaration public LinqToDBConvertException(string message, Exception innerException) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. Exception innerException The InnerException, if any, that threw the current exception. Properties | Improve this Doc View Source ColumnName Gets name of misconfigured column, which caused exception. Declaration public string? ColumnName { get; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.Logging.html": {
    "href": "api/LinqToDB.Common.Logging.html",
    "title": "Namespace LinqToDB.Common.Logging | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Common.Logging Classes LoggingExtensions"
  },
  "api/LinqToDB.Common.Logging.LoggingExtensions.html": {
    "href": "api/LinqToDB.Common.Logging.LoggingExtensions.html",
    "title": "Class LoggingExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class LoggingExtensions Inheritance System.Object LoggingExtensions Namespace : LinqToDB.Common.Logging Assembly : linq2db.dll Syntax public static class LoggingExtensions : object Methods | Improve this Doc View Source GetTraceSwitch(IDataContext) Returns tracing options, used by provided context. Declaration public static TraceSwitch GetTraceSwitch(this IDataContext context) Parameters Type Name Description IDataContext context Context instance. Returns Type Description TraceSwitch instance, used for tracing by provided context. | Improve this Doc View Source WriteTraceLine(IDataContext, String, String, TraceLevel) Write line to trace associated with provided context. Declaration public static void WriteTraceLine(this IDataContext context, string message, string category, TraceLevel level) Parameters Type Name Description IDataContext context Context instance. System.String message Message text. System.String category Message category. TraceLevel level Trace level."
  },
  "api/LinqToDB.Common.MemberInfoEqualityComparer.html": {
    "href": "api/LinqToDB.Common.MemberInfoEqualityComparer.html",
    "title": "Class MemberInfoEqualityComparer | Linq To DB (aka linq2db)",
    "keywords": "Class MemberInfoEqualityComparer Inheritance System.Object MemberInfoEqualityComparer Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public class MemberInfoEqualityComparer : IEqualityComparer<MemberInfo> Fields | Improve this Doc View Source Default Declaration public static readonly MemberInfoEqualityComparer Default Field Value Type Description MemberInfoEqualityComparer Methods | Improve this Doc View Source Equals(Nullable<MemberInfo>, Nullable<MemberInfo>) Declaration public bool Equals(MemberInfo? x, MemberInfo? y) Parameters Type Name Description System.Nullable < MemberInfo > x System.Nullable < MemberInfo > y Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode(MemberInfo) Declaration public int GetHashCode(MemberInfo obj) Parameters Type Name Description MemberInfo obj Returns Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.RawSqlString.html": {
    "href": "api/LinqToDB.Common.RawSqlString.html",
    "title": "Struct RawSqlString | Linq To DB (aka linq2db)",
    "keywords": "Struct RawSqlString A string representing a raw SQL query. This type enables overload resolution between the regular and interpolated . Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public struct RawSqlString Constructors | Improve this Doc View Source RawSqlString(String) Constructs a RawSqlString from a Declaration public RawSqlString(string s) Parameters Type Name Description System.String s The string. Properties | Improve this Doc View Source Format The string format. Declaration public readonly string Format { get; } Property Value Type Description System.String Operators | Improve this Doc View Source Implicit(String to RawSqlString) Implicitly converts a to a RawSqlString Declaration public static implicit operator RawSqlString(string s) Parameters Type Name Description System.String s The string. Returns Type Description RawSqlString Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsDistinctFrom<T>(T, Nullable<T>) Sql.IsNotDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, Nullable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.StringBuilderExtensions.html": {
    "href": "api/LinqToDB.Common.StringBuilderExtensions.html",
    "title": "Class StringBuilderExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class StringBuilderExtensions Inheritance System.Object StringBuilderExtensions Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class StringBuilderExtensions : object Methods | Improve this Doc View Source AppendByteArrayAsHexViaLookup32(StringBuilder, Byte[]) Appends an array of bytes to a in hex (i.e. 255->FF) format utilizing a static lookup table to minimize allocations. Declaration public static void AppendByteArrayAsHexViaLookup32(this StringBuilder sb, byte[] bytes) Parameters Type Name Description StringBuilder sb The to append to System.Byte [] bytes The byte array to append in hex Remarks The implementation here was chosen based on: https://stackoverflow.com/a/624379/2937845 Which indicated that https://stackoverflow.com/a/24343727/2937845's implementation of ByteArrayToHexViaLookup32 was the fastest method not involving unsafe"
  },
  "api/LinqToDB.Common.Tools.html": {
    "href": "api/LinqToDB.Common.Tools.html",
    "title": "Class Tools | Linq To DB (aka linq2db)",
    "keywords": "Class Tools Various general-purpose helpers. Inheritance System.Object Tools Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Tools : object Methods | Improve this Doc View Source CreateEmptyQuery(Type) Declaration public static IQueryable CreateEmptyQuery(Type elementType) Parameters Type Name Description Type elementType Returns Type Description IQueryable | Improve this Doc View Source CreateEmptyQuery<T>() Declaration public static IQueryable<T> CreateEmptyQuery<T>() Returns Type Description IQueryable <T> Type Parameters Name Description T | Improve this Doc View Source GetFileName(Assembly) Returns original path to assembly file. Declaration public static string GetFileName(this Assembly assembly) Parameters Type Name Description Assembly assembly Assembly. Returns Type Description System.String Assembly file path. | Improve this Doc View Source GetPath(Assembly) Returns path to original directory with provided assembly. Declaration public static string GetPath(this Assembly assembly) Parameters Type Name Description Assembly assembly Assembly. Returns Type Description System.String Assembly directory path. | Improve this Doc View Source GetPathFromUri(String) Converts file path in URI format to absolute path. Declaration public static string GetPathFromUri(this string uriString) Parameters Type Name Description System.String uriString File path in URI format. Returns Type Description System.String Absolute file path. | Improve this Doc View Source IsNullOrEmpty(Nullable<ICollection>) Checks that collection is not null and have at least one element. Declaration public static bool IsNullOrEmpty(this ICollection? array) Parameters Type Name Description System.Nullable < ICollection > array Collection to check. Returns Type Description System.Boolean true if collection is null or contains no elements, false otherwise. | Improve this Doc View Source IsNullOrEmpty(Nullable<String>) Shortcut extension method for method. Declaration public static bool IsNullOrEmpty(this string? str) Parameters Type Name Description System.Nullable < System.String > str String value to check. Returns Type Description System.Boolean true if string is null or empty, false otherwise. | Improve this Doc View Source IsNullOrWhiteSpace(Nullable<String>) Shortcut extension method for method. Declaration public static bool IsNullOrWhiteSpace(this string? str) Parameters Type Name Description System.Nullable < System.String > str String value to check. Returns Type Description System.Boolean true if string is null or contains only whitespace characters, false otherwise. | Improve this Doc View Source ToDebugDisplay(String) Declaration public static string ToDebugDisplay(string str) Parameters Type Name Description System.String str Returns Type Description System.String | Improve this Doc View Source TryLoadAssembly(Nullable<String>, Nullable<String>) Declaration public static Assembly? TryLoadAssembly(string? assemblyName, string? providerFactory) Parameters Type Name Description System.Nullable < System.String > assemblyName System.Nullable < System.String > providerFactory Returns Type Description System.Nullable < Assembly >"
  },
  "api/LinqToDB.Common.TypeHelper.html": {
    "href": "api/LinqToDB.Common.TypeHelper.html",
    "title": "Class TypeHelper | Linq To DB (aka linq2db)",
    "keywords": "Class TypeHelper Inheritance System.Object TypeHelper Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class TypeHelper : object Methods | Improve this Doc View Source EnumTypeRemapping(Type, Type, Type[]) Enumerates type transformation for generic arguments. Declaration public static IEnumerable<Tuple<Type, Type>> EnumTypeRemapping(Type templateType, Type replaced, Type[] templateArguments) Parameters Type Name Description Type templateType Type from generic definition. Type replaced Concrete type which needs mapping to generic definition. Type [] templateArguments Generic arguments of generic definition. Returns Type Description IEnumerable < Tuple < Type , Type >> | Improve this Doc View Source MakeGenericMethod(MethodInfo, Expression[]) Makes generic method based on type of arguments. Declaration public static MethodInfo MakeGenericMethod(MethodInfo methodInfo, Expression[] arguments) Parameters Type Name Description MethodInfo methodInfo Expression [] arguments Returns Type Description MethodInfo New MethodCallExpression. | Improve this Doc View Source MakeMethodCall(MethodInfo, Expression[]) Creates MethodCallExpression without specifying generic parameters. Declaration public static MethodCallExpression MakeMethodCall(MethodInfo methodInfo, params Expression[] arguments) Parameters Type Name Description MethodInfo methodInfo Expression [] arguments Returns Type Description MethodCallExpression New MethodCallExpression. | Improve this Doc View Source RegisterTypeRemapping(Type, Type, Type[], Dictionary<Type, Type>) Registers type transformation for generic arguments. Declaration public static void RegisterTypeRemapping(Type templateType, Type replaced, Type[] templateArguments, Dictionary<Type, Type> typeMappings) Parameters Type Name Description Type templateType Type from generic definition. Type replaced Concrete type which needs mapping to generic definition. Type [] templateArguments Generic arguments of generic definition. Dictionary < Type , Type > typeMappings Accumulator dictionary for registered mappings."
  },
  "api/LinqToDB.Common.Utils.html": {
    "href": "api/LinqToDB.Common.Utils.html",
    "title": "Class Utils | Linq To DB (aka linq2db)",
    "keywords": "Class Utils Inheritance System.Object Utils Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public static class Utils : object Methods | Improve this Doc View Source MakeUniqueNames<T>(IEnumerable<T>, Nullable<IEnumerable<String>>, Func<T, Nullable<String>>, Action<T, String, Nullable<ISet<String>>>, Func<T, Nullable<String>>, Nullable<StringComparer>) Declaration public static void MakeUniqueNames<T>(IEnumerable<T> items, IEnumerable<string>? staticNames, Func<T, string?> nameFunc, Action<T, string, ISet<string>?> nameSetter, Func<T, string?> defaultName, StringComparer? comparer = null) Parameters Type Name Description IEnumerable <T> items System.Nullable < IEnumerable < System.String >> staticNames Func <T, System.Nullable < System.String >> nameFunc Action <T, System.String , System.Nullable < ISet < System.String >>> nameSetter Func <T, System.Nullable < System.String >> defaultName System.Nullable < StringComparer > comparer Type Parameters Name Description T | Improve this Doc View Source MakeUniqueNames<T>(IEnumerable<T>, Nullable<IEnumerable<String>>, Func<T, Nullable<String>>, Action<T, String, Nullable<ISet<String>>>, String, Nullable<StringComparer>) Declaration public static void MakeUniqueNames<T>(IEnumerable<T> items, IEnumerable<string>? staticNames, Func<T, string?> nameFunc, Action<T, string, ISet<string>?> nameSetter, string defaultName = \"t\", StringComparer? comparer = null) Parameters Type Name Description IEnumerable <T> items System.Nullable < IEnumerable < System.String >> staticNames Func <T, System.Nullable < System.String >> nameFunc Action <T, System.String , System.Nullable < ISet < System.String >>> nameSetter System.String defaultName System.Nullable < StringComparer > comparer Type Parameters Name Description T | Improve this Doc View Source MakeUniqueNames<T>(IEnumerable<T>, Nullable<ISet<String>>, Func<String, Nullable<ISet<String>>, Boolean>, Func<T, Nullable<String>>, Action<T, String, Nullable<ISet<String>>>, Func<T, Nullable<String>>, Nullable<StringComparer>) Declaration public static void MakeUniqueNames<T>(IEnumerable<T> items, ISet<string>? namesParameter, Func<string, ISet<string>?, bool> validatorFunc, Func<T, string?> nameFunc, Action<T, string, ISet<string>?> nameSetter, Func<T, string?> defaultName, StringComparer? comparer = null) Parameters Type Name Description IEnumerable <T> items System.Nullable < ISet < System.String >> namesParameter Func < System.String , System.Nullable < ISet < System.String >>, System.Boolean > validatorFunc Func <T, System.Nullable < System.String >> nameFunc Action <T, System.String , System.Nullable < ISet < System.String >>> nameSetter Func <T, System.Nullable < System.String >> defaultName System.Nullable < StringComparer > comparer Type Parameters Name Description T | Improve this Doc View Source RemoveDuplicates<T>(IList<T>, Nullable<IEqualityComparer<T>>) Declaration public static void RemoveDuplicates<T>(this IList<T> list, IEqualityComparer<T>? comparer = null) Parameters Type Name Description IList <T> list System.Nullable < IEqualityComparer <T>> comparer Type Parameters Name Description T | Improve this Doc View Source RemoveDuplicates<T, TKey>(IList<T>, Func<T, TKey>, Nullable<IEqualityComparer<TKey>>) Declaration public static void RemoveDuplicates<T, TKey>(this IList<T> list, Func<T, TKey> keySelector, IEqualityComparer<TKey>? comparer = null) Parameters Type Name Description IList <T> list Func <T, TKey> keySelector System.Nullable < IEqualityComparer <TKey>> comparer Type Parameters Name Description T TKey | Improve this Doc View Source RemoveDuplicatesFromTail<T>(IList<T>, Func<T, T, Boolean>) Declaration public static void RemoveDuplicatesFromTail<T>(this IList<T> list, Func<T, T, bool> compareFunc) Parameters Type Name Description IList <T> list Func <T, T, System.Boolean > compareFunc Type Parameters Name Description T"
  },
  "api/LinqToDB.Common.Utils.ObjectReferenceEqualityComparer-1.html": {
    "href": "api/LinqToDB.Common.Utils.ObjectReferenceEqualityComparer-1.html",
    "title": "Class Utils.ObjectReferenceEqualityComparer<T> | Linq To DB (aka linq2db)",
    "keywords": "Class Utils.ObjectReferenceEqualityComparer<T> Inheritance System.Object Utils.ObjectReferenceEqualityComparer<T> Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public class ObjectReferenceEqualityComparer<T> : IEqualityComparer<T> Type Parameters Name Description T Fields | Improve this Doc View Source Default Declaration public static IEqualityComparer<T> Default Field Value Type Description IEqualityComparer <T> Methods | Improve this Doc View Source Equals(T, T) Declaration public bool Equals(T x, T y) Parameters Type Name Description T x T y Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode(T) Declaration public int GetHashCode(T obj) Parameters Type Name Description T obj Returns Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.ValueConverter-2.html": {
    "href": "api/LinqToDB.Common.ValueConverter-2.html",
    "title": "Class ValueConverter<TModel, TProvider> | Linq To DB (aka linq2db)",
    "keywords": "Class ValueConverter<TModel, TProvider> Inheritance System.Object ValueConverter<TModel, TProvider> Implements IValueConverter Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public class ValueConverter<TModel, TProvider> : object, IValueConverter Type Parameters Name Description TModel TProvider Constructors | Improve this Doc View Source ValueConverter(Expression<Func<TModel, TProvider>>, Expression<Func<TProvider, TModel>>, Boolean) Declaration public ValueConverter(Expression<Func<TModel, TProvider>> convertToProviderExpression, Expression<Func<TProvider, TModel>> convertFromProviderExpression, bool handlesNulls) Parameters Type Name Description Expression < Func <TModel, TProvider>> convertToProviderExpression Expression < Func <TProvider, TModel>> convertFromProviderExpression System.Boolean handlesNulls Properties | Improve this Doc View Source FromProviderExpression Declaration public LambdaExpression FromProviderExpression { get; } Property Value Type Description LambdaExpression | Improve this Doc View Source HandlesNulls Declaration public bool HandlesNulls { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ToProviderExpression Declaration public LambdaExpression ToProviderExpression { get; } Property Value Type Description LambdaExpression Implements IValueConverter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Common.ValueConverterFunc-2.html": {
    "href": "api/LinqToDB.Common.ValueConverterFunc-2.html",
    "title": "Class ValueConverterFunc<TModel, TProvider> | Linq To DB (aka linq2db)",
    "keywords": "Class ValueConverterFunc<TModel, TProvider> Inheritance System.Object ValueConverterFunc<TModel, TProvider> Implements IValueConverter Namespace : LinqToDB.Common Assembly : linq2db.dll Syntax public class ValueConverterFunc<TModel, TProvider> : object, IValueConverter Type Parameters Name Description TModel TProvider Constructors | Improve this Doc View Source ValueConverterFunc(Func<TModel, TProvider>, Func<TProvider, TModel>, Boolean) Declaration public ValueConverterFunc(Func<TModel, TProvider> convertToProviderFunc, Func<TProvider, TModel> convertFromProviderFunc, bool handlesNulls) Parameters Type Name Description Func <TModel, TProvider> convertToProviderFunc Func <TProvider, TModel> convertFromProviderFunc System.Boolean handlesNulls Properties | Improve this Doc View Source FromProviderExpression Declaration public LambdaExpression FromProviderExpression { get; } Property Value Type Description LambdaExpression | Improve this Doc View Source HandlesNulls Declaration public bool HandlesNulls { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ToProviderExpression Declaration public LambdaExpression ToProviderExpression { get; } Property Value Type Description LambdaExpression Implements IValueConverter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.CompiledQuery.html": {
    "href": "api/LinqToDB.CompiledQuery.html",
    "title": "Class CompiledQuery | Linq To DB (aka linq2db)",
    "keywords": "Class CompiledQuery Provides API for compilation and caching of queries for reuse. Inheritance System.Object CompiledQuery Namespace : LinqToDB Assembly : linq2db.dll Syntax public class CompiledQuery : object Constructors | Improve this Doc View Source CompiledQuery(LambdaExpression) Declaration protected CompiledQuery(LambdaExpression query) Parameters Type Name Description LambdaExpression query Methods | Improve this Doc View Source Compile<TDC, TResult>(Expression<Func<TDC, TResult>>) Compiles the query. Declaration public static Func<TDC, TResult> Compile<TDC, TResult>(Expression<Func<TDC, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDC, TArg1, TResult>(Expression<Func<TDC, TArg1, TResult>>) Compiles the query with parameter. Declaration public static Func<TDC, TArg1, TResult> Compile<TDC, TArg1, TResult>(Expression<Func<TDC, TArg1, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TArg1, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TArg1, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TArg1 Type of parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TResult>(Expression<Func<TDC, TArg1, TArg2, TResult>>) Compiles the query with two parameters. Declaration public static Func<TDC, TArg1, TArg2, TResult> Compile<TDC, TArg1, TArg2, TResult>(Expression<Func<TDC, TArg1, TArg2, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TArg1, TArg2, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TArg1, TArg2, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TArg3, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TResult>>) Compiles the query with three parameters. Declaration public static Func<TDC, TArg1, TArg2, TArg3, TResult> Compile<TDC, TArg1, TArg2, TArg3, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TArg1, TArg2, TArg3, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TArg1, TArg2, TArg3, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TArg3 Type of third parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TArg3, TArg4, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult>>) Compiles the query with four parameters. Declaration public static Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult> Compile<TDC, TArg1, TArg2, TArg3, TArg4, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TArg1, TArg2, TArg3, TArg4, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TArg1, TArg2, TArg3, TArg4, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TArg3 Type of third parameter for compiled query. TArg4 Type of forth parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>>) Compiles the query with five parameters. Declaration public static Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Compile<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Expression<Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> query) where TDC : IDataContext Parameters Type Name Description Expression < Func <TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> query The query expression to be compiled. Returns Type Description Func <TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDC Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TArg3 Type of third parameter for compiled query. TArg4 Type of forth parameter for compiled query. TArg5 Type of fifth parameter for compiled query. TResult Query result type. | Improve this Doc View Source Invoke<TDC, TResult>(TDC) Executes compiled query against provided database connection context. Declaration public TResult Invoke<TDC, TResult>(TDC dataContext) Parameters Type Name Description TDC dataContext Database connection context. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. TResult Query result type. | Improve this Doc View Source Invoke<TDC, T1, TResult>(TDC, T1) Executes compiled query with one parameter against provided database connection context. Declaration public TResult Invoke<TDC, T1, TResult>(TDC dataContext, T1 arg1) Parameters Type Name Description TDC dataContext Database connection context. T1 arg1 Query parameter value. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. T1 Query parameter type. TResult Query result type. | Improve this Doc View Source Invoke<TDC, T1, T2, TResult>(TDC, T1, T2) Executes compiled query with two parameters against provided database connection context. Declaration public TResult Invoke<TDC, T1, T2, TResult>(TDC dataContext, T1 arg1, T2 arg2) Parameters Type Name Description TDC dataContext Database connection context. T1 arg1 First query parameter value. T2 arg2 Second query parameter value. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. T1 First query parameter type. T2 Second query parameter type. TResult Query result type. | Improve this Doc View Source Invoke<TDC, T1, T2, T3, TResult>(TDC, T1, T2, T3) Executes compiled query with three parameters against provided database connection context. Declaration public TResult Invoke<TDC, T1, T2, T3, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description TDC dataContext Database connection context. T1 arg1 First query parameter value. T2 arg2 Second query parameter value. T3 arg3 Third query parameter value. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. T1 First query parameter type. T2 Second query parameter type. T3 Third query parameter type. TResult Query result type. | Improve this Doc View Source Invoke<TDC, T1, T2, T3, T4, TResult>(TDC, T1, T2, T3, T4) Executes compiled query with four parameters against provided database connection context. Declaration public TResult Invoke<TDC, T1, T2, T3, T4, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description TDC dataContext Database connection context. T1 arg1 First query parameter value. T2 arg2 Second query parameter value. T3 arg3 Third query parameter value. T4 arg4 Forth query parameter value. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. T1 First query parameter type. T2 Second query parameter type. T3 Third query parameter type. T4 Forth query parameter type. TResult Query result type. | Improve this Doc View Source Invoke<TDC, T1, T2, T3, T4, T5, TResult>(TDC, T1, T2, T3, T4, T5) Executes compiled query with five parameters against provided database connection context. Declaration public TResult Invoke<TDC, T1, T2, T3, T4, T5, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description TDC dataContext Database connection context. T1 arg1 First query parameter value. T2 arg2 Second query parameter value. T3 arg3 Third query parameter value. T4 arg4 Forth query parameter value. T5 arg5 Fifth query parameter value. Returns Type Description TResult Query execution result. Type Parameters Name Description TDC Database connection context type. T1 First query parameter type. T2 Second query parameter type. T3 Third query parameter type. T4 Forth query parameter type. T5 Fifth query parameter type. TResult Query result type. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.DataProviderElement.html": {
    "href": "api/LinqToDB.Configuration.DataProviderElement.html",
    "title": "Class DataProviderElement | Linq To DB (aka linq2db)",
    "keywords": "Class DataProviderElement Data provider configuration element. Inheritance System.Object ElementBase DataProviderElement Implements IDataProviderSettings Inherited Members ElementBase.Properties ElementBase.OnDeserializeUnrecognizedAttribute(String, String) ElementBase.Attributes Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public sealed class DataProviderElement : ElementBase, IDataProviderSettings Constructors | Improve this Doc View Source DataProviderElement() Creates data provider configuration element. Declaration public DataProviderElement() Properties | Improve this Doc View Source Default Gets a value indicating whether the provider is default. Declaration public bool Default { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets a name of this data provider. If not set, Name is used. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source TypeName Gets an assembly qualified type name of this data provider. Declaration public string TypeName { get; } Property Value Type Description System.String Explicit Interface Implementations | Improve this Doc View Source IDataProviderSettings.Attributes Declaration IEnumerable<NamedValue> IDataProviderSettings.Attributes { get; } Returns Type Description IEnumerable < NamedValue > Implements IDataProviderSettings Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.DataProviderElementCollection.html": {
    "href": "api/LinqToDB.Configuration.DataProviderElementCollection.html",
    "title": "Class DataProviderElementCollection | Linq To DB (aka linq2db)",
    "keywords": "Class DataProviderElementCollection Collection of data provider configuration elements. Inheritance System.Object ElementCollectionBase < DataProviderElement > DataProviderElementCollection Inherited Members ElementCollectionBase<DataProviderElement>.CreateNewElement() ElementCollectionBase<DataProviderElement>.GetElementKey(ConfigurationElement) ElementCollectionBase<DataProviderElement>.Item[String] ElementCollectionBase<DataProviderElement>.Item[Int32] Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public class DataProviderElementCollection : ElementCollectionBase<DataProviderElement> Methods | Improve this Doc View Source GetElementKey(DataProviderElement) Declaration protected override object GetElementKey(DataProviderElement element) Parameters Type Name Description DataProviderElement element Returns Type Description System.Object Overrides LinqToDB.Configuration.ElementCollectionBase<LinqToDB.Configuration.DataProviderElement>.GetElementKey(LinqToDB.Configuration.DataProviderElement) Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.ElementBase.html": {
    "href": "api/LinqToDB.Configuration.ElementBase.html",
    "title": "Class ElementBase | Linq To DB (aka linq2db)",
    "keywords": "Class ElementBase Configuration section element. Inheritance System.Object ElementBase DataProviderElement Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public abstract class ElementBase : ConfigurationElement Properties | Improve this Doc View Source Attributes Gets collection of unknown element attributes. Declaration public NameValueCollection Attributes { get; } Property Value Type Description NameValueCollection | Improve this Doc View Source Properties Declaration protected override ConfigurationPropertyCollection Properties { get; } Property Value Type Description ConfigurationPropertyCollection Methods | Improve this Doc View Source OnDeserializeUnrecognizedAttribute(String, String) Gets a value indicating whether an unknown attribute is encountered during deserialization. Declaration protected override bool OnDeserializeUnrecognizedAttribute(string name, string value) Parameters Type Name Description System.String name The name of the unrecognized attribute. System.String value The value of the unrecognized attribute. Returns Type Description System.Boolean True when an unknown attribute is encountered while deserializing. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.ElementCollectionBase-1.html": {
    "href": "api/LinqToDB.Configuration.ElementCollectionBase-1.html",
    "title": "Class ElementCollectionBase<T> | Linq To DB (aka linq2db)",
    "keywords": "Class ElementCollectionBase<T> Collection of configuration section elements. Inheritance System.Object ElementCollectionBase<T> DataProviderElementCollection Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public abstract class ElementCollectionBase<T> : ConfigurationElementCollection where T : ConfigurationElement, new() Type Parameters Name Description T Element type. Properties | Improve this Doc View Source Item[Int32] Gets element from collection by its index. Declaration public T this[int index] { get; } Parameters Type Name Description System.Int32 index Element index. Property Value Type Description T Element at specified index. | Improve this Doc View Source Item[String] Gets element from collection by its name. Declaration public T this[string name] { get; } Parameters Type Name Description System.String name Element name. Property Value Type Description T Element or null, if element with such name is not found. Methods | Improve this Doc View Source CreateNewElement() Declaration protected override ConfigurationElement CreateNewElement() Returns Type Description ConfigurationElement | Improve this Doc View Source GetElementKey(T) Declaration protected abstract object GetElementKey(T element) Parameters Type Name Description T element Returns Type Description System.Object | Improve this Doc View Source GetElementKey(ConfigurationElement) Declaration protected sealed override object GetElementKey(ConfigurationElement element) Parameters Type Name Description ConfigurationElement element Returns Type Description System.Object Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.html": {
    "href": "api/LinqToDB.Configuration.html",
    "title": "Namespace LinqToDB.Configuration | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Configuration Classes DataProviderElement Data provider configuration element. DataProviderElementCollection Collection of data provider configuration elements. ElementBase Configuration section element. ElementCollectionBase<T> Collection of configuration section elements. LinqToDbConnectionOptions LinqToDbConnectionOptions<T> LinqToDbConnectionOptionsBuilder Used to build LinqToDbConnectionOptions which is used by DataConnection to determine connection settings. LinqToDbConnectionOptionsBuilderExtensions Set of provider-specific extensions for LinqToDbConnectionOptionsBuilder . LinqToDBSection Implementation of custom configuration section. NamedValue Name-value pair. Interfaces IConnectionStringSettings Connection string configuration provider. IDataProviderSettings Data provider configuration provider. ILinqToDBSettings Settings provider interface."
  },
  "api/LinqToDB.Configuration.IConnectionStringSettings.html": {
    "href": "api/LinqToDB.Configuration.IConnectionStringSettings.html",
    "title": "Interface IConnectionStringSettings | Linq To DB (aka linq2db)",
    "keywords": "Interface IConnectionStringSettings Connection string configuration provider. Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public interface IConnectionStringSettings Properties | Improve this Doc View Source ConnectionString Gets connection string. Declaration string ConnectionString { get; } Property Value Type Description System.String | Improve this Doc View Source IsGlobal Is this connection configuration defined on global level (machine.config) or on application level. Declaration bool IsGlobal { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets connection configuration name. Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source ProviderName Gets data provider configuration name. Declaration string? ProviderName { get; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.IDataProviderSettings.html": {
    "href": "api/LinqToDB.Configuration.IDataProviderSettings.html",
    "title": "Interface IDataProviderSettings | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataProviderSettings Data provider configuration provider. Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public interface IDataProviderSettings Properties | Improve this Doc View Source Attributes Extra provider-specific parameters. Sybase: SAP HANA: Oracle: SQL Server: DB2: Declaration IEnumerable<NamedValue> Attributes { get; } Property Value Type Description IEnumerable < NamedValue > | Improve this Doc View Source Default Gets a value indicating whether the provider is default. Declaration bool Default { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets a name of this data provider configuration. Declaration string? Name { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TypeName Gets an assembly qualified type name of this data provider. Declaration string TypeName { get; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.ILinqToDBSettings.html": {
    "href": "api/LinqToDB.Configuration.ILinqToDBSettings.html",
    "title": "Interface ILinqToDBSettings | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqToDBSettings Settings provider interface. Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public interface ILinqToDBSettings Properties | Improve this Doc View Source ConnectionStrings Gets list of connection configurations. Declaration IEnumerable<IConnectionStringSettings> ConnectionStrings { get; } Property Value Type Description IEnumerable < IConnectionStringSettings > | Improve this Doc View Source DataProviders Gets list of data provider settings. Declaration IEnumerable<IDataProviderSettings> DataProviders { get; } Property Value Type Description IEnumerable < IDataProviderSettings > | Improve this Doc View Source DefaultConfiguration Gets name of default connection configuration. Declaration string? DefaultConfiguration { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DefaultDataProvider Gets name of default data provider configuration. Declaration string? DefaultDataProvider { get; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.LinqToDbConnectionOptions.html": {
    "href": "api/LinqToDB.Configuration.LinqToDbConnectionOptions.html",
    "title": "Class LinqToDbConnectionOptions | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDbConnectionOptions Inheritance System.Object LinqToDbConnectionOptions LinqToDbConnectionOptions<T> Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public class LinqToDbConnectionOptions : object Constructors | Improve this Doc View Source LinqToDbConnectionOptions(LinqToDbConnectionOptionsBuilder) Declaration public LinqToDbConnectionOptions(LinqToDbConnectionOptionsBuilder builder) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Properties | Improve this Doc View Source ConfigurationString Gets configuration string name to use with DataConnection instance. Declaration public string? ConfigurationString { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ConnectionFactory Gets connection factory to use with DataConnection instance. Declaration public Func<IDbConnection>? ConnectionFactory { get; } Property Value Type Description System.Nullable < Func < IDbConnection >> | Improve this Doc View Source ConnectionString Gets connection string to use with DataConnection instance. Declaration public string? ConnectionString { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataProvider Gets IDataProvider instance to use with DataConnection instance. Declaration public IDataProvider DataProvider { get; } Property Value Type Description IDataProvider | Improve this Doc View Source DbConnection Gets instance to use with DataConnection instance. Declaration public IDbConnection? DbConnection { get; } Property Value Type Description System.Nullable < IDbConnection > | Improve this Doc View Source DbTransaction Gets instance to use with DataConnection instance. Declaration public IDbTransaction? DbTransaction { get; } Property Value Type Description System.Nullable < IDbTransaction > | Improve this Doc View Source DisposeConnection Gets DbConnection ownership status for DataConnection instance. If true , DataConnection will dispose provided connection on own dispose. Declaration public bool DisposeConnection { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MappingSchema Gets MappingSchema instance to use with DataConnection instance. Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source OnTrace Gets custom trace method to use with DataConnection instance. Declaration public Action<TraceInfo>? OnTrace { get; } Property Value Type Description System.Nullable < Action < TraceInfo >> | Improve this Doc View Source ProviderName Gets provider name to use with DataConnection instance. Declaration public string? ProviderName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TraceLevel Gets custom trace level to use with DataConnection instance. Declaration public TraceLevel? TraceLevel { get; } Property Value Type Description System.Nullable < TraceLevel > | Improve this Doc View Source WriteTrace Gets custom trace writer to use with DataConnection instance. Declaration public Action<string?, string?, TraceLevel>? WriteTrace { get; } Property Value Type Description System.Nullable < Action < System.Nullable < System.String >, System.Nullable < System.String >, TraceLevel >> Methods | Improve this Doc View Source IsValidConfigForConnectionType(DataConnection) Declaration public virtual bool IsValidConfigForConnectionType(DataConnection connection) Parameters Type Name Description DataConnection connection Returns Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.LinqToDbConnectionOptions-1.html": {
    "href": "api/LinqToDB.Configuration.LinqToDbConnectionOptions-1.html",
    "title": "Class LinqToDbConnectionOptions<T> | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDbConnectionOptions<T> Inheritance System.Object LinqToDbConnectionOptions LinqToDbConnectionOptions<T> Inherited Members LinqToDbConnectionOptions.MappingSchema LinqToDbConnectionOptions.DataProvider LinqToDbConnectionOptions.DbConnection LinqToDbConnectionOptions.DisposeConnection LinqToDbConnectionOptions.ConfigurationString LinqToDbConnectionOptions.ProviderName LinqToDbConnectionOptions.ConnectionString LinqToDbConnectionOptions.ConnectionFactory LinqToDbConnectionOptions.DbTransaction LinqToDbConnectionOptions.OnTrace LinqToDbConnectionOptions.TraceLevel LinqToDbConnectionOptions.WriteTrace Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public class LinqToDbConnectionOptions<T> : LinqToDbConnectionOptions Type Parameters Name Description T Constructors | Improve this Doc View Source LinqToDbConnectionOptions(LinqToDbConnectionOptionsBuilder) Declaration public LinqToDbConnectionOptions(LinqToDbConnectionOptionsBuilder builder) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Methods | Improve this Doc View Source IsValidConfigForConnectionType(DataConnection) Declaration public override bool IsValidConfigForConnectionType(DataConnection connection) Parameters Type Name Description DataConnection connection Returns Type Description System.Boolean Overrides LinqToDbConnectionOptions.IsValidConfigForConnectionType(DataConnection) Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.LinqToDbConnectionOptionsBuilder.html": {
    "href": "api/LinqToDB.Configuration.LinqToDbConnectionOptionsBuilder.html",
    "title": "Class LinqToDbConnectionOptionsBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDbConnectionOptionsBuilder Used to build LinqToDbConnectionOptions which is used by DataConnection to determine connection settings. Inheritance System.Object LinqToDbConnectionOptionsBuilder Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public class LinqToDbConnectionOptionsBuilder : object Properties | Improve this Doc View Source ConfigurationString Declaration public string? ConfigurationString { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ConnectionFactory Declaration public Func<IDbConnection>? ConnectionFactory { get; } Property Value Type Description System.Nullable < Func < IDbConnection >> | Improve this Doc View Source ConnectionString Declaration public string? ConnectionString { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataProvider Declaration public IDataProvider DataProvider { get; } Property Value Type Description IDataProvider | Improve this Doc View Source DbConnection Declaration public IDbConnection? DbConnection { get; } Property Value Type Description System.Nullable < IDbConnection > | Improve this Doc View Source DbTransaction Declaration public IDbTransaction? DbTransaction { get; } Property Value Type Description System.Nullable < IDbTransaction > | Improve this Doc View Source DisposeConnection Declaration public bool DisposeConnection { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source OnTrace Declaration public Action<TraceInfo>? OnTrace { get; } Property Value Type Description System.Nullable < Action < TraceInfo >> | Improve this Doc View Source ProviderName Declaration public string? ProviderName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TraceLevel Declaration public TraceLevel? TraceLevel { get; } Property Value Type Description System.Nullable < TraceLevel > | Improve this Doc View Source WriteTrace Declaration public Action<string?, string?, TraceLevel>? WriteTrace { get; } Property Value Type Description System.Nullable < Action < System.Nullable < System.String >, System.Nullable < System.String >, TraceLevel >> Methods | Improve this Doc View Source Build() Build the immutable options used by the database. Declaration public LinqToDbConnectionOptions Build() Returns Type Description LinqToDbConnectionOptions | Improve this Doc View Source Build<TContext>() Build the immutable options used by the database. Declaration public LinqToDbConnectionOptions<TContext> Build<TContext>() Returns Type Description LinqToDbConnectionOptions <TContext> Type Parameters Name Description TContext | Improve this Doc View Source Reset() Reset the builder back to default configuration undoing all previous configured values Declaration public LinqToDbConnectionOptionsBuilder Reset() Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseConfigurationString(String) Configure the database to use the specified configuration string, Configurations can be added by calling AddConfiguration(String, String, IDataProvider) Declaration public LinqToDbConnectionOptionsBuilder UseConfigurationString(string configurationString) Parameters Type Name Description System.String configurationString Used used to lookup configuration, must be specified before the Database is created. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseConnection(IDataProvider, IDbConnection, Boolean) Configure the database to use the specified provider and an existing . Declaration public LinqToDbConnectionOptionsBuilder UseConnection(IDataProvider dataProvider, IDbConnection connection, bool disposeConnection = false) Parameters Type Name Description IDataProvider dataProvider Used by the connection to determine functionality when executing commands/queries. IDbConnection connection Existing connection, can be open or closed, will be opened automatically if closed. System.Boolean disposeConnection Indicates if the connection should be disposed when the context is disposed. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseConnectionFactory(IDataProvider, Func<IDbConnection>) Configure the database to use the specified provider and callback as an factory. Declaration public LinqToDbConnectionOptionsBuilder UseConnectionFactory(IDataProvider dataProvider, Func<IDbConnection> connectionFactory) Parameters Type Name Description IDataProvider dataProvider Used by the connection to determine functionality when executing commands/queries. Func < IDbConnection > connectionFactory Factory function used to obtain the connection. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseConnectionString(IDataProvider, String) Configure the database to use the specified provider and connection string. Declaration public LinqToDbConnectionOptionsBuilder UseConnectionString(IDataProvider dataProvider, string connectionString) Parameters Type Name Description IDataProvider dataProvider Used by the connection to determine functionality when executing commands/queries. System.String connectionString Database specific connections string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseConnectionString(String, String) Configure the database to use the specified provider and connection string. Declaration public LinqToDbConnectionOptionsBuilder UseConnectionString(string providerName, string connectionString) Parameters Type Name Description System.String providerName See ProviderName for Default providers. System.String connectionString Database specific connections string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseDataProvider(IDataProvider) Configure the database to use the specified provider, can override providers previously specified. Declaration public LinqToDbConnectionOptionsBuilder UseDataProvider(IDataProvider dataProvider) Parameters Type Name Description IDataProvider dataProvider Used by the connection to determine functionality when executing commands/queries. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseMappingSchema(MappingSchema) Configure the database to use the specified mapping schema. Declaration public LinqToDbConnectionOptionsBuilder UseMappingSchema(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Used to define the mapping between sql and classes. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseTransaction(IDataProvider, IDbTransaction) Configure the database to use the specified provider and an existing . Declaration public LinqToDbConnectionOptionsBuilder UseTransaction(IDataProvider dataProvider, IDbTransaction transaction) Parameters Type Name Description IDataProvider dataProvider Used by the connection to determine functionality when executing commands/queries. IDbTransaction transaction Existing transaction. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source WithTraceLevel(TraceLevel) Configure the database to use specified trace level. Declaration public LinqToDbConnectionOptionsBuilder WithTraceLevel(TraceLevel traceLevel) Parameters Type Name Description TraceLevel traceLevel Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source WithTracing(Action<TraceInfo>) Configure the database to use the specified callback for logging or tracing. Declaration public LinqToDbConnectionOptionsBuilder WithTracing(Action<TraceInfo> onTrace) Parameters Type Name Description Action < TraceInfo > onTrace Callback, may not be called depending on the trace level. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source WithTracing(TraceLevel, Action<TraceInfo>) Configure the database to use the specified trace level and callback for logging or tracing. Declaration public LinqToDbConnectionOptionsBuilder WithTracing(TraceLevel traceLevel, Action<TraceInfo> onTrace) Parameters Type Name Description TraceLevel traceLevel Trace level to use. Action < TraceInfo > onTrace Callback, may not be called depending on the trace level. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source WriteTraceWith(Action<Nullable<String>, Nullable<String>, TraceLevel>) Configure the database to use the specified a string trace callback. Declaration public LinqToDbConnectionOptionsBuilder WriteTraceWith(Action<string?, string?, TraceLevel> write) Parameters Type Name Description Action < System.Nullable < System.String >, System.Nullable < System.String >, TraceLevel > write Callback, may not be called depending on the trace level. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) LinqToDbConnectionOptionsBuilderExtensions.UseSqlServer(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseSqlServer(LinqToDbConnectionOptionsBuilder, String, SqlServerProvider, SqlServerVersion) LinqToDbConnectionOptionsBuilderExtensions.UseOracle(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseOracle(LinqToDbConnectionOptionsBuilder, String, OracleVersion) LinqToDbConnectionOptionsBuilderExtensions.UseOracle(LinqToDbConnectionOptionsBuilder, String, OracleVersion, Boolean) LinqToDbConnectionOptionsBuilderExtensions.UsePostgreSQL(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UsePostgreSQL(LinqToDbConnectionOptionsBuilder, String, PostgreSQLVersion) LinqToDbConnectionOptionsBuilderExtensions.UseMySql(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseMySqlData(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseMySqlConnector(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseSQLite(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseSQLiteOfficial(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseSQLiteMicrosoft(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseAccess(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseAccessOleDb(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseAccessODBC(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseDB2(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseDB2(LinqToDbConnectionOptionsBuilder, String, DB2Version) LinqToDbConnectionOptionsBuilderExtensions.UseFirebird(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseInformix(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseInformix(LinqToDbConnectionOptionsBuilder, String, Boolean) LinqToDbConnectionOptionsBuilderExtensions.UseSapHana(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseSapHanaNative(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseSapHanaODBC(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseSqlCe(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseAse(LinqToDbConnectionOptionsBuilder, String) LinqToDbConnectionOptionsBuilderExtensions.UseAse(LinqToDbConnectionOptionsBuilder, String, Boolean) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.LinqToDbConnectionOptionsBuilderExtensions.html": {
    "href": "api/LinqToDB.Configuration.LinqToDbConnectionOptionsBuilderExtensions.html",
    "title": "Class LinqToDbConnectionOptionsBuilderExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDbConnectionOptionsBuilderExtensions Set of provider-specific extensions for LinqToDbConnectionOptionsBuilder . Inheritance System.Object LinqToDbConnectionOptionsBuilderExtensions Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public static class LinqToDbConnectionOptionsBuilderExtensions : object Methods | Improve this Doc View Source UseAccess(LinqToDbConnectionOptionsBuilder, String) Configure connection to use Access default provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseAccess(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString Access connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Remarks Default provider determined by inspecting connection string for OleDb or ODBC-specific markers and otherwise defaults to OleDb provider. For more fine-grained configuration see UseAccessOleDb(LinqToDbConnectionOptionsBuilder, String) and UseAccessODBC(LinqToDbConnectionOptionsBuilder, String) methods. | Improve this Doc View Source UseAccessODBC(LinqToDbConnectionOptionsBuilder, String) Configure connection to use Access ODBC provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseAccessODBC(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString Access connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseAccessOleDb(LinqToDbConnectionOptionsBuilder, String) Configure connection to use Access OleDb provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseAccessOleDb(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString Access connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseAse(LinqToDbConnectionOptionsBuilder, String) Configure connection to use SAP/Sybase ASE default provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseAse(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString SAP/Sybase ASE connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Remarks Provider selection available only for .NET Framework applications. Default provider will be choosen by probing current folder for provider assembly and if it is not found, default to official Sybase.AdoNet45.AseClient provider. | Improve this Doc View Source UseAse(LinqToDbConnectionOptionsBuilder, String, Boolean) Configure connection to use specific SAP/Sybase ASE provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseAse(this LinqToDbConnectionOptionsBuilder builder, string connectionString, bool useNativeProvider) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString SAP/Sybase ASE connection string. System.Boolean useNativeProvider if true , Sybase.AdoNet45.AseClient provider will be used; othwerwise managed AdoNetCore.AseClient . Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseDB2(LinqToDbConnectionOptionsBuilder, String) Configure connection to use DB2 default provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseDB2(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString DB2 connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Remarks DB2 provider will be choosen automatically: For more fine-grained configuration see UseDB2(LinqToDbConnectionOptionsBuilder, String, DB2Version) overload. | Improve this Doc View Source UseDB2(LinqToDbConnectionOptionsBuilder, String, DB2Version) Configure connection to use specific DB2 provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseDB2(this LinqToDbConnectionOptionsBuilder builder, string connectionString, DB2Version version) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString DB2 connection string. DB2Version version DB2 server version. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseFirebird(LinqToDbConnectionOptionsBuilder, String) Configure connection to use Firebird provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseFirebird(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString Firebird connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseInformix(LinqToDbConnectionOptionsBuilder, String) Configure connection to use Informix default provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseInformix(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString Informix connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Remarks Default provider will be choosen by probing current folder for provider assembly and if it is not found, default to IBM.Data.DB2 provider. This is not applicable to .NET Core applications as they always use IBM.Data.DB2 provider. | Improve this Doc View Source UseInformix(LinqToDbConnectionOptionsBuilder, String, Boolean) Configure connection to use specific Informix provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseInformix(this LinqToDbConnectionOptionsBuilder builder, string connectionString, bool useDB2Provider) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString Informix connection string. System.Boolean useDB2Provider if true , IBM.Data.DB2 provider will be used; othwerwise IBM.Data.Informix . Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseMySql(LinqToDbConnectionOptionsBuilder, String) Configure connection to use MySql default provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseMySql(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString MySql connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Remarks Default provider will be choosen by probing current folder for provider assembly and if it is not found, default to MySql.Data provider. For more fine-grained configuration see UseMySqlData(LinqToDbConnectionOptionsBuilder, String) and UseMySqlConnector(LinqToDbConnectionOptionsBuilder, String) methods. | Improve this Doc View Source UseMySqlConnector(LinqToDbConnectionOptionsBuilder, String) Configure connection to use MySqlConnector MySql provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseMySqlConnector(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString MySql connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseMySqlData(LinqToDbConnectionOptionsBuilder, String) Configure connection to use MySql.Data MySql provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseMySqlData(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString MySql connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseOracle(LinqToDbConnectionOptionsBuilder, String) Configure connection to use Oracle default provider, dialect and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseOracle(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString Oracle connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Remarks By default Linq To DB tries to load managed version of Oracle provider. Oracle dialect will be choosen automatically: For more fine-grained configuration see UseOracle(LinqToDbConnectionOptionsBuilder, String, OracleVersion) overload. | Improve this Doc View Source UseOracle(LinqToDbConnectionOptionsBuilder, String, OracleVersion) Configure connection to use Oracle default provider, specific dialect and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseOracle(this LinqToDbConnectionOptionsBuilder builder, string connectionString, OracleVersion dialect) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString Oracle connection string. OracleVersion dialect Oracle dialect support level. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Remarks By default Linq To DB tries to load managed version of Oracle provider. | Improve this Doc View Source UseOracle(LinqToDbConnectionOptionsBuilder, String, OracleVersion, Boolean) Configure connection to use specific Oracle provider, dialect and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseOracle(this LinqToDbConnectionOptionsBuilder builder, string connectionString, OracleVersion dialect, bool useNativeProvider) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString Oracle connection string. OracleVersion dialect Oracle dialect support level. System.Boolean useNativeProvider if true , Oracle.DataAccess provider will be used; othwerwise managed Oracle.ManagedDataAccess . Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UsePostgreSQL(LinqToDbConnectionOptionsBuilder, String) Configure connection to use PostgreSQL Npgsql provider, default dialect and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UsePostgreSQL(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString PostgreSQL connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Remarks PostgreSQL dialect will be choosen automatically: For more fine-grained configuration see UsePostgreSQL(LinqToDbConnectionOptionsBuilder, String, PostgreSQLVersion) overload. | Improve this Doc View Source UsePostgreSQL(LinqToDbConnectionOptionsBuilder, String, PostgreSQLVersion) Configure connection to use PostgreSQL Npgsql provider, specific dialect and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UsePostgreSQL(this LinqToDbConnectionOptionsBuilder builder, string connectionString, PostgreSQLVersion dialect) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString PostgreSQL connection string. PostgreSQLVersion dialect POstgreSQL dialect support level. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseSapHana(LinqToDbConnectionOptionsBuilder, String) Configure connection to use SAP HANA default provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseSapHana(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString SAP HANA connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Remarks Default provider will be Sap.Data.Hana native provider for .NET Framework and .NET Core applications and ODBC provider for .NET STANDARD builds. | Improve this Doc View Source UseSapHanaNative(LinqToDbConnectionOptionsBuilder, String) Configure connection to use native SAP HANA provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseSapHanaNative(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString SAP HANA connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseSapHanaODBC(LinqToDbConnectionOptionsBuilder, String) Configure connection to use SAP HANA ODBC provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseSapHanaODBC(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString SAP HANA connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseSqlCe(LinqToDbConnectionOptionsBuilder, String) Configure connection to use SQL CE provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseSqlCe(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString SQL CE connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseSQLite(LinqToDbConnectionOptionsBuilder, String) Configure connection to use SQLite default provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseSQLite(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString SQLite connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Remarks Default provider will be choosen by probing current folder for provider assembly and if it is not found, default to System.Data.Sqlite provider. For more fine-grained configuration see UseSQLiteOfficial(LinqToDbConnectionOptionsBuilder, String) and UseSQLiteMicrosoft(LinqToDbConnectionOptionsBuilder, String) methods. | Improve this Doc View Source UseSQLiteMicrosoft(LinqToDbConnectionOptionsBuilder, String) Configure connection to use Microsoft.Data.Sqlite SQLite provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseSQLiteMicrosoft(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString SQLite connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseSQLiteOfficial(LinqToDbConnectionOptionsBuilder, String) Configure connection to use System.Data.Sqlite SQLite provider and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseSQLiteOfficial(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString SQLite connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. | Improve this Doc View Source UseSqlServer(LinqToDbConnectionOptionsBuilder, String) Configure connection to use SQL Server default provider, dialect and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseSqlServer(this LinqToDbConnectionOptionsBuilder builder, string connectionString) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString SQL Server connection string. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained. Remarks Default provider configured using Provider option and set to SystemDataSqlClient by default. SQL Server dialect will be choosen automatically: For more fine-grained configuration see UseSqlServer(LinqToDbConnectionOptionsBuilder, String, SqlServerProvider, SqlServerVersion) overload. | Improve this Doc View Source UseSqlServer(LinqToDbConnectionOptionsBuilder, String, SqlServerProvider, SqlServerVersion) Configure connection to use specific SQL Server provider, dialect and connection string. Declaration public static LinqToDbConnectionOptionsBuilder UseSqlServer(this LinqToDbConnectionOptionsBuilder builder, string connectionString, SqlServerProvider provider, SqlServerVersion dialect) Parameters Type Name Description LinqToDbConnectionOptionsBuilder builder Instance of LinqToDbConnectionOptionsBuilder . System.String connectionString SQL Server connection string. SqlServerProvider provider SQL Server provider to use. SqlServerVersion dialect SQL Server dialect support level. Returns Type Description LinqToDbConnectionOptionsBuilder The builder instance so calls can be chained."
  },
  "api/LinqToDB.Configuration.LinqToDBSection.html": {
    "href": "api/LinqToDB.Configuration.LinqToDBSection.html",
    "title": "Class LinqToDBSection | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBSection Implementation of custom configuration section. Inheritance System.Object LinqToDBSection Implements ILinqToDBSettings Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public class LinqToDBSection : ConfigurationSection, ILinqToDBSettings Properties | Improve this Doc View Source DataProviders Gets list of data providers configuration elements. Declaration public DataProviderElementCollection DataProviders { get; } Property Value Type Description DataProviderElementCollection | Improve this Doc View Source DefaultConfiguration Gets default connection configuration name. Declaration public string DefaultConfiguration { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultDataProvider Gets default data provider configuration name. Declaration public string DefaultDataProvider { get; } Property Value Type Description System.String | Improve this Doc View Source Instance linq2db configuration section. Declaration public static LinqToDBSection Instance { get; } Property Value Type Description LinqToDBSection | Improve this Doc View Source Properties Declaration protected override ConfigurationPropertyCollection Properties { get; } Property Value Type Description ConfigurationPropertyCollection Explicit Interface Implementations | Improve this Doc View Source ILinqToDBSettings.ConnectionStrings Declaration IEnumerable<IConnectionStringSettings> ILinqToDBSettings.ConnectionStrings { get; } Returns Type Description IEnumerable < IConnectionStringSettings > | Improve this Doc View Source ILinqToDBSettings.DataProviders Declaration IEnumerable<IDataProviderSettings> ILinqToDBSettings.DataProviders { get; } Returns Type Description IEnumerable < IDataProviderSettings > Implements ILinqToDBSettings Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Configuration.NamedValue.html": {
    "href": "api/LinqToDB.Configuration.NamedValue.html",
    "title": "Class NamedValue | Linq To DB (aka linq2db)",
    "keywords": "Class NamedValue Name-value pair. Inheritance System.Object NamedValue Namespace : LinqToDB.Configuration Assembly : linq2db.dll Syntax public class NamedValue : object Properties | Improve this Doc View Source Name Gets or sets name for value. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value Gets ot sets value. Declaration public string Value { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.BulkCopyOptions.html": {
    "href": "api/LinqToDB.Data.BulkCopyOptions.html",
    "title": "Class BulkCopyOptions | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyOptions Defines behavior of method. Inheritance System.Object BulkCopyOptions Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class BulkCopyOptions : object Constructors | Improve this Doc View Source BulkCopyOptions() Declaration public BulkCopyOptions() | Improve this Doc View Source BulkCopyOptions(BulkCopyOptions) Declaration public BulkCopyOptions(BulkCopyOptions options) Parameters Type Name Description BulkCopyOptions options Properties | Improve this Doc View Source BulkCopyTimeout Declaration public int? BulkCopyTimeout { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source BulkCopyType Declaration public BulkCopyType BulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source CheckConstraints Declaration public bool? CheckConstraints { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source DatabaseName Gets or sets explicit name of target database instead of one, configured for copied entity in mapping schema. See method for support information per provider. Declaration public string? DatabaseName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source FireTriggers Declaration public bool? FireTriggers { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source KeepIdentity If this option set to true, bulk copy will use values of columns, marked with IsIdentity flag. SkipOnInsert flag in this case will be ignored. Otherwise those columns will be skipped and values will be generated by server. Not compatible with RowByRow mode. Declaration public bool? KeepIdentity { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source KeepNulls Declaration public bool? KeepNulls { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source MaxBatchSize Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. Declaration public int? MaxBatchSize { get; set; } Property Value Type Description System.Nullable < System.Int32 > The integer value of the MaxBatchSize property, or zero if no value has been set. | Improve this Doc View Source MaxParametersForBatch If set, will override the Maximum parameters per batch statement from MaxParameters . Declaration public int? MaxParametersForBatch { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source NotifyAfter Gets or sets counter after how many copied records RowsCopiedCallback should be called. E.g. if you set it to 10, callback will be called after each 10 copied records. To disable callback, set this option to 0 (default value). Declaration public int NotifyAfter { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source RowsCopiedCallback Gets or sets callback method that will be called by BulkCopy operation after each NotifyAfter rows copied. This callback will not be used if NotifyAfter set to 0. Declaration public Action<BulkCopyRowsCopied>? RowsCopiedCallback { get; set; } Property Value Type Description System.Nullable < Action < BulkCopyRowsCopied >> | Improve this Doc View Source SchemaName Gets or sets explicit name of target schema/owner instead of one, configured for copied entity in mapping schema. See method for support information per provider. Declaration public string? SchemaName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ServerName Gets or sets explicit name of target server instead of one, configured for copied entity in mapping schema. See method for support information per provider. Also note that it is not supported by provider-specific insert method. Declaration public string? ServerName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TableLock Declaration public bool? TableLock { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source TableName Gets or sets explicit name of target table instead of one, configured for copied entity in mapping schema. Declaration public string? TableName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TableOptions Gets or sets TableOptions flags overrides instead of configured for copied entity in mapping schema. See IsTemporary<T>(ITable<T>, Boolean) method for support information per provider. Declaration public TableOptions TableOptions { get; set; } Property Value Type Description TableOptions | Improve this Doc View Source UseInternalTransaction Declaration public bool? UseInternalTransaction { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source UseParameters Gets or sets whether to Always use Parameters for MultipleRowsCopy. Default is false. If True, provider's override for MaxParameters will be used to determine the maximum number of rows per insert, Unless overridden by MaxParametersForBatch . Declaration public bool UseParameters { get; set; } Property Value Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.BulkCopyRowsCopied.html": {
    "href": "api/LinqToDB.Data.BulkCopyRowsCopied.html",
    "title": "Class BulkCopyRowsCopied | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyRowsCopied Inheritance System.Object BulkCopyRowsCopied Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class BulkCopyRowsCopied : object Properties | Improve this Doc View Source Abort Gets or sets a value that indicates whether the bulk copy operation should be aborted. Declaration public bool Abort { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RowsCopied Gets a value that returns the number of rows copied during the current bulk copy operation. Declaration public long RowsCopied { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source StartTime Gets operation execution start time. Declaration public DateTime StartTime { get; } Property Value Type Description DateTime Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.BulkCopyType.html": {
    "href": "api/LinqToDB.Data.BulkCopyType.html",
    "title": "Enum BulkCopyType | Linq To DB (aka linq2db)",
    "keywords": "Enum BulkCopyType Bulk copy implementation type. For more details on support level by provider see this article . Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public enum BulkCopyType : int Fields Name Description Default LINQ To DB will select copy method based on current provider. Default method usually set at [PROVIDER_NAME_HERE]Tools.DefaultBulkCopyType. MultipleRows Data will be inserted into table as a batch insert using INSERT FROM SELECT or similar code. If method not supported, it will be downgraded to RowByRow method. ProviderSpecific Data will be inserted using native bulk copy functionality if supported. If method not supported, it will be downgraded to RowByRow method. RowByRow Data will be inserted into table as a sequence of selects, row by row. Extension Methods Map.DeepCopy<BulkCopyType>() Sql.IsDistinctFrom<BulkCopyType>(BulkCopyType) Sql.IsDistinctFrom<BulkCopyType>(Nullable<BulkCopyType>) Sql.IsNotDistinctFrom<BulkCopyType>(BulkCopyType) Sql.IsNotDistinctFrom<BulkCopyType>(Nullable<BulkCopyType>) SqlExtensions.In<BulkCopyType>(IEnumerable<BulkCopyType>) SqlExtensions.In<BulkCopyType>(IQueryable<BulkCopyType>) SqlExtensions.In<BulkCopyType>(BulkCopyType[]) SqlExtensions.In<BulkCopyType>(BulkCopyType, BulkCopyType) SqlExtensions.In<BulkCopyType>(BulkCopyType, BulkCopyType, BulkCopyType) SqlExtensions.NotIn<BulkCopyType>(IEnumerable<BulkCopyType>) SqlExtensions.NotIn<BulkCopyType>(IQueryable<BulkCopyType>) SqlExtensions.NotIn<BulkCopyType>(BulkCopyType[]) SqlExtensions.NotIn<BulkCopyType>(BulkCopyType, BulkCopyType) SqlExtensions.NotIn<BulkCopyType>(BulkCopyType, BulkCopyType, BulkCopyType)"
  },
  "api/LinqToDB.Data.CommandInfo.html": {
    "href": "api/LinqToDB.Data.CommandInfo.html",
    "title": "Class CommandInfo | Linq To DB (aka linq2db)",
    "keywords": "Class CommandInfo Provides database connection command abstraction. Inheritance System.Object CommandInfo Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class CommandInfo : object Constructors | Improve this Doc View Source CommandInfo(DataConnection, String) Creates database command instance using provided database connection and command text. Declaration public CommandInfo(DataConnection dataConnection, string commandText) Parameters Type Name Description DataConnection dataConnection Database connection instance. System.String commandText Command text. | Improve this Doc View Source CommandInfo(DataConnection, String, DataParameter) Creates database command instance using provided database connection, command text and single parameter. Declaration public CommandInfo(DataConnection dataConnection, string commandText, DataParameter parameter) Parameters Type Name Description DataConnection dataConnection Database connection instance. System.String commandText Command text. DataParameter parameter Command parameter. | Improve this Doc View Source CommandInfo(DataConnection, String, DataParameter[]) Creates database command instance using provided database connection, command text and parameters. Declaration public CommandInfo(DataConnection dataConnection, string commandText, params DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection Database connection instance. System.String commandText Command text. DataParameter [] parameters List of command parameters. | Improve this Doc View Source CommandInfo(DataConnection, String, Nullable<Object>) Creates database command instance using provided database connection, command text and parameters. Declaration public CommandInfo(DataConnection dataConnection, string commandText, object? parameters) Parameters Type Name Description DataConnection dataConnection Database connection instance. System.String commandText Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Fields | Improve this Doc View Source CommandBehavior Command behavior flags. See for more details. Default value: . Declaration public CommandBehavior CommandBehavior Field Value Type Description CommandBehavior | Improve this Doc View Source CommandText Command text. Declaration public string CommandText Field Value Type Description System.String | Improve this Doc View Source CommandType Type of command. See for all supported types. Default value: . Declaration public CommandType CommandType Field Value Type Description CommandType | Improve this Doc View Source DataConnection Instance of database connection, associated with command. Declaration public DataConnection DataConnection Field Value Type Description DataConnection | Improve this Doc View Source Parameters Command parameters. Declaration public DataParameter[] Parameters Field Value Type Description DataParameter [] Methods | Improve this Doc View Source ClearObjectReaderCache() Clears global cache of object mapping functions from query results and mapping functions from value to DataParameter . Declaration public static void ClearObjectReaderCache() | Improve this Doc View Source Execute() Executes command and returns number of affected records. Declaration public int Execute() Returns Type Description System.Int32 Number of records, affected by command execution. | Improve this Doc View Source Execute<T>() Executes command and returns single value. Saves result values for output and reference parameters to corresponding DataParameter object. Declaration public T Execute<T>() Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync(CancellationToken) Executes command asynchronously and returns number of affected records. Declaration public async Task<int> ExecuteAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync<T>(CancellationToken) Executes command asynchronously and returns single value. Declaration public async Task<T> ExecuteAsync<T>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProc() Executes command using command type and returns number of affected records. Saves result values for output and reference parameters to corresponding DataParameter object. Declaration public int ExecuteProc() Returns Type Description System.Int32 Number of records, affected by command execution. | Improve this Doc View Source ExecuteProc<T>() Executes command using command type and returns single value. Declaration public T ExecuteProc<T>() Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProcAsync(CancellationToken) Executes command using command type asynchronously and returns number of affected records. Saves result values for output and reference parameters to corresponding DataParameter object. Declaration public Task<int> ExecuteProcAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteProcAsync<T>(CancellationToken) Executes command using command type asynchronously and returns single value. Saves result values for output and reference parameters to corresponding DataParameter object. Declaration public Task<T> ExecuteProcAsync<T>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteReader() Executes command and returns data reader instance. Declaration public DataReader ExecuteReader() Returns Type Description DataReader Data reader object. | Improve this Doc View Source ExecuteReaderAsync(CancellationToken) Executes command asynchronously and returns data reader instance. Declaration public async Task<DataReaderAsync> ExecuteReaderAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < DataReaderAsync > Task with data reader object. | Improve this Doc View Source ExecuteReaderProc() Executes command using command type and returns data reader instance. Declaration public DataReader ExecuteReaderProc() Returns Type Description DataReader Data reader object. | Improve this Doc View Source ExecuteReaderProcAsync(CancellationToken) Executes command asynchronously using command type and returns data reader instance. Declaration public Task<DataReaderAsync> ExecuteReaderProcAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < DataReaderAsync > Data reader object. | Improve this Doc View Source Query<T>() Executes command and returns results as collection of values of specified type. Declaration public IEnumerable<T> Query<T>() Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(T) Executes command and returns results as collection of values of specified type. Declaration public IEnumerable<T> Query<T>(T template) Parameters Type Name Description T template This value used only for T parameter type inference, which makes this method usable with anonymous types. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(Func<IDataReader, T>) Executes command and returns results as collection of values, mapped using provided mapping function. Declaration public IEnumerable<T> Query<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryAsync<T>(CancellationToken) Executes command asynchronously and returns results as collection of values of specified type. Declaration public async Task<IEnumerable<T>> QueryAsync<T>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryAsync<T>(Func<IDataReader, T>, CancellationToken) Executes command asynchronously and returns results as collection of values, mapped using provided mapping function. Declaration public async Task<IEnumerable<T>> QueryAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken = null) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryForEachAsync<T>(Action<T>, CancellationToken) Executes command asynchronously and apply provided action to each record. Declaration public async Task QueryForEachAsync<T>(Action<T> action, CancellationToken cancellationToken = null) Parameters Type Name Description Action <T> action Action, applied to each result record. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Returns task. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryForEachAsync<T>(Func<IDataReader, T>, Action<T>, CancellationToken) Executes command asynchronously and apply provided action to each record, mapped using provided mapping function. Declaration public async Task QueryForEachAsync<T>(Func<IDataReader, T> objectReader, Action<T> action, CancellationToken cancellationToken = null) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. Action <T> action Action, applied to each result record. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Returns task. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryMultiple<T>() Executes command and returns a result containing multiple result sets. Declaration public T QueryMultiple<T>() where T : class Returns Type Description T Returns result. Type Parameters Name Description T Result set type. | Improve this Doc View Source QueryMultipleAsync<T>(CancellationToken) Executes command asynchronously and returns a result containing multiple result sets. Saves result values for output and reference parameters to corresponding DataParameter object. Declaration public async Task<T> QueryMultipleAsync<T>(CancellationToken cancellationToken = null) where T : class Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T> A task that represents the asynchronous operation. The task result contains object with multiply result sets. Type Parameters Name Description T Result set type. | Improve this Doc View Source QueryProc<T>() Executes command using command type and returns results as collection of values of specified type. Declaration public IEnumerable<T> QueryProc<T>() Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>(T) Executes command using command type and returns results as collection of values of specified type. Declaration public IEnumerable<T> QueryProc<T>(T template) Parameters Type Name Description T template This value used only for T parameter type inference, which makes this method usable with anonymous types. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>(Func<IDataReader, T>) Executes command using command type and returns results as collection of values, mapped using provided mapping function. Declaration public IEnumerable<T> QueryProc<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(T, CancellationToken) Executes command asynchronously using command type and returns results as collection of values of specified type. Declaration public Task<IEnumerable<T>> QueryProcAsync<T>(T template, CancellationToken cancellationToken = null) Parameters Type Name Description T template This value used only for T parameter type inference, which makes this method usable with anonymous types. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(CancellationToken) Executes command asynchronously using command type and returns results as collection of values of specified type. Declaration public Task<IEnumerable<T>> QueryProcAsync<T>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(Func<IDataReader, T>, CancellationToken) Executes command asynchronously using command type and returns results as collection of values, mapped using provided mapping function. Declaration public Task<IEnumerable<T>> QueryProcAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken = null) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcMultiple<T>() Executes command using command type and returns a result containing multiple result sets. Saves result values for output and reference parameters to corresponding DataParameter object. Declaration public T QueryProcMultiple<T>() where T : class Returns Type Description T Returns result. Type Parameters Name Description T Result set type. | Improve this Doc View Source QueryProcMultipleAsync<T>(CancellationToken) Executes command asynchronously using command type and returns a result containing multiple result sets. Declaration public Task<T> QueryProcMultipleAsync<T>(CancellationToken cancellationToken = null) where T : class Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T> A task that represents the asynchronous operation. The task result contains object with multiply result sets. Type Parameters Name Description T Result set type. | Improve this Doc View Source QueryToArrayAsync<T>(CancellationToken) Executes command asynchronously and returns array of values. Declaration public async Task<T[]> QueryToArrayAsync<T>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(Func<IDataReader, T>, CancellationToken) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public async Task<T[]> QueryToArrayAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken = null) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(CancellationToken) Executes command asynchronously and returns list of values. Declaration public async Task<List<T>> QueryToListAsync<T>(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(Func<IDataReader, T>, CancellationToken) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public async Task<List<T>> QueryToListAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken = null) Parameters Type Name Description Func < IDataReader , T> objectReader Record mapping function from data reader. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.DataConnection.html": {
    "href": "api/LinqToDB.Data.DataConnection.html",
    "title": "Class DataConnection | Linq To DB (aka linq2db)",
    "keywords": "Class DataConnection Implements persistent database connection abstraction over different database engines. Could be initialized using connection string name or connection string, or attached to existing connection or transaction. Inheritance System.Object DataConnection Implements IDataContext IEntityServices IDisposable IAsyncDisposable ICloneable Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataConnection : object, IDataContext, IEntityServices, IAsyncDisposable Constructors | Improve this Doc View Source DataConnection() Creates database connection object that uses default connection configuration from DefaultConfiguration property. Declaration public DataConnection() | Improve this Doc View Source DataConnection(LinqToDbConnectionOptions) Creates database connection object that uses a LinqToDbConnectionOptions to configure the connection. Declaration public DataConnection(LinqToDbConnectionOptions options) Parameters Type Name Description LinqToDbConnectionOptions options Options, setup ahead of time. | Improve this Doc View Source DataConnection(IDataProvider, Func<IDbConnection>) Creates database connection object that uses specified database provider and connection factory. Declaration public DataConnection(IDataProvider dataProvider, Func<IDbConnection> connectionFactory) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. Func < IDbConnection > connectionFactory Database connection factory method. | Improve this Doc View Source DataConnection(IDataProvider, Func<IDbConnection>, MappingSchema) Creates database connection object that uses specified database provider, connection factory and mapping schema. Declaration public DataConnection(IDataProvider dataProvider, Func<IDbConnection> connectionFactory, MappingSchema mappingSchema) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. Func < IDbConnection > connectionFactory Database connection factory method. MappingSchema mappingSchema Mapping schema to use with this connection. | Improve this Doc View Source DataConnection(IDataProvider, IDbConnection) Creates database connection object that uses specified database provider and connection. Declaration public DataConnection(IDataProvider dataProvider, IDbConnection connection) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. IDbConnection connection Existing database connection to use. Remarks connection would not be disposed. | Improve this Doc View Source DataConnection(IDataProvider, IDbConnection, MappingSchema) Creates database connection object that uses specified database provider, connection and mapping schema. Declaration public DataConnection(IDataProvider dataProvider, IDbConnection connection, MappingSchema mappingSchema) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. IDbConnection connection Existing database connection to use. MappingSchema mappingSchema Mapping schema to use with this connection. | Improve this Doc View Source DataConnection(IDataProvider, IDbConnection, Boolean) Creates database connection object that uses specified database provider and connection. Declaration public DataConnection(IDataProvider dataProvider, IDbConnection connection, bool disposeConnection) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. IDbConnection connection Existing database connection to use. System.Boolean disposeConnection If true connection would be disposed on DataConnection disposing. | Improve this Doc View Source DataConnection(IDataProvider, IDbTransaction) Creates database connection object that uses specified database provider and transaction. Declaration public DataConnection(IDataProvider dataProvider, IDbTransaction transaction) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. IDbTransaction transaction Existing database transaction to use. | Improve this Doc View Source DataConnection(IDataProvider, IDbTransaction, MappingSchema) Creates database connection object that uses specified database provider, transaction and mapping schema. Declaration public DataConnection(IDataProvider dataProvider, IDbTransaction transaction, MappingSchema mappingSchema) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. IDbTransaction transaction Existing database transaction to use. MappingSchema mappingSchema Mapping schema to use with this connection. | Improve this Doc View Source DataConnection(IDataProvider, String) Creates database connection object that uses specified database provider and connection string. Declaration public DataConnection(IDataProvider dataProvider, string connectionString) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. System.String connectionString Database connection string to use for connection with database. | Improve this Doc View Source DataConnection(IDataProvider, String, MappingSchema) Creates database connection object that uses specified database provider, connection string and mapping schema. Declaration public DataConnection(IDataProvider dataProvider, string connectionString, MappingSchema mappingSchema) Parameters Type Name Description IDataProvider dataProvider Database provider implementation to use with this connection. System.String connectionString Database connection string to use for connection with database. MappingSchema mappingSchema Mapping schema to use with this connection. | Improve this Doc View Source DataConnection(MappingSchema) Creates database connection object that uses default connection configuration from DefaultConfiguration property and provided mapping schema. Declaration public DataConnection(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Mapping schema to use with this connection. | Improve this Doc View Source DataConnection(Nullable<String>) Creates database connection object that uses provided connection configuration. Declaration public DataConnection(string? configurationString) Parameters Type Name Description System.Nullable < System.String > configurationString Name of database connection configuration to use with this connection. In case of null , configuration from DefaultConfiguration property will be used. | Improve this Doc View Source DataConnection(Nullable<String>, MappingSchema) Creates database connection object that uses provided connection configuration and mapping schema. Declaration public DataConnection(string? configurationString, MappingSchema mappingSchema) Parameters Type Name Description System.Nullable < System.String > configurationString Name of database connection configuration to use with this connection. In case of null, configuration from DefaultConfiguration property will be used. MappingSchema mappingSchema Mapping schema to use with this connection. | Improve this Doc View Source DataConnection(String, String) Creates database connection object that uses specified database provider and connection string. Declaration public DataConnection(string providerName, string connectionString) Parameters Type Name Description System.String providerName Name of database provider to use with this connection. ProviderName class for list of providers. System.String connectionString Database connection string to use for connection with database. | Improve this Doc View Source DataConnection(String, String, MappingSchema) Creates database connection object that uses specified database provider, connection string and mapping schema. Declaration public DataConnection(string providerName, string connectionString, MappingSchema mappingSchema) Parameters Type Name Description System.String providerName Name of database provider to use with this connection. ProviderName class for list of providers. System.String connectionString Database connection string to use for connection with database. MappingSchema mappingSchema Mapping schema to use with this connection. Fields | Improve this Doc View Source LastParameters Contains last parameters, sent to database using current connection. Declaration public IDataParameterCollection? LastParameters Field Value Type Description System.Nullable < IDataParameterCollection > | Improve this Doc View Source LastQuery Contains text of last command, sent to database using current connection. Declaration public string? LastQuery Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source WriteTraceLine Trace function. By Default use class for logging, but could be replaced to log e.g. to your log file. will be ignored if WriteTraceWith(Action<Nullable<String>, Nullable<String>, TraceLevel>) is called on builder First parameter contains trace message. Second parameter contains trace message category ( ). Third parameter contains trace level for message ( ). TraceSwitch Should only not use to write trace lines, only use WriteTraceLineConnection . Declaration public static Action<string?, string?, TraceLevel> WriteTraceLine Field Value Type Description Action < System.Nullable < System.String >, System.Nullable < System.String >, TraceLevel > Properties | Improve this Doc View Source Command Gets or sets command object, used by current connection. Declaration public IDbCommand Command { get; set; } Property Value Type Description IDbCommand | Improve this Doc View Source CommandTimeout Gets or sets command execution timeout in seconds. Negative timeout value means that default timeout will be used. 0 timeout value corresponds to infinite timeout. By default timeout is not set and default value for current provider used. Declaration public int CommandTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConfigurationString Database configuration name (connection string name). Declaration public string? ConfigurationString { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Connection Gets underlying database connection, used by current connection object. Declaration public IDbConnection Connection { get; } Property Value Type Description IDbConnection | Improve this Doc View Source ConnectionString Database connection string. Declaration public string? ConnectionString { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataProvider Database provider implementation for specific database engine. Declaration public IDataProvider DataProvider { get; } Property Value Type Description IDataProvider | Improve this Doc View Source DefaultConfiguration Declaration public static string? DefaultConfiguration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DefaultDataProvider Declaration public static string? DefaultDataProvider { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DefaultSettings Gets or sets default connection settings. By default contains settings from linq2db configuration section from configuration file (not supported by .Net Core). ILinqToDBSettings Declaration public static ILinqToDBSettings DefaultSettings { get; set; } Property Value Type Description ILinqToDBSettings | Improve this Doc View Source Disposed Declaration protected bool Disposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ID For internal use only. Declaration public int ID { get; } Property Value Type Description System.Int32 | Improve this Doc View Source InlineParameters Gets or sets option to force inline parameter values as literals into command text. If parameter inlining not supported for specific value type, it will be used as parameter. Declaration public bool InlineParameters { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsMarsEnabled Gets or sets status of Multiple Active Result Sets (MARS) feature. This feature available only for SQL Azure and SQL Server 2005+. Declaration public bool IsMarsEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MappingSchema Gets maping schema, used for current connection. Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source NextQueryHints Gets list of query hints (writable collection), that will be used only for next query, executed through current connection. Declaration public List<string> NextQueryHints { get; } Property Value Type Description List < System.String > | Improve this Doc View Source OnEntityCreated Occurs when a new entity is created during query materialization. Not triggered for explicitly constructed objects. In code below event could be triggered only for first query: // r created by linq2db from r in db.table select r; // Entity constructor specified explicitly by user (projection) from r in db.table select new Entity() { field = r.field }; . Declaration public Action<EntityCreatedEventArgs>? OnEntityCreated { get; set; } Property Value Type Description System.Nullable < Action < EntityCreatedEventArgs >> | Improve this Doc View Source OnTrace Sets trace handler, used for all new connections unless overriden in LinqToDbConnectionOptions defaults to calling LinqToDB.Data.DataConnection.OnTraceInternal(LinqToDB.Data.TraceInfo) . Declaration public static Action<TraceInfo> OnTrace { set; } Property Value Type Description Action < TraceInfo > | Improve this Doc View Source OnTraceConnection Gets or sets trace handler, used for current connection instance. Configured on the connection builder using WithTracing(Action<TraceInfo>) . defaults to OnTrace . Declaration public Action<TraceInfo> OnTraceConnection { get; set; } Property Value Type Description Action < TraceInfo > | Improve this Doc View Source QueryHints Gets list of query hints (writable collection), that will be used for all queries, executed through current connection. Declaration public List<string> QueryHints { get; } Property Value Type Description List < System.String > | Improve this Doc View Source RetryPolicy Retry policy for current connection. Declaration public IRetryPolicy RetryPolicy { get; set; } Property Value Type Description IRetryPolicy | Improve this Doc View Source ThrowOnDisposed Declaration public bool? ThrowOnDisposed { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source TraceSwitch Gets or sets global data connection trace options. Used for all new connections unless WithTraceLevel(TraceLevel) is called on builder. defaults to off unless library was built in debug mode. Should only be used when TraceSwitchConnection can not be used! Declaration public static TraceSwitch TraceSwitch { get; set; } Property Value Type Description TraceSwitch | Improve this Doc View Source TraceSwitchConnection gets or sets the trace switch, this is used by some methods to determine if OnTraceConnection should be called. defaults to TraceSwitch used for current connection instance. Declaration public TraceSwitch TraceSwitchConnection { get; set; } Property Value Type Description TraceSwitch | Improve this Doc View Source Transaction Gets current transaction, associated with connection. Declaration public IDbTransaction? Transaction { get; } Property Value Type Description System.Nullable < IDbTransaction > | Improve this Doc View Source WriteTraceLineConnection Gets the delegate to write logging messages for this connection. Defaults to WriteTraceLine . Used for the current instance. Declaration public Action<string?, string?, TraceLevel> WriteTraceLineConnection { get; } Property Value Type Description Action < System.Nullable < System.String >, System.Nullable < System.String >, TraceLevel > Methods | Improve this Doc View Source AddConfiguration(String, String, IDataProvider) Register connection configuration with specified connection string and database provider implementation. Declaration public static void AddConfiguration(string configuration, string connectionString, IDataProvider dataProvider = null) Parameters Type Name Description System.String configuration Connection configuration name. System.String connectionString Connection string. IDataProvider dataProvider Database provider. If not specified, will use provider, registered using configuration value. | Improve this Doc View Source AddDataProvider(IDataProvider) Registers database provider implementation using Name name. Declaration public static void AddDataProvider(IDataProvider dataProvider) Parameters Type Name Description IDataProvider dataProvider Database provider implementation. | Improve this Doc View Source AddDataProvider(String, IDataProvider) Registers database provider implementation by provided unique name. Declaration public static void AddDataProvider(string providerName, IDataProvider dataProvider) Parameters Type Name Description System.String providerName Provider name, to which provider implementation will be mapped. IDataProvider dataProvider Database provider implementation. | Improve this Doc View Source AddMappingSchema(MappingSchema) Adds additional mapping schema to current connection. Declaration public DataConnection AddMappingSchema(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Mapping schema. Returns Type Description DataConnection Current connection object. Remarks DataConnection will share MappingSchema instances that were created by combining same mapping schemas. | Improve this Doc View Source AddOrSetConfiguration(String, String, String) Declaration public static void AddOrSetConfiguration(string configuration, string connectionString, string dataProvider) Parameters Type Name Description System.String configuration System.String connectionString System.String dataProvider | Improve this Doc View Source AddProviderDetector(Func<IConnectionStringSettings, String, IDataProvider>) Registers database provider factory method. Factory accepts connection string settings and connection string. Could return null , if cannot create provider instance using provided options. Declaration public static void AddProviderDetector(Func<IConnectionStringSettings, string, IDataProvider> providerDetector) Parameters Type Name Description Func < IConnectionStringSettings , System.String , IDataProvider > providerDetector Factory method delegate. | Improve this Doc View Source BeginTransaction() Starts new transaction for current connection with default isolation level. If connection already has transaction, it will be rolled back. Declaration public virtual DataConnectionTransaction BeginTransaction() Returns Type Description DataConnectionTransaction Database transaction object. | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts new transaction for current connection with specified isolation level. If connection already have transaction, it will be rolled back. Declaration public virtual DataConnectionTransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description IsolationLevel isolationLevel Transaction isolation level. Returns Type Description DataConnectionTransaction Database transaction object. | Improve this Doc View Source BeginTransactionAsync(CancellationToken) Starts new transaction asynchronously for current connection with default isolation level. If connection already has transaction, it will be rolled back. Declaration public virtual async Task<DataConnectionTransaction> BeginTransactionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < DataConnectionTransaction > Database transaction object. | Improve this Doc View Source BeginTransactionAsync(IsolationLevel, CancellationToken) Starts new transaction asynchronously for current connection with specified isolation level. If connection already have transaction, it will be rolled back. Declaration public virtual async Task<DataConnectionTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken = null) Parameters Type Name Description IsolationLevel isolationLevel Transaction isolation level. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < DataConnectionTransaction > Database transaction object. | Improve this Doc View Source CheckAndThrowOnDisposed() Declaration protected void CheckAndThrowOnDisposed() | Improve this Doc View Source ClearObjectReaderCache() Removes cached data mappers. Declaration public static void ClearObjectReaderCache() | Improve this Doc View Source Clone() Clones current connection. Declaration public object Clone() Returns Type Description System.Object Cloned connection. | Improve this Doc View Source Close() Closes and dispose associated underlying database transaction/connection. Declaration public virtual void Close() | Improve this Doc View Source CloseAsync() Closes and dispose associated underlying database transaction/connection asynchronously. Declaration public virtual async Task CloseAsync() Returns Type Description Task Asynchronous operation completion task. | Improve this Doc View Source CloseAsync(CancellationToken) Declaration public Task CloseAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source CommitTransaction() Commits transaction (if any), associated with connection. Declaration public virtual void CommitTransaction() | Improve this Doc View Source CommitTransactionAsync(CancellationToken) Commits started (if any) transaction, associated with connection. If underlying provider doesn't support asynchonous commit, it will be performed synchonously. Declaration public virtual async Task CommitTransactionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. | Improve this Doc View Source CreateCommand() For internal use only. Declaration public IDbCommand CreateCommand() Returns Type Description IDbCommand | Improve this Doc View Source Dispose() Disposes connection. Declaration public void Dispose() | Improve this Doc View Source DisposeAsync() Disposes connection asynchronously. Declaration public async Task DisposeAsync() Returns Type Description Task Asynchronous operation completion task. | Improve this Doc View Source DisposeAsync(CancellationToken) Declaration public Task DisposeAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source DisposeCommand() For internal use only. Declaration public void DisposeCommand() | Improve this Doc View Source EnsureConnectionAsync(CancellationToken) Ensure that database connection opened. If opened connection missing, it will be opened asynchronously. Declaration public async Task EnsureConnectionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Async operation task. | Improve this Doc View Source ExecuteNonQuery(IDbCommand) Declaration protected virtual int ExecuteNonQuery(IDbCommand command) Parameters Type Name Description IDbCommand command Returns Type Description System.Int32 | Improve this Doc View Source ExecuteNonQueryAsync(IDbCommand, CancellationToken) Declaration protected virtual Task<int> ExecuteNonQueryAsync(IDbCommand command, CancellationToken cancellationToken) Parameters Type Name Description IDbCommand command CancellationToken cancellationToken Returns Type Description Task < System.Int32 > | Improve this Doc View Source ExecuteReader(IDbCommand, CommandBehavior) Declaration protected virtual IDataReader ExecuteReader(IDbCommand command, CommandBehavior commandBehavior) Parameters Type Name Description IDbCommand command CommandBehavior commandBehavior Returns Type Description IDataReader | Improve this Doc View Source ExecuteReaderAsync(IDbCommand, CommandBehavior, CancellationToken) Declaration protected virtual Task<DbDataReader> ExecuteReaderAsync(IDbCommand command, CommandBehavior commandBehavior, CancellationToken cancellationToken) Parameters Type Name Description IDbCommand command CommandBehavior commandBehavior CancellationToken cancellationToken Returns Type Description Task < DbDataReader > | Improve this Doc View Source ExecuteScalar(IDbCommand) Declaration protected virtual object? ExecuteScalar(IDbCommand command) Parameters Type Name Description IDbCommand command Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source ExecuteScalarAsync(IDbCommand, CancellationToken) Declaration protected virtual Task<object?> ExecuteScalarAsync(IDbCommand command, CancellationToken cancellationToken) Parameters Type Name Description IDbCommand command CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Object >> | Improve this Doc View Source GetConnectionString(String) Returns connection string for specified connection name. Declaration public static string GetConnectionString(string configurationString) Parameters Type Name Description System.String configurationString Connection name. Returns Type Description System.String Connection string. | Improve this Doc View Source GetDataProvider(String) Returns database provider implementation, associated with provided connection configuration name. Declaration public static IDataProvider GetDataProvider(string configurationString) Parameters Type Name Description System.String configurationString Connection configuration name. Returns Type Description IDataProvider Database provider. | Improve this Doc View Source GetDataProvider(String, String) Returns database provider associated with provider name and connection string. Declaration public static IDataProvider GetDataProvider(string providerName, string connectionString) Parameters Type Name Description System.String providerName Provider name. System.String connectionString Connection string. Returns Type Description IDataProvider Database provider. | Improve this Doc View Source GetDataProvider(String, String, String) Returns database provider associated with provider name, configuration and connection string. Declaration public static IDataProvider GetDataProvider(string providerName, string configurationString, string connectionString) Parameters Type Name Description System.String providerName Provider name. System.String configurationString Connection configuration name. System.String connectionString Connection string. Returns Type Description IDataProvider Database provider. | Improve this Doc View Source GetRegisteredProviders() Returns registered database providers. Declaration public static IReadOnlyDictionary<string, IDataProvider> GetRegisteredProviders() Returns Type Description IReadOnlyDictionary < System.String , IDataProvider > Returns registered providers collection. | Improve this Doc View Source GetTable<T>() Returns queryable source for specified mapping class for current connection, mapped to database table or view. Declaration public ITable<T> GetTable<T>() where T : class Returns Type Description ITable <T> Queryable source. Type Parameters Name Description T Mapping class type. | Improve this Doc View Source GetTable<T>(Object, MethodInfo, Nullable<Object>[]) Returns queryable source for specified mapping class for current connection, mapped to table expression or function. It could be used e.g. for queries to table-valued functions or to decorate queried table with hints. Declaration public ITable<T> GetTable<T>(object instance, MethodInfo methodInfo, params object? [] parameters) where T : class Parameters Type Name Description System.Object instance Instance object for methodInfo method or null for static method. MethodInfo methodInfo Method, decorated with expression attribute, based on Sql.TableFunctionAttribute . System.Nullable < System.Object >[] parameters Parameters for methodInfo method. Returns Type Description ITable <T> Queryable source. Type Parameters Name Description T Mapping class type. | Improve this Doc View Source ProcessQuery(SqlStatement, EvaluationContext) Declaration protected virtual SqlStatement ProcessQuery(SqlStatement statement, EvaluationContext context) Parameters Type Name Description SqlStatement statement EvaluationContext context Returns Type Description SqlStatement | Improve this Doc View Source RollbackTransaction() Rollbacks transaction (if any), associated with connection. Declaration public virtual void RollbackTransaction() | Improve this Doc View Source RollbackTransactionAsync(CancellationToken) Rollbacks started (if any) transaction, associated with connection. If underlying provider doesn't support asynchonous commit, it will be performed synchonously. Declaration public virtual async Task RollbackTransactionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. | Improve this Doc View Source SetConnectionString(String, String) Sets connection string for specified connection name. Declaration public static void SetConnectionString(string configuration, string connectionString) Parameters Type Name Description System.String configuration Connection name. System.String connectionString Connection string. | Improve this Doc View Source SetConnectionStrings(IEnumerable<IConnectionStringSettings>) Register connection strings for use by data connection class. Declaration public static void SetConnectionStrings(IEnumerable<IConnectionStringSettings> connectionStrings) Parameters Type Name Description IEnumerable < IConnectionStringSettings > connectionStrings Collection of connection string configurations. | Improve this Doc View Source TurnTraceSwitchOn(TraceLevel) Sets tracing level for data connections. Declaration public static void TurnTraceSwitchOn(TraceLevel traceLevel = null) Parameters Type Name Description TraceLevel traceLevel Connection tracing level. Remarks Use TraceSwitchConnection when possible, configured via WithTraceLevel(TraceLevel) . Events | Improve this Doc View Source OnBeforeConnectionOpen Event, triggered before connection opened using method. Declaration public event Action<DataConnection, IDbConnection>? OnBeforeConnectionOpen Event Type Type Description System.Nullable < Action < DataConnection , IDbConnection >> | Improve this Doc View Source OnBeforeConnectionOpenAsync Event, triggered before connection opened using methods. Declaration public event Func<DataConnection, IDbConnection, CancellationToken, Task>? OnBeforeConnectionOpenAsync Event Type Type Description System.Nullable < Func < DataConnection , IDbConnection , CancellationToken , Task >> | Improve this Doc View Source OnClosed Event, triggered after connection closed using Close() method. Declaration public event EventHandler? OnClosed Event Type Type Description System.Nullable < EventHandler > | Improve this Doc View Source OnClosing Event, triggered before connection closed using Close() method. Declaration public event EventHandler? OnClosing Event Type Type Description System.Nullable < EventHandler > | Improve this Doc View Source OnConnectionOpened Event, triggered right after connection opened using method. Declaration public event Action<DataConnection, IDbConnection>? OnConnectionOpened Event Type Type Description System.Nullable < Action < DataConnection , IDbConnection >> | Improve this Doc View Source OnConnectionOpenedAsync Event, triggered right after connection opened using methods. Declaration public event Func<DataConnection, IDbConnection, CancellationToken, Task>? OnConnectionOpenedAsync Event Type Type Description System.Nullable < Func < DataConnection , IDbConnection , CancellationToken , Task >> Explicit Interface Implementations | Improve this Doc View Source IDataContext.Clone(Boolean) Declaration IDataContext IDataContext.Clone(bool forNestedQuery) Parameters Type Name Description System.Boolean forNestedQuery Returns Type Description IDataContext | Improve this Doc View Source IDataContext.CloseAfterUse Declaration bool IDataContext.CloseAfterUse { get; set; } Returns Type Description System.Boolean | Improve this Doc View Source IDataContext.ContextID Declaration string IDataContext.ContextID { get; } Returns Type Description System.String | Improve this Doc View Source IDataContext.CreateSqlProvider Declaration Func<ISqlBuilder> IDataContext.CreateSqlProvider { get; } Returns Type Description Func < ISqlBuilder > | Improve this Doc View Source IDataContext.DataReaderType Declaration Type IDataContext.DataReaderType { get; } Returns Type Description Type | Improve this Doc View Source IDataContext.GetQueryRunner(Query, Int32, Expression, Nullable<Object>[], Nullable<Object>[]) Declaration IQueryRunner IDataContext.GetQueryRunner(Query query, int queryNumber, Expression expression, object? [] parameters, object? [] preambles) Parameters Type Name Description Query query System.Int32 queryNumber Expression expression System.Nullable < System.Object >[] parameters System.Nullable < System.Object >[] preambles Returns Type Description IQueryRunner | Improve this Doc View Source IDataContext.GetReaderExpression(IDataReader, Int32, Expression, Type) Declaration Expression IDataContext.GetReaderExpression(IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description IDataReader reader System.Int32 idx Expression readerExpression Type toType Returns Type Description Expression | Improve this Doc View Source IDataContext.GetSqlOptimizer Declaration Func<ISqlOptimizer> IDataContext.GetSqlOptimizer { get; } Returns Type Description Func < ISqlOptimizer > | Improve this Doc View Source IDataContext.IsDBNullAllowed(IDataReader, Int32) Declaration bool? IDataContext.IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader System.Int32 idx Returns Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IDataContext.SqlProviderFlags Declaration SqlProviderFlags IDataContext.SqlProviderFlags { get; } Returns Type Description SqlProviderFlags | Improve this Doc View Source IDataContext.SupportedTableOptions Declaration TableOptions IDataContext.SupportedTableOptions { get; } Returns Type Description TableOptions Implements IDataContext IEntityServices IDisposable IAsyncDisposable ICloneable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) DataConnectionExtensions.SetCommand(DataConnection, String) DataConnectionExtensions.SetCommand(DataConnection, String, DataParameter[]) DataConnectionExtensions.SetCommand(DataConnection, String, DataParameter) DataConnectionExtensions.SetCommand(DataConnection, String, Nullable<Object>) DataConnectionExtensions.Query<T>(DataConnection, Func<IDataReader, T>, String) DataConnectionExtensions.QueryProc<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) DataConnectionExtensions.QueryProcAsync<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) DataConnectionExtensions.QueryProcAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryProc<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>) DataConnectionExtensions.QueryProcAsync<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>, CancellationToken) DataConnectionExtensions.Query<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) DataConnectionExtensions.Query<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>, CancellationToken) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, Nullable<Object>) DataConnectionExtensions.Query<T>(DataConnection, String) DataConnectionExtensions.Query<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryMultiple<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryMultipleAsync<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryMultipleAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryProc<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryProcAsync<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryProcAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryProc<T>(DataConnection, String, Nullable<Object>) DataConnectionExtensions.QueryProcAsync<T>(DataConnection, String, Nullable<Object>, CancellationToken) DataConnectionExtensions.QueryProcMultipleAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryProcMultipleAsync<T>(DataConnection, String, CancellationToken, Nullable<Object>) DataConnectionExtensions.QueryProcMultipleAsync<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryProcMultipleAsync<T>(DataConnection, String, Nullable<Object>) DataConnectionExtensions.QueryProcMultiple<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryProcMultiple<T>(DataConnection, String, Nullable<Object>) DataConnectionExtensions.Query<T>(DataConnection, String, DataParameter) DataConnectionExtensions.Query<T>(DataConnection, String, Nullable<Object>) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, CancellationToken) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, CancellationToken) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, DataParameter) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, DataParameter, CancellationToken) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, DataParameter) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, DataParameter, CancellationToken) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, Nullable<Object>) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, String, CancellationToken, Nullable<Object>) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, Nullable<Object>) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, String, CancellationToken, Nullable<Object>) DataConnectionExtensions.Query<T>(DataConnection, T, String, DataParameter[]) DataConnectionExtensions.Query<T>(DataConnection, T, String, Nullable<Object>) DataConnectionExtensions.QueryProc<T>(DataConnection, T, String, DataParameter[]) DataConnectionExtensions.QueryProcAsync<T>(DataConnection, T, String, DataParameter[]) DataConnectionExtensions.QueryProcAsync<T>(DataConnection, T, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryProc<T>(DataConnection, T, String, Nullable<Object>) DataConnectionExtensions.QueryProcAsync<T>(DataConnection, T, String, Nullable<Object>, CancellationToken) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, T, String, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, T, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, T, String, DataParameter[]) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, T, String, CancellationToken, DataParameter[]) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, T, String, Nullable<Object>) DataConnectionExtensions.QueryToListAsync<T>(DataConnection, T, String, CancellationToken, Nullable<Object>) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, T, String, Nullable<Object>) DataConnectionExtensions.QueryToArrayAsync<T>(DataConnection, T, String, CancellationToken, Nullable<Object>) DataConnectionExtensions.Execute(DataConnection, String) DataConnectionExtensions.Execute(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteProc(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteProc(DataConnection, String, Nullable<Object>) DataConnectionExtensions.Execute(DataConnection, String, Nullable<Object>) DataConnectionExtensions.ExecuteAsync(DataConnection, String) DataConnectionExtensions.ExecuteAsync(DataConnection, String, CancellationToken) DataConnectionExtensions.ExecuteAsync(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteAsync(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.ExecuteAsync(DataConnection, String, Nullable<Object>) DataConnectionExtensions.ExecuteAsync(DataConnection, String, CancellationToken, Nullable<Object>) DataConnectionExtensions.ExecuteProcAsync(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteProcAsync(DataConnection, String, Nullable<Object>) DataConnectionExtensions.ExecuteProcAsync(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.ExecuteProcAsync(DataConnection, String, CancellationToken, Nullable<Object>) DataConnectionExtensions.Execute<T>(DataConnection, String) DataConnectionExtensions.Execute<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.Execute<T>(DataConnection, String, DataParameter) DataConnectionExtensions.Execute<T>(DataConnection, String, Nullable<Object>) DataConnectionExtensions.ExecuteProc<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteProc<T>(DataConnection, String, Nullable<Object>) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, CancellationToken) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, DataParameter) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, DataParameter, CancellationToken) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, Nullable<Object>) DataConnectionExtensions.ExecuteAsync<T>(DataConnection, String, CancellationToken, Nullable<Object>) DataConnectionExtensions.ExecuteProcAsync<T>(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteProcAsync<T>(DataConnection, String, Nullable<Object>) DataConnectionExtensions.ExecuteProcAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) DataConnectionExtensions.ExecuteProcAsync<T>(DataConnection, String, CancellationToken, Nullable<Object>) DataConnectionExtensions.ExecuteReader(DataConnection, String) DataConnectionExtensions.ExecuteReader(DataConnection, String, DataParameter[]) DataConnectionExtensions.ExecuteReader(DataConnection, String, DataParameter) DataConnectionExtensions.ExecuteReader(DataConnection, String, Nullable<Object>) DataConnectionExtensions.ExecuteReader(DataConnection, String, CommandType, CommandBehavior, DataParameter[]) DataConnectionExtensions.BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(DataConnection, Int32, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(DataConnection, IEnumerable<T>) DataConnectionExtensions.BulkCopyAsync<T>(DataConnection, BulkCopyOptions, IEnumerable<T>, CancellationToken) DataConnectionExtensions.BulkCopyAsync<T>(DataConnection, Int32, IEnumerable<T>, CancellationToken) DataConnectionExtensions.BulkCopyAsync<T>(DataConnection, IEnumerable<T>, CancellationToken) DataConnectionExtensions.Merge<T>(DataConnection, IQueryable<T>, Expression<Func<T, Boolean>>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataConnectionExtensions.Merge<T>(DataConnection, Expression<Func<T, Boolean>>, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataConnectionExtensions.Merge<T>(DataConnection, Boolean, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataConnectionExtensions.Merge<T>(DataConnection, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataConnectionExtensions.MergeAsync<T>(DataConnection, IQueryable<T>, Expression<Func<T, Boolean>>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataConnectionExtensions.MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataConnectionExtensions.MergeAsync<T>(DataConnection, Boolean, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataConnectionExtensions.MergeAsync<T>(DataConnection, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) OracleTools.MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Nullable<Action<BulkCopyRowsCopied>>) SQLiteExtensions.FTS3Optimize<TEntity>(DataConnection, ITable<TEntity>) SQLiteExtensions.FTS3Rebuild<TEntity>(DataConnection, ITable<TEntity>) SQLiteExtensions.FTS3IntegrityCheck<TEntity>(DataConnection, ITable<TEntity>) SQLiteExtensions.FTS3Merge<TEntity>(DataConnection, ITable<TEntity>, Int32, Int32) SQLiteExtensions.FTS3AutoMerge<TEntity>(DataConnection, ITable<TEntity>, Int32) SQLiteExtensions.FTS5AutoMerge<TEntity>(DataConnection, ITable<TEntity>, Int32) SQLiteExtensions.FTS5CrisisMerge<TEntity>(DataConnection, ITable<TEntity>, Int32) SQLiteExtensions.FTS5Delete<TEntity>(DataConnection, ITable<TEntity>, Int32, TEntity) SQLiteExtensions.FTS5DeleteAll<TEntity>(DataConnection, ITable<TEntity>) SQLiteExtensions.FTS5IntegrityCheck<TEntity>(DataConnection, ITable<TEntity>) SQLiteExtensions.FTS5Merge<TEntity>(DataConnection, ITable<TEntity>, Int32) SQLiteExtensions.FTS5Optimize<TEntity>(DataConnection, ITable<TEntity>) SQLiteExtensions.FTS5Pgsz<TEntity>(DataConnection, ITable<TEntity>, Int32) SQLiteExtensions.FTS5Rank<TEntity>(DataConnection, ITable<TEntity>, String) SQLiteExtensions.FTS5Rebuild<TEntity>(DataConnection, ITable<TEntity>) SQLiteExtensions.FTS5UserMerge<TEntity>(DataConnection, ITable<TEntity>, Int32)"
  },
  "api/LinqToDB.Data.DataConnectionExtensions.html": {
    "href": "api/LinqToDB.Data.DataConnectionExtensions.html",
    "title": "Class DataConnectionExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class DataConnectionExtensions Contains extension methods for DataConnection class. Inheritance System.Object DataConnectionExtensions Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public static class DataConnectionExtensions : object Methods | Improve this Doc View Source BulkCopy<T>(DataConnection, IEnumerable<T>) Performs bulk insert operation. Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, IEnumerable<T> source) where T : class Parameters Type Name Description DataConnection dataConnection Database connection. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(DataConnection, BulkCopyOptions, IEnumerable<T>) Performs bulk insert operation. Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) where T : class Parameters Type Name Description DataConnection dataConnection Database connection. BulkCopyOptions options Operation options. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(DataConnection, Int32, IEnumerable<T>) Performs bulk insert operation. Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, int maxBatchSize, IEnumerable<T> source) where T : class Parameters Type Name Description DataConnection dataConnection Database connection. System.Int32 maxBatchSize Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(ITable<T>, IEnumerable<T>) Performs bulk insert operation into table, identified by table . Declaration public static BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, IEnumerable<T> source) Parameters Type Name Description ITable <T> table Target table. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Performs bulk insert operation into table specified in options parameter or into table, identified by table . Declaration public static BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table Target table. BulkCopyOptions options Operation options. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(ITable<T>, Int32, IEnumerable<T>) Performs bulk insert operation into table, identified by table . Declaration public static BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, int maxBatchSize, IEnumerable<T> source) Parameters Type Name Description ITable <T> table Target table. System.Int32 maxBatchSize Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(DataConnection, IEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation. Declaration public static Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this DataConnection dataConnection, IEnumerable<T> source, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DataConnection dataConnection Database connection. IEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(DataConnection, BulkCopyOptions, IEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation. Declaration public static Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DataConnection dataConnection Database connection. BulkCopyOptions options Operation options. IEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(DataConnection, Int32, IEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation. Declaration public static Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this DataConnection dataConnection, int maxBatchSize, IEnumerable<T> source, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DataConnection dataConnection Database connection. System.Int32 maxBatchSize Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. IEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, IEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation into table, identified by table . Declaration public static Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this ITable<T> table, IEnumerable<T> source, CancellationToken cancellationToken = null) Parameters Type Name Description ITable <T> table Target table. IEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation into table specified in options parameter or into table, identified by table . Declaration public static Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken = null) Parameters Type Name Description ITable <T> table Target table. BulkCopyOptions options Operation options. IEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, Int32, IEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation into table, identified by table . Declaration public static Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this ITable<T> table, int maxBatchSize, IEnumerable<T> source, CancellationToken cancellationToken = null) Parameters Type Name Description ITable <T> table Target table. System.Int32 maxBatchSize Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. IEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source Execute(DataConnection, String) Executes command and returns number of affected records. Declaration public static int Execute(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. Returns Type Description System.Int32 Number of records, affected by command execution. | Improve this Doc View Source Execute(DataConnection, String, DataParameter[]) Executes command and returns number of affected records. Declaration public static int Execute(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description System.Int32 Number of records, affected by command execution. | Improve this Doc View Source Execute(DataConnection, String, Nullable<Object>) Executes command and returns number of affected records. Declaration public static int Execute(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description System.Int32 Number of records, affected by command execution. | Improve this Doc View Source Execute<T>(DataConnection, String) Executes command and returns single value. Declaration public static T Execute<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source Execute<T>(DataConnection, String, DataParameter) Executes command and returns single value. Declaration public static T Execute<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter parameter Command parameter. Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source Execute<T>(DataConnection, String, DataParameter[]) Executes command and returns single value. Declaration public static T Execute<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source Execute<T>(DataConnection, String, Nullable<Object>) Executes command and returns single value. Declaration public static T Execute<T>(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync(DataConnection, String) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync(DataConnection, String, CancellationToken) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync(DataConnection, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync(DataConnection, String, CancellationToken, Nullable<Object>) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql, CancellationToken cancellationToken, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync(DataConnection, String, DataParameter[]) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync(DataConnection, String, Nullable<Object>) Executes command asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteAsync(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, CancellationToken) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, CancellationToken, Nullable<Object>) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, DataParameter) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter parameter Command parameter. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, DataParameter, CancellationToken) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, DataParameter parameter, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter parameter Command parameter. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, DataParameter[]) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteAsync<T>(DataConnection, String, Nullable<Object>) Executes command asynchronously and returns single value. Declaration public static Task<T> ExecuteAsync<T>(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProc(DataConnection, String, DataParameter[]) Executes command using command type and returns number of affected records. Sets result values for output and reference parameters to corresponding parameters in parameters . Declaration public static int ExecuteProc(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. DataParameter [] parameters Command parameters. Returns Type Description System.Int32 Number of records, affected by command execution. | Improve this Doc View Source ExecuteProc(DataConnection, String, Nullable<Object>) Executes command using command type and returns number of affected records. Declaration public static int ExecuteProc(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description System.Int32 Number of records, affected by command execution. | Improve this Doc View Source ExecuteProc<T>(DataConnection, String, DataParameter[]) Executes command using command type and returns single value. Sets result values for output and reference parameters to corresponding parameters in parameters . Declaration public static T ExecuteProc<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. DataParameter [] parameters Command parameters. Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProc<T>(DataConnection, String, Nullable<Object>) Executes command using command type and returns single value. Declaration public static T ExecuteProc<T>(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description T Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProcAsync(DataConnection, String, CancellationToken, DataParameter[]) Executes command using command type asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteProcAsync(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteProcAsync(DataConnection, String, CancellationToken, Nullable<Object>) Executes command using command type asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteProcAsync(this DataConnection connection, string sql, CancellationToken cancellationToken, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. CancellationToken cancellationToken Asynchronous operation cancellation token. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteProcAsync(DataConnection, String, DataParameter[]) Executes command using command type asynchronously and returns number of affected records. Sets result values for output and reference parameters to corresponding parameters in parameters . Declaration public static Task<int> ExecuteProcAsync(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. DataParameter [] parameters Command parameters. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteProcAsync(DataConnection, String, Nullable<Object>) Executes command using command type asynchronously and returns number of affected records. Declaration public static Task<int> ExecuteProcAsync(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < System.Int32 > Task with number of records, affected by command execution. | Improve this Doc View Source ExecuteProcAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) Executes command using command type asynchronously and returns single value. Declaration public static Task<T> ExecuteProcAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T> Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProcAsync<T>(DataConnection, String, CancellationToken, Nullable<Object>) Executes command using command type asynchronously and returns single value. Declaration public static Task<T> ExecuteProcAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. CancellationToken cancellationToken Asynchronous operation cancellation token. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T> Resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProcAsync<T>(DataConnection, String, DataParameter[]) Executes command using command type asynchronously and returns single value. Sets result values for output and reference parameters to corresponding parameters in parameters . Declaration public static Task<T> ExecuteProcAsync<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. DataParameter [] parameters Command parameters. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteProcAsync<T>(DataConnection, String, Nullable<Object>) Executes command using command type asynchronously and returns single value. Declaration public static Task<T> ExecuteProcAsync<T>(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T> Task with resulting value. Type Parameters Name Description T Resulting value type. | Improve this Doc View Source ExecuteReader(DataConnection, String) Executes command and returns data reader instance. Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. Returns Type Description DataReader Data reader object. | Improve this Doc View Source ExecuteReader(DataConnection, String, CommandType, CommandBehavior, DataParameter[]) Executes command and returns data reader instance. Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, CommandType commandType, CommandBehavior commandBehavior, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CommandType commandType Type of command. See for all supported types. CommandBehavior commandBehavior Command behavior flags. See for more details. DataParameter [] parameters Command parameters. Returns Type Description DataReader Data reader object. | Improve this Doc View Source ExecuteReader(DataConnection, String, DataParameter) Executes command and returns data reader instance. Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter parameter Command parameter. Returns Type Description DataReader Data reader object. | Improve this Doc View Source ExecuteReader(DataConnection, String, DataParameter[]) Executes command and returns data reader instance. Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description DataReader Data reader object. | Improve this Doc View Source ExecuteReader(DataConnection, String, Nullable<Object>) Executes command and returns data reader instance. Declaration public static DataReader ExecuteReader(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description DataReader Data reader object. | Improve this Doc View Source Merge<T>(DataConnection, Expression<Func<T, Boolean>>, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Executes following merge operations in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static int Merge<T>(this DataConnection dataConnection, Expression<Func<T, bool>> predicate, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. Expression < Func <T, System.Boolean >> predicate Filter, applied to delete operation. Optional. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(DataConnection, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Executes following merge operations in specified order: Update Insert. Declaration public static int Merge<T>(this DataConnection dataConnection, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(DataConnection, IQueryable<T>, Expression<Func<T, Boolean>>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Executes following merge operations in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static int Merge<T>(this DataConnection dataConnection, IQueryable<T> source, Expression<Func<T, bool>> predicate, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. IQueryable <T> source Source data to merge into target table. All source data will be loaded from server for command generation. Expression < Func <T, System.Boolean >> predicate Filter, applied both to source and delete operation. Required. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(DataConnection, Boolean, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Executes following merge operations in specified order: Update Insert Delete By Source (optional). If delete operation enabled by delete parameter - method could be used only for with Server. Declaration public static int Merge<T>(this DataConnection dataConnection, bool delete, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. System.Boolean delete If true, merge command will include delete by source operation without condition. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(ITable<T>, Expression<Func<T, Boolean>>, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Executes following merge operations in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static int Merge<T>(this ITable<T> table, Expression<Func<T, bool>> predicate, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) where T : class Parameters Type Name Description ITable <T> table Target table. Expression < Func <T, System.Boolean >> predicate Filter, applied to delete operation. Optional. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(ITable<T>, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Executes following merge operations in specified order: Update Insert. Declaration public static int Merge<T>(this ITable<T> table, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) where T : class Parameters Type Name Description ITable <T> table Target table. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(ITable<T>, IQueryable<T>, Expression<Func<T, Boolean>>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Executes following merge operations in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static int Merge<T>(this ITable<T> table, IQueryable<T> source, Expression<Func<T, bool>> predicate, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) where T : class Parameters Type Name Description ITable <T> table Target table. IQueryable <T> source Source data to merge into target table. All source data will be loaded from server for command generation. Expression < Func <T, System.Boolean >> predicate Filter, applied both to source and delete operation. Required. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Merge<T>(ITable<T>, Boolean, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Executes following merge operations in specified order: Update Insert Delete By Source (optional). If delete operation enabled by delete parameter - method could be used only with SQL Server. Declaration public static int Merge<T>(this ITable<T> table, bool delete, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) where T : class Parameters Type Name Description ITable <T> table Target table. System.Boolean delete If true, merge command will include delete by source operation without condition. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Returns number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(DataConnection, Expression<Func<T, Boolean>>, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this DataConnection dataConnection, Expression<Func<T, bool>> predicate, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. Expression < Func <T, System.Boolean >> predicate Filter, applied to delete operation. Optional. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(DataConnection, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert. Declaration public static Task<int> MergeAsync<T>(this DataConnection dataConnection, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(DataConnection, IQueryable<T>, Expression<Func<T, Boolean>>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this DataConnection dataConnection, IQueryable<T> source, Expression<Func<T, bool>> predicate, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. IQueryable <T> source Source data to merge into target table. All source data will be loaded from server for command generation. Expression < Func <T, System.Boolean >> predicate Filter, applied both to source and delete operation. Required. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(DataConnection, Boolean, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source (optional). If delete operation enabled by delete parameter - method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this DataConnection dataConnection, bool delete, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DataConnection dataConnection Data connection instance. System.Boolean delete If true, merge command will include delete by source operation without condition. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(ITable<T>, Expression<Func<T, Boolean>>, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this ITable<T> table, Expression<Func<T, bool>> predicate, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description ITable <T> table Target table. Expression < Func <T, System.Boolean >> predicate Filter, applied to delete operation. Optional. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(ITable<T>, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert. Declaration public static Task<int> MergeAsync<T>(this ITable<T> table, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description ITable <T> table Target table. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(ITable<T>, IQueryable<T>, Expression<Func<T, Boolean>>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source. Method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this ITable<T> table, IQueryable<T> source, Expression<Func<T, bool>> predicate, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description ITable <T> table Target table. IQueryable <T> source Source data to merge into target table. All source data will be loaded from server for command generation. Expression < Func <T, System.Boolean >> predicate Filter, applied both to source and delete operation. Required. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source MergeAsync<T>(ITable<T>, Boolean, IEnumerable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Executes following merge operations asynchronously in specified order: Update Insert Delete By Source (optional). If delete operation enabled by delete parameter - method could be used only with SQL Server. Declaration public static Task<int> MergeAsync<T>(this ITable<T> table, bool delete, IEnumerable<T> source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description ITable <T> table Target table. System.Boolean delete If true, merge command will include delete by source operation without condition. IEnumerable <T> source Source data to merge into target table. System.Nullable < System.String > tableName Optional target table name. System.Nullable < System.String > databaseName Optional target table's database name. System.Nullable < System.String > schemaName Optional target table's schema name. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken cancellationToken Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Task with number of affected target records. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Query<T>(DataConnection, T, String, DataParameter[]) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, T template, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, T, String, Nullable<Object>) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, T template, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, Func<IDataReader, T>, String) Executes command and returns results as collection of values, mapped using provided mapping function. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) Executes command and returns results as collection of values, mapped using provided mapping function. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>) Executes command and returns results as collection of values, mapped using provided mapping function. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, String) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, String, DataParameter) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter parameter Command parameter. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, String, DataParameter[]) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source Query<T>(DataConnection, String, Nullable<Object>) Executes command and returns results as collection of values of specified type. Declaration public static IEnumerable<T> Query<T>(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryMultiple<T>(DataConnection, String, DataParameter[]) Executes command and returns a result containing multiple result sets. Declaration public static T QueryMultiple<T>(this DataConnection connection, string sql, params DataParameter[] parameters) where T : class Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description T Returns result. Type Parameters Name Description T Result set type. Remarks type T should have default constructor. if at least one property or field has ResultSetIndexAttribute , then properties that are not marked with ResultSetIndexAttribute will be ignored. if there is missing index in properties that are marked with ResultSetIndexAttribute , then result set under missing index will be ignored. if there is no ResultSetIndexAttribute , then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class. Examples Example of T definition with ResultSetIndexAttribute . class MultipleResult { [ResultSetIndex(0)] public IEnumerable<Person> AllPersons { get; set; } [ResultSetIndex(1)] public IList<Doctor> AllDoctors { get; set; } [ResultSetIndex(2)] public IEnumerable<Patient> AllPatients { get; set; } [ResultSetIndex(3)] public Patient FirstPatient { get; set; } } Example of T definition without attributes. class MultipleResult { public IEnumerable<Person> AllPersons { get; set; } public IList<Doctor> AllDoctors { get; set; } public IEnumerable<Patient> AllPatients { get; set; } public Patient FirstPatient { get; set; } } | Improve this Doc View Source QueryMultipleAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns a result containing multiple result sets. Declaration public static Task<T> QueryMultipleAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) where T : class Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T> A task that represents the asynchronous operation. The task result contains object with multiply result sets. Type Parameters Name Description T Result set type. Remarks type T should have default constructor. if at least one property or field has ResultSetIndexAttribute , then properties that are not marked with ResultSetIndexAttribute will be ignored. if there is missing index in properties that are marked with ResultSetIndexAttribute , then result set under missing index will be ignored. if there is no ResultSetIndexAttribute , then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class. Examples Example of T definition with ResultSetIndexAttribute . class MultipleResult { [ResultSetIndex(0)] public IEnumerable<Person> AllPersons { get; set; } [ResultSetIndex(1)] public IList<Doctor> AllDoctors { get; set; } [ResultSetIndex(2)] public IEnumerable<Patient> AllPatients { get; set; } [ResultSetIndex(3)] public Patient FirstPatient { get; set; } } Example of T definition without attributes. class MultipleResult { public IEnumerable<Person> AllPersons { get; set; } public IList<Doctor> AllDoctors { get; set; } public IEnumerable<Patient> AllPatients { get; set; } public Patient FirstPatient { get; set; } } | Improve this Doc View Source QueryMultipleAsync<T>(DataConnection, String, DataParameter[]) Executes command asynchronously and returns a result containing multiple result sets. Declaration public static Task<T> QueryMultipleAsync<T>(this DataConnection connection, string sql, params DataParameter[] parameters) where T : class Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task <T> A task that represents the asynchronous operation. The task result contains object with multiply result sets. Type Parameters Name Description T Result set type. Remarks type T should have default constructor. if at least one property or field has ResultSetIndexAttribute , then properties that are not marked with ResultSetIndexAttribute will be ignored. if there is missing index in properties that are marked with ResultSetIndexAttribute , then result set under missing index will be ignored. if there is no ResultSetIndexAttribute , then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class. Examples Example of T definition with ResultSetIndexAttribute . class MultipleResult { [ResultSetIndex(0)] public IEnumerable<Person> AllPersons { get; set; } [ResultSetIndex(1)] public IList<Doctor> AllDoctors { get; set; } [ResultSetIndex(2)] public IEnumerable<Patient> AllPatients { get; set; } [ResultSetIndex(3)] public Patient FirstPatient { get; set; } } Example of T definition without attributes. class MultipleResult { public IEnumerable<Person> AllPersons { get; set; } public IList<Doctor> AllDoctors { get; set; } public IEnumerable<Patient> AllPatients { get; set; } public Patient FirstPatient { get; set; } } | Improve this Doc View Source QueryProc<T>(DataConnection, T, String, DataParameter[]) Executes stored procedure and returns results as collection of values of specified type. Declaration public static IEnumerable<T> QueryProc<T>(this DataConnection connection, T template, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>(DataConnection, T, String, Nullable<Object>) Executes stored procedure and returns results as collection of values of specified type. Declaration public static IEnumerable<T> QueryProc<T>(this DataConnection connection, T template, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) Executes command using command type and returns results as collection of values, mapped using provided mapping function. Declaration public static IEnumerable<T> QueryProc<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. This is caller's responsibility to properly escape procedure name. DataParameter [] parameters Command parameters. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>) Executes command using command type and returns results as collection of values, mapped using provided mapping function. Declaration public static IEnumerable<T> QueryProc<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. This is caller's responsibility to properly escape procedure name. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>(DataConnection, String, DataParameter[]) Executes command using command type and returns results as collection of values of specified type. Declaration public static IEnumerable<T> QueryProc<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. DataParameter [] parameters Command parameters. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProc<T>(DataConnection, String, Nullable<Object>) Executes command using command type and returns results as collection of values of specified type. Declaration public static IEnumerable<T> QueryProc<T>(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description IEnumerable <T> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(DataConnection, T, String, CancellationToken, DataParameter[]) Executes stored procedure asynchronously and returns results as collection of values of specified type. Declaration public static Task<IEnumerable<T>> QueryProcAsync<T>(this DataConnection connection, T template, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(DataConnection, T, String, DataParameter[]) Executes stored procedure asynchronously and returns results as collection of values of specified type. Declaration public static Task<IEnumerable<T>> QueryProcAsync<T>(this DataConnection connection, T template, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(DataConnection, T, String, Nullable<Object>, CancellationToken) Executes stored procedure asynchronously and returns results as collection of values of specified type. Declaration public static Task<IEnumerable<T>> QueryProcAsync<T>(this DataConnection connection, T template, string sql, object? parameters, CancellationToken cancellationToken = null) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, DataParameter[]) Executes command asynchronously using command type and returns results as collection of values, mapped using provided mapping function. Declaration public static Task<IEnumerable<T>> QueryProcAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. This is caller's responsibility to properly escape procedure name. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) Executes command asynchronously using command type and returns results as collection of values, mapped using provided mapping function. Declaration public static Task<IEnumerable<T>> QueryProcAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. This is caller's responsibility to properly escape procedure name. DataParameter [] parameters Command parameters. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>, CancellationToken) Executes command asynchronously using command type and returns results as collection of values, mapped using provided mapping function. Declaration public static Task<IEnumerable<T>> QueryProcAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, object? parameters, CancellationToken cancellationToken = null) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. This is caller's responsibility to properly escape procedure name. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) Executes command using command type and returns results as collection of values of specified type. Declaration public static Task<IEnumerable<T>> QueryProcAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(DataConnection, String, DataParameter[]) Executes command using command type and returns results as collection of values of specified type. Declaration public static Task<IEnumerable<T>> QueryProcAsync<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. DataParameter [] parameters Command parameters. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcAsync<T>(DataConnection, String, Nullable<Object>, CancellationToken) Executes command asynchronously using command type and returns results as collection of values of specified type. Declaration public static Task<IEnumerable<T>> QueryProcAsync<T>(this DataConnection connection, string sql, object? parameters, CancellationToken cancellationToken = null) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IEnumerable <T>> Returns collection of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryProcMultiple<T>(DataConnection, String, DataParameter[]) Executes command using command type and returns a result containing multiple result sets. Sets result values for output and reference parameters to corresponding parameters in parameters . Declaration public static T QueryProcMultiple<T>(this DataConnection connection, string sql, params DataParameter[] parameters) where T : class Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. DataParameter [] parameters Command parameters. Returns Type Description T Returns result. Type Parameters Name Description T Result set type. Remarks type T should have default constructor. if at least one property or field has ResultSetIndexAttribute , then properties that are not marked with ResultSetIndexAttribute will be ignored. if there is missing index in properties that are marked with ResultSetIndexAttribute , then result set under missing index will be ignored. if there is no ResultSetIndexAttribute , then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class. Examples Example of T definition with ResultSetIndexAttribute . class MultipleResult { [ResultSetIndex(0)] public IEnumerable<Person> AllPersons { get; set; } [ResultSetIndex(1)] public IList<Doctor> AllDoctors { get; set; } [ResultSetIndex(2)] public IEnumerable<Patient> AllPatients { get; set; } [ResultSetIndex(3)] public Patient FirstPatient { get; set; } } Example of T definition without attributes. class MultipleResult { public IEnumerable<Person> AllPersons { get; set; } public IList<Doctor> AllDoctors { get; set; } public IEnumerable<Patient> AllPatients { get; set; } public Patient FirstPatient { get; set; } } | Improve this Doc View Source QueryProcMultiple<T>(DataConnection, String, Nullable<Object>) Executes command using command type and returns a result containing multiple result sets. Declaration public static T QueryProcMultiple<T>(this DataConnection connection, string sql, object? parameters) where T : class Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description T Returns result. Type Parameters Name Description T Result set type. Remarks type T should have default constructor. if at least one property or field has ResultSetIndexAttribute , then properties that are not marked with ResultSetIndexAttribute will be ignored. if there is missing index in properties that are marked with ResultSetIndexAttribute , then result set under missing index will be ignored. if there is no ResultSetIndexAttribute , then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class. Examples Example of T definition with ResultSetIndexAttribute . class MultipleResult { [ResultSetIndex(0)] public IEnumerable<Person> AllPersons { get; set; } [ResultSetIndex(1)] public IList<Doctor> AllDoctors { get; set; } [ResultSetIndex(2)] public IEnumerable<Patient> AllPatients { get; set; } [ResultSetIndex(3)] public Patient FirstPatient { get; set; } } Example of T definition without attributes. class MultipleResult { public IEnumerable<Person> AllPersons { get; set; } public IList<Doctor> AllDoctors { get; set; } public IEnumerable<Patient> AllPatients { get; set; } public Patient FirstPatient { get; set; } } | Improve this Doc View Source QueryProcMultipleAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) Executes command asynchronously using command type and returns a result containing multiple result sets. Declaration public static Task<T> QueryProcMultipleAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) where T : class Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T> A task that represents the asynchronous operation. The task result contains object with multiply result sets. Type Parameters Name Description T Result set type. Remarks type T should have default constructor. if at least one property or field has ResultSetIndexAttribute , then properties that are not marked with ResultSetIndexAttribute will be ignored. if there is missing index in properties that are marked with ResultSetIndexAttribute , then result set under missing index will be ignored. if there is no ResultSetIndexAttribute , then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class. Examples Example of T definition with ResultSetIndexAttribute . class MultipleResult { [ResultSetIndex(0)] public IEnumerable<Person> AllPersons { get; set; } [ResultSetIndex(1)] public IList<Doctor> AllDoctors { get; set; } [ResultSetIndex(2)] public IEnumerable<Patient> AllPatients { get; set; } [ResultSetIndex(3)] public Patient FirstPatient { get; set; } } Example of T definition without attributes. class MultipleResult { public IEnumerable<Person> AllPersons { get; set; } public IList<Doctor> AllDoctors { get; set; } public IEnumerable<Patient> AllPatients { get; set; } public Patient FirstPatient { get; set; } } | Improve this Doc View Source QueryProcMultipleAsync<T>(DataConnection, String, CancellationToken, Nullable<Object>) Executes command asynchronously using command type and returns a result containing multiple result sets. Declaration public static Task<T> QueryProcMultipleAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, object? parameters) where T : class Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. CancellationToken cancellationToken Asynchronous operation cancellation token. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T> A task that represents the asynchronous operation. The task result contains object with multiply result sets. Type Parameters Name Description T Result set type. Remarks type T should have default constructor. if at least one property or field has ResultSetIndexAttribute , then properties that are not marked with ResultSetIndexAttribute will be ignored. if there is missing index in properties that are marked with ResultSetIndexAttribute , then result set under missing index will be ignored. if there is no ResultSetIndexAttribute , then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class. Examples Example of T definition with ResultSetIndexAttribute . class MultipleResult { [ResultSetIndex(0)] public IEnumerable<Person> AllPersons { get; set; } [ResultSetIndex(1)] public IList<Doctor> AllDoctors { get; set; } [ResultSetIndex(2)] public IEnumerable<Patient> AllPatients { get; set; } [ResultSetIndex(3)] public Patient FirstPatient { get; set; } } Example of T definition without attributes. class MultipleResult { public IEnumerable<Person> AllPersons { get; set; } public IList<Doctor> AllDoctors { get; set; } public IEnumerable<Patient> AllPatients { get; set; } public Patient FirstPatient { get; set; } } | Improve this Doc View Source QueryProcMultipleAsync<T>(DataConnection, String, DataParameter[]) Executes command asynchronously using command type and returns a result containing multiple result sets. Sets result values for output and reference parameters to corresponding parameters in parameters . Declaration public static Task<T> QueryProcMultipleAsync<T>(this DataConnection connection, string sql, params DataParameter[] parameters) where T : class Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. DataParameter [] parameters Command parameters. Returns Type Description Task <T> A task that represents the asynchronous operation. The task result contains object with multiply result sets. Type Parameters Name Description T Result set type. Remarks type T should have default constructor. if at least one property or field has ResultSetIndexAttribute , then properties that are not marked with ResultSetIndexAttribute will be ignored. if there is missing index in properties that are marked with ResultSetIndexAttribute , then result set under missing index will be ignored. if there is no ResultSetIndexAttribute , then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class. Examples Example of T definition with ResultSetIndexAttribute . class MultipleResult { [ResultSetIndex(0)] public IEnumerable<Person> AllPersons { get; set; } [ResultSetIndex(1)] public IList<Doctor> AllDoctors { get; set; } [ResultSetIndex(2)] public IEnumerable<Patient> AllPatients { get; set; } [ResultSetIndex(3)] public Patient FirstPatient { get; set; } } Example of T definition without attributes. class MultipleResult { public IEnumerable<Person> AllPersons { get; set; } public IList<Doctor> AllDoctors { get; set; } public IEnumerable<Patient> AllPatients { get; set; } public Patient FirstPatient { get; set; } } | Improve this Doc View Source QueryProcMultipleAsync<T>(DataConnection, String, Nullable<Object>) Executes command asynchronously using command type and returns a result containing multiple result sets. Declaration public static Task<T> QueryProcMultipleAsync<T>(this DataConnection connection, string sql, object? parameters) where T : class Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. This is caller's responsibility to properly escape procedure name. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T> A task that represents the asynchronous operation. The task result contains object with multiply result sets. Type Parameters Name Description T Result set type. Remarks type T should have default constructor. if at least one property or field has ResultSetIndexAttribute , then properties that are not marked with ResultSetIndexAttribute will be ignored. if there is missing index in properties that are marked with ResultSetIndexAttribute , then result set under missing index will be ignored. if there is no ResultSetIndexAttribute , then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class. Examples Example of T definition with ResultSetIndexAttribute . class MultipleResult { [ResultSetIndex(0)] public IEnumerable<Person> AllPersons { get; set; } [ResultSetIndex(1)] public IList<Doctor> AllDoctors { get; set; } [ResultSetIndex(2)] public IEnumerable<Patient> AllPatients { get; set; } [ResultSetIndex(3)] public Patient FirstPatient { get; set; } } Example of T definition without attributes. class MultipleResult { public IEnumerable<Person> AllPersons { get; set; } public IList<Doctor> AllDoctors { get; set; } public IEnumerable<Patient> AllPatients { get; set; } public Patient FirstPatient { get; set; } } | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, T, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns array of values of specified type. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, T template, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, T, String, CancellationToken, Nullable<Object>) Executes command asynchronously and returns array of values of specified type. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, T template, string sql, CancellationToken cancellationToken, object? parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, T, String, DataParameter[]) Executes command asynchronously and returns array of values of specified type. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, T template, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, T, String, Nullable<Object>) Executes command asynchronously and returns array of values of specified type. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, T template, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, Nullable<Object>) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, CancellationToken cancellationToken, object? parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>) Executes command asynchronously and returns array of values, mapped using provided mapping function. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, CancellationToken) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, CancellationToken, Nullable<Object>) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, DataParameter) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter parameter Command parameter. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, DataParameter, CancellationToken) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, DataParameter parameter, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter parameter Command parameter. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, DataParameter[]) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToArrayAsync<T>(DataConnection, String, Nullable<Object>) Executes command asynchronously and returns array of values. Declaration public static Task<T[]> QueryToArrayAsync<T>(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task <T[]> Returns task with array of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, T, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns list of values of specified type. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, T template, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, T, String, CancellationToken, Nullable<Object>) Executes command asynchronously and returns list of values of specified type. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, T template, string sql, CancellationToken cancellationToken, object? parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, T, String, DataParameter[]) Executes command asynchronously and returns list of values of specified type. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, T template, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, T, String, Nullable<Object>) Executes command asynchronously and returns list of values of specified type. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, T template, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. T template This value used only for T parameter type inference, which makes this method usable with anonymous types. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, DataParameter[]) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, Func<IDataReader, T>, String, Nullable<Object>, CancellationToken) Executes command asynchronously and returns list of values, mapped using provided mapping function. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, Func<IDataReader, T> objectReader, string sql, object? parameters, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. Func < IDataReader , T> objectReader Record mapping function from data reader. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, CancellationToken) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, CancellationToken, DataParameter[]) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, CancellationToken, Nullable<Object>) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, CancellationToken cancellationToken, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. CancellationToken cancellationToken Asynchronous operation cancellation token. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, DataParameter) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, DataParameter parameter) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter parameter Command parameter. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, DataParameter, CancellationToken) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, DataParameter parameter, CancellationToken cancellationToken) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter parameter Command parameter. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, DataParameter[]) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, params DataParameter[] parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. DataParameter [] parameters Command parameters. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source QueryToListAsync<T>(DataConnection, String, Nullable<Object>) Executes command asynchronously and returns list of values. Declaration public static Task<List<T>> QueryToListAsync<T>(this DataConnection connection, string sql, object? parameters) Parameters Type Name Description DataConnection connection Database connection. System.String sql Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description Task < List <T>> Returns task with list of query result records. Type Parameters Name Description T Result record type. | Improve this Doc View Source SetCommand(DataConnection, String) Creates command wrapper for current connection with provided command text. Declaration public static CommandInfo SetCommand(this DataConnection dataConnection, string commandText) Parameters Type Name Description DataConnection dataConnection Database connection. System.String commandText Command text. Returns Type Description CommandInfo Database command wrapper. | Improve this Doc View Source SetCommand(DataConnection, String, DataParameter) Creates command wrapper for current connection with provided command text and single parameter. Declaration public static CommandInfo SetCommand(this DataConnection dataConnection, string commandText, DataParameter parameter) Parameters Type Name Description DataConnection dataConnection Database connection. System.String commandText Command text. DataParameter parameter Command parameter. Returns Type Description CommandInfo Database command wrapper. | Improve this Doc View Source SetCommand(DataConnection, String, DataParameter[]) Creates command wrapper for current connection with provided command text and parameters. Declaration public static CommandInfo SetCommand(this DataConnection dataConnection, string commandText, params DataParameter[] parameters) Parameters Type Name Description DataConnection dataConnection Database connection. System.String commandText Command text. DataParameter [] parameters Command parameters. Returns Type Description CommandInfo Database command wrapper. | Improve this Doc View Source SetCommand(DataConnection, String, Nullable<Object>) Creates command wrapper for current connection with provided command text and parameters. Declaration public static CommandInfo SetCommand(this DataConnection dataConnection, string commandText, object? parameters) Parameters Type Name Description DataConnection dataConnection Database connection. System.String commandText Command text. System.Nullable < System.Object > parameters Command parameters. Supported values: - null for command without parameters; - single DataParameter instance; - array of DataParameter parameters; - mapping class entity. Last case will convert all mapped columns to DataParameter instances using following logic: - if column is of DataParameter type, column value will be used. If parameter name ( Name ) is not set, column name will be used; - if converter from column type to DataParameter is defined in mapping schema, it will be used to create parameter with colum name passed to converter; - otherwise column value will be converted to DataParameter using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema. Returns Type Description CommandInfo Database command wrapper."
  },
  "api/LinqToDB.Data.DataConnectionTransaction.html": {
    "href": "api/LinqToDB.Data.DataConnectionTransaction.html",
    "title": "Class DataConnectionTransaction | Linq To DB (aka linq2db)",
    "keywords": "Class DataConnectionTransaction Data connection transaction controller. Inheritance System.Object DataConnectionTransaction Implements IAsyncDisposable Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataConnectionTransaction : IDisposable, IAsyncDisposable Constructors | Improve this Doc View Source DataConnectionTransaction(DataConnection) Creates new transaction controller for data connection. Declaration public DataConnectionTransaction(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Data connection instance. Properties | Improve this Doc View Source DataConnection Returns associated data connection instance. Declaration public DataConnection DataConnection { get; } Property Value Type Description DataConnection Methods | Improve this Doc View Source Commit() Commits current transaction for data connection. Declaration public void Commit() | Improve this Doc View Source CommitAsync(CancellationToken) Commits current transaction for data connection asynchonously. If underlying provider doesn't support asynchonous commit, it will be performed synchonously. Declaration public async Task CommitAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source DisposeAsync() Declaration public Task DisposeAsync() Returns Type Description Task | Improve this Doc View Source Rollback() Rolllbacks current transaction for data connection. Declaration public void Rollback() | Improve this Doc View Source RollbackAsync(CancellationToken) Rollbacks current transaction for data connection asynchonously. If underlying provider doesn't support asynchonous rollback, it will be performed synchonously. Declaration public async Task RollbackAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. Implements IAsyncDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.DataContextExtensions.html": {
    "href": "api/LinqToDB.Data.DataContextExtensions.html",
    "title": "Class DataContextExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class DataContextExtensions Inheritance System.Object DataContextExtensions Namespace : LinqToDB.Data Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public static class DataContextExtensions : object Methods | Improve this Doc View Source ApiResourceClaims(IDataContext) Declaration public static ITable<ApiResourceClaim> ApiResourceClaims(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ApiResourceClaim > | Improve this Doc View Source ApiResources(IDataContext) Declaration public static ITable<ApiResource> ApiResources(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ApiResource > | Improve this Doc View Source ApiScopeClaims(IDataContext) Declaration public static ITable<ApiScopeClaim> ApiScopeClaims(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ApiScopeClaim > | Improve this Doc View Source ApiScopes(IDataContext) Declaration public static ITable<ApiScope> ApiScopes(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ApiScope > | Improve this Doc View Source ApiSecrets(IDataContext) Declaration public static ITable<ApiSecret> ApiSecrets(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ApiSecret > | Improve this Doc View Source ClientClaims(IDataContext) Declaration public static ITable<ClientClaim> ClientClaims(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ClientClaim > | Improve this Doc View Source ClientCorsOrigins(IDataContext) Declaration public static ITable<ClientCorsOrigin> ClientCorsOrigins(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ClientCorsOrigin > | Improve this Doc View Source ClientGrantTypes(IDataContext) Declaration public static ITable<ClientGrantType> ClientGrantTypes(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ClientGrantType > | Improve this Doc View Source ClientIdPRestrictions(IDataContext) Declaration public static ITable<ClientIdentityProviderRestrictions> ClientIdPRestrictions(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ClientIdentityProviderRestrictions > | Improve this Doc View Source ClientPostLogoutRedirectUris(IDataContext) Declaration public static ITable<ClientPostLogoutRedirectUri> ClientPostLogoutRedirectUris(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ClientPostLogoutRedirectUri > | Improve this Doc View Source ClientRedirectUris(IDataContext) Declaration public static ITable<ClientRedirectUri> ClientRedirectUris(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ClientRedirectUri > | Improve this Doc View Source Clients(IDataContext) Declaration public static ITable<Client> Clients(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < Client > | Improve this Doc View Source ClientScopes(IDataContext) Declaration public static ITable<ClientScope> ClientScopes(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ClientScope > | Improve this Doc View Source ClientSecrets(IDataContext) Declaration public static ITable<ClientSecret> ClientSecrets(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < ClientSecret > | Improve this Doc View Source ComplexInsert(DataConnection, Models.ApiResource) Declaration public static ApiResource ComplexInsert(this DataConnection db, Models.ApiResource resource) Parameters Type Name Description DataConnection db IdentityServer4.Models.ApiResource resource Returns Type Description ApiResource | Improve this Doc View Source ComplexInsert(DataConnection, Models.Client) Declaration public static Client ComplexInsert(this DataConnection db, Models.Client client) Parameters Type Name Description DataConnection db IdentityServer4.Models.Client client Returns Type Description Client | Improve this Doc View Source ComplexInsert(DataConnection, Models.IdentityResource) Declaration public static IdentityResource ComplexInsert(this DataConnection db, Models.IdentityResource resource) Parameters Type Name Description DataConnection db IdentityServer4.Models.IdentityResource resource Returns Type Description IdentityResource | Improve this Doc View Source IdentityClaims(IDataContext) Declaration public static ITable<IdentityClaim> IdentityClaims(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < IdentityClaim > | Improve this Doc View Source PersistedGrants(IDataContext) Declaration public static ITable<PersistedGrant> PersistedGrants(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < PersistedGrant > | Improve this Doc View Source s(IDataContext) Declaration public static ITable<IdentityResource> s(this IDataContext db) Parameters Type Name Description IDataContext db Returns Type Description ITable < IdentityResource >"
  },
  "api/LinqToDB.Data.DataParameter.html": {
    "href": "api/LinqToDB.Data.DataParameter.html",
    "title": "Class DataParameter | Linq To DB (aka linq2db)",
    "keywords": "Class DataParameter Inheritance System.Object DataParameter Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataParameter : object Constructors | Improve this Doc View Source DataParameter() Declaration public DataParameter() | Improve this Doc View Source DataParameter(Nullable<String>, Nullable<Object>) Declaration public DataParameter(string? name, object? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.Object > value | Improve this Doc View Source DataParameter(Nullable<String>, Nullable<Object>, DataType) Declaration public DataParameter(string? name, object? value, DataType dataType) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.Object > value DataType dataType | Improve this Doc View Source DataParameter(Nullable<String>, Nullable<Object>, DataType, Nullable<String>) Declaration public DataParameter(string? name, object? value, DataType dataType, string? dbType) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.Object > value DataType dataType System.Nullable < System.String > dbType | Improve this Doc View Source DataParameter(Nullable<String>, Nullable<Object>, String) Declaration public DataParameter(string? name, object? value, string dbType) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.Object > value System.String dbType Properties | Improve this Doc View Source DataType Gets or sets the DataType of the parameter. Declaration public DataType DataType { get; set; } Property Value Type Description DataType One of the DataType values. The default is Undefined . | Improve this Doc View Source DbType Gets or sets Database Type name of the parameter. Declaration public string? DbType { get; set; } Property Value Type Description System.Nullable < System.String > Name of Database Type or empty string. | Improve this Doc View Source Direction Gets or sets a value indicating whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter. Declaration public ParameterDirection? Direction { get; set; } Property Value Type Description System.Nullable < ParameterDirection > One of the values. The default is Input. | Improve this Doc View Source IsArray Declaration public bool IsArray { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets or sets the name of the DataParameter . Declaration public string? Name { get; set; } Property Value Type Description System.Nullable < System.String > The name of the DataParameter . The default is an empty string. | Improve this Doc View Source Output Provider's parameter instance for out, in-out, return parameters. Could be used to read parameter value for complex types like Oracle's BFile. Declaration public IDbDataParameter? Output { get; } Property Value Type Description System.Nullable < IDbDataParameter > | Improve this Doc View Source Precision Gets or sets precision for parameter type. Declaration public int? Precision { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Scale Gets or sets scale for parameter type. Declaration public int? Scale { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Size Gets or sets the maximum size, in bytes, of the data within the column. Declaration public int? Size { get; set; } Property Value Type Description System.Nullable < System.Int32 > The maximum size, in bytes, of the data within the column. The default value is inferred from the parameter value. | Improve this Doc View Source Value Gets or sets the value of the parameter. Declaration public object? Value { get; set; } Property Value Type Description System.Nullable < System.Object > An that is the value of the parameter. The default value is null. Methods | Improve this Doc View Source Binary(Nullable<String>, Byte[]) Declaration public static DataParameter Binary(string? name, byte[] value) Parameters Type Name Description System.Nullable < System.String > name System.Byte [] value Returns Type Description DataParameter | Improve this Doc View Source Binary(Nullable<String>, Nullable<Binary>) Declaration public static DataParameter Binary(string? name, Binary? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < Binary > value Returns Type Description DataParameter | Improve this Doc View Source BinaryJson(Nullable<String>, Nullable<String>) Declaration public static DataParameter BinaryJson(string? name, string? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.String > value Returns Type Description DataParameter | Improve this Doc View Source BitArray(Nullable<String>, Nullable<BitArray>) Declaration public static DataParameter BitArray(string? name, BitArray? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < BitArray > value Returns Type Description DataParameter | Improve this Doc View Source Blob(Nullable<String>, Byte[]) Declaration public static DataParameter Blob(string? name, byte[] value) Parameters Type Name Description System.Nullable < System.String > name System.Byte [] value Returns Type Description DataParameter | Improve this Doc View Source Boolean(Nullable<String>, Boolean) Declaration public static DataParameter Boolean(string? name, bool value) Parameters Type Name Description System.Nullable < System.String > name System.Boolean value Returns Type Description DataParameter | Improve this Doc View Source Byte(Nullable<String>, Byte) Declaration public static DataParameter Byte(string? name, byte value) Parameters Type Name Description System.Nullable < System.String > name System.Byte value Returns Type Description DataParameter | Improve this Doc View Source Char(Nullable<String>, Char) Declaration public static DataParameter Char(string? name, char value) Parameters Type Name Description System.Nullable < System.String > name System.Char value Returns Type Description DataParameter | Improve this Doc View Source Char(Nullable<String>, Nullable<String>) Declaration public static DataParameter Char(string? name, string? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.String > value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, DateTime) Declaration public static DataParameter Create(string? name, DateTime value) Parameters Type Name Description System.Nullable < System.String > name DateTime value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, DateTimeOffset) Declaration public static DataParameter Create(string? name, DateTimeOffset value) Parameters Type Name Description System.Nullable < System.String > name DateTimeOffset value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Guid) Declaration public static DataParameter Create(string? name, Guid value) Parameters Type Name Description System.Nullable < System.String > name Guid value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Boolean) Declaration public static DataParameter Create(string? name, bool value) Parameters Type Name Description System.Nullable < System.String > name System.Boolean value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Byte) Declaration public static DataParameter Create(string? name, byte value) Parameters Type Name Description System.Nullable < System.String > name System.Byte value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Byte[]) Declaration public static DataParameter Create(string? name, byte[] value) Parameters Type Name Description System.Nullable < System.String > name System.Byte [] value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Char) Declaration public static DataParameter Create(string? name, char value) Parameters Type Name Description System.Nullable < System.String > name System.Char value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Decimal) Declaration public static DataParameter Create(string? name, decimal value) Parameters Type Name Description System.Nullable < System.String > name System.Decimal value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Double) Declaration public static DataParameter Create(string? name, double value) Parameters Type Name Description System.Nullable < System.String > name System.Double value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Int16) Declaration public static DataParameter Create(string? name, short value) Parameters Type Name Description System.Nullable < System.String > name System.Int16 value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Int32) Declaration public static DataParameter Create(string? name, int value) Parameters Type Name Description System.Nullable < System.String > name System.Int32 value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Int64) Declaration public static DataParameter Create(string? name, long value) Parameters Type Name Description System.Nullable < System.String > name System.Int64 value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Nullable<Binary>) Declaration public static DataParameter Create(string? name, Binary? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < Binary > value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Nullable<BitArray>) Declaration public static DataParameter Create(string? name, BitArray? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < BitArray > value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Nullable<Dictionary<String, String>>) Declaration public static DataParameter Create(string? name, Dictionary<string, string>? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < Dictionary < System.String , System.String >> value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Nullable<String>) Declaration public static DataParameter Create(string? name, string? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.String > value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Nullable<XDocument>) Declaration public static DataParameter Create(string? name, XDocument? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < XDocument > value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Nullable<XmlDocument>) Declaration public static DataParameter Create(string? name, XmlDocument? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < XmlDocument > value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, SByte) Declaration public static DataParameter Create(string? name, sbyte value) Parameters Type Name Description System.Nullable < System.String > name System.SByte value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, Single) Declaration public static DataParameter Create(string? name, float value) Parameters Type Name Description System.Nullable < System.String > name System.Single value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, UInt16) Declaration public static DataParameter Create(string? name, ushort value) Parameters Type Name Description System.Nullable < System.String > name System.UInt16 value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, UInt32) Declaration public static DataParameter Create(string? name, uint value) Parameters Type Name Description System.Nullable < System.String > name System.UInt32 value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, UInt64) Declaration public static DataParameter Create(string? name, ulong value) Parameters Type Name Description System.Nullable < System.String > name System.UInt64 value Returns Type Description DataParameter | Improve this Doc View Source Create(Nullable<String>, TimeSpan) Declaration public static DataParameter Create(string? name, TimeSpan value) Parameters Type Name Description System.Nullable < System.String > name TimeSpan value Returns Type Description DataParameter | Improve this Doc View Source Date(Nullable<String>, DateTime) Declaration public static DataParameter Date(string? name, DateTime value) Parameters Type Name Description System.Nullable < System.String > name DateTime value Returns Type Description DataParameter | Improve this Doc View Source DateTime(Nullable<String>, DateTime) Declaration public static DataParameter DateTime(string? name, DateTime value) Parameters Type Name Description System.Nullable < System.String > name DateTime value Returns Type Description DataParameter | Improve this Doc View Source DateTime2(Nullable<String>, DateTime) Declaration public static DataParameter DateTime2(string? name, DateTime value) Parameters Type Name Description System.Nullable < System.String > name DateTime value Returns Type Description DataParameter | Improve this Doc View Source DateTimeOffset(Nullable<String>, DateTimeOffset) Declaration public static DataParameter DateTimeOffset(string? name, DateTimeOffset value) Parameters Type Name Description System.Nullable < System.String > name DateTimeOffset value Returns Type Description DataParameter | Improve this Doc View Source Decimal(Nullable<String>, Decimal) Declaration public static DataParameter Decimal(string? name, decimal value) Parameters Type Name Description System.Nullable < System.String > name System.Decimal value Returns Type Description DataParameter | Improve this Doc View Source Dictionary(Nullable<String>, Nullable<IDictionary>) Declaration public static DataParameter Dictionary(string? name, IDictionary? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < IDictionary > value Returns Type Description DataParameter | Improve this Doc View Source Double(Nullable<String>, Double) Declaration public static DataParameter Double(string? name, double value) Parameters Type Name Description System.Nullable < System.String > name System.Double value Returns Type Description DataParameter | Improve this Doc View Source Guid(Nullable<String>, Guid) Declaration public static DataParameter Guid(string? name, Guid value) Parameters Type Name Description System.Nullable < System.String > name Guid value Returns Type Description DataParameter | Improve this Doc View Source Image(Nullable<String>, Byte[]) Declaration public static DataParameter Image(string? name, byte[] value) Parameters Type Name Description System.Nullable < System.String > name System.Byte [] value Returns Type Description DataParameter | Improve this Doc View Source Int16(Nullable<String>, Int16) Declaration public static DataParameter Int16(string? name, short value) Parameters Type Name Description System.Nullable < System.String > name System.Int16 value Returns Type Description DataParameter | Improve this Doc View Source Int32(Nullable<String>, Int32) Declaration public static DataParameter Int32(string? name, int value) Parameters Type Name Description System.Nullable < System.String > name System.Int32 value Returns Type Description DataParameter | Improve this Doc View Source Int64(Nullable<String>, Int64) Declaration public static DataParameter Int64(string? name, long value) Parameters Type Name Description System.Nullable < System.String > name System.Int64 value Returns Type Description DataParameter | Improve this Doc View Source Json(Nullable<String>, Nullable<String>) Declaration public static DataParameter Json(string? name, string? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.String > value Returns Type Description DataParameter | Improve this Doc View Source Money(Nullable<String>, Decimal) Declaration public static DataParameter Money(string? name, decimal value) Parameters Type Name Description System.Nullable < System.String > name System.Decimal value Returns Type Description DataParameter | Improve this Doc View Source NChar(Nullable<String>, Char) Declaration public static DataParameter NChar(string? name, char value) Parameters Type Name Description System.Nullable < System.String > name System.Char value Returns Type Description DataParameter | Improve this Doc View Source NChar(Nullable<String>, Nullable<String>) Declaration public static DataParameter NChar(string? name, string? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.String > value Returns Type Description DataParameter | Improve this Doc View Source NText(Nullable<String>, Nullable<String>) Declaration public static DataParameter NText(string? name, string? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.String > value Returns Type Description DataParameter | Improve this Doc View Source NVarChar(Nullable<String>, Char) Declaration public static DataParameter NVarChar(string? name, char value) Parameters Type Name Description System.Nullable < System.String > name System.Char value Returns Type Description DataParameter | Improve this Doc View Source NVarChar(Nullable<String>, Nullable<String>) Declaration public static DataParameter NVarChar(string? name, string? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.String > value Returns Type Description DataParameter | Improve this Doc View Source SByte(Nullable<String>, SByte) Declaration public static DataParameter SByte(string? name, sbyte value) Parameters Type Name Description System.Nullable < System.String > name System.SByte value Returns Type Description DataParameter | Improve this Doc View Source Single(Nullable<String>, Single) Declaration public static DataParameter Single(string? name, float value) Parameters Type Name Description System.Nullable < System.String > name System.Single value Returns Type Description DataParameter | Improve this Doc View Source SmallDateTime(Nullable<String>, DateTime) Declaration public static DataParameter SmallDateTime(string? name, DateTime value) Parameters Type Name Description System.Nullable < System.String > name DateTime value Returns Type Description DataParameter | Improve this Doc View Source SmallMoney(Nullable<String>, Decimal) Declaration public static DataParameter SmallMoney(string? name, decimal value) Parameters Type Name Description System.Nullable < System.String > name System.Decimal value Returns Type Description DataParameter | Improve this Doc View Source Text(Nullable<String>, Nullable<String>) Declaration public static DataParameter Text(string? name, string? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.String > value Returns Type Description DataParameter | Improve this Doc View Source Time(Nullable<String>, TimeSpan) Declaration public static DataParameter Time(string? name, TimeSpan value) Parameters Type Name Description System.Nullable < System.String > name TimeSpan value Returns Type Description DataParameter | Improve this Doc View Source Timestamp(Nullable<String>, Byte[]) Declaration public static DataParameter Timestamp(string? name, byte[] value) Parameters Type Name Description System.Nullable < System.String > name System.Byte [] value Returns Type Description DataParameter | Improve this Doc View Source Udt(Nullable<String>, Nullable<Object>) Declaration public static DataParameter Udt(string? name, object? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.Object > value Returns Type Description DataParameter | Improve this Doc View Source UInt16(Nullable<String>, UInt16) Declaration public static DataParameter UInt16(string? name, ushort value) Parameters Type Name Description System.Nullable < System.String > name System.UInt16 value Returns Type Description DataParameter | Improve this Doc View Source UInt32(Nullable<String>, UInt32) Declaration public static DataParameter UInt32(string? name, uint value) Parameters Type Name Description System.Nullable < System.String > name System.UInt32 value Returns Type Description DataParameter | Improve this Doc View Source UInt64(Nullable<String>, UInt64) Declaration public static DataParameter UInt64(string? name, ulong value) Parameters Type Name Description System.Nullable < System.String > name System.UInt64 value Returns Type Description DataParameter | Improve this Doc View Source VarBinary(Nullable<String>, Byte[]) Declaration public static DataParameter VarBinary(string? name, byte[] value) Parameters Type Name Description System.Nullable < System.String > name System.Byte [] value Returns Type Description DataParameter | Improve this Doc View Source VarBinary(Nullable<String>, Nullable<Binary>) Declaration public static DataParameter VarBinary(string? name, Binary? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < Binary > value Returns Type Description DataParameter | Improve this Doc View Source VarChar(Nullable<String>, Char) Declaration public static DataParameter VarChar(string? name, char value) Parameters Type Name Description System.Nullable < System.String > name System.Char value Returns Type Description DataParameter | Improve this Doc View Source VarChar(Nullable<String>, Nullable<String>) Declaration public static DataParameter VarChar(string? name, string? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.String > value Returns Type Description DataParameter | Improve this Doc View Source Variant(Nullable<String>, Nullable<Object>) Declaration public static DataParameter Variant(string? name, object? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.Object > value Returns Type Description DataParameter | Improve this Doc View Source VarNumeric(Nullable<String>, Decimal) Declaration public static DataParameter VarNumeric(string? name, decimal value) Parameters Type Name Description System.Nullable < System.String > name System.Decimal value Returns Type Description DataParameter | Improve this Doc View Source Xml(Nullable<String>, Nullable<String>) Declaration public static DataParameter Xml(string? name, string? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < System.String > value Returns Type Description DataParameter | Improve this Doc View Source Xml(Nullable<String>, Nullable<XDocument>) Declaration public static DataParameter Xml(string? name, XDocument? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < XDocument > value Returns Type Description DataParameter | Improve this Doc View Source Xml(Nullable<String>, Nullable<XmlDocument>) Declaration public static DataParameter Xml(string? name, XmlDocument? value) Parameters Type Name Description System.Nullable < System.String > name System.Nullable < XmlDocument > value Returns Type Description DataParameter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.DataReader.html": {
    "href": "api/LinqToDB.Data.DataReader.html",
    "title": "Class DataReader | Linq To DB (aka linq2db)",
    "keywords": "Class DataReader Inheritance System.Object DataReader Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataReader : IDisposable Properties | Improve this Doc View Source CommandInfo Declaration public CommandInfo CommandInfo { get; set; } Property Value Type Description CommandInfo | Improve this Doc View Source Reader Declaration public IDataReader? Reader { get; set; } Property Value Type Description System.Nullable < IDataReader > Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Execute<T>() Declaration public T Execute<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Query<T>() Declaration public IEnumerable<T> Query<T>() Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(T) Declaration public IEnumerable<T> Query<T>(T template) Parameters Type Name Description T template Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source Query<T>(Func<IDataReader, T>) Declaration public IEnumerable<T> Query<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Returns Type Description IEnumerable <T> Type Parameters Name Description T Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.DataReaderAsync.html": {
    "href": "api/LinqToDB.Data.DataReaderAsync.html",
    "title": "Class DataReaderAsync | Linq To DB (aka linq2db)",
    "keywords": "Class DataReaderAsync Inheritance System.Object DataReaderAsync Implements IAsyncDisposable Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class DataReaderAsync : IDisposable, IAsyncDisposable Properties | Improve this Doc View Source CommandInfo Declaration public CommandInfo CommandInfo { get; set; } Property Value Type Description CommandInfo | Improve this Doc View Source Reader Declaration public DbDataReader? Reader { get; set; } Property Value Type Description System.Nullable < DbDataReader > Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source DisposeAsync() Declaration public Task DisposeAsync() Returns Type Description Task | Improve this Doc View Source ExecuteForEachAsync<T>() Declaration public Task<T> ExecuteForEachAsync<T>() Returns Type Description Task <T> Type Parameters Name Description T | Improve this Doc View Source ExecuteForEachAsync<T>(CancellationToken) Declaration public async Task<T> ExecuteForEachAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task <T> Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(T, Action<T>) Declaration public Task QueryForEachAsync<T>(T template, Action<T> action) Parameters Type Name Description T template Action <T> action Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(T, Action<T>, CancellationToken) Declaration public Task QueryForEachAsync<T>(T template, Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description T template Action <T> action CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Action<T>) Declaration public Task QueryForEachAsync<T>(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Action<T>, CancellationToken) Declaration public async Task QueryForEachAsync<T>(Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description Action <T> action CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Func<IDataReader, T>, Action<T>) Declaration public Task QueryForEachAsync<T>(Func<IDataReader, T> objectReader, Action<T> action) Parameters Type Name Description Func < IDataReader , T> objectReader Action <T> action Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryForEachAsync<T>(Func<IDataReader, T>, Action<T>, CancellationToken) Declaration public async Task QueryForEachAsync<T>(Func<IDataReader, T> objectReader, Action<T> action, CancellationToken cancellationToken) Parameters Type Name Description Func < IDataReader , T> objectReader Action <T> action CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>() Declaration public Task<T[]> QueryToArrayAsync<T>() Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(T) Declaration public Task<T[]> QueryToArrayAsync<T>(T template) Parameters Type Name Description T template Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(T, CancellationToken) Declaration public async Task<T[]> QueryToArrayAsync<T>(T template, CancellationToken cancellationToken) Parameters Type Name Description T template CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(CancellationToken) Declaration public async Task<T[]> QueryToArrayAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(Func<IDataReader, T>) Declaration public Task<T[]> QueryToArrayAsync<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToArrayAsync<T>(Func<IDataReader, T>, CancellationToken) Declaration public async Task<T[]> QueryToArrayAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken) Parameters Type Name Description Func < IDataReader , T> objectReader CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>() Declaration public Task<List<T>> QueryToListAsync<T>() Returns Type Description Task < List <T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(T) Declaration public Task<List<T>> QueryToListAsync<T>(T template) Parameters Type Name Description T template Returns Type Description Task < List <T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(T, CancellationToken) Declaration public async Task<List<T>> QueryToListAsync<T>(T template, CancellationToken cancellationToken) Parameters Type Name Description T template CancellationToken cancellationToken Returns Type Description Task < List <T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(CancellationToken) Declaration public async Task<List<T>> QueryToListAsync<T>(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < List <T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(Func<IDataReader, T>) Declaration public Task<List<T>> QueryToListAsync<T>(Func<IDataReader, T> objectReader) Parameters Type Name Description Func < IDataReader , T> objectReader Returns Type Description Task < List <T>> Type Parameters Name Description T | Improve this Doc View Source QueryToListAsync<T>(Func<IDataReader, T>, CancellationToken) Declaration public async Task<List<T>> QueryToListAsync<T>(Func<IDataReader, T> objectReader, CancellationToken cancellationToken) Parameters Type Name Description Func < IDataReader , T> objectReader CancellationToken cancellationToken Returns Type Description Task < List <T>> Type Parameters Name Description T Implements IAsyncDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.DbCommandProcessor.DbCommandProcessorExtensions.html": {
    "href": "api/LinqToDB.Data.DbCommandProcessor.DbCommandProcessorExtensions.html",
    "title": "Class DbCommandProcessorExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class DbCommandProcessorExtensions Extension point adds possibility to change implementation of DbCommand methods ExecuteScalar, ExecuteNonQuery, ExecureReader and their Async equivalents. One of possible use cases: put commands into queue and initiate them in special separate thread, to overcome lock contention in TimerQueue.Timer Inheritance System.Object DbCommandProcessorExtensions Namespace : LinqToDB.Data.DbCommandProcessor Assembly : linq2db.dll Syntax public static class DbCommandProcessorExtensions : object Properties | Improve this Doc View Source Instance Single instance. Change of it is not thread safe. Declaration public static IDbCommandProcessor Instance { get; set; } Property Value Type Description IDbCommandProcessor Methods | Improve this Doc View Source ExecuteNonQueryExt(IDbCommand) Declaration public static int ExecuteNonQueryExt(this IDbCommand cmd) Parameters Type Name Description IDbCommand cmd Returns Type Description System.Int32 | Improve this Doc View Source ExecuteNonQueryExtAsync(DbCommand, CancellationToken) Declaration public static Task<int> ExecuteNonQueryExtAsync(this DbCommand cmd, CancellationToken token) Parameters Type Name Description DbCommand cmd CancellationToken token Returns Type Description Task < System.Int32 > | Improve this Doc View Source ExecuteReaderExt(IDbCommand, CommandBehavior) Declaration public static DbDataReader ExecuteReaderExt(this IDbCommand cmd, CommandBehavior commandBehavior) Parameters Type Name Description IDbCommand cmd CommandBehavior commandBehavior Returns Type Description DbDataReader | Improve this Doc View Source ExecuteReaderExtAsync(DbCommand, CommandBehavior, CancellationToken) Declaration public static Task<DbDataReader> ExecuteReaderExtAsync(this DbCommand cmd, CommandBehavior commandBehavior, CancellationToken token) Parameters Type Name Description DbCommand cmd CommandBehavior commandBehavior CancellationToken token Returns Type Description Task < DbDataReader > | Improve this Doc View Source ExecuteScalarExt(IDbCommand) Declaration public static object? ExecuteScalarExt(this IDbCommand cmd) Parameters Type Name Description IDbCommand cmd Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source ExecuteScalarExtAsync(DbCommand, CancellationToken) Declaration public static Task<object?> ExecuteScalarExtAsync(this DbCommand cmd, CancellationToken token) Parameters Type Name Description DbCommand cmd CancellationToken token Returns Type Description Task < System.Nullable < System.Object >>"
  },
  "api/LinqToDB.Data.DbCommandProcessor.html": {
    "href": "api/LinqToDB.Data.DbCommandProcessor.html",
    "title": "Namespace LinqToDB.Data.DbCommandProcessor | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Data.DbCommandProcessor Classes DbCommandProcessorExtensions Extension point adds possibility to change implementation of DbCommand methods ExecuteScalar, ExecuteNonQuery, ExecureReader and their Async equivalents. One of possible use cases: put commands into queue and initiate them in special separate thread, to overcome lock contention in TimerQueue.Timer Interfaces IDbCommandProcessor"
  },
  "api/LinqToDB.Data.DbCommandProcessor.IDbCommandProcessor.html": {
    "href": "api/LinqToDB.Data.DbCommandProcessor.IDbCommandProcessor.html",
    "title": "Interface IDbCommandProcessor | Linq To DB (aka linq2db)",
    "keywords": "Interface IDbCommandProcessor Namespace : LinqToDB.Data.DbCommandProcessor Assembly : linq2db.dll Syntax public interface IDbCommandProcessor Methods | Improve this Doc View Source ExecuteNonQuery(DbCommand) Declaration int ExecuteNonQuery(DbCommand command) Parameters Type Name Description DbCommand command Returns Type Description System.Int32 | Improve this Doc View Source ExecuteNonQueryAsync(DbCommand, CancellationToken) Declaration Task<int> ExecuteNonQueryAsync(DbCommand command, CancellationToken cancellationToken) Parameters Type Name Description DbCommand command CancellationToken cancellationToken Returns Type Description Task < System.Int32 > | Improve this Doc View Source ExecuteReader(DbCommand, CommandBehavior) Declaration DbDataReader ExecuteReader(DbCommand command, CommandBehavior commandBehavior) Parameters Type Name Description DbCommand command CommandBehavior commandBehavior Returns Type Description DbDataReader | Improve this Doc View Source ExecuteReaderAsync(DbCommand, CommandBehavior, CancellationToken) Declaration Task<DbDataReader> ExecuteReaderAsync(DbCommand command, CommandBehavior commandBehavior, CancellationToken cancellationToken) Parameters Type Name Description DbCommand command CommandBehavior commandBehavior CancellationToken cancellationToken Returns Type Description Task < DbDataReader > | Improve this Doc View Source ExecuteScalar(DbCommand) Declaration object? ExecuteScalar(DbCommand command) Parameters Type Name Description DbCommand command Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source ExecuteScalarAsync(DbCommand, CancellationToken) Declaration Task<object?> ExecuteScalarAsync(DbCommand command, CancellationToken cancellationToken) Parameters Type Name Description DbCommand command CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Object >> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.html": {
    "href": "api/LinqToDB.Data.html",
    "title": "Namespace LinqToDB.Data | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Data Classes BulkCopyOptions Defines behavior of method. BulkCopyRowsCopied CommandInfo Provides database connection command abstraction. DataConnection Implements persistent database connection abstraction over different database engines. Could be initialized using connection string name or connection string, or attached to existing connection or transaction. DataConnectionExtensions Contains extension methods for DataConnection class. DataConnectionTransaction Data connection transaction controller. DataContextExtensions DataParameter DataReader DataReaderAsync TraceInfo Tracing information for the DataConnection events. Enums BulkCopyType Bulk copy implementation type. For more details on support level by provider see this article . TraceInfoStep Tracing steps for the DataConnection trace events. TraceOperation Type of operation associated with specific trace event."
  },
  "api/LinqToDB.Data.RetryPolicy.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.html",
    "title": "Namespace LinqToDB.Data.RetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Data.RetryPolicy Classes RetryLimitExceededException RetryPolicyBase Interfaces IRetryPolicy"
  },
  "api/LinqToDB.Data.RetryPolicy.IRetryPolicy.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.IRetryPolicy.html",
    "title": "Interface IRetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Interface IRetryPolicy Namespace : LinqToDB.Data.RetryPolicy Assembly : linq2db.dll Syntax public interface IRetryPolicy Methods | Improve this Doc View Source Execute(Action) Declaration void Execute(Action operation) Parameters Type Name Description Action operation | Improve this Doc View Source Execute<TResult>(Func<TResult>) Executes the specified operation and returns the result. Declaration TResult Execute<TResult>(Func<TResult> operation) Parameters Type Name Description Func <TResult> operation A delegate representing an executable operation that returns the result of type TResult . Returns Type Description TResult The result from the operation. Type Parameters Name Description TResult The return type of operation . | Improve this Doc View Source ExecuteAsync(Func<CancellationToken, Task>, CancellationToken) Declaration Task ExecuteAsync(Func<CancellationToken, Task> operation, CancellationToken cancellationToken = null) Parameters Type Name Description Func < CancellationToken , Task > operation CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) Executes the specified asynchronous operation and returns the result. Declaration Task<TResult> ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken = null) Parameters Type Name Description Func < CancellationToken , Task <TResult>> operation A function that returns a started task of type TResult . CancellationToken cancellationToken A cancellation token used to cancel the retry operation, but not operations that are already in flight or that already completed successfully. Returns Type Description Task <TResult> A task that will run to completion if the original task completes successfully (either the first time or after retrying transient failures). If the task fails with a non-transient error or the retry limit is reached, the returned task will become faulted and the exception must be observed. Type Parameters Name Description TResult The result type of the returned by operation . Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.RetryPolicy.RetryLimitExceededException.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.RetryLimitExceededException.html",
    "title": "Class RetryLimitExceededException | Linq To DB (aka linq2db)",
    "keywords": "Class RetryLimitExceededException Inheritance System.Object LinqToDBException RetryLimitExceededException Namespace : LinqToDB.Data.RetryPolicy Assembly : linq2db.dll Syntax public class RetryLimitExceededException : LinqToDBException Constructors | Improve this Doc View Source RetryLimitExceededException() Declaration public RetryLimitExceededException() | Improve this Doc View Source RetryLimitExceededException(Exception) Declaration public RetryLimitExceededException(Exception innerException) Parameters Type Name Description Exception innerException | Improve this Doc View Source RetryLimitExceededException(SerializationInfo, StreamingContext) Declaration protected RetryLimitExceededException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.RetryPolicy.RetryPolicyBase.html": {
    "href": "api/LinqToDB.Data.RetryPolicy.RetryPolicyBase.html",
    "title": "Class RetryPolicyBase | Linq To DB (aka linq2db)",
    "keywords": "Class RetryPolicyBase Inheritance System.Object RetryPolicyBase SqlServerRetryPolicy Implements IRetryPolicy Namespace : LinqToDB.Data.RetryPolicy Assembly : linq2db.dll Syntax public abstract class RetryPolicyBase : object, IRetryPolicy Constructors | Improve this Doc View Source RetryPolicyBase(Int32, TimeSpan) Creates a new instance of RetryPolicyBase . Declaration protected RetryPolicyBase(int maxRetryCount, TimeSpan maxRetryDelay) Parameters Type Name Description System.Int32 maxRetryCount The maximum number of retry attempts. TimeSpan maxRetryDelay The maximum delay in milliseconds between retries. Properties | Improve this Doc View Source ExceptionsEncountered The list of exceptions that caused the operation to be retried so far. Declaration protected virtual List<Exception> ExceptionsEncountered { get; } Property Value Type Description List < Exception > | Improve this Doc View Source MaxRetryCount The maximum number of retry attempts. Declaration protected virtual int MaxRetryCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxRetryDelay The maximum delay in milliseconds between retries. Declaration protected virtual TimeSpan MaxRetryDelay { get; } Property Value Type Description TimeSpan | Improve this Doc View Source Random A pseudo-random number generater that can be used to vary the delay between retries. Declaration protected virtual Random Random { get; } Property Value Type Description Random | Improve this Doc View Source Suspended Indicates whether the strategy is suspended. The strategy is typically suspending while executing to avoid recursive execution from nested operations. Declaration protected static bool Suspended { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Execute(Action) Declaration public virtual void Execute(Action operation) Parameters Type Name Description Action operation | Improve this Doc View Source Execute<TResult>(Func<TResult>) Executes the specified operation and returns the result. Declaration public virtual TResult Execute<TResult>(Func<TResult> operation) Parameters Type Name Description Func <TResult> operation A delegate representing an executable operation that returns the result of type TResult . Returns Type Description TResult The result from the operation. Type Parameters Name Description TResult The return type of operation . | Improve this Doc View Source ExecuteAsync(Func<CancellationToken, Task>, CancellationToken) Declaration public async Task ExecuteAsync(Func<CancellationToken, Task> operation, CancellationToken cancellationToken = null) Parameters Type Name Description Func < CancellationToken , Task > operation CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) Executes the specified asynchronous operation and returns the result. Declaration public virtual Task<TResult> ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>> operation, CancellationToken cancellationToken = null) Parameters Type Name Description Func < CancellationToken , Task <TResult>> operation A function that returns a started task of type TResult . CancellationToken cancellationToken A cancellation token used to cancel the retry operation, but not operations that are already in flight or that already completed successfully. Returns Type Description Task <TResult> A task that will run to completion if the original task completes successfully (either the first time or after retrying transient failures). If the task fails with a non-transient error or the retry limit is reached, the returned task will become faulted and the exception must be observed. Type Parameters Name Description TResult The result type of the returned by operation . | Improve this Doc View Source GetNextDelay(Exception) Determines whether the operation should be retried and the delay before the next attempt. Declaration protected virtual TimeSpan? GetNextDelay(Exception lastException) Parameters Type Name Description Exception lastException The exception thrown during the last execution attempt. Returns Type Description System.Nullable < TimeSpan > Returns the delay indicating how long to wait for before the next execution attempt if the operation should be retried; null otherwise | Improve this Doc View Source OnFirstExecution() Method called before the first operation execution Declaration protected virtual void OnFirstExecution() | Improve this Doc View Source OnRetry() Method called before retrying the operation execution Declaration protected virtual void OnRetry() | Improve this Doc View Source ShouldRetryOn(Exception) Determines whether the specified exception represents a transient failure that can be compensated by a retry. Declaration protected abstract bool ShouldRetryOn(Exception exception) Parameters Type Name Description Exception exception The exception object to be verified. Returns Type Description System.Boolean true if the specified exception is considered as transient, otherwise false . Implements IRetryPolicy Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.TraceInfo.html": {
    "href": "api/LinqToDB.Data.TraceInfo.html",
    "title": "Class TraceInfo | Linq To DB (aka linq2db)",
    "keywords": "Class TraceInfo Tracing information for the DataConnection events. Inheritance System.Object TraceInfo Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public class TraceInfo : object Constructors | Improve this Doc View Source TraceInfo(DataConnection, TraceInfoStep, TraceOperation, Boolean) Initializes a new instance of the TraceInfo class. Declaration public TraceInfo(DataConnection dataConnection, TraceInfoStep traceInfoStep, TraceOperation operation, bool isAsync) Parameters Type Name Description DataConnection dataConnection DataConnection instance, generated this trace. TraceInfoStep traceInfoStep Trace execution step. TraceOperation operation Operation associated with trace event. System.Boolean isAsync Flag indicating whether operation was executed asynchronously. Properties | Improve this Doc View Source Command Gets or sets the associated with the tracing event. Declaration public IDbCommand? Command { get; set; } Property Value Type Description System.Nullable < IDbCommand > | Improve this Doc View Source CommandText Gets or sets the text of the command. Declaration public string? CommandText { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataConnection Gets or sets the DataConnection that produced the tracing event. Declaration public DataConnection DataConnection { get; } Property Value Type Description DataConnection | Improve this Doc View Source Exception Gets or sets the Exception for Error step. Declaration public Exception? Exception { get; set; } Property Value Type Description System.Nullable < Exception > | Improve this Doc View Source ExecutionTime Gets or sets the execution time for AfterExecute , Completed , and Error steps. Declaration public TimeSpan? ExecutionTime { get; set; } Property Value Type Description System.Nullable < TimeSpan > | Improve this Doc View Source IsAsync Gets a flag indicating whether operation was executed asynchronously. Declaration public bool IsAsync { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MapperExpression Gets or sets the expression used by the results mapper. Declaration public Expression? MapperExpression { get; set; } Property Value Type Description System.Nullable < Expression > | Improve this Doc View Source Operation Gets the operation, for which tracing event generated, TraceOperation . Declaration public TraceOperation Operation { get; } Property Value Type Description TraceOperation | Improve this Doc View Source RecordsAffected Gets or sets the number of rows affected by the command or the number of rows produced by the DataReader . Declaration public int? RecordsAffected { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source SqlText Gets the formatted SQL text of the command. Declaration public string SqlText { get; } Property Value Type Description System.String | Improve this Doc View Source StartTime Gets or sets the starting of the operation (UTC). Declaration public DateTime? StartTime { get; set; } Property Value Type Description System.Nullable < DateTime > | Improve this Doc View Source TraceInfoStep Gets the tracing execution step, TraceInfoStep . Declaration public TraceInfoStep TraceInfoStep { get; } Property Value Type Description TraceInfoStep | Improve this Doc View Source TraceLevel Gets or sets the tracing detail level, TraceLevel . Declaration public TraceLevel TraceLevel { get; set; } Property Value Type Description TraceLevel Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Data.TraceInfoStep.html": {
    "href": "api/LinqToDB.Data.TraceInfoStep.html",
    "title": "Enum TraceInfoStep | Linq To DB (aka linq2db)",
    "keywords": "Enum TraceInfoStep Tracing steps for the DataConnection trace events. Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public enum TraceInfoStep : int Fields Name Description AfterExecute Occurs after a command is executed. BeforeExecute Occurs before executing a command. Completed Occurs when an operation is completed and its associated DataReader is closed. Error Occurs when an error happened during the command execution. MapperCreated Occurs when the result mapper was created. See Also TraceInfo Extension Methods Map.DeepCopy<TraceInfoStep>() Sql.IsDistinctFrom<TraceInfoStep>(TraceInfoStep) Sql.IsDistinctFrom<TraceInfoStep>(Nullable<TraceInfoStep>) Sql.IsNotDistinctFrom<TraceInfoStep>(TraceInfoStep) Sql.IsNotDistinctFrom<TraceInfoStep>(Nullable<TraceInfoStep>) SqlExtensions.In<TraceInfoStep>(IEnumerable<TraceInfoStep>) SqlExtensions.In<TraceInfoStep>(IQueryable<TraceInfoStep>) SqlExtensions.In<TraceInfoStep>(TraceInfoStep[]) SqlExtensions.In<TraceInfoStep>(TraceInfoStep, TraceInfoStep) SqlExtensions.In<TraceInfoStep>(TraceInfoStep, TraceInfoStep, TraceInfoStep) SqlExtensions.NotIn<TraceInfoStep>(IEnumerable<TraceInfoStep>) SqlExtensions.NotIn<TraceInfoStep>(IQueryable<TraceInfoStep>) SqlExtensions.NotIn<TraceInfoStep>(TraceInfoStep[]) SqlExtensions.NotIn<TraceInfoStep>(TraceInfoStep, TraceInfoStep) SqlExtensions.NotIn<TraceInfoStep>(TraceInfoStep, TraceInfoStep, TraceInfoStep)"
  },
  "api/LinqToDB.Data.TraceOperation.html": {
    "href": "api/LinqToDB.Data.TraceOperation.html",
    "title": "Enum TraceOperation | Linq To DB (aka linq2db)",
    "keywords": "Enum TraceOperation Type of operation associated with specific trace event. Namespace : LinqToDB.Data Assembly : linq2db.dll Syntax public enum TraceOperation : int Fields Name Description BuildMapping Mapper build operation. See also IsAsync . BulkCopy or operation. See also IsAsync . DisposeQuery Query runner disposal operation. See also IsAsync . ExecuteNonQuery or operation. See also IsAsync . ExecuteReader or operation. See also IsAsync . ExecuteScalar or operation. See also IsAsync . Open or operation. See also IsAsync . See Also TraceInfo Extension Methods Map.DeepCopy<TraceOperation>() Sql.IsDistinctFrom<TraceOperation>(TraceOperation) Sql.IsDistinctFrom<TraceOperation>(Nullable<TraceOperation>) Sql.IsNotDistinctFrom<TraceOperation>(TraceOperation) Sql.IsNotDistinctFrom<TraceOperation>(Nullable<TraceOperation>) SqlExtensions.In<TraceOperation>(IEnumerable<TraceOperation>) SqlExtensions.In<TraceOperation>(IQueryable<TraceOperation>) SqlExtensions.In<TraceOperation>(TraceOperation[]) SqlExtensions.In<TraceOperation>(TraceOperation, TraceOperation) SqlExtensions.In<TraceOperation>(TraceOperation, TraceOperation, TraceOperation) SqlExtensions.NotIn<TraceOperation>(IEnumerable<TraceOperation>) SqlExtensions.NotIn<TraceOperation>(IQueryable<TraceOperation>) SqlExtensions.NotIn<TraceOperation>(TraceOperation[]) SqlExtensions.NotIn<TraceOperation>(TraceOperation, TraceOperation) SqlExtensions.NotIn<TraceOperation>(TraceOperation, TraceOperation, TraceOperation)"
  },
  "api/LinqToDB.DataContext.html": {
    "href": "api/LinqToDB.DataContext.html",
    "title": "Class DataContext | Linq To DB (aka linq2db)",
    "keywords": "Class DataContext Implements abstraction over non-persistent database connection that could be released after query or transaction execution. Inheritance System.Object DataContext Implements IDataContext IDisposable IAsyncDisposable IEntityServices Namespace : LinqToDB Assembly : linq2db.dll Syntax public class DataContext : object, IDataContext, IAsyncDisposable, IEntityServices Constructors | Improve this Doc View Source DataContext() Creates data context using default database configuration. DefaultConfiguration for more details. Declaration public DataContext() | Improve this Doc View Source DataContext(IDataProvider, String) Creates data context using specific data provider implementation and connection string. Declaration public DataContext(IDataProvider dataProvider, string connectionString) Parameters Type Name Description IDataProvider dataProvider Database provider implementation. System.String connectionString Database connection string. | Improve this Doc View Source DataContext(Nullable<String>) Creates data context using specific database configuration. Declaration public DataContext(string? configurationString) Parameters Type Name Description System.Nullable < System.String > configurationString Connection configuration name. In case of null value, context will use default configuration. DefaultConfiguration for more details. | Improve this Doc View Source DataContext(String, String) Creates data context using specified database provider and connection string. Declaration public DataContext(string providerName, string connectionString) Parameters Type Name Description System.String providerName Name of database provider to use with this connection. ProviderName class for list of providers. System.String connectionString Database connection string to use for connection with database. Properties | Improve this Doc View Source CloseAfterUse Gets or sets flag to close context after query execution or leave it open. Declaration public bool CloseAfterUse { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source CommandTimeout Gets or sets command execution timeout in seconds. Negative timeout value means that default timeout will be used. 0 timeout value corresponds to infinite timeout. By default timeout is not set and default value for current provider used. Declaration public int CommandTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConfigurationString Gets initial value for database connection configuration name. Declaration public string? ConfigurationString { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ConnectionString Gets initial value for database connection string. Declaration public string? ConnectionString { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ContextID Gets or sets context identifier. Uses provider's name by default. Declaration public string ContextID { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataProvider Gets database provider implementation. Declaration public IDataProvider DataProvider { get; } Property Value Type Description IDataProvider | Improve this Doc View Source InlineParameters Gets or sets option to force inline parameter values as literals into command text. If parameter inlining not supported for specific value type, it will be used as parameter. Declaration public bool InlineParameters { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsMarsEnabled Gets or sets status of Multiple Active Result Sets (MARS) feature. This feature available only for SQL Azure and SQL Server 2005+. Declaration public bool IsMarsEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source KeepConnectionAlive Gets or sets option to dispose underlying connection after use. Default value: false . Declaration public bool KeepConnectionAlive { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LastQuery Contains text of last command, sent to database using current context. Declaration public string? LastQuery { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source MappingSchema Gets or sets mapping schema. Uses provider's mapping schema by default. Declaration public MappingSchema MappingSchema { get; set; } Property Value Type Description MappingSchema | Improve this Doc View Source NextQueryHints Gets list of query hints (writable collection), that will be used only for next query, executed through current context. Declaration public List<string> NextQueryHints { get; } Property Value Type Description List < System.String > | Improve this Doc View Source OnEntityCreated Occurs when a new entity is created during query materialization. Not triggered for explicitly constructed objects. In code below event could be triggered only for first query: // r created by linq2db from r in db.table select r; // Entity constructor specified explicitly by user (projection) from r in db.table select new Entity() { field = r.field }; . Declaration public Action<EntityCreatedEventArgs>? OnEntityCreated { get; set; } Property Value Type Description System.Nullable < Action < EntityCreatedEventArgs >> | Improve this Doc View Source OnTraceConnection Gets or sets trace handler, used for data connection instance. Declaration public Action<TraceInfo>? OnTraceConnection { get; set; } Property Value Type Description System.Nullable < Action < TraceInfo >> | Improve this Doc View Source QueryHints Gets list of query hints (writable collection), that will be used for all queries, executed through current context. Declaration public List<string> QueryHints { get; } Property Value Type Description List < System.String > Methods | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts new transaction for current context with specified isolation level. If connection already has transaction, it will be rolled back. Declaration public virtual DataContextTransaction BeginTransaction(IsolationLevel level) Parameters Type Name Description IsolationLevel level Transaction isolation level. Returns Type Description DataContextTransaction Database transaction object. | Improve this Doc View Source BeginTransaction(Boolean) Starts new transaction for current context with default isolation level. If connection already has transaction, it will be rolled back. Declaration public virtual DataContextTransaction BeginTransaction(bool autoCommitOnDispose = true) Parameters Type Name Description System.Boolean autoCommitOnDispose Not supported, see issue . Returns Type Description DataContextTransaction Database transaction object. | Improve this Doc View Source BeginTransactionAsync(IsolationLevel, CancellationToken) Starts new transaction asynchronously for current context with specified isolation level. If connection already has transaction, it will be rolled back. Declaration public virtual async Task<DataContextTransaction> BeginTransactionAsync(IsolationLevel level, CancellationToken cancellationToken = null) Parameters Type Name Description IsolationLevel level Transaction isolation level. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < DataContextTransaction > Database transaction object. | Improve this Doc View Source BeginTransactionAsync(Boolean, CancellationToken) Starts new transaction asynchronously for current context with default isolation level. If connection already has transaction, it will be rolled back. Declaration public virtual async Task<DataContextTransaction> BeginTransactionAsync(bool autoCommitOnDispose = true, CancellationToken cancellationToken = null) Parameters Type Name Description System.Boolean autoCommitOnDispose Not supported, see issue . CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < DataContextTransaction > Database transaction object. | Improve this Doc View Source CloneDataConnection(DataConnection, IAsyncDbTransaction, IAsyncDbConnection) Creates instance of DataConnection class, attached to same database connection/transaction. Used by Clone(Boolean) API only if IsMarsEnabled is true and there is an active connection associated with current context. dbConnection and dbTransaction parameters are mutually exclusive. One and only one parameter will have value - if there is active transaction, dbTransaction parameter value provided, otherwise dbConnection parameter has value. Declaration protected virtual DataConnection CloneDataConnection(DataConnection currentConnection, IAsyncDbTransaction dbTransaction, IAsyncDbConnection dbConnection) Parameters Type Name Description DataConnection currentConnection DataConnection instance, used by current context instance. IAsyncDbTransaction dbTransaction Transaction, associated with currentConnection . IAsyncDbConnection dbConnection Connection, associated with dbConnection . Returns Type Description DataConnection New DataConnection instance. | Improve this Doc View Source CreateDataConnection() Creates instance of DataConnection class, used by context internally. Declaration protected virtual DataConnection CreateDataConnection() Returns Type Description DataConnection New DataConnection instance. | Improve this Doc View Source Dispose(Boolean) Closes underlying connection and fires OnClosing event (only if connection existed). Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source DisposeAsync(Boolean) Closes underlying connection and fires OnClosing event (only if connection existed). Declaration protected virtual Task DisposeAsync(bool disposing) Parameters Type Name Description System.Boolean disposing Returns Type Description Task Events | Improve this Doc View Source OnClosing Event, triggered before underlying connection closed on context disposal or closing. Not fired, if context doesn't have active connection (bug?). Declaration public event EventHandler? OnClosing Event Type Type Description System.Nullable < EventHandler > Explicit Interface Implementations | Improve this Doc View Source IAsyncDisposable.DisposeAsync() Declaration async Task IAsyncDisposable.DisposeAsync() Returns Type Description Task | Improve this Doc View Source IDataContext.Clone(Boolean) Declaration IDataContext IDataContext.Clone(bool forNestedQuery) Parameters Type Name Description System.Boolean forNestedQuery Returns Type Description IDataContext | Improve this Doc View Source IDataContext.Close() Declaration void IDataContext.Close() | Improve this Doc View Source IDataContext.CloseAsync() Declaration async Task IDataContext.CloseAsync() Returns Type Description Task | Improve this Doc View Source IDataContext.CreateSqlProvider Declaration Func<ISqlBuilder> IDataContext.CreateSqlProvider { get; } Returns Type Description Func < ISqlBuilder > | Improve this Doc View Source IDataContext.DataReaderType Declaration Type IDataContext.DataReaderType { get; } Returns Type Description Type | Improve this Doc View Source IDataContext.GetQueryRunner(Query, Int32, Expression, Nullable<Object>[], Nullable<Object>[]) Declaration IQueryRunner IDataContext.GetQueryRunner(Query query, int queryNumber, Expression expression, object? [] parameters, object? [] preambles) Parameters Type Name Description Query query System.Int32 queryNumber Expression expression System.Nullable < System.Object >[] parameters System.Nullable < System.Object >[] preambles Returns Type Description IQueryRunner | Improve this Doc View Source IDataContext.GetReaderExpression(IDataReader, Int32, Expression, Type) Declaration Expression IDataContext.GetReaderExpression(IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description IDataReader reader System.Int32 idx Expression readerExpression Type toType Returns Type Description Expression | Improve this Doc View Source IDataContext.GetSqlOptimizer Declaration Func<ISqlOptimizer> IDataContext.GetSqlOptimizer { get; } Returns Type Description Func < ISqlOptimizer > | Improve this Doc View Source IDataContext.IsDBNullAllowed(IDataReader, Int32) Declaration bool? IDataContext.IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader System.Int32 idx Returns Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IDataContext.SqlProviderFlags Declaration SqlProviderFlags IDataContext.SqlProviderFlags { get; } Returns Type Description SqlProviderFlags | Improve this Doc View Source IDataContext.SupportedTableOptions Declaration TableOptions IDataContext.SupportedTableOptions { get; } Returns Type Description TableOptions Implements IDataContext IDisposable IAsyncDisposable IEntityServices Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataContextTransaction.html": {
    "href": "api/LinqToDB.DataContextTransaction.html",
    "title": "Class DataContextTransaction | Linq To DB (aka linq2db)",
    "keywords": "Class DataContextTransaction Explicit data context DataContext transaction wrapper. Inheritance System.Object DataContextTransaction Namespace : LinqToDB Assembly : linq2db.dll Syntax public class DataContextTransaction : IDisposable Constructors | Improve this Doc View Source DataContextTransaction(DataContext) Creates new transaction wrapper. Declaration public DataContextTransaction(DataContext dataContext) Parameters Type Name Description DataContext dataContext Data context. Properties | Improve this Doc View Source DataContext Gets or sets transaction's data context. Declaration public DataContext DataContext { get; set; } Property Value Type Description DataContext Methods | Improve this Doc View Source BeginTransaction() Start new transaction with default isolation level. If underlying connection already has transaction, it will be rolled back. Declaration public void BeginTransaction() | Improve this Doc View Source BeginTransaction(IsolationLevel) Start new transaction with specified isolation level. If underlying connection already has transaction, it will be rolled back. Declaration public void BeginTransaction(IsolationLevel level) Parameters Type Name Description IsolationLevel level Transaction isolation level. | Improve this Doc View Source BeginTransactionAsync(CancellationToken) Start new transaction asynchronously with default isolation level. If underlying connection already has transaction, it will be rolled back. Declaration public async Task BeginTransactionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task | Improve this Doc View Source BeginTransactionAsync(IsolationLevel, CancellationToken) Start new transaction asynchronously with specified isolation level. If underlying connection already has transaction, it will be rolled back. Declaration public async Task BeginTransactionAsync(IsolationLevel level, CancellationToken cancellationToken = null) Parameters Type Name Description IsolationLevel level Transaction isolation level. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task | Improve this Doc View Source CommitTransaction() Commits started transaction. Declaration public void CommitTransaction() | Improve this Doc View Source CommitTransactionAsync(CancellationToken) Commits started transaction. If underlying provider doesn't support asynchronous commit, it will be performed synchronously. Declaration public async Task CommitTransactionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. | Improve this Doc View Source Dispose() Rollbacks started transaction (if any). Declaration public void Dispose() | Improve this Doc View Source RollbackTransaction() Rollbacks started transaction. Declaration public void RollbackTransaction() | Improve this Doc View Source RollbackTransactionAsync(CancellationToken) Rollbacks started transaction asynchronously. If underlying provider doesn't support asynchronous rollback, it will be performed synchronously. Declaration public async Task RollbackTransactionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataExtensions.html": {
    "href": "api/LinqToDB.DataExtensions.html",
    "title": "Class DataExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class DataExtensions Data context extension methods. Inheritance System.Object DataExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class DataExtensions : object Fields | Improve this Doc View Source SelectQueryMethodInfo Declaration public static MethodInfo SelectQueryMethodInfo Field Value Type Description MethodInfo Methods | Improve this Doc View Source Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) Compiles the query. Declaration public static Func<TDc, TResult> Compile<TDc, TResult>(this IDataContext dataContext, Expression<Func<TDc, TResult>> query) where TDc : IDataContext Parameters Type Name Description IDataContext dataContext Data connection context. Expression < Func <TDc, TResult>> query The query expression to be compiled. Returns Type Description Func <TDc, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Type of data context parameter, passed to compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) Compiles the query with parameter. Declaration public static Func<TDc, TArg1, TResult> Compile<TDc, TArg1, TResult>(this IDataContext dataContext, Expression<Func<TDc, TArg1, TResult>> query) where TDc : IDataContext Parameters Type Name Description IDataContext dataContext Data connection context. Expression < Func <TDc, TArg1, TResult>> query The query expression to be compiled. Returns Type Description Func <TDc, TArg1, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Type of data context parameter, passed to compiled query. TArg1 Type of parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) Compiles the query with two parameters. Declaration public static Func<TDc, TArg1, TArg2, TResult> Compile<TDc, TArg1, TArg2, TResult>(this IDataContext dataContext, Expression<Func<TDc, TArg1, TArg2, TResult>> query) where TDc : IDataContext Parameters Type Name Description IDataContext dataContext Data connection context. Expression < Func <TDc, TArg1, TArg2, TResult>> query The query expression to be compiled. Returns Type Description Func <TDc, TArg1, TArg2, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TResult Query result type. | Improve this Doc View Source Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) Compiles the query with three parameters. Declaration public static Func<TDc, TArg1, TArg2, TArg3, TResult> Compile<TDc, TArg1, TArg2, TArg3, TResult>(this IDataContext dataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>> query) where TDc : IDataContext Parameters Type Name Description IDataContext dataContext Data connection context. Expression < Func <TDc, TArg1, TArg2, TArg3, TResult>> query The query expression to be compiled. Returns Type Description Func <TDc, TArg1, TArg2, TArg3, TResult> A generic delegate that represents the compiled query. Type Parameters Name Description TDc Type of data context parameter, passed to compiled query. TArg1 Type of first parameter for compiled query. TArg2 Type of second parameter for compiled query. TArg3 Type of third parameter for compiled query. TResult Query result type. | Improve this Doc View Source CreateTable<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, DefaultNullable, Nullable<String>, TableOptions) Creates new table in database for mapping class T . Information about table name, columns names and types is taken from mapping class. Declaration public static ITable<T> CreateTable<T>(this IDataContext dataContext, string? tableName = null, string? databaseName = null, string? schemaName = null, string? statementHeader = null, string? statementFooter = null, DefaultNullable defaultNullable = DefaultNullable.None, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > statementHeader Optional replacement for \"CREATE TABLE table_name\" header. Header is a template with {0} parameter for table name. System.Nullable < System.String > statementFooter Optional SQL, appended to generated create table statement. DefaultNullable defaultNullable Defines how columns nullability flag should be generated: - Null - generate only NOT NULL for non-nullable fields. Missing nullability information treated as NULL by database. - NotNull - generate only NULL for nullable fields. Missing nullability information treated as NOT NULL by database. - None - explicitly generate NULL and NOT NULL for all columns. Default value: None . System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description ITable <T> Created table as queryable source. Type Parameters Name Description T Mapping class. | Improve this Doc View Source CreateTableAsync<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, DefaultNullable, Nullable<String>, TableOptions, CancellationToken) Asynchronously creates new table in database for mapping class T . Information about table name, columns names and types is taken from mapping class. Declaration public static Task<ITable<T>> CreateTableAsync<T>(this IDataContext dataContext, string? tableName = null, string? databaseName = null, string? schemaName = null, string? statementHeader = null, string? statementFooter = null, DefaultNullable defaultNullable = DefaultNullable.None, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > statementHeader Optional replacement for \"CREATE TABLE table_name\" header. Header is a template with {0} parameter for table name. System.Nullable < System.String > statementFooter Optional SQL, appended to generated create table statement. DefaultNullable defaultNullable Defines how columns nullability flag should be generated: - Null - generate only NOT NULL for non-nullable fields. Missing nullability information treated as NULL by database. - NotNull - generate only NULL for nullable fields. Missing nullability information treated as NOT NULL by database. - None - explicitly generate NULL and NOT NULL for all columns. Default value: None . System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < ITable <T>> Created table as queryable source. Type Parameters Name Description T Mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Creates new temporary table and populate it using BulkCopy. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, IEnumerable<T> items, BulkCopyOptions options = null, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = default(TableOptions)) where T : class Parameters Type Name Description IDataContext db Database connection instance. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, IQueryable<T>, Action<EntityMappingBuilder<T>>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Action<ITable<T>>>, Nullable<String>, TableOptions) Creates new temporary table and populate it using data from provided query. Table mapping could be changed using fluent mapper. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, IQueryable<T> items, Action<EntityMappingBuilder<T>> setTable, string? tableName = null, string? databaseName = null, string? schemaName = null, Action<ITable<T>>? action = null, string? serverName = null, TableOptions tableOptions = default(TableOptions)) where T : class Parameters Type Name Description IDataContext db Database connection instance. IQueryable <T> items Query to get records to populate created table with initial data. Action < EntityMappingBuilder <T>> setTable Action to modify T entity's mapping using fluent mapping. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Action < ITable <T>>> action Optional action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Action<ITable<T>>>, Nullable<String>, TableOptions) Creates new temporary table and populate it using data from provided query. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, IQueryable<T> items, string? tableName = null, string? databaseName = null, string? schemaName = null, Action<ITable<T>>? action = null, string? serverName = null, TableOptions tableOptions = default(TableOptions)) where T : class Parameters Type Name Description IDataContext db Database connection instance. IQueryable <T> items Query to get records to populate created table with initial data. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Action < ITable <T>>> action Optional action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, Nullable<String>, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Creates new temporary table and populate it using BulkCopy. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, string? tableName, IEnumerable<T> items, BulkCopyOptions options = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = default(TableOptions)) where T : class Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, Nullable<String>, IQueryable<T>, Action<EntityMappingBuilder<T>>, Nullable<String>, Nullable<String>, Nullable<Action<ITable<T>>>, Nullable<String>, TableOptions) Creates new temporary table and populate it using data from provided query. Table mapping could be changed using fluent mapper. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, string? tableName, IQueryable<T> items, Action<EntityMappingBuilder<T>> setTable, string? databaseName = null, string? schemaName = null, Action<ITable<T>>? action = null, string? serverName = null, TableOptions tableOptions = default(TableOptions)) where T : class Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. IQueryable <T> items Query to get records to populate created table with initial data. Action < EntityMappingBuilder <T>> setTable Action to modify T entity's mapping using fluent mapping. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Action < ITable <T>>> action Optional action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, Nullable<String>, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<Action<ITable<T>>>, Nullable<String>, TableOptions) Creates new temporary table and populate it using data from provided query. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, string? tableName, IQueryable<T> items, string? databaseName = null, string? schemaName = null, Action<ITable<T>>? action = null, string? serverName = null, TableOptions tableOptions = default(TableOptions)) where T : class Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. IQueryable <T> items Query to get records to populate created table with initial data. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Action < ITable <T>>> action Optional action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTable<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Creates new temporary table. Declaration public static TempTable<T> CreateTempTable<T>(this IDataContext db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = default(TableOptions)) where T : class Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTableAsync<T>(IDataContext, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table and populate it using BulkCopy. Declaration public static Task<TempTable<T>> CreateTempTableAsync<T>(this IDataContext db, IEnumerable<T> items, BulkCopyOptions options = null, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = default(TableOptions), CancellationToken cancellationToken = null) where T : class Parameters Type Name Description IDataContext db Database connection instance. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTableAsync<T>(IDataContext, IQueryable<T>, Action<EntityMappingBuilder<T>>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Func<ITable<T>, Task>>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table and populate it using data from provided query. Table mapping could be changed using fluent mapper. Declaration public static Task<TempTable<T>> CreateTempTableAsync<T>(this IDataContext db, IQueryable<T> items, Action<EntityMappingBuilder<T>> setTable, string? tableName = null, string? databaseName = null, string? schemaName = null, Func<ITable<T>, Task>? action = null, string? serverName = null, TableOptions tableOptions = default(TableOptions), CancellationToken cancellationToken = null) where T : class Parameters Type Name Description IDataContext db Database connection instance. IQueryable <T> items Query to get records to populate created table with initial data. Action < EntityMappingBuilder <T>> setTable Action to modify T entity's mapping using fluent mapping. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Func < ITable <T>, Task >> action Optional asynchronous action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTableAsync<T>(IDataContext, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Func<ITable<T>, Task>>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table and populate it using data from provided query. Declaration public static Task<TempTable<T>> CreateTempTableAsync<T>(this IDataContext db, IQueryable<T> items, string? tableName = null, string? databaseName = null, string? schemaName = null, Func<ITable<T>, Task>? action = null, string? serverName = null, TableOptions tableOptions = default(TableOptions), CancellationToken cancellationToken = null) where T : class Parameters Type Name Description IDataContext db Database connection instance. IQueryable <T> items Query to get records to populate created table with initial data. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Func < ITable <T>, Task >> action Optional asynchronous action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTableAsync<T>(IDataContext, Nullable<String>, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table and populate it using BulkCopy. Declaration public static Task<TempTable<T>> CreateTempTableAsync<T>(this IDataContext db, string? tableName, IEnumerable<T> items, BulkCopyOptions options = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = default(TableOptions), CancellationToken cancellationToken = null) where T : class Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTableAsync<T>(IDataContext, Nullable<String>, IQueryable<T>, Action<EntityMappingBuilder<T>>, Nullable<String>, Nullable<String>, Nullable<Func<ITable<T>, Task>>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table and populate it using data from provided query. Table mapping could be changed using fluent mapper. Declaration public static Task<TempTable<T>> CreateTempTableAsync<T>(this IDataContext db, string? tableName, IQueryable<T> items, Action<EntityMappingBuilder<T>> setTable, string? databaseName = null, string? schemaName = null, Func<ITable<T>, Task>? action = null, string? serverName = null, TableOptions tableOptions = default(TableOptions), CancellationToken cancellationToken = null) where T : class Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. IQueryable <T> items Query to get records to populate created table with initial data. Action < EntityMappingBuilder <T>> setTable Action to modify T entity's mapping using fluent mapping. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Func < ITable <T>, Task >> action Optional asynchronous action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTableAsync<T>(IDataContext, Nullable<String>, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<Func<ITable<T>, Task>>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table and populate it using data from provided query. Declaration public static Task<TempTable<T>> CreateTempTableAsync<T>(this IDataContext db, string? tableName, IQueryable<T> items, string? databaseName = null, string? schemaName = null, Func<ITable<T>, Task>? action = null, string? serverName = null, TableOptions tableOptions = default(TableOptions), CancellationToken cancellationToken = null) where T : class Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. IQueryable <T> items Query to get records to populate created table with initial data. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Func < ITable <T>, Task >> action Optional asynchronous action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source CreateTempTableAsync<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table. Declaration public static Task<TempTable<T>> CreateTempTableAsync<T>(this IDataContext db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = default(TableOptions), CancellationToken cancellationToken = null) where T : class Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source Delete<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Deletes record in table, identified by T mapping class. Record to delete identified by match on primary key value from obj value. Declaration public static int Delete<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data for delete operation. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source DeleteAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously deletes record in table, identified by T mapping class. Record to delete identified by match on primary key value from obj value. Declaration public static Task<int> DeleteAsync<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data for delete operation. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source DropTable<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Boolean>, Nullable<String>, TableOptions) Drops table identified by mapping class T . Declaration public static void DropTable<T>(this IDataContext dataContext, string? tableName = null, string? databaseName = null, string? schemaName = null, bool? throwExceptionIfNotExists = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.Boolean > throwExceptionIfNotExists If false , any exception during drop operation will be silently caught and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Type Parameters Name Description T Mapping class. | Improve this Doc View Source DropTable<T>(ITable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Boolean>, Nullable<String>, TableOptions) Drops table identified by table parameter. Declaration public static void DropTable<T>(this ITable<T> table, string? tableName = null, string? databaseName = null, string? schemaName = null, bool? throwExceptionIfNotExists = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description ITable <T> table Dropped table. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.Boolean > throwExceptionIfNotExists If false , any exception during drop operation will be silently caught and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Type Parameters Name Description T Mapping class. | Improve this Doc View Source DropTableAsync<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Boolean>, Nullable<String>, TableOptions, CancellationToken) Asynchronously drops table identified by mapping class T . Declaration public static async Task DropTableAsync<T>(this IDataContext dataContext, string? tableName = null, string? databaseName = null, string? schemaName = null, bool? throwExceptionIfNotExists = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.Boolean > throwExceptionIfNotExists If false , any exception during drop operation will be silently caught and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. Type Parameters Name Description T Mapping class. | Improve this Doc View Source DropTableAsync<T>(ITable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Boolean>, Nullable<String>, TableOptions, CancellationToken) Asynchronously drops table identified by table parameter. Declaration public static async Task DropTableAsync<T>(this ITable<T> table, string? tableName = null, string? databaseName = null, string? schemaName = null, bool? throwExceptionIfNotExists = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description ITable <T> table Dropped table. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.Boolean > throwExceptionIfNotExists If false , any exception during drop operation will be silently caught and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task Asynchronous operation completion task. Type Parameters Name Description T Mapping class. | Improve this Doc View Source FromSql<TEntity>(IDataContext, RawSqlString, Nullable<Object>[]) Creates a LINQ query based on a raw SQL query. If the database provider supports composing on the supplied SQL, you can compose on top of the raw SQL query using LINQ operators - context.FromSql<Blogs>(\"SELECT * FROM dbo.Blogs\").OrderBy(b => b.Name); As with any API that accepts SQL it is important to parametrize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter - context.FromSql<Blogs>(\"SELECT * FROM [dbo].[SearchBlogs]({0})\", userSuppliedSearchTerm); This overload also accepts DbParameter instances as parameter values. context.FromSql<Blogs>(\"SELECT * FROM [dbo].[SearchBlogs]({0})\", new DataParameter(\"@searchTerm\", userSuppliedSearchTerm, DataType.Int64)); Declaration public static IQueryable<TEntity> FromSql<TEntity>(this IDataContext dataContext, RawSqlString sql, params object? [] parameters) Parameters Type Name Description IDataContext dataContext Database connection context. RawSqlString sql The raw SQL query System.Nullable < System.Object >[] parameters The values to be assigned to parameters. Returns Type Description IQueryable <TEntity> An representing the raw SQL query. Type Parameters Name Description TEntity Source query record type. Remarks Additional parentheses will be added to the query if first word in raw query is 'SELECT', otherwise users are responsible to add them themselves. | Improve this Doc View Source GetCte<T>(IDataContext, Func<IQueryable<T>, IQueryable<T>>, Nullable<String>) Helps to define a recursive CTE. Declaration public static IQueryable<T> GetCte<T>(this IDataContext dataContext, Func<IQueryable<T>, IQueryable<T>> cteBody, string? cteTableName = null) Parameters Type Name Description IDataContext dataContext Database connection context. Func < IQueryable <T>, IQueryable <T>> cteBody Recursive query body. System.Nullable < System.String > cteTableName Common table expression name. Returns Type Description IQueryable <T> Common table expression. Type Parameters Name Description T Source query record type. | Improve this Doc View Source GetCte<T>(IDataContext, Nullable<String>, Func<IQueryable<T>, IQueryable<T>>) Helps to define a recursive CTE. Declaration public static IQueryable<T> GetCte<T>(this IDataContext dataContext, string? cteTableName, Func<IQueryable<T>, IQueryable<T>> cteBody) Parameters Type Name Description IDataContext dataContext Database connection context. System.Nullable < System.String > cteTableName Common table expression name. Func < IQueryable <T>, IQueryable <T>> cteBody Recursive query body. Returns Type Description IQueryable <T> Common table expression. Type Parameters Name Description T Source query record type. | Improve this Doc View Source GetTable<T>(IDataContext) Returns queryable source for specified mapping class for current connection, mapped to database table or view. Declaration public static ITable<T> GetTable<T>(this IDataContext dataContext) where T : class Parameters Type Name Description IDataContext dataContext Data connection context. Returns Type Description ITable <T> Queryable source. Type Parameters Name Description T Mapping class type. | Improve this Doc View Source GetTable<T>(IDataContext, Nullable<Object>, MethodInfo, Nullable<Object>[]) Returns queryable source for specified mapping class for current connection, mapped to table expression or function. It could be used e.g. for queries to table-valued functions or to decorate queried table with hints. Declaration public static ITable<T> GetTable<T>(this IDataContext dataContext, object? instance, MethodInfo methodInfo, params object? [] parameters) where T : class Parameters Type Name Description IDataContext dataContext Data connection context. System.Nullable < System.Object > instance Instance object for methodInfo method or null for static method. MethodInfo methodInfo Method, decorated with expression attribute, based on Sql.TableFunctionAttribute . System.Nullable < System.Object >[] parameters Parameters for methodInfo method. Returns Type Description ITable <T> Queryable source. Type Parameters Name Description T Mapping class type. | Improve this Doc View Source Insert<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts record into table, identified by T mapping class, using values from obj parameter. Declaration public static int Insert<T>(this IDataContext dataContext, T obj, InsertColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. InsertColumnFilter <T> columnFilter Filter columns to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source Insert<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts record into table, identified by T mapping class, using values from obj parameter. Declaration public static int Insert<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertAsync<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Inserts record asynchronously into table, identified by T mapping class, using values from obj parameter. Declaration public static Task<int> InsertAsync<T>(this IDataContext dataContext, T obj, InsertColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. InsertColumnFilter <T> columnFilter Filter columns to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Inserts record asynchronously into table, identified by T mapping class, using values from obj parameter. Declaration public static Task<int> InsertAsync<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertOrReplace<T>(IDataContext, T, InsertOrUpdateColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts new record into table, identified by T mapping class, using values from obj parameter or update existing record, identified by match on primary key value. Declaration public static int InsertOrReplace<T>(this IDataContext dataContext, T obj, InsertOrUpdateColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert or update. InsertOrUpdateColumnFilter <T> columnFilter Filter columns to insert and update. Parameters: entity, column descriptor and operation ( true for insert ) System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertOrReplace<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts new record into table, identified by T mapping class, using values from obj parameter or update existing record, identified by match on primary key value. Declaration public static int InsertOrReplace<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert or update. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertOrReplaceAsync<T>(IDataContext, T, InsertOrUpdateColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously inserts new record into table, identified by T mapping class, using values from obj parameter or update existing record, identified by match on primary key value. Declaration public static Task<int> InsertOrReplaceAsync<T>(this IDataContext dataContext, T obj, InsertOrUpdateColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert or update. InsertOrUpdateColumnFilter <T> columnFilter Filter columns to insert and update. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertOrReplaceAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously inserts new record into table, identified by T mapping class, using values from obj parameter or update existing record, identified by match on primary key value. Declaration public static Task<int> InsertOrReplaceAsync<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert or update. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithDecimalIdentity<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static decimal InsertWithDecimalIdentity<T>(this IDataContext dataContext, T obj, InsertColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. InsertColumnFilter <T> columnFilter Filter columns to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Decimal Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithDecimalIdentity<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static decimal InsertWithDecimalIdentity<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Decimal Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithDecimalIdentityAsync<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static async Task<decimal> InsertWithDecimalIdentityAsync<T>(this IDataContext dataContext, T obj, InsertColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. InsertColumnFilter <T> columnFilter Filter columns to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Decimal > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithDecimalIdentityAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static Task<decimal> InsertWithDecimalIdentityAsync<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Decimal > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithIdentity<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record. Declaration public static object InsertWithIdentity<T>(this IDataContext dataContext, T obj, InsertColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. InsertColumnFilter <T> columnFilter Filter columns to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Object Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithIdentity<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record. Declaration public static object InsertWithIdentity<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Object Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithIdentityAsync<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record. Declaration public static Task<object> InsertWithIdentityAsync<T>(this IDataContext dataContext, T obj, InsertColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. InsertColumnFilter <T> columnFilter Filter columns to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Object > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithIdentityAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record. Declaration public static Task<object> InsertWithIdentityAsync<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Object > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt32Identity<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static int InsertWithInt32Identity<T>(this IDataContext dataContext, T obj, InsertColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. InsertColumnFilter <T> columnFilter Filter columns to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt32Identity<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static int InsertWithInt32Identity<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt32IdentityAsync<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static async Task<int> InsertWithInt32IdentityAsync<T>(this IDataContext dataContext, T obj, InsertColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. InsertColumnFilter <T> columnFilter Filter columns to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt32IdentityAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static Task<int> InsertWithInt32IdentityAsync<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt64Identity<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static long InsertWithInt64Identity<T>(this IDataContext dataContext, T obj, InsertColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. InsertColumnFilter <T> columnFilter Filter columns to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int64 Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt64Identity<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static long InsertWithInt64Identity<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int64 Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt64IdentityAsync<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static async Task<long> InsertWithInt64IdentityAsync<T>(this IDataContext dataContext, T obj, InsertColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. InsertColumnFilter <T> columnFilter Filter columns to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int64 > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source InsertWithInt64IdentityAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously inserts record into table, identified by T mapping class, using values from obj parameter. Returns identity value for inserted record as value. Declaration public static Task<long> InsertWithInt64IdentityAsync<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to insert. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int64 > Inserted record's identity value. Type Parameters Name Description T Mapping class. | Improve this Doc View Source IntoTempTable<T>(IEnumerable<T>, IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, BulkCopyOptions) Creates new temporary table and populate it using BulkCopy. Declaration public static TempTable<T> IntoTempTable<T>(this IEnumerable<T> items, IDataContext db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = default(TableOptions), BulkCopyOptions options = null) where T : class Parameters Type Name Description IEnumerable <T> items Initial records to insert into created table. IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . BulkCopyOptions options Optional BulkCopy options. Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source IntoTempTable<T>(IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, Nullable<Action<ITable<T>>>, Nullable<Action<EntityMappingBuilder<T>>>) Creates new temporary table and populate it using data from provided query. Declaration public static TempTable<T> IntoTempTable<T>(this IQueryable<T> items, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = default(TableOptions), Action<ITable<T>>? action = null, Action<EntityMappingBuilder<T>>? setTable = null) where T : class Parameters Type Name Description IQueryable <T> items Query to get records to populate created table with initial data. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . System.Nullable < Action < ITable <T>>> action Optional action that will be executed after table creation, but before it populated with data from items . System.Nullable < Action < EntityMappingBuilder <T>>> setTable Action to modify T entity's mapping using fluent mapping. Returns Type Description TempTable <T> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source IntoTempTableAsync<T>(IEnumerable<T>, IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, BulkCopyOptions, CancellationToken) Creates new temporary table and populate it using BulkCopy. Declaration public static Task<TempTable<T>> IntoTempTableAsync<T>(this IEnumerable<T> items, IDataContext db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = default(TableOptions), BulkCopyOptions options = null, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description IEnumerable <T> items Initial records to insert into created table. IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . BulkCopyOptions options Optional BulkCopy options. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source IntoTempTableAsync<T>(IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, Nullable<Func<ITable<T>, Task>>, Nullable<Action<EntityMappingBuilder<T>>>, CancellationToken) Creates new temporary table and populate it using data from provided query. Table mapping could be changed using fluent mapper. Declaration public static Task<TempTable<T>> IntoTempTableAsync<T>(this IQueryable<T> items, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = default(TableOptions), Func<ITable<T>, Task>? action = null, Action<EntityMappingBuilder<T>>? setTable = null, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description IQueryable <T> items Query to get records to populate created table with initial data. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. Default is IsTemporary . System.Nullable < Func < ITable <T>, Task >> action Optional asynchronous action that will be executed after table creation but before it populated with data from items . System.Nullable < Action < EntityMappingBuilder <T>>> setTable Action to modify T entity's mapping using fluent mapping. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> Returns temporary table instance. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source SelectQuery<TEntity>(IDataContext, Expression<Func<TEntity>>) Creates a LINQ query based on expression. Returned represents single record. Could be useful for function calls, querying of database variables, properties or sub-queries. Declaration public static IQueryable<TEntity> SelectQuery<TEntity>(this IDataContext dataContext, Expression<Func<TEntity>> selector) Parameters Type Name Description IDataContext dataContext Database connection context. Expression < Func <TEntity>> selector Value selection expression. Returns Type Description IQueryable <TEntity> An representing single record. Type Parameters Name Description TEntity Type of result. Remarks Method works for most supported database engines, except databases which do not support SELECT Value without FROM statement. For Oracle it will be translated to SELECT Value FROM SYS.DUAL Examples Complex record: db.SelectQuery(() => new { Version = 1, CurrentTimeStamp = Sql.CurrentTimeStamp }); Scalar value: db.SelectQuery(() => Sql.CurrentTimeStamp); | Improve this Doc View Source Update<T>(IDataContext, T, UpdateColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Updates record in table, identified by T mapping class, using values from obj parameter. Record to update identified by match on primary key value from obj value. Declaration public static int Update<T>(this IDataContext dataContext, T obj, UpdateColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to update. UpdateColumnFilter <T> columnFilter Filter columns to update. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source Update<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Updates record in table, identified by T mapping class, using values from obj parameter. Record to update identified by match on primary key value from obj value. Declaration public static int Update<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to update. System.Nullable < System.String > tableName Optional table name to override default table name, extracted from T mapping. System.Nullable < System.String > databaseName Optional database name, to override default database name. See method for support information per provider. System.Nullable < System.String > schemaName Optional schema/owner name, to override default name. See method for support information per provider. System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source UpdateAsync<T>(IDataContext, T, UpdateColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously updates record in table, identified by T mapping class, using values from obj parameter. Record to update identified by match on primary key value from obj value. Declaration public static Task<int> UpdateAsync<T>(this IDataContext dataContext, T obj, UpdateColumnFilter<T> columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to update. UpdateColumnFilter <T> columnFilter Filter columns to update. System.Nullable < System.String > tableName Name of the table System.Nullable < System.String > databaseName Name of the database System.Nullable < System.String > schemaName Name of the schema System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description T Mapping class. | Improve this Doc View Source UpdateAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Asynchronously updates record in table, identified by T mapping class, using values from obj parameter. Record to update identified by match on primary key value from obj value. Declaration public static Task<int> UpdateAsync<T>(this IDataContext dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken token = null) Parameters Type Name Description IDataContext dataContext Database connection context. T obj Object with data to update. System.Nullable < System.String > tableName Name of the table System.Nullable < System.String > databaseName Name of the database System.Nullable < System.String > schemaName Name of the schema System.Nullable < System.String > serverName Optional linked server name. See method for support information per provider. TableOptions tableOptions Table options. See TableOptions enum for support information per provider. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description T Mapping class."
  },
  "api/LinqToDB.DataProvider.Access.AccessMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessMappingSchema.html",
    "title": "Class AccessMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class AccessMappingSchema Inheritance System.Object MappingSchema AccessMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public class AccessMappingSchema : MappingSchema Constructors | Improve this Doc View Source AccessMappingSchema() Declaration public AccessMappingSchema() | Improve this Doc View Source AccessMappingSchema(String) Declaration protected AccessMappingSchema(string configuration) Parameters Type Name Description System.String configuration Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Access.AccessMappingSchema.ODBCMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessMappingSchema.ODBCMappingSchema.html",
    "title": "Class AccessMappingSchema.ODBCMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class AccessMappingSchema.ODBCMappingSchema Inheritance System.Object MappingSchema AccessMappingSchema.ODBCMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public class ODBCMappingSchema : MappingSchema Constructors | Improve this Doc View Source ODBCMappingSchema() Declaration public ODBCMappingSchema() Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Access.AccessMappingSchema.OleDbMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessMappingSchema.OleDbMappingSchema.html",
    "title": "Class AccessMappingSchema.OleDbMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class AccessMappingSchema.OleDbMappingSchema Inheritance System.Object MappingSchema AccessMappingSchema.OleDbMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public class OleDbMappingSchema : MappingSchema Constructors | Improve this Doc View Source OleDbMappingSchema() Declaration public OleDbMappingSchema() Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Access.AccessODBCDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessODBCDataProvider.html",
    "title": "Class AccessODBCDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class AccessODBCDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < OdbcProviderAdapter > AccessODBCDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<OdbcProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<OdbcProviderAdapter>.Adapter DynamicDataProviderBase<OdbcProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<OdbcProviderAdapter>.DataReaderType DynamicDataProviderBase<OdbcProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<OdbcProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<OdbcProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<OdbcProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<OdbcProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DbDataType) Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public class AccessODBCDataProvider : DynamicDataProviderBase<OdbcProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source AccessODBCDataProvider() Declaration public AccessODBCDataProvider() | Improve this Doc View Source AccessODBCDataProvider(String, MappingSchema) Declaration protected AccessODBCDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Access.AccessOleDbDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessOleDbDataProvider.html",
    "title": "Class AccessOleDbDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class AccessOleDbDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < OleDbProviderAdapter > AccessOleDbDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<OleDbProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<OleDbProviderAdapter>.Adapter DynamicDataProviderBase<OleDbProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<OleDbProviderAdapter>.DataReaderType DynamicDataProviderBase<OleDbProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<OleDbProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<OleDbProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<OleDbProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<OleDbProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<OleDbProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<OleDbProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<OleDbProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<OleDbProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<OleDbProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<OleDbProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) DataProviderBase.ConvertParameterType(Type, DbDataType) Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public class AccessOleDbDataProvider : DynamicDataProviderBase<OleDbProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source AccessOleDbDataProvider() Declaration public AccessOleDbDataProvider() | Improve this Doc View Source AccessOleDbDataProvider(String, MappingSchema) Declaration protected AccessOleDbDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Access.AccessTools.html": {
    "href": "api/LinqToDB.DataProvider.Access.AccessTools.html",
    "title": "Class AccessTools | Linq To DB (aka linq2db)",
    "keywords": "Class AccessTools Contains Access provider management tools. Inheritance System.Object AccessTools Namespace : LinqToDB.DataProvider.Access Assembly : linq2db.dll Syntax public static class AccessTools : object Properties | Improve this Doc View Source DefaultBulkCopyType Default bulk copy mode, used for Access by BulkCopy<T>(DataConnection, IEnumerable<T>) methods, if mode is not specified explicitly. Default value: MultipleRows . Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDatabase(String, Boolean, String) Creates new Access database file. Requires Access OLE DB provider (JET or ACE) and ADOX. Declaration public static void CreateDatabase(string databaseName, bool deleteIfExists = false, string provider = \"Microsoft.Jet.OLEDB.4.0\") Parameters Type Name Description System.String databaseName Name of database to create. System.Boolean deleteIfExists If true , existing database will be removed before create. System.String provider Name of OleDb provider to use to create database. Default value: \"Microsoft.Jet.OLEDB.4.0\". Remarks Provider value examples: Microsoft.Jet.OLEDB.4.0 (for JET database), Microsoft.ACE.OLEDB.12.0, Microsoft.ACE.OLEDB.15.0 (for ACE database). | Improve this Doc View Source CreateDataConnection(IDbConnection, Nullable<String>) Creates DataConnection object using provided connection object. Declaration public static DataConnection CreateDataConnection(IDbConnection connection, string? providerName = null) Parameters Type Name Description IDbConnection connection Connection instance. System.Nullable < System.String > providerName Provider name. Returns Type Description DataConnection DataConnection instance. | Improve this Doc View Source CreateDataConnection(IDbTransaction, Nullable<String>) Creates DataConnection object using provided transaction object. Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, string? providerName = null) Parameters Type Name Description IDbTransaction transaction Transaction instance. System.Nullable < System.String > providerName Provider name. Returns Type Description DataConnection DataConnection instance. | Improve this Doc View Source CreateDataConnection(String, Nullable<String>) Creates DataConnection object using provided Access connection string. Declaration public static DataConnection CreateDataConnection(string connectionString, string? providerName = null) Parameters Type Name Description System.String connectionString Connection string. System.Nullable < System.String > providerName Provider name. Returns Type Description DataConnection DataConnection instance. | Improve this Doc View Source DropDatabase(String) Removes database file by database name. Declaration public static void DropDatabase(string databaseName) Parameters Type Name Description System.String databaseName Name of database to remove. | Improve this Doc View Source GetDataProvider(Nullable<String>) Returns instance of Access database provider. Declaration public static IDataProvider GetDataProvider(string? providerName = null) Parameters Type Name Description System.Nullable < System.String > providerName Returns Type Description IDataProvider AccessOleDbDataProvider or AccessODBCDataProvider instance. | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Int32 maxBatchSize System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T"
  },
  "api/LinqToDB.DataProvider.Access.html": {
    "href": "api/LinqToDB.DataProvider.Access.html",
    "title": "Namespace LinqToDB.DataProvider.Access | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Access Classes AccessMappingSchema AccessMappingSchema.ODBCMappingSchema AccessMappingSchema.OleDbMappingSchema AccessODBCDataProvider AccessOleDbDataProvider AccessTools Contains Access provider management tools."
  },
  "api/LinqToDB.DataProvider.BasicBulkCopy.html": {
    "href": "api/LinqToDB.DataProvider.BasicBulkCopy.html",
    "title": "Class BasicBulkCopy | Linq To DB (aka linq2db)",
    "keywords": "Class BasicBulkCopy Inheritance System.Object BasicBulkCopy Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class BasicBulkCopy : object Properties | Improve this Doc View Source CastOnUnionAll Declaration protected virtual bool CastOnUnionAll { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxParameters Declaration protected virtual int MaxParameters { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxSqlLength Declaration protected virtual int MaxSqlLength { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TypeAllUnionParameters Declaration protected virtual bool TypeAllUnionParameters { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source BulkCopy<T>(BulkCopyType, ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public virtual BulkCopyRowsCopied BulkCopy<T>(BulkCopyType bulkCopyType, ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description BulkCopyType bulkCopyType ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source BulkCopyAsync<T>(BulkCopyType, ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public virtual Task<BulkCopyRowsCopied> BulkCopyAsync<T>(BulkCopyType bulkCopyType, ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description BulkCopyType bulkCopyType ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T | Improve this Doc View Source GetTableName<T>(ISqlBuilder, BulkCopyOptions, ITable<T>, Boolean) Declaration protected static string GetTableName<T>(ISqlBuilder sqlBuilder, BulkCopyOptions options, ITable<T> table, bool escaped = true) Parameters Type Name Description ISqlBuilder sqlBuilder BulkCopyOptions options ITable <T> table System.Boolean escaped Returns Type Description System.String Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration protected virtual BulkCopyRowsCopied MultipleRowsCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy1(MultipleRowsHelper, IEnumerable) Declaration protected BulkCopyRowsCopied MultipleRowsCopy1(MultipleRowsHelper helper, IEnumerable source) Parameters Type Name Description MultipleRowsHelper helper IEnumerable source Returns Type Description BulkCopyRowsCopied | Improve this Doc View Source MultipleRowsCopy1<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration protected BulkCopyRowsCopied MultipleRowsCopy1<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy1Async(MultipleRowsHelper, IEnumerable, CancellationToken) Declaration protected Task<BulkCopyRowsCopied> MultipleRowsCopy1Async(MultipleRowsHelper helper, IEnumerable source, CancellationToken cancellationToken) Parameters Type Name Description MultipleRowsHelper helper IEnumerable source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > | Improve this Doc View Source MultipleRowsCopy1Async<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration protected Task<BulkCopyRowsCopied> MultipleRowsCopy1Async<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy2(MultipleRowsHelper, IEnumerable, String) Declaration protected BulkCopyRowsCopied MultipleRowsCopy2(MultipleRowsHelper helper, IEnumerable source, string from) Parameters Type Name Description MultipleRowsHelper helper IEnumerable source System.String from Returns Type Description BulkCopyRowsCopied | Improve this Doc View Source MultipleRowsCopy2<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, String) Declaration protected BulkCopyRowsCopied MultipleRowsCopy2<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, string from) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source System.String from Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy2Async(MultipleRowsHelper, IEnumerable, String, CancellationToken) Declaration protected Task<BulkCopyRowsCopied> MultipleRowsCopy2Async(MultipleRowsHelper helper, IEnumerable source, string from, CancellationToken cancellationToken) Parameters Type Name Description MultipleRowsHelper helper IEnumerable source System.String from CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > | Improve this Doc View Source MultipleRowsCopy2Async<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, String, CancellationToken) Declaration protected Task<BulkCopyRowsCopied> MultipleRowsCopy2Async<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, string from, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source System.String from CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy3(MultipleRowsHelper, BulkCopyOptions, IEnumerable, String) Declaration protected BulkCopyRowsCopied MultipleRowsCopy3(MultipleRowsHelper helper, BulkCopyOptions options, IEnumerable source, string from) Parameters Type Name Description MultipleRowsHelper helper BulkCopyOptions options IEnumerable source System.String from Returns Type Description BulkCopyRowsCopied | Improve this Doc View Source MultipleRowsCopy3Async(MultipleRowsHelper, BulkCopyOptions, IEnumerable, String, CancellationToken) Declaration protected Task<BulkCopyRowsCopied> MultipleRowsCopy3Async(MultipleRowsHelper helper, BulkCopyOptions options, IEnumerable source, string from, CancellationToken cancellationToken) Parameters Type Name Description MultipleRowsHelper helper BulkCopyOptions options IEnumerable source System.String from CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > | Improve this Doc View Source MultipleRowsCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration protected virtual Task<BulkCopyRowsCopied> MultipleRowsCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopyHelper(MultipleRowsHelper, IEnumerable, Nullable<String>, Action<MultipleRowsHelper>, Action<MultipleRowsHelper, Object, Nullable<String>>, Action<MultipleRowsHelper>, Int32, Int32) Declaration protected static BulkCopyRowsCopied MultipleRowsCopyHelper(MultipleRowsHelper helper, IEnumerable source, string? from, Action<MultipleRowsHelper> prepFunction, Action<MultipleRowsHelper, object, string?> addFunction, Action<MultipleRowsHelper> finishFunction, int maxParameters, int maxSqlLength) Parameters Type Name Description MultipleRowsHelper helper IEnumerable source System.Nullable < System.String > from Action < MultipleRowsHelper > prepFunction Action < MultipleRowsHelper , System.Object , System.Nullable < System.String >> addFunction Action < MultipleRowsHelper > finishFunction System.Int32 maxParameters System.Int32 maxSqlLength Returns Type Description BulkCopyRowsCopied | Improve this Doc View Source MultipleRowsCopyHelperAsync(MultipleRowsHelper, IEnumerable, Nullable<String>, Action<MultipleRowsHelper>, Action<MultipleRowsHelper, Object, Nullable<String>>, Action<MultipleRowsHelper>, CancellationToken, Int32, Int32) Declaration protected static async Task<BulkCopyRowsCopied> MultipleRowsCopyHelperAsync(MultipleRowsHelper helper, IEnumerable source, string? from, Action<MultipleRowsHelper> prepFunction, Action<MultipleRowsHelper, object, string?> addFunction, Action<MultipleRowsHelper> finishFunction, CancellationToken cancellationToken, int maxParameters, int maxSqlLength) Parameters Type Name Description MultipleRowsHelper helper IEnumerable source System.Nullable < System.String > from Action < MultipleRowsHelper > prepFunction Action < MultipleRowsHelper , System.Object , System.Nullable < System.String >> addFunction Action < MultipleRowsHelper > finishFunction CancellationToken cancellationToken System.Int32 maxParameters System.Int32 maxSqlLength Returns Type Description Task < BulkCopyRowsCopied > | Improve this Doc View Source ProviderSpecificCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration protected virtual BulkCopyRowsCopied ProviderSpecificCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ProviderSpecificCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration protected virtual Task<BulkCopyRowsCopied> ProviderSpecificCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T | Improve this Doc View Source RowByRowCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration protected virtual BulkCopyRowsCopied RowByRowCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source RowByRowCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration protected virtual async Task<BulkCopyRowsCopied> RowByRowCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T | Improve this Doc View Source TraceAction(DataConnection, Func<String>, Func<Int32>) Declaration protected void TraceAction(DataConnection dataConnection, Func<string> commandText, Func<int> action) Parameters Type Name Description DataConnection dataConnection Func < System.String > commandText Func < System.Int32 > action | Improve this Doc View Source TraceActionAsync(DataConnection, Func<String>, Func<Task<Int32>>) Declaration protected async Task TraceActionAsync(DataConnection dataConnection, Func<string> commandText, Func<Task<int>> action) Parameters Type Name Description DataConnection dataConnection Func < System.String > commandText Func < Task < System.Int32 >> action Returns Type Description Task Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.BasicBulkCopy.ProviderConnections.html": {
    "href": "api/LinqToDB.DataProvider.BasicBulkCopy.ProviderConnections.html",
    "title": "Struct BasicBulkCopy.ProviderConnections | Linq To DB (aka linq2db)",
    "keywords": "Struct BasicBulkCopy.ProviderConnections Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax protected struct ProviderConnections Fields | Improve this Doc View Source DataConnection Declaration public DataConnection DataConnection Field Value Type Description DataConnection | Improve this Doc View Source ProviderConnection Declaration public IDbConnection ProviderConnection Field Value Type Description IDbConnection | Improve this Doc View Source ProviderTransaction Declaration public IDbTransaction? ProviderTransaction Field Value Type Description System.Nullable < IDbTransaction > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsDistinctFrom<T>(T, Nullable<T>) Sql.IsNotDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, Nullable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.BulkCopyReader.html": {
    "href": "api/LinqToDB.DataProvider.BulkCopyReader.html",
    "title": "Class BulkCopyReader | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyReader Inheritance System.Object BulkCopyReader BulkCopyReader<T> Implements IDataReader IDataRecord Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public abstract class BulkCopyReader : DbDataReader Constructors | Improve this Doc View Source BulkCopyReader(DataConnection, List<ColumnDescriptor>) Declaration public BulkCopyReader(DataConnection dataConnection, List<ColumnDescriptor> columns) Parameters Type Name Description DataConnection dataConnection List < ColumnDescriptor > columns Fields | Improve this Doc View Source Count Declaration public int Count Field Value Type Description System.Int32 Properties | Improve this Doc View Source Current Declaration protected abstract object Current { get; } Property Value Type Description System.Object | Improve this Doc View Source Depth Declaration public override int Depth { get; } Property Value Type Description System.Int32 | Improve this Doc View Source FieldCount Declaration public override int FieldCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source HasRows Declaration public override bool HasRows { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsClosed Declaration public override bool IsClosed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Declaration public override object this[int i] { get; } Parameters Type Name Description System.Int32 i Property Value Type Description System.Object | Improve this Doc View Source Item[String] Declaration public override object this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description System.Object | Improve this Doc View Source RecordsAffected Declaration public override int RecordsAffected { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Close() Declaration public override void Close() | Improve this Doc View Source GetBoolean(Int32) Declaration public override bool GetBoolean(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.Boolean | Improve this Doc View Source GetByte(Int32) Declaration public override byte GetByte(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.Byte | Improve this Doc View Source GetBytes(Int32, Int64, Byte[], Int32, Int32) Declaration public override long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length) Parameters Type Name Description System.Int32 ordinal System.Int64 dataOffset System.Byte [] buffer System.Int32 bufferOffset System.Int32 length Returns Type Description System.Int64 | Improve this Doc View Source GetChar(Int32) Declaration public override char GetChar(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.Char | Improve this Doc View Source GetChars(Int32, Int64, Char[], Int32, Int32) Declaration public override long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length) Parameters Type Name Description System.Int32 ordinal System.Int64 dataOffset System.Char [] buffer System.Int32 bufferOffset System.Int32 length Returns Type Description System.Int64 | Improve this Doc View Source GetDataTypeName(Int32) Declaration public override string GetDataTypeName(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.String | Improve this Doc View Source GetDateTime(Int32) Declaration public override DateTime GetDateTime(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description DateTime | Improve this Doc View Source GetDecimal(Int32) Declaration public override decimal GetDecimal(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.Decimal | Improve this Doc View Source GetDouble(Int32) Declaration public override double GetDouble(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.Double | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator GetEnumerator() Returns Type Description IEnumerator | Improve this Doc View Source GetFieldType(Int32) Declaration public override Type GetFieldType(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description Type | Improve this Doc View Source GetFloat(Int32) Declaration public override float GetFloat(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.Single | Improve this Doc View Source GetGuid(Int32) Declaration public override Guid GetGuid(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description Guid | Improve this Doc View Source GetInt16(Int32) Declaration public override short GetInt16(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.Int16 | Improve this Doc View Source GetInt32(Int32) Declaration public override int GetInt32(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.Int32 | Improve this Doc View Source GetInt64(Int32) Declaration public override long GetInt64(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.Int64 | Improve this Doc View Source GetName(Int32) Declaration public override string GetName(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.String | Improve this Doc View Source GetOrdinal(String) Declaration public override int GetOrdinal(string name) Parameters Type Name Description System.String name Returns Type Description System.Int32 | Improve this Doc View Source GetSchemaTable() Declaration public override DataTable GetSchemaTable() Returns Type Description DataTable | Improve this Doc View Source GetString(Int32) Declaration public override string GetString(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.String | Improve this Doc View Source GetValue(Int32) Declaration public override object? GetValue(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source GetValues(Nullable<Object>[]) Declaration public override int GetValues(object? [] values) Parameters Type Name Description System.Nullable < System.Object >[] values Returns Type Description System.Int32 | Improve this Doc View Source IsDBNull(Int32) Declaration public override bool IsDBNull(int ordinal) Parameters Type Name Description System.Int32 ordinal Returns Type Description System.Boolean | Improve this Doc View Source MoveNext() Declaration protected abstract bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source NextResult() Declaration public override bool NextResult() Returns Type Description System.Boolean | Improve this Doc View Source Read() Declaration public override bool Read() Returns Type Description System.Boolean Implements IDataReader IDataRecord Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.BulkCopyReader.Parameter.html": {
    "href": "api/LinqToDB.DataProvider.BulkCopyReader.Parameter.html",
    "title": "Class BulkCopyReader.Parameter | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyReader.Parameter Inheritance System.Object BulkCopyReader.Parameter Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class Parameter : IDbDataParameter Properties | Improve this Doc View Source DbType Declaration public DbType DbType { get; set; } Property Value Type Description DbType | Improve this Doc View Source Direction Declaration public ParameterDirection Direction { get; set; } Property Value Type Description ParameterDirection | Improve this Doc View Source IsNullable Declaration public bool IsNullable { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ParameterName Declaration public string? ParameterName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Precision Declaration public byte Precision { get; set; } Property Value Type Description System.Byte | Improve this Doc View Source Scale Declaration public byte Scale { get; set; } Property Value Type Description System.Byte | Improve this Doc View Source Size Declaration public int Size { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SourceColumn Declaration public string? SourceColumn { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SourceVersion Declaration public DataRowVersion SourceVersion { get; set; } Property Value Type Description DataRowVersion | Improve this Doc View Source Value Declaration public object? Value { get; set; } Property Value Type Description System.Nullable < System.Object > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.BulkCopyReader-1.html": {
    "href": "api/LinqToDB.DataProvider.BulkCopyReader-1.html",
    "title": "Class BulkCopyReader<T> | Linq To DB (aka linq2db)",
    "keywords": "Class BulkCopyReader<T> Inheritance System.Object BulkCopyReader BulkCopyReader<T> Implements IDataReader IDataRecord IAsyncDisposable Inherited Members BulkCopyReader.Count BulkCopyReader.GetName(Int32) BulkCopyReader.GetFieldType(Int32) BulkCopyReader.GetValue(Int32) BulkCopyReader.GetValues(Nullable<Object>[]) BulkCopyReader.FieldCount BulkCopyReader.GetBytes(Int32, Int64, Byte[], Int32, Int32) BulkCopyReader.GetChars(Int32, Int64, Char[], Int32, Int32) BulkCopyReader.GetDataTypeName(Int32) BulkCopyReader.GetOrdinal(String) BulkCopyReader.GetBoolean(Int32) BulkCopyReader.GetByte(Int32) BulkCopyReader.GetChar(Int32) BulkCopyReader.GetGuid(Int32) BulkCopyReader.GetInt16(Int32) BulkCopyReader.GetInt32(Int32) BulkCopyReader.GetInt64(Int32) BulkCopyReader.GetFloat(Int32) BulkCopyReader.GetDouble(Int32) BulkCopyReader.GetString(Int32) BulkCopyReader.GetDecimal(Int32) BulkCopyReader.GetDateTime(Int32) BulkCopyReader.IsDBNull(Int32) BulkCopyReader.Item[Int32] BulkCopyReader.Item[String] BulkCopyReader.Close() BulkCopyReader.GetSchemaTable() BulkCopyReader.NextResult() BulkCopyReader.Read() BulkCopyReader.Depth BulkCopyReader.IsClosed BulkCopyReader.RecordsAffected BulkCopyReader.GetEnumerator() BulkCopyReader.HasRows Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class BulkCopyReader<T> : BulkCopyReader, IAsyncDisposable Type Parameters Name Description T Constructors | Improve this Doc View Source BulkCopyReader(DataConnection, List<ColumnDescriptor>, IEnumerable<T>) Declaration public BulkCopyReader(DataConnection dataConnection, List<ColumnDescriptor> columns, IEnumerable<T> collection) Parameters Type Name Description DataConnection dataConnection List < ColumnDescriptor > columns IEnumerable <T> collection Properties | Improve this Doc View Source Current Declaration protected override object Current { get; } Property Value Type Description System.Object Overrides BulkCopyReader.Current Methods | Improve this Doc View Source DisposeAsync() Declaration public Task DisposeAsync() Returns Type Description Task | Improve this Doc View Source MoveNext() Declaration protected override bool MoveNext() Returns Type Description System.Boolean Overrides BulkCopyReader.MoveNext() Implements IDataReader IDataRecord IAsyncDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DataProviderBase.html": {
    "href": "api/LinqToDB.DataProvider.DataProviderBase.html",
    "title": "Class DataProviderBase | Linq To DB (aka linq2db)",
    "keywords": "Class DataProviderBase Inheritance System.Object DataProviderBase DynamicDataProviderBase<TProviderMappings> Implements IDataProvider Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public abstract class DataProviderBase : object, IDataProvider Constructors | Improve this Doc View Source DataProviderBase(String, MappingSchema) Declaration protected DataProviderBase(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Fields | Improve this Doc View Source ReaderExpressions Declaration public readonly ConcurrentDictionary<ReaderInfo, Expression> ReaderExpressions Field Value Type Description ConcurrentDictionary < ReaderInfo , Expression > Properties | Improve this Doc View Source ConnectionNamespace Declaration public abstract string? ConnectionNamespace { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataReaderType Declaration public abstract Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source MappingSchema Declaration public virtual MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source OnConnectionCreated Declaration public static Func<IDataProvider, IDbConnection, IDbConnection>? OnConnectionCreated { get; set; } Property Value Type Description System.Nullable < Func < IDataProvider , IDbConnection , IDbConnection >> | Improve this Doc View Source SqlProviderFlags Declaration public SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags | Improve this Doc View Source SupportedTableOptions Declaration public abstract TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public virtual BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public virtual Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T | Improve this Doc View Source ConvertParameterType(Type, DbDataType) Declaration public virtual Type ConvertParameterType(Type type, DbDataType dataType) Parameters Type Name Description Type type DbDataType dataType Returns Type Description Type | Improve this Doc View Source CreateConnection(String) Declaration public IDbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description IDbConnection | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected abstract IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description IDbConnection | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public abstract ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder | Improve this Doc View Source DisposeCommand(DataConnection) Declaration public virtual void DisposeCommand(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection | Improve this Doc View Source ExecuteScope(DataConnection) Declaration public virtual IDisposable? ExecuteScope(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Nullable < IDisposable > | Improve this Doc View Source FindExpression(ReaderInfo, out Nullable<Expression>) Declaration protected bool FindExpression(ReaderInfo info, out Expression? expr) Parameters Type Name Description ReaderInfo info System.Nullable < Expression > expr Returns Type Description System.Boolean | Improve this Doc View Source GetCommandBehavior(CommandBehavior) Declaration public virtual CommandBehavior GetCommandBehavior(CommandBehavior commandBehavior) Parameters Type Name Description CommandBehavior commandBehavior Returns Type Description CommandBehavior | Improve this Doc View Source GetConnectionInfo(DataConnection, String) Declaration public virtual object? GetConnectionInfo(DataConnection dataConnection, string parameterName) Parameters Type Name Description DataConnection dataConnection System.String parameterName Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source GetReaderExpression(IDataReader, Int32, Expression, Type) Declaration public virtual Expression GetReaderExpression(IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description IDataReader reader System.Int32 idx Expression readerExpression Type toType Returns Type Description Expression | Improve this Doc View Source GetSchemaProvider() Declaration public abstract ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider | Improve this Doc View Source GetSqlOptimizer() Declaration public abstract ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) Declaration public virtual void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters, bool withParameters) Parameters Type Name Description DataConnection dataConnection CommandType commandType System.String commandText DataParameter [] parameters System.Boolean withParameters | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public virtual bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader System.Int32 idx Returns Type Description System.Nullable < System.Boolean > | Improve this Doc View Source NormalizeTypeName(Nullable<String>) Declaration protected virtual string? NormalizeTypeName(string? typeName) Parameters Type Name Description System.Nullable < System.String > typeName Returns Type Description System.Nullable < System.String > | Improve this Doc View Source SetCharField(String, Expression<Func<IDataReader, Int32, String>>) Declaration protected void SetCharField(string dataTypeName, Expression<Func<IDataReader, int, string>> expr) Parameters Type Name Description System.String dataTypeName Expression < Func < IDataReader , System.Int32 , System.String >> expr | Improve this Doc View Source SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) Declaration protected void SetCharFieldToType<T>(string dataTypeName, Expression<Func<IDataReader, int, string>> expr) Parameters Type Name Description System.String dataTypeName Expression < Func < IDataReader , System.Int32 , System.String >> expr Type Parameters Name Description T | Improve this Doc View Source SetField<TP, T>(Expression<Func<TP, Int32, T>>) Declaration protected void SetField<TP, T>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description Expression < Func <TP, System.Int32 , T>> expr Type Parameters Name Description TP T | Improve this Doc View Source SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) Declaration protected void SetField<TP, T>(string dataTypeName, Expression<Func<TP, int, T>> expr) Parameters Type Name Description System.String dataTypeName Expression < Func <TP, System.Int32 , T>> expr Type Parameters Name Description TP T | Improve this Doc View Source SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) Declaration protected void SetField<TP, T>(string dataTypeName, Type fieldType, Expression<Func<TP, int, T>> expr) Parameters Type Name Description System.String dataTypeName Type fieldType Expression < Func <TP, System.Int32 , T>> expr Type Parameters Name Description TP T | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public virtual void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected virtual void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType | Improve this Doc View Source SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) Declaration protected void SetProviderField<TP, T>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description Expression < Func <TP, System.Int32 , T>> expr Type Parameters Name Description TP T | Improve this Doc View Source SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) Declaration protected void SetProviderField<TP, T, TS>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description Expression < Func <TP, System.Int32 , T>> expr Type Parameters Name Description TP T TS | Improve this Doc View Source SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) Declaration protected void SetToType<TP, T, TF>(Expression<Func<TP, int, T>> expr) Parameters Type Name Description Expression < Func <TP, System.Int32 , T>> expr Type Parameters Name Description TP T TF | Improve this Doc View Source SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) Declaration protected void SetToType<TP, T, TF>(string dataTypeName, Expression<Func<TP, int, T>> expr) Parameters Type Name Description System.String dataTypeName Expression < Func <TP, System.Int32 , T>> expr Type Parameters Name Description TP T TF Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DataTools.html": {
    "href": "api/LinqToDB.DataProvider.DataTools.html",
    "title": "Class DataTools | Linq To DB (aka linq2db)",
    "keywords": "Class DataTools Inheritance System.Object DataTools Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class DataTools : object Fields | Improve this Doc View Source GetChar Declaration public static Func<IDataReader, int, string> GetChar Field Value Type Description Func < IDataReader , System.Int32 , System.String > | Improve this Doc View Source GetCharExpression Declaration public static Expression<Func<IDataReader, int, string>> GetCharExpression Field Value Type Description Expression < Func < IDataReader , System.Int32 , System.String >> Methods | Improve this Doc View Source ConvertCharToSql(StringBuilder, String, Action<StringBuilder, Int32>, Char) Declaration public static void ConvertCharToSql(StringBuilder stringBuilder, string startString, Action<StringBuilder, int> appendConversion, char value) Parameters Type Name Description StringBuilder stringBuilder System.String startString Action < StringBuilder , System.Int32 > appendConversion System.Char value | Improve this Doc View Source ConvertStringToSql(StringBuilder, String, Nullable<String>, Action<StringBuilder, Int32>, String, Char[]) Declaration public static void ConvertStringToSql(StringBuilder stringBuilder, string plusOperator, string? startPrefix, Action<StringBuilder, int> appendConversion, string value, char[] extraEscapes) Parameters Type Name Description StringBuilder stringBuilder System.String plusOperator System.Nullable < System.String > startPrefix Action < StringBuilder , System.Int32 > appendConversion System.String value System.Char [] extraEscapes | Improve this Doc View Source EscapeUnterminatedBracket(Nullable<String>) Improved version of Replace(\"[\", \"[[]\") code, used before. Declaration public static string? EscapeUnterminatedBracket(string? str) Parameters Type Name Description System.Nullable < System.String > str Returns Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2DataProvider.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2DataProvider.html",
    "title": "Class DB2DataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class DB2DataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < DB2ProviderAdapter > DB2DataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<DB2ProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<DB2ProviderAdapter>.Adapter DynamicDataProviderBase<DB2ProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<DB2ProviderAdapter>.DataReaderType DynamicDataProviderBase<DB2ProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<DB2ProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<DB2ProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<DB2ProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<DB2ProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<DB2ProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<DB2ProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<DB2ProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<DB2ProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<DB2ProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<DB2ProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DbDataType) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2DataProvider : DynamicDataProviderBase<DB2ProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source DB2DataProvider(String, DB2Version) Declaration public DB2DataProvider(string name, DB2Version version) Parameters Type Name Description System.String name DB2Version version Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions | Improve this Doc View Source Version Declaration public DB2Version Version { get; } Property Value Type Description DB2Version Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) Declaration public override void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters, bool withParameters) Parameters Type Name Description DataConnection dataConnection CommandType commandType System.String commandText DataParameter [] parameters System.Boolean withParameters Overrides DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode.html",
    "title": "Enum DB2IdentifierQuoteMode | Linq To DB (aka linq2db)",
    "keywords": "Enum DB2IdentifierQuoteMode Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public enum DB2IdentifierQuoteMode : int Fields Name Description Auto None Quote Extension Methods Map.DeepCopy<DB2IdentifierQuoteMode>() Sql.IsDistinctFrom<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode) Sql.IsDistinctFrom<DB2IdentifierQuoteMode>(Nullable<DB2IdentifierQuoteMode>) Sql.IsNotDistinctFrom<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode) Sql.IsNotDistinctFrom<DB2IdentifierQuoteMode>(Nullable<DB2IdentifierQuoteMode>) SqlExtensions.In<DB2IdentifierQuoteMode>(IEnumerable<DB2IdentifierQuoteMode>) SqlExtensions.In<DB2IdentifierQuoteMode>(IQueryable<DB2IdentifierQuoteMode>) SqlExtensions.In<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode[]) SqlExtensions.In<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode) SqlExtensions.In<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode, DB2IdentifierQuoteMode) SqlExtensions.NotIn<DB2IdentifierQuoteMode>(IEnumerable<DB2IdentifierQuoteMode>) SqlExtensions.NotIn<DB2IdentifierQuoteMode>(IQueryable<DB2IdentifierQuoteMode>) SqlExtensions.NotIn<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode[]) SqlExtensions.NotIn<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode) SqlExtensions.NotIn<DB2IdentifierQuoteMode>(DB2IdentifierQuoteMode, DB2IdentifierQuoteMode, DB2IdentifierQuoteMode)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2LUWMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2LUWMappingSchema.html",
    "title": "Class DB2LUWMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DB2LUWMappingSchema Inheritance System.Object MappingSchema DB2LUWMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2LUWMappingSchema : MappingSchema Constructors | Improve this Doc View Source DB2LUWMappingSchema() Declaration public DB2LUWMappingSchema() | Improve this Doc View Source DB2LUWMappingSchema(MappingSchema[]) Declaration public DB2LUWMappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2MappingSchema.html",
    "title": "Class DB2MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DB2MappingSchema Inheritance System.Object MappingSchema DB2MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2MappingSchema : MappingSchema Constructors | Improve this Doc View Source DB2MappingSchema() Declaration public DB2MappingSchema() | Improve this Doc View Source DB2MappingSchema(String) Declaration protected DB2MappingSchema(string configuration) Parameters Type Name Description System.String configuration Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.BulkCopyAdapter.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.BulkCopyAdapter.html",
    "title": "Class DB2ProviderAdapter.BulkCopyAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class DB2ProviderAdapter.BulkCopyAdapter Inheritance System.Object DB2ProviderAdapter.BulkCopyAdapter Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class BulkCopyAdapter : object Properties | Improve this Doc View Source Create Declaration public Func<IDbConnection, DB2ProviderAdapter.DB2BulkCopyOptions, DB2ProviderAdapter.DB2BulkCopy> Create { get; } Property Value Type Description Func < IDbConnection , DB2ProviderAdapter.DB2BulkCopyOptions , DB2ProviderAdapter.DB2BulkCopy > | Improve this Doc View Source CreateColumnMapping Declaration public Func<int, string, DB2ProviderAdapter.DB2BulkCopyColumnMapping> CreateColumnMapping { get; } Property Value Type Description Func < System.Int32 , System.String , DB2ProviderAdapter.DB2BulkCopyColumnMapping > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.html",
    "title": "Class DB2ProviderAdapter.DB2BulkCopy | Linq To DB (aka linq2db)",
    "keywords": "Class DB2ProviderAdapter.DB2BulkCopy Inheritance System.Object TypeWrapper DB2ProviderAdapter.DB2BulkCopy Implements IDisposable Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2BulkCopy : TypeWrapper Constructors | Improve this Doc View Source DB2BulkCopy(DB2ProviderAdapter.DB2Connection, DB2ProviderAdapter.DB2BulkCopyOptions) Declaration public DB2BulkCopy(DB2ProviderAdapter.DB2Connection connection, DB2ProviderAdapter.DB2BulkCopyOptions options) Parameters Type Name Description DB2ProviderAdapter.DB2Connection connection DB2ProviderAdapter.DB2BulkCopyOptions options | Improve this Doc View Source DB2BulkCopy(Object, Delegate[]) Declaration public DB2BulkCopy(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source BulkCopyTimeout Declaration public int BulkCopyTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ColumnMappings Declaration public DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection ColumnMappings { get; set; } Property Value Type Description DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection | Improve this Doc View Source DestinationTableName Declaration public string? DestinationTableName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source NotifyAfter Declaration public int NotifyAfter { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source WriteToServer(IDataReader) Declaration public void WriteToServer(IDataReader dataReader) Parameters Type Name Description IDataReader dataReader Events | Improve this Doc View Source DB2RowsCopied Declaration public event DB2ProviderAdapter.DB2RowsCopiedEventHandler DB2RowsCopied Event Type Type Description DB2ProviderAdapter.DB2RowsCopiedEventHandler Implements IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMapping.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMapping.html",
    "title": "Class DB2ProviderAdapter.DB2BulkCopyColumnMapping | Linq To DB (aka linq2db)",
    "keywords": "Class DB2ProviderAdapter.DB2BulkCopyColumnMapping Inheritance System.Object TypeWrapper DB2ProviderAdapter.DB2BulkCopyColumnMapping Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2BulkCopyColumnMapping : TypeWrapper Constructors | Improve this Doc View Source DB2BulkCopyColumnMapping(Int32, String) Declaration public DB2BulkCopyColumnMapping(int source, string destination) Parameters Type Name Description System.Int32 source System.String destination | Improve this Doc View Source DB2BulkCopyColumnMapping(Object) Declaration public DB2BulkCopyColumnMapping(object instance) Parameters Type Name Description System.Object instance Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection.html",
    "title": "Class DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection | Linq To DB (aka linq2db)",
    "keywords": "Class DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection Inheritance System.Object TypeWrapper DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2BulkCopyColumnMappingCollection : TypeWrapper Constructors | Improve this Doc View Source DB2BulkCopyColumnMappingCollection(Object, Delegate[]) Declaration public DB2BulkCopyColumnMappingCollection(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Methods | Improve this Doc View Source Add(DB2ProviderAdapter.DB2BulkCopyColumnMapping) Declaration public DB2ProviderAdapter.DB2BulkCopyColumnMapping Add(DB2ProviderAdapter.DB2BulkCopyColumnMapping bulkCopyColumnMapping) Parameters Type Name Description DB2ProviderAdapter.DB2BulkCopyColumnMapping bulkCopyColumnMapping Returns Type Description DB2ProviderAdapter.DB2BulkCopyColumnMapping Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions.html",
    "title": "Enum DB2ProviderAdapter.DB2BulkCopyOptions | Linq To DB (aka linq2db)",
    "keywords": "Enum DB2ProviderAdapter.DB2BulkCopyOptions Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public enum DB2BulkCopyOptions : int Fields Name Description Default KeepIdentity TableLock Truncate Extension Methods Map.DeepCopy<DB2ProviderAdapter.DB2BulkCopyOptions>() Sql.IsDistinctFrom<DB2ProviderAdapter.DB2BulkCopyOptions>(DB2ProviderAdapter.DB2BulkCopyOptions) Sql.IsDistinctFrom<DB2ProviderAdapter.DB2BulkCopyOptions>(Nullable<DB2ProviderAdapter.DB2BulkCopyOptions>) Sql.IsNotDistinctFrom<DB2ProviderAdapter.DB2BulkCopyOptions>(DB2ProviderAdapter.DB2BulkCopyOptions) Sql.IsNotDistinctFrom<DB2ProviderAdapter.DB2BulkCopyOptions>(Nullable<DB2ProviderAdapter.DB2BulkCopyOptions>) SqlExtensions.In<DB2ProviderAdapter.DB2BulkCopyOptions>(IEnumerable<DB2ProviderAdapter.DB2BulkCopyOptions>) SqlExtensions.In<DB2ProviderAdapter.DB2BulkCopyOptions>(IQueryable<DB2ProviderAdapter.DB2BulkCopyOptions>) SqlExtensions.In<DB2ProviderAdapter.DB2BulkCopyOptions>(DB2ProviderAdapter.DB2BulkCopyOptions[]) SqlExtensions.In<DB2ProviderAdapter.DB2BulkCopyOptions>(DB2ProviderAdapter.DB2BulkCopyOptions, DB2ProviderAdapter.DB2BulkCopyOptions) SqlExtensions.In<DB2ProviderAdapter.DB2BulkCopyOptions>(DB2ProviderAdapter.DB2BulkCopyOptions, DB2ProviderAdapter.DB2BulkCopyOptions, DB2ProviderAdapter.DB2BulkCopyOptions) SqlExtensions.NotIn<DB2ProviderAdapter.DB2BulkCopyOptions>(IEnumerable<DB2ProviderAdapter.DB2BulkCopyOptions>) SqlExtensions.NotIn<DB2ProviderAdapter.DB2BulkCopyOptions>(IQueryable<DB2ProviderAdapter.DB2BulkCopyOptions>) SqlExtensions.NotIn<DB2ProviderAdapter.DB2BulkCopyOptions>(DB2ProviderAdapter.DB2BulkCopyOptions[]) SqlExtensions.NotIn<DB2ProviderAdapter.DB2BulkCopyOptions>(DB2ProviderAdapter.DB2BulkCopyOptions, DB2ProviderAdapter.DB2BulkCopyOptions) SqlExtensions.NotIn<DB2ProviderAdapter.DB2BulkCopyOptions>(DB2ProviderAdapter.DB2BulkCopyOptions, DB2ProviderAdapter.DB2BulkCopyOptions, DB2ProviderAdapter.DB2BulkCopyOptions)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2Connection.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2Connection.html",
    "title": "Class DB2ProviderAdapter.DB2Connection | Linq To DB (aka linq2db)",
    "keywords": "Class DB2ProviderAdapter.DB2Connection Inheritance System.Object TypeWrapper DB2ProviderAdapter.DB2Connection Implements IDisposable Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2Connection : TypeWrapper Constructors | Improve this Doc View Source DB2Connection(Object, Delegate[]) Declaration public DB2Connection(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers | Improve this Doc View Source DB2Connection(String) Declaration public DB2Connection(string connectionString) Parameters Type Name Description System.String connectionString Properties | Improve this Doc View Source eServerType Declaration public DB2ProviderAdapter.DB2ServerTypes eServerType { get; } Property Value Type Description DB2ProviderAdapter.DB2ServerTypes Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Open() Declaration public void Open() Implements IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventArgs.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventArgs.html",
    "title": "Class DB2ProviderAdapter.DB2RowsCopiedEventArgs | Linq To DB (aka linq2db)",
    "keywords": "Class DB2ProviderAdapter.DB2RowsCopiedEventArgs Inheritance System.Object TypeWrapper DB2ProviderAdapter.DB2RowsCopiedEventArgs Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2RowsCopiedEventArgs : TypeWrapper Constructors | Improve this Doc View Source DB2RowsCopiedEventArgs(Object, Delegate[]) Declaration public DB2RowsCopiedEventArgs(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source Abort Declaration public bool Abort { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RowsCopied Declaration public int RowsCopied { get; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventHandler.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventHandler.html",
    "title": "Delegate DB2ProviderAdapter.DB2RowsCopiedEventHandler | Linq To DB (aka linq2db)",
    "keywords": "Delegate DB2ProviderAdapter.DB2RowsCopiedEventHandler Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public delegate void DB2RowsCopiedEventHandler(object sender, DB2ProviderAdapter.DB2RowsCopiedEventArgs e); Parameters Type Name Description System.Object sender DB2ProviderAdapter.DB2RowsCopiedEventArgs e Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes.html",
    "title": "Enum DB2ProviderAdapter.DB2ServerTypes | Linq To DB (aka linq2db)",
    "keywords": "Enum DB2ProviderAdapter.DB2ServerTypes Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public enum DB2ServerTypes : int Fields Name Description DB2_390 DB2_400 DB2_IDS DB2_UNKNOWN DB2_UW DB2_VM DB2_VM_VSE DB2_VSE Extension Methods Map.DeepCopy<DB2ProviderAdapter.DB2ServerTypes>() Sql.IsDistinctFrom<DB2ProviderAdapter.DB2ServerTypes>(DB2ProviderAdapter.DB2ServerTypes) Sql.IsDistinctFrom<DB2ProviderAdapter.DB2ServerTypes>(Nullable<DB2ProviderAdapter.DB2ServerTypes>) Sql.IsNotDistinctFrom<DB2ProviderAdapter.DB2ServerTypes>(DB2ProviderAdapter.DB2ServerTypes) Sql.IsNotDistinctFrom<DB2ProviderAdapter.DB2ServerTypes>(Nullable<DB2ProviderAdapter.DB2ServerTypes>) SqlExtensions.In<DB2ProviderAdapter.DB2ServerTypes>(IEnumerable<DB2ProviderAdapter.DB2ServerTypes>) SqlExtensions.In<DB2ProviderAdapter.DB2ServerTypes>(IQueryable<DB2ProviderAdapter.DB2ServerTypes>) SqlExtensions.In<DB2ProviderAdapter.DB2ServerTypes>(DB2ProviderAdapter.DB2ServerTypes[]) SqlExtensions.In<DB2ProviderAdapter.DB2ServerTypes>(DB2ProviderAdapter.DB2ServerTypes, DB2ProviderAdapter.DB2ServerTypes) SqlExtensions.In<DB2ProviderAdapter.DB2ServerTypes>(DB2ProviderAdapter.DB2ServerTypes, DB2ProviderAdapter.DB2ServerTypes, DB2ProviderAdapter.DB2ServerTypes) SqlExtensions.NotIn<DB2ProviderAdapter.DB2ServerTypes>(IEnumerable<DB2ProviderAdapter.DB2ServerTypes>) SqlExtensions.NotIn<DB2ProviderAdapter.DB2ServerTypes>(IQueryable<DB2ProviderAdapter.DB2ServerTypes>) SqlExtensions.NotIn<DB2ProviderAdapter.DB2ServerTypes>(DB2ProviderAdapter.DB2ServerTypes[]) SqlExtensions.NotIn<DB2ProviderAdapter.DB2ServerTypes>(DB2ProviderAdapter.DB2ServerTypes, DB2ProviderAdapter.DB2ServerTypes) SqlExtensions.NotIn<DB2ProviderAdapter.DB2ServerTypes>(DB2ProviderAdapter.DB2ServerTypes, DB2ProviderAdapter.DB2ServerTypes, DB2ProviderAdapter.DB2ServerTypes)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2Type.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2Type.html",
    "title": "Enum DB2ProviderAdapter.DB2Type | Linq To DB (aka linq2db)",
    "keywords": "Enum DB2ProviderAdapter.DB2Type Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public enum DB2Type : int Fields Name Description BigInt BigSerial Binary BinaryXml Blob Boolean Byte Char Char1 Clob Cursor Datalink Date DateTime DbClob Decimal DecimalFloat Double DynArray Float Graphic Int8 Integer IntervalDayFraction IntervalYearMonth Invalid List LongVarBinary LongVarChar LongVarGraphic Money MultiSet NChar Null Numeric NVarChar Other Real Real370 Row RowId Serial Serial8 Set SmallFloat SmallInt SmartLobLocator SQLUDTFixed SQLUDTVar Text Time Timestamp TimeStampWithTimeZone VarBinary VarChar VarGraphic Xml Extension Methods Map.DeepCopy<DB2ProviderAdapter.DB2Type>() Sql.IsDistinctFrom<DB2ProviderAdapter.DB2Type>(DB2ProviderAdapter.DB2Type) Sql.IsDistinctFrom<DB2ProviderAdapter.DB2Type>(Nullable<DB2ProviderAdapter.DB2Type>) Sql.IsNotDistinctFrom<DB2ProviderAdapter.DB2Type>(DB2ProviderAdapter.DB2Type) Sql.IsNotDistinctFrom<DB2ProviderAdapter.DB2Type>(Nullable<DB2ProviderAdapter.DB2Type>) SqlExtensions.In<DB2ProviderAdapter.DB2Type>(IEnumerable<DB2ProviderAdapter.DB2Type>) SqlExtensions.In<DB2ProviderAdapter.DB2Type>(IQueryable<DB2ProviderAdapter.DB2Type>) SqlExtensions.In<DB2ProviderAdapter.DB2Type>(DB2ProviderAdapter.DB2Type[]) SqlExtensions.In<DB2ProviderAdapter.DB2Type>(DB2ProviderAdapter.DB2Type, DB2ProviderAdapter.DB2Type) SqlExtensions.In<DB2ProviderAdapter.DB2Type>(DB2ProviderAdapter.DB2Type, DB2ProviderAdapter.DB2Type, DB2ProviderAdapter.DB2Type) SqlExtensions.NotIn<DB2ProviderAdapter.DB2Type>(IEnumerable<DB2ProviderAdapter.DB2Type>) SqlExtensions.NotIn<DB2ProviderAdapter.DB2Type>(IQueryable<DB2ProviderAdapter.DB2Type>) SqlExtensions.NotIn<DB2ProviderAdapter.DB2Type>(DB2ProviderAdapter.DB2Type[]) SqlExtensions.NotIn<DB2ProviderAdapter.DB2Type>(DB2ProviderAdapter.DB2Type, DB2ProviderAdapter.DB2Type) SqlExtensions.NotIn<DB2ProviderAdapter.DB2Type>(DB2ProviderAdapter.DB2Type, DB2ProviderAdapter.DB2Type, DB2ProviderAdapter.DB2Type)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2ProviderAdapter.html",
    "title": "Class DB2ProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class DB2ProviderAdapter Inheritance System.Object DB2ProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2ProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source AssemblyName Declaration public const string AssemblyName = null Field Value Type Description System.String | Improve this Doc View Source ClientNamespace Declaration public const string ClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source CoreClientNamespace Declaration public const string CoreClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source NetFxClientNamespace Declaration public const string NetFxClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source ProviderFactoryName Declaration public const string ProviderFactoryName = null Field Value Type Description System.String | Improve this Doc View Source TypesNamespace Declaration public const string TypesNamespace = null Field Value Type Description System.String Properties | Improve this Doc View Source BulkCopy Declaration public DB2ProviderAdapter.BulkCopyAdapter BulkCopy { get; } Property Value Type Description DB2ProviderAdapter.BulkCopyAdapter | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source CreateConnection Declaration public Func<string, DB2ProviderAdapter.DB2Connection> CreateConnection { get; } Property Value Type Description Func < System.String , DB2ProviderAdapter.DB2Connection > | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source DB2BinaryType Declaration public Type DB2BinaryType { get; } Property Value Type Description Type | Improve this Doc View Source DB2BlobType Declaration public Type DB2BlobType { get; } Property Value Type Description Type | Improve this Doc View Source DB2ClobType Declaration public Type DB2ClobType { get; } Property Value Type Description Type | Improve this Doc View Source DB2DateTimeType Declaration public Type? DB2DateTimeType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source DB2DateType Declaration public Type DB2DateType { get; } Property Value Type Description Type | Improve this Doc View Source DB2DecimalFloatType Declaration public Type DB2DecimalFloatType { get; } Property Value Type Description Type | Improve this Doc View Source DB2DecimalType Declaration public Type DB2DecimalType { get; } Property Value Type Description Type | Improve this Doc View Source DB2DoubleType Declaration public Type DB2DoubleType { get; } Property Value Type Description Type | Improve this Doc View Source DB2Int16Type Declaration public Type DB2Int16Type { get; } Property Value Type Description Type | Improve this Doc View Source DB2Int32Type Declaration public Type DB2Int32Type { get; } Property Value Type Description Type | Improve this Doc View Source DB2Int64Type Declaration public Type DB2Int64Type { get; } Property Value Type Description Type | Improve this Doc View Source DB2Real370Type Declaration public Type DB2Real370Type { get; } Property Value Type Description Type | Improve this Doc View Source DB2RealType Declaration public Type DB2RealType { get; } Property Value Type Description Type | Improve this Doc View Source DB2RowIdType Declaration public Type DB2RowIdType { get; } Property Value Type Description Type | Improve this Doc View Source DB2StringType Declaration public Type DB2StringType { get; } Property Value Type Description Type | Improve this Doc View Source DB2TimeSpanType Declaration public Type? DB2TimeSpanType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source DB2TimeStampType Declaration public Type DB2TimeStampType { get; } Property Value Type Description Type | Improve this Doc View Source DB2TimeType Declaration public Type DB2TimeType { get; } Property Value Type Description Type | Improve this Doc View Source DB2XmlType Declaration public Type DB2XmlType { get; } Property Value Type Description Type | Improve this Doc View Source GetDB2BinaryReaderMethod Declaration public string GetDB2BinaryReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2BlobReaderMethod Declaration public string GetDB2BlobReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2ClobReaderMethod Declaration public string GetDB2ClobReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2DateReaderMethod Declaration public string GetDB2DateReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2DateTimeReaderMethod Declaration public string? GetDB2DateTimeReaderMethod { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source GetDB2DecimalFloatReaderMethod Declaration public string GetDB2DecimalFloatReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2DecimalReaderMethod Declaration public string GetDB2DecimalReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2DoubleReaderMethod Declaration public string GetDB2DoubleReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2Int16ReaderMethod Declaration public string GetDB2Int16ReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2Int32ReaderMethod Declaration public string GetDB2Int32ReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2Int64ReaderMethod Declaration public string GetDB2Int64ReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2Real370ReaderMethod Declaration public string GetDB2Real370ReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2RealReaderMethod Declaration public string GetDB2RealReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2RowIdReaderMethod Declaration public string GetDB2RowIdReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2StringReaderMethod Declaration public string GetDB2StringReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2TimeReaderMethod Declaration public string GetDB2TimeReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2TimeStampReaderMethod Declaration public string GetDB2TimeStampReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2XmlReaderMethod Declaration public string GetDB2XmlReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDbType Declaration public Func<IDbDataParameter, DB2ProviderAdapter.DB2Type> GetDbType { get; } Property Value Type Description Func < IDbDataParameter , DB2ProviderAdapter.DB2Type > | Improve this Doc View Source IsDB2BinaryNull Declaration public Func<object, bool> IsDB2BinaryNull { get; } Property Value Type Description Func < System.Object , System.Boolean > | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source ProviderTypesNamespace Declaration public string ProviderTypesNamespace { get; } Property Value Type Description System.String | Improve this Doc View Source SetDbType Declaration public Action<IDbDataParameter, DB2ProviderAdapter.DB2Type> SetDbType { get; } Property Value Type Description Action < IDbDataParameter , DB2ProviderAdapter.DB2Type > | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source GetInstance() Declaration public static DB2ProviderAdapter GetInstance() Returns Type Description DB2ProviderAdapter Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2Tools.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2Tools.html",
    "title": "Class DB2Tools | Linq To DB (aka linq2db)",
    "keywords": "Class DB2Tools Inheritance System.Object DB2Tools Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public static class DB2Tools : object Properties | Improve this Doc View Source AutoDetectProvider Declaration public static bool AutoDetectProvider { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DefaultBulkCopyType Default bulk copy mode, used for DB2 by BulkCopy<T>(DataConnection, IEnumerable<T>) methods, if mode is not specified explicitly. Default value: MultipleRows . Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection, DB2Version) Creates DataConnection object using provided connection object. Declaration public static DataConnection CreateDataConnection(IDbConnection connection, DB2Version version = DB2Version.LUW) Parameters Type Name Description IDbConnection connection Connection instance. DB2Version version DB2 version. Returns Type Description DataConnection DataConnection instance. | Improve this Doc View Source CreateDataConnection(IDbTransaction, DB2Version) Creates DataConnection object using provided transaction object. Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, DB2Version version = DB2Version.LUW) Parameters Type Name Description IDbTransaction transaction Transaction instance. DB2Version version DB2 version. Returns Type Description DataConnection DataConnection instance. | Improve this Doc View Source CreateDataConnection(String, DB2Version) Creates DataConnection object using provided DB2 connection string. Declaration public static DataConnection CreateDataConnection(string connectionString, DB2Version version = DB2Version.LUW) Parameters Type Name Description System.String connectionString Connection string. DB2Version version DB2 version. Returns Type Description DataConnection DataConnection instance. | Improve this Doc View Source GetDataProvider(DB2Version) Declaration public static IDataProvider GetDataProvider(DB2Version version = DB2Version.LUW) Parameters Type Name Description DB2Version version Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Int32 maxBatchSize System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ProviderSpecificBulkCopy<T>(DataConnection, IEnumerable<T>, Nullable<Int32>, Boolean, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied ProviderSpecificBulkCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int? bulkCopyTimeout = null, bool keepIdentity = false, int notifyAfter = 0, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Nullable < System.Int32 > bulkCopyTimeout System.Boolean keepIdentity System.Int32 notifyAfter System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveDB2(Assembly) Declaration public static void ResolveDB2(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveDB2(String) Declaration public static void ResolveDB2(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.DB2.DB2Version.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2Version.html",
    "title": "Enum DB2Version | Linq To DB (aka linq2db)",
    "keywords": "Enum DB2Version Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public enum DB2Version : int Fields Name Description LUW zOS Extension Methods Map.DeepCopy<DB2Version>() Sql.IsDistinctFrom<DB2Version>(DB2Version) Sql.IsDistinctFrom<DB2Version>(Nullable<DB2Version>) Sql.IsNotDistinctFrom<DB2Version>(DB2Version) Sql.IsNotDistinctFrom<DB2Version>(Nullable<DB2Version>) SqlExtensions.In<DB2Version>(IEnumerable<DB2Version>) SqlExtensions.In<DB2Version>(IQueryable<DB2Version>) SqlExtensions.In<DB2Version>(DB2Version[]) SqlExtensions.In<DB2Version>(DB2Version, DB2Version) SqlExtensions.In<DB2Version>(DB2Version, DB2Version, DB2Version) SqlExtensions.NotIn<DB2Version>(IEnumerable<DB2Version>) SqlExtensions.NotIn<DB2Version>(IQueryable<DB2Version>) SqlExtensions.NotIn<DB2Version>(DB2Version[]) SqlExtensions.NotIn<DB2Version>(DB2Version, DB2Version) SqlExtensions.NotIn<DB2Version>(DB2Version, DB2Version, DB2Version)"
  },
  "api/LinqToDB.DataProvider.DB2.DB2zOSMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.DB2.DB2zOSMappingSchema.html",
    "title": "Class DB2zOSMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DB2zOSMappingSchema Inheritance System.Object MappingSchema DB2zOSMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.DB2 Assembly : linq2db.dll Syntax public class DB2zOSMappingSchema : MappingSchema Constructors | Improve this Doc View Source DB2zOSMappingSchema() Declaration public DB2zOSMappingSchema() | Improve this Doc View Source DB2zOSMappingSchema(MappingSchema[]) Declaration public DB2zOSMappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.DB2.html": {
    "href": "api/LinqToDB.DataProvider.DB2.html",
    "title": "Namespace LinqToDB.DataProvider.DB2 | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.DB2 Classes DB2DataProvider DB2LUWMappingSchema DB2MappingSchema DB2ProviderAdapter DB2ProviderAdapter.BulkCopyAdapter DB2ProviderAdapter.DB2BulkCopy DB2ProviderAdapter.DB2BulkCopyColumnMapping DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection DB2ProviderAdapter.DB2Connection DB2ProviderAdapter.DB2RowsCopiedEventArgs DB2Tools DB2zOSMappingSchema Enums DB2IdentifierQuoteMode DB2ProviderAdapter.DB2BulkCopyOptions DB2ProviderAdapter.DB2ServerTypes DB2ProviderAdapter.DB2Type DB2Version Delegates DB2ProviderAdapter.DB2RowsCopiedEventHandler"
  },
  "api/LinqToDB.DataProvider.DynamicDataProviderBase-1.html": {
    "href": "api/LinqToDB.DataProvider.DynamicDataProviderBase-1.html",
    "title": "Class DynamicDataProviderBase<TProviderMappings> | Linq To DB (aka linq2db)",
    "keywords": "Class DynamicDataProviderBase<TProviderMappings> Inheritance System.Object DataProviderBase DynamicDataProviderBase<TProviderMappings> AccessODBCDataProvider AccessOleDbDataProvider DB2DataProvider FirebirdDataProvider InformixDataProvider MySqlDataProvider OracleDataProvider PostgreSQLDataProvider SapHanaDataProvider SapHanaOdbcDataProvider SqlCeDataProvider SQLiteDataProvider SqlServerDataProvider SybaseDataProvider Implements IDataProvider Inherited Members DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.SupportedTableOptions DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.CreateSqlBuilder(MappingSchema) DataProviderBase.GetSqlOptimizer() DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) DataProviderBase.ConvertParameterType(Type, DbDataType) DataProviderBase.GetSchemaProvider() DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) DataProviderBase.BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) DataProviderBase.BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public abstract class DynamicDataProviderBase<TProviderMappings> : DataProviderBase, IDataProvider where TProviderMappings : IDynamicProviderAdapter Type Parameters Name Description TProviderMappings Constructors | Improve this Doc View Source DynamicDataProviderBase(String, MappingSchema, TProviderMappings) Declaration protected DynamicDataProviderBase(string name, MappingSchema mappingSchema, TProviderMappings providerMappings) Parameters Type Name Description System.String name MappingSchema mappingSchema TProviderMappings providerMappings Fields | Improve this Doc View Source GetProviderSpecificValueReaderMethod Declaration protected const string GetProviderSpecificValueReaderMethod = null Field Value Type Description System.String Properties | Improve this Doc View Source Adapter Declaration public TProviderMappings Adapter { get; } Property Value Type Description TProviderMappings | Improve this Doc View Source ConnectionNamespace Declaration public override string? ConnectionNamespace { get; } Property Value Type Description System.Nullable < System.String > Overrides DataProviderBase.ConnectionNamespace | Improve this Doc View Source DataReaderType Declaration public override Type DataReaderType { get; } Property Value Type Description Type Overrides DataProviderBase.DataReaderType Methods | Improve this Doc View Source CreateConnectionInternal(String) Declaration protected override IDbConnection CreateConnectionInternal(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description IDbConnection Overrides DataProviderBase.CreateConnectionInternal(String) | Improve this Doc View Source SetField(Type, String, String, Boolean, Nullable<Type>) Declaration protected bool SetField(Type fieldType, string dataTypeName, string methodName, bool throwException = true, Type? dataReaderType = null) Parameters Type Name Description Type fieldType System.String dataTypeName System.String methodName System.Boolean throwException System.Nullable < Type > dataReaderType Returns Type Description System.Boolean | Improve this Doc View Source SetProviderField(Type, String, Nullable<Type>) Declaration protected void SetProviderField(Type fieldType, string methodName, Type? dataReaderType = null) Parameters Type Name Description Type fieldType System.String methodName System.Nullable < Type > dataReaderType | Improve this Doc View Source SetProviderField(Type, Type, String, Boolean, Nullable<Type>) Declaration protected bool SetProviderField(Type toType, Type fieldType, string methodName, bool throwException = true, Type? dataReaderType = null) Parameters Type Name Description Type toType Type fieldType System.String methodName System.Boolean throwException System.Nullable < Type > dataReaderType Returns Type Description System.Boolean | Improve this Doc View Source SetProviderField<TField>(String, Nullable<Type>) Declaration protected void SetProviderField<TField>(string methodName, Type? dataReaderType = null) Parameters Type Name Description System.String methodName System.Nullable < Type > dataReaderType Type Parameters Name Description TField | Improve this Doc View Source SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) Declaration protected bool SetProviderField<TTo, TField>(string methodName, bool throwException = true, Type? dataReaderType = null) Parameters Type Name Description System.String methodName System.Boolean throwException System.Nullable < Type > dataReaderType Returns Type Description System.Boolean Type Parameters Name Description TTo TField | Improve this Doc View Source SetToTypeField(Type, String, Nullable<Type>) Declaration protected void SetToTypeField(Type toType, string methodName, Type? dataReaderType = null) Parameters Type Name Description Type toType System.String methodName System.Nullable < Type > dataReaderType | Improve this Doc View Source TryGetProviderCommand(IDbCommand, MappingSchema) Declaration public virtual IDbCommand? TryGetProviderCommand(IDbCommand command, MappingSchema ms) Parameters Type Name Description IDbCommand command MappingSchema ms Returns Type Description System.Nullable < IDbCommand > | Improve this Doc View Source TryGetProviderConnection(IDbConnection, MappingSchema) Declaration public virtual IDbConnection? TryGetProviderConnection(IDbConnection connection, MappingSchema ms) Parameters Type Name Description IDbConnection connection MappingSchema ms Returns Type Description System.Nullable < IDbConnection > | Improve this Doc View Source TryGetProviderParameter(IDbDataParameter, MappingSchema) Declaration public virtual IDbDataParameter? TryGetProviderParameter(IDbDataParameter parameter, MappingSchema ms) Parameters Type Name Description IDbDataParameter parameter MappingSchema ms Returns Type Description System.Nullable < IDbDataParameter > | Improve this Doc View Source TryGetProviderTransaction(IDbTransaction, MappingSchema) Declaration public virtual IDbTransaction? TryGetProviderTransaction(IDbTransaction transaction, MappingSchema ms) Parameters Type Name Description IDbTransaction transaction MappingSchema ms Returns Type Description System.Nullable < IDbTransaction > Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdConfiguration.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdConfiguration.html",
    "title": "Class FirebirdConfiguration | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdConfiguration Inheritance System.Object FirebirdConfiguration Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public static class FirebirdConfiguration : object Fields | Improve this Doc View Source IsLiteralEncodingSupported Specifies that Firebird supports literal encoding. Availiable from version 2.5. Declaration public static bool IsLiteralEncodingSupported Field Value Type Description System.Boolean Properties | Improve this Doc View Source IdentifierQuoteMode Specifies how identifiers like table and field names should be quoted. Declaration public static FirebirdIdentifierQuoteMode IdentifierQuoteMode { get; set; } Property Value Type Description FirebirdIdentifierQuoteMode Remarks Default value: Auto ."
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdDataProvider.html",
    "title": "Class FirebirdDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < FirebirdProviderAdapter > FirebirdDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<FirebirdProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<FirebirdProviderAdapter>.Adapter DynamicDataProviderBase<FirebirdProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<FirebirdProviderAdapter>.DataReaderType DynamicDataProviderBase<FirebirdProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<FirebirdProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<FirebirdProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<FirebirdProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<FirebirdProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<FirebirdProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<FirebirdProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<FirebirdProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<FirebirdProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<FirebirdProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<FirebirdProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.ConvertParameterType(Type, DbDataType) Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdDataProvider : DynamicDataProviderBase<FirebirdProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source FirebirdDataProvider() Declaration public FirebirdDataProvider() | Improve this Doc View Source FirebirdDataProvider(ISqlOptimizer) Declaration public FirebirdDataProvider(ISqlOptimizer sqlOptimizer) Parameters Type Name Description ISqlOptimizer sqlOptimizer | Improve this Doc View Source FirebirdDataProvider(String, MappingSchema, ISqlOptimizer) Declaration protected FirebirdDataProvider(string name, MappingSchema mappingSchema, ISqlOptimizer sqlOptimizer) Parameters Type Name Description System.String name MappingSchema mappingSchema ISqlOptimizer sqlOptimizer Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public override bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader System.Int32 idx Returns Type Description System.Nullable < System.Boolean > Overrides DataProviderBase.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.html",
    "title": "Enum FirebirdIdentifierQuoteMode | Linq To DB (aka linq2db)",
    "keywords": "Enum FirebirdIdentifierQuoteMode Possible modes for Firebird identifier quotes. This enumeration covers only identifier quotation logic and don't handle identifier length limits. Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public enum FirebirdIdentifierQuoteMode : int Fields Name Description Auto Quote identifiers if needed. LINQ To DB will quote identifiers, if they are not valid without quotation. This includes: use of reserved words; use of any characters except latin letters, digits, _ and $; use digit, _ or $ as first character. This is default mode. Note that if you need to preserve casing of identifiers, you should use Quote mode. Quoted identifiers not supported by SQL Dialect < 3. None Do not quote identifiers. LINQ To DB will not check identifiers for validity (spaces, reserved words) is this mode. This mode should be used only for SQL Dialect < 3 and it is developer's responsibility to ensure that there is no identifiers in use that require quotation. Quote Always quote identifiers. LINQ To DB will quote all identifiers, even if it is not required. Select this mode, if you need to preserve identifiers casing. Quoted identifiers not supported by SQL Dialect < 3. Extension Methods Map.DeepCopy<FirebirdIdentifierQuoteMode>() Sql.IsDistinctFrom<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode) Sql.IsDistinctFrom<FirebirdIdentifierQuoteMode>(Nullable<FirebirdIdentifierQuoteMode>) Sql.IsNotDistinctFrom<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode) Sql.IsNotDistinctFrom<FirebirdIdentifierQuoteMode>(Nullable<FirebirdIdentifierQuoteMode>) SqlExtensions.In<FirebirdIdentifierQuoteMode>(IEnumerable<FirebirdIdentifierQuoteMode>) SqlExtensions.In<FirebirdIdentifierQuoteMode>(IQueryable<FirebirdIdentifierQuoteMode>) SqlExtensions.In<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode[]) SqlExtensions.In<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode) SqlExtensions.In<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode) SqlExtensions.NotIn<FirebirdIdentifierQuoteMode>(IEnumerable<FirebirdIdentifierQuoteMode>) SqlExtensions.NotIn<FirebirdIdentifierQuoteMode>(IQueryable<FirebirdIdentifierQuoteMode>) SqlExtensions.NotIn<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode[]) SqlExtensions.NotIn<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode) SqlExtensions.NotIn<FirebirdIdentifierQuoteMode>(FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode, FirebirdIdentifierQuoteMode)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdMappingSchema.html",
    "title": "Class FirebirdMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdMappingSchema Inheritance System.Object MappingSchema FirebirdMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdMappingSchema : MappingSchema Constructors | Improve this Doc View Source FirebirdMappingSchema() Declaration public FirebirdMappingSchema() | Improve this Doc View Source FirebirdMappingSchema(String) Declaration protected FirebirdMappingSchema(string configuration) Parameters Type Name Description System.String configuration Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.html",
    "title": "Enum FirebirdProviderAdapter.FbDbType | Linq To DB (aka linq2db)",
    "keywords": "Enum FirebirdProviderAdapter.FbDbType Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public enum FbDbType : int Fields Name Description Array BigInt Binary Boolean Char Date Dec16 Dec34 Decimal Double Float Guid Int128 Integer Numeric SmallInt Text Time TimeStamp TimeStampTZ TimeStampTZEx TimeTZ TimeTZEx VarChar Extension Methods Map.DeepCopy<FirebirdProviderAdapter.FbDbType>() Sql.IsDistinctFrom<FirebirdProviderAdapter.FbDbType>(FirebirdProviderAdapter.FbDbType) Sql.IsDistinctFrom<FirebirdProviderAdapter.FbDbType>(Nullable<FirebirdProviderAdapter.FbDbType>) Sql.IsNotDistinctFrom<FirebirdProviderAdapter.FbDbType>(FirebirdProviderAdapter.FbDbType) Sql.IsNotDistinctFrom<FirebirdProviderAdapter.FbDbType>(Nullable<FirebirdProviderAdapter.FbDbType>) SqlExtensions.In<FirebirdProviderAdapter.FbDbType>(IEnumerable<FirebirdProviderAdapter.FbDbType>) SqlExtensions.In<FirebirdProviderAdapter.FbDbType>(IQueryable<FirebirdProviderAdapter.FbDbType>) SqlExtensions.In<FirebirdProviderAdapter.FbDbType>(FirebirdProviderAdapter.FbDbType[]) SqlExtensions.In<FirebirdProviderAdapter.FbDbType>(FirebirdProviderAdapter.FbDbType, FirebirdProviderAdapter.FbDbType) SqlExtensions.In<FirebirdProviderAdapter.FbDbType>(FirebirdProviderAdapter.FbDbType, FirebirdProviderAdapter.FbDbType, FirebirdProviderAdapter.FbDbType) SqlExtensions.NotIn<FirebirdProviderAdapter.FbDbType>(IEnumerable<FirebirdProviderAdapter.FbDbType>) SqlExtensions.NotIn<FirebirdProviderAdapter.FbDbType>(IQueryable<FirebirdProviderAdapter.FbDbType>) SqlExtensions.NotIn<FirebirdProviderAdapter.FbDbType>(FirebirdProviderAdapter.FbDbType[]) SqlExtensions.NotIn<FirebirdProviderAdapter.FbDbType>(FirebirdProviderAdapter.FbDbType, FirebirdProviderAdapter.FbDbType) SqlExtensions.NotIn<FirebirdProviderAdapter.FbDbType>(FirebirdProviderAdapter.FbDbType, FirebirdProviderAdapter.FbDbType, FirebirdProviderAdapter.FbDbType)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdProviderAdapter.html",
    "title": "Class FirebirdProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdProviderAdapter Inheritance System.Object FirebirdProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source AssemblyName Declaration public const string AssemblyName = null Field Value Type Description System.String | Improve this Doc View Source ClientNamespace Declaration public const string ClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source TypesNamespace Declaration public const string TypesNamespace = null Field Value Type Description System.String Properties | Improve this Doc View Source ClearAllPools Declaration public Action ClearAllPools { get; } Property Value Type Description Action | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source FbDecFloatType FB client 7.10.0+. Declaration public Type? FbDecFloatType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source FbZonedDateTimeType Declaration public Type? FbZonedDateTimeType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source FbZonedTimeType Declaration public Type? FbZonedTimeType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source GetDbType Declaration public Func<IDbDataParameter, FirebirdProviderAdapter.FbDbType> GetDbType { get; } Property Value Type Description Func < IDbDataParameter , FirebirdProviderAdapter.FbDbType > | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source ProviderTypesNamespace Declaration public string? ProviderTypesNamespace { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SetDbType Declaration public Action<IDbDataParameter, FirebirdProviderAdapter.FbDbType> SetDbType { get; } Property Value Type Description Action < IDbDataParameter , FirebirdProviderAdapter.FbDbType > | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source GetInstance() Declaration public static FirebirdProviderAdapter GetInstance() Returns Type Description FirebirdProviderAdapter Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.html",
    "title": "Class FirebirdSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdSqlBuilder Inheritance System.Object BasicSqlBuilder FirebirdSqlBuilder Implements ISqlBuilder Inherited Members BasicSqlBuilder.OptimizationContext BasicSqlBuilder.Statement BasicSqlBuilder.MappingSchema BasicSqlBuilder.Indent BasicSqlBuilder.BuildStep BasicSqlBuilder.SqlOptimizer BasicSqlBuilder.SqlProviderFlags BasicSqlBuilder.ValueToSqlConverter BasicSqlBuilder.StringBuilder BasicSqlBuilder.SkipAlias BasicSqlBuilder.IsNestedJoinSupported BasicSqlBuilder.IsNestedJoinParenthesisRequired BasicSqlBuilder.WrapJoinCondition BasicSqlBuilder.CanSkipRootAliases(SqlStatement) BasicSqlBuilder.InlineComma BasicSqlBuilder.Comma BasicSqlBuilder.OpenParens BasicSqlBuilder.ConvertElement<T>(T) BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, OptimizationContext, Int32) BasicSqlBuilder.BuildSetOperation(SetOperation, StringBuilder) BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, OptimizationContext, Int32, Boolean) BasicSqlBuilder.BuildSqlBuilder(SelectQuery, Int32, Boolean) BasicSqlBuilder.WithStringBuilder<T>(StringBuilder, Func<T>) BasicSqlBuilder.ParenthesizeJoin(List<SqlJoinedTable>) BasicSqlBuilder.BuildSql() BasicSqlBuilder.BuildDeleteQuery2(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateQuery(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildSelectQuery(SqlSelectStatement) BasicSqlBuilder.BuildCteBody(SelectQuery) BasicSqlBuilder.BuildInsertQuery2(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildMultiInsertQuery(SqlMultiInsertStatement) BasicSqlBuilder.BuildUnknownQuery() BasicSqlBuilder.ConvertTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) BasicSqlBuilder.ConvertInline(String, ConvertType) BasicSqlBuilder.BuildWithClause(SqlWithClause) BasicSqlBuilder.GetSelectedColumns(SelectQuery) BasicSqlBuilder.BuildColumns(SelectQuery) BasicSqlBuilder.SupportsBooleanInColumn BasicSqlBuilder.SupportsNullInColumn BasicSqlBuilder.WrapBooleanExpression(ISqlExpression) BasicSqlBuilder.BuildColumnExpression(SelectQuery, ISqlExpression, Nullable<String>, Boolean) BasicSqlBuilder.WrapColumnExpression(ISqlExpression) BasicSqlBuilder.BuildDeleteClause(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateClause(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTable(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTableName(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateSet(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildEmptyInsert(SqlInsertClause) BasicSqlBuilder.BuildOutputSubclause(SqlStatement, SqlInsertClause) BasicSqlBuilder.BuildOutputSubclause(SqlOutputClause) BasicSqlBuilder.BuildReturningSubclause(SqlStatement) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, Nullable<String>, Boolean, Boolean) BasicSqlBuilder.BuildInsertOrUpdateQueryAsMerge(SqlInsertOrUpdateStatement, Nullable<String>) BasicSqlBuilder.EndLine BasicSqlBuilder.BuildInsertOrUpdateQueryAsUpdateInsert(SqlInsertOrUpdateStatement) BasicSqlBuilder.BuildTruncateTableStatement(SqlTruncateTableStatement) BasicSqlBuilder.BuildTruncateTable(SqlTruncateTableStatement) BasicSqlBuilder.BuildDropTableStatementIfExists(SqlDropTableStatement) BasicSqlBuilder.BuildCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildCreateTableFieldType(SqlField) BasicSqlBuilder.BuildCreateTableIdentityAttribute1(SqlField) BasicSqlBuilder.BuildCreateTableIdentityAttribute2(SqlField) BasicSqlBuilder.BuildCreateTablePrimaryKey(SqlCreateTableStatement, String, IEnumerable<String>) BasicSqlBuilder.BuildFromClause(SqlStatement, SelectQuery) BasicSqlBuilder.BuildPhysicalTable(ISqlTableSource, Nullable<String>, Nullable<String>) BasicSqlBuilder.BuildSqlValuesTable(SqlValuesTable, String, Boolean) BasicSqlBuilder.BuildEmptyValues(SqlValuesTable) BasicSqlBuilder.BuildTableName(SqlTableSource, Boolean, Boolean) BasicSqlBuilder.BuildJoinType(JoinType, SqlSearchCondition) BasicSqlBuilder.BuildWhere(SelectQuery) BasicSqlBuilder.BuildWhereClause(SelectQuery) BasicSqlBuilder.BuildGroupByClause(SelectQuery) BasicSqlBuilder.BuildGroupByBody(GroupingType, List<ISqlExpression>) BasicSqlBuilder.BuildHavingClause(SelectQuery) BasicSqlBuilder.BuildOrderByClause(SelectQuery) BasicSqlBuilder.LimitFormat(SelectQuery) BasicSqlBuilder.OffsetFormat(SelectQuery) BasicSqlBuilder.OffsetFirst BasicSqlBuilder.TakePercent BasicSqlBuilder.TakeTies BasicSqlBuilder.NeedSkip(ISqlExpression, ISqlExpression) BasicSqlBuilder.NeedTake(ISqlExpression) BasicSqlBuilder.BuildSkipFirst(SelectQuery) BasicSqlBuilder.BuildTakeHints(SelectQuery) BasicSqlBuilder.BuildOffsetLimit(SelectQuery) BasicSqlBuilder.BuildWhereSearchCondition(SelectQuery, SqlSearchCondition) BasicSqlBuilder.BuildSearchCondition(SqlSearchCondition, Boolean) BasicSqlBuilder.BuildSearchCondition(Int32, SqlSearchCondition, Boolean) BasicSqlBuilder.BuildPredicate(ISqlPredicate) BasicSqlBuilder.BuildIsDistinctPredicate(SqlPredicate.IsDistinct) BasicSqlBuilder.BuildIsDistinctPredicateFallback(SqlPredicate.IsDistinct) BasicSqlBuilder.BuildPredicate(Int32, Int32, ISqlPredicate) BasicSqlBuilder.BuildLikePredicate(SqlPredicate.Like) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Nullable<String>, Boolean, Boolean) BasicSqlBuilder.BuildExpression(ISqlExpression) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) BasicSqlBuilder.BuildExpression(Int32, ISqlExpression) BasicSqlBuilder.BuildValue(SqlDataType, Nullable<Object>) BasicSqlBuilder.BuildBinaryExpression(SqlBinaryExpression) BasicSqlBuilder.BuildFunction(SqlFunction) BasicSqlBuilder.BuildDataType(StringBuilder, SqlDataType) BasicSqlBuilder.BuildDataType(SqlDataType, Boolean) BasicSqlBuilder.GetPrecedence(ISqlPredicate) BasicSqlBuilder.BuildTag(SqlStatement) BasicSqlBuilder.BuildSqlComment(StringBuilder, SqlComment) BasicSqlBuilder.AlternativeGetSelectedColumns(SelectQuery, BasicSqlBuilder.ColumnSelector) BasicSqlBuilder.IsDateDataType(ISqlExpression, String) BasicSqlBuilder.IsTimeDataType(ISqlExpression) BasicSqlBuilder.GetSequenceNameAttribute(SqlTable, Boolean) BasicSqlBuilder.GetTableAlias(ISqlTableSource) BasicSqlBuilder.GetTableServerName(SqlTable) BasicSqlBuilder.GetTableDatabaseName(SqlTable) BasicSqlBuilder.GetTableSchemaName(SqlTable) BasicSqlBuilder.GetTablePhysicalName(SqlTable) BasicSqlBuilder.AppendIndent() BasicSqlBuilder.PrintParameterName(StringBuilder, IDbDataParameter) BasicSqlBuilder.GetTypeName(IDbDataParameter) BasicSqlBuilder.GetUdtTypeName(IDbDataParameter) BasicSqlBuilder.PrintParameterType(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameters(StringBuilder, Nullable<IEnumerable<IDbDataParameter>>) BasicSqlBuilder.ApplyQueryHints(String, IReadOnlyCollection<String>) BasicSqlBuilder.GetReserveSequenceValuesSql(Int32, String) BasicSqlBuilder.GetMaxValueSql(EntityDescriptor, ColumnDescriptor) BasicSqlBuilder.Name BasicSqlBuilder.RemoveAlias(String) BasicSqlBuilder.GetTempAliases(Int32, String) BasicSqlBuilder.SupportsColumnAliasesInSource BasicSqlBuilder.RequiresConstantColumnAliases BasicSqlBuilder.isEmptyValuesSourceSupported BasicSqlBuilder.FakeTableSchema BasicSqlBuilder.BuildMergeStatement(SqlMergeStatement) BasicSqlBuilder.BuildMergeTerminator(SqlMergeStatement) BasicSqlBuilder.BuildMergeOperationUpdate(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationDelete(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationInsert(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationUpdateWithDelete(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationDeleteBySource(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationUpdateBySource(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOn(SqlMergeStatement) BasicSqlBuilder.BuildMergeSourceQuery(SqlTableLikeSource) BasicSqlBuilder.BuildFakeTableName() BasicSqlBuilder.BuildValues(SqlValuesTable, IReadOnlyList<ISqlExpression[]>) BasicSqlBuilder.BuildMergeInto(SqlMergeStatement) Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdSqlBuilder : BasicSqlBuilder, ISqlBuilder Constructors | Improve this Doc View Source FirebirdSqlBuilder(FirebirdDataProvider, MappingSchema, ISqlOptimizer, SqlProviderFlags) Declaration public FirebirdSqlBuilder(FirebirdDataProvider provider, MappingSchema mappingSchema, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags) Parameters Type Name Description FirebirdDataProvider provider MappingSchema mappingSchema ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags | Improve this Doc View Source FirebirdSqlBuilder(MappingSchema, ISqlOptimizer, SqlProviderFlags) Declaration public FirebirdSqlBuilder(MappingSchema mappingSchema, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags) Parameters Type Name Description MappingSchema mappingSchema ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags Properties | Improve this Doc View Source FakeTable Declaration protected override string FakeTable { get; } Property Value Type Description System.String Overrides BasicSqlBuilder.FakeTable | Improve this Doc View Source IsRecursiveCteKeywordRequired Declaration protected override bool IsRecursiveCteKeywordRequired { get; } Property Value Type Description System.Boolean Overrides BasicSqlBuilder.IsRecursiveCteKeywordRequired | Improve this Doc View Source IsValuesSyntaxSupported Declaration protected override bool IsValuesSyntaxSupported { get; } Property Value Type Description System.Boolean Overrides BasicSqlBuilder.IsValuesSyntaxSupported | Improve this Doc View Source SkipFirst Declaration protected override bool SkipFirst { get; } Property Value Type Description System.Boolean Overrides BasicSqlBuilder.SkipFirst | Improve this Doc View Source SkipFormat Declaration protected override string SkipFormat { get; } Property Value Type Description System.String Overrides BasicSqlBuilder.SkipFormat Methods | Improve this Doc View Source BuildCommand(SqlStatement, Int32) Declaration protected override void BuildCommand(SqlStatement statement, int commandNumber) Parameters Type Name Description SqlStatement statement System.Int32 commandNumber Overrides BasicSqlBuilder.BuildCommand(SqlStatement, Int32) | Improve this Doc View Source BuildCreateTableCommand(SqlTable) Declaration protected override void BuildCreateTableCommand(SqlTable table) Parameters Type Name Description SqlTable table Overrides BasicSqlBuilder.BuildCreateTableCommand(SqlTable) | Improve this Doc View Source BuildCreateTableNullAttribute(SqlField, DefaultNullable) Declaration protected override void BuildCreateTableNullAttribute(SqlField field, DefaultNullable defaultNullable) Parameters Type Name Description SqlField field DefaultNullable defaultNullable Overrides BasicSqlBuilder.BuildCreateTableNullAttribute(SqlField, DefaultNullable) | Improve this Doc View Source BuildDataTypeFromDataType(SqlDataType, Boolean) Declaration protected override void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable) Parameters Type Name Description SqlDataType type System.Boolean forCreateTable Overrides BasicSqlBuilder.BuildDataTypeFromDataType(SqlDataType, Boolean) | Improve this Doc View Source BuildDeleteQuery(SqlDeleteStatement) Declaration protected override void BuildDeleteQuery(SqlDeleteStatement deleteStatement) Parameters Type Name Description SqlDeleteStatement deleteStatement Overrides BasicSqlBuilder.BuildDeleteQuery(SqlDeleteStatement) | Improve this Doc View Source BuildDropTableStatement(SqlDropTableStatement) Declaration protected override void BuildDropTableStatement(SqlDropTableStatement dropTable) Parameters Type Name Description SqlDropTableStatement dropTable Overrides BasicSqlBuilder.BuildDropTableStatement(SqlDropTableStatement) | Improve this Doc View Source BuildEndCreateTableStatement(SqlCreateTableStatement) Declaration protected override void BuildEndCreateTableStatement(SqlCreateTableStatement createTable) Parameters Type Name Description SqlCreateTableStatement createTable Overrides BasicSqlBuilder.BuildEndCreateTableStatement(SqlCreateTableStatement) | Improve this Doc View Source BuildGetIdentity(SqlInsertClause) Declaration protected override void BuildGetIdentity(SqlInsertClause insertClause) Parameters Type Name Description SqlInsertClause insertClause Overrides BasicSqlBuilder.BuildGetIdentity(SqlInsertClause) | Improve this Doc View Source BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) Declaration protected override void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate) Parameters Type Name Description SqlInsertOrUpdateStatement insertOrUpdate Overrides BasicSqlBuilder.BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) | Improve this Doc View Source BuildInsertQuery(SqlStatement, SqlInsertClause, Boolean) Declaration protected override void BuildInsertQuery(SqlStatement statement, SqlInsertClause insertClause, bool addAlias) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause System.Boolean addAlias Overrides BasicSqlBuilder.BuildInsertQuery(SqlStatement, SqlInsertClause, Boolean) | Improve this Doc View Source BuildSelectClause(SelectQuery) Declaration protected override void BuildSelectClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Overrides BasicSqlBuilder.BuildSelectClause(SelectQuery) | Improve this Doc View Source BuildStartCreateTableStatement(SqlCreateTableStatement) Declaration protected override void BuildStartCreateTableStatement(SqlCreateTableStatement createTable) Parameters Type Name Description SqlCreateTableStatement createTable Overrides BasicSqlBuilder.BuildStartCreateTableStatement(SqlCreateTableStatement) | Improve this Doc View Source BuildTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) Declaration public override StringBuilder BuildTableName(StringBuilder sb, string? server, string? database, string? schema, string table, TableOptions tableOptions) Parameters Type Name Description StringBuilder sb System.Nullable < System.String > server System.Nullable < System.String > database System.Nullable < System.String > schema System.String table TableOptions tableOptions Returns Type Description StringBuilder Overrides BasicSqlBuilder.BuildTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) | Improve this Doc View Source BuildTypedExpression(SqlDataType, ISqlExpression) Declaration protected override void BuildTypedExpression(SqlDataType dataType, ISqlExpression value) Parameters Type Name Description SqlDataType dataType ISqlExpression value Overrides BasicSqlBuilder.BuildTypedExpression(SqlDataType, ISqlExpression) | Improve this Doc View Source CommandCount(SqlStatement) Declaration public override int CommandCount(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description System.Int32 Overrides BasicSqlBuilder.CommandCount(SqlStatement) | Improve this Doc View Source Convert(StringBuilder, String, ConvertType) Declaration public override StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType) Parameters Type Name Description StringBuilder sb System.String value ConvertType convertType Returns Type Description StringBuilder Overrides BasicSqlBuilder.Convert(StringBuilder, String, ConvertType) | Improve this Doc View Source CreateSqlBuilder() Declaration protected override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides BasicSqlBuilder.CreateSqlBuilder() | Improve this Doc View Source FirstFormat(SelectQuery) Declaration protected override string FirstFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.String Overrides BasicSqlBuilder.FirstFormat(SelectQuery) | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration public override ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression Overrides BasicSqlBuilder.GetIdentityExpression(SqlTable) | Improve this Doc View Source GetProviderTypeName(IDbDataParameter) Declaration protected override string? GetProviderTypeName(IDbDataParameter parameter) Parameters Type Name Description IDbDataParameter parameter Returns Type Description System.Nullable < System.String > Overrides BasicSqlBuilder.GetProviderTypeName(IDbDataParameter) | Improve this Doc View Source IsReserved(String) Declaration protected sealed override bool IsReserved(string word) Parameters Type Name Description System.String word Returns Type Description System.Boolean Overrides BasicSqlBuilder.IsReserved(String) | Improve this Doc View Source IsSqlValuesTableValueTypeRequired(SqlValuesTable, IReadOnlyList<ISqlExpression[]>, Int32, Int32) Declaration protected override bool IsSqlValuesTableValueTypeRequired(SqlValuesTable source, IReadOnlyList<ISqlExpression[]> rows, int row, int column) Parameters Type Name Description SqlValuesTable source IReadOnlyList < ISqlExpression []> rows System.Int32 row System.Int32 column Returns Type Description System.Boolean Overrides BasicSqlBuilder.IsSqlValuesTableValueTypeRequired(SqlValuesTable, IReadOnlyList<ISqlExpression[]>, Int32, Int32) Implements ISqlBuilder Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.html",
    "title": "Class FirebirdSqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdSqlOptimizer Inheritance System.Object BasicSqlOptimizer FirebirdSqlOptimizer Implements ISqlOptimizer Inherited Members BasicSqlOptimizer.SqlProviderFlags BasicSqlOptimizer.CorrectUnionOrderBy(SqlStatement) BasicSqlOptimizer.FixSetOperationNulls(SqlStatement) BasicSqlOptimizer.FixEmptySelect(SqlStatement) BasicSqlOptimizer.HasParameters(ISqlExpression) BasicSqlOptimizer.ConvertCountSubQuery(SelectQuery) BasicSqlOptimizer.CreateSqlValue(Nullable<Object>, SqlBinaryExpression) BasicSqlOptimizer.CreateSqlValue(Nullable<Object>, DbDataType, ISqlExpression[]) BasicSqlOptimizer.OptimizeFunction(SqlFunction, EvaluationContext) BasicSqlOptimizer.OptimizePredicate(ISqlPredicate, EvaluationContext) BasicSqlOptimizer.OptimizeQueryElement(ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>, IQueryElement) BasicSqlOptimizer.OptimizeBinaryExpression(SqlBinaryExpression, EvaluationContext) BasicSqlOptimizer.ConvertElement(MappingSchema, IQueryElement, OptimizationContext) BasicSqlOptimizer.OptimizeElement(MappingSchema, IQueryElement, OptimizationContext, Boolean) BasicSqlOptimizer.CanCompareSearchConditions BasicSqlOptimizer.ConvertPredicateImpl(ISqlPredicate, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) BasicSqlOptimizer.LikeEscapeCharacter BasicSqlOptimizer.LikeWildcardCharacter BasicSqlOptimizer.LikeHasCharacterSetSupport BasicSqlOptimizer.LikePatternParameterSupport BasicSqlOptimizer.LikeIsEscapeSupported BasicSqlOptimizer.StandardLikeCharactersToEscape BasicSqlOptimizer.EscapeLikeCharacters(String, String) BasicSqlOptimizer.GenerateEscapeReplacement(ISqlExpression, ISqlExpression) BasicSqlOptimizer.EscapeLikeCharactersBrackets(String, String[]) BasicSqlOptimizer.EscapeLikeCharacters(ISqlExpression, ISqlExpression) BasicSqlOptimizer.ConvertLikePredicate(MappingSchema, SqlPredicate.Like, EvaluationContext) BasicSqlOptimizer.ConvertSearchStringPredicateViaLike(SqlPredicate.SearchString, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) BasicSqlOptimizer.ConvertInListPredicate(MappingSchema, SqlPredicate.InList, EvaluationContext) BasicSqlOptimizer.ConvertCoalesceToBinaryFunc(SqlFunction, String) BasicSqlOptimizer.GetMaxLength(SqlDataType) BasicSqlOptimizer.GetMaxPrecision(SqlDataType) BasicSqlOptimizer.GetMaxScale(SqlDataType) BasicSqlOptimizer.GetMaxDisplaySize(SqlDataType) BasicSqlOptimizer.ConvertConvertion(SqlFunction) BasicSqlOptimizer.AlternativeConvertToBoolean(SqlFunction, Int32) BasicSqlOptimizer.ConvertBooleanExprToCase(ISqlExpression) BasicSqlOptimizer.IsDateDataType(ISqlExpression, String) BasicSqlOptimizer.IsDateDataOffsetType(ISqlExpression) BasicSqlOptimizer.IsTimeDataType(ISqlExpression) BasicSqlOptimizer.FloorBeforeConvert(SqlFunction) BasicSqlOptimizer.GetAlternativeDelete(SqlDeleteStatement) BasicSqlOptimizer.GetMainTableSource(SelectQuery) BasicSqlOptimizer.IsAggregationFunction(IQueryElement) BasicSqlOptimizer.NeedsEnvelopingForUpdate(SelectQuery) BasicSqlOptimizer.GetAlternativeUpdate(SqlUpdateStatement) BasicSqlOptimizer.CorrectUpdateTable(SqlUpdateStatement) BasicSqlOptimizer.CheckAliases(SqlStatement, Int32) BasicSqlOptimizer.Add(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Add<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Add(ISqlExpression, Int32) BasicSqlOptimizer.Inc(ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Sub<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, Int32) BasicSqlOptimizer.Dec(ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Mul<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, Int32) BasicSqlOptimizer.Div(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Div<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Div(ISqlExpression, Int32) BasicSqlOptimizer.OptimizeJoins(SqlStatement) BasicSqlOptimizer.IsParameterDependedQuery(SelectQuery) BasicSqlOptimizer.IsParameterDependent(SqlStatement) BasicSqlOptimizer.OptimizeAggregates(SqlStatement) BasicSqlOptimizer.ConvertSkipTake(MappingSchema, SelectQuery, OptimizationContext, ISqlExpression, ISqlExpression) BasicSqlOptimizer.SeparateDistinctFromPagination(SqlStatement, Func<SelectQuery, Boolean>) BasicSqlOptimizer.ReplaceTakeSkipWithRowNumber(SqlStatement, Boolean, Boolean) BasicSqlOptimizer.ReplaceTakeSkipWithRowNumber<TContext>(TContext, SqlStatement, Func<TContext, SelectQuery, Boolean>, Boolean) BasicSqlOptimizer.ReplaceDistinctOrderByWithRowNumber(SqlStatement, Func<SelectQuery, Boolean>) BasicSqlOptimizer.TryConvertToValue(ISqlExpression, EvaluationContext) BasicSqlOptimizer.IsBooleanParameter(ISqlExpression, Int32, Int32) BasicSqlOptimizer.ConvertFunctionParameters(SqlFunction, Boolean) Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public class FirebirdSqlOptimizer : BasicSqlOptimizer, ISqlOptimizer Constructors | Improve this Doc View Source FirebirdSqlOptimizer(SqlProviderFlags) Declaration public FirebirdSqlOptimizer(SqlProviderFlags sqlProviderFlags) Parameters Type Name Description SqlProviderFlags sqlProviderFlags Fields | Improve this Doc View Source LikeFirebirdEscapeSymbols Declaration protected static string[] LikeFirebirdEscapeSymbols Field Value Type Description System.String [] Properties | Improve this Doc View Source LikeCharactersToEscape Declaration public override string[] LikeCharactersToEscape { get; } Property Value Type Description System.String [] Overrides BasicSqlOptimizer.LikeCharactersToEscape | Improve this Doc View Source LikeValueParameterSupport Declaration public override bool LikeValueParameterSupport { get; } Property Value Type Description System.Boolean Overrides BasicSqlOptimizer.LikeValueParameterSupport Methods | Improve this Doc View Source ConvertExpressionImpl(ISqlExpression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Declaration public override ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext> visitor) Parameters Type Name Description ISqlExpression expression ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext > visitor Returns Type Description ISqlExpression Overrides BasicSqlOptimizer.ConvertExpressionImpl(ISqlExpression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) | Improve this Doc View Source ConvertFunction(SqlFunction) Declaration protected override ISqlExpression ConvertFunction(SqlFunction func) Parameters Type Name Description SqlFunction func Returns Type Description ISqlExpression Overrides BasicSqlOptimizer.ConvertFunction(SqlFunction) | Improve this Doc View Source ConvertSearchStringPredicate(SqlPredicate.SearchString, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Declaration public override ISqlPredicate ConvertSearchStringPredicate(SqlPredicate.SearchString predicate, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext> visitor) Parameters Type Name Description SqlPredicate.SearchString predicate ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext > visitor Returns Type Description ISqlPredicate Overrides BasicSqlOptimizer.ConvertSearchStringPredicate(SqlPredicate.SearchString, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) | Improve this Doc View Source Finalize(SqlStatement) Declaration public override SqlStatement Finalize(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement Overrides BasicSqlOptimizer.Finalize(SqlStatement) | Improve this Doc View Source FinalizeStatement(SqlStatement, EvaluationContext) Declaration public override SqlStatement FinalizeStatement(SqlStatement statement, EvaluationContext context) Parameters Type Name Description SqlStatement statement EvaluationContext context Returns Type Description SqlStatement Overrides BasicSqlOptimizer.FinalizeStatement(SqlStatement, EvaluationContext) | Improve this Doc View Source IsParameterDependedElement(IQueryElement) Declaration public override bool IsParameterDependedElement(IQueryElement element) Parameters Type Name Description IQueryElement element Returns Type Description System.Boolean Overrides BasicSqlOptimizer.IsParameterDependedElement(IQueryElement) | Improve this Doc View Source OptimizeExpression(ISqlExpression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Declaration public override ISqlExpression OptimizeExpression(ISqlExpression expression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext> convertVisitor) Parameters Type Name Description ISqlExpression expression ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext > convertVisitor Returns Type Description ISqlExpression Overrides BasicSqlOptimizer.OptimizeExpression(ISqlExpression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) | Improve this Doc View Source TransformStatement(SqlStatement) Declaration public override SqlStatement TransformStatement(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement Overrides BasicSqlOptimizer.TransformStatement(SqlStatement) Implements ISqlOptimizer Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Firebird.FirebirdTools.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.FirebirdTools.html",
    "title": "Class FirebirdTools | Linq To DB (aka linq2db)",
    "keywords": "Class FirebirdTools Inheritance System.Object FirebirdTools Namespace : LinqToDB.DataProvider.Firebird Assembly : linq2db.dll Syntax public static class FirebirdTools : object Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source ClearAllPools() Declaration public static void ClearAllPools() | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Int32 maxBatchSize System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveFirebird(Assembly) Declaration public static void ResolveFirebird(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveFirebird(String) Declaration public static void ResolveFirebird(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.Firebird.html": {
    "href": "api/LinqToDB.DataProvider.Firebird.html",
    "title": "Namespace LinqToDB.DataProvider.Firebird | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Firebird Classes FirebirdConfiguration FirebirdDataProvider FirebirdMappingSchema FirebirdProviderAdapter FirebirdSqlBuilder FirebirdSqlOptimizer FirebirdTools Enums FirebirdIdentifierQuoteMode Possible modes for Firebird identifier quotes. This enumeration covers only identifier quotation logic and don't handle identifier length limits. FirebirdProviderAdapter.FbDbType"
  },
  "api/LinqToDB.DataProvider.html": {
    "href": "api/LinqToDB.DataProvider.html",
    "title": "Namespace LinqToDB.DataProvider | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider Classes BasicBulkCopy BulkCopyReader BulkCopyReader.Parameter BulkCopyReader<T> DataProviderBase DataTools DynamicDataProviderBase<TProviderMappings> MultipleRowsHelper MultipleRowsHelper<T> OdbcProviderAdapter OleDbProviderAdapter Structs BasicBulkCopy.ProviderConnections ReaderInfo Interfaces IDataProvider IDataProviderFactory IDynamicProviderAdapter Contains base information about ADO.NET provider. Could be extended by specific implementation to expose additional provider-specific services. Enums OdbcProviderAdapter.OdbcType OleDbProviderAdapter.ColumnFlags DBCOLUMNFLAGS OLE DB enumeration. https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms722704(v=vs.85 ). OleDbProviderAdapter.OleDbType"
  },
  "api/LinqToDB.DataProvider.IDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.IDataProvider.html",
    "title": "Interface IDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataProvider Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public interface IDataProvider Properties | Improve this Doc View Source ConnectionNamespace Declaration string? ConnectionNamespace { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataReaderType Declaration Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source MappingSchema Declaration MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source Name Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source SqlProviderFlags Declaration SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags | Improve this Doc View Source SupportedTableOptions Declaration TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T | Improve this Doc View Source ConvertParameterType(Type, DbDataType) Declaration Type ConvertParameterType(Type type, DbDataType dataType) Parameters Type Name Description Type type DbDataType dataType Returns Type Description Type | Improve this Doc View Source CreateConnection(String) Declaration IDbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description IDbConnection | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder | Improve this Doc View Source DisposeCommand(DataConnection) Declaration void DisposeCommand(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection | Improve this Doc View Source ExecuteScope(DataConnection) Returns context object to wrap calls of Execute* methods. Using this, provider could e.g. change thread culture during Execute* calls. Following calls wrapped right now: DataConnection.ExecuteNonQuery DataConnection.ExecuteReader. Declaration IDisposable? ExecuteScope(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Data connection instance used with scope. Returns Type Description System.Nullable < IDisposable > Returns disposable scope object. Cannot be null. | Improve this Doc View Source GetCommandBehavior(CommandBehavior) Declaration CommandBehavior GetCommandBehavior(CommandBehavior commandBehavior) Parameters Type Name Description CommandBehavior commandBehavior Returns Type Description CommandBehavior | Improve this Doc View Source GetConnectionInfo(DataConnection, String) Declaration object? GetConnectionInfo(DataConnection dataConnection, string parameterName) Parameters Type Name Description DataConnection dataConnection System.String parameterName Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source GetReaderExpression(IDataReader, Int32, Expression, Type) Declaration Expression GetReaderExpression(IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description IDataReader reader System.Int32 idx Expression readerExpression Type toType Returns Type Description Expression | Improve this Doc View Source GetSchemaProvider() Declaration ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider | Improve this Doc View Source GetSqlOptimizer() Declaration ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) Initializes Command object. Declaration void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters, bool withParameters) Parameters Type Name Description DataConnection dataConnection Data connection instance to initialize with new command. CommandType commandType Type of command. System.String commandText Command SQL. DataParameter [] parameters Optional list of parameters to add to initialized command. System.Boolean withParameters Flag to indicate that command has parameters. Used to configure parameters support when method called without parameters and parameters added later to command. | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader System.Int32 idx Returns Type Description System.Nullable < System.Boolean > | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.IDataProviderFactory.html": {
    "href": "api/LinqToDB.DataProvider.IDataProviderFactory.html",
    "title": "Interface IDataProviderFactory | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataProviderFactory Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public interface IDataProviderFactory Methods | Improve this Doc View Source GetDataProvider(IEnumerable<NamedValue>) Declaration IDataProvider GetDataProvider(IEnumerable<NamedValue> attributes) Parameters Type Name Description IEnumerable < NamedValue > attributes Returns Type Description IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.IDynamicProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.IDynamicProviderAdapter.html",
    "title": "Interface IDynamicProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Interface IDynamicProviderAdapter Contains base information about ADO.NET provider. Could be extended by specific implementation to expose additional provider-specific services. Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public interface IDynamicProviderAdapter Properties | Improve this Doc View Source CommandType Gets type, that implements for current ADO.NET provider. Declaration Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Gets type, that implements for current ADO.NET provider. Declaration Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source DataReaderType Gets type, that implements for current ADO.NET provider. Declaration Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source ParameterType Gets type, that implements for current ADO.NET provider. Declaration Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source TransactionType Gets type, that implements for current ADO.NET provider. Declaration Type TransactionType { get; } Property Value Type Description Type Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.html": {
    "href": "api/LinqToDB.DataProvider.Informix.html",
    "title": "Namespace LinqToDB.DataProvider.Informix | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Informix Classes InformixConfiguration InformixDataProvider InformixMappingSchema InformixMappingSchema.DB2MappingSchema InformixMappingSchema.IfxMappingSchema InformixProviderAdapter InformixProviderAdapter.BulkCopyAdapter InformixProviderAdapter.IfxBulkCopy InformixProviderAdapter.IfxBulkCopyColumnMapping InformixProviderAdapter.IfxBulkCopyColumnMappingCollection InformixProviderAdapter.IfxConnection InformixProviderAdapter.IfxRowsCopiedEventArgs InformixTools Enums InformixProviderAdapter.IfxBulkCopyOptions InformixProviderAdapter.IfxType Delegates InformixProviderAdapter.IfxRowsCopiedEventHandler"
  },
  "api/LinqToDB.DataProvider.Informix.InformixConfiguration.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixConfiguration.html",
    "title": "Class InformixConfiguration | Linq To DB (aka linq2db)",
    "keywords": "Class InformixConfiguration Inheritance System.Object InformixConfiguration Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public static class InformixConfiguration : object Fields | Improve this Doc View Source ExplicitFractionalSecondsSeparator Enables use of explicit fractional seconds separator in datetime values. Must be enabled for Informix starting from v11.70.xC8 and v12.10.xC2. More details at: https://www.ibm.com/support/knowledgecenter/SSGU8G_12.1.0/com.ibm.po.doc/new_features_ce.htm#newxc2__xc2_datetime Declaration public static bool ExplicitFractionalSecondsSeparator Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.DataProvider.Informix.InformixDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixDataProvider.html",
    "title": "Class InformixDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class InformixDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < InformixProviderAdapter > InformixDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<InformixProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<InformixProviderAdapter>.Adapter DynamicDataProviderBase<InformixProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<InformixProviderAdapter>.DataReaderType DynamicDataProviderBase<InformixProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<InformixProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<InformixProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<InformixProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<InformixProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<InformixProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<InformixProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<InformixProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<InformixProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<InformixProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<InformixProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DbDataType) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class InformixDataProvider : DynamicDataProviderBase<InformixProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source InformixDataProvider(String) Declaration public InformixDataProvider(string providerName) Parameters Type Name Description System.String providerName Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source ExecuteScope(DataConnection) Declaration public override IDisposable ExecuteScope(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description IDisposable Overrides DataProviderBase.ExecuteScope(DataConnection) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixMappingSchema.DB2MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixMappingSchema.DB2MappingSchema.html",
    "title": "Class InformixMappingSchema.DB2MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class InformixMappingSchema.DB2MappingSchema Inheritance System.Object MappingSchema InformixMappingSchema.DB2MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class DB2MappingSchema : MappingSchema Constructors | Improve this Doc View Source DB2MappingSchema() Declaration public DB2MappingSchema() | Improve this Doc View Source DB2MappingSchema(MappingSchema[]) Declaration public DB2MappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixMappingSchema.html",
    "title": "Class InformixMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class InformixMappingSchema Inheritance System.Object MappingSchema InformixMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class InformixMappingSchema : MappingSchema Constructors | Improve this Doc View Source InformixMappingSchema() Declaration public InformixMappingSchema() | Improve this Doc View Source InformixMappingSchema(String) Declaration protected InformixMappingSchema(string configuration) Parameters Type Name Description System.String configuration Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixMappingSchema.IfxMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixMappingSchema.IfxMappingSchema.html",
    "title": "Class InformixMappingSchema.IfxMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class InformixMappingSchema.IfxMappingSchema Inheritance System.Object MappingSchema InformixMappingSchema.IfxMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class IfxMappingSchema : MappingSchema Constructors | Improve this Doc View Source IfxMappingSchema() Declaration public IfxMappingSchema() | Improve this Doc View Source IfxMappingSchema(MappingSchema[]) Declaration public IfxMappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.BulkCopyAdapter.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.BulkCopyAdapter.html",
    "title": "Class InformixProviderAdapter.BulkCopyAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class InformixProviderAdapter.BulkCopyAdapter Inheritance System.Object InformixProviderAdapter.BulkCopyAdapter Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class BulkCopyAdapter : object Properties | Improve this Doc View Source Create Declaration public Func<IDbConnection, InformixProviderAdapter.IfxBulkCopyOptions, InformixProviderAdapter.IfxBulkCopy> Create { get; } Property Value Type Description Func < IDbConnection , InformixProviderAdapter.IfxBulkCopyOptions , InformixProviderAdapter.IfxBulkCopy > | Improve this Doc View Source CreateColumnMapping Declaration public Func<int, string, InformixProviderAdapter.IfxBulkCopyColumnMapping> CreateColumnMapping { get; } Property Value Type Description Func < System.Int32 , System.String , InformixProviderAdapter.IfxBulkCopyColumnMapping > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.html",
    "title": "Class InformixProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class InformixProviderAdapter Inheritance System.Object InformixProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class InformixProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source IfxAssemblyName Declaration public const string IfxAssemblyName = null Field Value Type Description System.String | Improve this Doc View Source IfxClientNamespace Declaration public const string IfxClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source IfxProviderFactoryName Declaration public const string IfxProviderFactoryName = null Field Value Type Description System.String | Improve this Doc View Source IfxTypesNamespace Declaration public const string IfxTypesNamespace = null Field Value Type Description System.String Properties | Improve this Doc View Source BlobType Declaration public Type BlobType { get; } Property Value Type Description Type | Improve this Doc View Source ClobType Declaration public Type ClobType { get; } Property Value Type Description Type | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source DateTimeType Declaration public Type? DateTimeType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source DB2BulkCopy Declaration public DB2ProviderAdapter.BulkCopyAdapter DB2BulkCopy { get; } Property Value Type Description DB2ProviderAdapter.BulkCopyAdapter | Improve this Doc View Source DecimalType Declaration public Type? DecimalType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source GetBigIntReaderMethod Declaration public string? GetBigIntReaderMethod { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source GetDateTimeReaderMethod Declaration public string GetDateTimeReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDB2Type Declaration public Func<IDbDataParameter, DB2ProviderAdapter.DB2Type>? GetDB2Type { get; } Property Value Type Description System.Nullable < Func < IDbDataParameter , DB2ProviderAdapter.DB2Type >> | Improve this Doc View Source GetDecimalReaderMethod Declaration public string? GetDecimalReaderMethod { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source GetIfxType Declaration public Func<IDbDataParameter, InformixProviderAdapter.IfxType>? GetIfxType { get; } Property Value Type Description System.Nullable < Func < IDbDataParameter , InformixProviderAdapter.IfxType >> | Improve this Doc View Source GetTimeSpanReaderMethod Declaration public string GetTimeSpanReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source InformixBulkCopy Declaration public InformixProviderAdapter.BulkCopyAdapter InformixBulkCopy { get; } Property Value Type Description InformixProviderAdapter.BulkCopyAdapter | Improve this Doc View Source IsIDSProvider IDS or SQLI provider. Declaration public bool IsIDSProvider { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source ProviderTypesNamespace Declaration public string ProviderTypesNamespace { get; } Property Value Type Description System.String | Improve this Doc View Source SetDB2Type Declaration public Action<IDbDataParameter, DB2ProviderAdapter.DB2Type>? SetDB2Type { get; } Property Value Type Description System.Nullable < Action < IDbDataParameter , DB2ProviderAdapter.DB2Type >> | Improve this Doc View Source SetIfxType Declaration public Action<IDbDataParameter, InformixProviderAdapter.IfxType>? SetIfxType { get; } Property Value Type Description System.Nullable < Action < IDbDataParameter , InformixProviderAdapter.IfxType >> | Improve this Doc View Source TimeSpanFactory Declaration public Func<TimeSpan, object>? TimeSpanFactory { get; } Property Value Type Description System.Nullable < Func < TimeSpan , System.Object >> | Improve this Doc View Source TimeSpanType Declaration public Type? TimeSpanType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source GetInstance(String) Declaration public static InformixProviderAdapter GetInstance(string name) Parameters Type Name Description System.String name Returns Type Description InformixProviderAdapter Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.html",
    "title": "Class InformixProviderAdapter.IfxBulkCopy | Linq To DB (aka linq2db)",
    "keywords": "Class InformixProviderAdapter.IfxBulkCopy Inheritance System.Object TypeWrapper InformixProviderAdapter.IfxBulkCopy Implements IDisposable Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class IfxBulkCopy : TypeWrapper Constructors | Improve this Doc View Source IfxBulkCopy(InformixProviderAdapter.IfxConnection, InformixProviderAdapter.IfxBulkCopyOptions) Declaration public IfxBulkCopy(InformixProviderAdapter.IfxConnection connection, InformixProviderAdapter.IfxBulkCopyOptions options) Parameters Type Name Description InformixProviderAdapter.IfxConnection connection InformixProviderAdapter.IfxBulkCopyOptions options | Improve this Doc View Source IfxBulkCopy(Object, Delegate[]) Declaration public IfxBulkCopy(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source BulkCopyTimeout Declaration public int BulkCopyTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ColumnMappings Declaration public InformixProviderAdapter.IfxBulkCopyColumnMappingCollection ColumnMappings { get; set; } Property Value Type Description InformixProviderAdapter.IfxBulkCopyColumnMappingCollection | Improve this Doc View Source DestinationTableName Declaration public string? DestinationTableName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source NotifyAfter Declaration public int NotifyAfter { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source WriteToServer(IDataReader) Declaration public void WriteToServer(IDataReader dataReader) Parameters Type Name Description IDataReader dataReader Events | Improve this Doc View Source IfxRowsCopied Declaration public event InformixProviderAdapter.IfxRowsCopiedEventHandler IfxRowsCopied Event Type Type Description InformixProviderAdapter.IfxRowsCopiedEventHandler Implements IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMapping.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMapping.html",
    "title": "Class InformixProviderAdapter.IfxBulkCopyColumnMapping | Linq To DB (aka linq2db)",
    "keywords": "Class InformixProviderAdapter.IfxBulkCopyColumnMapping Inheritance System.Object TypeWrapper InformixProviderAdapter.IfxBulkCopyColumnMapping Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class IfxBulkCopyColumnMapping : TypeWrapper Constructors | Improve this Doc View Source IfxBulkCopyColumnMapping(Int32, String) Declaration public IfxBulkCopyColumnMapping(int source, string destination) Parameters Type Name Description System.Int32 source System.String destination | Improve this Doc View Source IfxBulkCopyColumnMapping(Object) Declaration public IfxBulkCopyColumnMapping(object instance) Parameters Type Name Description System.Object instance Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMappingCollection.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMappingCollection.html",
    "title": "Class InformixProviderAdapter.IfxBulkCopyColumnMappingCollection | Linq To DB (aka linq2db)",
    "keywords": "Class InformixProviderAdapter.IfxBulkCopyColumnMappingCollection Inheritance System.Object TypeWrapper InformixProviderAdapter.IfxBulkCopyColumnMappingCollection Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class IfxBulkCopyColumnMappingCollection : TypeWrapper Constructors | Improve this Doc View Source IfxBulkCopyColumnMappingCollection(Object, Delegate[]) Declaration public IfxBulkCopyColumnMappingCollection(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Methods | Improve this Doc View Source Add(InformixProviderAdapter.IfxBulkCopyColumnMapping) Declaration public InformixProviderAdapter.IfxBulkCopyColumnMapping Add(InformixProviderAdapter.IfxBulkCopyColumnMapping bulkCopyColumnMapping) Parameters Type Name Description InformixProviderAdapter.IfxBulkCopyColumnMapping bulkCopyColumnMapping Returns Type Description InformixProviderAdapter.IfxBulkCopyColumnMapping Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions.html",
    "title": "Enum InformixProviderAdapter.IfxBulkCopyOptions | Linq To DB (aka linq2db)",
    "keywords": "Enum InformixProviderAdapter.IfxBulkCopyOptions Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public enum IfxBulkCopyOptions : int Fields Name Description Default KeepIdentity TableLock Truncate Extension Methods Map.DeepCopy<InformixProviderAdapter.IfxBulkCopyOptions>() Sql.IsDistinctFrom<InformixProviderAdapter.IfxBulkCopyOptions>(InformixProviderAdapter.IfxBulkCopyOptions) Sql.IsDistinctFrom<InformixProviderAdapter.IfxBulkCopyOptions>(Nullable<InformixProviderAdapter.IfxBulkCopyOptions>) Sql.IsNotDistinctFrom<InformixProviderAdapter.IfxBulkCopyOptions>(InformixProviderAdapter.IfxBulkCopyOptions) Sql.IsNotDistinctFrom<InformixProviderAdapter.IfxBulkCopyOptions>(Nullable<InformixProviderAdapter.IfxBulkCopyOptions>) SqlExtensions.In<InformixProviderAdapter.IfxBulkCopyOptions>(IEnumerable<InformixProviderAdapter.IfxBulkCopyOptions>) SqlExtensions.In<InformixProviderAdapter.IfxBulkCopyOptions>(IQueryable<InformixProviderAdapter.IfxBulkCopyOptions>) SqlExtensions.In<InformixProviderAdapter.IfxBulkCopyOptions>(InformixProviderAdapter.IfxBulkCopyOptions[]) SqlExtensions.In<InformixProviderAdapter.IfxBulkCopyOptions>(InformixProviderAdapter.IfxBulkCopyOptions, InformixProviderAdapter.IfxBulkCopyOptions) SqlExtensions.In<InformixProviderAdapter.IfxBulkCopyOptions>(InformixProviderAdapter.IfxBulkCopyOptions, InformixProviderAdapter.IfxBulkCopyOptions, InformixProviderAdapter.IfxBulkCopyOptions) SqlExtensions.NotIn<InformixProviderAdapter.IfxBulkCopyOptions>(IEnumerable<InformixProviderAdapter.IfxBulkCopyOptions>) SqlExtensions.NotIn<InformixProviderAdapter.IfxBulkCopyOptions>(IQueryable<InformixProviderAdapter.IfxBulkCopyOptions>) SqlExtensions.NotIn<InformixProviderAdapter.IfxBulkCopyOptions>(InformixProviderAdapter.IfxBulkCopyOptions[]) SqlExtensions.NotIn<InformixProviderAdapter.IfxBulkCopyOptions>(InformixProviderAdapter.IfxBulkCopyOptions, InformixProviderAdapter.IfxBulkCopyOptions) SqlExtensions.NotIn<InformixProviderAdapter.IfxBulkCopyOptions>(InformixProviderAdapter.IfxBulkCopyOptions, InformixProviderAdapter.IfxBulkCopyOptions, InformixProviderAdapter.IfxBulkCopyOptions)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxConnection.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxConnection.html",
    "title": "Class InformixProviderAdapter.IfxConnection | Linq To DB (aka linq2db)",
    "keywords": "Class InformixProviderAdapter.IfxConnection Inheritance System.Object InformixProviderAdapter.IfxConnection Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class IfxConnection : object Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventArgs.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventArgs.html",
    "title": "Class InformixProviderAdapter.IfxRowsCopiedEventArgs | Linq To DB (aka linq2db)",
    "keywords": "Class InformixProviderAdapter.IfxRowsCopiedEventArgs Inheritance System.Object TypeWrapper InformixProviderAdapter.IfxRowsCopiedEventArgs Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public class IfxRowsCopiedEventArgs : TypeWrapper Constructors | Improve this Doc View Source IfxRowsCopiedEventArgs(Object, Delegate[]) Declaration public IfxRowsCopiedEventArgs(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source Abort Declaration public bool Abort { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RowsCopied Declaration public int RowsCopied { get; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventHandler.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventHandler.html",
    "title": "Delegate InformixProviderAdapter.IfxRowsCopiedEventHandler | Linq To DB (aka linq2db)",
    "keywords": "Delegate InformixProviderAdapter.IfxRowsCopiedEventHandler Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public delegate void IfxRowsCopiedEventHandler(object sender, InformixProviderAdapter.IfxRowsCopiedEventArgs e); Parameters Type Name Description System.Object sender InformixProviderAdapter.IfxRowsCopiedEventArgs e Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxType.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxType.html",
    "title": "Enum InformixProviderAdapter.IfxType | Linq To DB (aka linq2db)",
    "keywords": "Enum InformixProviderAdapter.IfxType Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public enum IfxType : int Fields Name Description BigInt BigSerial Binary Blob Boolean Byte Char Char1 Clob Datalink Date DateTime DbClob Decimal DecimalFloat Double DynArray Float Graphic Int8 Integer IntervalDayFraction IntervalYearMonth Invalid List LongVarBinary LongVarChar LongVarGraphic LVarChar Money MultiSet NChar Null Numeric NVarChar Other Real Real370 Row RowId Serial Serial8 Set SmallFloat SmallInt SmartLOBLocator SQLUDTFixed SQLUDTVar Text Time Timestamp VarBinary VarChar VarGraphic Xml Extension Methods Map.DeepCopy<InformixProviderAdapter.IfxType>() Sql.IsDistinctFrom<InformixProviderAdapter.IfxType>(InformixProviderAdapter.IfxType) Sql.IsDistinctFrom<InformixProviderAdapter.IfxType>(Nullable<InformixProviderAdapter.IfxType>) Sql.IsNotDistinctFrom<InformixProviderAdapter.IfxType>(InformixProviderAdapter.IfxType) Sql.IsNotDistinctFrom<InformixProviderAdapter.IfxType>(Nullable<InformixProviderAdapter.IfxType>) SqlExtensions.In<InformixProviderAdapter.IfxType>(IEnumerable<InformixProviderAdapter.IfxType>) SqlExtensions.In<InformixProviderAdapter.IfxType>(IQueryable<InformixProviderAdapter.IfxType>) SqlExtensions.In<InformixProviderAdapter.IfxType>(InformixProviderAdapter.IfxType[]) SqlExtensions.In<InformixProviderAdapter.IfxType>(InformixProviderAdapter.IfxType, InformixProviderAdapter.IfxType) SqlExtensions.In<InformixProviderAdapter.IfxType>(InformixProviderAdapter.IfxType, InformixProviderAdapter.IfxType, InformixProviderAdapter.IfxType) SqlExtensions.NotIn<InformixProviderAdapter.IfxType>(IEnumerable<InformixProviderAdapter.IfxType>) SqlExtensions.NotIn<InformixProviderAdapter.IfxType>(IQueryable<InformixProviderAdapter.IfxType>) SqlExtensions.NotIn<InformixProviderAdapter.IfxType>(InformixProviderAdapter.IfxType[]) SqlExtensions.NotIn<InformixProviderAdapter.IfxType>(InformixProviderAdapter.IfxType, InformixProviderAdapter.IfxType) SqlExtensions.NotIn<InformixProviderAdapter.IfxType>(InformixProviderAdapter.IfxType, InformixProviderAdapter.IfxType, InformixProviderAdapter.IfxType)"
  },
  "api/LinqToDB.DataProvider.Informix.InformixTools.html": {
    "href": "api/LinqToDB.DataProvider.Informix.InformixTools.html",
    "title": "Class InformixTools | Linq To DB (aka linq2db)",
    "keywords": "Class InformixTools Inheritance System.Object InformixTools Namespace : LinqToDB.DataProvider.Informix Assembly : linq2db.dll Syntax public static class InformixTools : object Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, string? providerName = null) Parameters Type Name Description IDbConnection connection System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, string? providerName = null) Parameters Type Name Description IDbTransaction transaction System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, Nullable<String>) Declaration public static DataConnection CreateDataConnection(string connectionString, string? providerName = null) Parameters Type Name Description System.String connectionString System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider(Nullable<String>) Declaration public static IDataProvider GetDataProvider(string? providerName = null) Parameters Type Name Description System.Nullable < System.String > providerName Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Int32 maxBatchSize System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T"
  },
  "api/LinqToDB.DataProvider.MultipleRowsHelper.html": {
    "href": "api/LinqToDB.DataProvider.MultipleRowsHelper.html",
    "title": "Class MultipleRowsHelper | Linq To DB (aka linq2db)",
    "keywords": "Class MultipleRowsHelper Inheritance System.Object MultipleRowsHelper MultipleRowsHelper<T> Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public abstract class MultipleRowsHelper : object Constructors | Improve this Doc View Source MultipleRowsHelper(IDataContext, BulkCopyOptions, Type) Declaration protected MultipleRowsHelper(IDataContext dataConnection, BulkCopyOptions options, Type entityType) Parameters Type Name Description IDataContext dataConnection BulkCopyOptions options Type entityType Fields | Improve this Doc View Source BatchSize Declaration public int BatchSize Field Value Type Description System.Int32 | Improve this Doc View Source Columns Declaration public readonly ColumnDescriptor[] Columns Field Value Type Description ColumnDescriptor [] | Improve this Doc View Source ColumnTypes Declaration public readonly SqlDataType[] ColumnTypes Field Value Type Description SqlDataType [] | Improve this Doc View Source CurrentCount Declaration public int CurrentCount Field Value Type Description System.Int32 | Improve this Doc View Source DataConnection Declaration public readonly DataConnection DataConnection Field Value Type Description DataConnection | Improve this Doc View Source Descriptor Declaration public readonly EntityDescriptor Descriptor Field Value Type Description EntityDescriptor | Improve this Doc View Source HeaderSize Declaration public int HeaderSize Field Value Type Description System.Int32 | Improve this Doc View Source LastRowParameterIndex Declaration public int LastRowParameterIndex Field Value Type Description System.Int32 | Improve this Doc View Source LastRowStringIndex Declaration public int LastRowStringIndex Field Value Type Description System.Int32 | Improve this Doc View Source MappingSchema Declaration public readonly MappingSchema MappingSchema Field Value Type Description MappingSchema | Improve this Doc View Source Options Declaration public readonly BulkCopyOptions Options Field Value Type Description BulkCopyOptions | Improve this Doc View Source ParameterIndex Declaration public int ParameterIndex Field Value Type Description System.Int32 | Improve this Doc View Source ParameterName Declaration public readonly string ParameterName Field Value Type Description System.String | Improve this Doc View Source Parameters Declaration public readonly List<DataParameter> Parameters Field Value Type Description List < DataParameter > | Improve this Doc View Source RowsCopied Declaration public readonly BulkCopyRowsCopied RowsCopied Field Value Type Description BulkCopyRowsCopied | Improve this Doc View Source SqlBuilder Declaration public readonly ISqlBuilder SqlBuilder Field Value Type Description ISqlBuilder | Improve this Doc View Source StringBuilder Declaration public readonly StringBuilder StringBuilder Field Value Type Description StringBuilder | Improve this Doc View Source TableName Declaration public string? TableName Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source ValueConverter Declaration public readonly ValueToSqlConverter ValueConverter Field Value Type Description ValueToSqlConverter Methods | Improve this Doc View Source BuildColumns(Object, Nullable<Func<ColumnDescriptor, Boolean>>, Boolean, Boolean) Declaration public virtual void BuildColumns(object item, Func<ColumnDescriptor, bool>? skipConvert = null, bool castParameters = false, bool castAllRows = false) Parameters Type Name Description System.Object item System.Nullable < Func < ColumnDescriptor , System.Boolean >> skipConvert System.Boolean castParameters System.Boolean castAllRows | Improve this Doc View Source Execute() Declaration public bool Execute() Returns Type Description System.Boolean | Improve this Doc View Source ExecuteAsync(CancellationToken) Declaration public async Task<bool> ExecuteAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > | Improve this Doc View Source SetHeader() Declaration public void SetHeader() Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.MultipleRowsHelper-1.html": {
    "href": "api/LinqToDB.DataProvider.MultipleRowsHelper-1.html",
    "title": "Class MultipleRowsHelper<T> | Linq To DB (aka linq2db)",
    "keywords": "Class MultipleRowsHelper<T> Inheritance System.Object MultipleRowsHelper MultipleRowsHelper<T> Inherited Members MultipleRowsHelper.SqlBuilder MultipleRowsHelper.DataConnection MultipleRowsHelper.MappingSchema MultipleRowsHelper.Options MultipleRowsHelper.ValueConverter MultipleRowsHelper.Descriptor MultipleRowsHelper.Columns MultipleRowsHelper.ColumnTypes MultipleRowsHelper.TableName MultipleRowsHelper.ParameterName MultipleRowsHelper.Parameters MultipleRowsHelper.StringBuilder MultipleRowsHelper.RowsCopied MultipleRowsHelper.CurrentCount MultipleRowsHelper.ParameterIndex MultipleRowsHelper.HeaderSize MultipleRowsHelper.BatchSize MultipleRowsHelper.LastRowStringIndex MultipleRowsHelper.LastRowParameterIndex MultipleRowsHelper.SetHeader() MultipleRowsHelper.BuildColumns(Object, Nullable<Func<ColumnDescriptor, Boolean>>, Boolean, Boolean) MultipleRowsHelper.Execute() MultipleRowsHelper.ExecuteAsync(CancellationToken) Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class MultipleRowsHelper<T> : MultipleRowsHelper Type Parameters Name Description T Constructors | Improve this Doc View Source MultipleRowsHelper(ITable<T>, BulkCopyOptions) Declaration public MultipleRowsHelper(ITable<T> table, BulkCopyOptions options) Parameters Type Name Description ITable <T> table BulkCopyOptions options Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.MySql.html": {
    "href": "api/LinqToDB.DataProvider.MySql.html",
    "title": "Namespace LinqToDB.DataProvider.MySql | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.MySql Classes MySqlDataProvider MySqlExtensions MySqlMappingSchema MySqlMappingSchema.MySqlConnectorMappingSchema MySqlMappingSchema.MySqlOfficialMappingSchema MySqlProviderAdapter MySqlTools Interfaces IMySqlExtensions Enums MySqlExtensions.MatchModifier Search modifier for MATCH AGAINST full-text search predicate."
  },
  "api/LinqToDB.DataProvider.MySql.IMySqlExtensions.html": {
    "href": "api/LinqToDB.DataProvider.MySql.IMySqlExtensions.html",
    "title": "Interface IMySqlExtensions | Linq To DB (aka linq2db)",
    "keywords": "Interface IMySqlExtensions Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public interface IMySqlExtensions Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) MySqlExtensions.Match(IMySqlExtensions, String, Nullable<Object>[]) MySqlExtensions.MatchRelevance(IMySqlExtensions, String, Nullable<Object>[]) MySqlExtensions.Match(IMySqlExtensions, MySqlExtensions.MatchModifier, String, Nullable<Object>[]) MySqlExtensions.MatchRelevance(IMySqlExtensions, MySqlExtensions.MatchModifier, String, Nullable<Object>[])"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlDataProvider.html",
    "title": "Class MySqlDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < MySqlProviderAdapter > MySqlDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<MySqlProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<MySqlProviderAdapter>.Adapter DynamicDataProviderBase<MySqlProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<MySqlProviderAdapter>.DataReaderType DynamicDataProviderBase<MySqlProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<MySqlProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<MySqlProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<MySqlProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<MySqlProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<MySqlProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<MySqlProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<MySqlProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<MySqlProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<MySqlProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<MySqlProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DbDataType) Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public class MySqlDataProvider : DynamicDataProviderBase<MySqlProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source MySqlDataProvider(String) Declaration public MySqlDataProvider(string name) Parameters Type Name Description System.String name | Improve this Doc View Source MySqlDataProvider(String, MappingSchema) Declaration protected MySqlDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlExtensions.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlExtensions.html",
    "title": "Class MySqlExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlExtensions Inheritance System.Object MySqlExtensions Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public static class MySqlExtensions : object Methods | Improve this Doc View Source Match(IMySqlExtensions, MySqlExtensions.MatchModifier, String, Nullable<Object>[]) Applies full-text search condition using MATCH AGAINST predicate against specified full-text columns using specified search modifier. Example: MATCH(col1, col2) AGAINST('search query' MODIFIER). Declaration public static bool Match(this IMySqlExtensions ext, MySqlExtensions.MatchModifier modifier, string search, params object? [] columns) Parameters Type Name Description IMySqlExtensions ext Extension point. MySqlExtensions.MatchModifier modifier Search modifier. System.String search Full-text search condition. System.Nullable < System.Object >[] columns Full-text columns that should be queried. Returns Type Description System.Boolean Returns true if full-text search found matching records. | Improve this Doc View Source Match(IMySqlExtensions, String, Nullable<Object>[]) Applies full-text search condition using MATCH AGAINST predicate against specified full-text columns using default mode (IN NATURAL LANGUAGE MODE). Example: MATCH(col1, col2) AGAINST('search query'). Declaration public static bool Match(this IMySqlExtensions ext, string search, params object? [] columns) Parameters Type Name Description IMySqlExtensions ext Extension point. System.String search Full-text search condition. System.Nullable < System.Object >[] columns Full-text columns that should be queried. Returns Type Description System.Boolean Returns true if full-text search found matching records. | Improve this Doc View Source MatchRelevance(IMySqlExtensions, MySqlExtensions.MatchModifier, String, Nullable<Object>[]) Calculates relevance of full-text search for current record using MATCH AGAINST predicate against specified full-text columns using specified search modifier. Example: MATCH(col1, col2) AGAINST('search query' MODIFIER). Declaration public static double MatchRelevance(this IMySqlExtensions ext, MySqlExtensions.MatchModifier modifier, string search, params object? [] columns) Parameters Type Name Description IMySqlExtensions ext Extension point. MySqlExtensions.MatchModifier modifier Search modifier. System.String search Full-text search condition. System.Nullable < System.Object >[] columns Full-text columns that should be queried. Returns Type Description System.Double Returns full-text search relevance value for current record. | Improve this Doc View Source MatchRelevance(IMySqlExtensions, String, Nullable<Object>[]) Calculates relevance of full-text search for current record using MATCH AGAINST predicate against specified full-text columns using default mode (IN NATURAL LANGUAGE MODE). Example: MATCH(col1, col2) AGAINST('search query'). Declaration public static double MatchRelevance(this IMySqlExtensions ext, string search, params object? [] columns) Parameters Type Name Description IMySqlExtensions ext Extension point. System.String search Full-text search condition. System.Nullable < System.Object >[] columns Full-text columns that should be queried. Returns Type Description System.Double Returns full-text search relevance value for current record. | Improve this Doc View Source MySql(Sql.ISqlExtension) Declaration public static IMySqlExtensions MySql(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description IMySqlExtensions"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier.html",
    "title": "Enum MySqlExtensions.MatchModifier | Linq To DB (aka linq2db)",
    "keywords": "Enum MySqlExtensions.MatchModifier Search modifier for MATCH AGAINST full-text search predicate. Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public enum MatchModifier : int Fields Name Description Boolean Applies 'IN BOOLEAN MODE' (default value) search modifier. NaturalLanguage Applies 'IN NATURAL LANGUAGE MODE' (default value) search modifier. WithQueryExpansion Applies 'IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION'/'WITH QUERY EXPANSION' search modifier. Extension Methods Map.DeepCopy<MySqlExtensions.MatchModifier>() Sql.IsDistinctFrom<MySqlExtensions.MatchModifier>(MySqlExtensions.MatchModifier) Sql.IsDistinctFrom<MySqlExtensions.MatchModifier>(Nullable<MySqlExtensions.MatchModifier>) Sql.IsNotDistinctFrom<MySqlExtensions.MatchModifier>(MySqlExtensions.MatchModifier) Sql.IsNotDistinctFrom<MySqlExtensions.MatchModifier>(Nullable<MySqlExtensions.MatchModifier>) SqlExtensions.In<MySqlExtensions.MatchModifier>(IEnumerable<MySqlExtensions.MatchModifier>) SqlExtensions.In<MySqlExtensions.MatchModifier>(IQueryable<MySqlExtensions.MatchModifier>) SqlExtensions.In<MySqlExtensions.MatchModifier>(MySqlExtensions.MatchModifier[]) SqlExtensions.In<MySqlExtensions.MatchModifier>(MySqlExtensions.MatchModifier, MySqlExtensions.MatchModifier) SqlExtensions.In<MySqlExtensions.MatchModifier>(MySqlExtensions.MatchModifier, MySqlExtensions.MatchModifier, MySqlExtensions.MatchModifier) SqlExtensions.NotIn<MySqlExtensions.MatchModifier>(IEnumerable<MySqlExtensions.MatchModifier>) SqlExtensions.NotIn<MySqlExtensions.MatchModifier>(IQueryable<MySqlExtensions.MatchModifier>) SqlExtensions.NotIn<MySqlExtensions.MatchModifier>(MySqlExtensions.MatchModifier[]) SqlExtensions.NotIn<MySqlExtensions.MatchModifier>(MySqlExtensions.MatchModifier, MySqlExtensions.MatchModifier) SqlExtensions.NotIn<MySqlExtensions.MatchModifier>(MySqlExtensions.MatchModifier, MySqlExtensions.MatchModifier, MySqlExtensions.MatchModifier)"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlMappingSchema.html",
    "title": "Class MySqlMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlMappingSchema Inheritance System.Object MappingSchema MySqlMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public class MySqlMappingSchema : MappingSchema Constructors | Improve this Doc View Source MySqlMappingSchema() Declaration public MySqlMappingSchema() | Improve this Doc View Source MySqlMappingSchema(String) Declaration protected MySqlMappingSchema(string configuration) Parameters Type Name Description System.String configuration Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlMappingSchema.MySqlConnectorMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlMappingSchema.MySqlConnectorMappingSchema.html",
    "title": "Class MySqlMappingSchema.MySqlConnectorMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlMappingSchema.MySqlConnectorMappingSchema Inheritance System.Object MappingSchema MySqlMappingSchema.MySqlConnectorMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public class MySqlConnectorMappingSchema : MappingSchema Constructors | Improve this Doc View Source MySqlConnectorMappingSchema() Declaration public MySqlConnectorMappingSchema() | Improve this Doc View Source MySqlConnectorMappingSchema(MappingSchema[]) Declaration public MySqlConnectorMappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlMappingSchema.MySqlOfficialMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlMappingSchema.MySqlOfficialMappingSchema.html",
    "title": "Class MySqlMappingSchema.MySqlOfficialMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlMappingSchema.MySqlOfficialMappingSchema Inheritance System.Object MappingSchema MySqlMappingSchema.MySqlOfficialMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public class MySqlOfficialMappingSchema : MappingSchema Constructors | Improve this Doc View Source MySqlOfficialMappingSchema() Declaration public MySqlOfficialMappingSchema() | Improve this Doc View Source MySqlOfficialMappingSchema(MappingSchema[]) Declaration public MySqlOfficialMappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlProviderAdapter.html",
    "title": "Class MySqlProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlProviderAdapter Inheritance System.Object MySqlProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public class MySqlProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source MySqlConnectorAssemblyName Declaration public const string MySqlConnectorAssemblyName = null Field Value Type Description System.String | Improve this Doc View Source MySqlConnectorNamespace Declaration public const string MySqlConnectorNamespace = null Field Value Type Description System.String | Improve this Doc View Source MySqlConnectorTypesNamespace Declaration public const string MySqlConnectorTypesNamespace = null Field Value Type Description System.String | Improve this Doc View Source MySqlDataAssemblyName Declaration public const string MySqlDataAssemblyName = null Field Value Type Description System.String | Improve this Doc View Source MySqlDataClientNamespace Declaration public const string MySqlDataClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source MySqlDataTypesNamespace Declaration public const string MySqlDataTypesNamespace = null Field Value Type Description System.String | Improve this Doc View Source OldMySqlConnectorNamespace Declaration public const string OldMySqlConnectorNamespace = null Field Value Type Description System.String | Improve this Doc View Source OldMySqlConnectorTypesNamespace Declaration public const string OldMySqlConnectorTypesNamespace = null Field Value Type Description System.String Properties | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source GetDateTimeOffsetMethodName MySqlConnector-only. Declaration public string? GetDateTimeOffsetMethodName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source GetDbType Returns object, because both providers use different enums and we anyway don't need typed value. Declaration public Func<IDbDataParameter, object> GetDbType { get; } Property Value Type Description Func < IDbDataParameter , System.Object > | Improve this Doc View Source GetMySqlDateTimeMethodName Declaration public string GetMySqlDateTimeMethodName { get; } Property Value Type Description System.String | Improve this Doc View Source GetMySqlDecimalMethodName Not supported by MySqlConnector. Declaration public string? GetMySqlDecimalMethodName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source MySqlDateTimeType Declaration public Type MySqlDateTimeType { get; } Property Value Type Description Type | Improve this Doc View Source MySqlDecimalGetter Not supported by MySqlConnector. Declaration public Func<object, decimal>? MySqlDecimalGetter { get; } Property Value Type Description System.Nullable < Func < System.Object , System.Decimal >> | Improve this Doc View Source MySqlDecimalType Not supported by MySqlConnector. Declaration public Type? MySqlDecimalType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source MySqlGeometryType Declaration public Type MySqlGeometryType { get; } Property Value Type Description Type | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source ProviderTypesNamespace Declaration public string ProviderTypesNamespace { get; } Property Value Type Description System.String | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source GetInstance(String) Declaration public static MySqlProviderAdapter GetInstance(string name) Parameters Type Name Description System.String name Returns Type Description MySqlProviderAdapter Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.MySql.MySqlTools.html": {
    "href": "api/LinqToDB.DataProvider.MySql.MySqlTools.html",
    "title": "Class MySqlTools | Linq To DB (aka linq2db)",
    "keywords": "Class MySqlTools Inheritance System.Object MySqlTools Namespace : LinqToDB.DataProvider.MySql Assembly : linq2db.dll Syntax public static class MySqlTools : object Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source DetectedProviderName Declaration public static string DetectedProviderName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateDataConnection(IDbConnection, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, string? providerName = null) Parameters Type Name Description IDbConnection connection System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, string? providerName = null) Parameters Type Name Description IDbTransaction transaction System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, Nullable<String>) Declaration public static DataConnection CreateDataConnection(string connectionString, string? providerName = null) Parameters Type Name Description System.String connectionString System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider(Nullable<String>) Declaration public static IDataProvider GetDataProvider(string? providerName = null) Parameters Type Name Description System.Nullable < System.String > providerName Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Int32 maxBatchSize System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveMySql(Assembly) Declaration public static void ResolveMySql(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveMySql(String, Nullable<String>) Declaration public static void ResolveMySql(string path, string? assemblyName) Parameters Type Name Description System.String path System.Nullable < System.String > assemblyName"
  },
  "api/LinqToDB.DataProvider.OdbcProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.OdbcProviderAdapter.html",
    "title": "Class OdbcProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class OdbcProviderAdapter Inheritance System.Object OdbcProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class OdbcProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source AssemblyName Declaration public const string AssemblyName = null Field Value Type Description System.String | Improve this Doc View Source ClientNamespace Declaration public const string ClientNamespace = null Field Value Type Description System.String Properties | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source GetDbType Declaration public Func<IDbDataParameter, OdbcProviderAdapter.OdbcType> GetDbType { get; } Property Value Type Description Func < IDbDataParameter , OdbcProviderAdapter.OdbcType > | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source SetDbType Declaration public Action<IDbDataParameter, OdbcProviderAdapter.OdbcType> SetDbType { get; } Property Value Type Description Action < IDbDataParameter , OdbcProviderAdapter.OdbcType > | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source GetInstance() Declaration public static OdbcProviderAdapter GetInstance() Returns Type Description OdbcProviderAdapter Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.OdbcProviderAdapter.OdbcType.html": {
    "href": "api/LinqToDB.DataProvider.OdbcProviderAdapter.OdbcType.html",
    "title": "Enum OdbcProviderAdapter.OdbcType | Linq To DB (aka linq2db)",
    "keywords": "Enum OdbcProviderAdapter.OdbcType Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public enum OdbcType : int Fields Name Description BigInt Binary Bit Char Date DateTime Decimal Double Image Int NChar NText Numeric NVarChar Real SmallDateTime SmallInt Text Time Timestamp TinyInt UniqueIdentifier VarBinary VarChar Extension Methods Map.DeepCopy<OdbcProviderAdapter.OdbcType>() Sql.IsDistinctFrom<OdbcProviderAdapter.OdbcType>(OdbcProviderAdapter.OdbcType) Sql.IsDistinctFrom<OdbcProviderAdapter.OdbcType>(Nullable<OdbcProviderAdapter.OdbcType>) Sql.IsNotDistinctFrom<OdbcProviderAdapter.OdbcType>(OdbcProviderAdapter.OdbcType) Sql.IsNotDistinctFrom<OdbcProviderAdapter.OdbcType>(Nullable<OdbcProviderAdapter.OdbcType>) SqlExtensions.In<OdbcProviderAdapter.OdbcType>(IEnumerable<OdbcProviderAdapter.OdbcType>) SqlExtensions.In<OdbcProviderAdapter.OdbcType>(IQueryable<OdbcProviderAdapter.OdbcType>) SqlExtensions.In<OdbcProviderAdapter.OdbcType>(OdbcProviderAdapter.OdbcType[]) SqlExtensions.In<OdbcProviderAdapter.OdbcType>(OdbcProviderAdapter.OdbcType, OdbcProviderAdapter.OdbcType) SqlExtensions.In<OdbcProviderAdapter.OdbcType>(OdbcProviderAdapter.OdbcType, OdbcProviderAdapter.OdbcType, OdbcProviderAdapter.OdbcType) SqlExtensions.NotIn<OdbcProviderAdapter.OdbcType>(IEnumerable<OdbcProviderAdapter.OdbcType>) SqlExtensions.NotIn<OdbcProviderAdapter.OdbcType>(IQueryable<OdbcProviderAdapter.OdbcType>) SqlExtensions.NotIn<OdbcProviderAdapter.OdbcType>(OdbcProviderAdapter.OdbcType[]) SqlExtensions.NotIn<OdbcProviderAdapter.OdbcType>(OdbcProviderAdapter.OdbcType, OdbcProviderAdapter.OdbcType) SqlExtensions.NotIn<OdbcProviderAdapter.OdbcType>(OdbcProviderAdapter.OdbcType, OdbcProviderAdapter.OdbcType, OdbcProviderAdapter.OdbcType)"
  },
  "api/LinqToDB.DataProvider.OleDbProviderAdapter.ColumnFlags.html": {
    "href": "api/LinqToDB.DataProvider.OleDbProviderAdapter.ColumnFlags.html",
    "title": "Enum OleDbProviderAdapter.ColumnFlags | Linq To DB (aka linq2db)",
    "keywords": "Enum OleDbProviderAdapter.ColumnFlags DBCOLUMNFLAGS OLE DB enumeration. https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms722704(v=vs.85 ). Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public enum ColumnFlags : long Fields Name Description CacheDeferred IsBookmark IsCollection IsDefaultStream IsFixedLength IsLong IsNullable IsRow IsRowId IsRowset IsRowUrl IsRowVer IsStream MayBeNull MayDefer Reserved RowSpecificColumn ScaleIsNegative Write WriteUnknown Extension Methods Map.DeepCopy<OleDbProviderAdapter.ColumnFlags>() Sql.IsDistinctFrom<OleDbProviderAdapter.ColumnFlags>(OleDbProviderAdapter.ColumnFlags) Sql.IsDistinctFrom<OleDbProviderAdapter.ColumnFlags>(Nullable<OleDbProviderAdapter.ColumnFlags>) Sql.IsNotDistinctFrom<OleDbProviderAdapter.ColumnFlags>(OleDbProviderAdapter.ColumnFlags) Sql.IsNotDistinctFrom<OleDbProviderAdapter.ColumnFlags>(Nullable<OleDbProviderAdapter.ColumnFlags>) SqlExtensions.In<OleDbProviderAdapter.ColumnFlags>(IEnumerable<OleDbProviderAdapter.ColumnFlags>) SqlExtensions.In<OleDbProviderAdapter.ColumnFlags>(IQueryable<OleDbProviderAdapter.ColumnFlags>) SqlExtensions.In<OleDbProviderAdapter.ColumnFlags>(OleDbProviderAdapter.ColumnFlags[]) SqlExtensions.In<OleDbProviderAdapter.ColumnFlags>(OleDbProviderAdapter.ColumnFlags, OleDbProviderAdapter.ColumnFlags) SqlExtensions.In<OleDbProviderAdapter.ColumnFlags>(OleDbProviderAdapter.ColumnFlags, OleDbProviderAdapter.ColumnFlags, OleDbProviderAdapter.ColumnFlags) SqlExtensions.NotIn<OleDbProviderAdapter.ColumnFlags>(IEnumerable<OleDbProviderAdapter.ColumnFlags>) SqlExtensions.NotIn<OleDbProviderAdapter.ColumnFlags>(IQueryable<OleDbProviderAdapter.ColumnFlags>) SqlExtensions.NotIn<OleDbProviderAdapter.ColumnFlags>(OleDbProviderAdapter.ColumnFlags[]) SqlExtensions.NotIn<OleDbProviderAdapter.ColumnFlags>(OleDbProviderAdapter.ColumnFlags, OleDbProviderAdapter.ColumnFlags) SqlExtensions.NotIn<OleDbProviderAdapter.ColumnFlags>(OleDbProviderAdapter.ColumnFlags, OleDbProviderAdapter.ColumnFlags, OleDbProviderAdapter.ColumnFlags)"
  },
  "api/LinqToDB.DataProvider.OleDbProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.OleDbProviderAdapter.html",
    "title": "Class OleDbProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class OleDbProviderAdapter Inheritance System.Object OleDbProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public class OleDbProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source AssemblyName Declaration public const string AssemblyName = null Field Value Type Description System.String | Improve this Doc View Source ClientNamespace Declaration public const string ClientNamespace = null Field Value Type Description System.String Properties | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source GetDbType Declaration public Func<IDbDataParameter, OleDbProviderAdapter.OleDbType> GetDbType { get; } Property Value Type Description Func < IDbDataParameter , OleDbProviderAdapter.OleDbType > | Improve this Doc View Source GetOleDbSchemaTable Declaration public Func<IDbConnection, Guid, object[], DataTable> GetOleDbSchemaTable { get; } Property Value Type Description Func < IDbConnection , Guid , System.Object [], DataTable > | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source SetDbType Declaration public Action<IDbDataParameter, OleDbProviderAdapter.OleDbType> SetDbType { get; } Property Value Type Description Action < IDbDataParameter , OleDbProviderAdapter.OleDbType > | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source GetInstance() Declaration public static OleDbProviderAdapter GetInstance() Returns Type Description OleDbProviderAdapter Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.OleDbProviderAdapter.OleDbType.html": {
    "href": "api/LinqToDB.DataProvider.OleDbProviderAdapter.OleDbType.html",
    "title": "Enum OleDbProviderAdapter.OleDbType | Linq To DB (aka linq2db)",
    "keywords": "Enum OleDbProviderAdapter.OleDbType Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public enum OleDbType : int Fields Name Description BigInt Binary Boolean BSTR Char Currency Date DBDate DBTime DBTimeStamp Decimal Double Empty Error Filetime Guid IDispatch Integer IUnknown LongVarBinary LongVarChar LongVarWChar Numeric PropVariant Single SmallInt TinyInt UnsignedBigInt UnsignedInt UnsignedSmallInt UnsignedTinyInt VarBinary VarChar Variant VarNumeric VarWChar WChar Extension Methods Map.DeepCopy<OleDbProviderAdapter.OleDbType>() Sql.IsDistinctFrom<OleDbProviderAdapter.OleDbType>(OleDbProviderAdapter.OleDbType) Sql.IsDistinctFrom<OleDbProviderAdapter.OleDbType>(Nullable<OleDbProviderAdapter.OleDbType>) Sql.IsNotDistinctFrom<OleDbProviderAdapter.OleDbType>(OleDbProviderAdapter.OleDbType) Sql.IsNotDistinctFrom<OleDbProviderAdapter.OleDbType>(Nullable<OleDbProviderAdapter.OleDbType>) SqlExtensions.In<OleDbProviderAdapter.OleDbType>(IEnumerable<OleDbProviderAdapter.OleDbType>) SqlExtensions.In<OleDbProviderAdapter.OleDbType>(IQueryable<OleDbProviderAdapter.OleDbType>) SqlExtensions.In<OleDbProviderAdapter.OleDbType>(OleDbProviderAdapter.OleDbType[]) SqlExtensions.In<OleDbProviderAdapter.OleDbType>(OleDbProviderAdapter.OleDbType, OleDbProviderAdapter.OleDbType) SqlExtensions.In<OleDbProviderAdapter.OleDbType>(OleDbProviderAdapter.OleDbType, OleDbProviderAdapter.OleDbType, OleDbProviderAdapter.OleDbType) SqlExtensions.NotIn<OleDbProviderAdapter.OleDbType>(IEnumerable<OleDbProviderAdapter.OleDbType>) SqlExtensions.NotIn<OleDbProviderAdapter.OleDbType>(IQueryable<OleDbProviderAdapter.OleDbType>) SqlExtensions.NotIn<OleDbProviderAdapter.OleDbType>(OleDbProviderAdapter.OleDbType[]) SqlExtensions.NotIn<OleDbProviderAdapter.OleDbType>(OleDbProviderAdapter.OleDbType, OleDbProviderAdapter.OleDbType) SqlExtensions.NotIn<OleDbProviderAdapter.OleDbType>(OleDbProviderAdapter.OleDbType, OleDbProviderAdapter.OleDbType, OleDbProviderAdapter.OleDbType)"
  },
  "api/LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.html",
    "title": "Enum AlternativeBulkCopy | Linq To DB (aka linq2db)",
    "keywords": "Enum AlternativeBulkCopy Defines type of multi-row INSERT operation to generate for RowByRow bulk copy mode. Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public enum AlternativeBulkCopy : int Fields Name Description InsertAll This mode generates INSERT ALL statement. Note that INSERT ALL doesn't support sequences and will use single generated value for all rows. INSERT ALL INTO target_table VALUES(/*row data*/) ... INTO target_table VALUES(/*row data*/) InsertDual This mode generates INSERT ... SELECT statement. INSERT INTO target_table(/*columns*/) SELECT /*row data*/ FROM DUAL UNION ALL ... UNION ALL SELECT /*row data*/ FROM DUAL InsertInto This mode performs regular INSERT INTO query with array of values for each column. INSERT INTO target_table(/*columns*/) VALUES(:column1ArrayParameter, ..., :columnXArrayParameter) Extension Methods Map.DeepCopy<AlternativeBulkCopy>() Sql.IsDistinctFrom<AlternativeBulkCopy>(AlternativeBulkCopy) Sql.IsDistinctFrom<AlternativeBulkCopy>(Nullable<AlternativeBulkCopy>) Sql.IsNotDistinctFrom<AlternativeBulkCopy>(AlternativeBulkCopy) Sql.IsNotDistinctFrom<AlternativeBulkCopy>(Nullable<AlternativeBulkCopy>) SqlExtensions.In<AlternativeBulkCopy>(IEnumerable<AlternativeBulkCopy>) SqlExtensions.In<AlternativeBulkCopy>(IQueryable<AlternativeBulkCopy>) SqlExtensions.In<AlternativeBulkCopy>(AlternativeBulkCopy[]) SqlExtensions.In<AlternativeBulkCopy>(AlternativeBulkCopy, AlternativeBulkCopy) SqlExtensions.In<AlternativeBulkCopy>(AlternativeBulkCopy, AlternativeBulkCopy, AlternativeBulkCopy) SqlExtensions.NotIn<AlternativeBulkCopy>(IEnumerable<AlternativeBulkCopy>) SqlExtensions.NotIn<AlternativeBulkCopy>(IQueryable<AlternativeBulkCopy>) SqlExtensions.NotIn<AlternativeBulkCopy>(AlternativeBulkCopy[]) SqlExtensions.NotIn<AlternativeBulkCopy>(AlternativeBulkCopy, AlternativeBulkCopy) SqlExtensions.NotIn<AlternativeBulkCopy>(AlternativeBulkCopy, AlternativeBulkCopy, AlternativeBulkCopy)"
  },
  "api/LinqToDB.DataProvider.Oracle.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.html",
    "title": "Namespace LinqToDB.DataProvider.Oracle | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Oracle Classes Oracle11SqlOptimizer Oracle12SqlOptimizer OracleDataProvider OracleMappingSchema OracleMappingSchema.ManagedMappingSchema OracleMappingSchema.NativeMappingSchema OracleProviderAdapter OracleProviderAdapter.BulkCopyAdapter OracleProviderAdapter.OracleBulkCopy OracleProviderAdapter.OracleBulkCopyColumnMapping OracleProviderAdapter.OracleBulkCopyColumnMappingCollection OracleProviderAdapter.OracleConnection OracleProviderAdapter.OracleRowsCopiedEventArgs OracleTools Enums AlternativeBulkCopy Defines type of multi-row INSERT operation to generate for RowByRow bulk copy mode. OracleProviderAdapter.OracleBulkCopyOptions OracleProviderAdapter.OracleDbType OracleVersion Delegates OracleProviderAdapter.OracleRowsCopiedEventHandler"
  },
  "api/LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.html",
    "title": "Class Oracle11SqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Class Oracle11SqlOptimizer Inheritance System.Object BasicSqlOptimizer Oracle11SqlOptimizer Oracle12SqlOptimizer Implements ISqlOptimizer Inherited Members BasicSqlOptimizer.SqlProviderFlags BasicSqlOptimizer.CorrectUnionOrderBy(SqlStatement) BasicSqlOptimizer.FixSetOperationNulls(SqlStatement) BasicSqlOptimizer.FixEmptySelect(SqlStatement) BasicSqlOptimizer.HasParameters(ISqlExpression) BasicSqlOptimizer.ConvertCountSubQuery(SelectQuery) BasicSqlOptimizer.CreateSqlValue(Nullable<Object>, SqlBinaryExpression) BasicSqlOptimizer.CreateSqlValue(Nullable<Object>, DbDataType, ISqlExpression[]) BasicSqlOptimizer.OptimizeExpression(ISqlExpression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) BasicSqlOptimizer.OptimizeFunction(SqlFunction, EvaluationContext) BasicSqlOptimizer.OptimizePredicate(ISqlPredicate, EvaluationContext) BasicSqlOptimizer.OptimizeQueryElement(ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>, IQueryElement) BasicSqlOptimizer.OptimizeBinaryExpression(SqlBinaryExpression, EvaluationContext) BasicSqlOptimizer.ConvertElement(MappingSchema, IQueryElement, OptimizationContext) BasicSqlOptimizer.OptimizeElement(MappingSchema, IQueryElement, OptimizationContext, Boolean) BasicSqlOptimizer.CanCompareSearchConditions BasicSqlOptimizer.LikeEscapeCharacter BasicSqlOptimizer.LikeWildcardCharacter BasicSqlOptimizer.LikeHasCharacterSetSupport BasicSqlOptimizer.LikePatternParameterSupport BasicSqlOptimizer.LikeValueParameterSupport BasicSqlOptimizer.LikeIsEscapeSupported BasicSqlOptimizer.StandardLikeCharactersToEscape BasicSqlOptimizer.EscapeLikeCharacters(String, String) BasicSqlOptimizer.GenerateEscapeReplacement(ISqlExpression, ISqlExpression) BasicSqlOptimizer.EscapeLikeCharactersBrackets(String, String[]) BasicSqlOptimizer.EscapeLikeCharacters(ISqlExpression, ISqlExpression) BasicSqlOptimizer.ConvertLikePredicate(MappingSchema, SqlPredicate.Like, EvaluationContext) BasicSqlOptimizer.ConvertSearchStringPredicateViaLike(SqlPredicate.SearchString, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) BasicSqlOptimizer.ConvertSearchStringPredicate(SqlPredicate.SearchString, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) BasicSqlOptimizer.ConvertInListPredicate(MappingSchema, SqlPredicate.InList, EvaluationContext) BasicSqlOptimizer.ConvertCoalesceToBinaryFunc(SqlFunction, String) BasicSqlOptimizer.GetMaxLength(SqlDataType) BasicSqlOptimizer.GetMaxPrecision(SqlDataType) BasicSqlOptimizer.GetMaxScale(SqlDataType) BasicSqlOptimizer.GetMaxDisplaySize(SqlDataType) BasicSqlOptimizer.ConvertConvertion(SqlFunction) BasicSqlOptimizer.AlternativeConvertToBoolean(SqlFunction, Int32) BasicSqlOptimizer.ConvertBooleanExprToCase(ISqlExpression) BasicSqlOptimizer.IsDateDataType(ISqlExpression, String) BasicSqlOptimizer.IsDateDataOffsetType(ISqlExpression) BasicSqlOptimizer.IsTimeDataType(ISqlExpression) BasicSqlOptimizer.FloorBeforeConvert(SqlFunction) BasicSqlOptimizer.GetAlternativeDelete(SqlDeleteStatement) BasicSqlOptimizer.GetMainTableSource(SelectQuery) BasicSqlOptimizer.IsAggregationFunction(IQueryElement) BasicSqlOptimizer.NeedsEnvelopingForUpdate(SelectQuery) BasicSqlOptimizer.GetAlternativeUpdate(SqlUpdateStatement) BasicSqlOptimizer.CorrectUpdateTable(SqlUpdateStatement) BasicSqlOptimizer.CheckAliases(SqlStatement, Int32) BasicSqlOptimizer.Add(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Add<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Add(ISqlExpression, Int32) BasicSqlOptimizer.Inc(ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Sub<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, Int32) BasicSqlOptimizer.Dec(ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Mul<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, Int32) BasicSqlOptimizer.Div(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Div<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Div(ISqlExpression, Int32) BasicSqlOptimizer.OptimizeJoins(SqlStatement) BasicSqlOptimizer.IsParameterDependedQuery(SelectQuery) BasicSqlOptimizer.IsParameterDependent(SqlStatement) BasicSqlOptimizer.FinalizeStatement(SqlStatement, EvaluationContext) BasicSqlOptimizer.OptimizeAggregates(SqlStatement) BasicSqlOptimizer.ConvertSkipTake(MappingSchema, SelectQuery, OptimizationContext, ISqlExpression, ISqlExpression) BasicSqlOptimizer.SeparateDistinctFromPagination(SqlStatement, Func<SelectQuery, Boolean>) BasicSqlOptimizer.ReplaceTakeSkipWithRowNumber(SqlStatement, Boolean, Boolean) BasicSqlOptimizer.ReplaceTakeSkipWithRowNumber<TContext>(TContext, SqlStatement, Func<TContext, SelectQuery, Boolean>, Boolean) BasicSqlOptimizer.ReplaceDistinctOrderByWithRowNumber(SqlStatement, Func<SelectQuery, Boolean>) BasicSqlOptimizer.TryConvertToValue(ISqlExpression, EvaluationContext) BasicSqlOptimizer.IsBooleanParameter(ISqlExpression, Int32, Int32) BasicSqlOptimizer.ConvertFunctionParameters(SqlFunction, Boolean) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class Oracle11SqlOptimizer : BasicSqlOptimizer, ISqlOptimizer Constructors | Improve this Doc View Source Oracle11SqlOptimizer(SqlProviderFlags) Declaration public Oracle11SqlOptimizer(SqlProviderFlags sqlProviderFlags) Parameters Type Name Description SqlProviderFlags sqlProviderFlags Fields | Improve this Doc View Source OracleLikeCharactersToEscape Declaration protected static string[] OracleLikeCharactersToEscape Field Value Type Description System.String [] Properties | Improve this Doc View Source LikeCharactersToEscape Declaration public override string[] LikeCharactersToEscape { get; } Property Value Type Description System.String [] Overrides BasicSqlOptimizer.LikeCharactersToEscape Methods | Improve this Doc View Source ConvertExpressionImpl(ISqlExpression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Declaration public override ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext> visitor) Parameters Type Name Description ISqlExpression expression ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext > visitor Returns Type Description ISqlExpression Overrides BasicSqlOptimizer.ConvertExpressionImpl(ISqlExpression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) | Improve this Doc View Source ConvertFunction(SqlFunction) Declaration protected override ISqlExpression ConvertFunction(SqlFunction func) Parameters Type Name Description SqlFunction func Returns Type Description ISqlExpression Overrides BasicSqlOptimizer.ConvertFunction(SqlFunction) | Improve this Doc View Source ConvertPredicateImpl(ISqlPredicate, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Declaration public override ISqlPredicate ConvertPredicateImpl(ISqlPredicate predicate, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext> visitor) Parameters Type Name Description ISqlPredicate predicate ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext > visitor Returns Type Description ISqlPredicate Overrides BasicSqlOptimizer.ConvertPredicateImpl(ISqlPredicate, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) | Improve this Doc View Source Finalize(SqlStatement) Declaration public override SqlStatement Finalize(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement Overrides BasicSqlOptimizer.Finalize(SqlStatement) | Improve this Doc View Source IsParameterDependedElement(IQueryElement) Declaration public override bool IsParameterDependedElement(IQueryElement element) Parameters Type Name Description IQueryElement element Returns Type Description System.Boolean Overrides BasicSqlOptimizer.IsParameterDependedElement(IQueryElement) | Improve this Doc View Source ReplaceTakeSkipWithRowNum(SqlStatement, Boolean) Replaces Take/Skip by ROWNUM usage. See 'Pagination with ROWNUM' for more information. Declaration protected SqlStatement ReplaceTakeSkipWithRowNum(SqlStatement statement, bool onlySubqueries) Parameters Type Name Description SqlStatement statement Statement which may contain take/skip modifiers. System.Boolean onlySubqueries Indicates when transformation needed only for subqueries. Returns Type Description SqlStatement The same statement or modified statement when optimization has been performed. | Improve this Doc View Source TransformStatement(SqlStatement) Declaration public override SqlStatement TransformStatement(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement Overrides BasicSqlOptimizer.TransformStatement(SqlStatement) Implements ISqlOptimizer Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.Oracle12SqlOptimizer.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.Oracle12SqlOptimizer.html",
    "title": "Class Oracle12SqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Class Oracle12SqlOptimizer Inheritance System.Object BasicSqlOptimizer Oracle11SqlOptimizer Oracle12SqlOptimizer Implements ISqlOptimizer Inherited Members Oracle11SqlOptimizer.Finalize(SqlStatement) Oracle11SqlOptimizer.OracleLikeCharactersToEscape Oracle11SqlOptimizer.LikeCharactersToEscape Oracle11SqlOptimizer.IsParameterDependedElement(IQueryElement) Oracle11SqlOptimizer.ConvertPredicateImpl(ISqlPredicate, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Oracle11SqlOptimizer.ConvertExpressionImpl(ISqlExpression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Oracle11SqlOptimizer.ReplaceTakeSkipWithRowNum(SqlStatement, Boolean) Oracle11SqlOptimizer.ConvertFunction(SqlFunction) BasicSqlOptimizer.SqlProviderFlags BasicSqlOptimizer.CorrectUnionOrderBy(SqlStatement) BasicSqlOptimizer.FixSetOperationNulls(SqlStatement) BasicSqlOptimizer.FixEmptySelect(SqlStatement) BasicSqlOptimizer.HasParameters(ISqlExpression) BasicSqlOptimizer.ConvertCountSubQuery(SelectQuery) BasicSqlOptimizer.CreateSqlValue(Nullable<Object>, SqlBinaryExpression) BasicSqlOptimizer.CreateSqlValue(Nullable<Object>, DbDataType, ISqlExpression[]) BasicSqlOptimizer.OptimizeExpression(ISqlExpression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) BasicSqlOptimizer.OptimizeFunction(SqlFunction, EvaluationContext) BasicSqlOptimizer.OptimizePredicate(ISqlPredicate, EvaluationContext) BasicSqlOptimizer.OptimizeQueryElement(ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>, IQueryElement) BasicSqlOptimizer.OptimizeBinaryExpression(SqlBinaryExpression, EvaluationContext) BasicSqlOptimizer.ConvertElement(MappingSchema, IQueryElement, OptimizationContext) BasicSqlOptimizer.OptimizeElement(MappingSchema, IQueryElement, OptimizationContext, Boolean) BasicSqlOptimizer.CanCompareSearchConditions BasicSqlOptimizer.LikeEscapeCharacter BasicSqlOptimizer.LikeWildcardCharacter BasicSqlOptimizer.LikeHasCharacterSetSupport BasicSqlOptimizer.LikePatternParameterSupport BasicSqlOptimizer.LikeValueParameterSupport BasicSqlOptimizer.LikeIsEscapeSupported BasicSqlOptimizer.StandardLikeCharactersToEscape BasicSqlOptimizer.EscapeLikeCharacters(String, String) BasicSqlOptimizer.GenerateEscapeReplacement(ISqlExpression, ISqlExpression) BasicSqlOptimizer.EscapeLikeCharactersBrackets(String, String[]) BasicSqlOptimizer.EscapeLikeCharacters(ISqlExpression, ISqlExpression) BasicSqlOptimizer.ConvertLikePredicate(MappingSchema, SqlPredicate.Like, EvaluationContext) BasicSqlOptimizer.ConvertSearchStringPredicateViaLike(SqlPredicate.SearchString, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) BasicSqlOptimizer.ConvertSearchStringPredicate(SqlPredicate.SearchString, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) BasicSqlOptimizer.ConvertInListPredicate(MappingSchema, SqlPredicate.InList, EvaluationContext) BasicSqlOptimizer.ConvertCoalesceToBinaryFunc(SqlFunction, String) BasicSqlOptimizer.GetMaxLength(SqlDataType) BasicSqlOptimizer.GetMaxPrecision(SqlDataType) BasicSqlOptimizer.GetMaxScale(SqlDataType) BasicSqlOptimizer.GetMaxDisplaySize(SqlDataType) BasicSqlOptimizer.ConvertConvertion(SqlFunction) BasicSqlOptimizer.AlternativeConvertToBoolean(SqlFunction, Int32) BasicSqlOptimizer.ConvertBooleanExprToCase(ISqlExpression) BasicSqlOptimizer.IsDateDataType(ISqlExpression, String) BasicSqlOptimizer.IsDateDataOffsetType(ISqlExpression) BasicSqlOptimizer.IsTimeDataType(ISqlExpression) BasicSqlOptimizer.FloorBeforeConvert(SqlFunction) BasicSqlOptimizer.GetAlternativeDelete(SqlDeleteStatement) BasicSqlOptimizer.GetMainTableSource(SelectQuery) BasicSqlOptimizer.IsAggregationFunction(IQueryElement) BasicSqlOptimizer.NeedsEnvelopingForUpdate(SelectQuery) BasicSqlOptimizer.GetAlternativeUpdate(SqlUpdateStatement) BasicSqlOptimizer.CorrectUpdateTable(SqlUpdateStatement) BasicSqlOptimizer.CheckAliases(SqlStatement, Int32) BasicSqlOptimizer.Add(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Add<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Add(ISqlExpression, Int32) BasicSqlOptimizer.Inc(ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Sub<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Sub(ISqlExpression, Int32) BasicSqlOptimizer.Dec(ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Mul<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Mul(ISqlExpression, Int32) BasicSqlOptimizer.Div(ISqlExpression, ISqlExpression, Type) BasicSqlOptimizer.Div<T>(ISqlExpression, ISqlExpression) BasicSqlOptimizer.Div(ISqlExpression, Int32) BasicSqlOptimizer.OptimizeJoins(SqlStatement) BasicSqlOptimizer.IsParameterDependedQuery(SelectQuery) BasicSqlOptimizer.IsParameterDependent(SqlStatement) BasicSqlOptimizer.FinalizeStatement(SqlStatement, EvaluationContext) BasicSqlOptimizer.OptimizeAggregates(SqlStatement) BasicSqlOptimizer.ConvertSkipTake(MappingSchema, SelectQuery, OptimizationContext, ISqlExpression, ISqlExpression) BasicSqlOptimizer.SeparateDistinctFromPagination(SqlStatement, Func<SelectQuery, Boolean>) BasicSqlOptimizer.ReplaceTakeSkipWithRowNumber(SqlStatement, Boolean, Boolean) BasicSqlOptimizer.ReplaceTakeSkipWithRowNumber<TContext>(TContext, SqlStatement, Func<TContext, SelectQuery, Boolean>, Boolean) BasicSqlOptimizer.ReplaceDistinctOrderByWithRowNumber(SqlStatement, Func<SelectQuery, Boolean>) BasicSqlOptimizer.TryConvertToValue(ISqlExpression, EvaluationContext) BasicSqlOptimizer.IsBooleanParameter(ISqlExpression, Int32, Int32) BasicSqlOptimizer.ConvertFunctionParameters(SqlFunction, Boolean) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class Oracle12SqlOptimizer : Oracle11SqlOptimizer, ISqlOptimizer Constructors | Improve this Doc View Source Oracle12SqlOptimizer(SqlProviderFlags) Declaration public Oracle12SqlOptimizer(SqlProviderFlags sqlProviderFlags) Parameters Type Name Description SqlProviderFlags sqlProviderFlags Methods | Improve this Doc View Source TransformStatement(SqlStatement) Declaration public override SqlStatement TransformStatement(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement Overrides Oracle11SqlOptimizer.TransformStatement(SqlStatement) Implements ISqlOptimizer Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleDataProvider.html",
    "title": "Class OracleDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class OracleDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < OracleProviderAdapter > OracleDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<OracleProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<OracleProviderAdapter>.Adapter DynamicDataProviderBase<OracleProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<OracleProviderAdapter>.DataReaderType DynamicDataProviderBase<OracleProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<OracleProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<OracleProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<OracleProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<OracleProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<OracleProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<OracleProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<OracleProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<OracleProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<OracleProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<OracleProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleDataProvider : DynamicDataProviderBase<OracleProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source OracleDataProvider(String) Declaration public OracleDataProvider(string name) Parameters Type Name Description System.String name | Improve this Doc View Source OracleDataProvider(String, OracleVersion) Declaration public OracleDataProvider(string name, OracleVersion version) Parameters Type Name Description System.String name OracleVersion version Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions | Improve this Doc View Source Version Declaration public OracleVersion Version { get; } Property Value Type Description OracleVersion Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source ConvertParameterType(Type, DbDataType) Declaration public override Type ConvertParameterType(Type type, DbDataType dataType) Parameters Type Name Description Type type DbDataType dataType Returns Type Description Type Overrides DataProviderBase.ConvertParameterType(Type, DbDataType) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source DisposeCommand(DataConnection) Declaration public override void DisposeCommand(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Overrides DataProviderBase.DisposeCommand(DataConnection) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) Declaration public override void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters, bool withParameters) Parameters Type Name Description DataConnection dataConnection CommandType commandType System.String commandText DataParameter [] parameters System.Boolean withParameters Overrides DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.html",
    "title": "Class OracleMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class OracleMappingSchema Inheritance System.Object MappingSchema OracleMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleMappingSchema : MappingSchema Constructors | Improve this Doc View Source OracleMappingSchema() Declaration public OracleMappingSchema() | Improve this Doc View Source OracleMappingSchema(String) Declaration protected OracleMappingSchema(string configuration) Parameters Type Name Description System.String configuration Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression? TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description System.Nullable < LambdaExpression > Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.ManagedMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.ManagedMappingSchema.html",
    "title": "Class OracleMappingSchema.ManagedMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class OracleMappingSchema.ManagedMappingSchema Inheritance System.Object MappingSchema OracleMappingSchema.ManagedMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class ManagedMappingSchema : MappingSchema Constructors | Improve this Doc View Source ManagedMappingSchema() Declaration public ManagedMappingSchema() | Improve this Doc View Source ManagedMappingSchema(MappingSchema[]) Declaration public ManagedMappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.NativeMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleMappingSchema.NativeMappingSchema.html",
    "title": "Class OracleMappingSchema.NativeMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class OracleMappingSchema.NativeMappingSchema Inheritance System.Object MappingSchema OracleMappingSchema.NativeMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class NativeMappingSchema : MappingSchema Constructors | Improve this Doc View Source NativeMappingSchema() Declaration public NativeMappingSchema() | Improve this Doc View Source NativeMappingSchema(MappingSchema[]) Declaration public NativeMappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.BulkCopyAdapter.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.BulkCopyAdapter.html",
    "title": "Class OracleProviderAdapter.BulkCopyAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class OracleProviderAdapter.BulkCopyAdapter Inheritance System.Object OracleProviderAdapter.BulkCopyAdapter Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class BulkCopyAdapter : object Properties | Improve this Doc View Source Create Declaration public Func<IDbConnection, OracleProviderAdapter.OracleBulkCopyOptions, OracleProviderAdapter.OracleBulkCopy> Create { get; } Property Value Type Description Func < IDbConnection , OracleProviderAdapter.OracleBulkCopyOptions , OracleProviderAdapter.OracleBulkCopy > | Improve this Doc View Source CreateColumnMapping Declaration public Func<int, string, OracleProviderAdapter.OracleBulkCopyColumnMapping> CreateColumnMapping { get; } Property Value Type Description Func < System.Int32 , System.String , OracleProviderAdapter.OracleBulkCopyColumnMapping > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.html",
    "title": "Class OracleProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class OracleProviderAdapter Inheritance System.Object OracleProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source ManagedAssemblyName Declaration public const string ManagedAssemblyName = null Field Value Type Description System.String | Improve this Doc View Source ManagedClientNamespace Declaration public const string ManagedClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source ManagedTypesNamespace Declaration public const string ManagedTypesNamespace = null Field Value Type Description System.String | Improve this Doc View Source NativeAssemblyName Declaration public const string NativeAssemblyName = null Field Value Type Description System.String | Improve this Doc View Source NativeClientNamespace Declaration public const string NativeClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source NativeProviderFactoryName Declaration public const string NativeProviderFactoryName = null Field Value Type Description System.String | Improve this Doc View Source NativeTypesNamespace Declaration public const string NativeTypesNamespace = null Field Value Type Description System.String Properties | Improve this Doc View Source BulkCopy Declaration public OracleProviderAdapter.BulkCopyAdapter BulkCopy { get; } Property Value Type Description OracleProviderAdapter.BulkCopyAdapter | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source GetDatabaseName Declaration public Func<IDbConnection, string> GetDatabaseName { get; } Property Value Type Description Func < IDbConnection , System.String > | Improve this Doc View Source GetDbType Declaration public Func<IDbDataParameter, OracleProviderAdapter.OracleDbType> GetDbType { get; } Property Value Type Description Func < IDbDataParameter , OracleProviderAdapter.OracleDbType > | Improve this Doc View Source GetHostName Declaration public Func<IDbConnection, string> GetHostName { get; } Property Value Type Description Func < IDbConnection , System.String > | Improve this Doc View Source GetOracleBFileReaderMethod Declaration public string GetOracleBFileReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleBinaryReaderMethod Declaration public string GetOracleBinaryReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleBlobReaderMethod Declaration public string GetOracleBlobReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleClobReaderMethod Declaration public string GetOracleClobReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleDateReaderMethod Declaration public string GetOracleDateReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleDecimalReaderMethod Declaration public string GetOracleDecimalReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleIntervalDSReaderMethod Declaration public string GetOracleIntervalDSReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleIntervalYMReaderMethod Declaration public string GetOracleIntervalYMReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleRefReaderMethod Declaration public string? GetOracleRefReaderMethod { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source GetOracleStringReaderMethod Declaration public string GetOracleStringReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleTimeStampLTZReaderMethod Declaration public string GetOracleTimeStampLTZReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleTimeStampReaderMethod Declaration public string GetOracleTimeStampReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleTimeStampTZReaderMethod Declaration public string GetOracleTimeStampTZReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetOracleXmlTypeReaderMethod Declaration public string GetOracleXmlTypeReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source OracleBFileType Declaration public Type OracleBFileType { get; } Property Value Type Description Type | Improve this Doc View Source OracleBinaryType Declaration public Type OracleBinaryType { get; } Property Value Type Description Type | Improve this Doc View Source OracleBlobType Declaration public Type OracleBlobType { get; } Property Value Type Description Type | Improve this Doc View Source OracleClobType Declaration public Type OracleClobType { get; } Property Value Type Description Type | Improve this Doc View Source OracleDateType Declaration public Type OracleDateType { get; } Property Value Type Description Type | Improve this Doc View Source OracleDecimalType Declaration public Type OracleDecimalType { get; } Property Value Type Description Type | Improve this Doc View Source OracleIntervalDSType Declaration public Type OracleIntervalDSType { get; } Property Value Type Description Type | Improve this Doc View Source OracleIntervalYMType Declaration public Type OracleIntervalYMType { get; } Property Value Type Description Type | Improve this Doc View Source OracleRefCursorType Declaration public Type OracleRefCursorType { get; } Property Value Type Description Type | Improve this Doc View Source OracleRefType Declaration public Type? OracleRefType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source OracleStringType Declaration public Type OracleStringType { get; } Property Value Type Description Type | Improve this Doc View Source OracleTimeStampLTZType Declaration public Type OracleTimeStampLTZType { get; } Property Value Type Description Type | Improve this Doc View Source OracleTimeStampType Declaration public Type OracleTimeStampType { get; } Property Value Type Description Type | Improve this Doc View Source OracleTimeStampTZType Declaration public Type OracleTimeStampTZType { get; } Property Value Type Description Type | Improve this Doc View Source OracleXmlStreamType Declaration public Type OracleXmlStreamType { get; } Property Value Type Description Type | Improve this Doc View Source OracleXmlTypeType Declaration public Type OracleXmlTypeType { get; } Property Value Type Description Type | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source ProviderTypesNamespace Declaration public string ProviderTypesNamespace { get; } Property Value Type Description System.String | Improve this Doc View Source ReadDateTimeOffsetFromOracleTimeStampLTZ Declaration public Expression<Func<IDataReader, int, DateTimeOffset>> ReadDateTimeOffsetFromOracleTimeStampLTZ { get; } Property Value Type Description Expression < Func < IDataReader , System.Int32 , DateTimeOffset >> | Improve this Doc View Source ReadDateTimeOffsetFromOracleTimeStampTZ Declaration public Expression<Func<IDataReader, int, DateTimeOffset>> ReadDateTimeOffsetFromOracleTimeStampTZ { get; } Property Value Type Description Expression < Func < IDataReader , System.Int32 , DateTimeOffset >> | Improve this Doc View Source ReadOracleDecimalToDecimal Declaration public Expression<Func<IDataReader, int, decimal>> ReadOracleDecimalToDecimal { get; } Property Value Type Description Expression < Func < IDataReader , System.Int32 , System.Decimal >> | Improve this Doc View Source ReadOracleDecimalToDecimalAdv Declaration public Expression<Func<IDataReader, int, decimal>> ReadOracleDecimalToDecimalAdv { get; } Property Value Type Description Expression < Func < IDataReader , System.Int32 , System.Decimal >> | Improve this Doc View Source ReadOracleDecimalToInt Declaration public Expression<Func<IDataReader, int, int>> ReadOracleDecimalToInt { get; } Property Value Type Description Expression < Func < IDataReader , System.Int32 , System.Int32 >> | Improve this Doc View Source ReadOracleDecimalToLong Declaration public Expression<Func<IDataReader, int, long>> ReadOracleDecimalToLong { get; } Property Value Type Description Expression < Func < IDataReader , System.Int32 , System.Int64 >> | Improve this Doc View Source SetArrayBindCount Declaration public Action<IDbCommand, int> SetArrayBindCount { get; } Property Value Type Description Action < IDbCommand , System.Int32 > | Improve this Doc View Source SetBindByName Declaration public Action<IDbCommand, bool> SetBindByName { get; } Property Value Type Description Action < IDbCommand , System.Boolean > | Improve this Doc View Source SetDbType Declaration public Action<IDbDataParameter, OracleProviderAdapter.OracleDbType> SetDbType { get; } Property Value Type Description Action < IDbDataParameter , OracleProviderAdapter.OracleDbType > | Improve this Doc View Source SetInitialLONGFetchSize Declaration public Action<IDbCommand, int> SetInitialLONGFetchSize { get; } Property Value Type Description Action < IDbCommand , System.Int32 > | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source CreateConnection(String) Declaration public OracleProviderAdapter.OracleConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description OracleProviderAdapter.OracleConnection | Improve this Doc View Source CreateOracleTimeStampTZ(DateTimeOffset, String) Declaration public object CreateOracleTimeStampTZ(DateTimeOffset dto, string offset) Parameters Type Name Description DateTimeOffset dto System.String offset Returns Type Description System.Object | Improve this Doc View Source GetInstance(String) Declaration public static OracleProviderAdapter GetInstance(string name) Parameters Type Name Description System.String name Returns Type Description OracleProviderAdapter Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleBulkCopy.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleBulkCopy.html",
    "title": "Class OracleProviderAdapter.OracleBulkCopy | Linq To DB (aka linq2db)",
    "keywords": "Class OracleProviderAdapter.OracleBulkCopy Inheritance System.Object TypeWrapper OracleProviderAdapter.OracleBulkCopy Implements IDisposable Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleBulkCopy : TypeWrapper Constructors | Improve this Doc View Source OracleBulkCopy(OracleProviderAdapter.OracleConnection, OracleProviderAdapter.OracleBulkCopyOptions) Declaration public OracleBulkCopy(OracleProviderAdapter.OracleConnection connection, OracleProviderAdapter.OracleBulkCopyOptions options) Parameters Type Name Description OracleProviderAdapter.OracleConnection connection OracleProviderAdapter.OracleBulkCopyOptions options | Improve this Doc View Source OracleBulkCopy(Object, Delegate[]) Declaration public OracleBulkCopy(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source BatchSize Declaration public int BatchSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source BulkCopyTimeout Declaration public int BulkCopyTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ColumnMappings Declaration public OracleProviderAdapter.OracleBulkCopyColumnMappingCollection ColumnMappings { get; } Property Value Type Description OracleProviderAdapter.OracleBulkCopyColumnMappingCollection | Improve this Doc View Source DestinationSchemaName Declaration public string? DestinationSchemaName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DestinationTableName Declaration public string? DestinationTableName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source NotifyAfter Declaration public int NotifyAfter { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source WriteToServer(IDataReader) Declaration public void WriteToServer(IDataReader dataReader) Parameters Type Name Description IDataReader dataReader Events | Improve this Doc View Source OracleRowsCopied Declaration public event OracleProviderAdapter.OracleRowsCopiedEventHandler OracleRowsCopied Event Type Type Description OracleProviderAdapter.OracleRowsCopiedEventHandler Implements IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleBulkCopyColumnMapping.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleBulkCopyColumnMapping.html",
    "title": "Class OracleProviderAdapter.OracleBulkCopyColumnMapping | Linq To DB (aka linq2db)",
    "keywords": "Class OracleProviderAdapter.OracleBulkCopyColumnMapping Inheritance System.Object TypeWrapper OracleProviderAdapter.OracleBulkCopyColumnMapping Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleBulkCopyColumnMapping : TypeWrapper Constructors | Improve this Doc View Source OracleBulkCopyColumnMapping(Int32, String) Declaration public OracleBulkCopyColumnMapping(int source, string destination) Parameters Type Name Description System.Int32 source System.String destination | Improve this Doc View Source OracleBulkCopyColumnMapping(Object) Declaration public OracleBulkCopyColumnMapping(object instance) Parameters Type Name Description System.Object instance Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleBulkCopyColumnMappingCollection.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleBulkCopyColumnMappingCollection.html",
    "title": "Class OracleProviderAdapter.OracleBulkCopyColumnMappingCollection | Linq To DB (aka linq2db)",
    "keywords": "Class OracleProviderAdapter.OracleBulkCopyColumnMappingCollection Inheritance System.Object TypeWrapper OracleProviderAdapter.OracleBulkCopyColumnMappingCollection Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleBulkCopyColumnMappingCollection : TypeWrapper Constructors | Improve this Doc View Source OracleBulkCopyColumnMappingCollection(Object, Delegate[]) Declaration public OracleBulkCopyColumnMappingCollection(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Methods | Improve this Doc View Source Add(OracleProviderAdapter.OracleBulkCopyColumnMapping) Declaration public OracleProviderAdapter.OracleBulkCopyColumnMapping Add(OracleProviderAdapter.OracleBulkCopyColumnMapping bulkCopyColumnMapping) Parameters Type Name Description OracleProviderAdapter.OracleBulkCopyColumnMapping bulkCopyColumnMapping Returns Type Description OracleProviderAdapter.OracleBulkCopyColumnMapping Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleBulkCopyOptions.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleBulkCopyOptions.html",
    "title": "Enum OracleProviderAdapter.OracleBulkCopyOptions | Linq To DB (aka linq2db)",
    "keywords": "Enum OracleProviderAdapter.OracleBulkCopyOptions Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public enum OracleBulkCopyOptions : int Fields Name Description Default UseInternalTransaction Extension Methods Map.DeepCopy<OracleProviderAdapter.OracleBulkCopyOptions>() Sql.IsDistinctFrom<OracleProviderAdapter.OracleBulkCopyOptions>(OracleProviderAdapter.OracleBulkCopyOptions) Sql.IsDistinctFrom<OracleProviderAdapter.OracleBulkCopyOptions>(Nullable<OracleProviderAdapter.OracleBulkCopyOptions>) Sql.IsNotDistinctFrom<OracleProviderAdapter.OracleBulkCopyOptions>(OracleProviderAdapter.OracleBulkCopyOptions) Sql.IsNotDistinctFrom<OracleProviderAdapter.OracleBulkCopyOptions>(Nullable<OracleProviderAdapter.OracleBulkCopyOptions>) SqlExtensions.In<OracleProviderAdapter.OracleBulkCopyOptions>(IEnumerable<OracleProviderAdapter.OracleBulkCopyOptions>) SqlExtensions.In<OracleProviderAdapter.OracleBulkCopyOptions>(IQueryable<OracleProviderAdapter.OracleBulkCopyOptions>) SqlExtensions.In<OracleProviderAdapter.OracleBulkCopyOptions>(OracleProviderAdapter.OracleBulkCopyOptions[]) SqlExtensions.In<OracleProviderAdapter.OracleBulkCopyOptions>(OracleProviderAdapter.OracleBulkCopyOptions, OracleProviderAdapter.OracleBulkCopyOptions) SqlExtensions.In<OracleProviderAdapter.OracleBulkCopyOptions>(OracleProviderAdapter.OracleBulkCopyOptions, OracleProviderAdapter.OracleBulkCopyOptions, OracleProviderAdapter.OracleBulkCopyOptions) SqlExtensions.NotIn<OracleProviderAdapter.OracleBulkCopyOptions>(IEnumerable<OracleProviderAdapter.OracleBulkCopyOptions>) SqlExtensions.NotIn<OracleProviderAdapter.OracleBulkCopyOptions>(IQueryable<OracleProviderAdapter.OracleBulkCopyOptions>) SqlExtensions.NotIn<OracleProviderAdapter.OracleBulkCopyOptions>(OracleProviderAdapter.OracleBulkCopyOptions[]) SqlExtensions.NotIn<OracleProviderAdapter.OracleBulkCopyOptions>(OracleProviderAdapter.OracleBulkCopyOptions, OracleProviderAdapter.OracleBulkCopyOptions) SqlExtensions.NotIn<OracleProviderAdapter.OracleBulkCopyOptions>(OracleProviderAdapter.OracleBulkCopyOptions, OracleProviderAdapter.OracleBulkCopyOptions, OracleProviderAdapter.OracleBulkCopyOptions)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleConnection.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleConnection.html",
    "title": "Class OracleProviderAdapter.OracleConnection | Linq To DB (aka linq2db)",
    "keywords": "Class OracleProviderAdapter.OracleConnection Inheritance System.Object TypeWrapper OracleProviderAdapter.OracleConnection Implements IDisposable Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleConnection : TypeWrapper Constructors | Improve this Doc View Source OracleConnection(Object, Delegate[]) Declaration public OracleConnection(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers | Improve this Doc View Source OracleConnection(String) Declaration public OracleConnection(string connectionString) Parameters Type Name Description System.String connectionString Properties | Improve this Doc View Source DatabaseName Declaration public string DatabaseName { get; } Property Value Type Description System.String | Improve this Doc View Source HostName Declaration public string HostName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateCommand() Declaration public IDbCommand CreateCommand() Returns Type Description IDbCommand | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Open() Declaration public void Open() Implements IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleDbType.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleDbType.html",
    "title": "Enum OracleProviderAdapter.OracleDbType | Linq To DB (aka linq2db)",
    "keywords": "Enum OracleProviderAdapter.OracleDbType Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public enum OracleDbType : int Fields Name Description Array BFile BinaryDouble BinaryFloat Blob Boolean Byte Char Clob Date Decimal Double Int16 Int32 Int64 IntervalDS IntervalYM Json Long LongRaw NChar NClob NVarchar2 Object Raw Ref RefCursor Single TimeStamp TimeStampLTZ TimeStampTZ Varchar2 XmlType Extension Methods Map.DeepCopy<OracleProviderAdapter.OracleDbType>() Sql.IsDistinctFrom<OracleProviderAdapter.OracleDbType>(OracleProviderAdapter.OracleDbType) Sql.IsDistinctFrom<OracleProviderAdapter.OracleDbType>(Nullable<OracleProviderAdapter.OracleDbType>) Sql.IsNotDistinctFrom<OracleProviderAdapter.OracleDbType>(OracleProviderAdapter.OracleDbType) Sql.IsNotDistinctFrom<OracleProviderAdapter.OracleDbType>(Nullable<OracleProviderAdapter.OracleDbType>) SqlExtensions.In<OracleProviderAdapter.OracleDbType>(IEnumerable<OracleProviderAdapter.OracleDbType>) SqlExtensions.In<OracleProviderAdapter.OracleDbType>(IQueryable<OracleProviderAdapter.OracleDbType>) SqlExtensions.In<OracleProviderAdapter.OracleDbType>(OracleProviderAdapter.OracleDbType[]) SqlExtensions.In<OracleProviderAdapter.OracleDbType>(OracleProviderAdapter.OracleDbType, OracleProviderAdapter.OracleDbType) SqlExtensions.In<OracleProviderAdapter.OracleDbType>(OracleProviderAdapter.OracleDbType, OracleProviderAdapter.OracleDbType, OracleProviderAdapter.OracleDbType) SqlExtensions.NotIn<OracleProviderAdapter.OracleDbType>(IEnumerable<OracleProviderAdapter.OracleDbType>) SqlExtensions.NotIn<OracleProviderAdapter.OracleDbType>(IQueryable<OracleProviderAdapter.OracleDbType>) SqlExtensions.NotIn<OracleProviderAdapter.OracleDbType>(OracleProviderAdapter.OracleDbType[]) SqlExtensions.NotIn<OracleProviderAdapter.OracleDbType>(OracleProviderAdapter.OracleDbType, OracleProviderAdapter.OracleDbType) SqlExtensions.NotIn<OracleProviderAdapter.OracleDbType>(OracleProviderAdapter.OracleDbType, OracleProviderAdapter.OracleDbType, OracleProviderAdapter.OracleDbType)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleRowsCopiedEventArgs.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleRowsCopiedEventArgs.html",
    "title": "Class OracleProviderAdapter.OracleRowsCopiedEventArgs | Linq To DB (aka linq2db)",
    "keywords": "Class OracleProviderAdapter.OracleRowsCopiedEventArgs Inheritance System.Object TypeWrapper OracleProviderAdapter.OracleRowsCopiedEventArgs Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public class OracleRowsCopiedEventArgs : TypeWrapper Constructors | Improve this Doc View Source OracleRowsCopiedEventArgs(Object, Delegate[]) Declaration public OracleRowsCopiedEventArgs(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source Abort Declaration public bool Abort { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RowsCopied Declaration public long RowsCopied { get; } Property Value Type Description System.Int64 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleRowsCopiedEventHandler.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleRowsCopiedEventHandler.html",
    "title": "Delegate OracleProviderAdapter.OracleRowsCopiedEventHandler | Linq To DB (aka linq2db)",
    "keywords": "Delegate OracleProviderAdapter.OracleRowsCopiedEventHandler Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public delegate void OracleRowsCopiedEventHandler(object sender, OracleProviderAdapter.OracleRowsCopiedEventArgs e); Parameters Type Name Description System.Object sender OracleProviderAdapter.OracleRowsCopiedEventArgs e Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleTools.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleTools.html",
    "title": "Class OracleTools | Linq To DB (aka linq2db)",
    "keywords": "Class OracleTools Inheritance System.Object OracleTools Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public static class OracleTools : object Fields | Improve this Doc View Source DataReaderGetDecimal Declaration public static Func<IDataReader, int, decimal> DataReaderGetDecimal Field Value Type Description Func < IDataReader , System.Int32 , System.Decimal > | Improve this Doc View Source DefaultVersion Declaration public static OracleVersion DefaultVersion Field Value Type Description OracleVersion | Improve this Doc View Source UseAlternativeBulkCopy Specifies type of multi-row INSERT operation to generate for RowByRow bulk copy mode. Default value: InsertAll . Declaration public static AlternativeBulkCopy UseAlternativeBulkCopy Field Value Type Description AlternativeBulkCopy Properties | Improve this Doc View Source AutoDetectProvider Declaration public static bool AutoDetectProvider { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source DetectedProviderName Declaration public static string DetectedProviderName { get; } Property Value Type Description System.String | Improve this Doc View Source DontEscapeLowercaseIdentifiers Gets or sets flag to tell LinqToDB to quote identifiers, if they contain lowercase letters. Default value: false . This flag is added for backward compatibility and not recommended for use with new applications. Declaration public static bool DontEscapeLowercaseIdentifiers { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CreateDataConnection(IDbConnection, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, string? providerName = null) Parameters Type Name Description IDbConnection connection System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, string? providerName = null) Parameters Type Name Description IDbTransaction transaction System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, Nullable<String>) Declaration public static DataConnection CreateDataConnection(string connectionString, string? providerName = null) Parameters Type Name Description System.String connectionString System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider(Nullable<String>, Nullable<String>, Nullable<OracleVersion>) Declaration public static IDataProvider GetDataProvider(string? providerName = null, string? assemblyName = null, OracleVersion? version = null) Parameters Type Name Description System.Nullable < System.String > providerName System.Nullable < System.String > assemblyName System.Nullable < OracleVersion > version Returns Type Description IDataProvider | Improve this Doc View Source GetXmlData<T>(MappingSchema, IEnumerable<T>) Declaration public static string GetXmlData<T>(MappingSchema mappingSchema, IEnumerable<T> data) Parameters Type Name Description MappingSchema mappingSchema IEnumerable <T> data Returns Type Description System.String Type Parameters Name Description T | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(this DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Int32 maxBatchSize System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source OracleXmlTable<T>(IDataContext, Func<String>) Declaration public static ITable<T> OracleXmlTable<T>(this IDataContext dataContext, Func<string> xmlData) where T : class Parameters Type Name Description IDataContext dataContext Func < System.String > xmlData Returns Type Description ITable <T> Type Parameters Name Description T | Improve this Doc View Source OracleXmlTable<T>(IDataContext, IEnumerable<T>) Declaration public static ITable<T> OracleXmlTable<T>(this IDataContext dataContext, IEnumerable<T> data) where T : class Parameters Type Name Description IDataContext dataContext IEnumerable <T> data Returns Type Description ITable <T> Type Parameters Name Description T | Improve this Doc View Source OracleXmlTable<T>(IDataContext, String) Declaration public static ITable<T> OracleXmlTable<T>(this IDataContext dataContext, string xmlData) where T : class Parameters Type Name Description IDataContext dataContext System.String xmlData Returns Type Description ITable <T> Type Parameters Name Description T | Improve this Doc View Source ProviderSpecificBulkCopy<T>(DataConnection, IEnumerable<T>, Nullable<Int32>, Nullable<Int32>, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied ProviderSpecificBulkCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int? maxBatchSize = null, int? bulkCopyTimeout = null, int notifyAfter = 0, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Nullable < System.Int32 > maxBatchSize System.Nullable < System.Int32 > bulkCopyTimeout System.Int32 notifyAfter System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveOracle(Assembly) Declaration public static void ResolveOracle(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveOracle(String) Declaration public static void ResolveOracle(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.Oracle.OracleVersion.html": {
    "href": "api/LinqToDB.DataProvider.Oracle.OracleVersion.html",
    "title": "Enum OracleVersion | Linq To DB (aka linq2db)",
    "keywords": "Enum OracleVersion Namespace : LinqToDB.DataProvider.Oracle Assembly : linq2db.dll Syntax public enum OracleVersion : int Fields Name Description v11 v12 Extension Methods Map.DeepCopy<OracleVersion>() Sql.IsDistinctFrom<OracleVersion>(OracleVersion) Sql.IsDistinctFrom<OracleVersion>(Nullable<OracleVersion>) Sql.IsNotDistinctFrom<OracleVersion>(OracleVersion) Sql.IsNotDistinctFrom<OracleVersion>(Nullable<OracleVersion>) SqlExtensions.In<OracleVersion>(IEnumerable<OracleVersion>) SqlExtensions.In<OracleVersion>(IQueryable<OracleVersion>) SqlExtensions.In<OracleVersion>(OracleVersion[]) SqlExtensions.In<OracleVersion>(OracleVersion, OracleVersion) SqlExtensions.In<OracleVersion>(OracleVersion, OracleVersion, OracleVersion) SqlExtensions.NotIn<OracleVersion>(IEnumerable<OracleVersion>) SqlExtensions.NotIn<OracleVersion>(IQueryable<OracleVersion>) SqlExtensions.NotIn<OracleVersion>(OracleVersion[]) SqlExtensions.NotIn<OracleVersion>(OracleVersion, OracleVersion) SqlExtensions.NotIn<OracleVersion>(OracleVersion, OracleVersion, OracleVersion)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.html",
    "title": "Namespace LinqToDB.DataProvider.PostgreSQL | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.PostgreSQL Classes NpgsqlProviderAdapter NpgsqlProviderAdapter.NpgsqlBinaryImporter NpgsqlProviderAdapter.NpgsqlConnection PostgreSQL92MappingSchema PostgreSQL93MappingSchema PostgreSQL95MappingSchema PostgreSQLDataProvider PostgreSQLExtensions PostgreSQLMappingSchema PostgreSQLSchemaProvider PostgreSQLSqlBuilder PostgreSQLTools Interfaces IPostgreSQLExtensions Enums NpgsqlProviderAdapter.NpgsqlDbType PostgreSQLIdentifierQuoteMode PostgreSQLVersion"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions.html",
    "title": "Interface IPostgreSQLExtensions | Linq To DB (aka linq2db)",
    "keywords": "Interface IPostgreSQLExtensions Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public interface IPostgreSQLExtensions Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) PostgreSQLExtensions.ConcatArrays<T>(IPostgreSQLExtensions, T[][]) PostgreSQLExtensions.ConcatArrays<T>(IPostgreSQLExtensions, T[], T[][]) PostgreSQLExtensions.ConcatArrays<T>(IPostgreSQLExtensions, T[][], T[]) PostgreSQLExtensions.LessThan<T>(IPostgreSQLExtensions, T[], T[]) PostgreSQLExtensions.LessThanOrEqual<T>(IPostgreSQLExtensions, T[], T[]) PostgreSQLExtensions.GreaterThan<T>(IPostgreSQLExtensions, T[], T[]) PostgreSQLExtensions.GreaterThanOrEqual<T>(IPostgreSQLExtensions, T[], T[]) PostgreSQLExtensions.Contains<T>(IPostgreSQLExtensions, T[], T[]) PostgreSQLExtensions.ContainedBy<T>(IPostgreSQLExtensions, T[], T[]) PostgreSQLExtensions.Overlaps<T>(IPostgreSQLExtensions, T[], T[]) PostgreSQLExtensions.ArrayAppend<T>(IPostgreSQLExtensions, T[], T) PostgreSQLExtensions.ArrayCat<T>(IPostgreSQLExtensions, T[], T[]) PostgreSQLExtensions.ArrayNDims<T>(IPostgreSQLExtensions, T[]) PostgreSQLExtensions.ArrayDims<T>(IPostgreSQLExtensions, T[]) PostgreSQLExtensions.ArrayLength<T>(IPostgreSQLExtensions, T[], Int32) PostgreSQLExtensions.ArrayLower<T>(IPostgreSQLExtensions, T[], Int32) PostgreSQLExtensions.ArrayPosition<T>(IPostgreSQLExtensions, T[], T) PostgreSQLExtensions.ArrayPosition<T>(IPostgreSQLExtensions, T[], T, Int32) PostgreSQLExtensions.ArrayPositions<T>(IPostgreSQLExtensions, T[], T) PostgreSQLExtensions.ArrayPrepend<T>(IPostgreSQLExtensions, T, T[]) PostgreSQLExtensions.ArrayRemove<T>(IPostgreSQLExtensions, T[], T) PostgreSQLExtensions.ArrayReplace<T>(IPostgreSQLExtensions, T[], T, T) PostgreSQLExtensions.ArrayUpper<T>(IPostgreSQLExtensions, T[], Int32) PostgreSQLExtensions.Cardinality<T>(IPostgreSQLExtensions, T[]) PostgreSQLExtensions.ArrayToString<T>(IPostgreSQLExtensions, T[], String) PostgreSQLExtensions.StringToArray(IPostgreSQLExtensions, String, String) PostgreSQLExtensions.StringToArray(IPostgreSQLExtensions, String, String, String) PostgreSQLExtensions.ArrayToString<T>(IPostgreSQLExtensions, T[], String, String) PostgreSQLExtensions.ValueIsEqualToAny<T>(IPostgreSQLExtensions, T, T[]) PostgreSQLExtensions.ValueIsLessThanAny<T>(IPostgreSQLExtensions, T, T[]) PostgreSQLExtensions.ValueIsLessThanOrEqualToAny<T>(IPostgreSQLExtensions, T, T[]) PostgreSQLExtensions.ValueIsGreaterThanAny<T>(IPostgreSQLExtensions, T, T[]) PostgreSQLExtensions.ValueIsGreaterThanOrEqualToAny<T>(IPostgreSQLExtensions, T, T[]) PostgreSQLExtensions.ValueIsNotEqualToAny<T>(IPostgreSQLExtensions, T, T[]) PostgreSQLExtensions.Version(IPostgreSQLExtensions, IDataContext) PostgreSQLExtensions.CurrentCatalog(IPostgreSQLExtensions, IDataContext) PostgreSQLExtensions.CurrentDatabase(IPostgreSQLExtensions, IDataContext) PostgreSQLExtensions.CurrentRole(IPostgreSQLExtensions, IDataContext) PostgreSQLExtensions.CurrentSchema(IPostgreSQLExtensions, IDataContext) PostgreSQLExtensions.CurrentSchemas(IPostgreSQLExtensions, IDataContext) PostgreSQLExtensions.CurrentSchemas(IPostgreSQLExtensions, IDataContext, Boolean) PostgreSQLExtensions.CurrentUser(IPostgreSQLExtensions, IDataContext) PostgreSQLExtensions.SessionUser(IPostgreSQLExtensions, IDataContext)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.html",
    "title": "Class NpgsqlProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class NpgsqlProviderAdapter Inheritance System.Object NpgsqlProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class NpgsqlProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source AssemblyName Declaration public const string AssemblyName = null Field Value Type Description System.String | Improve this Doc View Source ClientNamespace Declaration public const string ClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source TypesNamespace Declaration public const string TypesNamespace = null Field Value Type Description System.String Properties | Improve this Doc View Source BeginBinaryImport Declaration public Func<IDbConnection, string, NpgsqlProviderAdapter.NpgsqlBinaryImporter> BeginBinaryImport { get; } Property Value Type Description Func < IDbConnection , System.String , NpgsqlProviderAdapter.NpgsqlBinaryImporter > | Improve this Doc View Source BeginBinaryImportAsync Declaration public Func<IDbConnection, string, CancellationToken, Task<NpgsqlProviderAdapter.NpgsqlBinaryImporter>>? BeginBinaryImportAsync { get; } Property Value Type Description System.Nullable < Func < IDbConnection , System.String , CancellationToken , Task < NpgsqlProviderAdapter.NpgsqlBinaryImporter >>> | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source GetDateReaderMethod Declaration public string GetDateReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDbType Declaration public Func<IDbDataParameter, NpgsqlProviderAdapter.NpgsqlDbType> GetDbType { get; } Property Value Type Description Func < IDbDataParameter , NpgsqlProviderAdapter.NpgsqlDbType > | Improve this Doc View Source GetIntervalReaderMethod Declaration public string GetIntervalReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetTimeStampReaderMethod Declaration public string GetTimeStampReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source NpgsqlBoxType Declaration public Type NpgsqlBoxType { get; } Property Value Type Description Type | Improve this Doc View Source NpgsqlCircleType Declaration public Type NpgsqlCircleType { get; } Property Value Type Description Type | Improve this Doc View Source NpgsqlDateTimeType Declaration public Type NpgsqlDateTimeType { get; } Property Value Type Description Type | Improve this Doc View Source NpgsqlDateType Declaration public Type NpgsqlDateType { get; } Property Value Type Description Type | Improve this Doc View Source NpgsqlInetType Declaration public Type NpgsqlInetType { get; } Property Value Type Description Type | Improve this Doc View Source NpgsqlLineType Declaration public Type NpgsqlLineType { get; } Property Value Type Description Type | Improve this Doc View Source NpgsqlLSegType Declaration public Type NpgsqlLSegType { get; } Property Value Type Description Type | Improve this Doc View Source NpgsqlPathType Declaration public Type NpgsqlPathType { get; } Property Value Type Description Type | Improve this Doc View Source NpgsqlPointType Declaration public Type NpgsqlPointType { get; } Property Value Type Description Type | Improve this Doc View Source NpgsqlPolygonType Declaration public Type NpgsqlPolygonType { get; } Property Value Type Description Type | Improve this Doc View Source NpgsqlRangeTType Declaration public Type NpgsqlRangeTType { get; } Property Value Type Description Type | Improve this Doc View Source NpgsqlTimeSpanType Declaration public Type NpgsqlTimeSpanType { get; } Property Value Type Description Type | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source ProviderTypesNamespace Declaration public string ProviderTypesNamespace { get; } Property Value Type Description System.String | Improve this Doc View Source SetDbType Declaration public Action<IDbDataParameter, NpgsqlProviderAdapter.NpgsqlDbType> SetDbType { get; } Property Value Type Description Action < IDbDataParameter , NpgsqlProviderAdapter.NpgsqlDbType > | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source ApplyDbTypeFlags(NpgsqlProviderAdapter.NpgsqlDbType, Boolean, Boolean, Boolean, Boolean) Declaration public NpgsqlProviderAdapter.NpgsqlDbType ApplyDbTypeFlags(NpgsqlProviderAdapter.NpgsqlDbType type, bool isArray, bool isRange, bool isMultiRange, bool convertAlways) Parameters Type Name Description NpgsqlProviderAdapter.NpgsqlDbType type System.Boolean isArray System.Boolean isRange System.Boolean isMultiRange System.Boolean convertAlways Returns Type Description NpgsqlProviderAdapter.NpgsqlDbType | Improve this Doc View Source CreateConnection(String) Declaration public NpgsqlProviderAdapter.NpgsqlConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description NpgsqlProviderAdapter.NpgsqlConnection | Improve this Doc View Source GetInstance() Declaration public static NpgsqlProviderAdapter GetInstance() Returns Type Description NpgsqlProviderAdapter | Improve this Doc View Source IsDbTypeSupported(NpgsqlProviderAdapter.NpgsqlDbType) Declaration public bool IsDbTypeSupported(NpgsqlProviderAdapter.NpgsqlDbType type) Parameters Type Name Description NpgsqlProviderAdapter.NpgsqlDbType type Returns Type Description System.Boolean Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.html",
    "title": "Class NpgsqlProviderAdapter.NpgsqlBinaryImporter | Linq To DB (aka linq2db)",
    "keywords": "Class NpgsqlProviderAdapter.NpgsqlBinaryImporter Inheritance System.Object TypeWrapper NpgsqlProviderAdapter.NpgsqlBinaryImporter Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class NpgsqlBinaryImporter : TypeWrapper Constructors | Improve this Doc View Source NpgsqlBinaryImporter(Object, Delegate[]) Declaration public NpgsqlBinaryImporter(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source HasComplete Declaration public bool HasComplete { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasComplete5 Declaration public bool HasComplete5 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsAsync Declaration public bool SupportsAsync { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Cancel() Npgsql 3.x provides Cancel method. Npgsql 4.x uses Complete method. https://github.com/npgsql/npgsql/issues/1646 . Declaration public void Cancel() | Improve this Doc View Source Complete() Declaration public void Complete() | Improve this Doc View Source Complete5() Declaration public ulong Complete5() Returns Type Description System.UInt64 | Improve this Doc View Source CompleteAsync(CancellationToken) Declaration public Task<ulong> CompleteAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.UInt64 > | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source DisposeAsync() Declaration public Task DisposeAsync() Returns Type Description Task | Improve this Doc View Source StartRow() Declaration public void StartRow() | Improve this Doc View Source StartRowAsync(CancellationToken) Declaration public Task StartRowAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source Write<T>(T, NpgsqlProviderAdapter.NpgsqlDbType) Declaration public void Write<T>(T value, NpgsqlProviderAdapter.NpgsqlDbType npgsqlDbType) Parameters Type Name Description T value NpgsqlProviderAdapter.NpgsqlDbType npgsqlDbType Type Parameters Name Description T | Improve this Doc View Source WriteAsync<T>(T, NpgsqlProviderAdapter.NpgsqlDbType, CancellationToken) Declaration public Task WriteAsync<T>(T value, NpgsqlProviderAdapter.NpgsqlDbType npgsqlDbType, CancellationToken cancellationToken) Parameters Type Name Description T value NpgsqlProviderAdapter.NpgsqlDbType npgsqlDbType CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description T Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection.html",
    "title": "Class NpgsqlProviderAdapter.NpgsqlConnection | Linq To DB (aka linq2db)",
    "keywords": "Class NpgsqlProviderAdapter.NpgsqlConnection Inheritance System.Object TypeWrapper NpgsqlProviderAdapter.NpgsqlConnection Implements IDisposable Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class NpgsqlConnection : TypeWrapper Constructors | Improve this Doc View Source NpgsqlConnection(Object, Delegate[]) Declaration public NpgsqlConnection(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers | Improve this Doc View Source NpgsqlConnection(String) Declaration public NpgsqlConnection(string connectionString) Parameters Type Name Description System.String connectionString Properties | Improve this Doc View Source PostgreSqlVersion Declaration public Version PostgreSqlVersion { get; } Property Value Type Description Version Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Open() Declaration public void Open() Implements IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.html",
    "title": "Enum NpgsqlProviderAdapter.NpgsqlDbType | Linq To DB (aka linq2db)",
    "keywords": "Enum NpgsqlProviderAdapter.NpgsqlDbType Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public enum NpgsqlDbType : int Fields Name Description Abstime Array Bigint BigIntMultirange BigIntRange Bit Boolean Box Bytea Char Cid Cidr Circle Citext Npgsql 3.0.?. Date DateMultirange DateRange Double Geography Npgsql 4.0.0+. Geometry Npgsql 3.1.0+. Hstore Inet Int2Vector Npgsql 3.1.0+. Integer IntegerMultirange IntegerRange InternalChar Interval Json Jsonb JsonPath Line LQuery LSeg LTree LTxtQuery MacAddr MacAddr8 Npgsql 3.2.7+. Money Multirange Name Numeric NumericMultirange NumericRange Oid Oidvector Path PgLsn Point Polygon Range Real Refcursor Regconfig Npgsql 4.0.3+. Regtype Npgsql 3.0.2. Smallint Text Tid Npgsql 3.1.0+. Time Timestamp TimestampMultirange TimestampRange TimestampTz Added as alias to TimestampTZ in npgsql 4.0.0. Don't use it, as it will not work with 3.x. TimestampTZ TimestampTzMultirange TimestampTzRange TimeTz Added as alias to TimeTZ in npgsql 4.0.0. Don't use it, as it will not work with 3.x. TimeTZ TsQuery TsVector Unknown Uuid Varbit Varchar Xid Xid8 Xml Extension Methods Map.DeepCopy<NpgsqlProviderAdapter.NpgsqlDbType>() Sql.IsDistinctFrom<NpgsqlProviderAdapter.NpgsqlDbType>(NpgsqlProviderAdapter.NpgsqlDbType) Sql.IsDistinctFrom<NpgsqlProviderAdapter.NpgsqlDbType>(Nullable<NpgsqlProviderAdapter.NpgsqlDbType>) Sql.IsNotDistinctFrom<NpgsqlProviderAdapter.NpgsqlDbType>(NpgsqlProviderAdapter.NpgsqlDbType) Sql.IsNotDistinctFrom<NpgsqlProviderAdapter.NpgsqlDbType>(Nullable<NpgsqlProviderAdapter.NpgsqlDbType>) SqlExtensions.In<NpgsqlProviderAdapter.NpgsqlDbType>(IEnumerable<NpgsqlProviderAdapter.NpgsqlDbType>) SqlExtensions.In<NpgsqlProviderAdapter.NpgsqlDbType>(IQueryable<NpgsqlProviderAdapter.NpgsqlDbType>) SqlExtensions.In<NpgsqlProviderAdapter.NpgsqlDbType>(NpgsqlProviderAdapter.NpgsqlDbType[]) SqlExtensions.In<NpgsqlProviderAdapter.NpgsqlDbType>(NpgsqlProviderAdapter.NpgsqlDbType, NpgsqlProviderAdapter.NpgsqlDbType) SqlExtensions.In<NpgsqlProviderAdapter.NpgsqlDbType>(NpgsqlProviderAdapter.NpgsqlDbType, NpgsqlProviderAdapter.NpgsqlDbType, NpgsqlProviderAdapter.NpgsqlDbType) SqlExtensions.NotIn<NpgsqlProviderAdapter.NpgsqlDbType>(IEnumerable<NpgsqlProviderAdapter.NpgsqlDbType>) SqlExtensions.NotIn<NpgsqlProviderAdapter.NpgsqlDbType>(IQueryable<NpgsqlProviderAdapter.NpgsqlDbType>) SqlExtensions.NotIn<NpgsqlProviderAdapter.NpgsqlDbType>(NpgsqlProviderAdapter.NpgsqlDbType[]) SqlExtensions.NotIn<NpgsqlProviderAdapter.NpgsqlDbType>(NpgsqlProviderAdapter.NpgsqlDbType, NpgsqlProviderAdapter.NpgsqlDbType) SqlExtensions.NotIn<NpgsqlProviderAdapter.NpgsqlDbType>(NpgsqlProviderAdapter.NpgsqlDbType, NpgsqlProviderAdapter.NpgsqlDbType, NpgsqlProviderAdapter.NpgsqlDbType)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQL92MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQL92MappingSchema.html",
    "title": "Class PostgreSQL92MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQL92MappingSchema Inheritance System.Object MappingSchema PostgreSQL92MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQL92MappingSchema : MappingSchema Constructors | Improve this Doc View Source PostgreSQL92MappingSchema() Declaration public PostgreSQL92MappingSchema() | Improve this Doc View Source PostgreSQL92MappingSchema(MappingSchema[]) Declaration public PostgreSQL92MappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQL93MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQL93MappingSchema.html",
    "title": "Class PostgreSQL93MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQL93MappingSchema Inheritance System.Object MappingSchema PostgreSQL93MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQL93MappingSchema : MappingSchema Constructors | Improve this Doc View Source PostgreSQL93MappingSchema() Declaration public PostgreSQL93MappingSchema() | Improve this Doc View Source PostgreSQL93MappingSchema(MappingSchema[]) Declaration public PostgreSQL93MappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQL95MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQL95MappingSchema.html",
    "title": "Class PostgreSQL95MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQL95MappingSchema Inheritance System.Object MappingSchema PostgreSQL95MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQL95MappingSchema : MappingSchema Constructors | Improve this Doc View Source PostgreSQL95MappingSchema() Declaration public PostgreSQL95MappingSchema() | Improve this Doc View Source PostgreSQL95MappingSchema(MappingSchema[]) Declaration public PostgreSQL95MappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider.html",
    "title": "Class PostgreSQLDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < NpgsqlProviderAdapter > PostgreSQLDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<NpgsqlProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<NpgsqlProviderAdapter>.Adapter DynamicDataProviderBase<NpgsqlProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<NpgsqlProviderAdapter>.DataReaderType DynamicDataProviderBase<NpgsqlProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<NpgsqlProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<NpgsqlProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<NpgsqlProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<NpgsqlProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<NpgsqlProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<NpgsqlProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<NpgsqlProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<NpgsqlProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<NpgsqlProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<NpgsqlProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DbDataType) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQLDataProvider : DynamicDataProviderBase<NpgsqlProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source PostgreSQLDataProvider(PostgreSQLVersion) Declaration public PostgreSQLDataProvider(PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description PostgreSQLVersion version | Improve this Doc View Source PostgreSQLDataProvider(String, PostgreSQLVersion) Declaration public PostgreSQLDataProvider(string name, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description System.String name PostgreSQLVersion version Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions | Improve this Doc View Source Version Declaration public PostgreSQLVersion Version { get; } Property Value Type Description PostgreSQLVersion Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source NormalizeTypeName(Nullable<String>) Declaration protected override string? NormalizeTypeName(string? typeName) Parameters Type Name Description System.Nullable < System.String > typeName Returns Type Description System.Nullable < System.String > Overrides DataProviderBase.NormalizeTypeName(Nullable<String>) | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.html",
    "title": "Class PostgreSQLExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLExtensions Inheritance System.Object PostgreSQLExtensions Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public static class PostgreSQLExtensions : object Methods | Improve this Doc View Source ArrayAggregate<T>(Sql.ISqlExtension, T) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T[]> ArrayAggregate<T>(this Sql.ISqlExtension ext, T expr) Parameters Type Name Description Sql.ISqlExtension ext T expr Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T[]> Type Parameters Name Description T | Improve this Doc View Source ArrayAggregate<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) Declaration public static AnalyticFunctions.IAnalyticFunctionWithoutWindow<T[]> ArrayAggregate<T>(this Sql.ISqlExtension ext, T expr, Sql.AggregateModifier modifier) Parameters Type Name Description Sql.ISqlExtension ext T expr Sql.AggregateModifier modifier Returns Type Description LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow <T[]> Type Parameters Name Description T | Improve this Doc View Source ArrayAggregate<TEntity, TV>(IEnumerable<TEntity>, Func<TEntity, TV>, Sql.AggregateModifier) Declaration public static Sql.IAggregateFunctionNotOrdered<TEntity, TV[]> ArrayAggregate<TEntity, TV>(this IEnumerable<TEntity> source, Func<TEntity, TV> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IEnumerable <TEntity> source Func <TEntity, TV> expr Sql.AggregateModifier modifier Returns Type Description Sql.IAggregateFunctionNotOrdered <TEntity, TV[]> Type Parameters Name Description TEntity TV | Improve this Doc View Source ArrayAggregate<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>) Declaration public static Sql.IAggregateFunctionNotOrdered<TEntity, TV[]> ArrayAggregate<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Returns Type Description Sql.IAggregateFunctionNotOrdered <TEntity, TV[]> Type Parameters Name Description TEntity TV | Improve this Doc View Source ArrayAggregate<TEntity, TV>(IQueryable<TEntity>, Expression<Func<TEntity, TV>>, Sql.AggregateModifier) Declaration public static Sql.IAggregateFunctionNotOrdered<TEntity, TV[]> ArrayAggregate<TEntity, TV>(this IQueryable<TEntity> source, Expression<Func<TEntity, TV>> expr, Sql.AggregateModifier modifier) Parameters Type Name Description IQueryable <TEntity> source Expression < Func <TEntity, TV>> expr Sql.AggregateModifier modifier Returns Type Description Sql.IAggregateFunctionNotOrdered <TEntity, TV[]> Type Parameters Name Description TEntity TV | Improve this Doc View Source ArrayAppend<T>(IPostgreSQLExtensions, T[], T) Declaration public static T[] ArrayAppend<T>(this IPostgreSQLExtensions ext, T[] array, T element) Parameters Type Name Description IPostgreSQLExtensions ext T[] array T element Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ArrayCat<T>(IPostgreSQLExtensions, T[], T[]) Declaration public static T[] ArrayCat<T>(this IPostgreSQLExtensions ext, T[] array1, T[] array2) Parameters Type Name Description IPostgreSQLExtensions ext T[] array1 T[] array2 Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ArrayDims<T>(IPostgreSQLExtensions, T[]) Declaration public static string ArrayDims<T>(this IPostgreSQLExtensions ext, T[] array) Parameters Type Name Description IPostgreSQLExtensions ext T[] array Returns Type Description System.String Type Parameters Name Description T | Improve this Doc View Source ArrayLength<T>(IPostgreSQLExtensions, T[], Int32) Declaration public static int ArrayLength<T>(this IPostgreSQLExtensions ext, T[] array, int dimension) Parameters Type Name Description IPostgreSQLExtensions ext T[] array System.Int32 dimension Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source ArrayLower<T>(IPostgreSQLExtensions, T[], Int32) Declaration public static int ArrayLower<T>(this IPostgreSQLExtensions ext, T[] array, int dimension) Parameters Type Name Description IPostgreSQLExtensions ext T[] array System.Int32 dimension Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source ArrayNDims<T>(IPostgreSQLExtensions, T[]) Declaration public static int ArrayNDims<T>(this IPostgreSQLExtensions ext, T[] array) Parameters Type Name Description IPostgreSQLExtensions ext T[] array Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source ArrayPosition<T>(IPostgreSQLExtensions, T[], T) Declaration public static int ArrayPosition<T>(this IPostgreSQLExtensions ext, T[] array, T element) Parameters Type Name Description IPostgreSQLExtensions ext T[] array T element Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source ArrayPosition<T>(IPostgreSQLExtensions, T[], T, Int32) Declaration public static int ArrayPosition<T>(this IPostgreSQLExtensions ext, T[] array, T element, int start) Parameters Type Name Description IPostgreSQLExtensions ext T[] array T element System.Int32 start Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source ArrayPositions<T>(IPostgreSQLExtensions, T[], T) Declaration public static int[] ArrayPositions<T>(this IPostgreSQLExtensions ext, T[] array, T element) Parameters Type Name Description IPostgreSQLExtensions ext T[] array T element Returns Type Description System.Int32 [] Type Parameters Name Description T | Improve this Doc View Source ArrayPrepend<T>(IPostgreSQLExtensions, T, T[]) Declaration public static T[] ArrayPrepend<T>(this IPostgreSQLExtensions ext, T element, T[] array) Parameters Type Name Description IPostgreSQLExtensions ext T element T[] array Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ArrayRemove<T>(IPostgreSQLExtensions, T[], T) Declaration public static T[] ArrayRemove<T>(this IPostgreSQLExtensions ext, T[] array, T element) Parameters Type Name Description IPostgreSQLExtensions ext T[] array T element Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ArrayReplace<T>(IPostgreSQLExtensions, T[], T, T) Declaration public static T[] ArrayReplace<T>(this IPostgreSQLExtensions ext, T[] array, T oldElement, T newElement) Parameters Type Name Description IPostgreSQLExtensions ext T[] array T oldElement T newElement Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ArrayToString<T>(IPostgreSQLExtensions, T[], String) Declaration public static string ArrayToString<T>(this IPostgreSQLExtensions ext, T[] array, string delimiter) Parameters Type Name Description IPostgreSQLExtensions ext T[] array System.String delimiter Returns Type Description System.String Type Parameters Name Description T | Improve this Doc View Source ArrayToString<T>(IPostgreSQLExtensions, T[], String, String) Declaration public static string ArrayToString<T>(this IPostgreSQLExtensions ext, T[] array, string delimiter, string nullString) Parameters Type Name Description IPostgreSQLExtensions ext T[] array System.String delimiter System.String nullString Returns Type Description System.String Type Parameters Name Description T | Improve this Doc View Source ArrayUpper<T>(IPostgreSQLExtensions, T[], Int32) Declaration public static T[] ArrayUpper<T>(this IPostgreSQLExtensions ext, T[] array, int dimension) Parameters Type Name Description IPostgreSQLExtensions ext T[] array System.Int32 dimension Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source Cardinality<T>(IPostgreSQLExtensions, T[]) Declaration public static int Cardinality<T>(this IPostgreSQLExtensions ext, T[] array) Parameters Type Name Description IPostgreSQLExtensions ext T[] array Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source ConcatArrays<T>(IPostgreSQLExtensions, T[], T[][]) Declaration public static T[] ConcatArrays<T>(this IPostgreSQLExtensions ext, T[] array1, T[][] array2) Parameters Type Name Description IPostgreSQLExtensions ext T[] array1 T[][] array2 Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ConcatArrays<T>(IPostgreSQLExtensions, T[][]) Declaration public static T[] ConcatArrays<T>(this IPostgreSQLExtensions ext, params T[][] arrays) Parameters Type Name Description IPostgreSQLExtensions ext T[][] arrays Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ConcatArrays<T>(IPostgreSQLExtensions, T[][], T[]) Declaration public static T[] ConcatArrays<T>(this IPostgreSQLExtensions ext, T[][] array1, T[] array2) Parameters Type Name Description IPostgreSQLExtensions ext T[][] array1 T[] array2 Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ContainedBy<T>(IPostgreSQLExtensions, T[], T[]) Declaration public static bool ContainedBy<T>(this IPostgreSQLExtensions ext, T[] array1, T[] array2) Parameters Type Name Description IPostgreSQLExtensions ext T[] array1 T[] array2 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Contains<T>(IPostgreSQLExtensions, T[], T[]) Declaration public static bool Contains<T>(this IPostgreSQLExtensions ext, T[] array1, T[] array2) Parameters Type Name Description IPostgreSQLExtensions ext T[] array1 T[] array2 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source CurrentCatalog(IPostgreSQLExtensions, IDataContext) Declaration public static string CurrentCatalog(this IPostgreSQLExtensions ext, IDataContext dc) Parameters Type Name Description IPostgreSQLExtensions ext IDataContext dc Returns Type Description System.String | Improve this Doc View Source CurrentDatabase(IPostgreSQLExtensions, IDataContext) Declaration public static string CurrentDatabase(this IPostgreSQLExtensions ext, IDataContext dc) Parameters Type Name Description IPostgreSQLExtensions ext IDataContext dc Returns Type Description System.String | Improve this Doc View Source CurrentRole(IPostgreSQLExtensions, IDataContext) Declaration public static string CurrentRole(this IPostgreSQLExtensions ext, IDataContext dc) Parameters Type Name Description IPostgreSQLExtensions ext IDataContext dc Returns Type Description System.String | Improve this Doc View Source CurrentSchema(IPostgreSQLExtensions, IDataContext) Declaration public static string CurrentSchema(this IPostgreSQLExtensions ext, IDataContext dc) Parameters Type Name Description IPostgreSQLExtensions ext IDataContext dc Returns Type Description System.String | Improve this Doc View Source CurrentSchemas(IPostgreSQLExtensions, IDataContext) Declaration public static string[] CurrentSchemas(this IPostgreSQLExtensions ext, IDataContext dc) Parameters Type Name Description IPostgreSQLExtensions ext IDataContext dc Returns Type Description System.String [] | Improve this Doc View Source CurrentSchemas(IPostgreSQLExtensions, IDataContext, Boolean) Declaration public static string[] CurrentSchemas(this IPostgreSQLExtensions ext, IDataContext dc, bool includeImplicit) Parameters Type Name Description IPostgreSQLExtensions ext IDataContext dc System.Boolean includeImplicit Returns Type Description System.String [] | Improve this Doc View Source CurrentUser(IPostgreSQLExtensions, IDataContext) Declaration public static string CurrentUser(this IPostgreSQLExtensions ext, IDataContext dc) Parameters Type Name Description IPostgreSQLExtensions ext IDataContext dc Returns Type Description System.String | Improve this Doc View Source GreaterThan<T>(IPostgreSQLExtensions, T[], T[]) Declaration public static bool GreaterThan<T>(this IPostgreSQLExtensions ext, T[] array1, T[] array2) Parameters Type Name Description IPostgreSQLExtensions ext T[] array1 T[] array2 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source GreaterThanOrEqual<T>(IPostgreSQLExtensions, T[], T[]) Declaration public static bool GreaterThanOrEqual<T>(this IPostgreSQLExtensions ext, T[] array1, T[] array2) Parameters Type Name Description IPostgreSQLExtensions ext T[] array1 T[] array2 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source LessThan<T>(IPostgreSQLExtensions, T[], T[]) Declaration public static bool LessThan<T>(this IPostgreSQLExtensions ext, T[] array1, T[] array2) Parameters Type Name Description IPostgreSQLExtensions ext T[] array1 T[] array2 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source LessThanOrEqual<T>(IPostgreSQLExtensions, T[], T[]) Declaration public static bool LessThanOrEqual<T>(this IPostgreSQLExtensions ext, T[] array1, T[] array2) Parameters Type Name Description IPostgreSQLExtensions ext T[] array1 T[] array2 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Overlaps<T>(IPostgreSQLExtensions, T[], T[]) Declaration public static bool Overlaps<T>(this IPostgreSQLExtensions ext, T[] array1, T[] array2) Parameters Type Name Description IPostgreSQLExtensions ext T[] array1 T[] array2 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source PostgreSQL(Sql.ISqlExtension) Declaration public static IPostgreSQLExtensions PostgreSQL(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description IPostgreSQLExtensions | Improve this Doc View Source SessionUser(IPostgreSQLExtensions, IDataContext) Declaration public static string SessionUser(this IPostgreSQLExtensions ext, IDataContext dc) Parameters Type Name Description IPostgreSQLExtensions ext IDataContext dc Returns Type Description System.String | Improve this Doc View Source StringToArray(IPostgreSQLExtensions, String, String) Declaration public static string[] StringToArray(this IPostgreSQLExtensions ext, string str, string delimiter) Parameters Type Name Description IPostgreSQLExtensions ext System.String str System.String delimiter Returns Type Description System.String [] | Improve this Doc View Source StringToArray(IPostgreSQLExtensions, String, String, String) Declaration public static string[] StringToArray(this IPostgreSQLExtensions ext, string str, string delimiter, string nullString) Parameters Type Name Description IPostgreSQLExtensions ext System.String str System.String delimiter System.String nullString Returns Type Description System.String [] | Improve this Doc View Source ValueIsEqualToAny<T>(IPostgreSQLExtensions, T, T[]) Declaration public static bool ValueIsEqualToAny<T>(this IPostgreSQLExtensions ext, T value, T[] array) Parameters Type Name Description IPostgreSQLExtensions ext T value T[] array Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source ValueIsGreaterThanAny<T>(IPostgreSQLExtensions, T, T[]) Declaration public static bool ValueIsGreaterThanAny<T>(this IPostgreSQLExtensions ext, T value, T[] array) Parameters Type Name Description IPostgreSQLExtensions ext T value T[] array Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source ValueIsGreaterThanOrEqualToAny<T>(IPostgreSQLExtensions, T, T[]) Declaration public static bool ValueIsGreaterThanOrEqualToAny<T>(this IPostgreSQLExtensions ext, T value, T[] array) Parameters Type Name Description IPostgreSQLExtensions ext T value T[] array Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source ValueIsLessThanAny<T>(IPostgreSQLExtensions, T, T[]) Declaration public static bool ValueIsLessThanAny<T>(this IPostgreSQLExtensions ext, T value, T[] array) Parameters Type Name Description IPostgreSQLExtensions ext T value T[] array Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source ValueIsLessThanOrEqualToAny<T>(IPostgreSQLExtensions, T, T[]) Declaration public static bool ValueIsLessThanOrEqualToAny<T>(this IPostgreSQLExtensions ext, T value, T[] array) Parameters Type Name Description IPostgreSQLExtensions ext T value T[] array Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source ValueIsNotEqualToAny<T>(IPostgreSQLExtensions, T, T[]) Declaration public static bool ValueIsNotEqualToAny<T>(this IPostgreSQLExtensions ext, T value, T[] array) Parameters Type Name Description IPostgreSQLExtensions ext T value T[] array Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Version(IPostgreSQLExtensions, IDataContext) Declaration public static string Version(this IPostgreSQLExtensions ext, IDataContext dc) Parameters Type Name Description IPostgreSQLExtensions ext IDataContext dc Returns Type Description System.String"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode.html",
    "title": "Enum PostgreSQLIdentifierQuoteMode | Linq To DB (aka linq2db)",
    "keywords": "Enum PostgreSQLIdentifierQuoteMode Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public enum PostgreSQLIdentifierQuoteMode : int Fields Name Description Auto Needed None Quote Extension Methods Map.DeepCopy<PostgreSQLIdentifierQuoteMode>() Sql.IsDistinctFrom<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode) Sql.IsDistinctFrom<PostgreSQLIdentifierQuoteMode>(Nullable<PostgreSQLIdentifierQuoteMode>) Sql.IsNotDistinctFrom<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode) Sql.IsNotDistinctFrom<PostgreSQLIdentifierQuoteMode>(Nullable<PostgreSQLIdentifierQuoteMode>) SqlExtensions.In<PostgreSQLIdentifierQuoteMode>(IEnumerable<PostgreSQLIdentifierQuoteMode>) SqlExtensions.In<PostgreSQLIdentifierQuoteMode>(IQueryable<PostgreSQLIdentifierQuoteMode>) SqlExtensions.In<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode[]) SqlExtensions.In<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode) SqlExtensions.In<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode) SqlExtensions.NotIn<PostgreSQLIdentifierQuoteMode>(IEnumerable<PostgreSQLIdentifierQuoteMode>) SqlExtensions.NotIn<PostgreSQLIdentifierQuoteMode>(IQueryable<PostgreSQLIdentifierQuoteMode>) SqlExtensions.NotIn<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode[]) SqlExtensions.NotIn<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode) SqlExtensions.NotIn<PostgreSQLIdentifierQuoteMode>(PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode, PostgreSQLIdentifierQuoteMode)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLMappingSchema.html",
    "title": "Class PostgreSQLMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLMappingSchema Inheritance System.Object MappingSchema PostgreSQLMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQLMappingSchema : MappingSchema Constructors | Improve this Doc View Source PostgreSQLMappingSchema() Declaration public PostgreSQLMappingSchema() | Improve this Doc View Source PostgreSQLMappingSchema(MappingSchema[]) Declaration public PostgreSQLMappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas | Improve this Doc View Source PostgreSQLMappingSchema(String, MappingSchema[]) Declaration protected PostgreSQLMappingSchema(string configuration, params MappingSchema[] schemas) Parameters Type Name Description System.String configuration MappingSchema [] schemas Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.html",
    "title": "Class PostgreSQLSchemaProvider | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLSchemaProvider Inheritance System.Object SchemaProviderBase PostgreSQLSchemaProvider Implements ISchemaProvider Inherited Members SchemaProviderBase.IncludedSchemas SchemaProviderBase.ExcludedSchemas SchemaProviderBase.IncludedCatalogs SchemaProviderBase.ExcludedCatalogs SchemaProviderBase.GenerateChar1AsString SchemaProviderBase.DataTypesSchema SchemaProviderBase.GetProcedureSchemaExecutesProcedure SchemaProviderBase.BuildSchemaFilter(GetSchemaOptions, String, Action<StringBuilder, String>) SchemaProviderBase.GetSchema(DataConnection, GetSchemaOptions) SchemaProviderBase.ForeignKeyColumnComparison(String) SchemaProviderBase.GetHashSet(Nullable<String>[], IEqualityComparer<Nullable<String>>) SchemaProviderBase.GetProviderSpecificTables(DataConnection, GetSchemaOptions) SchemaProviderBase.GetProviderSpecificProcedures(DataConnection) SchemaProviderBase.LoadProcedureTableSchema(DataConnection, GetSchemaOptions, ProcedureSchema, String, List<TableSchema>) SchemaProviderBase.BuildProcedureParameter(ParameterSchema) SchemaProviderBase.GetDataTypeByProviderDbType(Int32, GetSchemaOptions) SchemaProviderBase.GetProcedureSchema(DataConnection, String, CommandType, DataParameter[], GetSchemaOptions) SchemaProviderBase.GetDataSourceName(DataConnection) SchemaProviderBase.GetDatabaseName(DataConnection) SchemaProviderBase.InitProvider(DataConnection) SchemaProviderBase.GetDbType(GetSchemaOptions, Nullable<String>, DataTypeInfo, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, Nullable<String>, Nullable<String>, Nullable<String>) SchemaProviderBase.ToValidName(String) SchemaProviderBase.ToTypeName(Nullable<Type>, Boolean) SchemaProviderBase.ProcessSchema(DatabaseSchema, GetSchemaOptions) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQLSchemaProvider : SchemaProviderBase, ISchemaProvider Constructors | Improve this Doc View Source PostgreSQLSchemaProvider(PostgreSQLDataProvider) Declaration public PostgreSQLSchemaProvider(PostgreSQLDataProvider provider) Parameters Type Name Description PostgreSQLDataProvider provider Methods | Improve this Doc View Source BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema, String) Declaration protected override string BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema procedure, string commandText) Parameters Type Name Description ProcedureSchema procedure System.String commandText Returns Type Description System.String Overrides SchemaProviderBase.BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema, String) | Improve this Doc View Source GetColumns(DataConnection, GetSchemaOptions) Declaration protected override List<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options Returns Type Description List < ColumnInfo > Overrides SchemaProviderBase.GetColumns(DataConnection, GetSchemaOptions) | Improve this Doc View Source GetDataType(Nullable<String>, GetSchemaOptions) Declaration protected override DataTypeInfo GetDataType(string? typeName, GetSchemaOptions options) Parameters Type Name Description System.Nullable < System.String > typeName GetSchemaOptions options Returns Type Description DataTypeInfo Overrides SchemaProviderBase.GetDataType(Nullable<String>, GetSchemaOptions) | Improve this Doc View Source GetDataType(Nullable<String>, Nullable<String>, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>) Declaration protected override DataType GetDataType(string? dataType, string? columnType, long? length, int? prec, int? scale) Parameters Type Name Description System.Nullable < System.String > dataType System.Nullable < System.String > columnType System.Nullable < System.Int64 > length System.Nullable < System.Int32 > prec System.Nullable < System.Int32 > scale Returns Type Description DataType Overrides SchemaProviderBase.GetDataType(Nullable<String>, Nullable<String>, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>) | Improve this Doc View Source GetDataTypes(DataConnection) Declaration protected override List<DataTypeInfo> GetDataTypes(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description List < DataTypeInfo > Overrides SchemaProviderBase.GetDataTypes(DataConnection) | Improve this Doc View Source GetForeignKeys(DataConnection, IEnumerable<TableSchema>, GetSchemaOptions) Declaration protected override IReadOnlyCollection<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable<TableSchema> tables, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection IEnumerable < TableSchema > tables GetSchemaOptions options Returns Type Description IReadOnlyCollection < ForeignKeyInfo > Overrides SchemaProviderBase.GetForeignKeys(DataConnection, IEnumerable<TableSchema>, GetSchemaOptions) | Improve this Doc View Source GetPrimaryKeys(DataConnection, IEnumerable<TableSchema>, GetSchemaOptions) Declaration protected override IReadOnlyCollection<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable<TableSchema> tables, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection IEnumerable < TableSchema > tables GetSchemaOptions options Returns Type Description IReadOnlyCollection < PrimaryKeyInfo > Overrides SchemaProviderBase.GetPrimaryKeys(DataConnection, IEnumerable<TableSchema>, GetSchemaOptions) | Improve this Doc View Source GetProcedureParameters(DataConnection, IEnumerable<ProcedureInfo>, GetSchemaOptions) Declaration protected override List<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable<ProcedureInfo> procedures, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection IEnumerable < ProcedureInfo > procedures GetSchemaOptions options Returns Type Description List < ProcedureParameterInfo > Overrides SchemaProviderBase.GetProcedureParameters(DataConnection, IEnumerable<ProcedureInfo>, GetSchemaOptions) | Improve this Doc View Source GetProcedureResultColumns(DataTable, GetSchemaOptions) Declaration protected override List<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options) Parameters Type Name Description DataTable resultTable GetSchemaOptions options Returns Type Description List < ColumnSchema > Overrides SchemaProviderBase.GetProcedureResultColumns(DataTable, GetSchemaOptions) | Improve this Doc View Source GetProcedures(DataConnection, GetSchemaOptions) Declaration protected override List<ProcedureInfo>? GetProcedures(DataConnection dataConnection, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options Returns Type Description System.Nullable < List < ProcedureInfo >> Overrides SchemaProviderBase.GetProcedures(DataConnection, GetSchemaOptions) | Improve this Doc View Source GetProviderSpecificType(Nullable<String>) Declaration protected override string? GetProviderSpecificType(string? dataType) Parameters Type Name Description System.Nullable < System.String > dataType Returns Type Description System.Nullable < System.String > Overrides SchemaProviderBase.GetProviderSpecificType(Nullable<String>) | Improve this Doc View Source GetProviderSpecificTypeNamespace() Declaration protected override string GetProviderSpecificTypeNamespace() Returns Type Description System.String Overrides SchemaProviderBase.GetProviderSpecificTypeNamespace() | Improve this Doc View Source GetSystemType(Nullable<String>, Nullable<String>, DataTypeInfo, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, GetSchemaOptions) Declaration protected override Type? GetSystemType(string? dataType, string? columnType, DataTypeInfo dataTypeInfo, long? length, int? precision, int? scale, GetSchemaOptions options) Parameters Type Name Description System.Nullable < System.String > dataType System.Nullable < System.String > columnType DataTypeInfo dataTypeInfo System.Nullable < System.Int64 > length System.Nullable < System.Int32 > precision System.Nullable < System.Int32 > scale GetSchemaOptions options Returns Type Description System.Nullable < Type > Overrides SchemaProviderBase.GetSystemType(Nullable<String>, Nullable<String>, DataTypeInfo, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, GetSchemaOptions) | Improve this Doc View Source GetTables(DataConnection, GetSchemaOptions) Declaration protected override List<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options Returns Type Description List < TableInfo > Overrides SchemaProviderBase.GetTables(DataConnection, GetSchemaOptions) Implements ISchemaProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.html",
    "title": "Class PostgreSQLSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLSqlBuilder Inheritance System.Object BasicSqlBuilder PostgreSQLSqlBuilder Implements ISqlBuilder Inherited Members BasicSqlBuilder.OptimizationContext BasicSqlBuilder.Statement BasicSqlBuilder.MappingSchema BasicSqlBuilder.Indent BasicSqlBuilder.BuildStep BasicSqlBuilder.SqlOptimizer BasicSqlBuilder.SqlProviderFlags BasicSqlBuilder.ValueToSqlConverter BasicSqlBuilder.StringBuilder BasicSqlBuilder.SkipAlias BasicSqlBuilder.IsNestedJoinSupported BasicSqlBuilder.IsNestedJoinParenthesisRequired BasicSqlBuilder.WrapJoinCondition BasicSqlBuilder.CanSkipRootAliases(SqlStatement) BasicSqlBuilder.CommandCount(SqlStatement) BasicSqlBuilder.InlineComma BasicSqlBuilder.Comma BasicSqlBuilder.OpenParens BasicSqlBuilder.ConvertElement<T>(T) BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, OptimizationContext, Int32) BasicSqlBuilder.BuildSetOperation(SetOperation, StringBuilder) BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, OptimizationContext, Int32, Boolean) BasicSqlBuilder.BuildCommand(SqlStatement, Int32) BasicSqlBuilder.BuildSqlBuilder(SelectQuery, Int32, Boolean) BasicSqlBuilder.WithStringBuilder<T>(StringBuilder, Func<T>) BasicSqlBuilder.ParenthesizeJoin(List<SqlJoinedTable>) BasicSqlBuilder.BuildSql() BasicSqlBuilder.BuildDeleteQuery(SqlDeleteStatement) BasicSqlBuilder.BuildDeleteQuery2(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateQuery(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildSelectQuery(SqlSelectStatement) BasicSqlBuilder.BuildCteBody(SelectQuery) BasicSqlBuilder.BuildInsertQuery(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildInsertQuery2(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildMultiInsertQuery(SqlMultiInsertStatement) BasicSqlBuilder.BuildUnknownQuery() BasicSqlBuilder.ConvertTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) BasicSqlBuilder.ConvertInline(String, ConvertType) BasicSqlBuilder.BuildWithClause(SqlWithClause) BasicSqlBuilder.BuildSelectClause(SelectQuery) BasicSqlBuilder.GetSelectedColumns(SelectQuery) BasicSqlBuilder.BuildColumns(SelectQuery) BasicSqlBuilder.SupportsBooleanInColumn BasicSqlBuilder.WrapBooleanExpression(ISqlExpression) BasicSqlBuilder.BuildColumnExpression(SelectQuery, ISqlExpression, Nullable<String>, Boolean) BasicSqlBuilder.WrapColumnExpression(ISqlExpression) BasicSqlBuilder.BuildDeleteClause(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateClause(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTable(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTableName(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateSet(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildEmptyInsert(SqlInsertClause) BasicSqlBuilder.BuildOutputSubclause(SqlStatement, SqlInsertClause) BasicSqlBuilder.BuildOutputSubclause(SqlOutputClause) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, Nullable<String>, Boolean, Boolean) BasicSqlBuilder.BuildInsertOrUpdateQueryAsMerge(SqlInsertOrUpdateStatement, Nullable<String>) BasicSqlBuilder.EndLine BasicSqlBuilder.BuildInsertOrUpdateQueryAsUpdateInsert(SqlInsertOrUpdateStatement) BasicSqlBuilder.BuildTruncateTable(SqlTruncateTableStatement) BasicSqlBuilder.BuildDropTableStatementIfExists(SqlDropTableStatement) BasicSqlBuilder.BuildStartCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildCreateTableNullAttribute(SqlField, DefaultNullable) BasicSqlBuilder.BuildCreateTableIdentityAttribute1(SqlField) BasicSqlBuilder.BuildCreateTableIdentityAttribute2(SqlField) BasicSqlBuilder.BuildCreateTablePrimaryKey(SqlCreateTableStatement, String, IEnumerable<String>) BasicSqlBuilder.BuildFromClause(SqlStatement, SelectQuery) BasicSqlBuilder.BuildPhysicalTable(ISqlTableSource, Nullable<String>, Nullable<String>) BasicSqlBuilder.BuildSqlValuesTable(SqlValuesTable, String, Boolean) BasicSqlBuilder.BuildEmptyValues(SqlValuesTable) BasicSqlBuilder.BuildTableName(SqlTableSource, Boolean, Boolean) BasicSqlBuilder.BuildWhere(SelectQuery) BasicSqlBuilder.BuildWhereClause(SelectQuery) BasicSqlBuilder.BuildGroupByClause(SelectQuery) BasicSqlBuilder.BuildGroupByBody(GroupingType, List<ISqlExpression>) BasicSqlBuilder.BuildHavingClause(SelectQuery) BasicSqlBuilder.BuildOrderByClause(SelectQuery) BasicSqlBuilder.SkipFirst BasicSqlBuilder.SkipFormat BasicSqlBuilder.FirstFormat(SelectQuery) BasicSqlBuilder.OffsetFirst BasicSqlBuilder.TakePercent BasicSqlBuilder.TakeTies BasicSqlBuilder.NeedSkip(ISqlExpression, ISqlExpression) BasicSqlBuilder.NeedTake(ISqlExpression) BasicSqlBuilder.BuildSkipFirst(SelectQuery) BasicSqlBuilder.BuildTakeHints(SelectQuery) BasicSqlBuilder.BuildOffsetLimit(SelectQuery) BasicSqlBuilder.BuildWhereSearchCondition(SelectQuery, SqlSearchCondition) BasicSqlBuilder.BuildSearchCondition(SqlSearchCondition, Boolean) BasicSqlBuilder.BuildSearchCondition(Int32, SqlSearchCondition, Boolean) BasicSqlBuilder.BuildPredicate(ISqlPredicate) BasicSqlBuilder.BuildIsDistinctPredicate(SqlPredicate.IsDistinct) BasicSqlBuilder.BuildIsDistinctPredicateFallback(SqlPredicate.IsDistinct) BasicSqlBuilder.BuildPredicate(Int32, Int32, ISqlPredicate) BasicSqlBuilder.BuildLikePredicate(SqlPredicate.Like) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Nullable<String>, Boolean, Boolean) BasicSqlBuilder.BuildExpression(ISqlExpression) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) BasicSqlBuilder.BuildExpression(Int32, ISqlExpression) BasicSqlBuilder.BuildTypedExpression(SqlDataType, ISqlExpression) BasicSqlBuilder.BuildValue(SqlDataType, Nullable<Object>) BasicSqlBuilder.BuildBinaryExpression(SqlBinaryExpression) BasicSqlBuilder.BuildFunction(SqlFunction) BasicSqlBuilder.BuildDataType(StringBuilder, SqlDataType) BasicSqlBuilder.BuildDataType(SqlDataType, Boolean) BasicSqlBuilder.GetPrecedence(ISqlPredicate) BasicSqlBuilder.BuildTag(SqlStatement) BasicSqlBuilder.BuildSqlComment(StringBuilder, SqlComment) BasicSqlBuilder.AlternativeGetSelectedColumns(SelectQuery, BasicSqlBuilder.ColumnSelector) BasicSqlBuilder.IsDateDataType(ISqlExpression, String) BasicSqlBuilder.IsTimeDataType(ISqlExpression) BasicSqlBuilder.GetSequenceNameAttribute(SqlTable, Boolean) BasicSqlBuilder.GetTableAlias(ISqlTableSource) BasicSqlBuilder.GetTableServerName(SqlTable) BasicSqlBuilder.GetTableDatabaseName(SqlTable) BasicSqlBuilder.GetTablePhysicalName(SqlTable) BasicSqlBuilder.AppendIndent() BasicSqlBuilder.PrintParameterName(StringBuilder, IDbDataParameter) BasicSqlBuilder.GetTypeName(IDbDataParameter) BasicSqlBuilder.GetUdtTypeName(IDbDataParameter) BasicSqlBuilder.PrintParameterType(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameters(StringBuilder, Nullable<IEnumerable<IDbDataParameter>>) BasicSqlBuilder.ApplyQueryHints(String, IReadOnlyCollection<String>) BasicSqlBuilder.GetMaxValueSql(EntityDescriptor, ColumnDescriptor) BasicSqlBuilder.Name BasicSqlBuilder.RemoveAlias(String) BasicSqlBuilder.GetTempAliases(Int32, String) BasicSqlBuilder.SupportsColumnAliasesInSource BasicSqlBuilder.RequiresConstantColumnAliases BasicSqlBuilder.IsValuesSyntaxSupported BasicSqlBuilder.isEmptyValuesSourceSupported BasicSqlBuilder.FakeTable BasicSqlBuilder.FakeTableSchema BasicSqlBuilder.BuildMergeTerminator(SqlMergeStatement) BasicSqlBuilder.BuildMergeOperationUpdate(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationDelete(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationInsert(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationUpdateWithDelete(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationDeleteBySource(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationUpdateBySource(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOn(SqlMergeStatement) BasicSqlBuilder.BuildMergeSourceQuery(SqlTableLikeSource) BasicSqlBuilder.BuildFakeTableName() BasicSqlBuilder.BuildValues(SqlValuesTable, IReadOnlyList<ISqlExpression[]>) BasicSqlBuilder.BuildMergeInto(SqlMergeStatement) Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public class PostgreSQLSqlBuilder : BasicSqlBuilder, ISqlBuilder Constructors | Improve this Doc View Source PostgreSQLSqlBuilder(PostgreSQLDataProvider, MappingSchema, ISqlOptimizer, SqlProviderFlags) Declaration public PostgreSQLSqlBuilder(PostgreSQLDataProvider provider, MappingSchema mappingSchema, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags) Parameters Type Name Description PostgreSQLDataProvider provider MappingSchema mappingSchema ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags | Improve this Doc View Source PostgreSQLSqlBuilder(MappingSchema, ISqlOptimizer, SqlProviderFlags) Declaration public PostgreSQLSqlBuilder(MappingSchema mappingSchema, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags) Parameters Type Name Description MappingSchema mappingSchema ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags Fields | Improve this Doc View Source IdentifierQuoteMode Declaration public static PostgreSQLIdentifierQuoteMode IdentifierQuoteMode Field Value Type Description PostgreSQLIdentifierQuoteMode Properties | Improve this Doc View Source IsRecursiveCteKeywordRequired Declaration protected override bool IsRecursiveCteKeywordRequired { get; } Property Value Type Description System.Boolean Overrides BasicSqlBuilder.IsRecursiveCteKeywordRequired | Improve this Doc View Source SupportsNullInColumn Declaration protected override bool SupportsNullInColumn { get; } Property Value Type Description System.Boolean Overrides BasicSqlBuilder.SupportsNullInColumn Methods | Improve this Doc View Source BuildCreateTableCommand(SqlTable) Declaration protected override void BuildCreateTableCommand(SqlTable table) Parameters Type Name Description SqlTable table Overrides BasicSqlBuilder.BuildCreateTableCommand(SqlTable) | Improve this Doc View Source BuildCreateTableFieldType(SqlField) Declaration protected override void BuildCreateTableFieldType(SqlField field) Parameters Type Name Description SqlField field Overrides BasicSqlBuilder.BuildCreateTableFieldType(SqlField) | Improve this Doc View Source BuildDataTypeFromDataType(SqlDataType, Boolean) Declaration protected override void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable) Parameters Type Name Description SqlDataType type System.Boolean forCreateTable Overrides BasicSqlBuilder.BuildDataTypeFromDataType(SqlDataType, Boolean) | Improve this Doc View Source BuildDropTableStatement(SqlDropTableStatement) Declaration protected override void BuildDropTableStatement(SqlDropTableStatement dropTable) Parameters Type Name Description SqlDropTableStatement dropTable Overrides BasicSqlBuilder.BuildDropTableStatement(SqlDropTableStatement) | Improve this Doc View Source BuildEndCreateTableStatement(SqlCreateTableStatement) Declaration protected override void BuildEndCreateTableStatement(SqlCreateTableStatement createTable) Parameters Type Name Description SqlCreateTableStatement createTable Overrides BasicSqlBuilder.BuildEndCreateTableStatement(SqlCreateTableStatement) | Improve this Doc View Source BuildGetIdentity(SqlInsertClause) Declaration protected override void BuildGetIdentity(SqlInsertClause insertClause) Parameters Type Name Description SqlInsertClause insertClause Overrides BasicSqlBuilder.BuildGetIdentity(SqlInsertClause) | Improve this Doc View Source BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) Declaration protected override void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate) Parameters Type Name Description SqlInsertOrUpdateStatement insertOrUpdate Overrides BasicSqlBuilder.BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) | Improve this Doc View Source BuildJoinType(JoinType, SqlSearchCondition) Declaration protected override bool BuildJoinType(JoinType joinType, SqlSearchCondition condition) Parameters Type Name Description JoinType joinType SqlSearchCondition condition Returns Type Description System.Boolean Overrides BasicSqlBuilder.BuildJoinType(JoinType, SqlSearchCondition) | Improve this Doc View Source BuildMergeStatement(SqlMergeStatement) Declaration protected override void BuildMergeStatement(SqlMergeStatement merge) Parameters Type Name Description SqlMergeStatement merge Overrides BasicSqlBuilder.BuildMergeStatement(SqlMergeStatement) | Improve this Doc View Source BuildReturningSubclause(SqlStatement) Declaration protected override void BuildReturningSubclause(SqlStatement statement) Parameters Type Name Description SqlStatement statement Overrides BasicSqlBuilder.BuildReturningSubclause(SqlStatement) | Improve this Doc View Source BuildTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) Declaration public override StringBuilder BuildTableName(StringBuilder sb, string? server, string? database, string? schema, string table, TableOptions tableOptions) Parameters Type Name Description StringBuilder sb System.Nullable < System.String > server System.Nullable < System.String > database System.Nullable < System.String > schema System.String table TableOptions tableOptions Returns Type Description StringBuilder Overrides BasicSqlBuilder.BuildTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) | Improve this Doc View Source BuildTruncateTableStatement(SqlTruncateTableStatement) Declaration protected override void BuildTruncateTableStatement(SqlTruncateTableStatement truncateTable) Parameters Type Name Description SqlTruncateTableStatement truncateTable Overrides BasicSqlBuilder.BuildTruncateTableStatement(SqlTruncateTableStatement) | Improve this Doc View Source Convert(StringBuilder, String, ConvertType) Declaration public override StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType) Parameters Type Name Description StringBuilder sb System.String value ConvertType convertType Returns Type Description StringBuilder Overrides BasicSqlBuilder.Convert(StringBuilder, String, ConvertType) | Improve this Doc View Source CreateSqlBuilder() Declaration protected override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides BasicSqlBuilder.CreateSqlBuilder() | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration public override ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression Overrides BasicSqlBuilder.GetIdentityExpression(SqlTable) | Improve this Doc View Source GetProviderTypeName(IDbDataParameter) Declaration protected override string? GetProviderTypeName(IDbDataParameter parameter) Parameters Type Name Description IDbDataParameter parameter Returns Type Description System.Nullable < System.String > Overrides BasicSqlBuilder.GetProviderTypeName(IDbDataParameter) | Improve this Doc View Source GetReserveSequenceValuesSql(Int32, String) Declaration public override string GetReserveSequenceValuesSql(int count, string sequenceName) Parameters Type Name Description System.Int32 count System.String sequenceName Returns Type Description System.String Overrides BasicSqlBuilder.GetReserveSequenceValuesSql(Int32, String) | Improve this Doc View Source GetTableSchemaName(SqlTable) Declaration public override string? GetTableSchemaName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.Nullable < System.String > Overrides BasicSqlBuilder.GetTableSchemaName(SqlTable) | Improve this Doc View Source IsReserved(String) Declaration protected sealed override bool IsReserved(string word) Parameters Type Name Description System.String word Returns Type Description System.Boolean Overrides BasicSqlBuilder.IsReserved(String) | Improve this Doc View Source IsSqlValuesTableValueTypeRequired(SqlValuesTable, IReadOnlyList<ISqlExpression[]>, Int32, Int32) Declaration protected override bool IsSqlValuesTableValueTypeRequired(SqlValuesTable source, IReadOnlyList<ISqlExpression[]> rows, int row, int column) Parameters Type Name Description SqlValuesTable source IReadOnlyList < ISqlExpression []> rows System.Int32 row System.Int32 column Returns Type Description System.Boolean Overrides BasicSqlBuilder.IsSqlValuesTableValueTypeRequired(SqlValuesTable, IReadOnlyList<ISqlExpression[]>, Int32, Int32) | Improve this Doc View Source LimitFormat(SelectQuery) Declaration protected override string LimitFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.String Overrides BasicSqlBuilder.LimitFormat(SelectQuery) | Improve this Doc View Source OffsetFormat(SelectQuery) Declaration protected override string OffsetFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.String Overrides BasicSqlBuilder.OffsetFormat(SelectQuery) Implements ISqlBuilder Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.html",
    "title": "Class PostgreSQLTools | Linq To DB (aka linq2db)",
    "keywords": "Class PostgreSQLTools Inheritance System.Object PostgreSQLTools Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public static class PostgreSQLTools : object Properties | Improve this Doc View Source AutoDetectProvider Declaration public static bool AutoDetectProvider { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source NormalizeTimestampData Enables normalization of and data, passed to query as parameter or passed to BulkCopy<T>(ITable<T>, IEnumerable<T>) APIs, to comform with Npgsql 6 requerements: Default value: true . Declaration public static bool NormalizeTimestampData { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CreateDataConnection(IDbConnection, PostgreSQLVersion) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description IDbConnection connection PostgreSQLVersion version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, PostgreSQLVersion) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description IDbTransaction transaction PostgreSQLVersion version Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, PostgreSQLVersion) Declaration public static DataConnection CreateDataConnection(string connectionString, PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description System.String connectionString PostgreSQLVersion version Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider(PostgreSQLVersion) Declaration public static IDataProvider GetDataProvider(PostgreSQLVersion version = PostgreSQLVersion.v92) Parameters Type Name Description PostgreSQLVersion version Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Int32 maxBatchSize System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolvePostgreSQL(Assembly) Declaration public static void ResolvePostgreSQL(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolvePostgreSQL(String) Declaration public static void ResolvePostgreSQL(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.html": {
    "href": "api/LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.html",
    "title": "Enum PostgreSQLVersion | Linq To DB (aka linq2db)",
    "keywords": "Enum PostgreSQLVersion Namespace : LinqToDB.DataProvider.PostgreSQL Assembly : linq2db.dll Syntax public enum PostgreSQLVersion : int Fields Name Description v92 v93 v95 Extension Methods Map.DeepCopy<PostgreSQLVersion>() Sql.IsDistinctFrom<PostgreSQLVersion>(PostgreSQLVersion) Sql.IsDistinctFrom<PostgreSQLVersion>(Nullable<PostgreSQLVersion>) Sql.IsNotDistinctFrom<PostgreSQLVersion>(PostgreSQLVersion) Sql.IsNotDistinctFrom<PostgreSQLVersion>(Nullable<PostgreSQLVersion>) SqlExtensions.In<PostgreSQLVersion>(IEnumerable<PostgreSQLVersion>) SqlExtensions.In<PostgreSQLVersion>(IQueryable<PostgreSQLVersion>) SqlExtensions.In<PostgreSQLVersion>(PostgreSQLVersion[]) SqlExtensions.In<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion) SqlExtensions.In<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion, PostgreSQLVersion) SqlExtensions.NotIn<PostgreSQLVersion>(IEnumerable<PostgreSQLVersion>) SqlExtensions.NotIn<PostgreSQLVersion>(IQueryable<PostgreSQLVersion>) SqlExtensions.NotIn<PostgreSQLVersion>(PostgreSQLVersion[]) SqlExtensions.NotIn<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion) SqlExtensions.NotIn<PostgreSQLVersion>(PostgreSQLVersion, PostgreSQLVersion, PostgreSQLVersion)"
  },
  "api/LinqToDB.DataProvider.ReaderInfo.html": {
    "href": "api/LinqToDB.DataProvider.ReaderInfo.html",
    "title": "Struct ReaderInfo | Linq To DB (aka linq2db)",
    "keywords": "Struct ReaderInfo Implements IEquatable < ReaderInfo > Namespace : LinqToDB.DataProvider Assembly : linq2db.dll Syntax public struct ReaderInfo Properties | Improve this Doc View Source DataReaderType Declaration public Type? DataReaderType { get; set; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source DataTypeName Declaration public string? DataTypeName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source FieldType Declaration public Type? FieldType { get; set; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source ProviderFieldType Declaration public Type? ProviderFieldType { get; set; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source ToType Declaration public Type? ToType { get; set; } Property Value Type Description System.Nullable < Type > Methods | Improve this Doc View Source Equals(ReaderInfo) Declaration public bool Equals(ReaderInfo other) Parameters Type Name Description ReaderInfo other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Implements IEquatable<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsDistinctFrom<T>(T, Nullable<T>) Sql.IsNotDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, Nullable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute.html",
    "title": "Class CalculationViewInputParametersExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class CalculationViewInputParametersExpressionAttribute Inheritance System.Object Sql.TableFunctionAttribute Sql.TableExpressionAttribute CalculationViewInputParametersExpressionAttribute Inherited Members Sql.TableExpressionAttribute.Name Sql.TableExpressionAttribute.Expression Sql.TableFunctionAttribute.Configuration Sql.TableFunctionAttribute.Schema Sql.TableFunctionAttribute.Database Sql.TableFunctionAttribute.Server Sql.TableFunctionAttribute.ArgIndices Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class CalculationViewInputParametersExpressionAttribute : Sql.TableExpressionAttribute Constructors | Improve this Doc View Source CalculationViewInputParametersExpressionAttribute() Declaration public CalculationViewInputParametersExpressionAttribute() Methods | Improve this Doc View Source SetTable<TContext>(TContext, ISqlBuilder, MappingSchema, SqlTable, MethodCallExpression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Declaration public override void SetTable<TContext>(TContext context, ISqlBuilder sqlBuilder, MappingSchema mappingSchema, SqlTable table, MethodCallExpression methodCall, Func<TContext, Expression, ColumnDescriptor, ISqlExpression> converter) Parameters Type Name Description TContext context ISqlBuilder sqlBuilder MappingSchema mappingSchema SqlTable table MethodCallExpression methodCall Func <TContext, Expression , ColumnDescriptor , ISqlExpression > converter Type Parameters Name Description TContext Overrides LinqToDB.Sql.TableExpressionAttribute.SetTable<TContext>(TContext, LinqToDB.SqlProvider.ISqlBuilder, LinqToDB.Mapping.MappingSchema, LinqToDB.SqlQuery.SqlTable, MethodCallExpression, Func<TContext, Expression, LinqToDB.Mapping.ColumnDescriptor, LinqToDB.SqlQuery.ISqlExpression>) Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions.html",
    "title": "Class GetHanaSchemaOptions | Linq To DB (aka linq2db)",
    "keywords": "Class GetHanaSchemaOptions Inheritance System.Object GetSchemaOptions GetHanaSchemaOptions Inherited Members GetSchemaOptions.PreferProviderSpecificTypes GetSchemaOptions.GetTables GetSchemaOptions.GetForeignKeys GetSchemaOptions.GetProcedures GetSchemaOptions.GenerateChar1AsString GetSchemaOptions.DefaultSchema GetSchemaOptions.IncludedSchemas GetSchemaOptions.ExcludedSchemas GetSchemaOptions.IncludedCatalogs GetSchemaOptions.ExcludedCatalogs GetSchemaOptions.StringComparer GetSchemaOptions.LoadProcedure GetSchemaOptions.GetAssociationMemberName GetSchemaOptions.ProcedureLoadingProgress GetSchemaOptions.LoadTable GetSchemaOptions.UseSchemaOnly Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class GetHanaSchemaOptions : GetSchemaOptions Fields | Improve this Doc View Source GetStoredProcedureParameters Declaration public Func<ProcedureSchema, DataParameter[]> GetStoredProcedureParameters Field Value Type Description Func < ProcedureSchema , DataParameter []> | Improve this Doc View Source ThrowExceptionIfCalculationViewsNotAuthorized Declaration public bool ThrowExceptionIfCalculationViewsNotAuthorized Field Value Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.html",
    "title": "Namespace LinqToDB.DataProvider.SapHana | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SapHana Classes CalculationViewInputParametersExpressionAttribute GetHanaSchemaOptions SapHanaDataProvider SapHanaMappingSchema SapHanaMappingSchema.NativeMappingSchema SapHanaMappingSchema.OdbcMappingSchema SapHanaOdbcDataProvider SapHanaProviderAdapter SapHanaProviderAdapter.HanaBulkCopy SapHanaProviderAdapter.HanaBulkCopyColumnMapping SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection SapHanaProviderAdapter.HanaConnection SapHanaProviderAdapter.HanaRowsCopiedEventArgs SapHanaProviderAdapter.HanaTransaction SapHanaTools ViewWithParametersTableSchema Enums SapHanaProviderAdapter.HanaBulkCopyOptions SapHanaProviderAdapter.HanaDbType Delegates SapHanaProviderAdapter.HanaRowsCopiedEventHandler"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaDataProvider.html",
    "title": "Class SapHanaDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < SapHanaProviderAdapter > SapHanaDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<SapHanaProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<SapHanaProviderAdapter>.Adapter DynamicDataProviderBase<SapHanaProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<SapHanaProviderAdapter>.DataReaderType DynamicDataProviderBase<SapHanaProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<SapHanaProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<SapHanaProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<SapHanaProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<SapHanaProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<SapHanaProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<SapHanaProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<SapHanaProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<SapHanaProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<SapHanaProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<SapHanaProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class SapHanaDataProvider : DynamicDataProviderBase<SapHanaProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source SapHanaDataProvider() Declaration public SapHanaDataProvider() | Improve this Doc View Source SapHanaDataProvider(String) Declaration public SapHanaDataProvider(string name) Parameters Type Name Description System.String name | Improve this Doc View Source SapHanaDataProvider(String, MappingSchema) Declaration protected SapHanaDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source ConvertParameterType(Type, DbDataType) Declaration public override Type ConvertParameterType(Type type, DbDataType dataType) Parameters Type Name Description Type type DbDataType dataType Returns Type Description Type Overrides DataProviderBase.ConvertParameterType(Type, DbDataType) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public override bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader System.Int32 idx Returns Type Description System.Nullable < System.Boolean > Overrides DataProviderBase.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.html",
    "title": "Class SapHanaMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaMappingSchema Inheritance System.Object MappingSchema SapHanaMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class SapHanaMappingSchema : MappingSchema Constructors | Improve this Doc View Source SapHanaMappingSchema() Declaration public SapHanaMappingSchema() | Improve this Doc View Source SapHanaMappingSchema(String) Declaration protected SapHanaMappingSchema(string configuration) Parameters Type Name Description System.String configuration Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.NativeMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.NativeMappingSchema.html",
    "title": "Class SapHanaMappingSchema.NativeMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaMappingSchema.NativeMappingSchema Inheritance System.Object MappingSchema SapHanaMappingSchema.NativeMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class NativeMappingSchema : MappingSchema Constructors | Improve this Doc View Source NativeMappingSchema() Declaration public NativeMappingSchema() Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.OdbcMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.OdbcMappingSchema.html",
    "title": "Class SapHanaMappingSchema.OdbcMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaMappingSchema.OdbcMappingSchema Inheritance System.Object MappingSchema SapHanaMappingSchema.OdbcMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class OdbcMappingSchema : MappingSchema Constructors | Improve this Doc View Source OdbcMappingSchema() Declaration public OdbcMappingSchema() Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.html",
    "title": "Class SapHanaOdbcDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaOdbcDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < OdbcProviderAdapter > SapHanaOdbcDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<OdbcProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<OdbcProviderAdapter>.Adapter DynamicDataProviderBase<OdbcProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<OdbcProviderAdapter>.DataReaderType DynamicDataProviderBase<OdbcProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<OdbcProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<OdbcProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<OdbcProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<OdbcProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<OdbcProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) DataProviderBase.BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class SapHanaOdbcDataProvider : DynamicDataProviderBase<OdbcProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source SapHanaOdbcDataProvider() Declaration public SapHanaOdbcDataProvider() | Improve this Doc View Source SapHanaOdbcDataProvider(String, MappingSchema) Declaration protected SapHanaOdbcDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions Methods | Improve this Doc View Source ConvertParameterType(Type, DbDataType) Declaration public override Type ConvertParameterType(Type type, DbDataType dataType) Parameters Type Name Description Type type DbDataType dataType Returns Type Description Type Overrides DataProviderBase.ConvertParameterType(Type, DbDataType) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source ExecuteScope(DataConnection) Declaration public override IDisposable ExecuteScope(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description IDisposable Overrides DataProviderBase.ExecuteScope(DataConnection) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) Declaration public override void InitCommand(DataConnection dataConnection, CommandType commandType, string commandText, DataParameter[] parameters, bool withParameters) Parameters Type Name Description DataConnection dataConnection CommandType commandType System.String commandText DataParameter [] parameters System.Boolean withParameters Overrides DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public override bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader System.Int32 idx Returns Type Description System.Nullable < System.Boolean > Overrides DataProviderBase.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.html",
    "title": "Class SapHanaProviderAdapter.HanaBulkCopy | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaProviderAdapter.HanaBulkCopy Inheritance System.Object TypeWrapper SapHanaProviderAdapter.HanaBulkCopy Implements IDisposable Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class HanaBulkCopy : TypeWrapper Constructors | Improve this Doc View Source HanaBulkCopy(SapHanaProviderAdapter.HanaConnection, SapHanaProviderAdapter.HanaBulkCopyOptions, SapHanaProviderAdapter.HanaTransaction) Declaration public HanaBulkCopy(SapHanaProviderAdapter.HanaConnection connection, SapHanaProviderAdapter.HanaBulkCopyOptions options, SapHanaProviderAdapter.HanaTransaction transaction) Parameters Type Name Description SapHanaProviderAdapter.HanaConnection connection SapHanaProviderAdapter.HanaBulkCopyOptions options SapHanaProviderAdapter.HanaTransaction transaction | Improve this Doc View Source HanaBulkCopy(Object, Delegate[]) Declaration public HanaBulkCopy(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source BatchSize Declaration public int BatchSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source BulkCopyTimeout Declaration public int BulkCopyTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source CanWriteToServerAsync Declaration public bool CanWriteToServerAsync { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ColumnMappings Declaration public SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection ColumnMappings { get; } Property Value Type Description SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection | Improve this Doc View Source DestinationTableName Declaration public string? DestinationTableName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source NotifyAfter Declaration public int NotifyAfter { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source WriteToServer(IDataReader) Declaration public void WriteToServer(IDataReader dataReader) Parameters Type Name Description IDataReader dataReader | Improve this Doc View Source WriteToServerAsync(IDataReader, CancellationToken) Declaration public Task WriteToServerAsync(IDataReader dataReader, CancellationToken cancellationToken) Parameters Type Name Description IDataReader dataReader CancellationToken cancellationToken Returns Type Description Task Events | Improve this Doc View Source HanaRowsCopied Declaration public event SapHanaProviderAdapter.HanaRowsCopiedEventHandler HanaRowsCopied Event Type Type Description SapHanaProviderAdapter.HanaRowsCopiedEventHandler Implements IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMapping.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMapping.html",
    "title": "Class SapHanaProviderAdapter.HanaBulkCopyColumnMapping | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaProviderAdapter.HanaBulkCopyColumnMapping Inheritance System.Object TypeWrapper SapHanaProviderAdapter.HanaBulkCopyColumnMapping Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class HanaBulkCopyColumnMapping : TypeWrapper Constructors | Improve this Doc View Source HanaBulkCopyColumnMapping(Int32, String) Declaration public HanaBulkCopyColumnMapping(int source, string destination) Parameters Type Name Description System.Int32 source System.String destination | Improve this Doc View Source HanaBulkCopyColumnMapping(Object) Declaration public HanaBulkCopyColumnMapping(object instance) Parameters Type Name Description System.Object instance Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection.html",
    "title": "Class SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection Inheritance System.Object TypeWrapper SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class HanaBulkCopyColumnMappingCollection : TypeWrapper Constructors | Improve this Doc View Source HanaBulkCopyColumnMappingCollection(Object, Delegate[]) Declaration public HanaBulkCopyColumnMappingCollection(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Methods | Improve this Doc View Source Add(SapHanaProviderAdapter.HanaBulkCopyColumnMapping) Declaration public SapHanaProviderAdapter.HanaBulkCopyColumnMapping Add(SapHanaProviderAdapter.HanaBulkCopyColumnMapping bulkCopyColumnMapping) Parameters Type Name Description SapHanaProviderAdapter.HanaBulkCopyColumnMapping bulkCopyColumnMapping Returns Type Description SapHanaProviderAdapter.HanaBulkCopyColumnMapping Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions.html",
    "title": "Enum SapHanaProviderAdapter.HanaBulkCopyOptions | Linq To DB (aka linq2db)",
    "keywords": "Enum SapHanaProviderAdapter.HanaBulkCopyOptions Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public enum HanaBulkCopyOptions : int Fields Name Description Default KeepIdentity TableLock UseInternalTransaction Extension Methods Map.DeepCopy<SapHanaProviderAdapter.HanaBulkCopyOptions>() Sql.IsDistinctFrom<SapHanaProviderAdapter.HanaBulkCopyOptions>(SapHanaProviderAdapter.HanaBulkCopyOptions) Sql.IsDistinctFrom<SapHanaProviderAdapter.HanaBulkCopyOptions>(Nullable<SapHanaProviderAdapter.HanaBulkCopyOptions>) Sql.IsNotDistinctFrom<SapHanaProviderAdapter.HanaBulkCopyOptions>(SapHanaProviderAdapter.HanaBulkCopyOptions) Sql.IsNotDistinctFrom<SapHanaProviderAdapter.HanaBulkCopyOptions>(Nullable<SapHanaProviderAdapter.HanaBulkCopyOptions>) SqlExtensions.In<SapHanaProviderAdapter.HanaBulkCopyOptions>(IEnumerable<SapHanaProviderAdapter.HanaBulkCopyOptions>) SqlExtensions.In<SapHanaProviderAdapter.HanaBulkCopyOptions>(IQueryable<SapHanaProviderAdapter.HanaBulkCopyOptions>) SqlExtensions.In<SapHanaProviderAdapter.HanaBulkCopyOptions>(SapHanaProviderAdapter.HanaBulkCopyOptions[]) SqlExtensions.In<SapHanaProviderAdapter.HanaBulkCopyOptions>(SapHanaProviderAdapter.HanaBulkCopyOptions, SapHanaProviderAdapter.HanaBulkCopyOptions) SqlExtensions.In<SapHanaProviderAdapter.HanaBulkCopyOptions>(SapHanaProviderAdapter.HanaBulkCopyOptions, SapHanaProviderAdapter.HanaBulkCopyOptions, SapHanaProviderAdapter.HanaBulkCopyOptions) SqlExtensions.NotIn<SapHanaProviderAdapter.HanaBulkCopyOptions>(IEnumerable<SapHanaProviderAdapter.HanaBulkCopyOptions>) SqlExtensions.NotIn<SapHanaProviderAdapter.HanaBulkCopyOptions>(IQueryable<SapHanaProviderAdapter.HanaBulkCopyOptions>) SqlExtensions.NotIn<SapHanaProviderAdapter.HanaBulkCopyOptions>(SapHanaProviderAdapter.HanaBulkCopyOptions[]) SqlExtensions.NotIn<SapHanaProviderAdapter.HanaBulkCopyOptions>(SapHanaProviderAdapter.HanaBulkCopyOptions, SapHanaProviderAdapter.HanaBulkCopyOptions) SqlExtensions.NotIn<SapHanaProviderAdapter.HanaBulkCopyOptions>(SapHanaProviderAdapter.HanaBulkCopyOptions, SapHanaProviderAdapter.HanaBulkCopyOptions, SapHanaProviderAdapter.HanaBulkCopyOptions)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaConnection.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaConnection.html",
    "title": "Class SapHanaProviderAdapter.HanaConnection | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaProviderAdapter.HanaConnection Inheritance System.Object SapHanaProviderAdapter.HanaConnection Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class HanaConnection : object Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.html",
    "title": "Enum SapHanaProviderAdapter.HanaDbType | Linq To DB (aka linq2db)",
    "keywords": "Enum SapHanaProviderAdapter.HanaDbType Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public enum HanaDbType : int Fields Name Description AlphaNum BigInt Blob Boolean Clob Date Decimal Double Integer NClob NVarChar Real SecondDate ShortText SmallDecimal SmallInt TableType Text Time TimeStamp TinyInt VarBinary VarChar Extension Methods Map.DeepCopy<SapHanaProviderAdapter.HanaDbType>() Sql.IsDistinctFrom<SapHanaProviderAdapter.HanaDbType>(SapHanaProviderAdapter.HanaDbType) Sql.IsDistinctFrom<SapHanaProviderAdapter.HanaDbType>(Nullable<SapHanaProviderAdapter.HanaDbType>) Sql.IsNotDistinctFrom<SapHanaProviderAdapter.HanaDbType>(SapHanaProviderAdapter.HanaDbType) Sql.IsNotDistinctFrom<SapHanaProviderAdapter.HanaDbType>(Nullable<SapHanaProviderAdapter.HanaDbType>) SqlExtensions.In<SapHanaProviderAdapter.HanaDbType>(IEnumerable<SapHanaProviderAdapter.HanaDbType>) SqlExtensions.In<SapHanaProviderAdapter.HanaDbType>(IQueryable<SapHanaProviderAdapter.HanaDbType>) SqlExtensions.In<SapHanaProviderAdapter.HanaDbType>(SapHanaProviderAdapter.HanaDbType[]) SqlExtensions.In<SapHanaProviderAdapter.HanaDbType>(SapHanaProviderAdapter.HanaDbType, SapHanaProviderAdapter.HanaDbType) SqlExtensions.In<SapHanaProviderAdapter.HanaDbType>(SapHanaProviderAdapter.HanaDbType, SapHanaProviderAdapter.HanaDbType, SapHanaProviderAdapter.HanaDbType) SqlExtensions.NotIn<SapHanaProviderAdapter.HanaDbType>(IEnumerable<SapHanaProviderAdapter.HanaDbType>) SqlExtensions.NotIn<SapHanaProviderAdapter.HanaDbType>(IQueryable<SapHanaProviderAdapter.HanaDbType>) SqlExtensions.NotIn<SapHanaProviderAdapter.HanaDbType>(SapHanaProviderAdapter.HanaDbType[]) SqlExtensions.NotIn<SapHanaProviderAdapter.HanaDbType>(SapHanaProviderAdapter.HanaDbType, SapHanaProviderAdapter.HanaDbType) SqlExtensions.NotIn<SapHanaProviderAdapter.HanaDbType>(SapHanaProviderAdapter.HanaDbType, SapHanaProviderAdapter.HanaDbType, SapHanaProviderAdapter.HanaDbType)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventArgs.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventArgs.html",
    "title": "Class SapHanaProviderAdapter.HanaRowsCopiedEventArgs | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaProviderAdapter.HanaRowsCopiedEventArgs Inheritance System.Object TypeWrapper SapHanaProviderAdapter.HanaRowsCopiedEventArgs Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class HanaRowsCopiedEventArgs : TypeWrapper Constructors | Improve this Doc View Source HanaRowsCopiedEventArgs(Object, Delegate[]) Declaration public HanaRowsCopiedEventArgs(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source Abort Declaration public bool Abort { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RowsCopied Declaration public long RowsCopied { get; } Property Value Type Description System.Int64 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventHandler.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventHandler.html",
    "title": "Delegate SapHanaProviderAdapter.HanaRowsCopiedEventHandler | Linq To DB (aka linq2db)",
    "keywords": "Delegate SapHanaProviderAdapter.HanaRowsCopiedEventHandler Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public delegate void HanaRowsCopiedEventHandler(object sender, SapHanaProviderAdapter.HanaRowsCopiedEventArgs e); Parameters Type Name Description System.Object sender SapHanaProviderAdapter.HanaRowsCopiedEventArgs e Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaTransaction.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaTransaction.html",
    "title": "Class SapHanaProviderAdapter.HanaTransaction | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaProviderAdapter.HanaTransaction Inheritance System.Object SapHanaProviderAdapter.HanaTransaction Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class HanaTransaction : object Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.html",
    "title": "Class SapHanaProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaProviderAdapter Inheritance System.Object SapHanaProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class SapHanaProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source AssemblyName Declaration public const string AssemblyName = null Field Value Type Description System.String | Improve this Doc View Source ClientNamespace Declaration public const string ClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source ProviderFactoryName Declaration public const string ProviderFactoryName = null Field Value Type Description System.String Properties | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source CreateBulkCopy Declaration public Func<IDbConnection, SapHanaProviderAdapter.HanaBulkCopyOptions, IDbTransaction?, SapHanaProviderAdapter.HanaBulkCopy> CreateBulkCopy { get; } Property Value Type Description Func < IDbConnection , SapHanaProviderAdapter.HanaBulkCopyOptions , System.Nullable < IDbTransaction >, SapHanaProviderAdapter.HanaBulkCopy > | Improve this Doc View Source CreateBulkCopyColumnMapping Declaration public Func<int, string, SapHanaProviderAdapter.HanaBulkCopyColumnMapping> CreateBulkCopyColumnMapping { get; } Property Value Type Description Func < System.Int32 , System.String , SapHanaProviderAdapter.HanaBulkCopyColumnMapping > | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source SetDbType Declaration public Action<IDbDataParameter, SapHanaProviderAdapter.HanaDbType> SetDbType { get; } Property Value Type Description Action < IDbDataParameter , SapHanaProviderAdapter.HanaDbType > | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SapHana.SapHanaTools.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.SapHanaTools.html",
    "title": "Class SapHanaTools | Linq To DB (aka linq2db)",
    "keywords": "Class SapHanaTools Inheritance System.Object SapHanaTools Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public static class SapHanaTools : object Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source DetectedProviderName Declaration public static string DetectedProviderName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateDataConnection(IDbConnection, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, string? providerName = null) Parameters Type Name Description IDbConnection connection System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, string? providerName = null) Parameters Type Name Description IDbTransaction transaction System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, Nullable<String>) Declaration public static DataConnection CreateDataConnection(string connectionString, string? providerName = null) Parameters Type Name Description System.String connectionString System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider(Nullable<String>, Nullable<String>) Declaration public static IDataProvider GetDataProvider(string? providerName = null, string? assemblyName = null) Parameters Type Name Description System.Nullable < System.String > providerName System.Nullable < System.String > assemblyName Returns Type Description IDataProvider | Improve this Doc View Source ResolveSapHana(Assembly) Declaration public static void ResolveSapHana(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveSapHana(String) Declaration public static void ResolveSapHana(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.SapHana.ViewWithParametersTableSchema.html": {
    "href": "api/LinqToDB.DataProvider.SapHana.ViewWithParametersTableSchema.html",
    "title": "Class ViewWithParametersTableSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ViewWithParametersTableSchema Inheritance System.Object TableSchema ViewWithParametersTableSchema Inherited Members TableSchema.ID TableSchema.CatalogName TableSchema.SchemaName TableSchema.TableName TableSchema.Description TableSchema.IsDefaultSchema TableSchema.IsView TableSchema.IsProcedureResult TableSchema.TypeName TableSchema.IsProviderSpecific TableSchema.Columns TableSchema.ForeignKeys Namespace : LinqToDB.DataProvider.SapHana Assembly : linq2db.dll Syntax public class ViewWithParametersTableSchema : TableSchema Constructors | Improve this Doc View Source ViewWithParametersTableSchema() Declaration public ViewWithParametersTableSchema() Properties | Improve this Doc View Source Parameters Declaration public List<ParameterSchema>? Parameters { get; set; } Property Value Type Description System.Nullable < List < ParameterSchema >> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlCe.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.html",
    "title": "Namespace LinqToDB.DataProvider.SqlCe | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SqlCe Classes SqlCeConfiguration SqlCeDataProvider SqlCeMappingSchema SqlCeProviderAdapter SqlCeProviderAdapter.SqlCeEngine SqlCeTools"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeConfiguration.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeConfiguration.html",
    "title": "Class SqlCeConfiguration | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeConfiguration Inheritance System.Object SqlCeConfiguration Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public static class SqlCeConfiguration : object Fields | Improve this Doc View Source InlineFunctionParameters Enables force inlining of function parameters to support SQL CE 3.0. Default value: false . Declaration public static bool InlineFunctionParameters Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeDataProvider.html",
    "title": "Class SqlCeDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < SqlCeProviderAdapter > SqlCeDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<SqlCeProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<SqlCeProviderAdapter>.Adapter DynamicDataProviderBase<SqlCeProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<SqlCeProviderAdapter>.DataReaderType DynamicDataProviderBase<SqlCeProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<SqlCeProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<SqlCeProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<SqlCeProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<SqlCeProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<SqlCeProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<SqlCeProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<SqlCeProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<SqlCeProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<SqlCeProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<SqlCeProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.ConvertParameterType(Type, DbDataType) Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public class SqlCeDataProvider : DynamicDataProviderBase<SqlCeProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source SqlCeDataProvider() Declaration public SqlCeDataProvider() | Improve this Doc View Source SqlCeDataProvider(String, MappingSchema) Declaration protected SqlCeDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public override bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader System.Int32 idx Returns Type Description System.Nullable < System.Boolean > Overrides DataProviderBase.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeMappingSchema.html",
    "title": "Class SqlCeMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeMappingSchema Inheritance System.Object MappingSchema SqlCeMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public class SqlCeMappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlCeMappingSchema() Declaration public SqlCeMappingSchema() | Improve this Doc View Source SqlCeMappingSchema(String) Declaration protected SqlCeMappingSchema(string configuration) Parameters Type Name Description System.String configuration Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeProviderAdapter.html",
    "title": "Class SqlCeProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeProviderAdapter Inheritance System.Object SqlCeProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public class SqlCeProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source AssemblyName Declaration public const string AssemblyName = null Field Value Type Description System.String | Improve this Doc View Source ClientNamespace Declaration public const string ClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source ProviderFactoryName Declaration public const string ProviderFactoryName = null Field Value Type Description System.String Properties | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source CreateSqlCeEngine Declaration public Func<string, SqlCeProviderAdapter.SqlCeEngine> CreateSqlCeEngine { get; } Property Value Type Description Func < System.String , SqlCeProviderAdapter.SqlCeEngine > | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source GetDbType Declaration public Func<IDbDataParameter, SqlDbType> GetDbType { get; } Property Value Type Description Func < IDbDataParameter , SqlDbType > | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source SetDbType Declaration public Action<IDbDataParameter, SqlDbType> SetDbType { get; } Property Value Type Description Action < IDbDataParameter , SqlDbType > | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source GetInstance() Declaration public static SqlCeProviderAdapter GetInstance() Returns Type Description SqlCeProviderAdapter Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeProviderAdapter.SqlCeEngine.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeProviderAdapter.SqlCeEngine.html",
    "title": "Class SqlCeProviderAdapter.SqlCeEngine | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeProviderAdapter.SqlCeEngine Inheritance System.Object TypeWrapper SqlCeProviderAdapter.SqlCeEngine Implements IDisposable Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public class SqlCeEngine : TypeWrapper Constructors | Improve this Doc View Source SqlCeEngine(Object, Delegate[]) Declaration public SqlCeEngine(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers | Improve this Doc View Source SqlCeEngine(String) Declaration public SqlCeEngine(string connectionString) Parameters Type Name Description System.String connectionString Methods | Improve this Doc View Source CreateDatabase() Declaration public void CreateDatabase() | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlCe.SqlCeTools.html": {
    "href": "api/LinqToDB.DataProvider.SqlCe.SqlCeTools.html",
    "title": "Class SqlCeTools | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCeTools Inheritance System.Object SqlCeTools Namespace : LinqToDB.DataProvider.SqlCe Assembly : linq2db.dll Syntax public static class SqlCeTools : object Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public static void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description System.String databaseName System.Boolean deleteIfExists | Improve this Doc View Source CreateDataConnection(IDbConnection) Declaration public static DataConnection CreateDataConnection(IDbConnection connection) Parameters Type Name Description IDbConnection connection Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction) Parameters Type Name Description IDbTransaction transaction Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String) Declaration public static DataConnection CreateDataConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description DataConnection | Improve this Doc View Source DropDatabase(String) Declaration public static void DropDatabase(string databaseName) Parameters Type Name Description System.String databaseName | Improve this Doc View Source GetDataProvider() Declaration public static IDataProvider GetDataProvider() Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Int32 maxBatchSize System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSqlCe(Assembly) Declaration public static void ResolveSqlCe(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveSqlCe(String) Declaration public static void ResolveSqlCe(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.SQLite.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.html",
    "title": "Namespace LinqToDB.DataProvider.SQLite | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SQLite Classes SQLiteDataProvider SQLiteExtensions SQLiteMappingSchema SQLiteMappingSchema.ClassicMappingSchema SQLiteMappingSchema.MicrosoftMappingSchema SQLiteProviderAdapter SQLiteSqlBuilder SQLiteTools Interfaces ISQLiteExtensions"
  },
  "api/LinqToDB.DataProvider.SQLite.ISQLiteExtensions.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.ISQLiteExtensions.html",
    "title": "Interface ISQLiteExtensions | Linq To DB (aka linq2db)",
    "keywords": "Interface ISQLiteExtensions Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public interface ISQLiteExtensions Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) SQLiteExtensions.Match(ISQLiteExtensions, Nullable<Object>, String) SQLiteExtensions.MatchTable<TEntity>(ISQLiteExtensions, ITable<TEntity>, String) SQLiteExtensions.RowId<TEntity>(ISQLiteExtensions, TEntity) SQLiteExtensions.Rank<TEntity>(ISQLiteExtensions, TEntity) SQLiteExtensions.FTS3Offsets<TEntity>(ISQLiteExtensions, TEntity) SQLiteExtensions.FTS3MatchInfo<TEntity>(ISQLiteExtensions, TEntity) SQLiteExtensions.FTS3MatchInfo<TEntity>(ISQLiteExtensions, TEntity, String) SQLiteExtensions.FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity) SQLiteExtensions.FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity, String) SQLiteExtensions.FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity, String, String) SQLiteExtensions.FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity, String, String, String) SQLiteExtensions.FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity, String, String, String, Int32) SQLiteExtensions.FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity, String, String, String, Int32, Int32) SQLiteExtensions.FTS5bm25<TEntity>(ISQLiteExtensions, TEntity) SQLiteExtensions.FTS5bm25<TEntity>(ISQLiteExtensions, TEntity, Double[]) SQLiteExtensions.FTS5Highlight<TEntity>(ISQLiteExtensions, TEntity, Int32, String, String) SQLiteExtensions.FTS5Snippet<TEntity>(ISQLiteExtensions, TEntity, Int32, String, String, String, Int32)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteDataProvider.html",
    "title": "Class SQLiteDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < SQLiteProviderAdapter > SQLiteDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<SQLiteProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<SQLiteProviderAdapter>.Adapter DynamicDataProviderBase<SQLiteProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<SQLiteProviderAdapter>.DataReaderType DynamicDataProviderBase<SQLiteProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<SQLiteProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<SQLiteProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<SQLiteProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<SQLiteProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<SQLiteProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<SQLiteProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<SQLiteProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<SQLiteProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<SQLiteProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<SQLiteProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.ConvertParameterType(Type, DbDataType) Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class SQLiteDataProvider : DynamicDataProviderBase<SQLiteProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source SQLiteDataProvider(String) Creates the specified SQLite provider based on the provider name. Declaration public SQLiteDataProvider(string name) Parameters Type Name Description System.String name If ProviderName.SQLite is provided, the detection mechanism preferring System.Data.SQLite to Microsoft.Data.Sqlite will be used. | Improve this Doc View Source SQLiteDataProvider(String, MappingSchema) Declaration protected SQLiteDataProvider(string name, MappingSchema mappingSchema) Parameters Type Name Description System.String name MappingSchema mappingSchema Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source ExecuteScope(DataConnection) Declaration public override IDisposable? ExecuteScope(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Nullable < IDisposable > Overrides DataProviderBase.ExecuteScope(DataConnection) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Declaration public override bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader System.Int32 idx Returns Type Description System.Nullable < System.Boolean > Overrides DataProviderBase.IsDBNullAllowed(IDataReader, Int32) | Improve this Doc View Source NormalizeTypeName(Nullable<String>) Declaration protected override string? NormalizeTypeName(string? typeName) Parameters Type Name Description System.Nullable < System.String > typeName Returns Type Description System.Nullable < System.String > Overrides DataProviderBase.NormalizeTypeName(Nullable<String>) | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteExtensions.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteExtensions.html",
    "title": "Class SQLiteExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteExtensions Inheritance System.Object SQLiteExtensions Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public static class SQLiteExtensions : object Methods | Improve this Doc View Source FTS3AutoMerge<TEntity>(DataConnection, ITable<TEntity>, Int32) Executes FTS3/FTS4 'automerge' command for specific table. Example: \"INSERT INTO table(table) VALUES('automerge=segments')\". Declaration public static void FTS3AutoMerge<TEntity>(this DataConnection dc, ITable<TEntity> table, int segments) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. System.Int32 segments Segments command parameter. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS3IntegrityCheck<TEntity>(DataConnection, ITable<TEntity>) Executes FTS3/FTS4 'integrity-check' command for specific table. Example: \"INSERT INTO table(table) VALUES('integrity-check')\". Declaration public static void FTS3IntegrityCheck<TEntity>(this DataConnection dc, ITable<TEntity> table) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS3MatchInfo<TEntity>(ISQLiteExtensions, TEntity) FTS3/4 matchinfo(fts_table) function. Example: \"matchinfo(table)\". Declaration public static byte[] FTS3MatchInfo<TEntity>(this ISQLiteExtensions ext, TEntity entity) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. Returns Type Description System.Byte [] Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS3/4. | Improve this Doc View Source FTS3MatchInfo<TEntity>(ISQLiteExtensions, TEntity, String) FTS3/4 matchinfo(fts_table, format) function. Example: \"matchinfo(table, 'format')\". Declaration public static byte[] FTS3MatchInfo<TEntity>(this ISQLiteExtensions ext, TEntity entity, string format) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. System.String format Format string function parameter. Returns Type Description System.Byte [] Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS3/4. | Improve this Doc View Source FTS3Merge<TEntity>(DataConnection, ITable<TEntity>, Int32, Int32) Executes FTS3/FTS4 'merge' command for specific table. Example: \"INSERT INTO table(table) VALUES('merge=blocks,segments')\". Declaration public static void FTS3Merge<TEntity>(this DataConnection dc, ITable<TEntity> table, int blocks, int segments) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. System.Int32 blocks Blocks command parameter. System.Int32 segments Segments command parameter. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS3Offsets<TEntity>(ISQLiteExtensions, TEntity) FTS3/4 offsets(fts_table) function. Example: \"offsets(table)\". Declaration public static string FTS3Offsets<TEntity>(this ISQLiteExtensions ext, TEntity entity) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. Returns Type Description System.String Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS3/4. | Improve this Doc View Source FTS3Optimize<TEntity>(DataConnection, ITable<TEntity>) Executes FTS3/FTS4 'optimize' command for specific table. Example: \"INSERT INTO table(table) VALUES('optimize')\". Declaration public static void FTS3Optimize<TEntity>(this DataConnection dc, ITable<TEntity> table) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS3Rebuild<TEntity>(DataConnection, ITable<TEntity>) Executes FTS3/FTS4 'rebuild' command for specific table. Example: \"INSERT INTO table(table) VALUES('rebuild')\". Declaration public static void FTS3Rebuild<TEntity>(this DataConnection dc, ITable<TEntity> table) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity) FTS3/4 snippet(fts_table) function. Example: \"snippet(table)\". Declaration public static string FTS3Snippet<TEntity>(this ISQLiteExtensions ext, TEntity entity) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. Returns Type Description System.String Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS3/4. | Improve this Doc View Source FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity, String) FTS3/4 snippet(fts_table, startMatch) function. Example: \"snippet(table, 'startMatch')\". Declaration public static string FTS3Snippet<TEntity>(this ISQLiteExtensions ext, TEntity entity, string startMatch) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. System.String startMatch Start match wrap text. Returns Type Description System.String Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS3/4. | Improve this Doc View Source FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity, String, String) FTS3/4 snippet(fts_table, startMatch, endMatch) function. Example: \"snippet(table, 'startMatch', 'endMatch')\". Declaration public static string FTS3Snippet<TEntity>(this ISQLiteExtensions ext, TEntity entity, string startMatch, string endMatch) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. System.String startMatch Start match wrap text. System.String endMatch End match wrap text. Returns Type Description System.String Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS3/4. | Improve this Doc View Source FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity, String, String, String) FTS3/4 snippet(fts_table, startMatch, endMatch, ellipses) function. Example: \"snippet(table, 'startMatch', 'endMatch', 'ellipses')\". Declaration public static string FTS3Snippet<TEntity>(this ISQLiteExtensions ext, TEntity entity, string startMatch, string endMatch, string ellipses) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. System.String startMatch Start match wrap text. System.String endMatch End match wrap text. System.String ellipses Ellipses text. Returns Type Description System.String Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS3/4. | Improve this Doc View Source FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity, String, String, String, Int32) FTS3/4 snippet(fts_table, startMatch, endMatch, ellipses, columnIndex) function. Example: \"snippet(table, 'startMatch', 'endMatch', 'ellipses', columnIndex)\". Declaration public static string FTS3Snippet<TEntity>(this ISQLiteExtensions ext, TEntity entity, string startMatch, string endMatch, string ellipses, int columnIndex) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. System.String startMatch Start match wrap text. System.String endMatch End match wrap text. System.String ellipses Ellipses text. System.Int32 columnIndex Index of column to extract snippet from. -1 matches all columns. Returns Type Description System.String Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS3/4. | Improve this Doc View Source FTS3Snippet<TEntity>(ISQLiteExtensions, TEntity, String, String, String, Int32, Int32) FTS3/4 snippet(fts_table, startMatch, endMatch, ellipses, columnIndex, tokensNumber) function. Example: \"snippet(table, 'startMatch', 'endMatch', 'ellipses', columnIndex, tokensNumber)\". Declaration public static string FTS3Snippet<TEntity>(this ISQLiteExtensions ext, TEntity entity, string startMatch, string endMatch, string ellipses, int columnIndex, int tokensNumber) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. System.String startMatch Start match wrap text. System.String endMatch End match wrap text. System.String ellipses Ellipses text. System.Int32 columnIndex Index of column to extract snippet from. -1 matches all columns. System.Int32 tokensNumber Manages how many tokens should be returned (check function documentation). Returns Type Description System.String Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS3/4. | Improve this Doc View Source FTS5AutoMerge<TEntity>(DataConnection, ITable<TEntity>, Int32) Executes FTS5 'automerge' command for specific table. Example: \"INSERT INTO table(table, rank) VALUES('automerge', value)\". Declaration public static void FTS5AutoMerge<TEntity>(this DataConnection dc, ITable<TEntity> table, int value) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. System.Int32 value Command parameter. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS5bm25<TEntity>(ISQLiteExtensions, TEntity) FTS5 bm25(fts_table) function. Example: \"bm25(table)\". Declaration public static double FTS5bm25<TEntity>(this ISQLiteExtensions ext, TEntity entity) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. Returns Type Description System.Double Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS5. | Improve this Doc View Source FTS5bm25<TEntity>(ISQLiteExtensions, TEntity, Double[]) FTS5 bm25(fts_table, ...weights) function. Example: \"bm25(table, col1_weight, col2_weight)\". Declaration public static double FTS5bm25<TEntity>(this ISQLiteExtensions ext, TEntity entity, params double[] weights) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. System.Double [] weights Weights for columns (each value appied to corresponding column). Returns Type Description System.Double Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS5. | Improve this Doc View Source FTS5CrisisMerge<TEntity>(DataConnection, ITable<TEntity>, Int32) Executes FTS5 'crisismerge' command for specific table. Example: \"INSERT INTO table(table, rank) VALUES('crisismerge', value)\". Declaration public static void FTS5CrisisMerge<TEntity>(this DataConnection dc, ITable<TEntity> table, int value) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. System.Int32 value Command parameter. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS5Delete<TEntity>(DataConnection, ITable<TEntity>, Int32, TEntity) Executes FTS5 'delete' command for specific table. Example: \"INSERT INTO table(table, rowid, col1, col2) VALUES('delete', rowid, 'col1_value', 'col2_value')\". Declaration public static void FTS5Delete<TEntity>(this DataConnection dc, ITable<TEntity> table, int rowid, TEntity record) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. System.Int32 rowid Record rowid value. TEntity record Current record entity. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS5DeleteAll<TEntity>(DataConnection, ITable<TEntity>) Executes FTS5 'delete-all' command for specific table. Example: \"INSERT INTO table(table) VALUES('delete-all')\". Declaration public static void FTS5DeleteAll<TEntity>(this DataConnection dc, ITable<TEntity> table) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS5Highlight<TEntity>(ISQLiteExtensions, TEntity, Int32, String, String) FTS5 highlight(fts_table, columnIndex, startMatch, endMatch) function. Example: \"highlight(table, columnIndex, 'startMatch', 'endMatch')\". Declaration public static string FTS5Highlight<TEntity>(this ISQLiteExtensions ext, TEntity entity, int columnIndex, string startMatch, string endMatch) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. System.Int32 columnIndex Index of column to extract highlighted text from. System.String startMatch Start match wrap text. System.String endMatch End match wrap text. Returns Type Description System.String Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS5. | Improve this Doc View Source FTS5IntegrityCheck<TEntity>(DataConnection, ITable<TEntity>) Executes FTS5 'integrity-check' command for specific table. Example: \"INSERT INTO table(table) VALUES('integrity-check')\". Declaration public static void FTS5IntegrityCheck<TEntity>(this DataConnection dc, ITable<TEntity> table) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS5Merge<TEntity>(DataConnection, ITable<TEntity>, Int32) Executes FTS5 'merge' command for specific table. Example: \"INSERT INTO table(table, rank) VALUES('merge', value)\". Declaration public static void FTS5Merge<TEntity>(this DataConnection dc, ITable<TEntity> table, int value) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. System.Int32 value Command parameter. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS5Optimize<TEntity>(DataConnection, ITable<TEntity>) Executes FTS5 'optimize' command for specific table. Example: \"INSERT INTO table(table) VALUES('optimize')\". Declaration public static void FTS5Optimize<TEntity>(this DataConnection dc, ITable<TEntity> table) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS5Pgsz<TEntity>(DataConnection, ITable<TEntity>, Int32) Executes FTS5 'pgsz' command for specific table. Example: \"INSERT INTO table(table, rank) VALUES('pgsz', value)\". Declaration public static void FTS5Pgsz<TEntity>(this DataConnection dc, ITable<TEntity> table, int value) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. System.Int32 value Command parameter. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS5Rank<TEntity>(DataConnection, ITable<TEntity>, String) Executes FTS5 'rank' command for specific table. Example: \"INSERT INTO table(table, rank) VALUES('rank', 'function')\". Declaration public static void FTS5Rank<TEntity>(this DataConnection dc, ITable<TEntity> table, string function) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. System.String function Rank function. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS5Rebuild<TEntity>(DataConnection, ITable<TEntity>) Executes FTS5 'rebuild' command for specific table. Example: \"INSERT INTO table(table) VALUES('rebuild')\". Declaration public static void FTS5Rebuild<TEntity>(this DataConnection dc, ITable<TEntity> table) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source FTS5Snippet<TEntity>(ISQLiteExtensions, TEntity, Int32, String, String, String, Int32) FTS5 snippet(fts_table, columnIndex, startMatch, endMatch, ellipses, tokensNumber) function. Example: \"snippet(table, columnIndex, 'startMatch', 'endMatch', 'ellipses', tokensNumber)\". Declaration public static string FTS5Snippet<TEntity>(this ISQLiteExtensions ext, TEntity entity, int columnIndex, string startMatch, string endMatch, string ellipses, int tokensNumber) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Full-text search table. System.Int32 columnIndex Index of column to extract snippet from. System.String startMatch Start match wrap text. System.String endMatch End match wrap text. System.String ellipses Ellipses text. System.Int32 tokensNumber Manages how many tokens should be returned (check function documentation). Returns Type Description System.String Check documentation of SQLite site . Type Parameters Name Description TEntity Full-text search table mapping class. Remarks FTS Support: FTS5. | Improve this Doc View Source FTS5UserMerge<TEntity>(DataConnection, ITable<TEntity>, Int32) Executes FTS5 'usermerge' command for specific table. Example: \"INSERT INTO table(table, rank) VALUES('usermerge', value)\". Declaration public static void FTS5UserMerge<TEntity>(this DataConnection dc, ITable<TEntity> table, int value) where TEntity : class Parameters Type Name Description DataConnection dc DataConnection instance. ITable <TEntity> table FTS table. System.Int32 value Command parameter. Type Parameters Name Description TEntity Table mapping class. | Improve this Doc View Source Match(ISQLiteExtensions, Nullable<Object>, String) Applies full-text search condition using MATCH predicate against whole FTS table or specific column. Examples: \"table MATCH 'search query'\"/\"table.column MATCH 'search query'\". Declaration public static bool Match(this ISQLiteExtensions ext, object? entityOrColumn, string match) Parameters Type Name Description ISQLiteExtensions ext Extension point. System.Nullable < System.Object > entityOrColumn Table or column to perform full-text search against. System.String match Full-text search condition. Returns Type Description System.Boolean Returns true if full-text search found matching records. Remarks FTS Support: FTS3/4, FTS5. | Improve this Doc View Source MatchTable<TEntity>(ISQLiteExtensions, ITable<TEntity>, String) Performs full-text search query against against speficied table and returns search results. Example: \"table('search query')\". Declaration public static IQueryable<TEntity> MatchTable<TEntity>(this ISQLiteExtensions ext, ITable<TEntity> table, string match) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. ITable <TEntity> table Table to perform full-text search against. System.String match Full-text search condition. Returns Type Description IQueryable <TEntity> Returns table, filtered using specified search condition, applied to whole table. Type Parameters Name Description TEntity Queried table mapping class. Remarks FTS Support: FTS5. | Improve this Doc View Source Rank<TEntity>(ISQLiteExtensions, TEntity) Provides access to FTS5 rank hidden column. Example: \"table.rank\". Declaration public static double? Rank<TEntity>(this ISQLiteExtensions ext, TEntity entity) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Table record instance. Returns Type Description System.Nullable < System.Double > Returns rank column value. Type Parameters Name Description TEntity Type of table mapping class. Remarks FTS Support: FTS5. | Improve this Doc View Source RowId<TEntity>(ISQLiteExtensions, TEntity) Provides access to rowid hidden column. Example: \"table.rowid\". Declaration public static int RowId<TEntity>(this ISQLiteExtensions ext, TEntity entity) where TEntity : class Parameters Type Name Description ISQLiteExtensions ext Extension point. TEntity entity Table record instance. Returns Type Description System.Int32 Returns rowid column value. Type Parameters Name Description TEntity Type of table mapping class. | Improve this Doc View Source SQLite(Sql.ISqlExtension) Declaration public static ISQLiteExtensions SQLite(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description ISQLiteExtensions"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.ClassicMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.ClassicMappingSchema.html",
    "title": "Class SQLiteMappingSchema.ClassicMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteMappingSchema.ClassicMappingSchema Inheritance System.Object MappingSchema SQLiteMappingSchema.ClassicMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class ClassicMappingSchema : MappingSchema Constructors | Improve this Doc View Source ClassicMappingSchema() Declaration public ClassicMappingSchema() Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.html",
    "title": "Class SQLiteMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteMappingSchema Inheritance System.Object MappingSchema SQLiteMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class SQLiteMappingSchema : MappingSchema Constructors | Improve this Doc View Source SQLiteMappingSchema() Declaration public SQLiteMappingSchema() | Improve this Doc View Source SQLiteMappingSchema(String) Declaration protected SQLiteMappingSchema(string configuration) Parameters Type Name Description System.String configuration Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.MicrosoftMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteMappingSchema.MicrosoftMappingSchema.html",
    "title": "Class SQLiteMappingSchema.MicrosoftMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteMappingSchema.MicrosoftMappingSchema Inheritance System.Object MappingSchema SQLiteMappingSchema.MicrosoftMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class MicrosoftMappingSchema : MappingSchema Constructors | Improve this Doc View Source MicrosoftMappingSchema() Declaration public MicrosoftMappingSchema() Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteProviderAdapter.html",
    "title": "Class SQLiteProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteProviderAdapter Inheritance System.Object SQLiteProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class SQLiteProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source MicrosoftDataSQLiteAssemblyName Declaration public const string MicrosoftDataSQLiteAssemblyName = null Field Value Type Description System.String | Improve this Doc View Source MicrosoftDataSQLiteClientNamespace Declaration public const string MicrosoftDataSQLiteClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source SystemDataSQLiteAssemblyName Declaration public const string SystemDataSQLiteAssemblyName = null Field Value Type Description System.String | Improve this Doc View Source SystemDataSQLiteClientNamespace Declaration public const string SystemDataSQLiteClientNamespace = null Field Value Type Description System.String Properties | Improve this Doc View Source ClearAllPools Declaration public Action? ClearAllPools { get; } Property Value Type Description System.Nullable < Action > | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source GetInstance(String) Declaration public static SQLiteProviderAdapter GetInstance(string name) Parameters Type Name Description System.String name Returns Type Description SQLiteProviderAdapter Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.html",
    "title": "Class SQLiteSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteSqlBuilder Inheritance System.Object BasicSqlBuilder SQLiteSqlBuilder Implements ISqlBuilder Inherited Members BasicSqlBuilder.OptimizationContext BasicSqlBuilder.Statement BasicSqlBuilder.MappingSchema BasicSqlBuilder.Indent BasicSqlBuilder.BuildStep BasicSqlBuilder.SqlOptimizer BasicSqlBuilder.SqlProviderFlags BasicSqlBuilder.ValueToSqlConverter BasicSqlBuilder.StringBuilder BasicSqlBuilder.SkipAlias BasicSqlBuilder.IsNestedJoinParenthesisRequired BasicSqlBuilder.WrapJoinCondition BasicSqlBuilder.CanSkipRootAliases(SqlStatement) BasicSqlBuilder.InlineComma BasicSqlBuilder.Comma BasicSqlBuilder.OpenParens BasicSqlBuilder.ConvertElement<T>(T) BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, OptimizationContext, Int32) BasicSqlBuilder.BuildSetOperation(SetOperation, StringBuilder) BasicSqlBuilder.BuildSql(Int32, SqlStatement, StringBuilder, OptimizationContext, Int32, Boolean) BasicSqlBuilder.BuildSqlBuilder(SelectQuery, Int32, Boolean) BasicSqlBuilder.WithStringBuilder<T>(StringBuilder, Func<T>) BasicSqlBuilder.ParenthesizeJoin(List<SqlJoinedTable>) BasicSqlBuilder.BuildSql() BasicSqlBuilder.BuildDeleteQuery(SqlDeleteStatement) BasicSqlBuilder.BuildDeleteQuery2(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateQuery(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildSelectQuery(SqlSelectStatement) BasicSqlBuilder.BuildCteBody(SelectQuery) BasicSqlBuilder.BuildInsertQuery(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildInsertQuery2(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildMultiInsertQuery(SqlMultiInsertStatement) BasicSqlBuilder.BuildUnknownQuery() BasicSqlBuilder.ConvertTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) BasicSqlBuilder.ConvertInline(String, ConvertType) BasicSqlBuilder.IsRecursiveCteKeywordRequired BasicSqlBuilder.BuildWithClause(SqlWithClause) BasicSqlBuilder.BuildSelectClause(SelectQuery) BasicSqlBuilder.GetSelectedColumns(SelectQuery) BasicSqlBuilder.BuildColumns(SelectQuery) BasicSqlBuilder.SupportsBooleanInColumn BasicSqlBuilder.SupportsNullInColumn BasicSqlBuilder.WrapBooleanExpression(ISqlExpression) BasicSqlBuilder.BuildColumnExpression(SelectQuery, ISqlExpression, Nullable<String>, Boolean) BasicSqlBuilder.WrapColumnExpression(ISqlExpression) BasicSqlBuilder.BuildDeleteClause(SqlDeleteStatement) BasicSqlBuilder.BuildUpdateClause(SqlStatement, SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTable(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateTableName(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildUpdateSet(SelectQuery, SqlUpdateClause) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, Boolean) BasicSqlBuilder.BuildEmptyInsert(SqlInsertClause) BasicSqlBuilder.BuildOutputSubclause(SqlStatement, SqlInsertClause) BasicSqlBuilder.BuildOutputSubclause(SqlOutputClause) BasicSqlBuilder.BuildReturningSubclause(SqlStatement) BasicSqlBuilder.BuildInsertClause(SqlStatement, SqlInsertClause, Nullable<String>, Boolean, Boolean) BasicSqlBuilder.BuildGetIdentity(SqlInsertClause) BasicSqlBuilder.BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) BasicSqlBuilder.BuildInsertOrUpdateQueryAsMerge(SqlInsertOrUpdateStatement, Nullable<String>) BasicSqlBuilder.EndLine BasicSqlBuilder.BuildInsertOrUpdateQueryAsUpdateInsert(SqlInsertOrUpdateStatement) BasicSqlBuilder.BuildTruncateTableStatement(SqlTruncateTableStatement) BasicSqlBuilder.BuildTruncateTable(SqlTruncateTableStatement) BasicSqlBuilder.BuildDropTableStatementIfExists(SqlDropTableStatement) BasicSqlBuilder.BuildStartCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildEndCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildCreateTableStatement(SqlCreateTableStatement) BasicSqlBuilder.BuildCreateTableFieldType(SqlField) BasicSqlBuilder.BuildCreateTableNullAttribute(SqlField, DefaultNullable) BasicSqlBuilder.BuildCreateTableIdentityAttribute1(SqlField) BasicSqlBuilder.BuildFromClause(SqlStatement, SelectQuery) BasicSqlBuilder.BuildPhysicalTable(ISqlTableSource, Nullable<String>, Nullable<String>) BasicSqlBuilder.BuildEmptyValues(SqlValuesTable) BasicSqlBuilder.BuildTableName(SqlTableSource, Boolean, Boolean) BasicSqlBuilder.BuildJoinType(JoinType, SqlSearchCondition) BasicSqlBuilder.BuildWhere(SelectQuery) BasicSqlBuilder.BuildWhereClause(SelectQuery) BasicSqlBuilder.BuildGroupByClause(SelectQuery) BasicSqlBuilder.BuildGroupByBody(GroupingType, List<ISqlExpression>) BasicSqlBuilder.BuildHavingClause(SelectQuery) BasicSqlBuilder.BuildOrderByClause(SelectQuery) BasicSqlBuilder.SkipFirst BasicSqlBuilder.SkipFormat BasicSqlBuilder.FirstFormat(SelectQuery) BasicSqlBuilder.OffsetFirst BasicSqlBuilder.TakePercent BasicSqlBuilder.TakeTies BasicSqlBuilder.NeedSkip(ISqlExpression, ISqlExpression) BasicSqlBuilder.NeedTake(ISqlExpression) BasicSqlBuilder.BuildSkipFirst(SelectQuery) BasicSqlBuilder.BuildTakeHints(SelectQuery) BasicSqlBuilder.BuildOffsetLimit(SelectQuery) BasicSqlBuilder.BuildWhereSearchCondition(SelectQuery, SqlSearchCondition) BasicSqlBuilder.BuildSearchCondition(SqlSearchCondition, Boolean) BasicSqlBuilder.BuildSearchCondition(Int32, SqlSearchCondition, Boolean) BasicSqlBuilder.BuildPredicate(ISqlPredicate) BasicSqlBuilder.BuildIsDistinctPredicateFallback(SqlPredicate.IsDistinct) BasicSqlBuilder.BuildPredicate(Int32, Int32, ISqlPredicate) BasicSqlBuilder.BuildLikePredicate(SqlPredicate.Like) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Nullable<String>, Boolean, Boolean) BasicSqlBuilder.BuildExpression(ISqlExpression) BasicSqlBuilder.BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) BasicSqlBuilder.BuildExpression(Int32, ISqlExpression) BasicSqlBuilder.BuildTypedExpression(SqlDataType, ISqlExpression) BasicSqlBuilder.BuildValue(SqlDataType, Nullable<Object>) BasicSqlBuilder.BuildBinaryExpression(SqlBinaryExpression) BasicSqlBuilder.BuildFunction(SqlFunction) BasicSqlBuilder.BuildDataType(StringBuilder, SqlDataType) BasicSqlBuilder.BuildDataType(SqlDataType, Boolean) BasicSqlBuilder.GetPrecedence(ISqlPredicate) BasicSqlBuilder.BuildTag(SqlStatement) BasicSqlBuilder.BuildSqlComment(StringBuilder, SqlComment) BasicSqlBuilder.AlternativeGetSelectedColumns(SelectQuery, BasicSqlBuilder.ColumnSelector) BasicSqlBuilder.IsDateDataType(ISqlExpression, String) BasicSqlBuilder.IsTimeDataType(ISqlExpression) BasicSqlBuilder.GetSequenceNameAttribute(SqlTable, Boolean) BasicSqlBuilder.GetTableAlias(ISqlTableSource) BasicSqlBuilder.GetTableServerName(SqlTable) BasicSqlBuilder.GetTableDatabaseName(SqlTable) BasicSqlBuilder.GetTableSchemaName(SqlTable) BasicSqlBuilder.GetTablePhysicalName(SqlTable) BasicSqlBuilder.AppendIndent() BasicSqlBuilder.IsReserved(String) BasicSqlBuilder.GetIdentityExpression(SqlTable) BasicSqlBuilder.PrintParameterName(StringBuilder, IDbDataParameter) BasicSqlBuilder.GetTypeName(IDbDataParameter) BasicSqlBuilder.GetUdtTypeName(IDbDataParameter) BasicSqlBuilder.GetProviderTypeName(IDbDataParameter) BasicSqlBuilder.PrintParameterType(StringBuilder, IDbDataParameter) BasicSqlBuilder.PrintParameters(StringBuilder, Nullable<IEnumerable<IDbDataParameter>>) BasicSqlBuilder.ApplyQueryHints(String, IReadOnlyCollection<String>) BasicSqlBuilder.GetReserveSequenceValuesSql(Int32, String) BasicSqlBuilder.GetMaxValueSql(EntityDescriptor, ColumnDescriptor) BasicSqlBuilder.Name BasicSqlBuilder.RemoveAlias(String) BasicSqlBuilder.GetTempAliases(Int32, String) BasicSqlBuilder.RequiresConstantColumnAliases BasicSqlBuilder.IsValuesSyntaxSupported BasicSqlBuilder.isEmptyValuesSourceSupported BasicSqlBuilder.FakeTable BasicSqlBuilder.FakeTableSchema BasicSqlBuilder.BuildMergeTerminator(SqlMergeStatement) BasicSqlBuilder.BuildMergeOperationUpdate(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationDelete(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationInsert(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationUpdateWithDelete(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationDeleteBySource(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOperationUpdateBySource(SqlMergeOperationClause) BasicSqlBuilder.BuildMergeOn(SqlMergeStatement) BasicSqlBuilder.BuildMergeSourceQuery(SqlTableLikeSource) BasicSqlBuilder.IsSqlValuesTableValueTypeRequired(SqlValuesTable, IReadOnlyList<ISqlExpression[]>, Int32, Int32) BasicSqlBuilder.BuildFakeTableName() BasicSqlBuilder.BuildValues(SqlValuesTable, IReadOnlyList<ISqlExpression[]>) BasicSqlBuilder.BuildMergeInto(SqlMergeStatement) Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public class SQLiteSqlBuilder : BasicSqlBuilder, ISqlBuilder Constructors | Improve this Doc View Source SQLiteSqlBuilder(MappingSchema, ISqlOptimizer, SqlProviderFlags) Declaration public SQLiteSqlBuilder(MappingSchema mappingSchema, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags) Parameters Type Name Description MappingSchema mappingSchema ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags Properties | Improve this Doc View Source IsNestedJoinSupported Declaration public override bool IsNestedJoinSupported { get; } Property Value Type Description System.Boolean Overrides BasicSqlBuilder.IsNestedJoinSupported | Improve this Doc View Source SupportsColumnAliasesInSource Declaration protected override bool SupportsColumnAliasesInSource { get; } Property Value Type Description System.Boolean Overrides BasicSqlBuilder.SupportsColumnAliasesInSource Methods | Improve this Doc View Source BuildCommand(SqlStatement, Int32) Declaration protected override void BuildCommand(SqlStatement statement, int commandNumber) Parameters Type Name Description SqlStatement statement System.Int32 commandNumber Overrides BasicSqlBuilder.BuildCommand(SqlStatement, Int32) | Improve this Doc View Source BuildCreateTableCommand(SqlTable) Declaration protected override void BuildCreateTableCommand(SqlTable table) Parameters Type Name Description SqlTable table Overrides BasicSqlBuilder.BuildCreateTableCommand(SqlTable) | Improve this Doc View Source BuildCreateTableIdentityAttribute2(SqlField) Declaration protected override void BuildCreateTableIdentityAttribute2(SqlField field) Parameters Type Name Description SqlField field Overrides BasicSqlBuilder.BuildCreateTableIdentityAttribute2(SqlField) | Improve this Doc View Source BuildCreateTablePrimaryKey(SqlCreateTableStatement, String, IEnumerable<String>) Declaration protected override void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable<string> fieldNames) Parameters Type Name Description SqlCreateTableStatement createTable System.String pkName IEnumerable < System.String > fieldNames Overrides BasicSqlBuilder.BuildCreateTablePrimaryKey(SqlCreateTableStatement, String, IEnumerable<String>) | Improve this Doc View Source BuildDataTypeFromDataType(SqlDataType, Boolean) Declaration protected override void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable) Parameters Type Name Description SqlDataType type System.Boolean forCreateTable Overrides BasicSqlBuilder.BuildDataTypeFromDataType(SqlDataType, Boolean) | Improve this Doc View Source BuildDropTableStatement(SqlDropTableStatement) Declaration protected override void BuildDropTableStatement(SqlDropTableStatement dropTable) Parameters Type Name Description SqlDropTableStatement dropTable Overrides BasicSqlBuilder.BuildDropTableStatement(SqlDropTableStatement) | Improve this Doc View Source BuildIsDistinctPredicate(SqlPredicate.IsDistinct) Declaration protected override void BuildIsDistinctPredicate(SqlPredicate.IsDistinct expr) Parameters Type Name Description SqlPredicate.IsDistinct expr Overrides BasicSqlBuilder.BuildIsDistinctPredicate(SqlPredicate.IsDistinct) | Improve this Doc View Source BuildMergeStatement(SqlMergeStatement) Declaration protected override void BuildMergeStatement(SqlMergeStatement merge) Parameters Type Name Description SqlMergeStatement merge Overrides BasicSqlBuilder.BuildMergeStatement(SqlMergeStatement) | Improve this Doc View Source BuildSqlValuesTable(SqlValuesTable, String, out Boolean) Declaration protected override void BuildSqlValuesTable(SqlValuesTable valuesTable, string alias, out bool aliasBuilt) Parameters Type Name Description SqlValuesTable valuesTable System.String alias System.Boolean aliasBuilt Overrides BasicSqlBuilder.BuildSqlValuesTable(SqlValuesTable, String, out Boolean) | Improve this Doc View Source BuildTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) Declaration public override StringBuilder BuildTableName(StringBuilder sb, string? server, string? database, string? schema, string table, TableOptions tableOptions) Parameters Type Name Description StringBuilder sb System.Nullable < System.String > server System.Nullable < System.String > database System.Nullable < System.String > schema System.String table TableOptions tableOptions Returns Type Description StringBuilder Overrides BasicSqlBuilder.BuildTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) | Improve this Doc View Source CommandCount(SqlStatement) Declaration public override int CommandCount(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description System.Int32 Overrides BasicSqlBuilder.CommandCount(SqlStatement) | Improve this Doc View Source Convert(StringBuilder, String, ConvertType) Declaration public override StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType) Parameters Type Name Description StringBuilder sb System.String value ConvertType convertType Returns Type Description StringBuilder Overrides BasicSqlBuilder.Convert(StringBuilder, String, ConvertType) | Improve this Doc View Source CreateSqlBuilder() Declaration protected override ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder Overrides BasicSqlBuilder.CreateSqlBuilder() | Improve this Doc View Source LimitFormat(SelectQuery) Declaration protected override string LimitFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.String Overrides BasicSqlBuilder.LimitFormat(SelectQuery) | Improve this Doc View Source OffsetFormat(SelectQuery) Declaration protected override string OffsetFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.String Overrides BasicSqlBuilder.OffsetFormat(SelectQuery) Implements ISqlBuilder Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SQLite.SQLiteTools.html": {
    "href": "api/LinqToDB.DataProvider.SQLite.SQLiteTools.html",
    "title": "Class SQLiteTools | Linq To DB (aka linq2db)",
    "keywords": "Class SQLiteTools Inheritance System.Object SQLiteTools Namespace : LinqToDB.DataProvider.SQLite Assembly : linq2db.dll Syntax public static class SQLiteTools : object Fields | Improve this Doc View Source AlwaysCheckDbNull Declaration public static bool AlwaysCheckDbNull Field Value Type Description System.Boolean Properties | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source DetectedProviderName Declaration public static string DetectedProviderName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source ClearAllPools(Nullable<String>) Invokes ClearAllPools() method for specified provider. Declaration public static void ClearAllPools(string? provider = null) Parameters Type Name Description System.Nullable < System.String > provider For which provider ClearAllPools should be called: | Improve this Doc View Source CreateDatabase(String, Boolean) Declaration public static void CreateDatabase(string databaseName, bool deleteIfExists = false) Parameters Type Name Description System.String databaseName System.Boolean deleteIfExists | Improve this Doc View Source CreateDataConnection(IDbConnection, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, string? providerName = null) Parameters Type Name Description IDbConnection connection System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, string? providerName = null) Parameters Type Name Description IDbTransaction transaction System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, Nullable<String>) Declaration public static DataConnection CreateDataConnection(string connectionString, string? providerName = null) Parameters Type Name Description System.String connectionString System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source DropDatabase(String) Declaration public static void DropDatabase(string databaseName) Parameters Type Name Description System.String databaseName | Improve this Doc View Source GetDataProvider(Nullable<String>) Declaration public static IDataProvider GetDataProvider(string? providerName = null) Parameters Type Name Description System.Nullable < System.String > providerName Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Int32 maxBatchSize System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSQLite(Assembly) Declaration public static void ResolveSQLite(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveSQLite(String) Declaration public static void ResolveSQLite(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.SqlServer.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.html",
    "title": "Namespace LinqToDB.DataProvider.SqlServer | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.SqlServer Classes SqlServer2000MappingSchema SqlServer2005MappingSchema SqlServer2008MappingSchema SqlServer2012MappingSchema SqlServer2016MappingSchema SqlServer2017MappingSchema SqlServerConfiguration SqlServerDataProvider SqlServerExtensions SqlServerExtensions.FreeTextKey<TKey> SqlServerMappingSchema SqlServerProviderAdapter SqlServerProviderAdapter.SqlBulkCopy SqlServerProviderAdapter.SqlBulkCopyColumnMapping SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection SqlServerProviderAdapter.SqlConnection SqlServerProviderAdapter.SqlConnectionStringBuilder SqlServerProviderAdapter.SqlRowsCopiedEventArgs SqlServerProviderAdapter.SqlTransaction SqlServerRetryPolicy SqlServerTools SqlServerTools.Sql SqlServerTransientExceptionDetector Detects the exceptions caused by SQL Server transient failures. Interfaces ISqlServerExtensions Enums SqlServerProvider SqlServerProviderAdapter.SqlBulkCopyOptions SqlServerVersion Delegates SqlServerProviderAdapter.SqlRowsCopiedEventHandler"
  },
  "api/LinqToDB.DataProvider.SqlServer.ISqlServerExtensions.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.ISqlServerExtensions.html",
    "title": "Interface ISqlServerExtensions | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlServerExtensions Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public interface ISqlServerExtensions Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) SqlServerExtensions.FreeTextTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String) SqlServerExtensions.FreeTextTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32) SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, String) SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, String, Int32) SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32, Int32) SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32) SqlServerExtensions.FreeTextTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String) SqlServerExtensions.FreeTextTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32) SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, String) SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, String, Int32) SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32, Int32) SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32) SqlServerExtensions.ContainsTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String) SqlServerExtensions.ContainsTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32) SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, String) SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, String, Int32) SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32, Int32) SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32) SqlServerExtensions.ContainsTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String) SqlServerExtensions.ContainsTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32) SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, String, Int32) SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, String) SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32, Int32) SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32) SqlServerExtensions.FreeText(ISqlServerExtensions, String, Nullable<Object>[]) SqlServerExtensions.FreeTextWithLanguage(ISqlServerExtensions, String, String, Nullable<Object>[]) SqlServerExtensions.FreeTextWithLanguage(ISqlServerExtensions, String, Int32, Nullable<Object>[]) SqlServerExtensions.Contains(ISqlServerExtensions, String, Nullable<Object>[]) SqlServerExtensions.ContainsWithLanguage(ISqlServerExtensions, String, String, Nullable<Object>[]) SqlServerExtensions.ContainsWithLanguage(ISqlServerExtensions, String, Int32, Nullable<Object>[]) SqlServerExtensions.ContainsProperty(ISqlServerExtensions, Nullable<Object>, String, String) SqlServerExtensions.ContainsPropertyWithLanguage(ISqlServerExtensions, Nullable<Object>, String, String, String) SqlServerExtensions.ContainsPropertyWithLanguage(ISqlServerExtensions, Nullable<Object>, String, String, Int32)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2000MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2000MappingSchema.html",
    "title": "Class SqlServer2000MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2000MappingSchema Inheritance System.Object MappingSchema SqlServer2000MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2000MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2000MappingSchema() Declaration public SqlServer2000MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression? TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description System.Nullable < LambdaExpression > Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2005MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2005MappingSchema.html",
    "title": "Class SqlServer2005MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2005MappingSchema Inheritance System.Object MappingSchema SqlServer2005MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2005MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2005MappingSchema() Declaration public SqlServer2005MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression? TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description System.Nullable < LambdaExpression > Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2008MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2008MappingSchema.html",
    "title": "Class SqlServer2008MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2008MappingSchema Inheritance System.Object MappingSchema SqlServer2008MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2008MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2008MappingSchema() Declaration public SqlServer2008MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression? TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description System.Nullable < LambdaExpression > Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2012MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2012MappingSchema.html",
    "title": "Class SqlServer2012MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2012MappingSchema Inheritance System.Object MappingSchema SqlServer2012MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2012MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2012MappingSchema() Declaration public SqlServer2012MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression? TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description System.Nullable < LambdaExpression > Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2016MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2016MappingSchema.html",
    "title": "Class SqlServer2016MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2016MappingSchema Inheritance System.Object MappingSchema SqlServer2016MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2016MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2016MappingSchema() Declaration public SqlServer2016MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression? TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description System.Nullable < LambdaExpression > Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServer2017MappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServer2017MappingSchema.html",
    "title": "Class SqlServer2017MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServer2017MappingSchema Inheritance System.Object MappingSchema SqlServer2017MappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServer2017MappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServer2017MappingSchema() Declaration public SqlServer2017MappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression? TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description System.Nullable < LambdaExpression > Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerConfiguration.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerConfiguration.html",
    "title": "Class SqlServerConfiguration | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerConfiguration Inheritance System.Object SqlServerConfiguration Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public static class SqlServerConfiguration : object Fields | Improve this Doc View Source GenerateScopeIdentity Declaration public static bool GenerateScopeIdentity Field Value Type Description System.Boolean"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerDataProvider.html",
    "title": "Class SqlServerDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < SqlServerProviderAdapter > SqlServerDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<SqlServerProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<SqlServerProviderAdapter>.Adapter DynamicDataProviderBase<SqlServerProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<SqlServerProviderAdapter>.DataReaderType DynamicDataProviderBase<SqlServerProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<SqlServerProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<SqlServerProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<SqlServerProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<SqlServerProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<SqlServerProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<SqlServerProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<SqlServerProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<SqlServerProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<SqlServerProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<SqlServerProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) DataProviderBase.ConvertParameterType(Type, DbDataType) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerDataProvider : DynamicDataProviderBase<SqlServerProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source SqlServerDataProvider(String, SqlServerVersion) Declaration public SqlServerDataProvider(string name, SqlServerVersion version) Parameters Type Name Description System.String name SqlServerVersion version | Improve this Doc View Source SqlServerDataProvider(String, SqlServerVersion, SqlServerProvider) Declaration public SqlServerDataProvider(string name, SqlServerVersion version, SqlServerProvider provider) Parameters Type Name Description System.String name SqlServerVersion version SqlServerProvider provider Properties | Improve this Doc View Source Provider Declaration public SqlServerProvider Provider { get; } Property Value Type Description SqlServerProvider | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions | Improve this Doc View Source Version Declaration public SqlServerVersion Version { get; } Property Value Type Description SqlServerVersion Methods | Improve this Doc View Source AddUdtType(Type, String) Declaration public void AddUdtType(Type type, string udtName) Parameters Type Name Description Type type System.String udtName | Improve this Doc View Source AddUdtType(Type, String, Nullable<Object>, DataType) Declaration public void AddUdtType(Type type, string udtName, object? defaultValue, DataType dataType = default(DataType)) Parameters Type Name Description Type type System.String udtName System.Nullable < System.Object > defaultValue DataType dataType | Improve this Doc View Source AddUdtType<T>(String, T, DataType) Declaration public void AddUdtType<T>(string udtName, T defaultValue, DataType dataType = default(DataType)) Parameters Type Name Description System.String udtName T defaultValue DataType dataType Type Parameters Name Description T | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source GetConnectionInfo(DataConnection, String) Declaration public override object? GetConnectionInfo(DataConnection dataConnection, string parameterName) Parameters Type Name Description DataConnection dataConnection System.String parameterName Returns Type Description System.Nullable < System.Object > Overrides DataProviderBase.GetConnectionInfo(DataConnection, String) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey-1.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey-1.html",
    "title": "Class SqlServerExtensions.FreeTextKey<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerExtensions.FreeTextKey<TKey> Inheritance System.Object SqlServerExtensions.FreeTextKey<TKey> Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class FreeTextKey<TKey> : object Type Parameters Name Description TKey Fields | Improve this Doc View Source Key Declaration public TKey Key Field Value Type Description TKey | Improve this Doc View Source Rank Declaration public int Rank Field Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerExtensions.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerExtensions.html",
    "title": "Class SqlServerExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerExtensions Inheritance System.Object SqlServerExtensions Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public static class SqlServerExtensions : object Methods | Improve this Doc View Source Contains(ISqlServerExtensions, String, Nullable<Object>[]) Applies full-text search condition using CONTAINS predicate against specified full-text columns or all FTS columns in table. Example: \"CONTAINS((col1, col2), N'search')\". Declaration public static bool Contains(this ISqlServerExtensions ext, string search, params object? [] tableOrColumns) Parameters Type Name Description ISqlServerExtensions ext Extension point. System.String search Full-text search condition. System.Nullable < System.Object >[] tableOrColumns Full-text columns that should be queried or table, if all FST columns should be queried. Returns Type Description System.Boolean Returns true if full-text search found matching records. | Improve this Doc View Source ContainsProperty(ISqlServerExtensions, Nullable<Object>, String, String) Applies full-text search condition using CONTAINS(PROPERTY(...)) predicate against specified full-text column property. Example: \"CONTAINS(PROPERTY(column, 'property'), N'search')\". Declaration public static bool ContainsProperty(this ISqlServerExtensions ext, object? column, string property, string search) Parameters Type Name Description ISqlServerExtensions ext Extension point. System.Nullable < System.Object > column Full-text column that should be queried. System.String property Name of document property to search in. System.String search Full-text search condition. Returns Type Description System.Boolean Returns true if full-text search found matching records. | Improve this Doc View Source ContainsPropertyWithLanguage(ISqlServerExtensions, Nullable<Object>, String, String, Int32) Applies full-text search condition using CONTAINS(PROPERTY(...)) predicate against specified full-text column property. Example: \"CONTAINS(PROPERTY(column, 'property'), N'search', LANGUAGE language_code)\". Declaration public static bool ContainsPropertyWithLanguage(this ISqlServerExtensions ext, object? column, string property, string search, int language) Parameters Type Name Description ISqlServerExtensions ext Extension point. System.Nullable < System.Object > column Full-text column that should be queried. System.String property Name of document property to search in. System.String search Full-text search condition. System.Int32 language Language LCID code (see syslanguages.lcid). Returns Type Description System.Boolean Returns true if full-text search found matching records. | Improve this Doc View Source ContainsPropertyWithLanguage(ISqlServerExtensions, Nullable<Object>, String, String, String) Applies full-text search condition using CONTAINS(PROPERTY(...)) predicate against specified full-text column property. Example: \"CONTAINS(PROPERTY(column, 'property'), N'search', LANGUAGE N'language')\". Declaration public static bool ContainsPropertyWithLanguage(this ISqlServerExtensions ext, object? column, string property, string search, string language) Parameters Type Name Description ISqlServerExtensions ext Extension point. System.Nullable < System.Object > column Full-text column that should be queried. System.String property Name of document property to search in. System.String search Full-text search condition. System.String language Language name (see syslanguages.alias). Returns Type Description System.Boolean Returns true if full-text search found matching records. | Improve this Doc View Source ContainsTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String) Performs full-text search query using CONTAINSTABLE function against specified full-text columns. Example: \"CONTAINSTABLE(table, (col1, col2), N'search')\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTable<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string search) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String search Full-text search condition. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32) Performs full-text search query using CONTAINSTABLE function against specified full-text columns. Example: \"CONTAINSTABLE(table, (col1, col2), N'search', top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTable<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string search, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String search Full-text search condition. System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String) Performs full-text search query using CONTAINSTABLE function against all full-text columns in table. Example: \"CONTAINSTABLE(table, *, N'search')\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTable<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string search) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String search Full-text search condition. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32) Performs full-text search query using CONTAINSTABLE function against all full-text columns in table. Example: \"CONTAINSTABLE(table, *, N'search', top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTable<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string search, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String search Full-text search condition. System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32) Performs full-text search query using CONTAINSTABLE function against specified full-text columns. Example: \"CONTAINSTABLE(table, (col1, col2), N'search', LANGUAGE language_code)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string search, int language) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String search Full-text search condition. System.Int32 language Language LCID code (see syslanguages.lcid). Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32, Int32) Performs full-text search query using CONTAINSTABLE function against specified full-text columns. Example: \"CONTAINSTABLE(table, (col1, col2), N'search', LANGUAGE language_code, top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string search, int language, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String search Full-text search condition. System.Int32 language Language LCID code (see syslanguages.lcid). System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, String) Performs full-text search query using CONTAINSTABLE function against specified full-text columns. Example: \"CONTAINSTABLE(table, (col1, col2), N'search', LANGUAGE N'language')\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string search, string language) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String search Full-text search condition. System.String language Language name (see syslanguages.alias). Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, String, Int32) Performs full-text search query using CONTAINSTABLE function against specified full-text columns. Example: \"CONTAINSTABLE(table, (col1, col2), N'search', LANGUAGE N'language', top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string search, string language, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String search Full-text search condition. System.String language Language name (see syslanguages.alias). System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32) Performs full-text search query using CONTAINSTABLE function against all full-text columns in table. Example: \"CONTAINSTABLE(table, *, N'search', LANGUAGE language_code, top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string search, int language) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String search Full-text search condition. System.Int32 language Language LCID code (see syslanguages.lcid). Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32, Int32) Performs full-text search query using CONTAINSTABLE function against all full-text columns in table. Example: \"CONTAINSTABLE(table, *, N'search', LANGUAGE language_code)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string search, int language, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String search Full-text search condition. System.Int32 language Language LCID code (see syslanguages.lcid). System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, String) Performs full-text search query using CONTAINSTABLE function against all full-text columns in table. Example: \"CONTAINSTABLE(table, *, N'search', LANGUAGE N'language')\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string search, string language) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String search Full-text search condition. System.String language Language name (see syslanguages.alias). Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, String, Int32) Performs full-text search query using CONTAINSTABLE function against all full-text columns in table. Example: \"CONTAINSTABLE(table, *, N'search', LANGUAGE N'language', top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> ContainsTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string search, string language, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String search Full-text search condition. System.String language Language name (see syslanguages.alias). System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source ContainsWithLanguage(ISqlServerExtensions, String, Int32, Nullable<Object>[]) Applies full-text search condition using CONTAINS predicate against specified full-text columns or all FTS columns in table. Example: \"CONTAINS((col1, col2), N'search', LANGUAGE language_code)\". Declaration public static bool ContainsWithLanguage(this ISqlServerExtensions ext, string search, int language, params object? [] tableOrColumns) Parameters Type Name Description ISqlServerExtensions ext Extension point. System.String search Full-text search condition. System.Int32 language Language LCID code (see syslanguages.lcid). System.Nullable < System.Object >[] tableOrColumns Full-text columns that should be queried or table, if all FST columns should be queried. Returns Type Description System.Boolean Returns true if full-text search found matching records. | Improve this Doc View Source ContainsWithLanguage(ISqlServerExtensions, String, String, Nullable<Object>[]) Applies full-text search condition using CONTAINS predicate against specified full-text columns or all FTS columns in table. Example: \"CONTAINS((col1, col2), N'search', LANGUAGE N'language')\". Declaration public static bool ContainsWithLanguage(this ISqlServerExtensions ext, string search, string language, params object? [] tableOrColumns) Parameters Type Name Description ISqlServerExtensions ext Extension point. System.String search Full-text search condition. System.String language Language name (see syslanguages.alias). System.Nullable < System.Object >[] tableOrColumns Full-text columns that should be queried or table, if all FST columns should be queried. Returns Type Description System.Boolean Returns true if full-text search found matching records. | Improve this Doc View Source FreeText(ISqlServerExtensions, String, Nullable<Object>[]) Applies full-text search condition using FREETEXT predicate against specified full-text columns or all FTS columns in table. Example: \"FREETEXT((col1, col2), N'search')\". Declaration public static bool FreeText(this ISqlServerExtensions ext, string term, params object? [] tableOrColumns) Parameters Type Name Description ISqlServerExtensions ext Extension point. System.String term Full-text search term. System.Nullable < System.Object >[] tableOrColumns Full-text columns that should be queried or table, if all FST columns should be queried. Returns Type Description System.Boolean Returns true if full-text search found matching records. | Improve this Doc View Source FreeTextTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String) Performs full-text search query using FREETEXTTABLE function against specified full-text columns. Example: \"FREETEXTTABLE(table, (col1, col2), N'search')\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string term) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String term Full-text search term. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32) Performs full-text search query using FREETEXTTABLE function against specified full-text columns. Example: \"FREETEXTTABLE(table, (col1, col2), N'search', top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string term, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String term Full-text search term. System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String) Performs full-text search query using FREETEXTTABLE function against all full-text columns in table. Example: \"FREETEXTTABLE(table, *, N'search')\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string term) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String term Full-text search term. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextTable<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32) Performs full-text search query using FREETEXTTABLE function against all full-text columns in table. Example: \"FREETEXTTABLE(table, *, N'search', top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string term, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String term Full-text search term. System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32) Performs full-text search query using FREETEXTTABLE function against specified full-text columns. Example: \"FREETEXTTABLE(table, (col1, col2), N'search', LANGUAGE language_code)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string term, int language) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String term Full-text search term. System.Int32 language Language LCID code (see syslanguages.lcid). Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, Int32, Int32) Performs full-text search query using FREETEXTTABLE function against specified full-text columns. Example: \"FREETEXTTABLE(table, (col1, col2), N'search', LANGUAGE language_code, top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string term, int language, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String term Full-text search term. System.Int32 language Language LCID code (see syslanguages.lcid). System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, String) Performs full-text search query using FREETEXTTABLE function against specified full-text columns. Example: \"FREETEXTTABLE(table, (col1, col2), N'search', LANGUAGE N'language')\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string term, string language) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String term Full-text search term. System.String language Language name (see syslanguages.alias). Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, Expression<Func<TTable, Nullable<Object>>>, String, String, Int32) Performs full-text search query using FREETEXTTABLE function against specified full-text columns. Example: \"FREETEXTTABLE(table, (col1, col2), N'search', LANGUAGE N'language', top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, Expression<Func<TTable, object?>> columns, string term, string language, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. Expression < Func <TTable, System.Nullable < System.Object >>> columns Selector expression for full-text columns that should be queried. System.String term Full-text search term. System.String language Language name (see syslanguages.alias). System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32) Performs full-text search query using FREETEXTTABLE function against all full-text columns in table. Example: \"FREETEXTTABLE(table, *, N'search', LANGUAGE language_code)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string term, int language) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String term Full-text search term. System.Int32 language Language LCID code (see syslanguages.lcid). Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, Int32, Int32) Performs full-text search query using FREETEXTTABLE function against all full-text columns in table. Example: \"FREETEXTTABLE(table, *, N'search', LANGUAGE language_code, top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string term, int language, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String term Full-text search term. System.Int32 language Language LCID code (see syslanguages.lcid). System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, String) Performs full-text search query using FREETEXTTABLE function against all full-text columns in table. Example: \"FREETEXTTABLE(table, *, N'search', LANGUAGE N'language')\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string term, string language) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String term Full-text search term. System.String language Language name (see syslanguages.alias). Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextTableWithLanguage<TTable, TKey>(ISqlServerExtensions, ITable<TTable>, String, String, Int32) Performs full-text search query using FREETEXTTABLE function against all full-text columns in table. Example: \"FREETEXTTABLE(table, *, N'search', LANGUAGE N'language', top)\". Declaration public static IQueryable<SqlServerExtensions.FreeTextKey<TKey>> FreeTextTableWithLanguage<TTable, TKey>(this ISqlServerExtensions ext, ITable<TTable> table, string term, string language, int top) Parameters Type Name Description ISqlServerExtensions ext Extension point. ITable <TTable> table Table to perform full-text search query against. System.String term Full-text search term. System.String language Language name (see syslanguages.alias). System.Int32 top Top filter to return top N ranked results. Returns Type Description IQueryable < SqlServerExtensions.FreeTextKey <TKey>> Returns full-text search ranking table. Type Parameters Name Description TTable Queried table mapping class. TKey Full-text index key type. | Improve this Doc View Source FreeTextWithLanguage(ISqlServerExtensions, String, Int32, Nullable<Object>[]) Applies full-text search condition using FREETEXT predicate against specified full-text columns or all FTS columns in table. Example: \"FREETEXT((col1, col2), N'search', LANGUAGE language_code)\". Declaration public static bool FreeTextWithLanguage(this ISqlServerExtensions ext, string term, int language, params object? [] tableOrColumns) Parameters Type Name Description ISqlServerExtensions ext Extension point. System.String term Full-text search term. System.Int32 language Language LCID code (see syslanguages.lcid). System.Nullable < System.Object >[] tableOrColumns Full-text columns that should be queried or table, if all FST columns should be queried. Returns Type Description System.Boolean Returns true if full-text search found matching records. | Improve this Doc View Source FreeTextWithLanguage(ISqlServerExtensions, String, String, Nullable<Object>[]) Applies full-text search condition using FREETEXT predicate against specified full-text columns or all FTS columns in table. Example: \"FREETEXT((col1, col2), N'search', LANGUAGE N'language')\". Declaration public static bool FreeTextWithLanguage(this ISqlServerExtensions ext, string term, string language, params object? [] tableOrColumns) Parameters Type Name Description ISqlServerExtensions ext Extension point. System.String term Full-text search term. System.String language Language name (see syslanguages.alias). System.Nullable < System.Object >[] tableOrColumns Full-text columns that should be queried or table, if all FST columns should be queried. Returns Type Description System.Boolean Returns true if full-text search found matching records. | Improve this Doc View Source SqlServer(Sql.ISqlExtension) Declaration public static ISqlServerExtensions SqlServer(this Sql.ISqlExtension ext) Parameters Type Name Description Sql.ISqlExtension ext Returns Type Description ISqlServerExtensions"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.html",
    "title": "Class SqlServerMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerMappingSchema Inheritance System.Object MappingSchema SqlServerMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerMappingSchema : MappingSchema Constructors | Improve this Doc View Source SqlServerMappingSchema() Declaration public SqlServerMappingSchema() Methods | Improve this Doc View Source TryGetConvertExpression(Type, Type) Declaration public override LambdaExpression? TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Type to Returns Type Description System.Nullable < LambdaExpression > Overrides MappingSchema.TryGetConvertExpression(Type, Type) Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerProvider.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerProvider.html",
    "title": "Enum SqlServerProvider | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlServerProvider Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public enum SqlServerProvider : int Fields Name Description MicrosoftDataSqlClient SystemDataSqlClient Extension Methods Map.DeepCopy<SqlServerProvider>() Sql.IsDistinctFrom<SqlServerProvider>(SqlServerProvider) Sql.IsDistinctFrom<SqlServerProvider>(Nullable<SqlServerProvider>) Sql.IsNotDistinctFrom<SqlServerProvider>(SqlServerProvider) Sql.IsNotDistinctFrom<SqlServerProvider>(Nullable<SqlServerProvider>) SqlExtensions.In<SqlServerProvider>(IEnumerable<SqlServerProvider>) SqlExtensions.In<SqlServerProvider>(IQueryable<SqlServerProvider>) SqlExtensions.In<SqlServerProvider>(SqlServerProvider[]) SqlExtensions.In<SqlServerProvider>(SqlServerProvider, SqlServerProvider) SqlExtensions.In<SqlServerProvider>(SqlServerProvider, SqlServerProvider, SqlServerProvider) SqlExtensions.NotIn<SqlServerProvider>(IEnumerable<SqlServerProvider>) SqlExtensions.NotIn<SqlServerProvider>(IQueryable<SqlServerProvider>) SqlExtensions.NotIn<SqlServerProvider>(SqlServerProvider[]) SqlExtensions.NotIn<SqlServerProvider>(SqlServerProvider, SqlServerProvider) SqlExtensions.NotIn<SqlServerProvider>(SqlServerProvider, SqlServerProvider, SqlServerProvider)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.html",
    "title": "Class SqlServerProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerProviderAdapter Inheritance System.Object SqlServerProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source MicrosoftAssemblyName Declaration public const string MicrosoftAssemblyName = null Field Value Type Description System.String | Improve this Doc View Source MicrosoftClientNamespace Declaration public const string MicrosoftClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source MicrosoftProviderFactoryName Declaration public const string MicrosoftProviderFactoryName = null Field Value Type Description System.String | Improve this Doc View Source SystemAssemblyName Declaration public const string SystemAssemblyName = null Field Value Type Description System.String | Improve this Doc View Source SystemClientNamespace Declaration public const string SystemClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source SystemProviderFactoryName Declaration public const string SystemProviderFactoryName = null Field Value Type Description System.String Properties | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source GetDateTimeOffsetReaderMethod Declaration public string GetDateTimeOffsetReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetDbType Declaration public Func<IDbDataParameter, SqlDbType> GetDbType { get; } Property Value Type Description Func < IDbDataParameter , SqlDbType > | Improve this Doc View Source GetSqlXmlReaderMethod Declaration public string GetSqlXmlReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetTimeSpanReaderMethod Declaration public string GetTimeSpanReaderMethod { get; } Property Value Type Description System.String | Improve this Doc View Source GetTypeName Declaration public Func<IDbDataParameter, string> GetTypeName { get; } Property Value Type Description Func < IDbDataParameter , System.String > | Improve this Doc View Source GetUdtTypeName Declaration public Func<IDbDataParameter, string> GetUdtTypeName { get; } Property Value Type Description Func < IDbDataParameter , System.String > | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source SetDbType Declaration public Action<IDbDataParameter, SqlDbType> SetDbType { get; } Property Value Type Description Action < IDbDataParameter , SqlDbType > | Improve this Doc View Source SetTypeName Declaration public Action<IDbDataParameter, string> SetTypeName { get; } Property Value Type Description Action < IDbDataParameter , System.String > | Improve this Doc View Source SetUdtTypeName Declaration public Action<IDbDataParameter, string> SetUdtTypeName { get; } Property Value Type Description Action < IDbDataParameter , System.String > | Improve this Doc View Source SqlDataRecordType Declaration public Type SqlDataRecordType { get; } Property Value Type Description Type | Improve this Doc View Source SqlExceptionType Declaration public Type SqlExceptionType { get; } Property Value Type Description Type | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source CreateBulkCopy(IDbConnection, SqlServerProviderAdapter.SqlBulkCopyOptions, Nullable<IDbTransaction>) Declaration public SqlServerProviderAdapter.SqlBulkCopy CreateBulkCopy(IDbConnection connection, SqlServerProviderAdapter.SqlBulkCopyOptions options, IDbTransaction? transaction) Parameters Type Name Description IDbConnection connection SqlServerProviderAdapter.SqlBulkCopyOptions options System.Nullable < IDbTransaction > transaction Returns Type Description SqlServerProviderAdapter.SqlBulkCopy | Improve this Doc View Source CreateBulkCopyColumnMapping(Int32, String) Declaration public SqlServerProviderAdapter.SqlBulkCopyColumnMapping CreateBulkCopyColumnMapping(int source, string destination) Parameters Type Name Description System.Int32 source System.String destination Returns Type Description SqlServerProviderAdapter.SqlBulkCopyColumnMapping | Improve this Doc View Source CreateConnection(String) Declaration public SqlServerProviderAdapter.SqlConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description SqlServerProviderAdapter.SqlConnection | Improve this Doc View Source CreateConnectionStringBuilder(String) Declaration public SqlServerProviderAdapter.SqlConnectionStringBuilder CreateConnectionStringBuilder(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description SqlServerProviderAdapter.SqlConnectionStringBuilder | Improve this Doc View Source GetInstance(SqlServerProvider) Declaration public static SqlServerProviderAdapter GetInstance(SqlServerProvider provider) Parameters Type Name Description SqlServerProvider provider Returns Type Description SqlServerProviderAdapter Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.html",
    "title": "Class SqlServerProviderAdapter.SqlBulkCopy | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerProviderAdapter.SqlBulkCopy Inheritance System.Object TypeWrapper SqlServerProviderAdapter.SqlBulkCopy Implements IDisposable Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlBulkCopy : TypeWrapper Constructors | Improve this Doc View Source SqlBulkCopy(SqlServerProviderAdapter.SqlConnection, SqlServerProviderAdapter.SqlBulkCopyOptions, SqlServerProviderAdapter.SqlTransaction) Declaration public SqlBulkCopy(SqlServerProviderAdapter.SqlConnection connection, SqlServerProviderAdapter.SqlBulkCopyOptions options, SqlServerProviderAdapter.SqlTransaction transaction) Parameters Type Name Description SqlServerProviderAdapter.SqlConnection connection SqlServerProviderAdapter.SqlBulkCopyOptions options SqlServerProviderAdapter.SqlTransaction transaction | Improve this Doc View Source SqlBulkCopy(Object, Delegate[]) Declaration public SqlBulkCopy(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source BatchSize Declaration public int BatchSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source BulkCopyTimeout Declaration public int BulkCopyTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ColumnMappings Declaration public SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection ColumnMappings { get; } Property Value Type Description SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection | Improve this Doc View Source DestinationTableName Declaration public string? DestinationTableName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source NotifyAfter Declaration public int NotifyAfter { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source WriteToServer(IDataReader) Declaration public void WriteToServer(IDataReader dataReader) Parameters Type Name Description IDataReader dataReader | Improve this Doc View Source WriteToServerAsync(IDataReader, CancellationToken) Declaration public Task WriteToServerAsync(IDataReader dataReader, CancellationToken cancellationToken) Parameters Type Name Description IDataReader dataReader CancellationToken cancellationToken Returns Type Description Task Events | Improve this Doc View Source SqlRowsCopied Declaration public event SqlServerProviderAdapter.SqlRowsCopiedEventHandler SqlRowsCopied Event Type Type Description SqlServerProviderAdapter.SqlRowsCopiedEventHandler Implements IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMapping.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMapping.html",
    "title": "Class SqlServerProviderAdapter.SqlBulkCopyColumnMapping | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerProviderAdapter.SqlBulkCopyColumnMapping Inheritance System.Object TypeWrapper SqlServerProviderAdapter.SqlBulkCopyColumnMapping Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlBulkCopyColumnMapping : TypeWrapper Constructors | Improve this Doc View Source SqlBulkCopyColumnMapping(Int32, String) Declaration public SqlBulkCopyColumnMapping(int source, string destination) Parameters Type Name Description System.Int32 source System.String destination | Improve this Doc View Source SqlBulkCopyColumnMapping(Object) Declaration public SqlBulkCopyColumnMapping(object instance) Parameters Type Name Description System.Object instance Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection.html",
    "title": "Class SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection Inheritance System.Object TypeWrapper SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlBulkCopyColumnMappingCollection : TypeWrapper Constructors | Improve this Doc View Source SqlBulkCopyColumnMappingCollection(Object, Delegate[]) Declaration public SqlBulkCopyColumnMappingCollection(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Methods | Improve this Doc View Source Add(SqlServerProviderAdapter.SqlBulkCopyColumnMapping) Declaration public SqlServerProviderAdapter.SqlBulkCopyColumnMapping Add(SqlServerProviderAdapter.SqlBulkCopyColumnMapping bulkCopyColumnMapping) Parameters Type Name Description SqlServerProviderAdapter.SqlBulkCopyColumnMapping bulkCopyColumnMapping Returns Type Description SqlServerProviderAdapter.SqlBulkCopyColumnMapping Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions.html",
    "title": "Enum SqlServerProviderAdapter.SqlBulkCopyOptions | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlServerProviderAdapter.SqlBulkCopyOptions Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public enum SqlBulkCopyOptions : int Fields Name Description AllowEncryptedValueModifications CheckConstraints Default FireTriggers KeepIdentity KeepNulls TableLock UseInternalTransaction Extension Methods Map.DeepCopy<SqlServerProviderAdapter.SqlBulkCopyOptions>() Sql.IsDistinctFrom<SqlServerProviderAdapter.SqlBulkCopyOptions>(SqlServerProviderAdapter.SqlBulkCopyOptions) Sql.IsDistinctFrom<SqlServerProviderAdapter.SqlBulkCopyOptions>(Nullable<SqlServerProviderAdapter.SqlBulkCopyOptions>) Sql.IsNotDistinctFrom<SqlServerProviderAdapter.SqlBulkCopyOptions>(SqlServerProviderAdapter.SqlBulkCopyOptions) Sql.IsNotDistinctFrom<SqlServerProviderAdapter.SqlBulkCopyOptions>(Nullable<SqlServerProviderAdapter.SqlBulkCopyOptions>) SqlExtensions.In<SqlServerProviderAdapter.SqlBulkCopyOptions>(IEnumerable<SqlServerProviderAdapter.SqlBulkCopyOptions>) SqlExtensions.In<SqlServerProviderAdapter.SqlBulkCopyOptions>(IQueryable<SqlServerProviderAdapter.SqlBulkCopyOptions>) SqlExtensions.In<SqlServerProviderAdapter.SqlBulkCopyOptions>(SqlServerProviderAdapter.SqlBulkCopyOptions[]) SqlExtensions.In<SqlServerProviderAdapter.SqlBulkCopyOptions>(SqlServerProviderAdapter.SqlBulkCopyOptions, SqlServerProviderAdapter.SqlBulkCopyOptions) SqlExtensions.In<SqlServerProviderAdapter.SqlBulkCopyOptions>(SqlServerProviderAdapter.SqlBulkCopyOptions, SqlServerProviderAdapter.SqlBulkCopyOptions, SqlServerProviderAdapter.SqlBulkCopyOptions) SqlExtensions.NotIn<SqlServerProviderAdapter.SqlBulkCopyOptions>(IEnumerable<SqlServerProviderAdapter.SqlBulkCopyOptions>) SqlExtensions.NotIn<SqlServerProviderAdapter.SqlBulkCopyOptions>(IQueryable<SqlServerProviderAdapter.SqlBulkCopyOptions>) SqlExtensions.NotIn<SqlServerProviderAdapter.SqlBulkCopyOptions>(SqlServerProviderAdapter.SqlBulkCopyOptions[]) SqlExtensions.NotIn<SqlServerProviderAdapter.SqlBulkCopyOptions>(SqlServerProviderAdapter.SqlBulkCopyOptions, SqlServerProviderAdapter.SqlBulkCopyOptions) SqlExtensions.NotIn<SqlServerProviderAdapter.SqlBulkCopyOptions>(SqlServerProviderAdapter.SqlBulkCopyOptions, SqlServerProviderAdapter.SqlBulkCopyOptions, SqlServerProviderAdapter.SqlBulkCopyOptions)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnection.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnection.html",
    "title": "Class SqlServerProviderAdapter.SqlConnection | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerProviderAdapter.SqlConnection Inheritance System.Object TypeWrapper SqlServerProviderAdapter.SqlConnection Implements IDisposable Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlConnection : TypeWrapper Constructors | Improve this Doc View Source SqlConnection(Object, Delegate[]) Declaration public SqlConnection(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers | Improve this Doc View Source SqlConnection(String) Declaration public SqlConnection(string connectionString) Parameters Type Name Description System.String connectionString Properties | Improve this Doc View Source ServerVersion Declaration public string ServerVersion { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateCommand() Declaration public IDbCommand CreateCommand() Returns Type Description IDbCommand | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Open() Declaration public void Open() Implements IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnectionStringBuilder.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnectionStringBuilder.html",
    "title": "Class SqlServerProviderAdapter.SqlConnectionStringBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerProviderAdapter.SqlConnectionStringBuilder Inheritance System.Object TypeWrapper SqlServerProviderAdapter.SqlConnectionStringBuilder Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlConnectionStringBuilder : TypeWrapper Constructors | Improve this Doc View Source SqlConnectionStringBuilder(Object, Delegate[]) Declaration public SqlConnectionStringBuilder(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers | Improve this Doc View Source SqlConnectionStringBuilder(String) Declaration public SqlConnectionStringBuilder(string connectionString) Parameters Type Name Description System.String connectionString Properties | Improve this Doc View Source MultipleActiveResultSets Declaration public bool MultipleActiveResultSets { get; set; } Property Value Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventArgs.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventArgs.html",
    "title": "Class SqlServerProviderAdapter.SqlRowsCopiedEventArgs | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerProviderAdapter.SqlRowsCopiedEventArgs Inheritance System.Object TypeWrapper SqlServerProviderAdapter.SqlRowsCopiedEventArgs Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlRowsCopiedEventArgs : TypeWrapper Constructors | Improve this Doc View Source SqlRowsCopiedEventArgs(Object, Delegate[]) Declaration public SqlRowsCopiedEventArgs(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source Abort Declaration public bool Abort { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RowsCopied Declaration public long RowsCopied { get; } Property Value Type Description System.Int64 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventHandler.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventHandler.html",
    "title": "Delegate SqlServerProviderAdapter.SqlRowsCopiedEventHandler | Linq To DB (aka linq2db)",
    "keywords": "Delegate SqlServerProviderAdapter.SqlRowsCopiedEventHandler Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public delegate void SqlRowsCopiedEventHandler(object sender, SqlServerProviderAdapter.SqlRowsCopiedEventArgs e); Parameters Type Name Description System.Object sender SqlServerProviderAdapter.SqlRowsCopiedEventArgs e Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlTransaction.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlTransaction.html",
    "title": "Class SqlServerProviderAdapter.SqlTransaction | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerProviderAdapter.SqlTransaction Inheritance System.Object SqlServerProviderAdapter.SqlTransaction Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlTransaction : object Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.html",
    "title": "Class SqlServerRetryPolicy | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerRetryPolicy Inheritance System.Object RetryPolicyBase SqlServerRetryPolicy Implements IRetryPolicy Inherited Members RetryPolicyBase.ExceptionsEncountered RetryPolicyBase.Random RetryPolicyBase.MaxRetryCount RetryPolicyBase.MaxRetryDelay RetryPolicyBase.Suspended RetryPolicyBase.Execute<TResult>(Func<TResult>) RetryPolicyBase.Execute(Action) RetryPolicyBase.ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) RetryPolicyBase.ExecuteAsync(Func<CancellationToken, Task>, CancellationToken) RetryPolicyBase.OnFirstExecution() RetryPolicyBase.OnRetry() Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerRetryPolicy : RetryPolicyBase, IRetryPolicy Constructors | Improve this Doc View Source SqlServerRetryPolicy() Creates a new instance of SqlServerRetryPolicy . Declaration public SqlServerRetryPolicy() Remarks The default retry limit is 5, which means that the total amount of time spent before failing is 26 seconds plus the random factor. | Improve this Doc View Source SqlServerRetryPolicy(Int32) Creates a new instance of SqlServerRetryPolicy . Declaration public SqlServerRetryPolicy(int maxRetryCount) Parameters Type Name Description System.Int32 maxRetryCount The maximum number of retry attempts. | Improve this Doc View Source SqlServerRetryPolicy(Int32, TimeSpan, Nullable<ICollection<Int32>>) Creates a new instance of SqlServerRetryPolicy . Declaration public SqlServerRetryPolicy(int maxRetryCount, TimeSpan maxRetryDelay, ICollection<int>? errorNumbersToAdd) Parameters Type Name Description System.Int32 maxRetryCount The maximum number of retry attempts. TimeSpan maxRetryDelay The maximum delay in milliseconds between retries. System.Nullable < ICollection < System.Int32 >> errorNumbersToAdd Additional SQL error numbers that should be considered transient. Methods | Improve this Doc View Source GetNextDelay(Exception) Declaration protected override TimeSpan? GetNextDelay(Exception lastException) Parameters Type Name Description Exception lastException Returns Type Description System.Nullable < TimeSpan > Overrides RetryPolicyBase.GetNextDelay(Exception) | Improve this Doc View Source ShouldRetryOn(Exception) Declaration protected override bool ShouldRetryOn(Exception exception) Parameters Type Name Description Exception exception Returns Type Description System.Boolean Overrides RetryPolicyBase.ShouldRetryOn(Exception) Implements IRetryPolicy Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.html",
    "title": "Class SqlServerTools | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerTools Inheritance System.Object SqlServerTools Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public static class SqlServerTools : object Fields | Improve this Doc View Source DataReaderGetDecimal Declaration public static Func<IDataReader, int, decimal> DataReaderGetDecimal Field Value Type Description Func < IDataReader , System.Int32 , System.Decimal > | Improve this Doc View Source DataReaderGetMoney Declaration public static Func<IDataReader, int, decimal> DataReaderGetMoney Field Value Type Description Func < IDataReader , System.Int32 , System.Decimal > | Improve this Doc View Source Provider Declaration public static SqlServerProvider Provider Field Value Type Description SqlServerProvider Properties | Improve this Doc View Source AutoDetectProvider Declaration public static bool AutoDetectProvider { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DefaultBulkCopyType Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType Methods | Improve this Doc View Source CreateDataConnection(IDbConnection, SqlServerVersion, SqlServerProvider) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, SqlServerVersion version = SqlServerVersion.v2008, SqlServerProvider provider = SqlServerProvider.SystemDataSqlClient) Parameters Type Name Description IDbConnection connection SqlServerVersion version SqlServerProvider provider Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, SqlServerVersion, SqlServerProvider) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, SqlServerVersion version = SqlServerVersion.v2008, SqlServerProvider provider = SqlServerProvider.SystemDataSqlClient) Parameters Type Name Description IDbTransaction transaction SqlServerVersion version SqlServerProvider provider Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, SqlServerVersion, SqlServerProvider) Declaration public static DataConnection CreateDataConnection(string connectionString, SqlServerVersion version = SqlServerVersion.v2008, SqlServerProvider provider = SqlServerProvider.SystemDataSqlClient) Parameters Type Name Description System.String connectionString SqlServerVersion version SqlServerProvider provider Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider(SqlServerVersion, SqlServerProvider) Declaration public static IDataProvider GetDataProvider(SqlServerVersion version = SqlServerVersion.v2008, SqlServerProvider provider = SqlServerProvider.SystemDataSqlClient) Parameters Type Name Description SqlServerVersion version SqlServerProvider provider Returns Type Description IDataProvider | Improve this Doc View Source ProviderSpecificBulkCopy<T>(DataConnection, IEnumerable<T>, Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied ProviderSpecificBulkCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int? maxBatchSize = null, int? bulkCopyTimeout = null, bool keepIdentity = false, bool checkConstraints = false, int notifyAfter = 0, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Nullable < System.Int32 > maxBatchSize System.Nullable < System.Int32 > bulkCopyTimeout System.Boolean keepIdentity System.Boolean checkConstraints System.Int32 notifyAfter System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSqlTypes(Assembly) Registers spatial types assembly (Microsoft.SqlServer.Types). Also check https://linq2db.github.io/articles/FAQ.html#how-can-i-use-sql-server-spatial-types for additional required configuration steps. Declaration public static void ResolveSqlTypes(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveSqlTypes(String) Tries to load and register spatial types using provided path to types assembly (Microsoft.SqlServer.Types). Also check https://linq2db.github.io/articles/FAQ.html#how-can-i-use-sql-server-spatial-types for additional required configuration steps. Declaration public static void ResolveSqlTypes(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.Sql.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerTools.Sql.html",
    "title": "Class SqlServerTools.Sql | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerTools.Sql Inheritance System.Object SqlServerTools.Sql Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public static class Sql : object Fields | Improve this Doc View Source OptionRecompile Declaration public const string OptionRecompile = null Field Value Type Description System.String"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerTransientExceptionDetector.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerTransientExceptionDetector.html",
    "title": "Class SqlServerTransientExceptionDetector | Linq To DB (aka linq2db)",
    "keywords": "Class SqlServerTransientExceptionDetector Detects the exceptions caused by SQL Server transient failures. Inheritance System.Object SqlServerTransientExceptionDetector Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public class SqlServerTransientExceptionDetector : object Methods | Improve this Doc View Source ShouldRetryOn(Exception) Declaration public static bool ShouldRetryOn(Exception ex) Parameters Type Name Description Exception ex Returns Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.SqlServer.SqlServerVersion.html": {
    "href": "api/LinqToDB.DataProvider.SqlServer.SqlServerVersion.html",
    "title": "Enum SqlServerVersion | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlServerVersion Namespace : LinqToDB.DataProvider.SqlServer Assembly : linq2db.dll Syntax public enum SqlServerVersion : int Fields Name Description v2000 v2005 v2008 v2012 v2016 v2017 Extension Methods Map.DeepCopy<SqlServerVersion>() Sql.IsDistinctFrom<SqlServerVersion>(SqlServerVersion) Sql.IsDistinctFrom<SqlServerVersion>(Nullable<SqlServerVersion>) Sql.IsNotDistinctFrom<SqlServerVersion>(SqlServerVersion) Sql.IsNotDistinctFrom<SqlServerVersion>(Nullable<SqlServerVersion>) SqlExtensions.In<SqlServerVersion>(IEnumerable<SqlServerVersion>) SqlExtensions.In<SqlServerVersion>(IQueryable<SqlServerVersion>) SqlExtensions.In<SqlServerVersion>(SqlServerVersion[]) SqlExtensions.In<SqlServerVersion>(SqlServerVersion, SqlServerVersion) SqlExtensions.In<SqlServerVersion>(SqlServerVersion, SqlServerVersion, SqlServerVersion) SqlExtensions.NotIn<SqlServerVersion>(IEnumerable<SqlServerVersion>) SqlExtensions.NotIn<SqlServerVersion>(IQueryable<SqlServerVersion>) SqlExtensions.NotIn<SqlServerVersion>(SqlServerVersion[]) SqlExtensions.NotIn<SqlServerVersion>(SqlServerVersion, SqlServerVersion) SqlExtensions.NotIn<SqlServerVersion>(SqlServerVersion, SqlServerVersion, SqlServerVersion)"
  },
  "api/LinqToDB.DataProvider.Sybase.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.html",
    "title": "Namespace LinqToDB.DataProvider.Sybase | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.DataProvider.Sybase Classes SybaseDataProvider SybaseMappingSchema SybaseMappingSchema.ManagedMappingSchema SybaseMappingSchema.NativeMappingSchema SybaseProviderAdapter SybaseProviderAdapter.AseBulkCopy SybaseProviderAdapter.AseBulkCopyColumnMapping SybaseProviderAdapter.AseBulkCopyColumnMappingCollection SybaseProviderAdapter.AseConnection SybaseProviderAdapter.AseRowsCopiedEventArgs SybaseProviderAdapter.AseTransaction SybaseProviderAdapter.BulkCopyAdapter SybaseTools Enums SybaseProviderAdapter.AseBulkCopyOptions SybaseProviderAdapter.AseDbType Delegates SybaseProviderAdapter.AseRowsCopiedEventHandler"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseDataProvider.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseDataProvider.html",
    "title": "Class SybaseDataProvider | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseDataProvider Inheritance System.Object DataProviderBase DynamicDataProviderBase < SybaseProviderAdapter > SybaseDataProvider Implements IDataProvider Inherited Members DynamicDataProviderBase<SybaseProviderAdapter>.GetProviderSpecificValueReaderMethod DynamicDataProviderBase<SybaseProviderAdapter>.Adapter DynamicDataProviderBase<SybaseProviderAdapter>.ConnectionNamespace DynamicDataProviderBase<SybaseProviderAdapter>.DataReaderType DynamicDataProviderBase<SybaseProviderAdapter>.CreateConnectionInternal(String) DynamicDataProviderBase<SybaseProviderAdapter>.SetField(Type, String, String, Boolean, Nullable<Type>) DynamicDataProviderBase<SybaseProviderAdapter>.SetProviderField<TField>(String, Nullable<Type>) DynamicDataProviderBase<SybaseProviderAdapter>.SetProviderField(Type, String, Nullable<Type>) DynamicDataProviderBase<SybaseProviderAdapter>.SetToTypeField(Type, String, Nullable<Type>) DynamicDataProviderBase<SybaseProviderAdapter>.SetProviderField<TTo, TField>(String, Boolean, Nullable<Type>) DynamicDataProviderBase<SybaseProviderAdapter>.SetProviderField(Type, Type, String, Boolean, Nullable<Type>) DynamicDataProviderBase<SybaseProviderAdapter>.TryGetProviderParameter(IDbDataParameter, MappingSchema) DynamicDataProviderBase<SybaseProviderAdapter>.TryGetProviderCommand(IDbCommand, MappingSchema) DynamicDataProviderBase<SybaseProviderAdapter>.TryGetProviderConnection(IDbConnection, MappingSchema) DynamicDataProviderBase<SybaseProviderAdapter>.TryGetProviderTransaction(IDbTransaction, MappingSchema) DataProviderBase.Name DataProviderBase.MappingSchema DataProviderBase.SqlProviderFlags DataProviderBase.OnConnectionCreated DataProviderBase.CreateConnection(String) DataProviderBase.InitCommand(DataConnection, CommandType, String, DataParameter[], Boolean) DataProviderBase.DisposeCommand(DataConnection) DataProviderBase.GetConnectionInfo(DataConnection, String) DataProviderBase.GetCommandBehavior(CommandBehavior) DataProviderBase.ExecuteScope(DataConnection) DataProviderBase.ReaderExpressions DataProviderBase.SetCharField(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetCharFieldToType<T>(String, Expression<Func<IDataReader, Int32, String>>) DataProviderBase.SetField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.SetField<TP, T>(String, Type, Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetProviderField<TP, T, TS>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(Expression<Func<TP, Int32, T>>) DataProviderBase.SetToType<TP, T, TF>(String, Expression<Func<TP, Int32, T>>) DataProviderBase.NormalizeTypeName(Nullable<String>) DataProviderBase.GetReaderExpression(IDataReader, Int32, Expression, Type) DataProviderBase.FindExpression(ReaderInfo, Nullable<Expression>) DataProviderBase.IsDBNullAllowed(IDataReader, Int32) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class SybaseDataProvider : DynamicDataProviderBase<SybaseProviderAdapter>, IDataProvider Constructors | Improve this Doc View Source SybaseDataProvider(String) Declaration public SybaseDataProvider(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source SupportedTableOptions Declaration public override TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Overrides DataProviderBase.SupportedTableOptions Methods | Improve this Doc View Source BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) Declaration public override BulkCopyRowsCopied BulkCopy<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>) | Improve this Doc View Source BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) Declaration public override Task<BulkCopyRowsCopied> BulkCopyAsync<T>(ITable<T> table, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken) Parameters Type Name Description ITable <T> table BulkCopyOptions options IEnumerable <T> source CancellationToken cancellationToken Returns Type Description Task < BulkCopyRowsCopied > Type Parameters Name Description T Overrides LinqToDB.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.ITable<T>, LinqToDB.Data.BulkCopyOptions, IEnumerable<T>, CancellationToken) | Improve this Doc View Source ConvertParameterType(Type, DbDataType) Declaration public override Type ConvertParameterType(Type type, DbDataType dataType) Parameters Type Name Description Type type DbDataType dataType Returns Type Description Type Overrides DataProviderBase.ConvertParameterType(Type, DbDataType) | Improve this Doc View Source CreateSqlBuilder(MappingSchema) Declaration public override ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description ISqlBuilder Overrides DataProviderBase.CreateSqlBuilder(MappingSchema) | Improve this Doc View Source GetSchemaProvider() Declaration public override ISchemaProvider GetSchemaProvider() Returns Type Description ISchemaProvider Overrides DataProviderBase.GetSchemaProvider() | Improve this Doc View Source GetSqlOptimizer() Declaration public override ISqlOptimizer GetSqlOptimizer() Returns Type Description ISqlOptimizer Overrides DataProviderBase.GetSqlOptimizer() | Improve this Doc View Source SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) Declaration public override void SetParameter(DataConnection dataConnection, IDbDataParameter parameter, string name, DbDataType dataType, object? value) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter System.String name DbDataType dataType System.Nullable < System.Object > value Overrides DataProviderBase.SetParameter(DataConnection, IDbDataParameter, String, DbDataType, Nullable<Object>) | Improve this Doc View Source SetParameterType(DataConnection, IDbDataParameter, DbDataType) Declaration protected override void SetParameterType(DataConnection dataConnection, IDbDataParameter parameter, DbDataType dataType) Parameters Type Name Description DataConnection dataConnection IDbDataParameter parameter DbDataType dataType Overrides DataProviderBase.SetParameterType(DataConnection, IDbDataParameter, DbDataType) Implements IDataProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.html",
    "title": "Class SybaseMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseMappingSchema Inheritance System.Object MappingSchema SybaseMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class SybaseMappingSchema : MappingSchema Constructors | Improve this Doc View Source SybaseMappingSchema() Declaration public SybaseMappingSchema() | Improve this Doc View Source SybaseMappingSchema(String) Declaration protected SybaseMappingSchema(string configuration) Parameters Type Name Description System.String configuration Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.ManagedMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.ManagedMappingSchema.html",
    "title": "Class SybaseMappingSchema.ManagedMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseMappingSchema.ManagedMappingSchema Inheritance System.Object MappingSchema SybaseMappingSchema.ManagedMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class ManagedMappingSchema : MappingSchema Constructors | Improve this Doc View Source ManagedMappingSchema() Declaration public ManagedMappingSchema() Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.NativeMappingSchema.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseMappingSchema.NativeMappingSchema.html",
    "title": "Class SybaseMappingSchema.NativeMappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseMappingSchema.NativeMappingSchema Inheritance System.Object MappingSchema SybaseMappingSchema.NativeMappingSchema Inherited Members MappingSchema.ValueToSqlConverter MappingSchema.SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) MappingSchema.GetDefaultValue(Type) MappingSchema.SetDefaultValue(Type, Nullable<Object>) MappingSchema.GetCanBeNull(Type) MappingSchema.SetCanBeNull(Type, Boolean) MappingSchema.InitGenericConvertProvider<T>() MappingSchema.InitGenericConvertProvider(Type[]) MappingSchema.SetGenericConvertProvider(Type) MappingSchema.ChangeTypeTo<T>(Nullable<Object>) MappingSchema.ChangeType(Nullable<Object>, Type) MappingSchema.EnumToValue(Enum) MappingSchema.TryGetConvertExpression(Type, Type) MappingSchema.GetConvertExpression<TFrom, TTo>(Boolean, Boolean) MappingSchema.GetConvertExpression(Type, Type, Boolean, Boolean) MappingSchema.GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) MappingSchema.GetConverter<TFrom, TTo>() MappingSchema.SetConvertExpression(Type, Type, LambdaExpression, Boolean) MappingSchema.SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) MappingSchema.SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>) MappingSchema.SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) MappingSchema.GenerateSafeConvert(Type, Type) MappingSchema.GenerateConvertedValueExpression(Nullable<Object>, Type) MappingSchema.SetCultureInfo(CultureInfo) MappingSchema.MetadataReader MappingSchema.AddMetadataReader(IMetadataReader) MappingSchema.GetAttributes<T>(Type, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttribute<T>(Type, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Boolean) MappingSchema.GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) MappingSchema.GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) MappingSchema.GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) MappingSchema.GetDynamicColumns(Type) MappingSchema.GetFluentMappingBuilder() MappingSchema.ConfigurationList MappingSchema.Default MappingSchema.IsScalarType(Type) MappingSchema.SetScalarType(Type, Boolean) MappingSchema.AddScalarType(Type, Nullable<Object>, DataType) MappingSchema.AddScalarType(Type, Nullable<Object>, Boolean, DataType) MappingSchema.AddScalarType(Type, DataType) MappingSchema.AddScalarType(Type, SqlDataType) MappingSchema.GetDataType(Type) MappingSchema.SetDataType(Type, DataType) MappingSchema.SetDataType(Type, SqlDataType) MappingSchema.GetUnderlyingDataType(Type, Boolean) MappingSchema.GetMapValues(Type) MappingSchema.ColumnNameComparer MappingSchema.EntityDescriptorCreatedCallback MappingSchema.GetEntityDescriptor(Type) MappingSchema.GetDefinedTypes() MappingSchema.ClearCache() MappingSchema.GetDefaultFromEnumType(Type) MappingSchema.SetDefaultFromEnumType(Type, Type) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class NativeMappingSchema : MappingSchema Constructors | Improve this Doc View Source NativeMappingSchema() Declaration public NativeMappingSchema() Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.html",
    "title": "Class SybaseProviderAdapter.AseBulkCopy | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseProviderAdapter.AseBulkCopy Inheritance System.Object TypeWrapper SybaseProviderAdapter.AseBulkCopy Implements IDisposable Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class AseBulkCopy : TypeWrapper Constructors | Improve this Doc View Source AseBulkCopy(SybaseProviderAdapter.AseConnection, SybaseProviderAdapter.AseBulkCopyOptions, SybaseProviderAdapter.AseTransaction) Declaration public AseBulkCopy(SybaseProviderAdapter.AseConnection connection, SybaseProviderAdapter.AseBulkCopyOptions options, SybaseProviderAdapter.AseTransaction transaction) Parameters Type Name Description SybaseProviderAdapter.AseConnection connection SybaseProviderAdapter.AseBulkCopyOptions options SybaseProviderAdapter.AseTransaction transaction | Improve this Doc View Source AseBulkCopy(Object, Delegate[]) Declaration public AseBulkCopy(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source BatchSize Declaration public int BatchSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source BulkCopyTimeout Declaration public int BulkCopyTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ColumnMappings Declaration public SybaseProviderAdapter.AseBulkCopyColumnMappingCollection ColumnMappings { get; } Property Value Type Description SybaseProviderAdapter.AseBulkCopyColumnMappingCollection | Improve this Doc View Source DestinationTableName Declaration public string? DestinationTableName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source NotifyAfter Declaration public int NotifyAfter { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source WriteToServer(IDataReader) Declaration public void WriteToServer(IDataReader dataReader) Parameters Type Name Description IDataReader dataReader Events | Improve this Doc View Source AseRowsCopied Declaration public event SybaseProviderAdapter.AseRowsCopiedEventHandler AseRowsCopied Event Type Type Description SybaseProviderAdapter.AseRowsCopiedEventHandler Implements IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMapping.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMapping.html",
    "title": "Class SybaseProviderAdapter.AseBulkCopyColumnMapping | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseProviderAdapter.AseBulkCopyColumnMapping Inheritance System.Object TypeWrapper SybaseProviderAdapter.AseBulkCopyColumnMapping Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class AseBulkCopyColumnMapping : TypeWrapper Constructors | Improve this Doc View Source AseBulkCopyColumnMapping(Object) Declaration public AseBulkCopyColumnMapping(object instance) Parameters Type Name Description System.Object instance | Improve this Doc View Source AseBulkCopyColumnMapping(String, String) Declaration public AseBulkCopyColumnMapping(string source, string destination) Parameters Type Name Description System.String source System.String destination Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMappingCollection.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMappingCollection.html",
    "title": "Class SybaseProviderAdapter.AseBulkCopyColumnMappingCollection | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseProviderAdapter.AseBulkCopyColumnMappingCollection Inheritance System.Object TypeWrapper SybaseProviderAdapter.AseBulkCopyColumnMappingCollection Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class AseBulkCopyColumnMappingCollection : TypeWrapper Constructors | Improve this Doc View Source AseBulkCopyColumnMappingCollection(Object, Delegate[]) Declaration public AseBulkCopyColumnMappingCollection(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Methods | Improve this Doc View Source Add(SybaseProviderAdapter.AseBulkCopyColumnMapping) Declaration public int Add(SybaseProviderAdapter.AseBulkCopyColumnMapping bulkCopyColumnMapping) Parameters Type Name Description SybaseProviderAdapter.AseBulkCopyColumnMapping bulkCopyColumnMapping Returns Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.html",
    "title": "Enum SybaseProviderAdapter.AseBulkCopyOptions | Linq To DB (aka linq2db)",
    "keywords": "Enum SybaseProviderAdapter.AseBulkCopyOptions Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public enum AseBulkCopyOptions : int Fields Name Description CheckConstraints Default EnableBulkLoad_0 EnableBulkLoad_1 EnableBulkLoad_2 FireTriggers KeepIdentity KeepNulls TableLock UseInternalTransaction Extension Methods Map.DeepCopy<SybaseProviderAdapter.AseBulkCopyOptions>() Sql.IsDistinctFrom<SybaseProviderAdapter.AseBulkCopyOptions>(SybaseProviderAdapter.AseBulkCopyOptions) Sql.IsDistinctFrom<SybaseProviderAdapter.AseBulkCopyOptions>(Nullable<SybaseProviderAdapter.AseBulkCopyOptions>) Sql.IsNotDistinctFrom<SybaseProviderAdapter.AseBulkCopyOptions>(SybaseProviderAdapter.AseBulkCopyOptions) Sql.IsNotDistinctFrom<SybaseProviderAdapter.AseBulkCopyOptions>(Nullable<SybaseProviderAdapter.AseBulkCopyOptions>) SqlExtensions.In<SybaseProviderAdapter.AseBulkCopyOptions>(IEnumerable<SybaseProviderAdapter.AseBulkCopyOptions>) SqlExtensions.In<SybaseProviderAdapter.AseBulkCopyOptions>(IQueryable<SybaseProviderAdapter.AseBulkCopyOptions>) SqlExtensions.In<SybaseProviderAdapter.AseBulkCopyOptions>(SybaseProviderAdapter.AseBulkCopyOptions[]) SqlExtensions.In<SybaseProviderAdapter.AseBulkCopyOptions>(SybaseProviderAdapter.AseBulkCopyOptions, SybaseProviderAdapter.AseBulkCopyOptions) SqlExtensions.In<SybaseProviderAdapter.AseBulkCopyOptions>(SybaseProviderAdapter.AseBulkCopyOptions, SybaseProviderAdapter.AseBulkCopyOptions, SybaseProviderAdapter.AseBulkCopyOptions) SqlExtensions.NotIn<SybaseProviderAdapter.AseBulkCopyOptions>(IEnumerable<SybaseProviderAdapter.AseBulkCopyOptions>) SqlExtensions.NotIn<SybaseProviderAdapter.AseBulkCopyOptions>(IQueryable<SybaseProviderAdapter.AseBulkCopyOptions>) SqlExtensions.NotIn<SybaseProviderAdapter.AseBulkCopyOptions>(SybaseProviderAdapter.AseBulkCopyOptions[]) SqlExtensions.NotIn<SybaseProviderAdapter.AseBulkCopyOptions>(SybaseProviderAdapter.AseBulkCopyOptions, SybaseProviderAdapter.AseBulkCopyOptions) SqlExtensions.NotIn<SybaseProviderAdapter.AseBulkCopyOptions>(SybaseProviderAdapter.AseBulkCopyOptions, SybaseProviderAdapter.AseBulkCopyOptions, SybaseProviderAdapter.AseBulkCopyOptions)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseConnection.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseConnection.html",
    "title": "Class SybaseProviderAdapter.AseConnection | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseProviderAdapter.AseConnection Inheritance System.Object SybaseProviderAdapter.AseConnection Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class AseConnection : object Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.html",
    "title": "Enum SybaseProviderAdapter.AseDbType | Linq To DB (aka linq2db)",
    "keywords": "Enum SybaseProviderAdapter.AseDbType Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public enum AseDbType : int Fields Name Description BigDateTime BigInt Binary Bit Char Date DateTime Decimal Double Image Integer Money NChar Numeric NVarChar Real SmallDateTime SmallInt SmallMoney Text Time TimeStamp TinyInt UniChar Unitext UniVarChar UnsignedBigInt UnsignedInt UnsignedSmallInt Unsupported VarBinary VarChar Extension Methods Map.DeepCopy<SybaseProviderAdapter.AseDbType>() Sql.IsDistinctFrom<SybaseProviderAdapter.AseDbType>(SybaseProviderAdapter.AseDbType) Sql.IsDistinctFrom<SybaseProviderAdapter.AseDbType>(Nullable<SybaseProviderAdapter.AseDbType>) Sql.IsNotDistinctFrom<SybaseProviderAdapter.AseDbType>(SybaseProviderAdapter.AseDbType) Sql.IsNotDistinctFrom<SybaseProviderAdapter.AseDbType>(Nullable<SybaseProviderAdapter.AseDbType>) SqlExtensions.In<SybaseProviderAdapter.AseDbType>(IEnumerable<SybaseProviderAdapter.AseDbType>) SqlExtensions.In<SybaseProviderAdapter.AseDbType>(IQueryable<SybaseProviderAdapter.AseDbType>) SqlExtensions.In<SybaseProviderAdapter.AseDbType>(SybaseProviderAdapter.AseDbType[]) SqlExtensions.In<SybaseProviderAdapter.AseDbType>(SybaseProviderAdapter.AseDbType, SybaseProviderAdapter.AseDbType) SqlExtensions.In<SybaseProviderAdapter.AseDbType>(SybaseProviderAdapter.AseDbType, SybaseProviderAdapter.AseDbType, SybaseProviderAdapter.AseDbType) SqlExtensions.NotIn<SybaseProviderAdapter.AseDbType>(IEnumerable<SybaseProviderAdapter.AseDbType>) SqlExtensions.NotIn<SybaseProviderAdapter.AseDbType>(IQueryable<SybaseProviderAdapter.AseDbType>) SqlExtensions.NotIn<SybaseProviderAdapter.AseDbType>(SybaseProviderAdapter.AseDbType[]) SqlExtensions.NotIn<SybaseProviderAdapter.AseDbType>(SybaseProviderAdapter.AseDbType, SybaseProviderAdapter.AseDbType) SqlExtensions.NotIn<SybaseProviderAdapter.AseDbType>(SybaseProviderAdapter.AseDbType, SybaseProviderAdapter.AseDbType, SybaseProviderAdapter.AseDbType)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventArgs.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventArgs.html",
    "title": "Class SybaseProviderAdapter.AseRowsCopiedEventArgs | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseProviderAdapter.AseRowsCopiedEventArgs Inheritance System.Object TypeWrapper SybaseProviderAdapter.AseRowsCopiedEventArgs Inherited Members TypeWrapper.instance_ TypeWrapper.CompiledWrappers TypeWrapper.PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class AseRowsCopiedEventArgs : TypeWrapper Constructors | Improve this Doc View Source AseRowsCopiedEventArgs(Object, Delegate[]) Declaration public AseRowsCopiedEventArgs(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Delegate [] wrappers Properties | Improve this Doc View Source Abort Declaration public bool Abort { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RowCopied Declaration public int RowCopied { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventHandler.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventHandler.html",
    "title": "Delegate SybaseProviderAdapter.AseRowsCopiedEventHandler | Linq To DB (aka linq2db)",
    "keywords": "Delegate SybaseProviderAdapter.AseRowsCopiedEventHandler Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public delegate void AseRowsCopiedEventHandler(object sender, SybaseProviderAdapter.AseRowsCopiedEventArgs e); Parameters Type Name Description System.Object sender SybaseProviderAdapter.AseRowsCopiedEventArgs e Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseTransaction.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseTransaction.html",
    "title": "Class SybaseProviderAdapter.AseTransaction | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseProviderAdapter.AseTransaction Inheritance System.Object SybaseProviderAdapter.AseTransaction Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class AseTransaction : object Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.BulkCopyAdapter.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.BulkCopyAdapter.html",
    "title": "Class SybaseProviderAdapter.BulkCopyAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseProviderAdapter.BulkCopyAdapter Inheritance System.Object SybaseProviderAdapter.BulkCopyAdapter Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class BulkCopyAdapter : object Properties | Improve this Doc View Source Create Declaration public Func<IDbConnection, SybaseProviderAdapter.AseBulkCopyOptions, IDbTransaction?, SybaseProviderAdapter.AseBulkCopy> Create { get; } Property Value Type Description Func < IDbConnection , SybaseProviderAdapter.AseBulkCopyOptions , System.Nullable < IDbTransaction >, SybaseProviderAdapter.AseBulkCopy > | Improve this Doc View Source CreateColumnMapping Declaration public Func<string, string, SybaseProviderAdapter.AseBulkCopyColumnMapping> CreateColumnMapping { get; } Property Value Type Description Func < System.String , System.String , SybaseProviderAdapter.AseBulkCopyColumnMapping > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.html",
    "title": "Class SybaseProviderAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseProviderAdapter Inheritance System.Object SybaseProviderAdapter Implements IDynamicProviderAdapter Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public class SybaseProviderAdapter : object, IDynamicProviderAdapter Fields | Improve this Doc View Source ManagedAssemblyName Declaration public const string ManagedAssemblyName = null Field Value Type Description System.String | Improve this Doc View Source ManagedClientNamespace Declaration public const string ManagedClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source NativeAssemblyName Declaration public const string NativeAssemblyName = null Field Value Type Description System.String | Improve this Doc View Source NativeClientNamespace Declaration public const string NativeClientNamespace = null Field Value Type Description System.String | Improve this Doc View Source NativeProviderFactoryName Declaration public const string NativeProviderFactoryName = null Field Value Type Description System.String Properties | Improve this Doc View Source BulkCopy Declaration public SybaseProviderAdapter.BulkCopyAdapter BulkCopy { get; } Property Value Type Description SybaseProviderAdapter.BulkCopyAdapter | Improve this Doc View Source CommandType Declaration public Type CommandType { get; } Property Value Type Description Type | Improve this Doc View Source ConnectionType Declaration public Type ConnectionType { get; } Property Value Type Description Type | Improve this Doc View Source DataReaderType Declaration public Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source GetDbType Declaration public Func<IDbDataParameter, SybaseProviderAdapter.AseDbType> GetDbType { get; } Property Value Type Description Func < IDbDataParameter , SybaseProviderAdapter.AseDbType > | Improve this Doc View Source ParameterType Declaration public Type ParameterType { get; } Property Value Type Description Type | Improve this Doc View Source SetDbType Declaration public Action<IDbDataParameter, SybaseProviderAdapter.AseDbType> SetDbType { get; } Property Value Type Description Action < IDbDataParameter , SybaseProviderAdapter.AseDbType > | Improve this Doc View Source TransactionType Declaration public Type TransactionType { get; } Property Value Type Description Type Methods | Improve this Doc View Source GetInstance(String) Declaration public static SybaseProviderAdapter GetInstance(string name) Parameters Type Name Description System.String name Returns Type Description SybaseProviderAdapter Implements IDynamicProviderAdapter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.DataProvider.Sybase.SybaseTools.html": {
    "href": "api/LinqToDB.DataProvider.Sybase.SybaseTools.html",
    "title": "Class SybaseTools | Linq To DB (aka linq2db)",
    "keywords": "Class SybaseTools Inheritance System.Object SybaseTools Namespace : LinqToDB.DataProvider.Sybase Assembly : linq2db.dll Syntax public static class SybaseTools : object Properties | Improve this Doc View Source DefaultBulkCopyType Using ProviderSpecific mode with bit and identity fields could lead to following errors: bit: false inserted into bit field for first record even if true provided; identity: bulk copy operation fail with exception: \"Bulk insert failed. Null value is not allowed in not null column.\". Those are provider bugs and could be fixed in latest versions. Declaration public static BulkCopyType DefaultBulkCopyType { get; set; } Property Value Type Description BulkCopyType | Improve this Doc View Source DetectedProviderName Declaration public static string DetectedProviderName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateDataConnection(IDbConnection, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbConnection connection, string? providerName = null) Parameters Type Name Description IDbConnection connection System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(IDbTransaction, Nullable<String>) Declaration public static DataConnection CreateDataConnection(IDbTransaction transaction, string? providerName = null) Parameters Type Name Description IDbTransaction transaction System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source CreateDataConnection(String, Nullable<String>) Declaration public static DataConnection CreateDataConnection(string connectionString, string? providerName = null) Parameters Type Name Description System.String connectionString System.Nullable < System.String > providerName Returns Type Description DataConnection | Improve this Doc View Source GetDataProvider(Nullable<String>, Nullable<String>) Declaration public static IDataProvider GetDataProvider(string? providerName = null, string? assemblyName = null) Parameters Type Name Description System.Nullable < System.String > providerName System.Nullable < System.String > assemblyName Returns Type Description IDataProvider | Improve this Doc View Source MultipleRowsCopy<T>(DataConnection, IEnumerable<T>, Int32, Nullable<Action<BulkCopyRowsCopied>>) Declaration public static BulkCopyRowsCopied MultipleRowsCopy<T>(DataConnection dataConnection, IEnumerable<T> source, int maxBatchSize = 1000, Action<BulkCopyRowsCopied>? rowsCopiedCallback = null) where T : class Parameters Type Name Description DataConnection dataConnection IEnumerable <T> source System.Int32 maxBatchSize System.Nullable < Action < BulkCopyRowsCopied >> rowsCopiedCallback Returns Type Description BulkCopyRowsCopied Type Parameters Name Description T | Improve this Doc View Source ResolveSybase(Assembly) Declaration public static void ResolveSybase(Assembly assembly) Parameters Type Name Description Assembly assembly | Improve this Doc View Source ResolveSybase(String) Declaration public static void ResolveSybase(string path) Parameters Type Name Description System.String path"
  },
  "api/LinqToDB.DataType.html": {
    "href": "api/LinqToDB.DataType.html",
    "title": "Enum DataType | Linq To DB (aka linq2db)",
    "keywords": "Enum DataType List of data types, supported by linq2db. Provider-level support depends on database capabilities and current implementation support level and could vary for different providers. Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum DataType : int Fields Name Description BFile Oracle BFILE data type. Binary A fixed-length stream of binary data ranging between 1 and 8,000 bytes. BinaryJson Binary type utilized postgres provider (jsonb). BitArray Array of bits. Blob Binary large object. Boolean A simple type representing Boolean values of true or false. Byte An 8-bit unsigned integer ranging in value from 0 to 255. Char A fixed-length stream of non-Unicode characters ranging between 1 and 8,000 characters. Cursor Result set (for example OracleDbType.RefCursor). Date A type representing a date value. DateTime Date and time data ranging in value from January 1, 1753 to December 31, 9999 to an accuracy of 3.33 milliseconds. DateTime2 Date and time data. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds. DateTimeOffset Date and time data with time zone awareness. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds. Time zone value range is -14:00 through +14:00. DecFloat Type representing number with fixed precision and floating scale. Decimal A simple type representing values with fixed precision and scale numbers. When maximum precision is used, valid values are from -10^38+1 through 10^38-1. Dictionary Dictionary type for key-value pairs. Double A floating point number within the range of -1.79E +308 through 1.79E +308. Guid A globally unique identifier (or GUID). Image A variable-length stream of binary data ranging from 0 to 2 31 -1 (or 2,147,483,647) bytes. Int128 An integral type representing signed 128-bit integers with values between -170141183460469231731687303715884105728 and 170141183460469231731687303715884105727. Int16 An integral type representing signed 16-bit integers with values between -32768 and 32767. Int32 An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647. Int64 An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807. Interval PostgreSQL interval type. Json Json type utilized in postgres provider. Long Oracle data type for storing character data of variable length up to 2 Gigabytes in length (bigger version of the VARCHAR2 datatype). LongRaw Oracle data type for storing binary data of variable length up to 2 Gigabytes in length. Money A currency value ranging from -2 63 (or -9,223,372,036,854,775,808) to 2 63 -1 (or +9,223,372,036,854,775,807) with an accuracy to a ten-thousandth of a currency unit. NChar A fixed-length stream of Unicode characters ranging between 1 and 4,000 characters. NText A variable-length stream of Unicode data with a maximum length of 2 30 - 1 (or 1,073,741,823) characters. NVarChar A variable-length stream of Unicode characters ranging between 1 and 4,000 characters. Implicit conversion fails if the string is greater than 4,000 characters. Oracle: We need NVarChar2 in order to insert UTF8 string values. The default Odp VarChar2 dbtype doesnt work with UTF8 values. Note : Microsoft oracle client uses NVarChar value by default. Same as VARCHAR2 except that the column stores values in the National CS , ie you can store values in Bangla if your National CS is BN8BSCII .If the National CS is of fixed width CS (all characters are represented by a fixed byte ,say 2 bytes for JA16EUCFIXED) , then NVARCHAR2(30) stores 30 Characters. Varchar2 works with 8 bit characters where as Nvarchar2 works ith 16 bit characters. If you have to store data other than english prefer Nvarchar2 or viceversa. NCHAR and NVARCHAR2 are Unicode datatypes that store Unicode character data. The character set of NCHAR and NVARCHAR2 datatypes can only be either AL16UTF16 or UTF8 and is specified at database creation time as the national character set. AL16UTF16 and UTF8 are both Unicode encoding. The NCHAR datatype stores fixed-length character strings that correspond to the national character set.The NVARCHAR2 datatype stores variable length character strings. When you create a table with an NCHAR or NVARCHAR2 column, the maximum size specified is always in character length semantics. Character length semantics is the default and only length semantics for NCHAR or NVARCHAR2. For example, if national character set is UTF8, then the following statement defines the maximum byte length of 90 bytes: CREATE TABLE tab1 (col1 NCHAR(30)); This statement creates a column with maximum character length of 30. The maximum byte length is the multiple of the maximum character length and the maximum number of bytes in each character. The maximum length of an NVARCHAR2 column is 4000 bytes. It can hold up to 4000 characters. The actual data is subject to the maximum byte limit of 4000. The two size constraints must be satisfied simultaneously at run time. SByte An integral type representing signed 8-bit integers with values between -128 and 127. Single A floating point number within the range of -3.40E +38 through 3.40E +38. SmallDateTime Date and time data ranging in value from January 1, 1900 to June 6, 2079 to an accuracy of one minute. SmallMoney A currency value ranging from -214,748.3648 to +214,748.3647 with an accuracy to a ten-thousandth of a currency unit. Structured SQL Server 2008+ table-valued parameter type (TVP). Text A variable-length stream of non-Unicode data with a maximum length of 2 31 -1 (or 2,147,483,647) characters. Time A type representing a time value. Timestamp Array of type Byte. Automatically generated binary numbers, which are guaranteed to be unique within a database. timestamp is used typically as a mechanism for version-stamping table rows. The storage size is 8 bytes. TimeTZ Type representing a time value with timezone or offset. Udt A SQL Server 2005 user-defined type (UDT). UInt16 An integral type representing unsigned 16-bit integers with values between 0 and 65535. UInt32 An integral type representing unsigned 32-bit integers with values between 0 and 4294967295. UInt64 An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615. Undefined Undefined data type. VarBinary A variable-length stream of binary data ranging between 1 and 8,000 bytes. Implicit conversion fails if the byte array is greater than 8,000 bytes. VarChar A variable-length stream of non-Unicode characters ranging between 1 and 8,000 characters. Use VarChar when the database column is varchar(max). Variant A general type representing any reference or value type not explicitly represented by another DataType value. VarNumeric A variable-length numeric value. Xml An XML value. Obtain the XML as a string using the GetValue method or Value property, or as an XmlReader by calling the CreateReader method. Extension Methods Map.DeepCopy<DataType>() Sql.IsDistinctFrom<DataType>(DataType) Sql.IsDistinctFrom<DataType>(Nullable<DataType>) Sql.IsNotDistinctFrom<DataType>(DataType) Sql.IsNotDistinctFrom<DataType>(Nullable<DataType>) SqlExtensions.In<DataType>(IEnumerable<DataType>) SqlExtensions.In<DataType>(IQueryable<DataType>) SqlExtensions.In<DataType>(DataType[]) SqlExtensions.In<DataType>(DataType, DataType) SqlExtensions.In<DataType>(DataType, DataType, DataType) SqlExtensions.NotIn<DataType>(IEnumerable<DataType>) SqlExtensions.NotIn<DataType>(IQueryable<DataType>) SqlExtensions.NotIn<DataType>(DataType[]) SqlExtensions.NotIn<DataType>(DataType, DataType) SqlExtensions.NotIn<DataType>(DataType, DataType, DataType)"
  },
  "api/LinqToDB.EntityCreatedEventArgs.html": {
    "href": "api/LinqToDB.EntityCreatedEventArgs.html",
    "title": "Class EntityCreatedEventArgs | Linq To DB (aka linq2db)",
    "keywords": "Class EntityCreatedEventArgs Provides data for the OnEntityCreated event. Inheritance System.Object EntityCreatedEventArgs Namespace : LinqToDB Assembly : linq2db.dll Syntax public class EntityCreatedEventArgs : object Properties | Improve this Doc View Source DatabaseName DatabaseName of the current entity Declaration public string? DatabaseName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataContext DataContext that created a new entity. Declaration public IDataContext DataContext { get; set; } Property Value Type Description IDataContext | Improve this Doc View Source Entity Get or sets the entity that created. Declaration public object Entity { get; set; } Property Value Type Description System.Object | Improve this Doc View Source SchemaName SchemaName of the current entity Declaration public string? SchemaName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ServerName SchemaName of the current entity Declaration public string? ServerName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TableName TableName of the current entity Declaration public string? TableName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TableOptions TableOptions of the current entity Declaration public TableOptions TableOptions { get; set; } Property Value Type Description TableOptions Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityFrameworkCore.EFConnectionInfo.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.EFConnectionInfo.html",
    "title": "Class EFConnectionInfo | Linq To DB (aka linq2db)",
    "keywords": "Class EFConnectionInfo Contains database connectivity information, extracted from EF.Core. Inheritance System.Object EFConnectionInfo Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public class EFConnectionInfo : object Properties | Improve this Doc View Source Connection Gets or sets database connection instance. Declaration public DbConnection? Connection { get; set; } Property Value Type Description System.Nullable < DbConnection > | Improve this Doc View Source ConnectionString Gets or sets database connection string. Declaration public string? ConnectionString { get; set; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityFrameworkCore.EFForEFExtensions.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.EFForEFExtensions.html",
    "title": "Class EFForEFExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class EFForEFExtensions Provides conflict-less mappings to extensions. Inheritance System.Object EFForEFExtensions Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public static class EFForEFExtensions : object Methods | Improve this Doc View Source AllAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<bool> AllAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken cancellationToken Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsyncEF<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<bool> AnyAsyncEF<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken cancellationToken Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<bool> AnyAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken cancellationToken Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncEF(IQueryable<Decimal>, CancellationToken) Declaration public static Task<decimal> AverageAsyncEF(this IQueryable<decimal> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Decimal > source CancellationToken cancellationToken Returns Type Description Task < System.Decimal > | Improve this Doc View Source AverageAsyncEF(IQueryable<Double>, CancellationToken) Declaration public static Task<double> AverageAsyncEF(this IQueryable<double> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Double > source CancellationToken cancellationToken Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsyncEF(IQueryable<Int32>, CancellationToken) Declaration public static Task<double> AverageAsyncEF(this IQueryable<int> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Int32 > source CancellationToken cancellationToken Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsyncEF(IQueryable<Int64>, CancellationToken) Declaration public static Task<double> AverageAsyncEF(this IQueryable<long> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Int64 > source CancellationToken cancellationToken Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsyncEF(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public static Task<decimal?> AverageAsyncEF(this IQueryable<decimal?> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Nullable < System.Decimal >> source CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Decimal >> | Improve this Doc View Source AverageAsyncEF(IQueryable<Nullable<Double>>, CancellationToken) Declaration public static Task<double?> AverageAsyncEF(this IQueryable<double?> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Nullable < System.Double >> source CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsyncEF(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public static Task<double?> AverageAsyncEF(this IQueryable<int?> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int32 >> source CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsyncEF(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public static Task<double?> AverageAsyncEF(this IQueryable<long?> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int64 >> source CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsyncEF(IQueryable<Nullable<Single>>, CancellationToken) Declaration public static Task<float?> AverageAsyncEF(this IQueryable<float?> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Nullable < System.Single >> source CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Single >> | Improve this Doc View Source AverageAsyncEF(IQueryable<Single>, CancellationToken) Declaration public static Task<float> AverageAsyncEF(this IQueryable<float> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Single > source CancellationToken cancellationToken Returns Type Description Task < System.Single > | Improve this Doc View Source AverageAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public static Task<decimal> AverageAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Decimal >> selector CancellationToken cancellationToken Returns Type Description Task < System.Decimal > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public static Task<double> AverageAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Double >> selector CancellationToken cancellationToken Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public static Task<double> AverageAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int32 >> selector CancellationToken cancellationToken Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public static Task<double> AverageAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int64 >> selector CancellationToken cancellationToken Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public static Task<decimal?> AverageAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Decimal >>> selector CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public static Task<double?> AverageAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Double >>> selector CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public static Task<double?> AverageAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int32 >>> selector CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public static Task<double?> AverageAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int64 >>> selector CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public static Task<float?> AverageAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Single >>> selector CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Single >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public static Task<float> AverageAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Single >> selector CancellationToken cancellationToken Returns Type Description Task < System.Single > Type Parameters Name Description TSource | Improve this Doc View Source ContainsAsyncEF<TSource>(IQueryable<TSource>, TSource, CancellationToken) Declaration public static Task<bool> ContainsAsyncEF<TSource>(this IQueryable<TSource> source, TSource item, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source TSource item CancellationToken cancellationToken Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source CountAsyncEF<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<int> CountAsyncEF<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken cancellationToken Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source CountAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<int> CountAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken cancellationToken Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source FirstAsyncEF<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> FirstAsyncEF<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> FirstAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken cancellationToken Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsyncEF<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> FirstOrDefaultAsyncEF<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken cancellationToken Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> FirstOrDefaultAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken cancellationToken Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source ForEachAsyncEF<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) Declaration public static Task ForEachAsyncEF<TSource>(this IQueryable<TSource> source, Action<TSource> action, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Action <TSource> action CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsyncEF<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<long> LongCountAsyncEF<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken cancellationToken Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<long> LongCountAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken cancellationToken Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source MaxAsyncEF<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> MaxAsyncEF<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken cancellationToken Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MaxAsyncEF<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public static Task<TResult> MaxAsyncEF<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken cancellationToken Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source MinAsyncEF<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> MinAsyncEF<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken cancellationToken Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MinAsyncEF<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public static Task<TResult> MinAsyncEF<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken cancellationToken Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source SingleAsyncEF<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> SingleAsyncEF<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken cancellationToken Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> SingleAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken cancellationToken Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsyncEF<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> SingleOrDefaultAsyncEF<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken cancellationToken Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> SingleOrDefaultAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken cancellationToken Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncEF(IQueryable<Decimal>, CancellationToken) Declaration public static Task<decimal> SumAsyncEF(this IQueryable<decimal> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Decimal > source CancellationToken cancellationToken Returns Type Description Task < System.Decimal > | Improve this Doc View Source SumAsyncEF(IQueryable<Double>, CancellationToken) Declaration public static Task<double> SumAsyncEF(this IQueryable<double> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Double > source CancellationToken cancellationToken Returns Type Description Task < System.Double > | Improve this Doc View Source SumAsyncEF(IQueryable<Int32>, CancellationToken) Declaration public static Task<int> SumAsyncEF(this IQueryable<int> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Int32 > source CancellationToken cancellationToken Returns Type Description Task < System.Int32 > | Improve this Doc View Source SumAsyncEF(IQueryable<Int64>, CancellationToken) Declaration public static Task<long> SumAsyncEF(this IQueryable<long> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Int64 > source CancellationToken cancellationToken Returns Type Description Task < System.Int64 > | Improve this Doc View Source SumAsyncEF(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public static Task<decimal?> SumAsyncEF(this IQueryable<decimal?> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Nullable < System.Decimal >> source CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Decimal >> | Improve this Doc View Source SumAsyncEF(IQueryable<Nullable<Double>>, CancellationToken) Declaration public static Task<double?> SumAsyncEF(this IQueryable<double?> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Nullable < System.Double >> source CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source SumAsyncEF(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public static Task<int?> SumAsyncEF(this IQueryable<int?> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int32 >> source CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Int32 >> | Improve this Doc View Source SumAsyncEF(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public static Task<long?> SumAsyncEF(this IQueryable<long?> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int64 >> source CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Int64 >> | Improve this Doc View Source SumAsyncEF(IQueryable<Nullable<Single>>, CancellationToken) Declaration public static Task<float?> SumAsyncEF(this IQueryable<float?> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Nullable < System.Single >> source CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Single >> | Improve this Doc View Source SumAsyncEF(IQueryable<Single>, CancellationToken) Declaration public static Task<float> SumAsyncEF(this IQueryable<float> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable < System.Single > source CancellationToken cancellationToken Returns Type Description Task < System.Single > | Improve this Doc View Source SumAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public static Task<decimal> SumAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Decimal >> selector CancellationToken cancellationToken Returns Type Description Task < System.Decimal > Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public static Task<double> SumAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Double >> selector CancellationToken cancellationToken Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public static Task<int> SumAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int32 >> selector CancellationToken cancellationToken Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public static Task<long> SumAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int64 >> selector CancellationToken cancellationToken Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public static Task<decimal?> SumAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Decimal >>> selector CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public static Task<double?> SumAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Double >>> selector CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public static Task<int?> SumAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int32 >>> selector CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Int32 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public static Task<long?> SumAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int64 >>> selector CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Int64 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public static Task<float?> SumAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Single >>> selector CancellationToken cancellationToken Returns Type Description Task < System.Nullable < System.Single >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncEF<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public static Task<float> SumAsyncEF<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Single >> selector CancellationToken cancellationToken Returns Type Description Task < System.Single > Type Parameters Name Description TSource | Improve this Doc View Source ToArrayAsyncEF<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource[]> ToArrayAsyncEF<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken cancellationToken Returns Type Description Task <TSource[]> Type Parameters Name Description TSource | Improve this Doc View Source ToDictionaryAsyncEF<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsyncEF<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector CancellationToken cancellationToken Returns Type Description Task < Dictionary <TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsyncEF<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsyncEF<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector Func <TSource, TElement> elementSelector CancellationToken cancellationToken Returns Type Description Task < Dictionary <TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsyncEF<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsyncEF<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector Func <TSource, TElement> elementSelector IEqualityComparer <TKey> comparer CancellationToken cancellationToken Returns Type Description Task < Dictionary <TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToListAsyncEF<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<List<TSource>> ToListAsyncEF<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken cancellationToken Returns Type Description Task < List <TSource>> Type Parameters Name Description TSource"
  },
  "api/LinqToDB.EntityFrameworkCore.EFProviderInfo.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.EFProviderInfo.html",
    "title": "Class EFProviderInfo | Linq To DB (aka linq2db)",
    "keywords": "Class EFProviderInfo Required integration information about underlying database provider, extracted from EF.Core. Inheritance System.Object EFProviderInfo Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public class EFProviderInfo : object Properties | Improve this Doc View Source Connection Gets or sets database connection instance. Declaration public DbConnection? Connection { get; set; } Property Value Type Description System.Nullable < DbConnection > | Improve this Doc View Source Context Gets or sets EF.Core context instance. Declaration public DbContext? Context { get; set; } Property Value Type Description System.Nullable < DbContext > | Improve this Doc View Source Options Gets or sets EF.Core context options instance. Declaration public IDbContextOptions? Options { get; set; } Property Value Type Description System.Nullable < IDbContextOptions > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityFrameworkCore.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.html",
    "title": "Namespace LinqToDB.EntityFrameworkCore | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.EntityFrameworkCore Classes EFConnectionInfo Contains database connectivity information, extracted from EF.Core. EFForEFExtensions Provides conflict-less mappings to extensions. EFProviderInfo Required integration information about underlying database provider, extracted from EF.Core. LinqToDBExtensionsAdapter LINQ To DB async extensions adapter to call EF.Core functionality instead of default implementation. LinqToDBForEFExtensions Provides conflict-less mappings to . LinqToDBForEFTools EF Core extensions to call LINQ To DB functionality. LinqToDBForEFToolsDataConnection linq2db EF.Core data connection. LinqToDBForEFToolsDataContext linq2db EF.Core data context. LinqToDBForEFToolsException Exception class for EF.Core to LINQ To DB integration issues. LinqToDBForEFToolsImplDefault Default EF Core - LINQ To DB integration bridge implementation. LinqToDBProviderInfo Stores LINQ To DB database provider information. Interfaces ILinqToDBForEFTools Interface for EF Core - LINQ To DB integration bridge."
  },
  "api/LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.html",
    "title": "Interface ILinqToDBForEFTools | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqToDBForEFTools Interface for EF Core - LINQ To DB integration bridge. Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public interface ILinqToDBForEFTools Properties | Improve this Doc View Source EnableChangeTracker Enables attaching entities to change tracker. Entities will be attached only if AsNoTracking() is not used in query and DbContext is configured to track entities. Declaration bool EnableChangeTracker { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ClearCaches() Clears internal caches Declaration void ClearCaches() | Improve this Doc View Source CreateLogger(Nullable<IDbContextOptions>) Creates logger used for logging Linq To DB connection calls. Declaration ILogger? CreateLogger(IDbContextOptions? options) Parameters Type Name Description System.Nullable < IDbContextOptions > options instance. Returns Type Description System.Nullable < ILogger > Logger instance. | Improve this Doc View Source CreateMappingSchema(IModel, IMetadataReader, IValueConverterSelector) Creates mapping schema using provided EF Core data model and metadata provider. Declaration MappingSchema CreateMappingSchema(IModel model, IMetadataReader metadataReader, IValueConverterSelector convertorSelector) Parameters Type Name Description IModel model EF Core data model. IMetadataReader metadataReader Additional optional LINQ To DB database metadata provider. IValueConverterSelector convertorSelector EF Core registry for type conversion. Returns Type Description MappingSchema Mapping schema for provided EF Core model. | Improve this Doc View Source CreateMetadataReader(Nullable<IModel>, Nullable<IInfrastructure<IServiceProvider>>) Creates metadata provider for specified EF Core data model. Default implementation uses LinqToDB.EntityFrameworkCore.EFCoreMetadataReader metadata provider. Declaration IMetadataReader? CreateMetadataReader(IModel? model, IInfrastructure<IServiceProvider>? accessor) Parameters Type Name Description System.Nullable < IModel > model EF Core data model. System.Nullable < IInfrastructure < IServiceProvider >> accessor EF Core service provider. Returns Type Description System.Nullable < IMetadataReader > LINQ To DB metadata provider for specified EF Core model. | Improve this Doc View Source ExtractConnectionInfo(Nullable<IDbContextOptions>) Extracts EF Core connection information object from . Declaration EFConnectionInfo ExtractConnectionInfo(IDbContextOptions? options) Parameters Type Name Description System.Nullable < IDbContextOptions > options instance. Returns Type Description EFConnectionInfo EF Core connection data. | Improve this Doc View Source ExtractModel(Nullable<IDbContextOptions>) Extracts EF Core data model instance from . Declaration IModel? ExtractModel(IDbContextOptions? options) Parameters Type Name Description System.Nullable < IDbContextOptions > options instance. Returns Type Description System.Nullable < IModel > EF Core data model instance. | Improve this Doc View Source GetContextOptions(Nullable<DbContext>) Returns EF Core for specific instance. Declaration IDbContextOptions? GetContextOptions(DbContext? context) Parameters Type Name Description System.Nullable < DbContext > context EF Core instance. Returns Type Description System.Nullable < IDbContextOptions > instance. | Improve this Doc View Source GetCurrentContext(IQueryable) Extracts instance from object. Declaration DbContext? GetCurrentContext(IQueryable query) Parameters Type Name Description IQueryable query EF Core query. Returns Type Description System.Nullable < DbContext > Current instance. | Improve this Doc View Source GetDataProvider(EFProviderInfo, EFConnectionInfo) Returns LINQ To DB provider, based on provider data from EF Core. Declaration IDataProvider? GetDataProvider(EFProviderInfo providerInfo, EFConnectionInfo connectionInfo) Parameters Type Name Description EFProviderInfo providerInfo Provider information, extracted from EF Core. EFConnectionInfo connectionInfo Database connection information. Returns Type Description System.Nullable < IDataProvider > LINQ TO DB provider instance. | Improve this Doc View Source GetMappingSchema(IModel, Nullable<IMetadataReader>, Nullable<IValueConverterSelector>) Returns mapping schema using provided EF Core data model and metadata provider. Declaration MappingSchema GetMappingSchema(IModel model, IMetadataReader? metadataReader, IValueConverterSelector? convertorSelector) Parameters Type Name Description IModel model EF Core data model. System.Nullable < IMetadataReader > metadataReader Additional optional LINQ To DB database metadata provider. System.Nullable < IValueConverterSelector > convertorSelector EF Core registry for type conversion. Returns Type Description MappingSchema Mapping schema for provided EF Core model. | Improve this Doc View Source LogConnectionTrace(TraceInfo, ILogger) Logs DataConnection information. Declaration void LogConnectionTrace(TraceInfo info, ILogger logger) Parameters Type Name Description TraceInfo info ILogger logger | Improve this Doc View Source TransformExpression(Expression, Nullable<IDataContext>, Nullable<DbContext>, Nullable<IModel>) Transforms EF Core expression tree to LINQ To DB expression. Declaration Expression TransformExpression(Expression expression, IDataContext? dc, DbContext? ctx, IModel? model) Parameters Type Name Description Expression expression EF Core expression tree. System.Nullable < IDataContext > dc LINQ To DB instance. System.Nullable < DbContext > ctx Optional DbContext instance. System.Nullable < IModel > model EF Core data model instance. Returns Type Description Expression Transformed expression. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityFrameworkCore.Internal.EFCoreExpressionAttribute.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.Internal.EFCoreExpressionAttribute.html",
    "title": "Class EFCoreExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class EFCoreExpressionAttribute Maps linq2db expression. Inheritance System.Object EFCoreExpressionAttribute Namespace : LinqToDB.EntityFrameworkCore.Internal Assembly : linq2db.EntityFrameworkCore.dll Syntax public class EFCoreExpressionAttribute : Sql.ExpressionAttribute Constructors | Improve this Doc View Source EFCoreExpressionAttribute(String) Creates instance of expression mapper. Declaration public EFCoreExpressionAttribute(string expression) Parameters Type Name Description System.String expression Mapped expression. Methods | Improve this Doc View Source GetExpression<TContext>(TContext, IDataContext, SelectQuery, Expression, Func<TContext, Expression, Nullable<ColumnDescriptor>, ISqlExpression>) Declaration public override ISqlExpression? GetExpression<TContext>(TContext context, IDataContext dataContext, SelectQuery query, Expression expression, Func<TContext, Expression, ColumnDescriptor?, ISqlExpression> converter) Parameters Type Name Description TContext context IDataContext dataContext SelectQuery query Expression expression Func <TContext, Expression , System.Nullable < ColumnDescriptor >, ISqlExpression > converter Returns Type Description System.Nullable < ISqlExpression > Type Parameters Name Description TContext Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityFrameworkCore.Internal.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.Internal.html",
    "title": "Namespace LinqToDB.EntityFrameworkCore.Internal | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.EntityFrameworkCore.Internal Classes EFCoreExpressionAttribute Maps linq2db expression. LinqToDBForEFQueryProvider<T> Adapter for This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice."
  },
  "api/LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider-1.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider-1.html",
    "title": "Class LinqToDBForEFQueryProvider<T> | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBForEFQueryProvider<T> Adapter for This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Inheritance System.Object LinqToDBForEFQueryProvider<T> Implements IQueryProviderAsync IQueryable <T> IAsyncEnumerable <T> Namespace : LinqToDB.EntityFrameworkCore.Internal Assembly : linq2db.EntityFrameworkCore.dll Syntax public class LinqToDBForEFQueryProvider<T> : IAsyncQueryProvider Type Parameters Name Description T Type of query element. Constructors | Improve this Doc View Source LinqToDBForEFQueryProvider(IDataContext, Expression) Creates instance of adapter. Declaration public LinqToDBForEFQueryProvider(IDataContext dataContext, Expression expression) Parameters Type Name Description IDataContext dataContext Data context instance. Expression expression Query expression. Properties | Improve this Doc View Source ElementType Type of query element. Declaration public Type ElementType { get; } Property Value Type Description Type | Improve this Doc View Source Expression Query expression. Declaration public Expression Expression { get; } Property Value Type Description Expression | Improve this Doc View Source Provider Query provider. Declaration public IQueryProvider Provider { get; } Property Value Type Description IQueryProvider Methods | Improve this Doc View Source CreateQuery(Expression) Creates instance from query expression. Declaration public IQueryable CreateQuery(Expression expression) Parameters Type Name Description Expression expression Query expression. Returns Type Description IQueryable instance. | Improve this Doc View Source CreateQuery<TElement>(Expression) Creates instance from query expression. Declaration public IQueryable<TElement> CreateQuery<TElement>(Expression expression) Parameters Type Name Description Expression expression Query expression. Returns Type Description IQueryable <TElement> instance. Type Parameters Name Description TElement Query element type. | Improve this Doc View Source Execute(Expression) Executes query expression. Declaration public object? Execute(Expression expression) Parameters Type Name Description Expression expression Query expression. Returns Type Description System.Nullable < System.Object > Query result. | Improve this Doc View Source Execute<TResult>(Expression) Executes query expression and returns typed result. Declaration public TResult Execute<TResult>(Expression expression) Parameters Type Name Description Expression expression Query expression. Returns Type Description TResult Query result. Type Parameters Name Description TResult Type of result. | Improve this Doc View Source ExecuteAsync<TResult>(Expression, CancellationToken) Executes query expression and returns typed result. Declaration public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) Parameters Type Name Description Expression expression Query expression. CancellationToken cancellationToken Cancellation token. Returns Type Description Task <TResult> Query result. Type Parameters Name Description TResult Type of result. | Improve this Doc View Source ExecuteAsyncEnumerable<TResult>(Expression, CancellationToken) Executes query expression and returns result as value. Declaration public Task<IAsyncEnumerable<TResult>> ExecuteAsyncEnumerable<TResult>(Expression expression, CancellationToken cancellationToken) Parameters Type Name Description Expression expression Query expression. CancellationToken cancellationToken Cancellation token. Returns Type Description Task < IAsyncEnumerable <TResult>> Query result as . Type Parameters Name Description TResult Type of result element. | Improve this Doc View Source GetAsyncEnumerator(CancellationToken) Gets for current query. Declaration public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token. Returns Type Description IAsyncEnumerator <T> Query result as . | Improve this Doc View Source ToString() Returns generated SQL for specific LINQ query. Declaration public override string? ToString() Returns Type Description System.Nullable < System.String > Generated SQL. Implements IQueryProviderAsync IQueryable<> IAsyncEnumerable<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.html",
    "title": "Class LinqToDBExtensionsAdapter | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBExtensionsAdapter LINQ To DB async extensions adapter to call EF.Core functionality instead of default implementation. Inheritance System.Object LinqToDBExtensionsAdapter Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public class LinqToDBExtensionsAdapter : IExtensionsAdapter Methods | Improve this Doc View Source AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public Task<bool> AllAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public Task<bool> AnyAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public Task<bool> AnyAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AsAsyncEnumerable<TSource>(IQueryable<TSource>) Declaration public IAsyncEnumerable<TSource> AsAsyncEnumerable<TSource>(IQueryable<TSource> source) Parameters Type Name Description IQueryable <TSource> source Returns Type Description IAsyncEnumerable <TSource> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync(IQueryable<Decimal>, CancellationToken) Declaration public Task<decimal> AverageAsync(IQueryable<decimal> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Decimal > source CancellationToken token Returns Type Description Task < System.Decimal > | Improve this Doc View Source AverageAsync(IQueryable<Double>, CancellationToken) Declaration public Task<double> AverageAsync(IQueryable<double> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Double > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsync(IQueryable<Int32>, CancellationToken) Declaration public Task<double> AverageAsync(IQueryable<int> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Int32 > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsync(IQueryable<Int64>, CancellationToken) Declaration public Task<double> AverageAsync(IQueryable<long> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Int64 > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public Task<decimal?> AverageAsync(IQueryable<decimal?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Decimal >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration public Task<double?> AverageAsync(IQueryable<double?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Double >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public Task<double?> AverageAsync(IQueryable<int?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Int32 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public Task<double?> AverageAsync(IQueryable<long?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Int64 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration public Task<float?> AverageAsync(IQueryable<float?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Single >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> | Improve this Doc View Source AverageAsync(IQueryable<Single>, CancellationToken) Declaration public Task<float> AverageAsync(IQueryable<float> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Single > source CancellationToken token Returns Type Description Task < System.Single > | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public Task<decimal> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Decimal >> selector CancellationToken token Returns Type Description Task < System.Decimal > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Double >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int32 >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int64 >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public Task<decimal?> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Decimal >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public Task<double?> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Double >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public Task<double?> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int32 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public Task<double?> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int64 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public Task<float?> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Single >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public Task<float> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Single >> selector CancellationToken token Returns Type Description Task < System.Single > Type Parameters Name Description TSource | Improve this Doc View Source ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken) Declaration public Task<bool> ContainsAsync<TSource>(IQueryable<TSource> source, TSource item, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source TSource item CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public Task<int> CountAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public Task<int> CountAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public Task<TSource> FirstAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public Task<TSource> FirstAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public Task<TSource> FirstOrDefaultAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public Task<TSource> FirstOrDefaultAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) Declaration public Task ForEachAsync<TSource>(IQueryable<TSource> source, Action<TSource> action, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Action <TSource> action CancellationToken token Returns Type Description Task Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public Task<long> LongCountAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public Task<long> LongCountAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public Task<TSource> MaxAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public Task<TResult> MaxAsync<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source MinAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public Task<TSource> MinAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public Task<TResult> MinAsync<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public Task<TSource> SingleAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public Task<TSource> SingleAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public Task<TSource> SingleOrDefaultAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public Task<TSource> SingleOrDefaultAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync(IQueryable<Decimal>, CancellationToken) Declaration public Task<decimal> SumAsync(IQueryable<decimal> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Decimal > source CancellationToken token Returns Type Description Task < System.Decimal > | Improve this Doc View Source SumAsync(IQueryable<Double>, CancellationToken) Declaration public Task<double> SumAsync(IQueryable<double> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Double > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source SumAsync(IQueryable<Int32>, CancellationToken) Declaration public Task<int> SumAsync(IQueryable<int> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Int32 > source CancellationToken token Returns Type Description Task < System.Int32 > | Improve this Doc View Source SumAsync(IQueryable<Int64>, CancellationToken) Declaration public Task<long> SumAsync(IQueryable<long> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Int64 > source CancellationToken token Returns Type Description Task < System.Int64 > | Improve this Doc View Source SumAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public Task<decimal?> SumAsync(IQueryable<decimal?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Decimal >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration public Task<double?> SumAsync(IQueryable<double?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Double >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public Task<int?> SumAsync(IQueryable<int?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Int32 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Int32 >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public Task<long?> SumAsync(IQueryable<long?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Int64 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Int64 >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration public Task<float?> SumAsync(IQueryable<float?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Single >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> | Improve this Doc View Source SumAsync(IQueryable<Single>, CancellationToken) Declaration public Task<float> SumAsync(IQueryable<float> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Single > source CancellationToken token Returns Type Description Task < System.Single > | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public Task<decimal> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Decimal >> selector CancellationToken token Returns Type Description Task < System.Decimal > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public Task<double> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Double >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public Task<int> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int32 >> selector CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public Task<long> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int64 >> selector CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public Task<decimal?> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Decimal >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public Task<double?> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Double >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public Task<int?> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int32 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Int32 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public Task<long?> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int64 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Int64 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public Task<float?> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Single >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public Task<float> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Single >> selector CancellationToken token Returns Type Description Task < System.Single > Type Parameters Name Description TSource | Improve this Doc View Source ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public Task<TSource[]> ToArrayAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource[]> Type Parameters Name Description TSource | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) Declaration public Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector CancellationToken token Returns Type Description Task < Dictionary <TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) Declaration public Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector IEqualityComparer <TKey> comparer CancellationToken token Returns Type Description Task < Dictionary <TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) Declaration public Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector Func <TSource, TElement> elementSelector CancellationToken token Returns Type Description Task < Dictionary <TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) Declaration public Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector Func <TSource, TElement> elementSelector IEqualityComparer <TKey> comparer CancellationToken token Returns Type Description Task < Dictionary <TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration public Task<List<TSource>> ToListAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < List <TSource>> Type Parameters Name Description TSource Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.html",
    "title": "Class LinqToDBForEFExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBForEFExtensions Provides conflict-less mappings to . Inheritance System.Object LinqToDBForEFExtensions Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public static class LinqToDBForEFExtensions : object Methods | Improve this Doc View Source AllAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<bool> AllAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsyncLinqToDB<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<bool> AnyAsyncLinqToDB<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<bool> AnyAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncLinqToDB(IQueryable<Decimal>, CancellationToken) Declaration public static Task<decimal> AverageAsyncLinqToDB(this IQueryable<decimal> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Decimal > source CancellationToken token Returns Type Description Task < System.Decimal > | Improve this Doc View Source AverageAsyncLinqToDB(IQueryable<Double>, CancellationToken) Declaration public static Task<double> AverageAsyncLinqToDB(this IQueryable<double> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Double > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsyncLinqToDB(IQueryable<Int32>, CancellationToken) Declaration public static Task<double> AverageAsyncLinqToDB(this IQueryable<int> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Int32 > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsyncLinqToDB(IQueryable<Int64>, CancellationToken) Declaration public static Task<double> AverageAsyncLinqToDB(this IQueryable<long> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Int64 > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsyncLinqToDB(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public static Task<decimal?> AverageAsyncLinqToDB(this IQueryable<decimal?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Decimal >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> | Improve this Doc View Source AverageAsyncLinqToDB(IQueryable<Nullable<Double>>, CancellationToken) Declaration public static Task<double?> AverageAsyncLinqToDB(this IQueryable<double?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Double >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsyncLinqToDB(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public static Task<double?> AverageAsyncLinqToDB(this IQueryable<int?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int32 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsyncLinqToDB(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public static Task<double?> AverageAsyncLinqToDB(this IQueryable<long?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int64 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsyncLinqToDB(IQueryable<Nullable<Single>>, CancellationToken) Declaration public static Task<float?> AverageAsyncLinqToDB(this IQueryable<float?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Single >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> | Improve this Doc View Source AverageAsyncLinqToDB(IQueryable<Single>, CancellationToken) Declaration public static Task<float> AverageAsyncLinqToDB(this IQueryable<float> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Single > source CancellationToken token Returns Type Description Task < System.Single > | Improve this Doc View Source AverageAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public static Task<decimal> AverageAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Decimal >> selector CancellationToken token Returns Type Description Task < System.Decimal > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public static Task<double> AverageAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Double >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public static Task<double> AverageAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int32 >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public static Task<double> AverageAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int64 >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public static Task<decimal?> AverageAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Decimal >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public static Task<double?> AverageAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Double >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public static Task<double?> AverageAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int32 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public static Task<double?> AverageAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int64 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public static Task<float?> AverageAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Single >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public static Task<float> AverageAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Single >> selector CancellationToken token Returns Type Description Task < System.Single > Type Parameters Name Description TSource | Improve this Doc View Source ContainsAsyncLinqToDB<TSource>(IQueryable<TSource>, TSource, CancellationToken) Declaration public static Task<bool> ContainsAsyncLinqToDB<TSource>(this IQueryable<TSource> source, TSource item, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source TSource item CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source CountAsyncLinqToDB<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<int> CountAsyncLinqToDB<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source CountAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<int> CountAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source FirstAsyncLinqToDB<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> FirstAsyncLinqToDB<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> FirstAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsyncLinqToDB<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> FirstOrDefaultAsyncLinqToDB<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> FirstOrDefaultAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source ForEachAsyncLinqToDB<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) Declaration public static Task ForEachAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Action<TSource> action, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Action <TSource> action CancellationToken token Returns Type Description Task Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsyncLinqToDB<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<long> LongCountAsyncLinqToDB<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<long> LongCountAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source MaxAsyncLinqToDB<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> MaxAsyncLinqToDB<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MaxAsyncLinqToDB<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public static Task<TResult> MaxAsyncLinqToDB<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source MinAsyncLinqToDB<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> MinAsyncLinqToDB<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MinAsyncLinqToDB<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration public static Task<TResult> MinAsyncLinqToDB<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source SingleAsyncLinqToDB<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> SingleAsyncLinqToDB<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> SingleAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsyncLinqToDB<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource> SingleOrDefaultAsyncLinqToDB<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration public static Task<TSource> SingleOrDefaultAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncLinqToDB(IQueryable<Decimal>, CancellationToken) Declaration public static Task<decimal> SumAsyncLinqToDB(this IQueryable<decimal> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Decimal > source CancellationToken token Returns Type Description Task < System.Decimal > | Improve this Doc View Source SumAsyncLinqToDB(IQueryable<Double>, CancellationToken) Declaration public static Task<double> SumAsyncLinqToDB(this IQueryable<double> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Double > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source SumAsyncLinqToDB(IQueryable<Int32>, CancellationToken) Declaration public static Task<int> SumAsyncLinqToDB(this IQueryable<int> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Int32 > source CancellationToken token Returns Type Description Task < System.Int32 > | Improve this Doc View Source SumAsyncLinqToDB(IQueryable<Int64>, CancellationToken) Declaration public static Task<long> SumAsyncLinqToDB(this IQueryable<long> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Int64 > source CancellationToken token Returns Type Description Task < System.Int64 > | Improve this Doc View Source SumAsyncLinqToDB(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration public static Task<decimal?> SumAsyncLinqToDB(this IQueryable<decimal?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Decimal >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> | Improve this Doc View Source SumAsyncLinqToDB(IQueryable<Nullable<Double>>, CancellationToken) Declaration public static Task<double?> SumAsyncLinqToDB(this IQueryable<double?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Double >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source SumAsyncLinqToDB(IQueryable<Nullable<Int32>>, CancellationToken) Declaration public static Task<int?> SumAsyncLinqToDB(this IQueryable<int?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int32 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Int32 >> | Improve this Doc View Source SumAsyncLinqToDB(IQueryable<Nullable<Int64>>, CancellationToken) Declaration public static Task<long?> SumAsyncLinqToDB(this IQueryable<long?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Int64 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Int64 >> | Improve this Doc View Source SumAsyncLinqToDB(IQueryable<Nullable<Single>>, CancellationToken) Declaration public static Task<float?> SumAsyncLinqToDB(this IQueryable<float?> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Nullable < System.Single >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> | Improve this Doc View Source SumAsyncLinqToDB(IQueryable<Single>, CancellationToken) Declaration public static Task<float> SumAsyncLinqToDB(this IQueryable<float> source, CancellationToken token = null) Parameters Type Name Description IQueryable < System.Single > source CancellationToken token Returns Type Description Task < System.Single > | Improve this Doc View Source SumAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration public static Task<decimal> SumAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Decimal >> selector CancellationToken token Returns Type Description Task < System.Decimal > Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration public static Task<double> SumAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Double >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration public static Task<int> SumAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int32 >> selector CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration public static Task<long> SumAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int64 >> selector CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration public static Task<decimal?> SumAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Decimal >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration public static Task<double?> SumAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Double >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration public static Task<int?> SumAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int32 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Int32 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration public static Task<long?> SumAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int64 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Int64 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration public static Task<float?> SumAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Single >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsyncLinqToDB<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration public static Task<float> SumAsyncLinqToDB<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Single >> selector CancellationToken token Returns Type Description Task < System.Single > Type Parameters Name Description TSource | Improve this Doc View Source ToArrayAsyncLinqToDB<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<TSource[]> ToArrayAsyncLinqToDB<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource[]> Type Parameters Name Description TSource | Improve this Doc View Source ToDictionaryAsyncLinqToDB<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsyncLinqToDB<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector CancellationToken token Returns Type Description Task < Dictionary <TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsyncLinqToDB<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsyncLinqToDB<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector Func <TSource, TElement> elementSelector CancellationToken token Returns Type Description Task < Dictionary <TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsyncLinqToDB<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsyncLinqToDB<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector Func <TSource, TElement> elementSelector IEqualityComparer <TKey> comparer CancellationToken token Returns Type Description Task < Dictionary <TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToListAsyncLinqToDB<TSource>(IQueryable<TSource>, CancellationToken) Declaration public static Task<List<TSource>> ToListAsyncLinqToDB<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < List <TSource>> Type Parameters Name Description TSource"
  },
  "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.html",
    "title": "Class LinqToDBForEFTools | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBForEFTools EF Core extensions to call LINQ To DB functionality. Inheritance System.Object LinqToDBForEFTools Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public static class LinqToDBForEFTools : object Properties | Improve this Doc View Source EnableChangeTracker Enables attaching entities to change tracker. Entities will be attached only if AsNoTracking() is not used in query and DbContext is configured to track entities. Declaration public static bool EnableChangeTracker { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Implementation Gets or sets EF Core to LINQ To DB integration bridge implementation. Declaration public static ILinqToDBForEFTools Implementation { get; set; } Property Value Type Description ILinqToDBForEFTools Methods | Improve this Doc View Source BulkCopy<T>(DbContext, BulkCopyOptions, IEnumerable<T>) Performs bulk insert operation. Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DbContext context, BulkCopyOptions options, IEnumerable<T> source) where T : class Parameters Type Name Description DbContext context Database context. BulkCopyOptions options Operation options. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(DbContext, IEnumerable<T>) Performs bulk insert operation. Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DbContext context, IEnumerable<T> source) where T : class Parameters Type Name Description DbContext context Database context. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopy<T>(DbContext, Int32, IEnumerable<T>) Performs bulk insert operation. Declaration public static BulkCopyRowsCopied BulkCopy<T>(this DbContext context, int maxBatchSize, IEnumerable<T> source) where T : class Parameters Type Name Description DbContext context Database context. System.Int32 maxBatchSize Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. IEnumerable <T> source Records to insert. Returns Type Description BulkCopyRowsCopied Bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(DbContext, BulkCopyOptions, IAsyncEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation. Declaration public static async Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this DbContext context, BulkCopyOptions options, IAsyncEnumerable<T> source, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DbContext context Database context. BulkCopyOptions options Operation options. IAsyncEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(DbContext, BulkCopyOptions, IEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation. Declaration public static async Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this DbContext context, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DbContext context Database context. BulkCopyOptions options Operation options. IEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(DbContext, IAsyncEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation. Declaration public static async Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this DbContext context, IAsyncEnumerable<T> source, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DbContext context Database context. IAsyncEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(DbContext, IEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation. Declaration public static async Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this DbContext context, IEnumerable<T> source, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DbContext context Database context. IEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(DbContext, Int32, IAsyncEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation. Declaration public static async Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this DbContext context, int maxBatchSize, IAsyncEnumerable<T> source, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DbContext context Database context. System.Int32 maxBatchSize Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. IAsyncEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source BulkCopyAsync<T>(DbContext, Int32, IEnumerable<T>, CancellationToken) Asynchronously performs bulk insert operation. Declaration public static async Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this DbContext context, int maxBatchSize, IEnumerable<T> source, CancellationToken cancellationToken = null) where T : class Parameters Type Name Description DbContext context Database context. System.Int32 maxBatchSize Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. IEnumerable <T> source Records to insert. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < BulkCopyRowsCopied > Task with bulk insert operation status. Type Parameters Name Description T Mapping type of inserted record. | Improve this Doc View Source ClearCaches() Clears internal caches Declaration public static void ClearCaches() | Improve this Doc View Source CreateLinq2DbConnectionDetached(DbContext) Creates LINQ To DB instance that creates new database connection using connection information from EF Core instance. Declaration public static DataConnection CreateLinq2DbConnectionDetached(this DbContext context) Parameters Type Name Description DbContext context EF Core instance. Returns Type Description DataConnection LINQ To DB instance. | Improve this Doc View Source CreateLinqToDbConnection(DbContext, Nullable<IDbContextTransaction>) Creates LINQ To DB instance, attached to provided EF Core instance connection and transaction. Declaration public static DataConnection CreateLinqToDbConnection(this DbContext context, IDbContextTransaction? transaction = null) Parameters Type Name Description DbContext context EF Core instance. System.Nullable < IDbContextTransaction > transaction Optional transaction instance, to which created connection should be attached. If not specified, will use current transaction if it available. Returns Type Description DataConnection LINQ To DB instance. | Improve this Doc View Source CreateLinqToDbConnection(DbContextOptions) Creates new LINQ To DB instance using connectivity information from EF Core instance. Declaration public static DataConnection CreateLinqToDbConnection(this DbContextOptions options) Parameters Type Name Description DbContextOptions options EF Core instance. Returns Type Description DataConnection New LINQ To DB instance. | Improve this Doc View Source CreateLinqToDbContext(DbContext, Nullable<IDbContextTransaction>) Creates linq2db data context for EF Core database context. Declaration public static IDataContext CreateLinqToDbContext(this DbContext context, IDbContextTransaction? transaction = null) Parameters Type Name Description DbContext context EF Core database context. System.Nullable < IDbContextTransaction > transaction Transaction instance. Returns Type Description IDataContext linq2db data context. | Improve this Doc View Source CreateLogger(Nullable<IDbContextOptions>) Creates logger intance. Declaration public static ILogger? CreateLogger(IDbContextOptions? options) Parameters Type Name Description System.Nullable < IDbContextOptions > options options. Returns Type Description System.Nullable < ILogger > Logger instance. | Improve this Doc View Source GetConnectionInfo(EFProviderInfo) Extracts database connection information from EF Core provider data. Declaration public static EFConnectionInfo GetConnectionInfo(EFProviderInfo info) Parameters Type Name Description EFProviderInfo info EF Core database provider data. Returns Type Description EFConnectionInfo Database connection information. | Improve this Doc View Source GetContextOptions(DbContext) Returns EF Core for specific instance. Declaration public static IDbContextOptions? GetContextOptions(DbContext context) Parameters Type Name Description DbContext context EF Core instance. Returns Type Description System.Nullable < IDbContextOptions > instance. | Improve this Doc View Source GetCurrentContext(IQueryable) Extracts instance from object. Declaration public static DbContext? GetCurrentContext(IQueryable query) Parameters Type Name Description IQueryable query EF Core query. Returns Type Description System.Nullable < DbContext > Current instance. | Improve this Doc View Source GetDataProvider(EFProviderInfo, EFConnectionInfo) Returns LINQ To DB provider, based on provider data from EF Core. Declaration public static IDataProvider GetDataProvider(EFProviderInfo info, EFConnectionInfo connectionInfo) Parameters Type Name Description EFProviderInfo info EF Core provider information. EFConnectionInfo connectionInfo Database connection information. Returns Type Description IDataProvider LINQ TO DB provider instance. | Improve this Doc View Source GetEFProviderInfo(DbConnection) Returns EF Core database provider information for specific instance. Declaration public static EFProviderInfo GetEFProviderInfo(DbConnection connection) Parameters Type Name Description DbConnection connection EF Core instance. Returns Type Description EFProviderInfo EF Core provider information. | Improve this Doc View Source GetEFProviderInfo(DbContext) Returns EF Core database provider information for specific instance. Declaration public static EFProviderInfo GetEFProviderInfo(DbContext context) Parameters Type Name Description DbContext context EF Core instance. Returns Type Description EFProviderInfo EF Core provider information. | Improve this Doc View Source GetEFProviderInfo(DbContextOptions) Returns EF Core database provider information for specific instance. Declaration public static EFProviderInfo GetEFProviderInfo(DbContextOptions options) Parameters Type Name Description DbContextOptions options EF Core instance. Returns Type Description EFProviderInfo EF Core provider information. | Improve this Doc View Source GetMappingSchema(IModel, Nullable<IInfrastructure<IServiceProvider>>) Creates mapping schema using provided EF Core data model. Declaration public static MappingSchema GetMappingSchema(IModel model, IInfrastructure<IServiceProvider>? accessor) Parameters Type Name Description IModel model EF Core data model. System.Nullable < IInfrastructure < IServiceProvider >> accessor EF Core service provider. Returns Type Description MappingSchema Mapping schema for provided EF Core model. | Improve this Doc View Source GetMetadataReader(Nullable<IModel>, Nullable<IInfrastructure<IServiceProvider>>) Creates or return existing metadata provider for provided EF Core data model. If model is null, empty metadata provider will be returned. Declaration public static IMetadataReader? GetMetadataReader(IModel? model, IInfrastructure<IServiceProvider>? accessor) Parameters Type Name Description System.Nullable < IModel > model EF Core data model instance. Could be null . System.Nullable < IInfrastructure < IServiceProvider >> accessor EF Core service provider. Returns Type Description System.Nullable < IMetadataReader > LINQ To DB metadata provider. | Improve this Doc View Source GetModel(Nullable<DbContextOptions>) Extracts EF Core data model instance from . Declaration public static IModel? GetModel(DbContextOptions? options) Parameters Type Name Description System.Nullable < DbContextOptions > options instance. Returns Type Description System.Nullable < IModel > EF Core data model instance. | Improve this Doc View Source GetTable<T>(DbContext) Returns queryable source for specified mapping class for current DBContext, mapped to database table or view. Declaration public static ITable<T> GetTable<T>(this DbContext context) where T : class Parameters Type Name Description DbContext context Returns Type Description ITable <T> Queryable source. Type Parameters Name Description T Mapping class type. | Improve this Doc View Source Initialize() Initializes integration of LINQ To DB with EF Core. Declaration public static void Initialize() | Improve this Doc View Source Into<T>(DbContext, ITable<T>) Starts LINQ query definition for insert operation. Declaration public static IValueInsertable<T> Into<T>(this DbContext context, ITable<T> target) Parameters Type Name Description DbContext context Database context. ITable <T> target Target table. Returns Type Description IValueInsertable <T> Insertable source query. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source ToLinqToDB<T>(IQueryable<T>) Converts EF Core's query to LINQ To DB query and attach it to current EF Core connection. Declaration public static IQueryable<T> ToLinqToDB<T>(this IQueryable<T> query) Parameters Type Name Description IQueryable <T> query EF Core query. Returns Type Description IQueryable <T> LINQ To DB query, attached to current EF Core connection. Type Parameters Name Description T Entity type. | Improve this Doc View Source ToLinqToDB<T>(IQueryable<T>, IDataContext) Converts EF Core's query to LINQ To DB query and attach it to provided LINQ To DB . Declaration public static IQueryable<T> ToLinqToDB<T>(this IQueryable<T> query, IDataContext dc) Parameters Type Name Description IQueryable <T> query EF Core query. IDataContext dc LINQ To DB to use with provided query. Returns Type Description IQueryable <T> LINQ To DB query, attached to provided . Type Parameters Name Description T Entity type. | Improve this Doc View Source ToLinqToDBTable<T>(DbSet<T>) Converts EF.Core instance to LINQ To DB instance. Declaration public static ITable<T> ToLinqToDBTable<T>(this DbSet<T> dbSet) where T : class Parameters Type Name Description DbSet <T> dbSet EF.Core instance. Returns Type Description ITable <T> LINQ To DB instance. Type Parameters Name Description T Mapping entity type. | Improve this Doc View Source ToLinqToDBTable<T>(DbSet<T>, IDataContext) Converts EF.Core instance to LINQ To DB instance using existing LINQ To DB instance. Declaration public static ITable<T> ToLinqToDBTable<T>(this DbSet<T> dbSet, IDataContext dataContext) where T : class Parameters Type Name Description DbSet <T> dbSet EF.Core instance. IDataContext dataContext LINQ To DB data context instance. Returns Type Description ITable <T> LINQ To DB instance. Type Parameters Name Description T Mapping entity type. | Improve this Doc View Source TransformExpression(Expression, Nullable<IDataContext>, Nullable<DbContext>, Nullable<IModel>) Transforms EF Core expression tree to LINQ To DB expression. Declaration public static Expression TransformExpression(Expression expression, IDataContext? dc, DbContext? ctx, IModel? model) Parameters Type Name Description Expression expression EF Core expression tree. System.Nullable < IDataContext > dc LINQ To DB instance. System.Nullable < DbContext > ctx Optional DbContext instance. System.Nullable < IModel > model EF Core data model instance. Returns Type Description Expression Transformed expression."
  },
  "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataConnection.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataConnection.html",
    "title": "Class LinqToDBForEFToolsDataConnection | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBForEFToolsDataConnection linq2db EF.Core data connection. Inheritance System.Object LinqToDBForEFToolsDataConnection Implements IExpressionPreprocessor Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public class LinqToDBForEFToolsDataConnection : DataConnection Constructors | Improve this Doc View Source LinqToDBForEFToolsDataConnection(Nullable<DbContext>, IDataProvider, IDbConnection, Nullable<IModel>, Nullable<Func<Expression, IDataContext, Nullable<DbContext>, Nullable<IModel>, Expression>>) Creates new instance of data connection. Declaration public LinqToDBForEFToolsDataConnection(DbContext? context, IDataProvider dataProvider, IDbConnection connection, IModel? model, Func<Expression, IDataContext, DbContext?, IModel?, Expression>? transformFunc) Parameters Type Name Description System.Nullable < DbContext > context EF.Core database context. IDataProvider dataProvider linq2db database provider. IDbConnection connection Database connection instance. System.Nullable < IModel > model EF.Core data model. System.Nullable < Func < Expression , IDataContext , System.Nullable < DbContext >, System.Nullable < IModel >, Expression >> transformFunc Expression converter. | Improve this Doc View Source LinqToDBForEFToolsDataConnection(Nullable<DbContext>, IDataProvider, IDbTransaction, Nullable<IModel>, Nullable<Func<Expression, IDataContext, Nullable<DbContext>, Nullable<IModel>, Expression>>) Creates new instance of data connection. Declaration public LinqToDBForEFToolsDataConnection(DbContext? context, IDataProvider dataProvider, IDbTransaction transaction, IModel? model, Func<Expression, IDataContext, DbContext?, IModel?, Expression>? transformFunc) Parameters Type Name Description System.Nullable < DbContext > context EF.Core database context. IDataProvider dataProvider linq2db database provider. IDbTransaction transaction Database transaction. System.Nullable < IModel > model EF.Core data model. System.Nullable < Func < Expression , IDataContext , System.Nullable < DbContext >, System.Nullable < IModel >, Expression >> transformFunc Expression converter. | Improve this Doc View Source LinqToDBForEFToolsDataConnection(Nullable<DbContext>, IDataProvider, String, Nullable<IModel>, Nullable<Func<Expression, IDataContext, Nullable<DbContext>, Nullable<IModel>, Expression>>) Creates new instance of data connection. Declaration public LinqToDBForEFToolsDataConnection(DbContext? context, IDataProvider dataProvider, string connectionString, IModel? model, Func<Expression, IDataContext, DbContext?, IModel?, Expression>? transformFunc) Parameters Type Name Description System.Nullable < DbContext > context EF.Core database context. IDataProvider dataProvider linq2db database provider. System.String connectionString Connection string. System.Nullable < IModel > model EF.Core data model. System.Nullable < Func < Expression , IDataContext , System.Nullable < DbContext >, System.Nullable < IModel >, Expression >> transformFunc Expression converter. Properties | Improve this Doc View Source Context EF.Core database context. Declaration public DbContext? Context { get; } Property Value Type Description System.Nullable < DbContext > | Improve this Doc View Source Tracking Change tracker enable flag. Declaration public bool Tracking { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ProcessExpression(Expression) Converts expression using convert function, passed to context. Declaration public Expression ProcessExpression(Expression expression) Parameters Type Name Description Expression expression Expression to convert. Returns Type Description Expression Converted expression. Implements IExpressionPreprocessor Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataContext.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataContext.html",
    "title": "Class LinqToDBForEFToolsDataContext | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBForEFToolsDataContext linq2db EF.Core data context. Inheritance System.Object LinqToDBForEFToolsDataContext Implements IExpressionPreprocessor Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public class LinqToDBForEFToolsDataContext : DataContext Constructors | Improve this Doc View Source LinqToDBForEFToolsDataContext(Nullable<DbContext>, IDataProvider, String, IModel, Nullable<Func<Expression, IDataContext, Nullable<DbContext>, IModel, Expression>>) Creates instance of context. Declaration public LinqToDBForEFToolsDataContext(DbContext? context, IDataProvider dataProvider, string connectionString, IModel model, Func<Expression, IDataContext, DbContext?, IModel, Expression>? transformFunc) Parameters Type Name Description System.Nullable < DbContext > context EF.Core database context. IDataProvider dataProvider lin2db database provider instance. System.String connectionString Connection string. IModel model EF.Core model. System.Nullable < Func < Expression , IDataContext , System.Nullable < DbContext >, IModel , Expression >> transformFunc Expression converter. Methods | Improve this Doc View Source ProcessExpression(Expression) Converts expression using convert function, passed to context. Declaration public Expression ProcessExpression(Expression expression) Parameters Type Name Description Expression expression Expression to convert. Returns Type Description Expression Converted expression. Implements IExpressionPreprocessor Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsException.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsException.html",
    "title": "Class LinqToDBForEFToolsException | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBForEFToolsException Exception class for EF.Core to LINQ To DB integration issues. Inheritance System.Object LinqToDBForEFToolsException Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public class LinqToDBForEFToolsException : Exception Constructors | Improve this Doc View Source LinqToDBForEFToolsException() Creates new instance of exception. Declaration public LinqToDBForEFToolsException() | Improve this Doc View Source LinqToDBForEFToolsException(String) Creates new instance of exception. Declaration public LinqToDBForEFToolsException(string message) Parameters Type Name Description System.String message Exception message. | Improve this Doc View Source LinqToDBForEFToolsException(String, Exception) Creates new instance of exception when it generated for other exception. Declaration public LinqToDBForEFToolsException(string message, Exception innerException) Parameters Type Name Description System.String message Exception message. Exception innerException Original exception. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.html",
    "title": "Class LinqToDBForEFToolsImplDefault | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBForEFToolsImplDefault Default EF Core - LINQ To DB integration bridge implementation. Inheritance System.Object LinqToDBForEFToolsImplDefault Implements ILinqToDBForEFTools Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public class LinqToDBForEFToolsImplDefault : object, ILinqToDBForEFTools Properties | Improve this Doc View Source EnableChangeTracker Enables attaching entities to change tracker. Entities will be attached only if AsNoTracking() is not used in query and DbContext is configured to track entities. Declaration public virtual bool EnableChangeTracker { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source PostgreSqlDefaultVersion Gets or sets default provider version for PostgreSQL Server. Set to dialect. Declaration public static PostgreSQLVersion PostgreSqlDefaultVersion { get; set; } Property Value Type Description PostgreSQLVersion | Improve this Doc View Source SqlServerDefaultVersion Gets or sets default provider version for SQL Server. Set to dialect. Declaration public static SqlServerVersion SqlServerDefaultVersion { get; set; } Property Value Type Description SqlServerVersion Methods | Improve this Doc View Source ClearCaches() Force clear of internal caches. Declaration public virtual void ClearCaches() | Improve this Doc View Source CompactExpression(Expression) Compacts expression to handle big filters. Declaration public static Expression CompactExpression(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression Compacted expression. | Improve this Doc View Source CreateLinqToDbDataProvider(EFProviderInfo, LinqToDBProviderInfo, EFConnectionInfo) Creates instance of linq2db database provider. Declaration protected virtual IDataProvider CreateLinqToDbDataProvider(EFProviderInfo providerInfo, LinqToDBProviderInfo provInfo, EFConnectionInfo connectionInfo) Parameters Type Name Description EFProviderInfo providerInfo EF Core provider settings. LinqToDBProviderInfo provInfo linq2db provider settings. EFConnectionInfo connectionInfo EF Core connection settings. Returns Type Description IDataProvider linq2db database provider. | Improve this Doc View Source CreateLogger(Nullable<IDbContextOptions>) Creates logger instance. Declaration public virtual ILogger? CreateLogger(IDbContextOptions? options) Parameters Type Name Description System.Nullable < IDbContextOptions > options options. Returns Type Description System.Nullable < ILogger > Logger instance. | Improve this Doc View Source CreateMappingSchema(IModel, Nullable<IMetadataReader>, Nullable<IValueConverterSelector>) Creates mapping schema using provided EF Core data model and metadata provider. Declaration public virtual MappingSchema CreateMappingSchema(IModel model, IMetadataReader? metadataReader, IValueConverterSelector? convertorSelector) Parameters Type Name Description IModel model EF Core data model. System.Nullable < IMetadataReader > metadataReader Additional optional LINQ To DB database metadata provider. System.Nullable < IValueConverterSelector > convertorSelector Returns Type Description MappingSchema Mapping schema for provided EF.Core model. | Improve this Doc View Source CreateMetadataReader(Nullable<IModel>, Nullable<IInfrastructure<IServiceProvider>>) Creates metadata provider for specified EF Core data model. Default implementation uses LinqToDB.EntityFrameworkCore.EFCoreMetadataReader metadata provider. Declaration public virtual IMetadataReader CreateMetadataReader(IModel? model, IInfrastructure<IServiceProvider>? accessor) Parameters Type Name Description System.Nullable < IModel > model EF Core data model. System.Nullable < IInfrastructure < IServiceProvider >> accessor EF Core service provider. Returns Type Description IMetadataReader LINQ To DB metadata provider for specified EF Core model. | Improve this Doc View Source CreatePostgreSqlProvider(PostgreSQLVersion, Nullable<String>) Creates linq2db PostgreSQL database provider instance. Declaration protected virtual IDataProvider CreatePostgreSqlProvider(PostgreSQLVersion version, string? connectionString) Parameters Type Name Description PostgreSQLVersion version PostgreSQL dialect. System.Nullable < System.String > connectionString Connection string. Returns Type Description IDataProvider linq2db PostgreSQL provider instance. | Improve this Doc View Source CreateSqlServerProvider(SqlServerVersion, Nullable<String>) Creates linq2db SQL Server database provider instance. Declaration protected virtual IDataProvider CreateSqlServerProvider(SqlServerVersion version, string? connectionString) Parameters Type Name Description SqlServerVersion version SQL Server dialect. System.Nullable < System.String > connectionString Connection string. Returns Type Description IDataProvider linq2db SQL Server provider instance. | Improve this Doc View Source DefineConvertors(MappingSchema, IModel, Nullable<IValueConverterSelector>) Import type conversions from EF Core model into linq2db mapping schema. Declaration public virtual void DefineConvertors(MappingSchema mappingSchema, IModel model, IValueConverterSelector? convertorSelector) Parameters Type Name Description MappingSchema mappingSchema linq2db mapping schema. IModel model EF Core data mode. System.Nullable < IValueConverterSelector > convertorSelector Type filter. | Improve this Doc View Source EvaluateExpression(Nullable<Expression>) Evaluates value of expression. Declaration public static object? EvaluateExpression(Expression? expr) Parameters Type Name Description System.Nullable < Expression > expr Expression to evaluate. Returns Type Description System.Nullable < System.Object > Expression value. | Improve this Doc View Source ExtractConnectionInfo(Nullable<IDbContextOptions>) Extracts EF Core connection information object from . Declaration public virtual EFConnectionInfo ExtractConnectionInfo(IDbContextOptions? options) Parameters Type Name Description System.Nullable < IDbContextOptions > options instance. Returns Type Description EFConnectionInfo EF Core connection data. | Improve this Doc View Source ExtractModel(Nullable<IDbContextOptions>) Extracts EF Core data model instance from . Declaration public virtual IModel? ExtractModel(IDbContextOptions? options) Parameters Type Name Description System.Nullable < IDbContextOptions > options instance. Returns Type Description System.Nullable < IModel > EF Core data model instance. | Improve this Doc View Source GetContextOptions(Nullable<DbContext>) Returns EF Core for specific instance. Declaration public virtual IDbContextOptions? GetContextOptions(DbContext? context) Parameters Type Name Description System.Nullable < DbContext > context EF Core instance. Returns Type Description System.Nullable < IDbContextOptions > instance. | Improve this Doc View Source GetCurrentContext(IQueryable) Extracts instance from object. Due to unavailability of integration API in EF Core this method use reflection and could became broken after EF Core update. Declaration public virtual DbContext? GetCurrentContext(IQueryable query) Parameters Type Name Description IQueryable query EF Core query. Returns Type Description System.Nullable < DbContext > Current instance. | Improve this Doc View Source GetDataProvider(EFProviderInfo, EFConnectionInfo) Returns LINQ To DB provider, based on provider data from EF Core. Could be overriden if you have issues with default detection mechanisms. Declaration public virtual IDataProvider GetDataProvider(EFProviderInfo providerInfo, EFConnectionInfo connectionInfo) Parameters Type Name Description EFProviderInfo providerInfo Provider information, extracted from EF Core. EFConnectionInfo connectionInfo Returns Type Description IDataProvider LINQ TO DB provider instance. | Improve this Doc View Source GetLinqToDbProviderInfo(DatabaseFacade) Creates linq2db provider settings object from instance. Declaration protected virtual LinqToDBProviderInfo GetLinqToDbProviderInfo(DatabaseFacade database) Parameters Type Name Description DatabaseFacade database EF Core database information object. Returns Type Description LinqToDBProviderInfo linq2db provider settings. | Improve this Doc View Source GetLinqToDbProviderInfo(DbConnection) Creates linq2db provider settings object from instance. Declaration protected virtual LinqToDBProviderInfo GetLinqToDbProviderInfo(DbConnection connection) Parameters Type Name Description DbConnection connection Database connection. Returns Type Description LinqToDBProviderInfo linq2db provider settings. | Improve this Doc View Source GetLinqToDbProviderInfo(EFProviderInfo) Converts EF Core provider settings to linq2db provider settings. Declaration protected virtual LinqToDBProviderInfo GetLinqToDbProviderInfo(EFProviderInfo providerInfo) Parameters Type Name Description EFProviderInfo providerInfo EF Core provider settings. Returns Type Description LinqToDBProviderInfo linq2db provider settings. | Improve this Doc View Source GetLinqToDbProviderInfo(RelationalOptionsExtension) Creates linq2db provider settings object from instance. Declaration protected virtual LinqToDBProviderInfo GetLinqToDbProviderInfo(RelationalOptionsExtension extensions) Parameters Type Name Description RelationalOptionsExtension extensions EF Core provider options. Returns Type Description LinqToDBProviderInfo linq2db provider settings. | Improve this Doc View Source GetMappingSchema(IModel, Nullable<IMetadataReader>, Nullable<IValueConverterSelector>) Returns mapping schema using provided EF Core data model and metadata provider. Declaration public virtual MappingSchema GetMappingSchema(IModel model, IMetadataReader? metadataReader, IValueConverterSelector? convertorSelector) Parameters Type Name Description IModel model EF Core data model. System.Nullable < IMetadataReader > metadataReader Additional optional LINQ To DB database metadata provider. System.Nullable < IValueConverterSelector > convertorSelector Returns Type Description MappingSchema Mapping schema for provided EF.Core model. | Improve this Doc View Source IsQueryable(MethodCallExpression, Boolean) Tests that method is extension. Declaration public static bool IsQueryable(MethodCallExpression method, bool enumerable = true) Parameters Type Name Description MethodCallExpression method Method to test. System.Boolean enumerable Allow extensions. Returns Type Description System.Boolean true if method is extension. | Improve this Doc View Source LogConnectionTrace(TraceInfo, ILogger) Logs lin2db trace event to logger. Declaration public virtual void LogConnectionTrace(TraceInfo info, ILogger logger) Parameters Type Name Description TraceInfo info lin2db trace event. ILogger logger Logger instance. | Improve this Doc View Source TransformExpression(Expression, Nullable<IDataContext>, Nullable<DbContext>, Nullable<IModel>) Transforms EF Core expression tree to LINQ To DB expression. Method replaces EF Core instances with LINQ To DB calls. Declaration public virtual Expression TransformExpression(Expression expression, IDataContext? dc, DbContext? ctx, IModel? model) Parameters Type Name Description Expression expression EF Core expression tree. System.Nullable < IDataContext > dc LINQ To DB instance. System.Nullable < DbContext > ctx Optional DbContext instance. System.Nullable < IModel > model EF Core data model instance. Returns Type Description Expression Transformed expression. | Improve this Doc View Source Unwrap(Nullable<Expression>) Removes conversions from expression. Declaration public static Expression? Unwrap(Expression? ex) Parameters Type Name Description System.Nullable < Expression > ex Expression. Returns Type Description System.Nullable < Expression > Unwrapped expression. Implements ILinqToDBForEFTools Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo.html": {
    "href": "api/LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo.html",
    "title": "Class LinqToDBProviderInfo | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBProviderInfo Stores LINQ To DB database provider information. Inheritance System.Object LinqToDBProviderInfo Namespace : LinqToDB.EntityFrameworkCore Assembly : linq2db.EntityFrameworkCore.dll Syntax public class LinqToDBProviderInfo : object Properties | Improve this Doc View Source ProviderName Gets or sets LINQ To DB provider name. for available providers. Declaration public string? ProviderName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Version Server version. Currently is not used. Declaration public string? Version { get; set; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source Merge(LinqToDBProviderInfo) Replaces null values in current instance with values from parameter. Declaration public void Merge(LinqToDBProviderInfo providerInfo) Parameters Type Name Description LinqToDBProviderInfo providerInfo Provider information to merge into current object. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ExpressionMethodAttribute.html": {
    "href": "api/LinqToDB.ExpressionMethodAttribute.html",
    "title": "Class ExpressionMethodAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ExpressionMethodAttribute When applied to method or property, tells linq2db to replace them in queryable LINQ expression with another expression, returned by method, specified in this attribute. Requirements to expression method: expression method should be in the same class and replaced property of method; method could be private. When applied to property, expression: method should return function expression with the same return type as property type; expression method could take up to two parameters in any order - current object parameter and database connection context object. When applied to method: expression method should return function expression with the same return type as method return type; method cannot have void return type; parameters in expression method should go in the same order as in substituted method; expression could take method instance object as first parameter; expression could take database connection context object as last parameter; last method parameters could be ommited from expression method, but only if you don't add database connection context parameter. Inheritance System.Object ExpressionMethodAttribute Namespace : LinqToDB Assembly : linq2db.dll Syntax public class ExpressionMethodAttribute : Attribute Constructors | Improve this Doc View Source ExpressionMethodAttribute(LambdaExpression) Creates instance of attribute. Declaration public ExpressionMethodAttribute(LambdaExpression expression) Parameters Type Name Description LambdaExpression expression Substitution expression. | Improve this Doc View Source ExpressionMethodAttribute(Nullable<String>, String) Creates instance of attribute. Declaration public ExpressionMethodAttribute(string? configuration, string methodName) Parameters Type Name Description System.Nullable < System.String > configuration Connection configuration, for which this attribute should be taken into account. System.String methodName Name of method in the same class that returns substitution expression. | Improve this Doc View Source ExpressionMethodAttribute(String) Creates instance of attribute. Declaration public ExpressionMethodAttribute(string methodName) Parameters Type Name Description System.String methodName Name of method in the same class that returns substitution expression. Properties | Improve this Doc View Source Alias Gets or sets alias for substitution expression. Note that alias can be overriden by projection member name. Declaration public string? Alias { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Configuration Mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Expression Substitution expression. Declaration public LambdaExpression? Expression { get; set; } Property Value Type Description System.Nullable < LambdaExpression > | Improve this Doc View Source IsColumn Gets or sets calculated column flag. When applied to property and set to true , Linq To DB will load data into property using expression during entity materialization. Declaration public bool IsColumn { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MethodName Name of method in the same class that returns substitution expression. Declaration public string? MethodName { get; set; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.DefaultValueExpression.html": {
    "href": "api/LinqToDB.Expressions.DefaultValueExpression.html",
    "title": "Class DefaultValueExpression | Linq To DB (aka linq2db)",
    "keywords": "Class DefaultValueExpression Inheritance System.Object DefaultValueExpression Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public class DefaultValueExpression : Expression Constructors | Improve this Doc View Source DefaultValueExpression(MappingSchema, Type) Declaration public DefaultValueExpression(MappingSchema mappingSchema, Type type) Parameters Type Name Description MappingSchema mappingSchema Type type Properties | Improve this Doc View Source CanReduce Declaration public override bool CanReduce { get; } Property Value Type Description System.Boolean | Improve this Doc View Source NodeType Declaration public override ExpressionType NodeType { get; } Property Value Type Description ExpressionType | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source Reduce() Declaration public override Expression Reduce() Returns Type Description Expression | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.ExpressionGenerator.html": {
    "href": "api/LinqToDB.Expressions.ExpressionGenerator.html",
    "title": "Class ExpressionGenerator | Linq To DB (aka linq2db)",
    "keywords": "Class ExpressionGenerator Inheritance System.Object ExpressionGenerator Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public class ExpressionGenerator : object Constructors | Improve this Doc View Source ExpressionGenerator() Declaration public ExpressionGenerator() | Improve this Doc View Source ExpressionGenerator(TypeMapper) Declaration public ExpressionGenerator(TypeMapper mapper) Parameters Type Name Description TypeMapper mapper Properties | Improve this Doc View Source ResultExpression Declaration public Expression ResultExpression { get; } Property Value Type Description Expression Methods | Improve this Doc View Source AddExpression(Expression) Declaration public Expression AddExpression(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression | Improve this Doc View Source AddVariable(ParameterExpression) Declaration public ParameterExpression AddVariable(ParameterExpression variable) Parameters Type Name Description ParameterExpression variable Returns Type Description ParameterExpression | Improve this Doc View Source Assign(Expression, Expression) Declaration public Expression Assign(Expression left, Expression right) Parameters Type Name Description Expression left Expression right Returns Type Description Expression | Improve this Doc View Source AssignToVariable(Expression, Nullable<String>) Declaration public ParameterExpression AssignToVariable(Expression expression, string? name = null) Parameters Type Name Description Expression expression System.Nullable < System.String > name Returns Type Description ParameterExpression | Improve this Doc View Source Build() Declaration public Expression Build() Returns Type Description Expression | Improve this Doc View Source Build(Action<ExpressionGenerator>, TypeMapper) Declaration public static Expression Build(Action<ExpressionGenerator> buildFunc, TypeMapper typeMapper = null) Parameters Type Name Description Action < ExpressionGenerator > buildFunc TypeMapper typeMapper Returns Type Description Expression | Improve this Doc View Source Condition(Expression, Expression, Expression) Declaration public Expression Condition(Expression test, Expression ifTrue, Expression ifFalse) Parameters Type Name Description Expression test Expression ifTrue Expression ifFalse Returns Type Description Expression | Improve this Doc View Source DeclareVariable(Type, Nullable<String>) Declaration public ParameterExpression DeclareVariable(Type type, string? name = null) Parameters Type Name Description Type type System.Nullable < System.String > name Returns Type Description ParameterExpression | Improve this Doc View Source IfThen(Expression, Expression) Declaration public Expression IfThen(Expression test, Expression ifTrue) Parameters Type Name Description Expression test Expression ifTrue Returns Type Description Expression | Improve this Doc View Source IfThenElse(Expression, Expression, Expression) Declaration public Expression IfThenElse(Expression test, Expression ifTrue, Expression ifFalse) Parameters Type Name Description Expression test Expression ifTrue Expression ifFalse Returns Type Description Expression | Improve this Doc View Source MapAction(Expression<Action>) Declaration public Expression MapAction(Expression<Action> action) Parameters Type Name Description Expression < Action > action Returns Type Description Expression | Improve this Doc View Source MapAction<T>(Expression<Action<T>>, Expression) Declaration public Expression MapAction<T>(Expression<Action<T>> action, Expression p) Parameters Type Name Description Expression < Action <T>> action Expression p Returns Type Description Expression Type Parameters Name Description T | Improve this Doc View Source MapAction<T1, T2>(Expression<Action<T1, T2>>, Expression, Expression) Declaration public Expression MapAction<T1, T2>(Expression<Action<T1, T2>> action, Expression p1, Expression p2) Parameters Type Name Description Expression < Action <T1, T2>> action Expression p1 Expression p2 Returns Type Description Expression Type Parameters Name Description T1 T2 | Improve this Doc View Source MapAction<T1, T2, T3>(Expression<Action<T1, T2, T3>>, Expression, Expression, Expression) Declaration public Expression MapAction<T1, T2, T3>(Expression<Action<T1, T2, T3>> action, Expression p1, Expression p2, Expression p3) Parameters Type Name Description Expression < Action <T1, T2, T3>> action Expression p1 Expression p2 Expression p3 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 | Improve this Doc View Source MapAction<T1, T2, T3, T4>(Expression<Action<T1, T2, T3, T4>>, Expression, Expression, Expression, Expression) Declaration public Expression MapAction<T1, T2, T3, T4>(Expression<Action<T1, T2, T3, T4>> action, Expression p1, Expression p2, Expression p3, Expression p4) Parameters Type Name Description Expression < Action <T1, T2, T3, T4>> action Expression p1 Expression p2 Expression p3 Expression p4 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 T4 | Improve this Doc View Source MapAction<T1, T2, T3, T4, T5>(Expression<Action<T1, T2, T3, T4, T5>>, Expression, Expression, Expression, Expression, Expression) Declaration public Expression MapAction<T1, T2, T3, T4, T5>(Expression<Action<T1, T2, T3, T4, T5>> action, Expression p1, Expression p2, Expression p3, Expression p4, Expression p5) Parameters Type Name Description Expression < Action <T1, T2, T3, T4, T5>> action Expression p1 Expression p2 Expression p3 Expression p4 Expression p5 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 T4 T5 | Improve this Doc View Source MapExpression<TR>(Expression<Func<TR>>) Declaration public Expression MapExpression<TR>(Expression<Func<TR>> func) Parameters Type Name Description Expression < Func <TR>> func Returns Type Description Expression Type Parameters Name Description TR | Improve this Doc View Source MapExpression<T, TR>(Expression<Func<T, TR>>, Expression) Declaration public Expression MapExpression<T, TR>(Expression<Func<T, TR>> func, Expression p) Parameters Type Name Description Expression < Func <T, TR>> func Expression p Returns Type Description Expression Type Parameters Name Description T TR | Improve this Doc View Source MapExpression<T1, T2, TR>(Expression<Func<T1, T2, TR>>, Expression, Expression) Declaration public Expression MapExpression<T1, T2, TR>(Expression<Func<T1, T2, TR>> func, Expression p1, Expression p2) Parameters Type Name Description Expression < Func <T1, T2, TR>> func Expression p1 Expression p2 Returns Type Description Expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapExpression<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>>, Expression, Expression, Expression) Declaration public Expression MapExpression<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>> func, Expression p1, Expression p2, Expression p3) Parameters Type Name Description Expression < Func <T1, T2, T3, TR>> func Expression p1 Expression p2 Expression p3 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapExpression<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>>, Expression, Expression, Expression, Expression) Declaration public Expression MapExpression<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>> func, Expression p1, Expression p2, Expression p3, Expression p4) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, TR>> func Expression p1 Expression p2 Expression p3 Expression p4 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapExpression<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression, Expression, Expression, Expression, Expression) Declaration public Expression MapExpression<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>> func, Expression p1, Expression p2, Expression p3, Expression p4, Expression p5) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, T5, TR>> func Expression p1 Expression p2 Expression p3 Expression p4 Expression p5 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source MemberAccess<T>(Expression<Func<T, Object>>, Expression) Declaration public MemberExpression MemberAccess<T>(Expression<Func<T, object>> memberExpression, Expression obj) Parameters Type Name Description Expression < Func <T, System.Object >> memberExpression Expression obj Returns Type Description MemberExpression Type Parameters Name Description T | Improve this Doc View Source Throw(Expression) Declaration public Expression Throw(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression | Improve this Doc View Source TryCatch(Expression, CatchBlock[]) Declaration public Expression TryCatch(Expression body, params CatchBlock[] catchBlocks) Parameters Type Name Description Expression body CatchBlock [] catchBlocks Returns Type Description Expression Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.ExpressionHelper.html": {
    "href": "api/LinqToDB.Expressions.ExpressionHelper.html",
    "title": "Class ExpressionHelper | Linq To DB (aka linq2db)",
    "keywords": "Class ExpressionHelper Inheritance System.Object ExpressionHelper Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public static class ExpressionHelper : object Methods | Improve this Doc View Source Field(Expression, String) Compared to , performs case-sensitive field search. Declaration public static MemberExpression Field(Expression obj, string name) Parameters Type Name Description Expression obj System.String name Returns Type Description MemberExpression | Improve this Doc View Source Field(Type, String) Compared to , performs case-sensitive field search and search only for static fields. Declaration public static MemberExpression Field(Type type, string name) Parameters Type Name Description Type type System.String name Returns Type Description MemberExpression | Improve this Doc View Source Property(Expression, String) Compared to , performs case-sensitive property search. Declaration public static MemberExpression Property(Expression obj, string name) Parameters Type Name Description Expression obj System.String name Returns Type Description MemberExpression | Improve this Doc View Source Property(Type, String) Compared to , performs case-sensitive property search and search only for static properties. Declaration public static MemberExpression Property(Type type, string name) Parameters Type Name Description Type type System.String name Returns Type Description MemberExpression | Improve this Doc View Source PropertyOrField(Expression, String) Compared to , performs case-sensitive member search. Declaration public static MemberExpression PropertyOrField(Expression obj, string name) Parameters Type Name Description Expression obj System.String name Returns Type Description MemberExpression"
  },
  "api/LinqToDB.Expressions.ExpressionInstances.html": {
    "href": "api/LinqToDB.Expressions.ExpressionInstances.html",
    "title": "Class ExpressionInstances | Linq To DB (aka linq2db)",
    "keywords": "Class ExpressionInstances Contains pre-created instances of object for often used constants. Using those instances we avoid unnecessary allocations of same constant instances and avoid boxing for value constants (e.g. booleans, integers). Inheritance System.Object ExpressionInstances Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public static class ExpressionInstances : object Fields | Improve this Doc View Source Constant0 Declaration public static readonly ConstantExpression Constant0 Field Value Type Description ConstantExpression | Improve this Doc View Source Constant1 Declaration public static readonly ConstantExpression Constant1 Field Value Type Description ConstantExpression | Improve this Doc View Source Constant26 Declaration public static readonly ConstantExpression Constant26 Field Value Type Description ConstantExpression | Improve this Doc View Source Constant29 Declaration public static readonly ConstantExpression Constant29 Field Value Type Description ConstantExpression | Improve this Doc View Source False Declaration public static readonly ConstantExpression False Field Value Type Description ConstantExpression | Improve this Doc View Source True Declaration public static readonly ConstantExpression True Field Value Type Description ConstantExpression | Improve this Doc View Source UntypedNull Declaration public static readonly ConstantExpression UntypedNull Field Value Type Description ConstantExpression"
  },
  "api/LinqToDB.Expressions.Extensions.html": {
    "href": "api/LinqToDB.Expressions.Extensions.html",
    "title": "Class Extensions | Linq To DB (aka linq2db)",
    "keywords": "Class Extensions Inheritance System.Object Extensions Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public static class Extensions : object Methods | Improve this Doc View Source Find(Nullable<Expression>, Expression) Enumerates the expression tree and returns the exprToFind if it's contained within the expr . Declaration public static Expression? Find(this Expression? expr, Expression exprToFind) Parameters Type Name Description System.Nullable < Expression > expr Expression exprToFind Returns Type Description System.Nullable < Expression > | Improve this Doc View Source Find<TContext>(Nullable<Expression>, TContext, Func<TContext, Expression, Boolean>) Enumerates the given expr and returns the first sub-expression which matches the given func . If no expression was found, null is returned. Declaration public static Expression? Find<TContext>(this Expression? expr, TContext context, Func<TContext, Expression, bool> func) Parameters Type Name Description System.Nullable < Expression > expr TContext context Func <TContext, Expression , System.Boolean > func Returns Type Description System.Nullable < Expression > Type Parameters Name Description TContext | Improve this Doc View Source GetBody(LambdaExpression, Expression) Returns the body of lambda but replaces the first parameter of that lambda expression with the exprToReplaceParameter expression. Declaration public static Expression GetBody(this LambdaExpression lambda, Expression exprToReplaceParameter) Parameters Type Name Description LambdaExpression lambda Expression exprToReplaceParameter Returns Type Description Expression | Improve this Doc View Source GetBody(LambdaExpression, Expression, Expression) Returns the body of lambda but replaces the first two parameters of that lambda expression with the given replace expressions. Declaration public static Expression GetBody(this LambdaExpression lambda, Expression exprToReplaceParameter1, Expression exprToReplaceParameter2) Parameters Type Name Description LambdaExpression lambda Expression exprToReplaceParameter1 Expression exprToReplaceParameter2 Returns Type Description Expression | Improve this Doc View Source GetBody(LambdaExpression, Expression, Expression, Expression) Returns the body of lambda but replaces the first three parameters of that lambda expression with the given replace expressions. Declaration public static Expression GetBody(this LambdaExpression lambda, Expression exprToReplaceParameter1, Expression exprToReplaceParameter2, Expression exprToReplaceParameter3) Parameters Type Name Description LambdaExpression lambda Expression exprToReplaceParameter1 Expression exprToReplaceParameter2 Expression exprToReplaceParameter3 Returns Type Description Expression | Improve this Doc View Source GetCount<TContext>(Expression, TContext, Func<TContext, Expression, Boolean>) Returns the total number of expression items which are matching the given. func . Declaration public static int GetCount<TContext>(this Expression expr, TContext context, Func<TContext, Expression, bool> func) Parameters Type Name Description Expression expr Expression-Tree which gets counted. TContext context Expression-Tree visitor context. Func <TContext, Expression , System.Boolean > func Predicate which is used to test if the given expression should be counted. Returns Type Description System.Int32 Type Parameters Name Description TContext | Improve this Doc View Source GetDebugView(Expression) Gets the DebugView internal property value of provided expression. Declaration public static string GetDebugView(this Expression expression) Parameters Type Name Description Expression expression Expression to get DebugView. Returns Type Description System.String DebugView value. | Improve this Doc View Source GetMemberGetter(MemberInfo, Expression) Declaration public static Expression GetMemberGetter(MemberInfo mi, Expression obj) Parameters Type Name Description MemberInfo mi Expression obj Returns Type Description Expression | Improve this Doc View Source Replace(Expression, Expression, Expression) Declaration public static Expression Replace(this Expression expression, Expression toReplace, Expression replacedBy) Parameters Type Name Description Expression expression Expression toReplace Expression replacedBy Returns Type Description Expression | Improve this Doc View Source Replace(Expression, Expression, Expression, IEqualityComparer<Expression>) Declaration public static Expression Replace(this Expression expression, Expression toReplace, Expression replacedBy, IEqualityComparer<Expression> equalityComparer) Parameters Type Name Description Expression expression Expression toReplace Expression replacedBy IEqualityComparer < Expression > equalityComparer Returns Type Description Expression | Improve this Doc View Source Transform(Nullable<Expression>, Func<Expression, Expression>) Enumerates the expression tree of expr and might replace expression with the returned value of the given func . Declaration public static Expression? Transform(this Expression? expr, Func<Expression, Expression> func) Parameters Type Name Description System.Nullable < Expression > expr Func < Expression , Expression > func Returns Type Description System.Nullable < Expression > The modified expression. | Improve this Doc View Source Transform(Nullable<Expression>, Func<Expression, TransformInfo>) Declaration public static Expression? Transform(this Expression? expr, Func<Expression, TransformInfo> func) Parameters Type Name Description System.Nullable < Expression > expr Func < Expression , TransformInfo > func Returns Type Description System.Nullable < Expression > | Improve this Doc View Source Transform<TContext>(Nullable<Expression>, TContext, Func<TContext, Expression, Expression>) Enumerates the expression tree of expr and might replace expression with the returned value of the given func . Declaration public static Expression? Transform<TContext>(this Expression? expr, TContext context, Func<TContext, Expression, Expression> func) Parameters Type Name Description System.Nullable < Expression > expr TContext context Func <TContext, Expression , Expression > func Returns Type Description System.Nullable < Expression > The modified expression. Type Parameters Name Description TContext | Improve this Doc View Source Transform<TContext>(Nullable<Expression>, TContext, Func<TContext, Expression, TransformInfo>) Declaration public static Expression? Transform<TContext>(this Expression? expr, TContext context, Func<TContext, Expression, TransformInfo> func) Parameters Type Name Description System.Nullable < Expression > expr TContext context Func <TContext, Expression , TransformInfo > func Returns Type Description System.Nullable < Expression > Type Parameters Name Description TContext | Improve this Doc View Source Visit<TContext>(Expression, TContext, Action<TContext, Expression>) Calls the given func for each child node of the expr . Declaration public static void Visit<TContext>(this Expression expr, TContext context, Action<TContext, Expression> func) Parameters Type Name Description Expression expr TContext context Action <TContext, Expression > func Type Parameters Name Description TContext | Improve this Doc View Source Visit<TContext>(Expression, TContext, Func<TContext, Expression, Boolean>) Calls the given func for each node of the expr . If the func returns false, no childs of the tested expression will be enumerated. Declaration public static void Visit<TContext>(this Expression expr, TContext context, Func<TContext, Expression, bool> func) Parameters Type Name Description Expression expr TContext context Func <TContext, Expression , System.Boolean > func Type Parameters Name Description TContext"
  },
  "api/LinqToDB.Expressions.html": {
    "href": "api/LinqToDB.Expressions.html",
    "title": "Namespace LinqToDB.Expressions | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Expressions Classes DefaultValueExpression ExpressionGenerator ExpressionHelper ExpressionInstances Contains pre-created instances of object for often used constants. Using those instances we avoid unnecessary allocations of same constant instances and avoid boxing for value constants (e.g. booleans, integers). Extensions MemberHelper SqlQueryDependentAttribute Used for controlling query caching of custom SQL Functions. Parameter with this attribute will be evaluated on client side before generating SQL. SqlQueryDependentParamsAttribute Used for controlling query caching of custom SQL Functions. Parameter with this attribute will be evaluated on client side before generating SQL. TypeMapper Implements typed mappings support for dynamically loaded types. TypeMapper.MemberBuilder<T, TV> TypeMapper.TypeBuilder<T> TypeWrapper Implements base class for typed wrappers over provider-specific type. WrapperAttribute Structs TransformInfo Interfaces IGenericInfoProvider Generic conversions provider. Implementation class must be generic, as type parameters will be used for conversion initialization in SetInfo(MappingSchema) method. // this conversion provider adds conversion from IEnumerable<T> to ImmutableList<T> for specific T type parameter class EnumerableToImmutableListConvertProvider<T> : IGenericInfoProvider { public void SetInfo(MappingSchema mappingSchema) { mappingSchema.SetConvertExpression<IEnumerable<T>,ImmutableList<T>>( t => ImmutableList.Create(t.ToArray())); } } SetGenericConvertProvider(Type) for more details."
  },
  "api/LinqToDB.Expressions.IGenericInfoProvider.html": {
    "href": "api/LinqToDB.Expressions.IGenericInfoProvider.html",
    "title": "Interface IGenericInfoProvider | Linq To DB (aka linq2db)",
    "keywords": "Interface IGenericInfoProvider Generic conversions provider. Implementation class must be generic, as type parameters will be used for conversion initialization in SetInfo(MappingSchema) method. // this conversion provider adds conversion from IEnumerable<T> to ImmutableList<T> for specific T type parameter class EnumerableToImmutableListConvertProvider<T> : IGenericInfoProvider { public void SetInfo(MappingSchema mappingSchema) { mappingSchema.SetConvertExpression<IEnumerable<T>,ImmutableList<T>>( t => ImmutableList.Create(t.ToArray())); } } SetGenericConvertProvider(Type) for more details. Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public interface IGenericInfoProvider Methods | Improve this Doc View Source SetInfo(MappingSchema) IMplementation should use this method to provide conversions for generic types with type parameters, used to instantiate instance of current class. Declaration void SetInfo(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Mapping schema, to which conversions should be added. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.MemberHelper.html": {
    "href": "api/LinqToDB.Expressions.MemberHelper.html",
    "title": "Class MemberHelper | Linq To DB (aka linq2db)",
    "keywords": "Class MemberHelper Inheritance System.Object MemberHelper Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public static class MemberHelper : object Methods | Improve this Doc View Source ConstructorOf(Expression<Func<Object>>) Declaration public static ConstructorInfo ConstructorOf(Expression<Func<object>> func) Parameters Type Name Description Expression < Func < System.Object >> func Returns Type Description ConstructorInfo | Improve this Doc View Source ConstructorOf<T>(Expression<Func<T, Object>>) Declaration public static ConstructorInfo ConstructorOf<T>(Expression<Func<T, object>> func) Parameters Type Name Description Expression < Func <T, System.Object >> func Returns Type Description ConstructorInfo Type Parameters Name Description T | Improve this Doc View Source FieldOf<T>(Expression<Func<T, Nullable<Object>>>) Declaration public static FieldInfo FieldOf<T>(Expression<Func<T, object?>> func) Parameters Type Name Description Expression < Func <T, System.Nullable < System.Object >>> func Returns Type Description FieldInfo Type Parameters Name Description T | Improve this Doc View Source GetMemberInfo(Expression) Gets the member information from given expression. Declaration public static MemberInfo GetMemberInfo(Expression expr) Parameters Type Name Description Expression expr The expression. Returns Type Description MemberInfo Remarks Returns member information for given expressions, e.g.: For: x => x.SomeProperty, returns MemberInfo of SomeProperty. For: x => x.SomeMethod(), returns MethodInfo of SomeMethod. For: x => new { X = x.Name }, return ConstructorInfo of anonymous type. For: x => Sql.Property<int>(x, \"SomeProperty\"), returns MemberInfo of \"SomeProperty\" if exists on type, otherwise returns DynamicColumnInfo for SomeProperty on given type. | Improve this Doc View Source GetMemberInfo(LambdaExpression) Gets the member information from given lambda expression. GetMemberInfo(Expression) Declaration public static MemberInfo GetMemberInfo(LambdaExpression func) Parameters Type Name Description LambdaExpression func The lambda expression. Returns Type Description MemberInfo | Improve this Doc View Source MemberOf<T>(Expression<Func<T, Nullable<Object>>>) Declaration public static MemberInfo MemberOf<T>(Expression<Func<T, object?>> func) Parameters Type Name Description Expression < Func <T, System.Nullable < System.Object >>> func Returns Type Description MemberInfo Type Parameters Name Description T | Improve this Doc View Source MemberOf<T, TMember>(Expression<Func<T, TMember>>) Declaration public static MemberInfo MemberOf<T, TMember>(Expression<Func<T, TMember>> func) Parameters Type Name Description Expression < Func <T, TMember>> func Returns Type Description MemberInfo Type Parameters Name Description T TMember | Improve this Doc View Source MethodOf(Expression<Action>) Declaration public static MethodInfo MethodOf(Expression<Action> func) Parameters Type Name Description Expression < Action > func Returns Type Description MethodInfo | Improve this Doc View Source MethodOf(Expression<Func<Nullable<Object>>>) Declaration public static MethodInfo MethodOf(Expression<Func<object?>> func) Parameters Type Name Description Expression < Func < System.Nullable < System.Object >>> func Returns Type Description MethodInfo | Improve this Doc View Source MethodOf<T>(Expression<Func<T, Nullable<Object>>>) Declaration public static MethodInfo MethodOf<T>(Expression<Func<T, object?>> func) Parameters Type Name Description Expression < Func <T, System.Nullable < System.Object >>> func Returns Type Description MethodInfo Type Parameters Name Description T | Improve this Doc View Source MethodOf<T1, T2>(Expression<Func<T1, T2, Nullable<Object>>>) Declaration public static MethodInfo MethodOf<T1, T2>(Expression<Func<T1, T2, object?>> func) Parameters Type Name Description Expression < Func <T1, T2, System.Nullable < System.Object >>> func Returns Type Description MethodInfo Type Parameters Name Description T1 T2 | Improve this Doc View Source MethodOf<T1, T2, T3>(Expression<Func<T1, T2, T3, Nullable<Object>>>) Declaration public static MethodInfo MethodOf<T1, T2, T3>(Expression<Func<T1, T2, T3, object?>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, System.Nullable < System.Object >>> func Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 | Improve this Doc View Source MethodOf<T1, T2, T3, T4>(Expression<Func<T1, T2, T3, T4, Nullable<Object>>>) Declaration public static MethodInfo MethodOf<T1, T2, T3, T4>(Expression<Func<T1, T2, T3, T4, object?>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, System.Nullable < System.Object >>> func Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 T4 | Improve this Doc View Source MethodOfGeneric(Expression<Action>) Declaration public static MethodInfo MethodOfGeneric(Expression<Action> func) Parameters Type Name Description Expression < Action > func Returns Type Description MethodInfo | Improve this Doc View Source MethodOfGeneric(Expression<Func<Nullable<Object>>>) Declaration public static MethodInfo MethodOfGeneric(Expression<Func<object?>> func) Parameters Type Name Description Expression < Func < System.Nullable < System.Object >>> func Returns Type Description MethodInfo | Improve this Doc View Source MethodOfGeneric<T>(Expression<Func<T, Nullable<Object>>>) Declaration public static MethodInfo MethodOfGeneric<T>(Expression<Func<T, object?>> func) Parameters Type Name Description Expression < Func <T, System.Nullable < System.Object >>> func Returns Type Description MethodInfo Type Parameters Name Description T | Improve this Doc View Source MethodOfGeneric<T1, T2>(Expression<Func<T1, T2, Nullable<Object>>>) Declaration public static MethodInfo MethodOfGeneric<T1, T2>(Expression<Func<T1, T2, object?>> func) Parameters Type Name Description Expression < Func <T1, T2, System.Nullable < System.Object >>> func Returns Type Description MethodInfo Type Parameters Name Description T1 T2 | Improve this Doc View Source MethodOfGeneric<T1, T2, T3>(Expression<Func<T1, T2, T3, Nullable<Object>>>) Declaration public static MethodInfo MethodOfGeneric<T1, T2, T3>(Expression<Func<T1, T2, T3, object?>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, System.Nullable < System.Object >>> func Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 | Improve this Doc View Source MethodOfGeneric<T1, T2, T3, T4>(Expression<Func<T1, T2, T3, T4, Nullable<Object>>>) Declaration public static MethodInfo MethodOfGeneric<T1, T2, T3, T4>(Expression<Func<T1, T2, T3, T4, object?>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, System.Nullable < System.Object >>> func Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 T4 | Improve this Doc View Source PropertyOf<T>(Expression<Func<T, Nullable<Object>>>) Declaration public static PropertyInfo PropertyOf<T>(Expression<Func<T, object?>> func) Parameters Type Name Description Expression < Func <T, System.Nullable < System.Object >>> func Returns Type Description PropertyInfo Type Parameters Name Description T"
  },
  "api/LinqToDB.Expressions.SqlQueryDependentAttribute.html": {
    "href": "api/LinqToDB.Expressions.SqlQueryDependentAttribute.html",
    "title": "Class SqlQueryDependentAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class SqlQueryDependentAttribute Used for controlling query caching of custom SQL Functions. Parameter with this attribute will be evaluated on client side before generating SQL. Inheritance System.Object SqlQueryDependentAttribute SqlQueryDependentParamsAttribute Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public class SqlQueryDependentAttribute : Attribute Methods | Improve this Doc View Source ExpressionsEqual<TContext>(TContext, Expression, Expression, Func<TContext, Expression, Expression, Boolean>) Compares two expressions during expression tree comparison. Has to be overriden if specific comparison required. Declaration public virtual bool ExpressionsEqual<TContext>(TContext context, Expression expr1, Expression expr2, Func<TContext, Expression, Expression, bool> comparer) Parameters Type Name Description TContext context Expression expr1 Expression expr2 Func <TContext, Expression , Expression , System.Boolean > comparer Default function for comparing expressions. Returns Type Description System.Boolean Result of comparison Type Parameters Name Description TContext | Improve this Doc View Source ObjectsEqual(Nullable<Object>, Nullable<Object>) Compares two objects during expression tree comparison. Handles sequences also. Has to be overriden if specific comparison required. Declaration public virtual bool ObjectsEqual(object? obj1, object? obj2) Parameters Type Name Description System.Nullable < System.Object > obj1 System.Nullable < System.Object > obj2 Returns Type Description System.Boolean Result of comparison | Improve this Doc View Source PrepareForCache(Expression) Used for preparation method argument to cached expression value. Declaration public virtual Expression PrepareForCache(Expression expression) Parameters Type Name Description Expression expression Expression for caching. Returns Type Description Expression Ready to cache expression. | Improve this Doc View Source SplitExpression(Expression) Returns sub-expressions, if attribute applied to composite expression. Default (non-composite) implementation returns expression . Declaration public virtual IEnumerable<Expression> SplitExpression(Expression expression) Parameters Type Name Description Expression expression Expression to split. Returns Type Description IEnumerable < Expression > Passed expression of sub-expressions for composite expression. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.SqlQueryDependentParamsAttribute.html": {
    "href": "api/LinqToDB.Expressions.SqlQueryDependentParamsAttribute.html",
    "title": "Class SqlQueryDependentParamsAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class SqlQueryDependentParamsAttribute Used for controlling query caching of custom SQL Functions. Parameter with this attribute will be evaluated on client side before generating SQL. Inheritance System.Object SqlQueryDependentAttribute SqlQueryDependentParamsAttribute Inherited Members SqlQueryDependentAttribute.ObjectsEqual(Nullable<Object>, Nullable<Object>) SqlQueryDependentAttribute.PrepareForCache(Expression) Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public class SqlQueryDependentParamsAttribute : SqlQueryDependentAttribute Methods | Improve this Doc View Source ExpressionsEqual<TContext>(TContext, Expression, Expression, Func<TContext, Expression, Expression, Boolean>) Declaration public override bool ExpressionsEqual<TContext>(TContext context, Expression expr1, Expression expr2, Func<TContext, Expression, Expression, bool> comparer) Parameters Type Name Description TContext context Expression expr1 Expression expr2 Func <TContext, Expression , Expression , System.Boolean > comparer Returns Type Description System.Boolean Type Parameters Name Description TContext Overrides LinqToDB.Expressions.SqlQueryDependentAttribute.ExpressionsEqual<TContext>(TContext, Expression, Expression, Func<TContext, Expression, Expression, System.Boolean>) | Improve this Doc View Source SplitExpression(Expression) Declaration public override IEnumerable<Expression> SplitExpression(Expression expression) Parameters Type Name Description Expression expression Returns Type Description IEnumerable < Expression > Overrides SqlQueryDependentAttribute.SplitExpression(Expression) Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.TransformInfo.html": {
    "href": "api/LinqToDB.Expressions.TransformInfo.html",
    "title": "Struct TransformInfo | Linq To DB (aka linq2db)",
    "keywords": "Struct TransformInfo Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public struct TransformInfo Constructors | Improve this Doc View Source TransformInfo(Expression) Declaration public TransformInfo(Expression expression) Parameters Type Name Description Expression expression | Improve this Doc View Source TransformInfo(Expression, Boolean) Declaration public TransformInfo(Expression expression, bool stop) Parameters Type Name Description Expression expression System.Boolean stop | Improve this Doc View Source TransformInfo(Expression, Boolean, Boolean) Declaration public TransformInfo(Expression expression, bool stop, bool continue) Parameters Type Name Description Expression expression System.Boolean stop System.Boolean continue Fields | Improve this Doc View Source Continue Declaration public bool Continue Field Value Type Description System.Boolean | Improve this Doc View Source Expression Declaration public Expression Expression Field Value Type Description Expression | Improve this Doc View Source Stop Declaration public bool Stop Field Value Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsDistinctFrom<T>(T, Nullable<T>) Sql.IsNotDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, Nullable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.TypeMapper.html": {
    "href": "api/LinqToDB.Expressions.TypeMapper.html",
    "title": "Class TypeMapper | Linq To DB (aka linq2db)",
    "keywords": "Class TypeMapper Implements typed mappings support for dynamically loaded types. Inheritance System.Object TypeMapper Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public sealed class TypeMapper : object Methods | Improve this Doc View Source BuildAction(LambdaExpression) Declaration public Action BuildAction(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Action | Improve this Doc View Source BuildAction<T>(LambdaExpression) Declaration public Action<T> BuildAction<T>(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Action <T> Type Parameters Name Description T | Improve this Doc View Source BuildAction<T1, T2>(LambdaExpression) Declaration public Action<T1, T2> BuildAction<T1, T2>(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Action <T1, T2> Type Parameters Name Description T1 T2 | Improve this Doc View Source BuildAction<T1, T2, T3>(LambdaExpression) Declaration public Action<T1, T2, T3> BuildAction<T1, T2, T3>(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Action <T1, T2, T3> Type Parameters Name Description T1 T2 T3 | Improve this Doc View Source BuildAction<T1, T2, T3, T4>(LambdaExpression) Declaration public Action<T1, T2, T3, T4> BuildAction<T1, T2, T3, T4>(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Action <T1, T2, T3, T4> Type Parameters Name Description T1 T2 T3 T4 | Improve this Doc View Source BuildAction<T1, T2, T3, T4, T5>(LambdaExpression) Declaration public Action<T1, T2, T3, T4, T5> BuildAction<T1, T2, T3, T4, T5>(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Action <T1, T2, T3, T4, T5> Type Parameters Name Description T1 T2 T3 T4 T5 | Improve this Doc View Source BuildFactory<TR>(Expression<Func<TR>>) Declaration public Func<object> BuildFactory<TR>(Expression<Func<TR>> newFunc) where TR : TypeWrapper Parameters Type Name Description Expression < Func <TR>> newFunc Returns Type Description Func < System.Object > Type Parameters Name Description TR | Improve this Doc View Source BuildFactory<T, TR>(Expression<Func<T, TR>>) Declaration public Func<T, object> BuildFactory<T, TR>(Expression<Func<T, TR>> newFunc) where TR : TypeWrapper Parameters Type Name Description Expression < Func <T, TR>> newFunc Returns Type Description Func <T, System.Object > Type Parameters Name Description T TR | Improve this Doc View Source BuildFactory<T1, T2, TR>(Expression<Func<T1, T2, TR>>) Declaration public Func<T1, T2, object> BuildFactory<T1, T2, TR>(Expression<Func<T1, T2, TR>> newFunc) where TR : TypeWrapper Parameters Type Name Description Expression < Func <T1, T2, TR>> newFunc Returns Type Description Func <T1, T2, System.Object > Type Parameters Name Description T1 T2 TR | Improve this Doc View Source BuildFactory<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>>) Declaration public Func<T1, T2, T3, object> BuildFactory<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>> newFunc) where TR : TypeWrapper Parameters Type Name Description Expression < Func <T1, T2, T3, TR>> newFunc Returns Type Description Func <T1, T2, T3, System.Object > Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source BuildFunc<TR>(LambdaExpression) Declaration public Func<TR> BuildFunc<TR>(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Func <TR> Type Parameters Name Description TR | Improve this Doc View Source BuildFunc<T, TR>(LambdaExpression) Declaration public Func<T, TR> BuildFunc<T, TR>(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Func <T, TR> Type Parameters Name Description T TR | Improve this Doc View Source BuildFunc<T1, T2, TR>(LambdaExpression) Declaration public Func<T1, T2, TR> BuildFunc<T1, T2, TR>(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Func <T1, T2, TR> Type Parameters Name Description T1 T2 TR | Improve this Doc View Source BuildFunc<T1, T2, T3, TR>(LambdaExpression) Declaration public Func<T1, T2, T3, TR> BuildFunc<T1, T2, T3, TR>(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Func <T1, T2, T3, TR> Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source BuildFunc<T1, T2, T3, T4, TR>(LambdaExpression) Declaration public Func<T1, T2, T3, T4, TR> BuildFunc<T1, T2, T3, T4, TR>(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Func <T1, T2, T3, T4, TR> Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source BuildFunc<T1, T2, T3, T4, T5, TR>(LambdaExpression) Declaration public Func<T1, T2, T3, T4, T5, TR> BuildFunc<T1, T2, T3, T4, T5, TR>(LambdaExpression lambda) Parameters Type Name Description LambdaExpression lambda Returns Type Description Func <T1, T2, T3, T4, T5, TR> Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source BuildWrappedFactory<TR>(Expression<Func<TR>>) Declaration public Func<TR> BuildWrappedFactory<TR>(Expression<Func<TR>> newFunc) where TR : TypeWrapper Parameters Type Name Description Expression < Func <TR>> newFunc Returns Type Description Func <TR> Type Parameters Name Description TR | Improve this Doc View Source BuildWrappedFactory<T, TR>(Expression<Func<T, TR>>) Declaration public Func<T, TR> BuildWrappedFactory<T, TR>(Expression<Func<T, TR>> newFunc) where TR : TypeWrapper Parameters Type Name Description Expression < Func <T, TR>> newFunc Returns Type Description Func <T, TR> Type Parameters Name Description T TR | Improve this Doc View Source BuildWrappedFactory<T1, T2, TR>(Expression<Func<T1, T2, TR>>) Declaration public Func<T1, T2, TR> BuildWrappedFactory<T1, T2, TR>(Expression<Func<T1, T2, TR>> newFunc) where TR : TypeWrapper Parameters Type Name Description Expression < Func <T1, T2, TR>> newFunc Returns Type Description Func <T1, T2, TR> Type Parameters Name Description T1 T2 TR | Improve this Doc View Source BuildWrappedFactory<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>>) Declaration public Func<T1, T2, T3, TR> BuildWrappedFactory<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>> newFunc) where TR : TypeWrapper Parameters Type Name Description Expression < Func <T1, T2, T3, TR>> newFunc Returns Type Description Func <T1, T2, T3, TR> Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source FinalizeMappings() Declaration public void FinalizeMappings() | Improve this Doc View Source MapAction(Expression<Action>) Declaration public Expression MapAction(Expression<Action> action) Parameters Type Name Description Expression < Action > action Returns Type Description Expression | Improve this Doc View Source MapAction<T>(Expression<Action<T>>, Expression) Declaration public Expression MapAction<T>(Expression<Action<T>> action, Expression p) Parameters Type Name Description Expression < Action <T>> action Expression p Returns Type Description Expression Type Parameters Name Description T | Improve this Doc View Source MapAction<T1, T2>(Expression<Action<T1, T2>>, Expression, Expression) Declaration public Expression MapAction<T1, T2>(Expression<Action<T1, T2>> action, Expression p1, Expression p2) Parameters Type Name Description Expression < Action <T1, T2>> action Expression p1 Expression p2 Returns Type Description Expression Type Parameters Name Description T1 T2 | Improve this Doc View Source MapAction<T1, T2, T3>(Expression<Action<T1, T2, T3>>, Expression, Expression, Expression) Declaration public Expression MapAction<T1, T2, T3>(Expression<Action<T1, T2, T3>> action, Expression p1, Expression p2, Expression p3) Parameters Type Name Description Expression < Action <T1, T2, T3>> action Expression p1 Expression p2 Expression p3 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 | Improve this Doc View Source MapAction<T1, T2, T3, T4>(Expression<Action<T1, T2, T3, T4>>, Expression, Expression, Expression, Expression) Declaration public Expression MapAction<T1, T2, T3, T4>(Expression<Action<T1, T2, T3, T4>> action, Expression p1, Expression p2, Expression p3, Expression p4) Parameters Type Name Description Expression < Action <T1, T2, T3, T4>> action Expression p1 Expression p2 Expression p3 Expression p4 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 T4 | Improve this Doc View Source MapAction<T1, T2, T3, T4, T5>(Expression<Action<T1, T2, T3, T4, T5>>, Expression, Expression, Expression, Expression, Expression) Declaration public Expression MapAction<T1, T2, T3, T4, T5>(Expression<Action<T1, T2, T3, T4, T5>> action, Expression p1, Expression p2, Expression p3, Expression p4, Expression p5) Parameters Type Name Description Expression < Action <T1, T2, T3, T4, T5>> action Expression p1 Expression p2 Expression p3 Expression p4 Expression p5 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 T4 T5 | Improve this Doc View Source MapActionLambda(Expression<Action>) Declaration public LambdaExpression MapActionLambda(Expression<Action> action) Parameters Type Name Description Expression < Action > action Returns Type Description LambdaExpression | Improve this Doc View Source MapActionLambda<T>(Expression<Action<T>>) Declaration public LambdaExpression MapActionLambda<T>(Expression<Action<T>> action) Parameters Type Name Description Expression < Action <T>> action Returns Type Description LambdaExpression Type Parameters Name Description T | Improve this Doc View Source MapActionLambda<T1, T2>(Expression<Action<T1, T2>>) Declaration public LambdaExpression MapActionLambda<T1, T2>(Expression<Action<T1, T2>> action) Parameters Type Name Description Expression < Action <T1, T2>> action Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 | Improve this Doc View Source MapActionLambda<T1, T2, T3>(Expression<Action<T1, T2, T3>>) Declaration public LambdaExpression MapActionLambda<T1, T2, T3>(Expression<Action<T1, T2, T3>> action) Parameters Type Name Description Expression < Action <T1, T2, T3>> action Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 | Improve this Doc View Source MapActionLambda<T1, T2, T3, T4>(Expression<Action<T1, T2, T3, T4>>) Declaration public LambdaExpression MapActionLambda<T1, T2, T3, T4>(Expression<Action<T1, T2, T3, T4>> action) Parameters Type Name Description Expression < Action <T1, T2, T3, T4>> action Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 T4 | Improve this Doc View Source MapActionLambda<T1, T2, T3, T4, T5>(Expression<Action<T1, T2, T3, T4, T5>>) Declaration public LambdaExpression MapActionLambda<T1, T2, T3, T4, T5>(Expression<Action<T1, T2, T3, T4, T5>> action) Parameters Type Name Description Expression < Action <T1, T2, T3, T4, T5>> action Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 T4 T5 | Improve this Doc View Source MapExpression<TR>(Expression<Func<TR>>) Declaration public Expression MapExpression<TR>(Expression<Func<TR>> func) Parameters Type Name Description Expression < Func <TR>> func Returns Type Description Expression Type Parameters Name Description TR | Improve this Doc View Source MapExpression<T, TR>(Expression<Func<T, TR>>, Expression) Declaration public Expression MapExpression<T, TR>(Expression<Func<T, TR>> func, Expression p) Parameters Type Name Description Expression < Func <T, TR>> func Expression p Returns Type Description Expression Type Parameters Name Description T TR | Improve this Doc View Source MapExpression<T1, T2, TR>(Expression<Func<T1, T2, TR>>, Expression, Expression) Declaration public Expression MapExpression<T1, T2, TR>(Expression<Func<T1, T2, TR>> func, Expression p1, Expression p2) Parameters Type Name Description Expression < Func <T1, T2, TR>> func Expression p1 Expression p2 Returns Type Description Expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapExpression<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>>, Expression, Expression, Expression) Declaration public Expression MapExpression<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>> func, Expression p1, Expression p2, Expression p3) Parameters Type Name Description Expression < Func <T1, T2, T3, TR>> func Expression p1 Expression p2 Expression p3 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapExpression<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>>, Expression, Expression, Expression, Expression) Declaration public Expression MapExpression<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>> func, Expression p1, Expression p2, Expression p3, Expression p4) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, TR>> func Expression p1 Expression p2 Expression p3 Expression p4 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapExpression<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression, Expression, Expression, Expression, Expression) Declaration public Expression MapExpression<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>> func, Expression p1, Expression p2, Expression p3, Expression p4, Expression p5) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, T5, TR>> func Expression p1 Expression p2 Expression p3 Expression p4 Expression p5 Returns Type Description Expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source MapLambda<T, TR>(Expression<Func<T, TR>>) Declaration public LambdaExpression MapLambda<T, TR>(Expression<Func<T, TR>> func) Parameters Type Name Description Expression < Func <T, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T TR | Improve this Doc View Source MapLambda<T1, T2, TR>(Expression<Func<T1, T2, TR>>) Declaration public LambdaExpression MapLambda<T1, T2, TR>(Expression<Func<T1, T2, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapLambda<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>>) Declaration public LambdaExpression MapLambda<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapLambda<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>>) Declaration public LambdaExpression MapLambda<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapLambda<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public LambdaExpression MapLambda<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, T5, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source RegisterTypeWrapper(Type, Type) Declaration public void RegisterTypeWrapper(Type wrapperType, Type originalType) Parameters Type Name Description Type wrapperType Type originalType | Improve this Doc View Source RegisterTypeWrapper<TWrapper>(Type) Declaration public void RegisterTypeWrapper<TWrapper>(Type originalType) Parameters Type Name Description Type originalType Type Parameters Name Description TWrapper | Improve this Doc View Source Type<T>() Declaration public TypeMapper.TypeBuilder<T> Type<T>() Returns Type Description TypeMapper.TypeBuilder <T> Type Parameters Name Description T | Improve this Doc View Source Wrap<TR>(Nullable<Object>) Declaration public TR Wrap<TR>(object? instance) where TR : TypeWrapper Parameters Type Name Description System.Nullable < System.Object > instance Returns Type Description TR Type Parameters Name Description TR | Improve this Doc View Source WrapTask<TR>(Task, Type, CancellationToken) Declaration public async Task<TR> WrapTask<TR>(Task instanceTask, Type instanceType, CancellationToken cancellationToken) where TR : TypeWrapper Parameters Type Name Description Task instanceTask Type instanceType CancellationToken cancellationToken Returns Type Description Task <TR> Type Parameters Name Description TR Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.TypeMapper.MemberBuilder-2.html": {
    "href": "api/LinqToDB.Expressions.TypeMapper.MemberBuilder-2.html",
    "title": "Class TypeMapper.MemberBuilder<T, TV> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeMapper.MemberBuilder<T, TV> Inheritance System.Object TypeMapper.MemberBuilder<T, TV> Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public class MemberBuilder<T, TV> : object Type Parameters Name Description T TV Methods | Improve this Doc View Source BuildGetter<TBase>() Declaration public Func<TBase, TV> BuildGetter<TBase>() Returns Type Description Func <TBase, TV> Type Parameters Name Description TBase | Improve this Doc View Source BuildSetter<TBase>() Declaration public Action<TBase, TV> BuildSetter<TBase>() Returns Type Description Action <TBase, TV> Type Parameters Name Description TBase Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.TypeMapper.TypeBuilder-1.html": {
    "href": "api/LinqToDB.Expressions.TypeMapper.TypeBuilder-1.html",
    "title": "Class TypeMapper.TypeBuilder<T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeMapper.TypeBuilder<T> Inheritance System.Object TypeMapper.TypeBuilder<T> Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public class TypeBuilder<T> : object Type Parameters Name Description T Methods | Improve this Doc View Source Member<TV>(Expression<Func<T, TV>>) Declaration public TypeMapper.MemberBuilder<T, TV> Member<TV>(Expression<Func<T, TV>> memberExpression) Parameters Type Name Description Expression < Func <T, TV>> memberExpression Returns Type Description TypeMapper.MemberBuilder <T, TV> Type Parameters Name Description TV Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.TypeWrapper.html": {
    "href": "api/LinqToDB.Expressions.TypeWrapper.html",
    "title": "Class TypeWrapper | Linq To DB (aka linq2db)",
    "keywords": "Class TypeWrapper Implements base class for typed wrappers over provider-specific type. Inheritance System.Object TypeWrapper DB2ProviderAdapter.DB2BulkCopy DB2ProviderAdapter.DB2BulkCopyColumnMapping DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection DB2ProviderAdapter.DB2Connection DB2ProviderAdapter.DB2RowsCopiedEventArgs InformixProviderAdapter.IfxBulkCopy InformixProviderAdapter.IfxBulkCopyColumnMapping InformixProviderAdapter.IfxBulkCopyColumnMappingCollection InformixProviderAdapter.IfxRowsCopiedEventArgs OracleProviderAdapter.OracleBulkCopy OracleProviderAdapter.OracleBulkCopyColumnMapping OracleProviderAdapter.OracleBulkCopyColumnMappingCollection OracleProviderAdapter.OracleConnection OracleProviderAdapter.OracleRowsCopiedEventArgs NpgsqlProviderAdapter.NpgsqlBinaryImporter NpgsqlProviderAdapter.NpgsqlConnection SapHanaProviderAdapter.HanaBulkCopy SapHanaProviderAdapter.HanaBulkCopyColumnMapping SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection SapHanaProviderAdapter.HanaRowsCopiedEventArgs SqlCeProviderAdapter.SqlCeEngine SqlServerProviderAdapter.SqlBulkCopy SqlServerProviderAdapter.SqlBulkCopyColumnMapping SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection SqlServerProviderAdapter.SqlConnection SqlServerProviderAdapter.SqlConnectionStringBuilder SqlServerProviderAdapter.SqlRowsCopiedEventArgs SybaseProviderAdapter.AseBulkCopy SybaseProviderAdapter.AseBulkCopyColumnMapping SybaseProviderAdapter.AseBulkCopyColumnMappingCollection SybaseProviderAdapter.AseRowsCopiedEventArgs Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public class TypeWrapper : object Constructors | Improve this Doc View Source TypeWrapper() This constructor is never called and used only as base constructor for constructor signatures in child class. Declaration protected TypeWrapper() | Improve this Doc View Source TypeWrapper(Object, Delegate[]) This is real constructor for wrapper class. Declaration protected TypeWrapper(object instance, Delegate[] wrappers) Parameters Type Name Description System.Object instance Instance of wrapped provider-specific type. Delegate [] wrappers Built delegates for wrapper to call base wrapped type functionality. Properties | Improve this Doc View Source CompiledWrappers Provides access to delegates, created from expressions, defined in wrapper class using following property and type mappings, configured for TypeMapper : private static IEumerable<T> Wrappers { get; } where T could be or Tuple<LambdaExpression, bool> . Boolean flag means that mapping expression compilation allowed to fail if it is set to true . This could be used to map optional API, that present only in specific versions of provider. If wrapper doesn't need any wrapper delegates, this property could be ommited. Declaration protected Delegate[] CompiledWrappers { get; } Property Value Type Description Delegate [] | Improve this Doc View Source instance_ Gets underlying provider-specific object, used by wrapper. Declaration public object instance_ { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source PropertySetter<TI, TP>(Expression<Func<TI, TP>>) Creates property setter expression from property getter. Limitation: property should have getter. Declaration protected static Expression<Action<TI, TP>> PropertySetter<TI, TP>(Expression<Func<TI, TP>> getter) Parameters Type Name Description Expression < Func <TI, TP>> getter Returns Type Description Expression < Action <TI, TP>> Type Parameters Name Description TI TP Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Expressions.WrapperAttribute.html": {
    "href": "api/LinqToDB.Expressions.WrapperAttribute.html",
    "title": "Class WrapperAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class WrapperAttribute Inheritance System.Object WrapperAttribute Namespace : LinqToDB.Expressions Assembly : linq2db.dll Syntax public class WrapperAttribute : Attribute Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ExprParameterAttribute.html": {
    "href": "api/LinqToDB.ExprParameterAttribute.html",
    "title": "Class ExprParameterAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ExprParameterAttribute Inheritance System.Object ExprParameterAttribute Namespace : LinqToDB Assembly : linq2db.dll Syntax public class ExprParameterAttribute : Attribute Constructors | Improve this Doc View Source ExprParameterAttribute() Declaration public ExprParameterAttribute() | Improve this Doc View Source ExprParameterAttribute(String) Declaration public ExprParameterAttribute(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source Name Declaration public string? Name { get; set; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ExtensionlBuilderExtensions.html": {
    "href": "api/LinqToDB.ExtensionlBuilderExtensions.html",
    "title": "Class ExtensionlBuilderExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class ExtensionlBuilderExtensions Inheritance System.Object ExtensionlBuilderExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class ExtensionlBuilderExtensions : object Methods | Improve this Doc View Source Add(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Add(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Type type Returns Type Description ISqlExpression | Improve this Doc View Source Add(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Add(this Sql.ISqExtensionBuilder builder, ISqlExpression left, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Add<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Add<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source AddExpression(Sql.ISqExtensionBuilder, String, String) Declaration public static Sql.SqlExtensionParam AddExpression(this Sql.ISqExtensionBuilder builder, string name, string expr) Parameters Type Name Description Sql.ISqExtensionBuilder builder System.String name System.String expr Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source AddParameter(Sql.ISqExtensionBuilder, String, String) Declaration public static Sql.SqlExtensionParam AddParameter(this Sql.ISqExtensionBuilder builder, string name, string value) Parameters Type Name Description Sql.ISqExtensionBuilder builder System.String name System.String value Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source Dec(Sql.ISqExtensionBuilder, ISqlExpression) Declaration public static ISqlExpression Dec(this Sql.ISqExtensionBuilder builder, ISqlExpression expr) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr Returns Type Description ISqlExpression | Improve this Doc View Source Div(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Div(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 ISqlExpression expr2 Type type Returns Type Description ISqlExpression | Improve this Doc View Source Div(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Div(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Div<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Div<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source Inc(Sql.ISqExtensionBuilder, ISqlExpression) Declaration public static ISqlExpression Inc(this Sql.ISqExtensionBuilder builder, ISqlExpression expr) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr Returns Type Description ISqlExpression | Improve this Doc View Source Mul(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Mul(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Type type Returns Type Description ISqlExpression | Improve this Doc View Source Mul(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Mul(this Sql.ISqExtensionBuilder builder, ISqlExpression expr1, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Mul<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Mul<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source Sub(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) Declaration public static ISqlExpression Sub(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Type type Returns Type Description ISqlExpression | Improve this Doc View Source Sub(Sql.ISqExtensionBuilder, ISqlExpression, Int32) Declaration public static ISqlExpression Sub(this Sql.ISqExtensionBuilder builder, ISqlExpression left, int value) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Sub<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) Declaration public static ISqlExpression Sub<T>(this Sql.ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right) Parameters Type Name Description Sql.ISqExtensionBuilder builder ISqlExpression left ISqlExpression right Returns Type Description ISqlExpression Type Parameters Name Description T"
  },
  "api/LinqToDB.Extensions.html": {
    "href": "api/LinqToDB.Extensions.html",
    "title": "Namespace LinqToDB.Extensions | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Extensions Classes ReflectionExtensions"
  },
  "api/LinqToDB.Extensions.ReflectionExtensions.html": {
    "href": "api/LinqToDB.Extensions.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class ReflectionExtensions Inheritance System.Object ReflectionExtensions Namespace : LinqToDB.Extensions Assembly : linq2db.dll Syntax public static class ReflectionExtensions : object Methods | Improve this Doc View Source AsNullable(Type) Wraps type into class. Declaration public static Type AsNullable(this Type type) Parameters Type Name Description Type type Value type to wrap. Must be value type (except itself). Returns Type Description Type Type, wrapped by . | Improve this Doc View Source CanConvertTo(Type, Type) Declaration public static bool CanConvertTo(this Type fromType, Type toType) Parameters Type Name Description Type fromType Type toType Returns Type Description System.Boolean | Improve this Doc View Source EqualsTo(Nullable<MemberInfo>, Nullable<MemberInfo>, Nullable<Type>) Declaration public static bool EqualsTo(this MemberInfo? member1, MemberInfo? member2, Type? declaringType = null) Parameters Type Name Description System.Nullable < MemberInfo > member1 System.Nullable < MemberInfo > member2 System.Nullable < Type > declaringType Returns Type Description System.Boolean | Improve this Doc View Source GetAttributes<T>(Type) Returns an array of custom attributes applied to a type. Declaration public static T[] GetAttributes<T>(this Type type) where T : Attribute Parameters Type Name Description Type type A type instance. Returns Type Description T[] An array of custom attributes applied to this type, or an array with zero (0) elements if no attributes have been applied. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. | Improve this Doc View Source GetDefaultConstructorEx(Type) Declaration public static ConstructorInfo? GetDefaultConstructorEx(this Type type) Parameters Type Name Description Type type Returns Type Description System.Nullable < ConstructorInfo > | Improve this Doc View Source GetDefaultValue(Type) Declaration public static object? GetDefaultValue(this Type type) Parameters Type Name Description Type type Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source GetDefiningTypes(Type, MemberInfo) Declaration public static IEnumerable<Type> GetDefiningTypes(this Type child, MemberInfo member) Parameters Type Name Description Type child MemberInfo member Returns Type Description IEnumerable < Type > | Improve this Doc View Source GetEventEx(Type, String) Declaration public static EventInfo? GetEventEx(this Type type, string eventName) Parameters Type Name Description Type type System.String eventName Returns Type Description System.Nullable < EventInfo > | Improve this Doc View Source GetFirstAttribute<T>(Type) Retrieves a custom attribute applied to a type. Declaration public static T GetFirstAttribute<T>(this Type type) where T : Attribute Parameters Type Name Description Type type A type instance. Returns Type Description T A reference to the first custom attribute of type attributeType that is applied to element, or null if there is no such attribute. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. | Improve this Doc View Source GetGenericArguments(Type, Type) Returns an array of Type objects that represent the type arguments of a generic type or the type parameters of a generic type definition. Declaration public static Type[] GetGenericArguments(this Type type, Type baseType) Parameters Type Name Description Type type A instance. Type baseType Non generic base type. Returns Type Description Type [] An array of Type objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type. | Improve this Doc View Source GetGenericType(Type, Type) Declaration public static Type? GetGenericType(this Type genericType, Type type) Parameters Type Name Description Type genericType Type type Returns Type Description System.Nullable < Type > | Improve this Doc View Source GetInstanceMemberEx(Type, String) Declaration public static MemberInfo[] GetInstanceMemberEx(this Type type, string name) Parameters Type Name Description Type type System.String name Returns Type Description MemberInfo [] | Improve this Doc View Source GetInterfaceMapEx(Type, Type) Declaration public static InterfaceMapping GetInterfaceMapEx(this Type type, Type interfaceType) Parameters Type Name Description Type type Type interfaceType Returns Type Description InterfaceMapping | Improve this Doc View Source GetItemType(Nullable<Type>) Declaration public static Type? GetItemType(this Type? type) Parameters Type Name Description System.Nullable < Type > type Returns Type Description System.Nullable < Type > | Improve this Doc View Source GetListItemType(Nullable<IEnumerable>) Gets the Type of a list item. Declaration public static Type GetListItemType(this IEnumerable? list) Parameters Type Name Description System.Nullable < IEnumerable > list A instance. Returns Type Description Type The Type instance that represents the exact runtime type of a list item. | Improve this Doc View Source GetListItemType(Type) Gets the Type of a list item. Declaration public static Type GetListItemType(this Type listType) Parameters Type Name Description Type listType A instance. Returns Type Description Type The Type instance that represents the exact runtime type of a list item. | Improve this Doc View Source GetMemberEx(Type, MemberInfo) Returns of type described by memberInfo It us useful when member's declared and reflected types are not the same. Declaration public static MemberInfo? GetMemberEx(this Type type, MemberInfo memberInfo) Parameters Type Name Description Type type to find member info MemberInfo memberInfo Returns Type Description System.Nullable < MemberInfo > or null Remarks This method searches only properties, fields and methods | Improve this Doc View Source GetMemberType(MemberInfo) Declaration public static Type GetMemberType(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo Returns Type Description Type | Improve this Doc View Source GetMethodEx(Type, String) Declaration public static MethodInfo? GetMethodEx(this Type type, string name) Parameters Type Name Description Type type System.String name Returns Type Description System.Nullable < MethodInfo > | Improve this Doc View Source GetMethodEx(Type, String, Int32, Type[]) Gets generic method. Declaration public static MethodInfo? GetMethodEx(this Type type, string name, int genericParametersCount, params Type[] types) Parameters Type Name Description Type type System.String name System.Int32 genericParametersCount Type [] types Returns Type Description System.Nullable < MethodInfo > | Improve this Doc View Source GetMethodEx(Type, String, Type[]) Declaration public static MethodInfo? GetMethodEx(this Type type, string name, params Type[] types) Parameters Type Name Description Type type System.String name Type [] types Returns Type Description System.Nullable < MethodInfo > | Improve this Doc View Source GetMethodEx(Type, Type, String, Type[]) Gets method by name, input parameters and return type. Usefull for method overloads by return type, like op_Explicit/op_Implicit conversions. Declaration public static MethodInfo? GetMethodEx(this Type type, Type returnType, string name, params Type[] types) Parameters Type Name Description Type type Type returnType System.String name Type [] types Returns Type Description System.Nullable < MethodInfo > | Improve this Doc View Source GetNonPublicPropertiesEx(Type) Declaration public static PropertyInfo[] GetNonPublicPropertiesEx(this Type type) Parameters Type Name Description Type type Returns Type Description PropertyInfo [] | Improve this Doc View Source GetPropertiesEx(Type) Declaration public static PropertyInfo[] GetPropertiesEx(this Type type) Parameters Type Name Description Type type Returns Type Description PropertyInfo [] | Improve this Doc View Source GetPropertyInfo(Nullable<MethodInfo>) Declaration public static PropertyInfo? GetPropertyInfo(this MethodInfo? method) Parameters Type Name Description System.Nullable < MethodInfo > method Returns Type Description System.Nullable < PropertyInfo > | Improve this Doc View Source GetPublicInstanceMembersEx(Type) Declaration public static MemberInfo[] GetPublicInstanceMembersEx(this Type type) Parameters Type Name Description Type type Returns Type Description MemberInfo [] | Improve this Doc View Source GetPublicInstanceMethodEx(Type, String, Type[]) Declaration public static MethodInfo? GetPublicInstanceMethodEx(this Type type, string name, params Type[] types) Parameters Type Name Description Type type System.String name Type [] types Returns Type Description System.Nullable < MethodInfo > | Improve this Doc View Source GetPublicInstanceValueMembers(Type) Declaration public static MemberInfo[] GetPublicInstanceValueMembers(this Type type) Parameters Type Name Description Type type Returns Type Description MemberInfo [] | Improve this Doc View Source GetPublicMemberEx(Type, String) Declaration public static MemberInfo[] GetPublicMemberEx(this Type type, string name) Parameters Type Name Description Type type System.String name Returns Type Description MemberInfo [] | Improve this Doc View Source GetStaticMembersEx(Type, String) Declaration public static MemberInfo[] GetStaticMembersEx(this Type type, string name) Parameters Type Name Description Type type System.String name Returns Type Description MemberInfo [] | Improve this Doc View Source GetTypeCodeEx(Type) Declaration public static TypeCode GetTypeCodeEx(this Type type) Parameters Type Name Description Type type Returns Type Description TypeCode | Improve this Doc View Source IsAnonymous(Type) Declaration public static bool IsAnonymous(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean | Improve this Doc View Source IsDynamicColumnPropertyEx(MemberInfo) Determines whether member info is dynamic column property. Declaration public static bool IsDynamicColumnPropertyEx(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo The member information. Returns Type Description System.Boolean true if member info is dynamic column property; otherwise, false . | Improve this Doc View Source IsEnumerableTType(Type, Type) Declaration public static bool IsEnumerableTType(this Type type, Type elementType) Parameters Type Name Description Type type Type elementType Returns Type Description System.Boolean | Improve this Doc View Source IsFieldEx(MemberInfo) Declaration public static bool IsFieldEx(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo Returns Type Description System.Boolean | Improve this Doc View Source IsFloatType(Type) Declaration public static bool IsFloatType(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean | Improve this Doc View Source IsGenericEnumerableType(Type) Declaration public static bool IsGenericEnumerableType(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean | Improve this Doc View Source IsIntegerType(Type) Declaration public static bool IsIntegerType(this Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean | Improve this Doc View Source IsMethodEx(MemberInfo) Declaration public static bool IsMethodEx(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo Returns Type Description System.Boolean | Improve this Doc View Source IsNullable(Type) Returns true, if type is type. Declaration public static bool IsNullable(this Type type) Parameters Type Name Description Type type A instance. Returns Type Description System.Boolean true , if type represents type; otherwise, false . | Improve this Doc View Source IsNullableGetValueOrDefault(MemberInfo) Declaration public static bool IsNullableGetValueOrDefault(this MemberInfo member) Parameters Type Name Description MemberInfo member Returns Type Description System.Boolean | Improve this Doc View Source IsNullableHasValueMember(MemberInfo) Declaration public static bool IsNullableHasValueMember(this MemberInfo member) Parameters Type Name Description MemberInfo member Returns Type Description System.Boolean | Improve this Doc View Source IsNullableValueMember(MemberInfo) Declaration public static bool IsNullableValueMember(this MemberInfo member) Parameters Type Name Description MemberInfo member Returns Type Description System.Boolean | Improve this Doc View Source IsPropertyEx(MemberInfo) Declaration public static bool IsPropertyEx(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo Returns Type Description System.Boolean | Improve this Doc View Source IsSameOrParentOf(Type, Type) Determines whether the specified types are considered equal. Declaration public static bool IsSameOrParentOf(this Type parent, Type child) Parameters Type Name Description Type parent A instance. Type child A type possible derived from the parent type Returns Type Description System.Boolean True, when an object instance of the type child can be used as an object of the type parent ; otherwise, false. Remarks Note that nullable types does not have a parent-child relation to it's underlying type. For example, the 'int?' type (nullable int) and the 'int' type aren't a parent and it's child. | Improve this Doc View Source IsScalar(Type, Boolean) Gets a value indicating whether a type can be used as a db primitive. Declaration public static bool IsScalar(this Type type, bool checkArrayElementType = true) Parameters Type Name Description Type type A instance. System.Boolean checkArrayElementType True if needed to check element type for arrays Returns Type Description System.Boolean True, if the type parameter is a primitive type; otherwise, False. Remarks . . . . are specially handled by the library and, therefore, can be treated as scalar types. | Improve this Doc View Source IsSqlPropertyMethodEx(MemberInfo) Determines whether member info represent a Sql.Property method. Declaration public static bool IsSqlPropertyMethodEx(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo The member information. Returns Type Description System.Boolean true if member info is Sql.Property method; otherwise, false . | Improve this Doc View Source ToNullableUnderlying(Type) Declaration public static Type ToNullableUnderlying(this Type type) Parameters Type Name Description Type type Returns Type Description Type | Improve this Doc View Source ToUnderlying(Type) Returns the underlying type argument of the specified type. Declaration public static Type ToUnderlying(this Type type) Parameters Type Name Description Type type A instance. Returns Type Description Type"
  },
  "api/LinqToDB.html": {
    "href": "api/LinqToDB.html",
    "title": "Namespace LinqToDB | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB Classes AnalyticFunctions AsyncExtensions Provides helper methods for asynchronous operations. CompiledQuery Provides API for compilation and caching of queries for reuse. DataContext Implements abstraction over non-persistent database connection that could be released after query or transaction execution. DataContextTransaction Explicit data context DataContext transaction wrapper. DataExtensions Data context extension methods. EntityCreatedEventArgs Provides data for the OnEntityCreated event. ExpressionMethodAttribute When applied to method or property, tells linq2db to replace them in queryable LINQ expression with another expression, returned by method, specified in this attribute. Requirements to expression method: expression method should be in the same class and replaced property of method; method could be private. When applied to property, expression: method should return function expression with the same return type as property type; expression method could take up to two parameters in any order - current object parameter and database connection context object. When applied to method: expression method should return function expression with the same return type as method return type; method cannot have void return type; parameters in expression method should go in the same order as in substituted method; expression could take method instance object as first parameter; expression could take database connection context object as last parameter; last method parameters could be ommited from expression method, but only if you don't add database connection context parameter. ExprParameterAttribute ExtensionlBuilderExtensions KeepConnectionAliveScope Explicit DataContext connection reuse scope. See KeepConnectionAlive for more details. LinqExtensions Contains extension methods for LINQ queries. LinqToDBConstants LinqToDBException Defines the base class for the namespace exceptions. MergeDefinition<TTarget, TSource> MergeDefinition<TTarget, TSource>.Operation MultiInsertExtensions ProviderName Default names for providers. Sql Sql.AggregateFunctionNotOrderedImpl<T, TR> Sql.ConvertTo<TTo> Sql.EnumAttribute Sql.ExpressionAttribute An Attribute that allows custom Expressions to be defined for a Method used within a Linq Expression. Sql.ExtensionAttribute Sql.ExtensionAttribute.ExtensionBuilder<TContext> Sql.FunctionAttribute Defines an SQL server-side Function with parameters passed in. Sql.PropertyAttribute An attribute used to define a static value or a Database side property/method that takes no parameters. Sql.SqlExtension Sql.SqlExtensionParam Sql.TableExpressionAttribute Sql.TableFunctionAttribute StringAggregateExtensions TableExtensions Contains extension methods for LINQ queries. TempTable<T> Temporary table. Temporary table is a table, created when you create instance of this class and deleted when you dispose it. It uses regular tables even if underlying database supports temporary tables concept. UpdateOutput<T> Interfaces IDataContext Database connection abstraction interface. IEntityServices IExtensionsAdapter Interface to override default implementation of LINQ To DB async operations. ILoadWithQueryable<TEntity, TProperty> Provides support for queryable LoadWith/ThenLoad chaining operators. ITable<T> Table-like queryable source, e.g. table, view or table-valued function. ITableMutable<T> This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. MultiInsertExtensions.IMultiInsertElse<TSource> MultiInsertExtensions.IMultiInsertInto<TSource> MultiInsertExtensions.IMultiInsertSource<TSource> MultiInsertExtensions.IMultiInsertWhen<TSource> Sql.IAggregateFunction<T, TR> Sql.IAggregateFunctionNotOrdered<T, TR> Sql.IAggregateFunctionOrdered<T, TR> Sql.IExtensionCallBuilder Sql.IGroupBy Sql.IQueryableContainer Sql.ISqExtensionBuilder Sql.ISqlExtension Enums DataType List of data types, supported by linq2db. Provider-level support depends on database capabilities and current implementation support level and could vary for different providers. MergeOperationType Sql.AggregateModifier Sql.DateParts Sql.From Sql.IsNullableType Sql.Nulls Sql.NullsPosition Sql.TableQualification SqlJoinType Defines join type. Used with join LINQ helpers. TableOptions TakeHints Hints for Take . Delegates InsertColumnFilter<T> Defines signature for column filter for insert operations. InsertOrUpdateColumnFilter<T> Defines signature for column filter for insert or update/replace operations. UpdateColumnFilter<T> Defines signature for column filter for update operations."
  },
  "api/LinqToDB.IDataContext.html": {
    "href": "api/LinqToDB.IDataContext.html",
    "title": "Interface IDataContext | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataContext Database connection abstraction interface. Inherited Members IEntityServices.OnEntityCreated IAsyncDisposable.DisposeAsync() Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IDataContext : IEntityServices, IAsyncDisposable Properties | Improve this Doc View Source CloseAfterUse Gets or sets flag to close context after query execution or leave it open. Declaration bool CloseAfterUse { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ContextID Provider identifier. Declaration string ContextID { get; } Property Value Type Description System.String | Improve this Doc View Source CreateSqlProvider Gets SQL builder service factory method for current context data provider. Declaration Func<ISqlBuilder> CreateSqlProvider { get; } Property Value Type Description Func < ISqlBuilder > | Improve this Doc View Source DataReaderType Gets data reader implementation type for current context data provider. Declaration Type DataReaderType { get; } Property Value Type Description Type | Improve this Doc View Source GetSqlOptimizer Gets SQL optimizer service factory method for current context data provider. Declaration Func<ISqlOptimizer> GetSqlOptimizer { get; } Property Value Type Description Func < ISqlOptimizer > | Improve this Doc View Source InlineParameters Gets or sets option to force inline parameter values as literals into command text. If parameter inlining not supported for specific value type, it will be used as parameter. Declaration bool InlineParameters { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MappingSchema Gets mapping schema, used for current context. Declaration MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source NextQueryHints Gets list of query hints (writable collection), that will be used only for next query, executed using current context. Declaration List<string> NextQueryHints { get; } Property Value Type Description List < System.String > | Improve this Doc View Source QueryHints Gets list of query hints (writable collection), that will be used for all queries, executed using current context. Declaration List<string> QueryHints { get; } Property Value Type Description List < System.String > | Improve this Doc View Source SqlProviderFlags Gets SQL support flags for current context data provider. Declaration SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags | Improve this Doc View Source SupportedTableOptions Gets supported table options for current context data provider. Declaration TableOptions SupportedTableOptions { get; } Property Value Type Description TableOptions Methods | Improve this Doc View Source Clone(Boolean) Clones current context. Declaration IDataContext Clone(bool forNestedQuery) Parameters Type Name Description System.Boolean forNestedQuery Returns Type Description IDataContext Cloned context. | Improve this Doc View Source Close() Closes context connection and disposes underlying resources. Declaration void Close() | Improve this Doc View Source CloseAsync() Closes context connection and disposes underlying resources. Declaration Task CloseAsync() Returns Type Description Task | Improve this Doc View Source GetQueryRunner(Query, Int32, Expression, Nullable<Object>[], Nullable<Object>[]) Returns query runner service for current context. Declaration IQueryRunner GetQueryRunner(Query query, int queryNumber, Expression expression, object? [] parameters, object? [] preambles) Parameters Type Name Description Query query Query batch object. System.Int32 queryNumber Index of query in query batch. Expression expression Query results mapping expression. System.Nullable < System.Object >[] parameters Query parameters. System.Nullable < System.Object >[] preambles Query preambles Returns Type Description IQueryRunner Query runner service. | Improve this Doc View Source GetReaderExpression(IDataReader, Int32, Expression, Type) Returns column value reader expression. Declaration Expression GetReaderExpression(IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description IDataReader reader Data reader instance. System.Int32 idx Column index. Expression readerExpression Data reader accessor expression. Type toType Expected value type. Returns Type Description Expression Column read expression. | Improve this Doc View Source IsDBNullAllowed(IDataReader, Int32) Returns true, of data reader column could contain value. Declaration bool? IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader Data reader instance. System.Int32 idx Column index. Returns Type Description System.Nullable < System.Boolean > true or null if column could contain . Events | Improve this Doc View Source OnClosing Event, triggered before context connection closed using Close() method. Declaration event EventHandler? OnClosing Event Type Type Description System.Nullable < EventHandler > Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(IDataContext, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(IDataContext) MappingSchemaExtensions.GetKeyEqualityComparer<T>(IDataContext) Map.DeepCopy<T>(T) DataExtensions.GetTable<T>(IDataContext) DataExtensions.GetTable<T>(IDataContext, Nullable<Object>, MethodInfo, Nullable<Object>[]) DataExtensions.Compile<TDc, TResult>(IDataContext, Expression<Func<TDc, TResult>>) DataExtensions.Compile<TDc, TArg1, TResult>(IDataContext, Expression<Func<TDc, TArg1, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TResult>>) DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(IDataContext, Expression<Func<TDc, TArg1, TArg2, TArg3, TResult>>) DataExtensions.Insert<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.Insert<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.InsertAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.InsertAsync<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.InsertOrReplace<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.InsertOrReplace<T>(IDataContext, T, InsertOrUpdateColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.InsertOrReplaceAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.InsertOrReplaceAsync<T>(IDataContext, T, InsertOrUpdateColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.InsertWithIdentity<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.InsertWithIdentity<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.InsertWithInt32Identity<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.InsertWithInt32Identity<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.InsertWithInt64Identity<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.InsertWithInt64Identity<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.InsertWithDecimalIdentity<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.InsertWithDecimalIdentity<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.InsertWithIdentityAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.InsertWithIdentityAsync<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.InsertWithInt32IdentityAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.InsertWithInt32IdentityAsync<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.InsertWithInt64IdentityAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.InsertWithInt64IdentityAsync<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.InsertWithDecimalIdentityAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.InsertWithDecimalIdentityAsync<T>(IDataContext, T, InsertColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.Update<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.Update<T>(IDataContext, T, UpdateColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.UpdateAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.UpdateAsync<T>(IDataContext, T, UpdateColumnFilter<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.Delete<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.DeleteAsync<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.CreateTable<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, DefaultNullable, Nullable<String>, TableOptions) DataExtensions.CreateTableAsync<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, DefaultNullable, Nullable<String>, TableOptions, CancellationToken) DataExtensions.DropTable<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Boolean>, Nullable<String>, TableOptions) DataExtensions.DropTableAsync<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Boolean>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.GetCte<T>(IDataContext, Func<IQueryable<T>, IQueryable<T>>, Nullable<String>) DataExtensions.GetCte<T>(IDataContext, Nullable<String>, Func<IQueryable<T>, IQueryable<T>>) DataExtensions.FromSql<TEntity>(IDataContext, RawSqlString, Nullable<Object>[]) DataExtensions.SelectQuery<TEntity>(IDataContext, Expression<Func<TEntity>>) DataExtensions.CreateTempTable<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.CreateTempTable<T>(IDataContext, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.CreateTempTable<T>(IDataContext, Nullable<String>, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Action<ITable<T>>>, Nullable<String>, TableOptions) DataExtensions.CreateTempTable<T>(IDataContext, IQueryable<T>, Action<EntityMappingBuilder<T>>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Action<ITable<T>>>, Nullable<String>, TableOptions) DataExtensions.CreateTempTable<T>(IDataContext, Nullable<String>, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<Action<ITable<T>>>, Nullable<String>, TableOptions) DataExtensions.CreateTempTable<T>(IDataContext, Nullable<String>, IQueryable<T>, Action<EntityMappingBuilder<T>>, Nullable<String>, Nullable<String>, Nullable<Action<ITable<T>>>, Nullable<String>, TableOptions) DataExtensions.CreateTempTableAsync<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.CreateTempTableAsync<T>(IDataContext, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.CreateTempTableAsync<T>(IDataContext, Nullable<String>, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.CreateTempTableAsync<T>(IDataContext, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Func<ITable<T>, Task>>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.CreateTempTableAsync<T>(IDataContext, IQueryable<T>, Action<EntityMappingBuilder<T>>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Func<ITable<T>, Task>>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.CreateTempTableAsync<T>(IDataContext, Nullable<String>, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<Func<ITable<T>, Task>>, Nullable<String>, TableOptions, CancellationToken) DataExtensions.CreateTempTableAsync<T>(IDataContext, Nullable<String>, IQueryable<T>, Action<EntityMappingBuilder<T>>, Nullable<String>, Nullable<String>, Nullable<Func<ITable<T>, Task>>, Nullable<String>, TableOptions, CancellationToken) LinqExtensions.Select<T>(IDataContext, Expression<Func<T>>) LinqExtensions.SelectAsync<T>(IDataContext, Expression<Func<T>>) LinqExtensions.Into<T>(IDataContext, ITable<T>) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) LoggingExtensions.WriteTraceLine(IDataContext, String, String, TraceLevel) LoggingExtensions.GetTraceSwitch(IDataContext) OracleTools.OracleXmlTable<T>(IDataContext, IEnumerable<T>) OracleTools.OracleXmlTable<T>(IDataContext, String) OracleTools.OracleXmlTable<T>(IDataContext, Func<String>)"
  },
  "api/LinqToDB.Identity.DefaultConnectionFactory.html": {
    "href": "api/LinqToDB.Identity.DefaultConnectionFactory.html",
    "title": "Class DefaultConnectionFactory | Linq To DB (aka linq2db)",
    "keywords": "Class DefaultConnectionFactory Represents default IConnectionFactory Inheritance System.Object DefaultConnectionFactory Implements IConnectionFactory Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class DefaultConnectionFactory : object, IConnectionFactory Methods | Improve this Doc View Source GetConnection() Creates with default parameters Declaration public DataConnection GetConnection() Returns Type Description DataConnection | Improve this Doc View Source GetContext() Creates with default parameters Declaration public IDataContext GetContext() Returns Type Description IDataContext Implements IConnectionFactory Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.html": {
    "href": "api/LinqToDB.Identity.html",
    "title": "Namespace LinqToDB.Identity | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Identity Classes DefaultConnectionFactory Represents default IConnectionFactory IdentityDataConnection Base class for the LinqToDB database context used for identity. IdentityDataConnection<TUser> Base class for the LinqToDB database context used for identity. IdentityDataConnection<TUser, TRole, TKey> Base class for the LinqToDB database context used for identity. IdentityDataConnection<TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken> Base class for the LinqToDB database context used for identity. IdentityRole The default implementation of IdentityRole<TKey> which uses a string as the primary key. IdentityRole<TKey> Represents a role in the identity system IdentityRole<TKey, TUserRole, TRoleClaim> Represents a role in the identity system IdentityRoleClaim<TKey> Represents a claim that is granted to all users within a role. IdentityUser The default implementation of IdentityUser<TKey> which uses a string as a primary key. IdentityUser<TKey> Represents a user in the identity system IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin> Represents a user in the identity system IdentityUserClaim<TKey> Represents a claim that a user possesses. IdentityUserLogin<TKey> Represents a login and its associated provider for a user. IdentityUserRole<TKey> Represents the link between a user and a role. IdentityUserToken<TKey> Represents an authentication token for a user. Resources A strongly-typed resource class, for looking up localized strings, etc. RoleStore<TRole> Creates a new instance of a persistence store for roles. RoleStore<TKey, TRole> Creates a new instance of a persistence store for roles. RoleStore<TKey, TRole, TRoleClaim> Creates a new instance of a persistence store for roles. UserStore<TUser> Creates a new instance of a persistence store for the specified user type. UserStore<TUser, TRole> Represents a new instance of a persistence store for the specified user and role types. UserStore<TKey, TUser, TRole> Represents a new instance of a persistence store for the specified user and role types. UserStore<TKey, TUser, TRole, TUserClaim, TUserRole, TUserLogin, TUserToken> Represents a new instance of a persistence store for the specified user and role types. Interfaces IClameConverter Provides methods to convert from\\to IConcurrency<TKey> Cpncurrency interface for IIdentityRole<TKey> and IIdentityUser<TKey> /> IConnectionFactory Represents connection factory IIdentityRole<TKey> Represents a role in the identity system IIdentityRoleClaim<TKey> Represents a claim that is granted to all users within a role. IIdentityUser<TKey> Represents a user in the identity system IIdentityUserClaim<TKey> Represents a claim that a user possesses. IIdentityUserLogin<TKey> Represents a login and its associated provider for a user. IIdentityUserRole<TKey> Represents the link between a user and a role. IIdentityUserToken<TKey> Represents an authentication token for a user."
  },
  "api/LinqToDB.Identity.IClameConverter.html": {
    "href": "api/LinqToDB.Identity.IClameConverter.html",
    "title": "Interface IClameConverter | Linq To DB (aka linq2db)",
    "keywords": "Interface IClameConverter Provides methods to convert from\\to Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public interface IClameConverter Methods | Improve this Doc View Source InitializeFromClaim(Claim) Initializes by copying ClaimType and ClaimValue from the other claim. Declaration void InitializeFromClaim(Claim other) Parameters Type Name Description Claim other The claim to initialize from. | Improve this Doc View Source ToClaim() Constructs a new claim with the type and value. Declaration Claim ToClaim() Returns Type Description Claim Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IConcurrency-1.html": {
    "href": "api/LinqToDB.Identity.IConcurrency-1.html",
    "title": "Interface IConcurrency<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Interface IConcurrency<TKey> Cpncurrency interface for IIdentityRole<TKey> and IIdentityUser<TKey> /> Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public interface IConcurrency<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type used for the primary key. Properties | Improve this Doc View Source ConcurrencyStamp A random value that should change whenever a role is persisted to the store Declaration string ConcurrencyStamp { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id Gets or sets the primary key. Declaration TKey Id { get; set; } Property Value Type Description TKey Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IConnectionFactory.html": {
    "href": "api/LinqToDB.Identity.IConnectionFactory.html",
    "title": "Interface IConnectionFactory | Linq To DB (aka linq2db)",
    "keywords": "Interface IConnectionFactory Represents connection factory Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public interface IConnectionFactory Methods | Improve this Doc View Source GetConnection() Gets new instance of Declaration DataConnection GetConnection() Returns Type Description DataConnection | Improve this Doc View Source GetContext() Gets new instance of Declaration IDataContext GetContext() Returns Type Description IDataContext Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityDataConnection.html": {
    "href": "api/LinqToDB.Identity.IdentityDataConnection.html",
    "title": "Class IdentityDataConnection | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityDataConnection Base class for the LinqToDB database context used for identity. Inheritance System.Object IdentityDataConnection < IdentityUser , IdentityRole , System.String , IdentityUserClaim < System.String >, IdentityUserRole < System.String >, IdentityUserLogin < System.String >, IdentityRoleClaim < System.String >, IdentityUserToken < System.String >> IdentityDataConnection < IdentityUser , IdentityRole , System.String > IdentityDataConnection Inherited Members IdentityDataConnection<IdentityUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.Users IdentityDataConnection<IdentityUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.UserClaims IdentityDataConnection<IdentityUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.UserLogins IdentityDataConnection<IdentityUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.UserRoles IdentityDataConnection<IdentityUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.UserTokens IdentityDataConnection<IdentityUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.Roles IdentityDataConnection<IdentityUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.RoleClaims Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityDataConnection : IdentityDataConnection<IdentityUser, IdentityRole, string> Constructors | Improve this Doc View Source IdentityDataConnection() Default constructor Declaration public IdentityDataConnection() | Improve this Doc View Source IdentityDataConnection(IDataProvider, IDbConnection) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, IDbConnection connection) Parameters Type Name Description IDataProvider dataProvider Data provider object, see IDbConnection connection Connection object | Improve this Doc View Source IdentityDataConnection(IDataProvider, IDbTransaction) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, IDbTransaction transaction) Parameters Type Name Description IDataProvider dataProvider Data provider object, see IDbTransaction transaction Transdaction object | Improve this Doc View Source IdentityDataConnection(IDataProvider, String) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, string connectionString) Parameters Type Name Description IDataProvider dataProvider Data provider object, see System.String connectionString Connection string | Improve this Doc View Source IdentityDataConnection(String) Constructor Declaration public IdentityDataConnection(string configurationString) Parameters Type Name Description System.String configurationString Connection string | Improve this Doc View Source IdentityDataConnection(String, String) Constructor Declaration public IdentityDataConnection(string providerName, string connectionString) Parameters Type Name Description System.String providerName Data provider name System.String connectionString Connection string Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityDataConnection-1.html": {
    "href": "api/LinqToDB.Identity.IdentityDataConnection-1.html",
    "title": "Class IdentityDataConnection<TUser> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityDataConnection<TUser> Base class for the LinqToDB database context used for identity. Inheritance System.Object IdentityDataConnection <TUser, IdentityRole , System.String , IdentityUserClaim < System.String >, IdentityUserRole < System.String >, IdentityUserLogin < System.String >, IdentityRoleClaim < System.String >, IdentityUserToken < System.String >> IdentityDataConnection <TUser, IdentityRole , System.String > IdentityDataConnection<TUser> Inherited Members IdentityDataConnection<TUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.Users IdentityDataConnection<TUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.UserClaims IdentityDataConnection<TUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.UserLogins IdentityDataConnection<TUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.UserRoles IdentityDataConnection<TUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.UserTokens IdentityDataConnection<TUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.Roles IdentityDataConnection<TUser, IdentityRole, String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityRoleClaim<String>, IdentityUserToken<String>>.RoleClaims Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityDataConnection<TUser> : IdentityDataConnection<TUser, IdentityRole, string> where TUser : IdentityUser Type Parameters Name Description TUser The type of the user objects. Constructors | Improve this Doc View Source IdentityDataConnection() Default constructor Declaration public IdentityDataConnection() | Improve this Doc View Source IdentityDataConnection(IDataProvider, IDbConnection) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, IDbConnection connection) Parameters Type Name Description IDataProvider dataProvider Data provider object, see IDbConnection connection Connection object | Improve this Doc View Source IdentityDataConnection(IDataProvider, IDbTransaction) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, IDbTransaction transaction) Parameters Type Name Description IDataProvider dataProvider Data provider object, see IDbTransaction transaction Transdaction object | Improve this Doc View Source IdentityDataConnection(IDataProvider, String) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, string connectionString) Parameters Type Name Description IDataProvider dataProvider Data provider object, see System.String connectionString Connection string | Improve this Doc View Source IdentityDataConnection(String) Constructor Declaration public IdentityDataConnection(string configurationString) Parameters Type Name Description System.String configurationString Connection string | Improve this Doc View Source IdentityDataConnection(String, String) Constructor Declaration public IdentityDataConnection(string providerName, string connectionString) Parameters Type Name Description System.String providerName Data provider name System.String connectionString Connection string Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityDataConnection-3.html": {
    "href": "api/LinqToDB.Identity.IdentityDataConnection-3.html",
    "title": "Class IdentityDataConnection<TUser, TRole, TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityDataConnection<TUser, TRole, TKey> Base class for the LinqToDB database context used for identity. Inheritance System.Object IdentityDataConnection <TUser, TRole, TKey, IdentityUserClaim <TKey>, IdentityUserRole <TKey>, IdentityUserLogin <TKey>, IdentityRoleClaim <TKey>, IdentityUserToken <TKey>> IdentityDataConnection<TUser, TRole, TKey> IdentityDataConnection IdentityDataConnection<TUser> Inherited Members IdentityDataConnection<TUser, TRole, TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityRoleClaim<TKey>, IdentityUserToken<TKey>>.Users IdentityDataConnection<TUser, TRole, TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityRoleClaim<TKey>, IdentityUserToken<TKey>>.UserClaims IdentityDataConnection<TUser, TRole, TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityRoleClaim<TKey>, IdentityUserToken<TKey>>.UserLogins IdentityDataConnection<TUser, TRole, TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityRoleClaim<TKey>, IdentityUserToken<TKey>>.UserRoles IdentityDataConnection<TUser, TRole, TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityRoleClaim<TKey>, IdentityUserToken<TKey>>.UserTokens IdentityDataConnection<TUser, TRole, TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityRoleClaim<TKey>, IdentityUserToken<TKey>>.Roles IdentityDataConnection<TUser, TRole, TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityRoleClaim<TKey>, IdentityUserToken<TKey>>.RoleClaims Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityDataConnection<TUser, TRole, TKey> : IdentityDataConnection<TUser, TRole, TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityRoleClaim<TKey>, IdentityUserToken<TKey>> where TUser : class, IIdentityUser<TKey> where TRole : class, IIdentityRole<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TUser The type of user objects. TRole The type of role objects. TKey The type of the primary key for users and roles. Constructors | Improve this Doc View Source IdentityDataConnection() Default constructor Declaration public IdentityDataConnection() | Improve this Doc View Source IdentityDataConnection(IDataProvider, IDbConnection) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, IDbConnection connection) Parameters Type Name Description IDataProvider dataProvider Data provider object, see IDbConnection connection Connection object | Improve this Doc View Source IdentityDataConnection(IDataProvider, IDbTransaction) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, IDbTransaction transaction) Parameters Type Name Description IDataProvider dataProvider Data provider object, see IDbTransaction transaction Transdaction object | Improve this Doc View Source IdentityDataConnection(IDataProvider, String) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, string connectionString) Parameters Type Name Description IDataProvider dataProvider Data provider object, see System.String connectionString Connection string | Improve this Doc View Source IdentityDataConnection(String) Constructor Declaration public IdentityDataConnection(string configurationString) Parameters Type Name Description System.String configurationString Connection string | Improve this Doc View Source IdentityDataConnection(String, String) Constructor Declaration public IdentityDataConnection(string providerName, string connectionString) Parameters Type Name Description System.String providerName Data provider name System.String connectionString Connection string Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityDataConnection-8.html": {
    "href": "api/LinqToDB.Identity.IdentityDataConnection-8.html",
    "title": "Class IdentityDataConnection<TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityDataConnection<TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken> Base class for the LinqToDB database context used for identity. Inheritance System.Object IdentityDataConnection<TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken> IdentityDataConnection<TUser, TRole, TKey> Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityDataConnection<TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken> : DataConnection where TUser : class, IIdentityUser<TKey> where TRole : class, IIdentityRole<TKey> where TKey : IEquatable<TKey> where TUserClaim : class, IIdentityUserClaim<TKey> where TUserRole : class, IIdentityUserRole<TKey> where TUserLogin : class, IIdentityUserLogin<TKey> where TRoleClaim : class, IIdentityRoleClaim<TKey> where TUserToken : class, IIdentityUserToken<TKey> Type Parameters Name Description TUser The type of user objects. TRole The type of role objects. TKey The type of the primary key for users and roles. TUserClaim The type of the user claim object. TUserRole The type of the user role object. TUserLogin The type of the user login object. TRoleClaim The type of the role claim object. TUserToken The type of the user token object. Constructors | Improve this Doc View Source IdentityDataConnection() Default constructor Declaration public IdentityDataConnection() | Improve this Doc View Source IdentityDataConnection(IDataProvider, IDbConnection) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, IDbConnection connection) Parameters Type Name Description IDataProvider dataProvider Data provider object, see IDbConnection connection Connection object | Improve this Doc View Source IdentityDataConnection(IDataProvider, IDbTransaction) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, IDbTransaction transaction) Parameters Type Name Description IDataProvider dataProvider Data provider object, see IDbTransaction transaction Transdaction object | Improve this Doc View Source IdentityDataConnection(IDataProvider, String) Constructor Declaration public IdentityDataConnection(IDataProvider dataProvider, string connectionString) Parameters Type Name Description IDataProvider dataProvider Data provider object, see System.String connectionString Connection string | Improve this Doc View Source IdentityDataConnection(String) Constructor Declaration public IdentityDataConnection(string configurationString) Parameters Type Name Description System.String configurationString Connection string | Improve this Doc View Source IdentityDataConnection(String, String) Constructor Declaration public IdentityDataConnection(string providerName, string connectionString) Parameters Type Name Description System.String providerName Data provider name System.String connectionString Connection string Properties | Improve this Doc View Source RoleClaims Gets the of role claims. Declaration public ITable<TRoleClaim> RoleClaims { get; } Property Value Type Description ITable <TRoleClaim> | Improve this Doc View Source Roles Gets the of roles. Declaration public ITable<TRole> Roles { get; } Property Value Type Description ITable <TRole> | Improve this Doc View Source UserClaims Gets the of User claims. Declaration public ITable<TUserClaim> UserClaims { get; } Property Value Type Description ITable <TUserClaim> | Improve this Doc View Source UserLogins Gets the of User logins. Declaration public ITable<TUserLogin> UserLogins { get; } Property Value Type Description ITable <TUserLogin> | Improve this Doc View Source UserRoles Gets the of User roles. Declaration public ITable<TUserRole> UserRoles { get; } Property Value Type Description ITable <TUserRole> | Improve this Doc View Source Users Gets the of Users. Declaration public ITable<TUser> Users { get; } Property Value Type Description ITable <TUser> | Improve this Doc View Source UserTokens Gets the of User tokens. Declaration public ITable<TUserToken> UserTokens { get; } Property Value Type Description ITable <TUserToken> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityRole.html": {
    "href": "api/LinqToDB.Identity.IdentityRole.html",
    "title": "Class IdentityRole | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityRole The default implementation of IdentityRole<TKey> which uses a string as the primary key. Inheritance System.Object IdentityRole < System.String , IdentityUserRole < System.String >, IdentityRoleClaim < System.String >> IdentityRole < System.String > IdentityRole Implements IIdentityRole < System.String > IConcurrency < System.String > Inherited Members IdentityRole<String, IdentityUserRole<String>, IdentityRoleClaim<String>>._claims IdentityRole<String, IdentityUserRole<String>, IdentityRoleClaim<String>>._users IdentityRole<String, IdentityUserRole<String>, IdentityRoleClaim<String>>.Users IdentityRole<String, IdentityUserRole<String>, IdentityRoleClaim<String>>.Claims IdentityRole<String, IdentityUserRole<String>, IdentityRoleClaim<String>>.Id IdentityRole<String, IdentityUserRole<String>, IdentityRoleClaim<String>>.Name IdentityRole<String, IdentityUserRole<String>, IdentityRoleClaim<String>>.NormalizedName IdentityRole<String, IdentityUserRole<String>, IdentityRoleClaim<String>>.ConcurrencyStamp IdentityRole<String, IdentityUserRole<String>, IdentityRoleClaim<String>>.ToString() Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityRole : IdentityRole<string>, IIdentityRole<string>, IConcurrency<string> Constructors | Improve this Doc View Source IdentityRole() Initializes a new instance of IdentityRole . Declaration public IdentityRole() Remarks The Id property is initialized to from a new GUID string value. | Improve this Doc View Source IdentityRole(String) Initializes a new instance of IdentityRole . Declaration public IdentityRole(string roleName) Parameters Type Name Description System.String roleName The role name. Remarks The Id property is initialized to from a new GUID string value. Implements IIdentityRole<TKey> IConcurrency<TKey> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityRole-1.html": {
    "href": "api/LinqToDB.Identity.IdentityRole-1.html",
    "title": "Class IdentityRole<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityRole<TKey> Represents a role in the identity system Inheritance System.Object IdentityRole <TKey, IdentityUserRole <TKey>, IdentityRoleClaim <TKey>> IdentityRole<TKey> IdentityRole Implements IIdentityRole <TKey> IConcurrency <TKey> Inherited Members IdentityRole<TKey, IdentityUserRole<TKey>, IdentityRoleClaim<TKey>>._claims IdentityRole<TKey, IdentityUserRole<TKey>, IdentityRoleClaim<TKey>>._users IdentityRole<TKey, IdentityUserRole<TKey>, IdentityRoleClaim<TKey>>.Users IdentityRole<TKey, IdentityUserRole<TKey>, IdentityRoleClaim<TKey>>.Claims IdentityRole<TKey, IdentityUserRole<TKey>, IdentityRoleClaim<TKey>>.Id IdentityRole<TKey, IdentityUserRole<TKey>, IdentityRoleClaim<TKey>>.Name IdentityRole<TKey, IdentityUserRole<TKey>, IdentityRoleClaim<TKey>>.NormalizedName IdentityRole<TKey, IdentityUserRole<TKey>, IdentityRoleClaim<TKey>>.ConcurrencyStamp IdentityRole<TKey, IdentityUserRole<TKey>, IdentityRoleClaim<TKey>>.ToString() Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityRole<TKey> : IdentityRole<TKey, IdentityUserRole<TKey>, IdentityRoleClaim<TKey>>, IIdentityRole<TKey>, IConcurrency<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type used for the primary key for the role. Constructors | Improve this Doc View Source IdentityRole() Initializes a new instance of IdentityRole<TKey> . Declaration public IdentityRole() | Improve this Doc View Source IdentityRole(String) Initializes a new instance of IdentityRole<TKey> . Declaration public IdentityRole(string roleName) Parameters Type Name Description System.String roleName The role name. Implements IIdentityRole<TKey> IConcurrency<TKey> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityRole-3.html": {
    "href": "api/LinqToDB.Identity.IdentityRole-3.html",
    "title": "Class IdentityRole<TKey, TUserRole, TRoleClaim> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityRole<TKey, TUserRole, TRoleClaim> Represents a role in the identity system Inheritance System.Object IdentityRole<TKey, TUserRole, TRoleClaim> IdentityRole <TKey> Implements IIdentityRole <TKey> IConcurrency <TKey> Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityRole<TKey, TUserRole, TRoleClaim> : object, IIdentityRole<TKey>, IConcurrency<TKey> where TKey : IEquatable<TKey> where TUserRole : IdentityUserRole<TKey> where TRoleClaim : IdentityRoleClaim<TKey> Type Parameters Name Description TKey The type used for the primary key for the role. TUserRole The type used for user roles. TRoleClaim The type used for role claims. Constructors | Improve this Doc View Source IdentityRole() Initializes a new instance of IdentityRole<TKey> . Declaration public IdentityRole() | Improve this Doc View Source IdentityRole(String) Initializes a new instance of IdentityRole<TKey> . Declaration public IdentityRole(string roleName) Parameters Type Name Description System.String roleName The role name. Fields | Improve this Doc View Source _claims Claims storage Declaration protected ICollection<TRoleClaim> _claims Field Value Type Description ICollection <TRoleClaim> | Improve this Doc View Source _users Users storage Declaration protected ICollection<TUserRole> _users Field Value Type Description ICollection <TUserRole> Properties | Improve this Doc View Source Claims Navigation property for claims in this role. Declaration public virtual ICollection<TRoleClaim> Claims { get; } Property Value Type Description ICollection <TRoleClaim> | Improve this Doc View Source ConcurrencyStamp A random value that should change whenever a role is persisted to the store Declaration public virtual string ConcurrencyStamp { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id Gets or sets the primary key for this role. Declaration public virtual TKey Id { get; set; } Property Value Type Description TKey | Improve this Doc View Source Name Gets or sets the name for this role. Declaration public virtual string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source NormalizedName Gets or sets the normalized name for this role. Declaration public virtual string NormalizedName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Users Navigation property for the users in this role. Declaration public virtual ICollection<TUserRole> Users { get; } Property Value Type Description ICollection <TUserRole> Methods | Improve this Doc View Source ToString() Returns the name of the role. Declaration public override string ToString() Returns Type Description System.String The name of the role. Implements IIdentityRole<TKey> IConcurrency<TKey> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityRoleClaim-1.html": {
    "href": "api/LinqToDB.Identity.IdentityRoleClaim-1.html",
    "title": "Class IdentityRoleClaim<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityRoleClaim<TKey> Represents a claim that is granted to all users within a role. Inheritance System.Object IdentityRoleClaim<TKey> Implements IIdentityRoleClaim <TKey> IClameConverter Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityRoleClaim<TKey> : object, IIdentityRoleClaim<TKey>, IClameConverter where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type of the primary key of the role associated with this claim. Properties | Improve this Doc View Source ClaimType Gets or sets the claim type for this claim. Declaration public virtual string ClaimType { get; set; } Property Value Type Description System.String | Improve this Doc View Source ClaimValue Gets or sets the claim value for this claim. Declaration public virtual string ClaimValue { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id Gets or sets the identifier for this role claim. Declaration public virtual int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source RoleId Gets or sets the of the primary key of the role associated with this claim. Declaration public virtual TKey RoleId { get; set; } Property Value Type Description TKey Methods | Improve this Doc View Source InitializeFromClaim(Claim) Initializes by copying ClaimType and ClaimValue from the other claim. Declaration public virtual void InitializeFromClaim(Claim other) Parameters Type Name Description Claim other The claim to initialize from. | Improve this Doc View Source ToClaim() Constructs a new claim with the type and value. Declaration public virtual Claim ToClaim() Returns Type Description Claim Implements IIdentityRoleClaim<TKey> IClameConverter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityUser.html": {
    "href": "api/LinqToDB.Identity.IdentityUser.html",
    "title": "Class IdentityUser | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityUser The default implementation of IdentityUser<TKey> which uses a string as a primary key. Inheritance System.Object IdentityUser < System.String , IdentityUserClaim < System.String >, IdentityUserRole < System.String >, IdentityUserLogin < System.String >> IdentityUser < System.String > IdentityUser Implements IIdentityUser < System.String > IConcurrency < System.String > Inherited Members IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>._claims IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>._logins IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>._roles IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.Roles IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.Claims IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.Logins IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.Id IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.UserName IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.NormalizedUserName IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.Email IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.NormalizedEmail IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.EmailConfirmed IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.PasswordHash IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.SecurityStamp IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.ConcurrencyStamp IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.PhoneNumber IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.PhoneNumberConfirmed IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.TwoFactorEnabled IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.LockoutEnd IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.LockoutEnabled IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.AccessFailedCount IdentityUser<String, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>>.ToString() Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityUser : IdentityUser<string>, IIdentityUser<string>, IConcurrency<string> Constructors | Improve this Doc View Source IdentityUser() Initializes a new instance of IdentityUser . Declaration public IdentityUser() Remarks The Id property is initialized to from a new GUID string value. | Improve this Doc View Source IdentityUser(String) Initializes a new instance of IdentityUser . Declaration public IdentityUser(string userName) Parameters Type Name Description System.String userName The user name. Remarks The Id property is initialized to from a new GUID string value. Implements IIdentityUser<TKey> IConcurrency<TKey> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityUser-1.html": {
    "href": "api/LinqToDB.Identity.IdentityUser-1.html",
    "title": "Class IdentityUser<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityUser<TKey> Represents a user in the identity system Inheritance System.Object IdentityUser <TKey, IdentityUserClaim <TKey>, IdentityUserRole <TKey>, IdentityUserLogin <TKey>> IdentityUser<TKey> IdentityUser Implements IIdentityUser <TKey> IConcurrency <TKey> Inherited Members IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>._claims IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>._logins IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>._roles IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.Roles IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.Claims IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.Logins IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.Id IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.UserName IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.NormalizedUserName IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.Email IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.NormalizedEmail IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.EmailConfirmed IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.PasswordHash IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.SecurityStamp IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.ConcurrencyStamp IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.PhoneNumber IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.PhoneNumberConfirmed IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.TwoFactorEnabled IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.LockoutEnd IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.LockoutEnabled IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.AccessFailedCount IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>.ToString() Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityUser<TKey> : IdentityUser<TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>>, IIdentityUser<TKey>, IConcurrency<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type used for the primary key for the user. Implements IIdentityUser<TKey> IConcurrency<TKey> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityUser-4.html": {
    "href": "api/LinqToDB.Identity.IdentityUser-4.html",
    "title": "Class IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin> Represents a user in the identity system Inheritance System.Object IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin> IdentityUser <TKey> Implements IIdentityUser <TKey> IConcurrency <TKey> Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin> : object, IIdentityUser<TKey>, IConcurrency<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type used for the primary key for the user. TUserClaim The type representing a claim. TUserRole The type representing a user role. TUserLogin The type representing a user external login. Constructors | Improve this Doc View Source IdentityUser() Initializes a new instance of IdentityUser<TKey> . Declaration public IdentityUser() | Improve this Doc View Source IdentityUser(String) Initializes a new instance of IdentityUser<TKey> . Declaration public IdentityUser(string userName) Parameters Type Name Description System.String userName The user name. Fields | Improve this Doc View Source _claims Claims storage Declaration protected ICollection<TUserClaim> _claims Field Value Type Description ICollection <TUserClaim> | Improve this Doc View Source _logins Logins storage Declaration protected ICollection<TUserLogin> _logins Field Value Type Description ICollection <TUserLogin> | Improve this Doc View Source _roles Roles storage Declaration protected ICollection<TUserRole> _roles Field Value Type Description ICollection <TUserRole> Properties | Improve this Doc View Source AccessFailedCount Gets or sets the number of failed login attempts for the current user. Declaration public virtual int AccessFailedCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Claims Navigation property for the claims this user possesses. Declaration public virtual ICollection<TUserClaim> Claims { get; } Property Value Type Description ICollection <TUserClaim> | Improve this Doc View Source ConcurrencyStamp A random value that must change whenever a user is persisted to the store Declaration public virtual string ConcurrencyStamp { get; set; } Property Value Type Description System.String | Improve this Doc View Source Email Gets or sets the email address for this user. Declaration public virtual string Email { get; set; } Property Value Type Description System.String | Improve this Doc View Source EmailConfirmed Gets or sets a flag indicating if a user has confirmed their email address. Declaration public virtual bool EmailConfirmed { get; set; } Property Value Type Description System.Boolean True if the email address has been confirmed, otherwise false. | Improve this Doc View Source Id Gets or sets the primary key for this user. Declaration public virtual TKey Id { get; set; } Property Value Type Description TKey | Improve this Doc View Source LockoutEnabled Gets or sets a flag indicating if the user could be locked out. Declaration public virtual bool LockoutEnabled { get; set; } Property Value Type Description System.Boolean True if the user could be locked out, otherwise false. | Improve this Doc View Source LockoutEnd Gets or sets the date and time, in UTC, when any user lockout ends. Declaration public virtual DateTimeOffset? LockoutEnd { get; set; } Property Value Type Description System.Nullable < DateTimeOffset > Remarks A value in the past means the user is not locked out. | Improve this Doc View Source Logins Navigation property for this users login accounts. Declaration public virtual ICollection<TUserLogin> Logins { get; } Property Value Type Description ICollection <TUserLogin> | Improve this Doc View Source NormalizedEmail Gets or sets the normalized email address for this user. Declaration public virtual string NormalizedEmail { get; set; } Property Value Type Description System.String | Improve this Doc View Source NormalizedUserName Gets or sets the normalized user name for this user. Declaration public virtual string NormalizedUserName { get; set; } Property Value Type Description System.String | Improve this Doc View Source PasswordHash Gets or sets a salted and hashed representation of the password for this user. Declaration public virtual string PasswordHash { get; set; } Property Value Type Description System.String | Improve this Doc View Source PhoneNumber Gets or sets a telephone number for the user. Declaration public virtual string PhoneNumber { get; set; } Property Value Type Description System.String | Improve this Doc View Source PhoneNumberConfirmed Gets or sets a flag indicating if a user has confirmed their telephone address. Declaration public virtual bool PhoneNumberConfirmed { get; set; } Property Value Type Description System.Boolean True if the telephone number has been confirmed, otherwise false. | Improve this Doc View Source Roles Navigation property for the roles this user belongs to. Declaration public virtual ICollection<TUserRole> Roles { get; } Property Value Type Description ICollection <TUserRole> | Improve this Doc View Source SecurityStamp A random value that must change whenever a users credentials change (password changed, login removed) Declaration public virtual string SecurityStamp { get; set; } Property Value Type Description System.String | Improve this Doc View Source TwoFactorEnabled Gets or sets a flag indicating if two factor authentication is enabled for this user. Declaration public virtual bool TwoFactorEnabled { get; set; } Property Value Type Description System.Boolean True if 2fa is enabled, otherwise false. | Improve this Doc View Source UserName Gets or sets the user name for this user. Declaration public virtual string UserName { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ToString() Returns the username for this user. Declaration public override string ToString() Returns Type Description System.String Implements IIdentityUser<TKey> IConcurrency<TKey> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityUserClaim-1.html": {
    "href": "api/LinqToDB.Identity.IdentityUserClaim-1.html",
    "title": "Class IdentityUserClaim<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityUserClaim<TKey> Represents a claim that a user possesses. Inheritance System.Object IdentityUserClaim<TKey> Implements IIdentityUserClaim <TKey> IClameConverter Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityUserClaim<TKey> : object, IIdentityUserClaim<TKey>, IClameConverter where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type used for the primary key for this user that possesses this claim. Properties | Improve this Doc View Source ClaimType Gets or sets the claim type for this claim. Declaration public virtual string ClaimType { get; set; } Property Value Type Description System.String | Improve this Doc View Source ClaimValue Gets or sets the claim value for this claim. Declaration public virtual string ClaimValue { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id Gets or sets the identifier for this user claim. Declaration public virtual int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source UserId Gets or sets the primary key of the user associated with this claim. Declaration public virtual TKey UserId { get; set; } Property Value Type Description TKey Methods | Improve this Doc View Source InitializeFromClaim(Claim) Reads the type and value from the Claim. Declaration public virtual void InitializeFromClaim(Claim claim) Parameters Type Name Description Claim claim | Improve this Doc View Source ToClaim() Converts the entity into a Claim instance. Declaration public virtual Claim ToClaim() Returns Type Description Claim Implements IIdentityUserClaim<TKey> IClameConverter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityUserLogin-1.html": {
    "href": "api/LinqToDB.Identity.IdentityUserLogin-1.html",
    "title": "Class IdentityUserLogin<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityUserLogin<TKey> Represents a login and its associated provider for a user. Inheritance System.Object IdentityUserLogin<TKey> Implements IIdentityUserLogin <TKey> Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityUserLogin<TKey> : object, IIdentityUserLogin<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type of the primary key of the user associated with this login. Properties | Improve this Doc View Source LoginProvider Gets or sets the login provider for the login (e.g. facebook, google) Declaration public virtual string LoginProvider { get; set; } Property Value Type Description System.String | Improve this Doc View Source ProviderDisplayName Gets or sets the friendly name used in a UI for this login. Declaration public virtual string ProviderDisplayName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ProviderKey Gets or sets the unique provider identifier for this login. Declaration public virtual string ProviderKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source UserId Gets or sets the of the primary key of the user associated with this login. Declaration public virtual TKey UserId { get; set; } Property Value Type Description TKey Implements IIdentityUserLogin<TKey> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityUserRole-1.html": {
    "href": "api/LinqToDB.Identity.IdentityUserRole-1.html",
    "title": "Class IdentityUserRole<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityUserRole<TKey> Represents the link between a user and a role. Inheritance System.Object IdentityUserRole<TKey> Implements IIdentityUserRole <TKey> Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityUserRole<TKey> : object, IIdentityUserRole<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type of the primary key used for users and roles. Properties | Improve this Doc View Source RoleId Gets or sets the primary key of the role that is linked to the user. Declaration public virtual TKey RoleId { get; set; } Property Value Type Description TKey | Improve this Doc View Source UserId Gets or sets the primary key of the user that is linked to a role. Declaration public virtual TKey UserId { get; set; } Property Value Type Description TKey Implements IIdentityUserRole<TKey> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IdentityUserToken-1.html": {
    "href": "api/LinqToDB.Identity.IdentityUserToken-1.html",
    "title": "Class IdentityUserToken<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityUserToken<TKey> Represents an authentication token for a user. Inheritance System.Object IdentityUserToken<TKey> Implements IIdentityUserToken <TKey> Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class IdentityUserToken<TKey> : object, IIdentityUserToken<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type of the primary key used for users. Properties | Improve this Doc View Source LoginProvider Gets or sets the LoginProvider this token is from. Declaration public virtual string LoginProvider { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Gets or sets the name of the token. Declaration public virtual string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source UserId Gets or sets the primary key of the user that the token belongs to. Declaration public virtual TKey UserId { get; set; } Property Value Type Description TKey | Improve this Doc View Source Value Gets or sets the token value. Declaration public virtual string Value { get; set; } Property Value Type Description System.String Implements IIdentityUserToken<TKey> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IIdentityRole-1.html": {
    "href": "api/LinqToDB.Identity.IIdentityRole-1.html",
    "title": "Interface IIdentityRole<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Interface IIdentityRole<TKey> Represents a role in the identity system Inherited Members IConcurrency<TKey>.Id IConcurrency<TKey>.ConcurrencyStamp Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public interface IIdentityRole<TKey> : IConcurrency<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type used for the primary key for the role. Properties | Improve this Doc View Source Name Gets or sets the name for this role. Declaration string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source NormalizedName Gets or sets the normalized name for this role. Declaration string NormalizedName { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IIdentityRoleClaim-1.html": {
    "href": "api/LinqToDB.Identity.IIdentityRoleClaim-1.html",
    "title": "Interface IIdentityRoleClaim<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Interface IIdentityRoleClaim<TKey> Represents a claim that is granted to all users within a role. Inherited Members IClameConverter.ToClaim() IClameConverter.InitializeFromClaim(Claim) Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public interface IIdentityRoleClaim<TKey> : IClameConverter where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type of the primary key of the role associated with this claim. Properties | Improve this Doc View Source ClaimType Gets or sets the claim type for this claim. Declaration string ClaimType { get; set; } Property Value Type Description System.String | Improve this Doc View Source ClaimValue Gets or sets the claim value for this claim. Declaration string ClaimValue { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id Gets or sets the identifier for this role claim. Declaration int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source RoleId Gets or sets the of the primary key of the role associated with this claim. Declaration TKey RoleId { get; set; } Property Value Type Description TKey Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IIdentityUser-1.html": {
    "href": "api/LinqToDB.Identity.IIdentityUser-1.html",
    "title": "Interface IIdentityUser<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Interface IIdentityUser<TKey> Represents a user in the identity system Inherited Members IConcurrency<TKey>.Id IConcurrency<TKey>.ConcurrencyStamp Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public interface IIdentityUser<TKey> : IConcurrency<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type used for the primary key for the user. Properties | Improve this Doc View Source AccessFailedCount Gets or sets the number of failed login attempts for the current user. Declaration int AccessFailedCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Email Gets or sets the email address for this user. Declaration string Email { get; set; } Property Value Type Description System.String | Improve this Doc View Source EmailConfirmed Gets or sets a flag indicating if a user has confirmed their email address. Declaration bool EmailConfirmed { get; set; } Property Value Type Description System.Boolean True if the email address has been confirmed, otherwise false. | Improve this Doc View Source LockoutEnabled Gets or sets a flag indicating if the user could be locked out. Declaration bool LockoutEnabled { get; set; } Property Value Type Description System.Boolean True if the user could be locked out, otherwise false. | Improve this Doc View Source LockoutEnd Gets or sets the date and time, in UTC, when any user lockout ends. Declaration DateTimeOffset? LockoutEnd { get; set; } Property Value Type Description System.Nullable < DateTimeOffset > Remarks A value in the past means the user is not locked out. | Improve this Doc View Source NormalizedEmail Gets or sets the normalized email address for this user. Declaration string NormalizedEmail { get; set; } Property Value Type Description System.String | Improve this Doc View Source NormalizedUserName Gets or sets the normalized user name for this user. Declaration string NormalizedUserName { get; set; } Property Value Type Description System.String | Improve this Doc View Source PasswordHash Gets or sets a salted and hashed representation of the password for this user. Declaration string PasswordHash { get; set; } Property Value Type Description System.String | Improve this Doc View Source PhoneNumber Gets or sets a telephone number for the user. Declaration string PhoneNumber { get; set; } Property Value Type Description System.String | Improve this Doc View Source PhoneNumberConfirmed Gets or sets a flag indicating if a user has confirmed their telephone address. Declaration bool PhoneNumberConfirmed { get; set; } Property Value Type Description System.Boolean True if the telephone number has been confirmed, otherwise false. | Improve this Doc View Source SecurityStamp A random value that must change whenever a users credentials change (password changed, login removed) Declaration string SecurityStamp { get; set; } Property Value Type Description System.String | Improve this Doc View Source TwoFactorEnabled Gets or sets a flag indicating if two factor authentication is enabled for this user. Declaration bool TwoFactorEnabled { get; set; } Property Value Type Description System.Boolean True if 2fa is enabled, otherwise false. | Improve this Doc View Source UserName Gets or sets the user name for this user. Declaration string UserName { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IIdentityUserClaim-1.html": {
    "href": "api/LinqToDB.Identity.IIdentityUserClaim-1.html",
    "title": "Interface IIdentityUserClaim<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Interface IIdentityUserClaim<TKey> Represents a claim that a user possesses. Inherited Members IClameConverter.ToClaim() IClameConverter.InitializeFromClaim(Claim) Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public interface IIdentityUserClaim<TKey> : IClameConverter where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type used for the primary key for this user that possesses this claim. Properties | Improve this Doc View Source ClaimType Gets or sets the claim type for this claim. Declaration string ClaimType { get; set; } Property Value Type Description System.String | Improve this Doc View Source ClaimValue Gets or sets the claim value for this claim. Declaration string ClaimValue { get; set; } Property Value Type Description System.String | Improve this Doc View Source UserId Gets or sets the primary key of the user associated with this claim. Declaration TKey UserId { get; set; } Property Value Type Description TKey Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IIdentityUserLogin-1.html": {
    "href": "api/LinqToDB.Identity.IIdentityUserLogin-1.html",
    "title": "Interface IIdentityUserLogin<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Interface IIdentityUserLogin<TKey> Represents a login and its associated provider for a user. Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public interface IIdentityUserLogin<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type of the primary key of the user associated with this login. Properties | Improve this Doc View Source LoginProvider Gets or sets the login provider for the login (e.g. facebook, google) Declaration string LoginProvider { get; set; } Property Value Type Description System.String | Improve this Doc View Source ProviderDisplayName Gets or sets the friendly name used in a UI for this login. Declaration string ProviderDisplayName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ProviderKey Gets or sets the unique provider identifier for this login. Declaration string ProviderKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source UserId Gets or sets the of the primary key of the user associated with this login. Declaration TKey UserId { get; set; } Property Value Type Description TKey Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IIdentityUserRole-1.html": {
    "href": "api/LinqToDB.Identity.IIdentityUserRole-1.html",
    "title": "Interface IIdentityUserRole<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Interface IIdentityUserRole<TKey> Represents the link between a user and a role. Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public interface IIdentityUserRole<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type of the primary key used for users and roles. Properties | Improve this Doc View Source RoleId Gets or sets the primary key of the role that is linked to the user. Declaration TKey RoleId { get; set; } Property Value Type Description TKey | Improve this Doc View Source UserId Gets or sets the primary key of the user that is linked to a role. Declaration TKey UserId { get; set; } Property Value Type Description TKey Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.IIdentityUserToken-1.html": {
    "href": "api/LinqToDB.Identity.IIdentityUserToken-1.html",
    "title": "Interface IIdentityUserToken<TKey> | Linq To DB (aka linq2db)",
    "keywords": "Interface IIdentityUserToken<TKey> Represents an authentication token for a user. Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public interface IIdentityUserToken<TKey> where TKey : IEquatable<TKey> Type Parameters Name Description TKey The type of the primary key used for users. Properties | Improve this Doc View Source LoginProvider Gets or sets the LoginProvider this token is from. Declaration string LoginProvider { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Gets or sets the name of the token. Declaration string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source UserId Gets or sets the primary key of the user that the token belongs to. Declaration TKey UserId { get; set; } Property Value Type Description TKey | Improve this Doc View Source Value Gets or sets the token value. Declaration string Value { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.Resources.html": {
    "href": "api/LinqToDB.Identity.Resources.html",
    "title": "Class Resources | Linq To DB (aka linq2db)",
    "keywords": "Class Resources A strongly-typed resource class, for looking up localized strings, etc. Inheritance System.Object Resources Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class Resources : object Properties | Improve this Doc View Source Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static System.Globalization.CultureInfo Culture { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static System.Resources.ResourceManager ResourceManager { get; } Property Value Type Description System.Resources.ResourceManager | Improve this Doc View Source RoleNotFound Looks up a localized string similar to Role {0} does not exist.. Declaration public static string RoleNotFound { get; } Property Value Type Description System.String | Improve this Doc View Source ValueCannotBeNullOrEmpty Looks up a localized string similar to Value cannot be null or empty.. Declaration public static string ValueCannotBeNullOrEmpty { get; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.RoleStore-1.html": {
    "href": "api/LinqToDB.Identity.RoleStore-1.html",
    "title": "Class RoleStore<TRole> | Linq To DB (aka linq2db)",
    "keywords": "Class RoleStore<TRole> Creates a new instance of a persistence store for roles. Inheritance System.Object RoleStore < System.String , TRole, IdentityRoleClaim < System.String >> RoleStore < System.String , TRole> RoleStore<TRole> Implements IRoleClaimStore <TRole> Inherited Members RoleStore<String, TRole, IdentityRoleClaim<String>>.GetConnection() RoleStore<String, TRole, IdentityRoleClaim<String>>.GetContext() RoleStore<String, TRole, IdentityRoleClaim<String>>.ErrorDescriber RoleStore<String, TRole, IdentityRoleClaim<String>>.CreateAsync(TRole, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.CreateAsync(DataConnection, TRole, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.UpdateAsync(TRole, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.UpdateAsync(DataConnection, TRole, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.DeleteAsync(TRole, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.GetRoleIdAsync(TRole, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.GetRoleNameAsync(TRole, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.SetRoleNameAsync(TRole, String, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.FindByIdAsync(String, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.FindByIdAsync(DataConnection, String, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.FindByNameAsync(String, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.FindByNameAsync(DataConnection, String, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.GetNormalizedRoleNameAsync(TRole, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.Dispose() RoleStore<String, TRole, IdentityRoleClaim<String>>.Roles RoleStore<String, TRole, IdentityRoleClaim<String>>.GetClaimsAsync(TRole, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.GetClaimsAsync(DataConnection, TRole, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.AddClaimAsync(TRole, Claim, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.AddClaimAsync(DataConnection, TRole, Claim, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.RemoveClaimAsync(TRole, Claim, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.RemoveClaimAsync(DataConnection, TRole, Claim, CancellationToken) RoleStore<String, TRole, IdentityRoleClaim<String>>.ConvertIdFromString(String) RoleStore<String, TRole, IdentityRoleClaim<String>>.ConvertIdToString(String) RoleStore<String, TRole, IdentityRoleClaim<String>>.ThrowIfDisposed() RoleStore<String, TRole, IdentityRoleClaim<String>>.CreateRoleClaim(TRole, Claim) Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class RoleStore<TRole> : RoleStore<string, TRole> where TRole : IdentityRole<string> Type Parameters Name Description TRole The type of the class representing a role. Constructors | Improve this Doc View Source RoleStore(IConnectionFactory, IdentityErrorDescriber) Constructs a new instance of RoleStore<TKey, TRole> . Declaration public RoleStore(IConnectionFactory factory, IdentityErrorDescriber describer = null) Parameters Type Name Description IConnectionFactory factory IConnectionFactory IdentityErrorDescriber describer The . Implements IRoleClaimStore<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.RoleStore-2.html": {
    "href": "api/LinqToDB.Identity.RoleStore-2.html",
    "title": "Class RoleStore<TKey, TRole> | Linq To DB (aka linq2db)",
    "keywords": "Class RoleStore<TKey, TRole> Creates a new instance of a persistence store for roles. Inheritance System.Object RoleStore <TKey, TRole, IdentityRoleClaim <TKey>> RoleStore<TKey, TRole> RoleStore<TRole> Implements IRoleClaimStore <TRole> Inherited Members RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.GetConnection() RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.GetContext() RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.ErrorDescriber RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.CreateAsync(TRole, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.CreateAsync(DataConnection, TRole, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.UpdateAsync(TRole, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.UpdateAsync(DataConnection, TRole, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.DeleteAsync(TRole, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.GetRoleIdAsync(TRole, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.GetRoleNameAsync(TRole, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.SetRoleNameAsync(TRole, String, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.FindByIdAsync(String, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.FindByIdAsync(DataConnection, TKey, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.FindByNameAsync(String, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.FindByNameAsync(DataConnection, String, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.GetNormalizedRoleNameAsync(TRole, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.Dispose() RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.Roles RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.GetClaimsAsync(TRole, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.GetClaimsAsync(DataConnection, TRole, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.AddClaimAsync(TRole, Claim, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.AddClaimAsync(DataConnection, TRole, Claim, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.RemoveClaimAsync(TRole, Claim, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.RemoveClaimAsync(DataConnection, TRole, Claim, CancellationToken) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.ConvertIdFromString(String) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.ConvertIdToString(TKey) RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.ThrowIfDisposed() RoleStore<TKey, TRole, IdentityRoleClaim<TKey>>.CreateRoleClaim(TRole, Claim) Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class RoleStore<TKey, TRole> : RoleStore<TKey, TRole, IdentityRoleClaim<TKey>> where TKey : IEquatable<TKey> where TRole : IdentityRole<TKey> Type Parameters Name Description TKey The type of the primary key for a role. TRole The type of the class representing a role. Constructors | Improve this Doc View Source RoleStore(IConnectionFactory, IdentityErrorDescriber) Constructs a new instance of RoleStore<TKey, TRole, TRoleClaim> . Declaration public RoleStore(IConnectionFactory factory, IdentityErrorDescriber describer = null) Parameters Type Name Description IConnectionFactory factory IConnectionFactory IdentityErrorDescriber describer The . Implements IRoleClaimStore<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.RoleStore-3.html": {
    "href": "api/LinqToDB.Identity.RoleStore-3.html",
    "title": "Class RoleStore<TKey, TRole, TRoleClaim> | Linq To DB (aka linq2db)",
    "keywords": "Class RoleStore<TKey, TRole, TRoleClaim> Creates a new instance of a persistence store for roles. Inheritance System.Object RoleStore<TKey, TRole, TRoleClaim> RoleStore<TKey, TRole> Implements IRoleClaimStore <TRole> Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class RoleStore<TKey, TRole, TRoleClaim> : IQueryableRoleStore<TRole> where TKey : IEquatable<TKey> where TRole : class, IIdentityRole<TKey> where TRoleClaim : class, IIdentityRoleClaim<TKey>, new() Type Parameters Name Description TKey The type of the primary key for a role. TRole The type of the class representing a role. TRoleClaim The type of the class representing a role claim. Constructors | Improve this Doc View Source RoleStore(IConnectionFactory, IdentityErrorDescriber) Constructs a new instance of RoleStore<TKey, TRole, TRoleClaim> . Declaration public RoleStore(IConnectionFactory factory, IdentityErrorDescriber describer = null) Parameters Type Name Description IConnectionFactory factory IConnectionFactory IdentityErrorDescriber describer The . Properties | Improve this Doc View Source ErrorDescriber Gets or sets the for any error that occurred with the current operation. Declaration public IdentityErrorDescriber ErrorDescriber { get; set; } Property Value Type Description IdentityErrorDescriber | Improve this Doc View Source Roles A navigation property for the roles the store contains. Declaration public virtual IQueryable<TRole> Roles { get; } Property Value Type Description IQueryable <TRole> Methods | Improve this Doc View Source AddClaimAsync(TRole, Claim, CancellationToken) Adds the claim given to the specified role . Declaration public async Task AddClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken = null) Parameters Type Name Description TRole role The role to add the claim to. Claim claim The claim to add to the role. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source AddClaimAsync(DataConnection, TRole, Claim, CancellationToken) Adds the claim given to the specified role . Declaration protected virtual async Task AddClaimAsync(DataConnection db, TRole role, Claim claim, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TRole role Claim claim CancellationToken cancellationToken Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source ConvertIdFromString(String) Converts the provided id to a strongly typed key object. Declaration public virtual TKey ConvertIdFromString(string id) Parameters Type Name Description System.String id The id to convert. Returns Type Description TKey An instance of TKey representing the provided id . | Improve this Doc View Source ConvertIdToString(TKey) Converts the provided id to its string representation. Declaration public virtual string ConvertIdToString(TKey id) Parameters Type Name Description TKey id The id to convert. Returns Type Description System.String An representation of the provided id . | Improve this Doc View Source CreateAsync(TRole, CancellationToken) Creates a new role in a store as an asynchronous operation. Declaration public async Task<IdentityResult> CreateAsync(TRole role, CancellationToken cancellationToken = null) Parameters Type Name Description TRole role The role to create in the store. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IdentityResult > A that represents the of the asynchronous query. | Improve this Doc View Source CreateAsync(DataConnection, TRole, CancellationToken) Creates a new role in a store as an asynchronous operation. Declaration protected virtual async Task<IdentityResult> CreateAsync(DataConnection db, TRole role, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TRole role CancellationToken cancellationToken Returns Type Description Task < IdentityResult > A that represents the of the asynchronous query. | Improve this Doc View Source CreateRoleClaim(TRole, Claim) Creates a entity representing a role claim. Declaration protected virtual TRoleClaim CreateRoleClaim(TRole role, Claim claim) Parameters Type Name Description TRole role The associated role. Claim claim The associated claim. Returns Type Description TRoleClaim The role claim entity. | Improve this Doc View Source DeleteAsync(TRole, CancellationToken) Deletes a role from the store as an asynchronous operation. Declaration public async Task<IdentityResult> DeleteAsync(TRole role, CancellationToken cancellationToken = null) Parameters Type Name Description TRole role The role to delete from the store. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IdentityResult > A that represents the of the asynchronous query. | Improve this Doc View Source Dispose() Dispose the stores Declaration public void Dispose() | Improve this Doc View Source FindByIdAsync(DataConnection, TKey, CancellationToken) Finds the role who has the specified ID as an asynchronous operation. Declaration protected virtual async Task<TRole> FindByIdAsync(DataConnection db, TKey roleId, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TKey roleId CancellationToken cancellationToken Returns Type Description Task <TRole> A that result of the look up. | Improve this Doc View Source FindByIdAsync(String, CancellationToken) Finds the role who has the specified ID as an asynchronous operation. Declaration public async Task<TRole> FindByIdAsync(string id, CancellationToken cancellationToken = null) Parameters Type Name Description System.String id The role ID to look for. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task <TRole> A that result of the look up. | Improve this Doc View Source FindByNameAsync(DataConnection, String, CancellationToken) Finds the role who has the specified normalized name as an asynchronous operation. Declaration protected virtual async Task<TRole> FindByNameAsync(DataConnection db, string normalizedName, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db System.String normalizedName CancellationToken cancellationToken Returns Type Description Task <TRole> A that result of the look up. | Improve this Doc View Source FindByNameAsync(String, CancellationToken) Finds the role who has the specified normalized name as an asynchronous operation. Declaration public async Task<TRole> FindByNameAsync(string normalizedName, CancellationToken cancellationToken = null) Parameters Type Name Description System.String normalizedName The normalized role name to look for. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task <TRole> A that result of the look up. | Improve this Doc View Source GetClaimsAsync(TRole, CancellationToken) Get the claims associated with the specified role as an asynchronous operation. Declaration public async Task<IList<Claim>> GetClaimsAsync(TRole role, CancellationToken cancellationToken = null) Parameters Type Name Description TRole role The role whose claims should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IList < Claim >> A that contains the claims granted to a role. | Improve this Doc View Source GetClaimsAsync(DataConnection, TRole, CancellationToken) Get the claims associated with the specified role as an asynchronous operation. Declaration protected virtual async Task<IList<Claim>> GetClaimsAsync(DataConnection db, TRole role, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TRole role CancellationToken cancellationToken Returns Type Description Task < IList < Claim >> A that contains the claims granted to a role. | Improve this Doc View Source GetConnection() Gets from supplied IConnectionFactory Declaration protected DataConnection GetConnection() Returns Type Description DataConnection | Improve this Doc View Source GetContext() Gets from supplied IConnectionFactory Declaration protected IDataContext GetContext() Returns Type Description IDataContext | Improve this Doc View Source GetNormalizedRoleNameAsync(TRole, CancellationToken) Get a role's normalized name as an asynchronous operation. Declaration public virtual Task<string> GetNormalizedRoleNameAsync(TRole role, CancellationToken cancellationToken = null) Parameters Type Name Description TRole role The role whose normalized name should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > A that contains the name of the role. | Improve this Doc View Source GetRoleIdAsync(TRole, CancellationToken) Gets the ID for a role from the store as an asynchronous operation. Declaration public Task<string> GetRoleIdAsync(TRole role, CancellationToken cancellationToken = null) Parameters Type Name Description TRole role The role whose ID should be returned. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > A that contains the ID of the role. | Improve this Doc View Source GetRoleNameAsync(TRole, CancellationToken) Gets the name of a role from the store as an asynchronous operation. Declaration public Task<string> GetRoleNameAsync(TRole role, CancellationToken cancellationToken = null) Parameters Type Name Description TRole role The role whose name should be returned. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > A that contains the name of the role. | Improve this Doc View Source RemoveClaimAsync(TRole, Claim, CancellationToken) Removes the claim given from the specified role . Declaration public async Task RemoveClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken = null) Parameters Type Name Description TRole role The role to remove the claim from. Claim claim The claim to remove from the role. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source RemoveClaimAsync(DataConnection, TRole, Claim, CancellationToken) Removes the claim given from the specified role . Declaration protected virtual async Task RemoveClaimAsync(DataConnection db, TRole role, Claim claim, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TRole role Claim claim CancellationToken cancellationToken Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetNormalizedRoleNameAsync(TRole, String, CancellationToken) Set a role's normalized name as an asynchronous operation. Declaration public virtual Task SetNormalizedRoleNameAsync(TRole role, string normalizedName, CancellationToken cancellationToken = null) Parameters Type Name Description TRole role The role whose normalized name should be set. System.String normalizedName The normalized name to set CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetRoleNameAsync(TRole, String, CancellationToken) Sets the name of a role in the store as an asynchronous operation. Declaration public Task SetRoleNameAsync(TRole role, string roleName, CancellationToken cancellationToken = null) Parameters Type Name Description TRole role The role whose name should be set. System.String roleName The name of the role. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source ThrowIfDisposed() Throws if this class has been disposed. Declaration protected void ThrowIfDisposed() | Improve this Doc View Source UpdateAsync(TRole, CancellationToken) Updates a role in a store as an asynchronous operation. Declaration public async Task<IdentityResult> UpdateAsync(TRole role, CancellationToken cancellationToken = null) Parameters Type Name Description TRole role The role to update in the store. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IdentityResult > A that represents the of the asynchronous query. | Improve this Doc View Source UpdateAsync(DataConnection, TRole, CancellationToken) Updates a role in a store as an asynchronous operation. Declaration protected virtual async Task<IdentityResult> UpdateAsync(DataConnection db, TRole role, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TRole role CancellationToken cancellationToken Returns Type Description Task < IdentityResult > A that represents the of the asynchronous query. Implements IRoleClaimStore<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.UserStore-1.html": {
    "href": "api/LinqToDB.Identity.UserStore-1.html",
    "title": "Class UserStore<TUser> | Linq To DB (aka linq2db)",
    "keywords": "Class UserStore<TUser> Creates a new instance of a persistence store for the specified user type. Inheritance System.Object UserStore < System.String , TUser, IdentityRole , IdentityUserClaim < System.String >, IdentityUserRole < System.String >, IdentityUserLogin < System.String >, IdentityUserToken < System.String >> UserStore < System.String , TUser, IdentityRole > UserStore<TUser> Implements IUserRoleStore <TUser> IUserClaimStore <TUser> IUserPasswordStore <TUser> IUserSecurityStampStore <TUser> IUserEmailStore <TUser> IUserLockoutStore <TUser> IUserPhoneNumberStore <TUser> IQueryableUserStore <TUser> IUserTwoFactorStore <TUser> IUserAuthenticationTokenStore <TUser> Inherited Members UserStore<String, TUser, IdentityRole>.CreateUserRole(TUser, IdentityRole) UserStore<String, TUser, IdentityRole>.CreateUserClaim(TUser, Claim) UserStore<String, TUser, IdentityRole>.CreateUserLogin(TUser, UserLoginInfo) UserStore<String, TUser, IdentityRole>.CreateUserToken(TUser, String, String, String) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetConnection() UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetContext() UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ErrorDescriber UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.Users UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetTokenAsync(TUser, String, String, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetTokenAsync(DataConnection, TUser, String, String, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveTokenAsync(TUser, String, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveTokenAsync(DataConnection, TUser, String, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetTokenAsync(TUser, String, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetTokenAsync(DataConnection, TUser, String, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetClaimsAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetClaimsAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddClaimsAsync(DataConnection, IEnumerable<IdentityUserClaim<String>>, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken, DataConnection) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveClaimsAsync(DataConnection, TUser, IEnumerable<Claim>, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetUsersForClaimAsync(Claim, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.UsersForClaimAsync(DataConnection, Claim, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetEmailConfirmedAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetEmailAsync(TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetEmailAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetNormalizedEmailAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetNormalizedEmailAsync(TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByEmailAsync(String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByEmailAsync(DataConnection, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetLockoutEndDateAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.IncrementAccessFailedCountAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ResetAccessFailedCountAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetAccessFailedCountAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetLockoutEnabledAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetUserIdAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetUserNameAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetUserNameAsync(TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetNormalizedUserNameAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetNormalizedUserNameAsync(TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.UpdateAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.UpdateAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.DeleteAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.DeleteAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByIdAsync(String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByIdAsync(DataConnection, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByNameAsync(String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByNameAsync(DataConnection, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.Dispose() UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddLoginAsync(DataConnection, TUser, UserLoginInfo, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveLoginAsync(TUser, String, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveLoginAsync(DataConnection, TUser, String, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetLoginsAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetLoginsAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByLoginAsync(String, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByLoginAsync(DataConnection, String, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetPasswordHashAsync(TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetPasswordHashAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.HasPasswordAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetPhoneNumberAsync(TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetPhoneNumberAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddToRoleAsync(TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddToRoleAsync(DataConnection, TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveFromRoleAsync(TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveFromRoleAsync(DataConnection, TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetRolesAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetRolesAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.IsInRoleAsync(TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.IsInRoleAsync(DataConnection, TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetUsersInRoleAsync(String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetUsersInRoleAsync(DataConnection, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetSecurityStampAsync(TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetSecurityStampAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetTwoFactorEnabledAsync(TUser, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateUserRole(TUser, IdentityRole) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateUserClaim(TUser, Claim) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateUserLogin(TUser, UserLoginInfo) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateUserToken(TUser, String, String, String) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ConvertIdFromString(String) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ConvertIdToString(String) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ThrowIfDisposed() UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetAuthenticatorKeyAsync(TUser, String, CancellationToken) UserStore<String, TUser, IdentityRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetAuthenticatorKeyAsync(TUser, CancellationToken) Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class UserStore<TUser> : UserStore<string, TUser, IdentityRole> where TUser : IdentityUser<string>, new() Type Parameters Name Description TUser The type representing a user. Constructors | Improve this Doc View Source UserStore(IConnectionFactory, IdentityErrorDescriber) Constructs a new instance of UserStore<TKey, TUser, TRole> . Declaration public UserStore(IConnectionFactory factory, IdentityErrorDescriber describer = null) Parameters Type Name Description IConnectionFactory factory IConnectionFactory IdentityErrorDescriber describer The . Implements IUserRoleStore<> IUserClaimStore<> IUserPasswordStore<> IUserSecurityStampStore<> IUserEmailStore<> IUserLockoutStore<> IUserPhoneNumberStore<> IQueryableUserStore<> IUserTwoFactorStore<> IUserAuthenticationTokenStore<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.UserStore-2.html": {
    "href": "api/LinqToDB.Identity.UserStore-2.html",
    "title": "Class UserStore<TUser, TRole> | Linq To DB (aka linq2db)",
    "keywords": "Class UserStore<TUser, TRole> Represents a new instance of a persistence store for the specified user and role types. Inheritance System.Object UserStore < System.String , TUser, TRole, IdentityUserClaim < System.String >, IdentityUserRole < System.String >, IdentityUserLogin < System.String >, IdentityUserToken < System.String >> UserStore < System.String , TUser, TRole> UserStore<TUser, TRole> Implements IUserRoleStore <TUser> IUserClaimStore <TUser> IUserPasswordStore <TUser> IUserSecurityStampStore <TUser> IUserEmailStore <TUser> IUserLockoutStore <TUser> IUserPhoneNumberStore <TUser> IQueryableUserStore <TUser> IUserTwoFactorStore <TUser> IUserAuthenticationTokenStore <TUser> Inherited Members UserStore<String, TUser, TRole>.CreateUserRole(TUser, TRole) UserStore<String, TUser, TRole>.CreateUserClaim(TUser, Claim) UserStore<String, TUser, TRole>.CreateUserLogin(TUser, UserLoginInfo) UserStore<String, TUser, TRole>.CreateUserToken(TUser, String, String, String) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetConnection() UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetContext() UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ErrorDescriber UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.Users UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetTokenAsync(TUser, String, String, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetTokenAsync(DataConnection, TUser, String, String, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveTokenAsync(TUser, String, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveTokenAsync(DataConnection, TUser, String, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetTokenAsync(TUser, String, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetTokenAsync(DataConnection, TUser, String, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetClaimsAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetClaimsAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddClaimsAsync(DataConnection, IEnumerable<IdentityUserClaim<String>>, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken, DataConnection) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveClaimsAsync(DataConnection, TUser, IEnumerable<Claim>, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetUsersForClaimAsync(Claim, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.UsersForClaimAsync(DataConnection, Claim, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetEmailConfirmedAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetEmailAsync(TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetEmailAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetNormalizedEmailAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetNormalizedEmailAsync(TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByEmailAsync(String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByEmailAsync(DataConnection, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetLockoutEndDateAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.IncrementAccessFailedCountAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ResetAccessFailedCountAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetAccessFailedCountAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetLockoutEnabledAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetUserIdAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetUserNameAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetUserNameAsync(TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetNormalizedUserNameAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetNormalizedUserNameAsync(TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.UpdateAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.UpdateAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.DeleteAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.DeleteAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByIdAsync(String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByIdAsync(DataConnection, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByNameAsync(String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByNameAsync(DataConnection, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.Dispose() UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddLoginAsync(DataConnection, TUser, UserLoginInfo, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveLoginAsync(TUser, String, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveLoginAsync(DataConnection, TUser, String, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetLoginsAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetLoginsAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByLoginAsync(String, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.FindByLoginAsync(DataConnection, String, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetPasswordHashAsync(TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetPasswordHashAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.HasPasswordAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetPhoneNumberAsync(TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetPhoneNumberAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddToRoleAsync(TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.AddToRoleAsync(DataConnection, TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveFromRoleAsync(TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.RemoveFromRoleAsync(DataConnection, TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetRolesAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetRolesAsync(DataConnection, TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.IsInRoleAsync(TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.IsInRoleAsync(DataConnection, TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetUsersInRoleAsync(String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetUsersInRoleAsync(DataConnection, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetSecurityStampAsync(TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetSecurityStampAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetTwoFactorEnabledAsync(TUser, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateUserRole(TUser, TRole) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateUserClaim(TUser, Claim) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateUserLogin(TUser, UserLoginInfo) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.CreateUserToken(TUser, String, String, String) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ConvertIdFromString(String) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ConvertIdToString(String) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.ThrowIfDisposed() UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.SetAuthenticatorKeyAsync(TUser, String, CancellationToken) UserStore<String, TUser, TRole, IdentityUserClaim<String>, IdentityUserRole<String>, IdentityUserLogin<String>, IdentityUserToken<String>>.GetAuthenticatorKeyAsync(TUser, CancellationToken) Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class UserStore<TUser, TRole> : UserStore<string, TUser, TRole> where TUser : IdentityUser<string> where TRole : IdentityRole<string> Type Parameters Name Description TUser The type representing a user. TRole The type representing a role. Constructors | Improve this Doc View Source UserStore(IConnectionFactory, IdentityErrorDescriber) Constructs a new instance of UserStore<TKey, TUser, TRole> . Declaration public UserStore(IConnectionFactory factory, IdentityErrorDescriber describer = null) Parameters Type Name Description IConnectionFactory factory IConnectionFactory IdentityErrorDescriber describer The . Implements IUserRoleStore<> IUserClaimStore<> IUserPasswordStore<> IUserSecurityStampStore<> IUserEmailStore<> IUserLockoutStore<> IUserPhoneNumberStore<> IQueryableUserStore<> IUserTwoFactorStore<> IUserAuthenticationTokenStore<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.UserStore-3.html": {
    "href": "api/LinqToDB.Identity.UserStore-3.html",
    "title": "Class UserStore<TKey, TUser, TRole> | Linq To DB (aka linq2db)",
    "keywords": "Class UserStore<TKey, TUser, TRole> Represents a new instance of a persistence store for the specified user and role types. Inheritance System.Object UserStore <TKey, TUser, TRole, IdentityUserClaim <TKey>, IdentityUserRole <TKey>, IdentityUserLogin <TKey>, IdentityUserToken <TKey>> UserStore<TKey, TUser, TRole> UserStore<TUser> UserStore<TUser, TRole> Implements IUserRoleStore <TUser> IUserClaimStore <TUser> IUserPasswordStore <TUser> IUserSecurityStampStore <TUser> IUserEmailStore <TUser> IUserLockoutStore <TUser> IUserPhoneNumberStore <TUser> IQueryableUserStore <TUser> IUserTwoFactorStore <TUser> IUserAuthenticationTokenStore <TUser> Inherited Members UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetConnection() UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetContext() UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.ErrorDescriber UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.Users UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetTokenAsync(TUser, String, String, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetTokenAsync(DataConnection, TUser, String, String, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.RemoveTokenAsync(TUser, String, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.RemoveTokenAsync(DataConnection, TUser, String, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetTokenAsync(TUser, String, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetTokenAsync(DataConnection, TUser, String, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetClaimsAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetClaimsAsync(DataConnection, TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.AddClaimsAsync(DataConnection, IEnumerable<IdentityUserClaim<TKey>>, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken, DataConnection) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.RemoveClaimsAsync(DataConnection, TUser, IEnumerable<Claim>, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetUsersForClaimAsync(Claim, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.UsersForClaimAsync(DataConnection, Claim, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetEmailConfirmedAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetEmailAsync(TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetEmailAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetNormalizedEmailAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetNormalizedEmailAsync(TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.FindByEmailAsync(String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.FindByEmailAsync(DataConnection, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetLockoutEndDateAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.IncrementAccessFailedCountAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.ResetAccessFailedCountAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetAccessFailedCountAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetLockoutEnabledAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetUserIdAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetUserNameAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetUserNameAsync(TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetNormalizedUserNameAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetNormalizedUserNameAsync(TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.CreateAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.CreateAsync(DataConnection, TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.UpdateAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.UpdateAsync(DataConnection, TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.DeleteAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.DeleteAsync(DataConnection, TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.FindByIdAsync(String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.FindByIdAsync(DataConnection, TKey, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.FindByNameAsync(String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.FindByNameAsync(DataConnection, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.Dispose() UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.AddLoginAsync(DataConnection, TUser, UserLoginInfo, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.RemoveLoginAsync(TUser, String, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.RemoveLoginAsync(DataConnection, TUser, String, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetLoginsAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetLoginsAsync(DataConnection, TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.FindByLoginAsync(String, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.FindByLoginAsync(DataConnection, String, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetPasswordHashAsync(TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetPasswordHashAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.HasPasswordAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetPhoneNumberAsync(TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetPhoneNumberAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.AddToRoleAsync(TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.AddToRoleAsync(DataConnection, TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.RemoveFromRoleAsync(TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.RemoveFromRoleAsync(DataConnection, TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetRolesAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetRolesAsync(DataConnection, TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.IsInRoleAsync(TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.IsInRoleAsync(DataConnection, TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetUsersInRoleAsync(String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetUsersInRoleAsync(DataConnection, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetSecurityStampAsync(TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetSecurityStampAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetTwoFactorEnabledAsync(TUser, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.CreateUserRole(TUser, TRole) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.CreateUserClaim(TUser, Claim) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.CreateUserLogin(TUser, UserLoginInfo) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.CreateUserToken(TUser, String, String, String) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.ConvertIdFromString(String) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.ConvertIdToString(TKey) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.ThrowIfDisposed() UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.SetAuthenticatorKeyAsync(TUser, String, CancellationToken) UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>.GetAuthenticatorKeyAsync(TUser, CancellationToken) Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class UserStore<TKey, TUser, TRole> : UserStore<TKey, TUser, TRole, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>> where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey> where TRole : IdentityRole<TKey> Type Parameters Name Description TKey The type of the primary key for a role. TUser The type representing a user. TRole The type representing a role. Constructors | Improve this Doc View Source UserStore(IConnectionFactory, IdentityErrorDescriber) Constructs a new instance of UserStore<TKey, TUser, TRole> . Declaration public UserStore(IConnectionFactory factory, IdentityErrorDescriber describer = null) Parameters Type Name Description IConnectionFactory factory IConnectionFactory IdentityErrorDescriber describer The . Methods | Improve this Doc View Source CreateUserClaim(TUser, Claim) Called to create a new instance of a IdentityUserClaim<TKey> . Declaration protected override IdentityUserClaim<TKey> CreateUserClaim(TUser user, Claim claim) Parameters Type Name Description TUser user The associated user. Claim claim The associated claim. Returns Type Description IdentityUserClaim <TKey> Overrides LinqToDB.Identity.UserStore<TKey, TUser, TRole, LinqToDB.Identity.IdentityUserClaim<TKey>, LinqToDB.Identity.IdentityUserRole<TKey>, LinqToDB.Identity.IdentityUserLogin<TKey>, LinqToDB.Identity.IdentityUserToken<TKey>>.CreateUserClaim(TUser, Claim) | Improve this Doc View Source CreateUserLogin(TUser, UserLoginInfo) Called to create a new instance of a IdentityUserLogin<TKey> . Declaration protected override IdentityUserLogin<TKey> CreateUserLogin(TUser user, UserLoginInfo login) Parameters Type Name Description TUser user The associated user. UserLoginInfo login The sasociated login. Returns Type Description IdentityUserLogin <TKey> Overrides LinqToDB.Identity.UserStore<TKey, TUser, TRole, LinqToDB.Identity.IdentityUserClaim<TKey>, LinqToDB.Identity.IdentityUserRole<TKey>, LinqToDB.Identity.IdentityUserLogin<TKey>, LinqToDB.Identity.IdentityUserToken<TKey>>.CreateUserLogin(TUser, UserLoginInfo) | Improve this Doc View Source CreateUserRole(TUser, TRole) Called to create a new instance of a IdentityUserRole<TKey> . Declaration protected override IdentityUserRole<TKey> CreateUserRole(TUser user, TRole role) Parameters Type Name Description TUser user The associated user. TRole role The associated role. Returns Type Description IdentityUserRole <TKey> Overrides LinqToDB.Identity.UserStore<TKey, TUser, TRole, LinqToDB.Identity.IdentityUserClaim<TKey>, LinqToDB.Identity.IdentityUserRole<TKey>, LinqToDB.Identity.IdentityUserLogin<TKey>, LinqToDB.Identity.IdentityUserToken<TKey>>.CreateUserRole(TUser, TRole) | Improve this Doc View Source CreateUserToken(TUser, String, String, String) Called to create a new instance of a IdentityUserToken<TKey> . Declaration protected override IdentityUserToken<TKey> CreateUserToken(TUser user, string loginProvider, string name, string value) Parameters Type Name Description TUser user The associated user. System.String loginProvider The associated login provider. System.String name The name of the user token. System.String value The value of the user token. Returns Type Description IdentityUserToken <TKey> Overrides LinqToDB.Identity.UserStore<TKey, TUser, TRole, LinqToDB.Identity.IdentityUserClaim<TKey>, LinqToDB.Identity.IdentityUserRole<TKey>, LinqToDB.Identity.IdentityUserLogin<TKey>, LinqToDB.Identity.IdentityUserToken<TKey>>.CreateUserToken(TUser, System.String, System.String, System.String) Implements IUserRoleStore<> IUserClaimStore<> IUserPasswordStore<> IUserSecurityStampStore<> IUserEmailStore<> IUserLockoutStore<> IUserPhoneNumberStore<> IQueryableUserStore<> IUserTwoFactorStore<> IUserAuthenticationTokenStore<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Identity.UserStore-7.html": {
    "href": "api/LinqToDB.Identity.UserStore-7.html",
    "title": "Class UserStore<TKey, TUser, TRole, TUserClaim, TUserRole, TUserLogin, TUserToken> | Linq To DB (aka linq2db)",
    "keywords": "Class UserStore<TKey, TUser, TRole, TUserClaim, TUserRole, TUserLogin, TUserToken> Represents a new instance of a persistence store for the specified user and role types. Inheritance System.Object UserStore<TKey, TUser, TRole, TUserClaim, TUserRole, TUserLogin, TUserToken> UserStore<TKey, TUser, TRole> Implements IUserRoleStore <TUser> IUserClaimStore <TUser> IUserPasswordStore <TUser> IUserSecurityStampStore <TUser> IUserEmailStore <TUser> IUserLockoutStore <TUser> IUserPhoneNumberStore <TUser> IQueryableUserStore <TUser> IUserTwoFactorStore <TUser> IUserAuthenticationTokenStore <TUser> Namespace : LinqToDB.Identity Assembly : LinqToDB.Identity.dll Syntax public class UserStore<TKey, TUser, TRole, TUserClaim, TUserRole, TUserLogin, TUserToken> : IUserLoginStore<TUser> where TKey : IEquatable<TKey> where TUser : class, IIdentityUser<TKey> where TRole : class, IIdentityRole<TKey> where TUserClaim : class, IIdentityUserClaim<TKey>, new() where TUserRole : class, IIdentityUserRole<TKey>, new() where TUserLogin : class, IIdentityUserLogin<TKey>, new() where TUserToken : class, IIdentityUserToken<TKey>, new() Type Parameters Name Description TKey The type of the primary key for a role. TUser The type representing a user. TRole The type representing a role. TUserClaim The type representing a claim. TUserRole The type representing a user role. TUserLogin The type representing a user external login. TUserToken The type representing a user token. Constructors | Improve this Doc View Source UserStore(IConnectionFactory, IdentityErrorDescriber) Creates a new instance of UserStore<TKey, TUser, TRole, TUserClaim, TUserRole, TUserLogin, TUserToken> . Declaration public UserStore(IConnectionFactory factory, IdentityErrorDescriber describer = null) Parameters Type Name Description IConnectionFactory factory IConnectionFactory IdentityErrorDescriber describer The used to describe store errors. Properties | Improve this Doc View Source ErrorDescriber Gets or sets the for any error that occurred with the current operation. Declaration public IdentityErrorDescriber ErrorDescriber { get; set; } Property Value Type Description IdentityErrorDescriber | Improve this Doc View Source Users A navigation property for the users the store contains. Declaration public virtual IQueryable<TUser> Users { get; } Property Value Type Description IQueryable <TUser> Methods | Improve this Doc View Source AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken) Adds the claims given to the specified user . Declaration public Task AddClaimsAsync(TUser user, IEnumerable<Claim> claims, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to add the claim to. IEnumerable < Claim > claims The claim to add to the user. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source AddClaimsAsync(DataConnection, IEnumerable<TUserClaim>, CancellationToken) Adds the claims given to the specified user . Declaration protected virtual Task AddClaimsAsync(DataConnection dc, IEnumerable<TUserClaim> data, CancellationToken cancellationToken) Parameters Type Name Description DataConnection dc IEnumerable <TUserClaim> data CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source AddLoginAsync(TUser, UserLoginInfo, CancellationToken) Adds the login given to the specified user . Declaration public async Task AddLoginAsync(TUser user, UserLoginInfo login, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to add the login to. UserLoginInfo login The login to add to the user. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source AddLoginAsync(DataConnection, TUser, UserLoginInfo, CancellationToken) Adds the login given to the specified user . Declaration protected virtual async Task AddLoginAsync(DataConnection db, TUser user, UserLoginInfo login, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user UserLoginInfo login CancellationToken cancellationToken Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source AddToRoleAsync(TUser, String, CancellationToken) Adds the given normalizedRoleName to the specified user . Declaration public async Task AddToRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to add the role to. System.String normalizedRoleName The role to add. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source AddToRoleAsync(DataConnection, TUser, String, CancellationToken) Adds the given normalizedRoleName to the specified user . Declaration protected virtual async Task AddToRoleAsync(DataConnection db, TUser user, string normalizedRoleName, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user System.String normalizedRoleName CancellationToken cancellationToken Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source ConvertIdFromString(String) Converts the provided id to a strongly typed key object. Declaration public virtual TKey ConvertIdFromString(string id) Parameters Type Name Description System.String id The id to convert. Returns Type Description TKey An instance of TKey representing the provided id . | Improve this Doc View Source ConvertIdToString(TKey) Converts the provided id to its string representation. Declaration public virtual string ConvertIdToString(TKey id) Parameters Type Name Description TKey id The id to convert. Returns Type Description System.String An representation of the provided id . | Improve this Doc View Source CreateAsync(TUser, CancellationToken) Creates the specified user in the user store. Declaration public async Task<IdentityResult> CreateAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to create. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IdentityResult > The that represents the asynchronous operation, containing the of the creation operation. | Improve this Doc View Source CreateAsync(DataConnection, TUser, CancellationToken) Creates the specified user in the user store. Declaration protected virtual async Task<IdentityResult> CreateAsync(DataConnection db, TUser user, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user CancellationToken cancellationToken Returns Type Description Task < IdentityResult > The that represents the asynchronous operation, containing the of the creation operation. | Improve this Doc View Source CreateUserClaim(TUser, Claim) Create a new entity representing a user claim. Declaration protected virtual TUserClaim CreateUserClaim(TUser user, Claim claim) Parameters Type Name Description TUser user Claim claim Returns Type Description TUserClaim | Improve this Doc View Source CreateUserLogin(TUser, UserLoginInfo) Create a new entity representing a user login. Declaration protected virtual TUserLogin CreateUserLogin(TUser user, UserLoginInfo login) Parameters Type Name Description TUser user UserLoginInfo login Returns Type Description TUserLogin | Improve this Doc View Source CreateUserRole(TUser, TRole) Creates a new entity to represent a user role. Declaration protected virtual TUserRole CreateUserRole(TUser user, TRole role) Parameters Type Name Description TUser user TRole role Returns Type Description TUserRole | Improve this Doc View Source CreateUserToken(TUser, String, String, String) Create a new entity representing a user token. Declaration protected virtual TUserToken CreateUserToken(TUser user, string loginProvider, string name, string value) Parameters Type Name Description TUser user System.String loginProvider System.String name System.String value Returns Type Description TUserToken | Improve this Doc View Source DeleteAsync(TUser, CancellationToken) Deletes the specified user from the user store. Declaration public async Task<IdentityResult> DeleteAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to delete. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IdentityResult > The that represents the asynchronous operation, containing the of the update operation. | Improve this Doc View Source DeleteAsync(DataConnection, TUser, CancellationToken) Deletes the specified user from the user store. Declaration protected virtual async Task<IdentityResult> DeleteAsync(DataConnection db, TUser user, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user CancellationToken cancellationToken Returns Type Description Task < IdentityResult > The that represents the asynchronous operation, containing the of the update operation. | Improve this Doc View Source Dispose() Dispose the store Declaration public void Dispose() | Improve this Doc View Source FindByEmailAsync(DataConnection, String, CancellationToken) Gets the user, if any, associated with the specified, normalized email address. Declaration protected virtual async Task<TUser> FindByEmailAsync(DataConnection db, string normalizedEmail, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db System.String normalizedEmail CancellationToken cancellationToken Returns Type Description Task <TUser> The task object containing the results of the asynchronous lookup operation, the user if any associated with the specified normalized email address. | Improve this Doc View Source FindByEmailAsync(String, CancellationToken) Gets the user, if any, associated with the specified, normalized email address. Declaration public async Task<TUser> FindByEmailAsync(string normalizedEmail, CancellationToken cancellationToken = null) Parameters Type Name Description System.String normalizedEmail The normalized email address to return the user for. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task <TUser> The task object containing the results of the asynchronous lookup operation, the user if any associated with the specified normalized email address. | Improve this Doc View Source FindByIdAsync(DataConnection, TKey, CancellationToken) Finds and returns a user, if any, who has the specified userId . Declaration protected virtual async Task<TUser> FindByIdAsync(DataConnection db, TKey id, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TKey id CancellationToken cancellationToken Returns Type Description Task <TUser> The that represents the asynchronous operation, containing the user matching the specified userId if it exists. | Improve this Doc View Source FindByIdAsync(String, CancellationToken) Finds and returns a user, if any, who has the specified userId . Declaration public async Task<TUser> FindByIdAsync(string userId, CancellationToken cancellationToken = null) Parameters Type Name Description System.String userId The user ID to search for. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task <TUser> The that represents the asynchronous operation, containing the user matching the specified userId if it exists. | Improve this Doc View Source FindByLoginAsync(DataConnection, String, String, CancellationToken) Retrieves the user associated with the specified login provider and login provider key.. Declaration protected virtual async Task<TUser> FindByLoginAsync(DataConnection db, string loginProvider, string providerKey, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db System.String loginProvider System.String providerKey CancellationToken cancellationToken Returns Type Description Task <TUser> The for the asynchronous operation, containing the user, if any which matched the specified login provider and key. | Improve this Doc View Source FindByLoginAsync(String, String, CancellationToken) Retrieves the user associated with the specified login provider and login provider key.. Declaration public async Task<TUser> FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken = null) Parameters Type Name Description System.String loginProvider The login provider who provided the providerKey . System.String providerKey The key provided by the loginProvider to identify a user. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task <TUser> The for the asynchronous operation, containing the user, if any which matched the specified login provider and key. | Improve this Doc View Source FindByNameAsync(DataConnection, String, CancellationToken) Finds and returns a user, if any, who has the specified normalized user name. Declaration protected virtual async Task<TUser> FindByNameAsync(DataConnection db, string normalizedUserName, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db System.String normalizedUserName CancellationToken cancellationToken Returns Type Description Task <TUser> The that represents the asynchronous operation, containing the user matching the specified normalizedUserName if it exists. | Improve this Doc View Source FindByNameAsync(String, CancellationToken) Finds and returns a user, if any, who has the specified normalized user name. Declaration public async Task<TUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken = null) Parameters Type Name Description System.String normalizedUserName The normalized user name to search for. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task <TUser> The that represents the asynchronous operation, containing the user matching the specified normalizedUserName if it exists. | Improve this Doc View Source GetAccessFailedCountAsync(TUser, CancellationToken) Retrieves the current failed access count for the specified user .. Declaration public virtual Task<int> GetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose failed access count should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.Int32 > The that represents the asynchronous operation, containing the failed access count. | Improve this Doc View Source GetAuthenticatorKeyAsync(TUser, CancellationToken) Get the authenticator key for the specified user . Declaration public virtual Task<string> GetAuthenticatorKeyAsync(TUser user, CancellationToken cancellationToken) Parameters Type Name Description TUser user The user whose security stamp should be set. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > The that represents the asynchronous operation, containing the security stamp for the specified user . | Improve this Doc View Source GetClaimsAsync(TUser, CancellationToken) Get the claims associated with the specified user as an asynchronous operation. Declaration public async Task<IList<Claim>> GetClaimsAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose claims should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IList < Claim >> A that contains the claims granted to a user. | Improve this Doc View Source GetClaimsAsync(DataConnection, TUser, CancellationToken) Get the claims associated with the specified user as an asynchronous operation. Declaration protected virtual async Task<IList<Claim>> GetClaimsAsync(DataConnection db, TUser user, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user CancellationToken cancellationToken Returns Type Description Task < IList < Claim >> A that contains the claims granted to a user. | Improve this Doc View Source GetConnection() Gets from supplied IConnectionFactory Declaration protected DataConnection GetConnection() Returns Type Description DataConnection | Improve this Doc View Source GetContext() Gets from supplied IConnectionFactory Declaration protected IDataContext GetContext() Returns Type Description IDataContext | Improve this Doc View Source GetEmailAsync(TUser, CancellationToken) Gets the email address for the specified user . Declaration public virtual Task<string> GetEmailAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose email should be returned. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > The task object containing the results of the asynchronous operation, the email address for the specified user . | Improve this Doc View Source GetEmailConfirmedAsync(TUser, CancellationToken) Gets a flag indicating whether the email address for the specified user has been verified, true if the email address is verified otherwise false. Declaration public virtual Task<bool> GetEmailConfirmedAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose email confirmation status should be returned. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.Boolean > The task object containing the results of the asynchronous operation, a flag indicating whether the email address for the specified user has been confirmed or not. | Improve this Doc View Source GetLockoutEnabledAsync(TUser, CancellationToken) Retrieves a flag indicating whether user lockout can enabled for the specified user. Declaration public virtual Task<bool> GetLockoutEnabledAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose ability to be locked out should be returned. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.Boolean > The that represents the asynchronous operation, true if a user can be locked out, otherwise false. | Improve this Doc View Source GetLockoutEndDateAsync(TUser, CancellationToken) Gets the last a user's last lockout expired, if any. Any time in the past should be indicates a user is not locked out. Declaration public virtual Task<DateTimeOffset?> GetLockoutEndDateAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose lockout date should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.Nullable < DateTimeOffset >> A that represents the result of the asynchronous query, a containing the last time a user's lockout expired, if any. | Improve this Doc View Source GetLoginsAsync(TUser, CancellationToken) Retrieves the associated logins for the specified . Declaration public async Task<IList<UserLoginInfo>> GetLoginsAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose associated logins to retrieve. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IList < UserLoginInfo >> The for the asynchronous operation, containing a list of for the specified user , if any. | Improve this Doc View Source GetLoginsAsync(DataConnection, TUser, CancellationToken) Retrieves the associated logins for the specified . Declaration protected virtual async Task<IList<UserLoginInfo>> GetLoginsAsync(DataConnection db, TUser user, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user CancellationToken cancellationToken Returns Type Description Task < IList < UserLoginInfo >> The for the asynchronous operation, containing a list of for the specified user , if any. | Improve this Doc View Source GetNormalizedEmailAsync(TUser, CancellationToken) Returns the normalized email for the specified user . Declaration public virtual Task<string> GetNormalizedEmailAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose email address to retrieve. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > The task object containing the results of the asynchronous lookup operation, the normalized email address if any associated with the specified user. | Improve this Doc View Source GetNormalizedUserNameAsync(TUser, CancellationToken) Gets the normalized user name for the specified user . Declaration public virtual Task<string> GetNormalizedUserNameAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose normalized name should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > The that represents the asynchronous operation, containing the normalized user name for the specified user . | Improve this Doc View Source GetPasswordHashAsync(TUser, CancellationToken) Gets the password hash for a user. Declaration public virtual Task<string> GetPasswordHashAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to retrieve the password hash for. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > A that contains the password hash for the user. | Improve this Doc View Source GetPhoneNumberAsync(TUser, CancellationToken) Gets the telephone number, if any, for the specified user . Declaration public virtual Task<string> GetPhoneNumberAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose telephone number should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > The that represents the asynchronous operation, containing the user's telephone number, if any. | Improve this Doc View Source GetPhoneNumberConfirmedAsync(TUser, CancellationToken) Gets a flag indicating whether the specified user 's telephone number has been confirmed. Declaration public virtual Task<bool> GetPhoneNumberConfirmedAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to return a flag for, indicating whether their telephone number is confirmed. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.Boolean > The that represents the asynchronous operation, returning true if the specified user has a confirmed telephone number otherwise false. | Improve this Doc View Source GetRolesAsync(TUser, CancellationToken) Retrieves the roles the specified user is a member of. Declaration public async Task<IList<string>> GetRolesAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose roles should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IList < System.String >> A that contains the roles the user is a member of. | Improve this Doc View Source GetRolesAsync(DataConnection, TUser, CancellationToken) Retrieves the roles the specified user is a member of. Declaration protected virtual async Task<IList<string>> GetRolesAsync(DataConnection db, TUser user, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user CancellationToken cancellationToken Returns Type Description Task < IList < System.String >> A that contains the roles the user is a member of. | Improve this Doc View Source GetSecurityStampAsync(TUser, CancellationToken) Get the security stamp for the specified user . Declaration public virtual Task<string> GetSecurityStampAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose security stamp should be set. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > The that represents the asynchronous operation, containing the security stamp for the specified user . | Improve this Doc View Source GetTokenAsync(TUser, String, String, CancellationToken) Returns the token value. Declaration public async Task<string> GetTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken) Parameters Type Name Description TUser user The user. System.String loginProvider The authentication provider for the token. System.String name The name of the token. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > The that represents the asynchronous operation. | Improve this Doc View Source GetTokenAsync(DataConnection, TUser, String, String, CancellationToken) Returns the token value. Declaration protected virtual async Task<string> GetTokenAsync(DataConnection db, TUser user, string loginProvider, string name, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user System.String loginProvider System.String name CancellationToken cancellationToken Returns Type Description Task < System.String > The that represents the asynchronous operation. | Improve this Doc View Source GetTwoFactorEnabledAsync(TUser, CancellationToken) Returns a flag indicating whether the specified user has two factor authentication enabled or not, as an asynchronous operation. Declaration public virtual Task<bool> GetTwoFactorEnabledAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose two factor authentication enabled status should be set. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.Boolean > The that represents the asynchronous operation, containing a flag indicating whether the specified user has two factor authentication enabled or not. | Improve this Doc View Source GetUserIdAsync(TUser, CancellationToken) Gets the user identifier for the specified user . Declaration public virtual Task<string> GetUserIdAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose identifier should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > The that represents the asynchronous operation, containing the identifier for the specified user . | Improve this Doc View Source GetUserNameAsync(TUser, CancellationToken) Gets the user name for the specified user . Declaration public virtual Task<string> GetUserNameAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose name should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.String > The that represents the asynchronous operation, containing the name for the specified user . | Improve this Doc View Source GetUsersForClaimAsync(Claim, CancellationToken) Retrieves all users with the specified claim. Declaration public async Task<IList<TUser>> GetUsersForClaimAsync(Claim claim, CancellationToken cancellationToken = null) Parameters Type Name Description Claim claim The claim whose users should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IList <TUser>> The contains a list of users, if any, that contain the specified claim. | Improve this Doc View Source GetUsersInRoleAsync(DataConnection, String, CancellationToken) Retrieves all users in the specified role. Declaration protected virtual async Task<IList<TUser>> GetUsersInRoleAsync(DataConnection db, string normalizedRoleName, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db System.String normalizedRoleName CancellationToken cancellationToken Returns Type Description Task < IList <TUser>> The contains a list of users, if any, that are in the specified role. | Improve this Doc View Source GetUsersInRoleAsync(String, CancellationToken) Retrieves all users in the specified role. Declaration public async Task<IList<TUser>> GetUsersInRoleAsync(string normalizedRoleName, CancellationToken cancellationToken = null) Parameters Type Name Description System.String normalizedRoleName The role whose users should be retrieved. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IList <TUser>> The contains a list of users, if any, that are in the specified role. | Improve this Doc View Source HasPasswordAsync(TUser, CancellationToken) Returns a flag indicating if the specified user has a password. Declaration public virtual Task<bool> HasPasswordAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to retrieve the password hash for. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.Boolean > A containing a flag indicating if the specified user has a password. If the user has a password the returned value with be true, otherwise it will be false. | Improve this Doc View Source IncrementAccessFailedCountAsync(TUser, CancellationToken) Records that a failed access has occurred, incrementing the failed access count. Declaration public virtual Task<int> IncrementAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose cancellation count should be incremented. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.Int32 > The that represents the asynchronous operation, containing the incremented failed access count. | Improve this Doc View Source IsInRoleAsync(TUser, String, CancellationToken) Returns a flag indicating if the specified user is a member of the give normalizedRoleName . Declaration public async Task<bool> IsInRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose role membership should be checked. System.String normalizedRoleName The role to check membership of CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < System.Boolean > A containing a flag indicating if the specified user is a member of the given group. If the user is a member of the group the returned value with be true, otherwise it will be false. | Improve this Doc View Source IsInRoleAsync(DataConnection, TUser, String, CancellationToken) Returns a flag indicating if the specified user is a member of the give normalizedRoleName . Declaration protected virtual async Task<bool> IsInRoleAsync(DataConnection db, TUser user, string normalizedRoleName, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user System.String normalizedRoleName CancellationToken cancellationToken Returns Type Description Task < System.Boolean > A containing a flag indicating if the specified user is a member of the given group. If the user is a member of the group the returned value with be true, otherwise it will be false. | Improve this Doc View Source RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken) Removes the claims given from the specified user . Declaration public async Task RemoveClaimsAsync(TUser user, IEnumerable<Claim> claims, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to remove the claims from. IEnumerable < Claim > claims The claim to remove. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source RemoveClaimsAsync(DataConnection, TUser, IEnumerable<Claim>, CancellationToken) Removes the claims given from the specified user . Declaration protected virtual async Task RemoveClaimsAsync(DataConnection db, TUser user, IEnumerable<Claim> claims, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user IEnumerable < Claim > claims CancellationToken cancellationToken Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source RemoveFromRoleAsync(TUser, String, CancellationToken) Removes the given normalizedRoleName from the specified user . Declaration public async Task RemoveFromRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to remove the role from. System.String normalizedRoleName The role to remove. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source RemoveFromRoleAsync(DataConnection, TUser, String, CancellationToken) Removes the given normalizedRoleName from the specified user . Declaration protected virtual async Task RemoveFromRoleAsync(DataConnection db, TUser user, string normalizedRoleName, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user System.String normalizedRoleName CancellationToken cancellationToken Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source RemoveLoginAsync(TUser, String, String, CancellationToken) Removes the loginProvider given from the specified user . Declaration public async Task RemoveLoginAsync(TUser user, string loginProvider, string providerKey, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to remove the login from. System.String loginProvider The login to remove from the user. System.String providerKey The key provided by the loginProvider to identify a user. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source RemoveLoginAsync(DataConnection, TUser, String, String, CancellationToken) Removes the loginProvider given from the specified user . Declaration protected virtual async Task RemoveLoginAsync(DataConnection db, TUser user, string loginProvider, string providerKey, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user System.String loginProvider System.String providerKey CancellationToken cancellationToken Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source RemoveTokenAsync(TUser, String, String, CancellationToken) Deletes a token for a user. Declaration public async Task RemoveTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken) Parameters Type Name Description TUser user The user. System.String loginProvider The authentication provider for the token. System.String name The name of the token. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source RemoveTokenAsync(DataConnection, TUser, String, String, CancellationToken) Deletes a token for a user. Declaration protected virtual async Task RemoveTokenAsync(DataConnection db, TUser user, string loginProvider, string name, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user System.String loginProvider System.String name CancellationToken cancellationToken Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken) Replaces the claim on the specified user , with the newClaim . Declaration public async Task ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The role to replace the claim on. Claim claim The claim replace. Claim newClaim The new claim replacing the claim . CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken, DataConnection) Replaces the claim on the specified user , with the newClaim . Declaration protected virtual async Task ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken, DataConnection db) Parameters Type Name Description TUser user Claim claim Claim newClaim CancellationToken cancellationToken DataConnection db Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source ResetAccessFailedCountAsync(TUser, CancellationToken) Resets a user's failed access count. Declaration public virtual Task ResetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose failed access count should be reset. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. Remarks This is typically called after the account is successfully accessed. | Improve this Doc View Source SetAuthenticatorKeyAsync(TUser, String, CancellationToken) Sets the authenticator key for the specified user . Declaration public virtual Task SetAuthenticatorKeyAsync(TUser user, string key, CancellationToken cancellationToken) Parameters Type Name Description TUser user The user whose authenticator key should be set. System.String key The authenticator key to set. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetEmailAsync(TUser, String, CancellationToken) Sets the email address for a user . Declaration public virtual Task SetEmailAsync(TUser user, string email, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose email should be set. System.String email The email to set. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The task object representing the asynchronous operation. | Improve this Doc View Source SetEmailConfirmedAsync(TUser, Boolean, CancellationToken) Sets the flag indicating whether the specified user 's email address has been confirmed or not. Declaration public virtual Task SetEmailConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose email confirmation status should be set. System.Boolean confirmed A flag indicating if the email address has been confirmed, true if the address is confirmed otherwise false. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The task object representing the asynchronous operation. | Improve this Doc View Source SetLockoutEnabledAsync(TUser, Boolean, CancellationToken) Set the flag indicating if the specified user can be locked out.. Declaration public virtual Task SetLockoutEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose ability to be locked out should be set. System.Boolean enabled A flag indicating if lock out can be enabled for the specified user . CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken) Locks out a user until the specified end date has passed. Setting a end date in the past immediately unlocks a user. Declaration public virtual Task SetLockoutEndDateAsync(TUser user, DateTimeOffset? lockoutEnd, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose lockout date should be set. System.Nullable < DateTimeOffset > lockoutEnd The after which the user 's lockout should end. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetNormalizedEmailAsync(TUser, String, CancellationToken) Sets the normalized email for the specified user . Declaration public virtual Task SetNormalizedEmailAsync(TUser user, string normalizedEmail, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose email address to set. System.String normalizedEmail The normalized email to set for the specified user . CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The task object representing the asynchronous operation. | Improve this Doc View Source SetNormalizedUserNameAsync(TUser, String, CancellationToken) Sets the given normalized name for the specified user . Declaration public virtual Task SetNormalizedUserNameAsync(TUser user, string normalizedName, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose name should be set. System.String normalizedName The normalized name to set. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetPasswordHashAsync(TUser, String, CancellationToken) Sets the password hash for a user. Declaration public virtual Task SetPasswordHashAsync(TUser user, string passwordHash, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to set the password hash for. System.String passwordHash The password hash to set. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetPhoneNumberAsync(TUser, String, CancellationToken) Sets the telephone number for the specified user . Declaration public virtual Task SetPhoneNumberAsync(TUser user, string phoneNumber, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose telephone number should be set. System.String phoneNumber The telephone number to set. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken) Sets a flag indicating if the specified user 's phone number has been confirmed.. Declaration public virtual Task SetPhoneNumberConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose telephone number confirmation status should be set. System.Boolean confirmed A flag indicating whether the user's telephone number has been confirmed. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetSecurityStampAsync(TUser, String, CancellationToken) Sets the provided security stamp for the specified user . Declaration public virtual Task SetSecurityStampAsync(TUser user, string stamp, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose security stamp should be set. System.String stamp The security stamp to set. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetTokenAsync(TUser, String, String, String, CancellationToken) Sets the token value for a particular user. Declaration public async Task SetTokenAsync(TUser user, string loginProvider, string name, string value, CancellationToken cancellationToken) Parameters Type Name Description TUser user The user. System.String loginProvider The authentication provider for the token. System.String name The name of the token. System.String value The value of the token. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetTokenAsync(DataConnection, TUser, String, String, String, CancellationToken) Sets the token value for a particular user. Declaration protected virtual async Task SetTokenAsync(DataConnection db, TUser user, string loginProvider, string name, string value, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user System.String loginProvider System.String name System.String value CancellationToken cancellationToken Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken) Sets a flag indicating whether the specified user has two factor authentication enabled or not, as an asynchronous operation. Declaration public virtual Task SetTwoFactorEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose two factor authentication enabled status should be set. System.Boolean enabled A flag indicating whether the specified user has two factor authentication enabled. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source SetUserNameAsync(TUser, String, CancellationToken) Sets the given userName for the specified user . Declaration public virtual Task SetUserNameAsync(TUser user, string userName, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user whose name should be set. System.String userName The user name to set. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task The that represents the asynchronous operation. | Improve this Doc View Source ThrowIfDisposed() Throws if this class has been disposed. Declaration protected void ThrowIfDisposed() | Improve this Doc View Source UpdateAsync(TUser, CancellationToken) Updates the specified user in the user store. Declaration public async Task<IdentityResult> UpdateAsync(TUser user, CancellationToken cancellationToken = null) Parameters Type Name Description TUser user The user to update. CancellationToken cancellationToken The used to propagate notifications that the operation should be canceled. Returns Type Description Task < IdentityResult > The that represents the asynchronous operation, containing the of the update operation. | Improve this Doc View Source UpdateAsync(DataConnection, TUser, CancellationToken) Updates the specified user in the user store. Declaration protected virtual async Task<IdentityResult> UpdateAsync(DataConnection db, TUser user, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db TUser user CancellationToken cancellationToken Returns Type Description Task < IdentityResult > The that represents the asynchronous operation, containing the of the update operation. | Improve this Doc View Source UsersForClaimAsync(DataConnection, Claim, CancellationToken) Retrieves all users with the specified claim. Declaration protected virtual async Task<IList<TUser>> UsersForClaimAsync(DataConnection db, Claim claim, CancellationToken cancellationToken) Parameters Type Name Description DataConnection db Claim claim CancellationToken cancellationToken Returns Type Description Task < IList <TUser>> The contains a list of users, if any, that contain the specified claim. Implements IUserRoleStore<> IUserClaimStore<> IUserPasswordStore<> IUserSecurityStampStore<> IUserEmailStore<> IUserLockoutStore<> IUserPhoneNumberStore<> IQueryableUserStore<> IUserTwoFactorStore<> IUserAuthenticationTokenStore<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.IEntityServices.html": {
    "href": "api/LinqToDB.IEntityServices.html",
    "title": "Interface IEntityServices | Linq To DB (aka linq2db)",
    "keywords": "Interface IEntityServices Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IEntityServices Properties | Improve this Doc View Source OnEntityCreated Occurs when a new entity is created during query materialization. Not triggered for explicitly constructed objects. In code below event could be triggered only for first query: // r created by linq2db from r in db.table select r; // Entity constructor specified explicitly by user (projection) from r in db.table select new Entity() { field = r.field }; . Declaration Action<EntityCreatedEventArgs>? OnEntityCreated { get; set; } Property Value Type Description System.Nullable < Action < EntityCreatedEventArgs >> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.IExtensionsAdapter.html": {
    "href": "api/LinqToDB.IExtensionsAdapter.html",
    "title": "Interface IExtensionsAdapter | Linq To DB (aka linq2db)",
    "keywords": "Interface IExtensionsAdapter Interface to override default implementation of LINQ To DB async operations. Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IExtensionsAdapter Methods | Improve this Doc View Source AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<bool> AllAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<bool> AnyAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<bool> AnyAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source AsAsyncEnumerable<TSource>(IQueryable<TSource>) Declaration IAsyncEnumerable<TSource> AsAsyncEnumerable<TSource>(IQueryable<TSource> source) Parameters Type Name Description IQueryable <TSource> source Returns Type Description IAsyncEnumerable <TSource> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync(IQueryable<Decimal>, CancellationToken) Declaration Task<decimal> AverageAsync(IQueryable<decimal> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Decimal > source CancellationToken token Returns Type Description Task < System.Decimal > | Improve this Doc View Source AverageAsync(IQueryable<Double>, CancellationToken) Declaration Task<double> AverageAsync(IQueryable<double> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Double > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsync(IQueryable<Int32>, CancellationToken) Declaration Task<double> AverageAsync(IQueryable<int> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Int32 > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsync(IQueryable<Int64>, CancellationToken) Declaration Task<double> AverageAsync(IQueryable<long> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Int64 > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration Task<decimal?> AverageAsync(IQueryable<decimal?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Decimal >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration Task<double?> AverageAsync(IQueryable<double?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Double >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration Task<double?> AverageAsync(IQueryable<int?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Int32 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration Task<double?> AverageAsync(IQueryable<long?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Int64 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source AverageAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration Task<float?> AverageAsync(IQueryable<float?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Single >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> | Improve this Doc View Source AverageAsync(IQueryable<Single>, CancellationToken) Declaration Task<float> AverageAsync(IQueryable<float> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Single > source CancellationToken token Returns Type Description Task < System.Single > | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration Task<decimal> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Decimal >> selector CancellationToken token Returns Type Description Task < System.Decimal > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Double >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int32 >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int64 >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration Task<decimal?> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Decimal >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration Task<double?> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Double >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration Task<double?> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int32 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration Task<double?> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int64 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration Task<float?> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Single >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> Type Parameters Name Description TSource | Improve this Doc View Source AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration Task<float> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Single >> selector CancellationToken token Returns Type Description Task < System.Single > Type Parameters Name Description TSource | Improve this Doc View Source ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken) Declaration Task<bool> ContainsAsync<TSource>(IQueryable<TSource> source, TSource item, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source TSource item CancellationToken token Returns Type Description Task < System.Boolean > Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<int> CountAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<int> CountAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> FirstAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<TSource> FirstAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> FirstOrDefaultAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<TSource> FirstOrDefaultAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source ForEachAsync<TSource>(IQueryable<TSource>, Action<TSource>, CancellationToken) Declaration Task ForEachAsync<TSource>(IQueryable<TSource> source, Action<TSource> action, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Action <TSource> action CancellationToken token Returns Type Description Task Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<long> LongCountAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<long> LongCountAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> MaxAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration Task<TResult> MaxAsync<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source MinAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> MinAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken) Declaration Task<TResult> MinAsync<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, TResult>> selector CancellationToken token Returns Type Description Task <TResult> Type Parameters Name Description TSource TResult | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> SingleAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<TSource> SingleAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource> SingleOrDefaultAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Declaration Task<TSource> SingleOrDefaultAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Boolean >> predicate CancellationToken token Returns Type Description Task <TSource> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync(IQueryable<Decimal>, CancellationToken) Declaration Task<decimal> SumAsync(IQueryable<decimal> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Decimal > source CancellationToken token Returns Type Description Task < System.Decimal > | Improve this Doc View Source SumAsync(IQueryable<Double>, CancellationToken) Declaration Task<double> SumAsync(IQueryable<double> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Double > source CancellationToken token Returns Type Description Task < System.Double > | Improve this Doc View Source SumAsync(IQueryable<Int32>, CancellationToken) Declaration Task<int> SumAsync(IQueryable<int> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Int32 > source CancellationToken token Returns Type Description Task < System.Int32 > | Improve this Doc View Source SumAsync(IQueryable<Int64>, CancellationToken) Declaration Task<long> SumAsync(IQueryable<long> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Int64 > source CancellationToken token Returns Type Description Task < System.Int64 > | Improve this Doc View Source SumAsync(IQueryable<Nullable<Decimal>>, CancellationToken) Declaration Task<decimal?> SumAsync(IQueryable<decimal?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Decimal >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Double>>, CancellationToken) Declaration Task<double?> SumAsync(IQueryable<double?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Double >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int32>>, CancellationToken) Declaration Task<int?> SumAsync(IQueryable<int?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Int32 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Int32 >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Int64>>, CancellationToken) Declaration Task<long?> SumAsync(IQueryable<long?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Int64 >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Int64 >> | Improve this Doc View Source SumAsync(IQueryable<Nullable<Single>>, CancellationToken) Declaration Task<float?> SumAsync(IQueryable<float?> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Nullable < System.Single >> source CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> | Improve this Doc View Source SumAsync(IQueryable<Single>, CancellationToken) Declaration Task<float> SumAsync(IQueryable<float> source, CancellationToken token) Parameters Type Name Description IQueryable < System.Single > source CancellationToken token Returns Type Description Task < System.Single > | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken) Declaration Task<decimal> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Decimal >> selector CancellationToken token Returns Type Description Task < System.Decimal > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken) Declaration Task<double> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Double >> selector CancellationToken token Returns Type Description Task < System.Double > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken) Declaration Task<int> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int32 >> selector CancellationToken token Returns Type Description Task < System.Int32 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken) Declaration Task<long> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Int64 >> selector CancellationToken token Returns Type Description Task < System.Int64 > Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken) Declaration Task<decimal?> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Decimal >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Decimal >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken) Declaration Task<double?> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Double >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Double >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken) Declaration Task<int?> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int32 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Int32 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken) Declaration Task<long?> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Int64 >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Int64 >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken) Declaration Task<float?> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float?>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Nullable < System.Single >>> selector CancellationToken token Returns Type Description Task < System.Nullable < System.Single >> Type Parameters Name Description TSource | Improve this Doc View Source SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken) Declaration Task<float> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Expression < Func <TSource, System.Single >> selector CancellationToken token Returns Type Description Task < System.Single > Type Parameters Name Description TSource | Improve this Doc View Source ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<TSource[]> ToArrayAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task <TSource[]> Type Parameters Name Description TSource | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) Declaration Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector CancellationToken token Returns Type Description Task < Dictionary <TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) Declaration Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector IEqualityComparer <TKey> comparer CancellationToken token Returns Type Description Task < Dictionary <TKey, TSource>> Type Parameters Name Description TSource TKey | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) Declaration Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector Func <TSource, TElement> elementSelector CancellationToken token Returns Type Description Task < Dictionary <TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) Declaration Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source Func <TSource, TKey> keySelector Func <TSource, TElement> elementSelector IEqualityComparer <TKey> comparer CancellationToken token Returns Type Description Task < Dictionary <TKey, TElement>> Type Parameters Name Description TSource TKey TElement | Improve this Doc View Source ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) Declaration Task<List<TSource>> ToListAsync<TSource>(IQueryable<TSource> source, CancellationToken token) Parameters Type Name Description IQueryable <TSource> source CancellationToken token Returns Type Description Task < List <TSource>> Type Parameters Name Description TSource Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ILoadWithQueryable-2.html": {
    "href": "api/LinqToDB.ILoadWithQueryable-2.html",
    "title": "Interface ILoadWithQueryable<TEntity, TProperty> | Linq To DB (aka linq2db)",
    "keywords": "Interface ILoadWithQueryable<TEntity, TProperty> Provides support for queryable LoadWith/ThenLoad chaining operators. Inherited Members IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken) Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ILoadWithQueryable<out TEntity, out TProperty> : IAsyncEnumerable<TEntity> Type Parameters Name Description TEntity The entity type. TProperty The property type. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.InsertColumnFilter-1.html": {
    "href": "api/LinqToDB.InsertColumnFilter-1.html",
    "title": "Delegate InsertColumnFilter<T> | Linq To DB (aka linq2db)",
    "keywords": "Delegate InsertColumnFilter<T> Defines signature for column filter for insert operations. Namespace : LinqToDB Assembly : linq2db.dll Syntax public delegate bool InsertColumnFilter<T>(T entity, ColumnDescriptor column); Parameters Type Name Description T entity Entity instance. ColumnDescriptor column Descriptor of column. Returns Type Description System.Boolean true , if column should be included in operation and false otherwise. Type Parameters Name Description T Entity type. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.InsertOrUpdateColumnFilter-1.html": {
    "href": "api/LinqToDB.InsertOrUpdateColumnFilter-1.html",
    "title": "Delegate InsertOrUpdateColumnFilter<T> | Linq To DB (aka linq2db)",
    "keywords": "Delegate InsertOrUpdateColumnFilter<T> Defines signature for column filter for insert or update/replace operations. Namespace : LinqToDB Assembly : linq2db.dll Syntax public delegate bool InsertOrUpdateColumnFilter<T>(T entity, ColumnDescriptor column, bool isInsert); Parameters Type Name Description T entity Entity instance. ColumnDescriptor column Descriptor of column. System.Boolean isInsert If true , filter applied to insert operation, otherwise to update/replace. Returns Type Description System.Boolean true , if column should be included in operation and false otherwise. Type Parameters Name Description T Entity type. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ITable-1.html": {
    "href": "api/LinqToDB.ITable-1.html",
    "title": "Interface ITable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface ITable<T> Table-like queryable source, e.g. table, view or table-valued function. Inherited Members IExpressionQuery<T>.Expression IQueryProviderAsync.ExecuteAsyncEnumerable<TResult>(Expression, CancellationToken) IQueryProviderAsync.ExecuteAsync<TResult>(Expression, CancellationToken) IExpressionQuery.SqlText IExpressionQuery.DataContext Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ITable<out T> : IExpressionQuery<T>, IQueryProviderAsync, IExpressionQuery Type Parameters Name Description T Record mapping type. Properties | Improve this Doc View Source DatabaseName Declaration string? DatabaseName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SchemaName Declaration string? SchemaName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ServerName Declaration string? ServerName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TableName Declaration string TableName { get; } Property Value Type Description System.String | Improve this Doc View Source TableOptions Declaration TableOptions TableOptions { get; } Property Value Type Description TableOptions Methods | Improve this Doc View Source GetTableName() Declaration string GetTableName() Returns Type Description System.String Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(ITable<T>, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(ITable<T>) MappingSchemaExtensions.GetKeyEqualityComparer<T>(ITable<T>) Map.DeepCopy<T>(T) DataExtensions.DropTable<T>(ITable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Boolean>, Nullable<String>, TableOptions) DataExtensions.DropTableAsync<T>(ITable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Boolean>, Nullable<String>, TableOptions, CancellationToken) LinqExtensions.TableName<T>(ITable<T>, String) LinqExtensions.DatabaseName<T>(ITable<T>, Nullable<String>) LinqExtensions.ServerName<T>(ITable<T>, Nullable<String>) LinqExtensions.SchemaName<T>(ITable<T>, Nullable<String>) LinqExtensions.WithTableExpression<T>(ITable<T>, String) LinqExtensions.With<T>(ITable<T>, String) LinqExtensions.Insert<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithIdentity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithInt32Identity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithInt64Identity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithDecimalIdentity<T>(ITable<T>, Expression<Func<T>>) LinqExtensions.InsertWithIdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithInt32IdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithInt64IdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.InsertWithDecimalIdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) LinqExtensions.Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Nullable<Expression<Func<T, T>>>) LinqExtensions.InsertOrUpdateAsync<T>(ITable<T>, Expression<Func<T>>, Nullable<Expression<Func<T, T>>>, CancellationToken) LinqExtensions.InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Nullable<Expression<Func<T, T>>>, Expression<Func<T>>) LinqExtensions.InsertOrUpdateAsync<T>(ITable<T>, Expression<Func<T>>, Nullable<Expression<Func<T, T>>>, Expression<Func<T>>, CancellationToken) LinqExtensions.Drop<T>(ITable<T>, Boolean) LinqExtensions.DropAsync<T>(ITable<T>, Boolean, CancellationToken) LinqExtensions.Truncate<T>(ITable<T>, Boolean) LinqExtensions.TruncateAsync<T>(ITable<T>, Boolean, CancellationToken) LinqExtensions.TagQuery<T>(ITable<T>, String) LinqExtensions.InsertWithOutput<TTarget>(ITable<TTarget>, Expression<Func<TTarget>>) LinqExtensions.InsertWithOutputAsync<TTarget>(ITable<TTarget>, Expression<Func<TTarget>>, CancellationToken) LinqExtensions.InsertWithOutput<TTarget>(ITable<TTarget>, TTarget) LinqExtensions.InsertWithOutputAsync<TTarget>(ITable<TTarget>, TTarget, CancellationToken) LinqExtensions.InsertWithOutput<TTarget, TOutput>(ITable<TTarget>, Expression<Func<TTarget>>, Expression<Func<TTarget, TOutput>>) LinqExtensions.InsertWithOutputAsync<TTarget, TOutput>(ITable<TTarget>, Expression<Func<TTarget>>, Expression<Func<TTarget, TOutput>>, CancellationToken) LinqExtensions.InsertWithOutputInto<TTarget>(ITable<TTarget>, Expression<Func<TTarget>>, ITable<TTarget>) LinqExtensions.InsertWithOutputIntoAsync<TTarget>(ITable<TTarget>, Expression<Func<TTarget>>, ITable<TTarget>, CancellationToken) LinqExtensions.InsertWithOutputInto<TTarget, TOutput>(ITable<TTarget>, Expression<Func<TTarget>>, ITable<TOutput>, Expression<Func<TTarget, TOutput>>) LinqExtensions.InsertWithOutputIntoAsync<TTarget, TOutput>(ITable<TTarget>, Expression<Func<TTarget>>, ITable<TOutput>, Expression<Func<TTarget, TOutput>>, CancellationToken) LinqExtensions.LoadWithAsTable<T>(ITable<T>, Expression<Func<T, Nullable<Object>>>) LinqExtensions.Merge<TTarget>(ITable<TTarget>) LinqExtensions.Merge<TTarget>(ITable<TTarget>, String) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) TableExtensions.IsTemporary<T>(ITable<T>, Boolean) TableExtensions.IsTemporary<T>(ITable<T>) TableExtensions.TableOptions<T>(ITable<T>, TableOptions) DataConnectionExtensions.BulkCopy<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(ITable<T>, Int32, IEnumerable<T>) DataConnectionExtensions.BulkCopy<T>(ITable<T>, IEnumerable<T>) DataConnectionExtensions.BulkCopyAsync<T>(ITable<T>, BulkCopyOptions, IEnumerable<T>, CancellationToken) DataConnectionExtensions.BulkCopyAsync<T>(ITable<T>, Int32, IEnumerable<T>, CancellationToken) DataConnectionExtensions.BulkCopyAsync<T>(ITable<T>, IEnumerable<T>, CancellationToken) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ITableMutable-1.html": {
    "href": "api/LinqToDB.ITableMutable-1.html",
    "title": "Interface ITableMutable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface ITableMutable<T> This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ITableMutable<out T> Type Parameters Name Description T Methods | Improve this Doc View Source ChangeDatabaseName(Nullable<String>) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration ITable<T> ChangeDatabaseName(string? databaseName) Parameters Type Name Description System.Nullable < System.String > databaseName Returns Type Description ITable <T> | Improve this Doc View Source ChangeSchemaName(Nullable<String>) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration ITable<T> ChangeSchemaName(string? schemaName) Parameters Type Name Description System.Nullable < System.String > schemaName Returns Type Description ITable <T> | Improve this Doc View Source ChangeServerName(Nullable<String>) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration ITable<T> ChangeServerName(string? serverName) Parameters Type Name Description System.Nullable < System.String > serverName Returns Type Description ITable <T> | Improve this Doc View Source ChangeTableName(String) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration ITable<T> ChangeTableName(string tableName) Parameters Type Name Description System.String tableName Returns Type Description ITable <T> | Improve this Doc View Source ChangeTableOptions(TableOptions) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration ITable<T> ChangeTableOptions(TableOptions options) Parameters Type Name Description TableOptions options Returns Type Description ITable <T> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.KeepConnectionAliveScope.html": {
    "href": "api/LinqToDB.KeepConnectionAliveScope.html",
    "title": "Class KeepConnectionAliveScope | Linq To DB (aka linq2db)",
    "keywords": "Class KeepConnectionAliveScope Explicit DataContext connection reuse scope. See KeepConnectionAlive for more details. Inheritance System.Object KeepConnectionAliveScope Namespace : LinqToDB Assembly : linq2db.dll Syntax public class KeepConnectionAliveScope : IDisposable Constructors | Improve this Doc View Source KeepConnectionAliveScope(DataContext) Creates connection reuse scope for DataContext . Declaration public KeepConnectionAliveScope(DataContext dataContext) Parameters Type Name Description DataContext dataContext Data context. Methods | Improve this Doc View Source Dispose() Restores old connection reuse option. Declaration public void Dispose() Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.AccessorMember.html": {
    "href": "api/LinqToDB.Linq.AccessorMember.html",
    "title": "Class AccessorMember | Linq To DB (aka linq2db)",
    "keywords": "Class AccessorMember Inheritance System.Object AccessorMember Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public class AccessorMember : object Constructors | Improve this Doc View Source AccessorMember(Expression) Declaration public AccessorMember(Expression expression) Parameters Type Name Description Expression expression | Improve this Doc View Source AccessorMember(MemberInfo) Declaration public AccessorMember(MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo | Improve this Doc View Source AccessorMember(MemberInfo, Nullable<ReadOnlyCollection<Expression>>) Declaration public AccessorMember(MemberInfo memberInfo, ReadOnlyCollection<Expression>? arguments) Parameters Type Name Description MemberInfo memberInfo System.Nullable < ReadOnlyCollection < Expression >> arguments Properties | Improve this Doc View Source Arguments Declaration public ReadOnlyCollection<Expression>? Arguments { get; } Property Value Type Description System.Nullable < ReadOnlyCollection < Expression >> | Improve this Doc View Source MemberInfo Declaration public MemberInfo MemberInfo { get; } Property Value Type Description MemberInfo Methods | Improve this Doc View Source Equals(AccessorMember) Declaration protected bool Equals(AccessorMember other) Parameters Type Name Description AccessorMember other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.ConvertFlags.html": {
    "href": "api/LinqToDB.Linq.Builder.ConvertFlags.html",
    "title": "Enum ConvertFlags | Linq To DB (aka linq2db)",
    "keywords": "Enum ConvertFlags Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public enum ConvertFlags : int Fields Name Description All Field Key Extension Methods Map.DeepCopy<ConvertFlags>() Sql.IsDistinctFrom<ConvertFlags>(ConvertFlags) Sql.IsDistinctFrom<ConvertFlags>(Nullable<ConvertFlags>) Sql.IsNotDistinctFrom<ConvertFlags>(ConvertFlags) Sql.IsNotDistinctFrom<ConvertFlags>(Nullable<ConvertFlags>) SqlExtensions.In<ConvertFlags>(IEnumerable<ConvertFlags>) SqlExtensions.In<ConvertFlags>(IQueryable<ConvertFlags>) SqlExtensions.In<ConvertFlags>(ConvertFlags[]) SqlExtensions.In<ConvertFlags>(ConvertFlags, ConvertFlags) SqlExtensions.In<ConvertFlags>(ConvertFlags, ConvertFlags, ConvertFlags) SqlExtensions.NotIn<ConvertFlags>(IEnumerable<ConvertFlags>) SqlExtensions.NotIn<ConvertFlags>(IQueryable<ConvertFlags>) SqlExtensions.NotIn<ConvertFlags>(ConvertFlags[]) SqlExtensions.NotIn<ConvertFlags>(ConvertFlags, ConvertFlags) SqlExtensions.NotIn<ConvertFlags>(ConvertFlags, ConvertFlags, ConvertFlags)"
  },
  "api/LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.html": {
    "href": "api/LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.html",
    "title": "Class ExpressionTreeOptimizationContext | Linq To DB (aka linq2db)",
    "keywords": "Class ExpressionTreeOptimizationContext Inheritance System.Object ExpressionTreeOptimizationContext Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class ExpressionTreeOptimizationContext : object Constructors | Improve this Doc View Source ExpressionTreeOptimizationContext(IDataContext) Declaration public ExpressionTreeOptimizationContext(IDataContext dataContext) Parameters Type Name Description IDataContext dataContext Properties | Improve this Doc View Source DataContext Declaration public IDataContext DataContext { get; } Property Value Type Description IDataContext | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Methods | Improve this Doc View Source AggregateExpression(Expression) Declaration public static Expression AggregateExpression(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression | Improve this Doc View Source CanBeCompiled(Expression) Declaration public bool CanBeCompiled(Expression expr) Parameters Type Name Description Expression expr Returns Type Description System.Boolean | Improve this Doc View Source CanBeConstant(Expression) Declaration public bool CanBeConstant(Expression expr) Parameters Type Name Description Expression expr Returns Type Description System.Boolean | Improve this Doc View Source ClearVisitedCache() Declaration public void ClearVisitedCache() | Improve this Doc View Source ConvertMethodExpression(Type, MemberInfo, out Nullable<String>) Declaration public LambdaExpression? ConvertMethodExpression(Type type, MemberInfo mi, out string? alias) Parameters Type Name Description Type type MemberInfo mi System.Nullable < System.String > alias Returns Type Description System.Nullable < LambdaExpression > | Improve this Doc View Source ExpandExpression(Expression) Declaration public Expression ExpandExpression(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression | Improve this Doc View Source ExpandExpressionTransformer(Expression) Declaration public Expression ExpandExpressionTransformer(Expression expr) Parameters Type Name Description Expression expr Returns Type Description Expression | Improve this Doc View Source ExpandQueryableMethods(Expression) Declaration public Expression ExpandQueryableMethods(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression | Improve this Doc View Source ExposeExpression(Expression) Declaration public Expression ExposeExpression(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression | Improve this Doc View Source IsDependsOnParameters() Declaration public bool IsDependsOnParameters() Returns Type Description System.Boolean | Improve this Doc View Source IsServerSideOnly(Expression) Declaration public bool IsServerSideOnly(Expression expr) Parameters Type Name Description Expression expr Returns Type Description System.Boolean | Improve this Doc View Source PreferServerSide(Expression, Boolean) Declaration public bool PreferServerSide(Expression expr, bool enforceServerSide) Parameters Type Name Description Expression expr System.Boolean enforceServerSide Returns Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.FKDH-2.html": {
    "href": "api/LinqToDB.Linq.Builder.FKDH-2.html",
    "title": "Class FKDH<TKey, TData> | Linq To DB (aka linq2db)",
    "keywords": "Class FKDH<TKey, TData> Inheritance System.Object FKDH<TKey, TData> Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class FKDH<TKey, TData> : object Type Parameters Name Description TKey TData Constructors | Improve this Doc View Source FKDH() Declaration public FKDH() | Improve this Doc View Source FKDH(TKey, TData) Declaration public FKDH(TKey key, TData data) Parameters Type Name Description TKey key TData data Properties | Improve this Doc View Source Data Declaration public TData Data { get; set; } Property Value Type Description TData | Improve this Doc View Source Key Declaration public TKey Key { get; set; } Property Value Type Description TKey Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.html": {
    "href": "api/LinqToDB.Linq.Builder.html",
    "title": "Namespace LinqToDB.Linq.Builder | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Linq.Builder Classes ExpressionTreeOptimizationContext FKDH<TKey, TData> KDH KDH<TKey, TData> SequenceConvertInfo SequenceConvertPath SqlInfo Interfaces IToSqlConverter Enums ConvertFlags RequestFor"
  },
  "api/LinqToDB.Linq.Builder.IToSqlConverter.html": {
    "href": "api/LinqToDB.Linq.Builder.IToSqlConverter.html",
    "title": "Interface IToSqlConverter | Linq To DB (aka linq2db)",
    "keywords": "Interface IToSqlConverter Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public interface IToSqlConverter Methods | Improve this Doc View Source ToSql(Expression) Declaration ISqlExpression ToSql(Expression expression) Parameters Type Name Description Expression expression Returns Type Description ISqlExpression Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.KDH.html": {
    "href": "api/LinqToDB.Linq.Builder.KDH.html",
    "title": "Class KDH | Linq To DB (aka linq2db)",
    "keywords": "Class KDH Inheritance System.Object KDH Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public static class KDH : object Methods | Improve this Doc View Source Create<TKey, TData>(TKey, TData) Declaration public static KDH<TKey, TData> Create<TKey, TData>(TKey key, TData data) Parameters Type Name Description TKey key TData data Returns Type Description KDH <TKey, TData> Type Parameters Name Description TKey TData"
  },
  "api/LinqToDB.Linq.Builder.KDH-2.html": {
    "href": "api/LinqToDB.Linq.Builder.KDH-2.html",
    "title": "Class KDH<TKey, TData> | Linq To DB (aka linq2db)",
    "keywords": "Class KDH<TKey, TData> Inheritance System.Object KDH<TKey, TData> Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class KDH<TKey, TData> : object Type Parameters Name Description TKey TData Constructors | Improve this Doc View Source KDH() Declaration public KDH() | Improve this Doc View Source KDH(TKey, TData) Declaration public KDH(TKey key, TData data) Parameters Type Name Description TKey key TData data Properties | Improve this Doc View Source Data Declaration public TData Data { get; set; } Property Value Type Description TData | Improve this Doc View Source Key Declaration public TKey Key { get; set; } Property Value Type Description TKey Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.RequestFor.html": {
    "href": "api/LinqToDB.Linq.Builder.RequestFor.html",
    "title": "Enum RequestFor | Linq To DB (aka linq2db)",
    "keywords": "Enum RequestFor Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public enum RequestFor : int Fields Name Description Association Checks the sequence if the expression is an association. Expression Checks the sequence if the expression contains an SQL expression. Field Checks the sequence if the expression is a field. GroupJoin Checks the sequence if the expression is a group join. Object Checks the sequence if the expression is a table, an association, new {}, or new MyClass {}. Root Checks the context if it's a root of the expression. SubQuery Checks the context if it's a subquery. Table Checks the sequence if the expression is a table or an association. Extension Methods Map.DeepCopy<RequestFor>() Sql.IsDistinctFrom<RequestFor>(RequestFor) Sql.IsDistinctFrom<RequestFor>(Nullable<RequestFor>) Sql.IsNotDistinctFrom<RequestFor>(RequestFor) Sql.IsNotDistinctFrom<RequestFor>(Nullable<RequestFor>) SqlExtensions.In<RequestFor>(IEnumerable<RequestFor>) SqlExtensions.In<RequestFor>(IQueryable<RequestFor>) SqlExtensions.In<RequestFor>(RequestFor[]) SqlExtensions.In<RequestFor>(RequestFor, RequestFor) SqlExtensions.In<RequestFor>(RequestFor, RequestFor, RequestFor) SqlExtensions.NotIn<RequestFor>(IEnumerable<RequestFor>) SqlExtensions.NotIn<RequestFor>(IQueryable<RequestFor>) SqlExtensions.NotIn<RequestFor>(RequestFor[]) SqlExtensions.NotIn<RequestFor>(RequestFor, RequestFor) SqlExtensions.NotIn<RequestFor>(RequestFor, RequestFor, RequestFor)"
  },
  "api/LinqToDB.Linq.Builder.SequenceConvertInfo.html": {
    "href": "api/LinqToDB.Linq.Builder.SequenceConvertInfo.html",
    "title": "Class SequenceConvertInfo | Linq To DB (aka linq2db)",
    "keywords": "Class SequenceConvertInfo Inheritance System.Object SequenceConvertInfo Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class SequenceConvertInfo : object Fields | Improve this Doc View Source Expression Declaration public Expression Expression Field Value Type Description Expression | Improve this Doc View Source ExpressionsToReplace Declaration public List<SequenceConvertPath>? ExpressionsToReplace Field Value Type Description System.Nullable < List < SequenceConvertPath >> | Improve this Doc View Source Parameter Declaration public ParameterExpression? Parameter Field Value Type Description System.Nullable < ParameterExpression > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.SequenceConvertPath.html": {
    "href": "api/LinqToDB.Linq.Builder.SequenceConvertPath.html",
    "title": "Class SequenceConvertPath | Linq To DB (aka linq2db)",
    "keywords": "Class SequenceConvertPath Inheritance System.Object SequenceConvertPath Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class SequenceConvertPath : object Fields | Improve this Doc View Source Expr Declaration public Expression Expr Field Value Type Description Expression | Improve this Doc View Source Level Declaration public int Level Field Value Type Description System.Int32 | Improve this Doc View Source Path Declaration public Expression Path Field Value Type Description Expression Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Builder.SqlInfo.html": {
    "href": "api/LinqToDB.Linq.Builder.SqlInfo.html",
    "title": "Class SqlInfo | Linq To DB (aka linq2db)",
    "keywords": "Class SqlInfo Inheritance System.Object SqlInfo Namespace : LinqToDB.Linq.Builder Assembly : linq2db.dll Syntax public class SqlInfo : object Constructors | Improve this Doc View Source SqlInfo(IEnumerable<MemberInfo>, ISqlExpression, SelectQuery, Int32) Declaration public SqlInfo(IEnumerable<MemberInfo> mi, ISqlExpression sql, SelectQuery query = null, int index = null) Parameters Type Name Description IEnumerable < MemberInfo > mi ISqlExpression sql SelectQuery query System.Int32 index | Improve this Doc View Source SqlInfo(IEnumerable<MemberInfo>, ISqlExpression, Int32) Declaration public SqlInfo(IEnumerable<MemberInfo> mi, ISqlExpression sql, int index) Parameters Type Name Description IEnumerable < MemberInfo > mi ISqlExpression sql System.Int32 index | Improve this Doc View Source SqlInfo(ISqlExpression, SelectQuery, Int32) Declaration public SqlInfo(ISqlExpression sql, SelectQuery query = null, int index = null) Parameters Type Name Description ISqlExpression sql SelectQuery query System.Int32 index | Improve this Doc View Source SqlInfo(MemberInfo, ISqlExpression, SelectQuery, Int32) Declaration public SqlInfo(MemberInfo mi, ISqlExpression sql, SelectQuery query = null, int index = null) Parameters Type Name Description MemberInfo mi ISqlExpression sql SelectQuery query System.Int32 index | Improve this Doc View Source SqlInfo(MemberInfo[], ISqlExpression, SelectQuery, Int32) Declaration public SqlInfo(MemberInfo[] mi, ISqlExpression sql, SelectQuery query = null, int index = null) Parameters Type Name Description MemberInfo [] mi ISqlExpression sql SelectQuery query System.Int32 index Fields | Improve this Doc View Source Index Declaration public readonly int Index Field Value Type Description System.Int32 | Improve this Doc View Source MemberChain Declaration public readonly MemberInfo[] MemberChain Field Value Type Description MemberInfo [] | Improve this Doc View Source Query Declaration public readonly SelectQuery Query Field Value Type Description SelectQuery | Improve this Doc View Source Sql Declaration public readonly ISqlExpression Sql Field Value Type Description ISqlExpression Methods | Improve this Doc View Source AppendMember(MemberInfo) Declaration public SqlInfo AppendMember(MemberInfo mi) Parameters Type Name Description MemberInfo mi Returns Type Description SqlInfo | Improve this Doc View Source Clone(MemberInfo) Declaration public SqlInfo Clone(MemberInfo mi) Parameters Type Name Description MemberInfo mi Returns Type Description SqlInfo | Improve this Doc View Source CompareLastMember(SqlInfo) Declaration public bool CompareLastMember(SqlInfo info) Parameters Type Name Description SqlInfo info Returns Type Description System.Boolean | Improve this Doc View Source CompareMembers(SqlInfo) Declaration public bool CompareMembers(SqlInfo info) Parameters Type Name Description SqlInfo info Returns Type Description System.Boolean | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source WithIndex(Int32) Declaration public SqlInfo WithIndex(int index) Parameters Type Name Description System.Int32 index Returns Type Description SqlInfo | Improve this Doc View Source WithMember(MemberInfo) Declaration public SqlInfo WithMember(MemberInfo mi) Parameters Type Name Description MemberInfo mi Returns Type Description SqlInfo | Improve this Doc View Source WithMembers(IEnumerable<MemberInfo>) Declaration public SqlInfo WithMembers(IEnumerable<MemberInfo> mi) Parameters Type Name Description IEnumerable < MemberInfo > mi Returns Type Description SqlInfo | Improve this Doc View Source WithQuery(SelectQuery) Declaration public SqlInfo WithQuery(SelectQuery query) Parameters Type Name Description SelectQuery query Returns Type Description SqlInfo | Improve this Doc View Source WithSql(ISqlExpression) Declaration public SqlInfo WithSql(ISqlExpression sql) Parameters Type Name Description ISqlExpression sql Returns Type Description SqlInfo Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Expressions.html": {
    "href": "api/LinqToDB.Linq.Expressions.html",
    "title": "Class Expressions | Linq To DB (aka linq2db)",
    "keywords": "Class Expressions Inheritance System.Object Expressions Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public static class Expressions : object Methods | Improve this Doc View Source AccessInt<T>(T) Declaration public static T AccessInt<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AccessRound<T>(T, Nullable<Int32>) Declaration public static T AccessRound<T>(T value, int? precision) Parameters Type Name Description T value System.Nullable < System.Int32 > precision Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AltStuff(Nullable<String>, Nullable<Int32>, Nullable<Int32>, Nullable<String>) Declaration public static string? AltStuff(string? str, int? startLocation, int? length, string? value) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Int32 > startLocation System.Nullable < System.Int32 > length System.Nullable < System.String > value Returns Type Description System.Nullable < System.String > | Improve this Doc View Source ConvertBinary(MappingSchema, BinaryExpression) Searches for registered BinaryExpression mapping and returns LambdaExpression which has to replace this expression. Declaration public static LambdaExpression? ConvertBinary(MappingSchema mappingSchema, BinaryExpression binaryExpression) Parameters Type Name Description MappingSchema mappingSchema Current mapping schema. BinaryExpression binaryExpression Expression which has to be replaced. Returns Type Description System.Nullable < LambdaExpression > Returns registered LambdaExpression or null . | Improve this Doc View Source ConvertMember(MappingSchema, Nullable<Type>, MemberInfo) Declaration public static LambdaExpression? ConvertMember(MappingSchema mappingSchema, Type? objectType, MemberInfo mi) Parameters Type Name Description MappingSchema mappingSchema System.Nullable < Type > objectType MemberInfo mi Returns Type Description System.Nullable < LambdaExpression > | Improve this Doc View Source ConvertToCaseCompareTo(Nullable<String>, Nullable<String>) Declaration public static int? ConvertToCaseCompareTo(string? str, string? value) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.String > value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source DateAdd(Sql.DateParts, Nullable<Int32>, Nullable<Int32>) Declaration public static DateTime? DateAdd(Sql.DateParts part, int? number, int? days) Parameters Type Name Description Sql.DateParts part System.Nullable < System.Int32 > number System.Nullable < System.Int32 > days Returns Type Description System.Nullable < DateTime > | Improve this Doc View Source DecimalPI() Declaration public static decimal DecimalPI() Returns Type Description System.Decimal | Improve this Doc View Source DoublePI() Declaration public static double DoublePI() Returns Type Description System.Double | Improve this Doc View Source Hex(Nullable<Guid>) Declaration public static string? Hex(Guid? guid) Parameters Type Name Description System.Nullable < Guid > guid Returns Type Description System.Nullable < System.String > | Improve this Doc View Source L<TR>(Expression<Func<TR>>) Declaration public static LambdaExpression L<TR>(Expression<Func<TR>> func) Parameters Type Name Description Expression < Func <TR>> func Returns Type Description LambdaExpression Type Parameters Name Description TR | Improve this Doc View Source L<T1, TR>(Expression<Func<T1, TR>>) Declaration public static LambdaExpression L<T1, TR>(Expression<Func<T1, TR>> func) Parameters Type Name Description Expression < Func <T1, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 TR | Improve this Doc View Source L<T1, T2, TR>(Expression<Func<T1, T2, TR>>) Declaration public static LambdaExpression L<T1, T2, TR>(Expression<Func<T1, T2, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source L<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source L<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source L<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, T5, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source L<T1, T2, T3, T4, T5, T6, TR>(Expression<Func<T1, T2, T3, T4, T5, T6, TR>>) Declaration public static LambdaExpression L<T1, T2, T3, T4, T5, T6, TR>(Expression<Func<T1, T2, T3, T4, T5, T6, TR>> func) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, T5, T6, TR>> func Returns Type Description LambdaExpression Type Parameters Name Description T1 T2 T3 T4 T5 T6 TR | Improve this Doc View Source M<T>(Expression<Func<T, Nullable<Object>>>) Declaration public static MemberInfo M<T>(Expression<Func<T, object?>> func) Parameters Type Name Description Expression < Func <T, System.Nullable < System.Object >>> func Returns Type Description MemberInfo Type Parameters Name Description T | Improve this Doc View Source M<T>(Expression<Func<T>>) Declaration public static MemberInfo M<T>(Expression<Func<T>> func) Parameters Type Name Description Expression < Func <T>> func Returns Type Description MemberInfo Type Parameters Name Description T | Improve this Doc View Source MakeDateTime2(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration public static DateTime? MakeDateTime2(int? year, int? month, int? day) Parameters Type Name Description System.Nullable < System.Int32 > year System.Nullable < System.Int32 > month System.Nullable < System.Int32 > day Returns Type Description System.Nullable < DateTime > | Improve this Doc View Source MapBinary(ExpressionType, Type, Type, LambdaExpression) Maps specific to another during SQL generation. Declaration public static void MapBinary(ExpressionType nodeType, Type leftType, Type rightType, LambdaExpression expression) Parameters Type Name Description ExpressionType nodeType NodeType of BinaryExpression which needs mapping. Type leftType Exact type of member. Type rightType Exact type of member. LambdaExpression expression Lambda expression which has to replace . Remarks Note that method is not thread safe and has to be used only in Application's initialization section. | Improve this Doc View Source MapBinary(String, ExpressionType, Type, Type, LambdaExpression) Maps specific BinaryExpression to another Lambda expression during SQL generation. Declaration public static void MapBinary(string providerName, ExpressionType nodeType, Type leftType, Type rightType, LambdaExpression expression) Parameters Type Name Description System.String providerName Name of database provider to use with this connection. ProviderName class for list of providers. ExpressionType nodeType NodeType of BinaryExpression which needs mapping. Type leftType Exact type of member. Type rightType Exact type of member. LambdaExpression expression Lambda expression which has to replace Remarks Note that method is not thread safe and has to be used only in Application's initialization section. | Improve this Doc View Source MapBinary<TLeft, TRight, TR>(Expression<Func<TLeft, TRight, TR>>, Expression<Func<TLeft, TRight, TR>>) Maps specific to another during SQL generation. Declaration public static void MapBinary<TLeft, TRight, TR>(Expression<Func<TLeft, TRight, TR>> binaryExpression, Expression<Func<TLeft, TRight, TR>> expression) Parameters Type Name Description Expression < Func <TLeft, TRight, TR>> binaryExpression Expression which has to be replaced. Expression < Func <TLeft, TRight, TR>> expression Lambda expression which has to replace binaryExpression . Type Parameters Name Description TLeft Exact type of member. TRight Exact type of member. TR Result type of binaryExpression . Remarks Note that method is not thread safe and has to be used only in Application's initialization section. | Improve this Doc View Source MapBinary<TLeft, TRight, TR>(String, Expression<Func<TLeft, TRight, TR>>, Expression<Func<TLeft, TRight, TR>>) Maps specific to another during SQL generation. Declaration public static void MapBinary<TLeft, TRight, TR>(string providerName, Expression<Func<TLeft, TRight, TR>> binaryExpression, Expression<Func<TLeft, TRight, TR>> expression) Parameters Type Name Description System.String providerName Name of database provider to use with this connection. ProviderName class for list of providers. Expression < Func <TLeft, TRight, TR>> binaryExpression Expression which has to be replaced. Expression < Func <TLeft, TRight, TR>> expression Lambda expression which has to replace binaryExpression . Type Parameters Name Description TLeft Exact type of member. TRight Exact type of member. TR Result type of binaryExpression . Remarks Note that method is not thread safe and has to be used only in Application's initialization section. | Improve this Doc View Source MapMember(Expression<Func<Object>>, LambdaExpression) Declaration public static void MapMember(Expression<Func<object>> memberInfo, LambdaExpression expression) Parameters Type Name Description Expression < Func < System.Object >> memberInfo LambdaExpression expression | Improve this Doc View Source MapMember(MemberInfo, LambdaExpression) Declaration public static void MapMember(MemberInfo memberInfo, LambdaExpression expression) Parameters Type Name Description MemberInfo memberInfo LambdaExpression expression | Improve this Doc View Source MapMember(MemberInfo, IExpressionInfo) Declaration public static void MapMember(MemberInfo memberInfo, IExpressionInfo expressionInfo) Parameters Type Name Description MemberInfo memberInfo IExpressionInfo expressionInfo | Improve this Doc View Source MapMember(String, Expression<Func<Object>>, LambdaExpression) Declaration public static void MapMember(string providerName, Expression<Func<object>> memberInfo, LambdaExpression expression) Parameters Type Name Description System.String providerName Expression < Func < System.Object >> memberInfo LambdaExpression expression | Improve this Doc View Source MapMember(String, MemberInfo, LambdaExpression) Declaration public static void MapMember(string providerName, MemberInfo memberInfo, LambdaExpression expression) Parameters Type Name Description System.String providerName MemberInfo memberInfo LambdaExpression expression | Improve this Doc View Source MapMember(String, MemberInfo, IExpressionInfo) Declaration public static void MapMember(string providerName, MemberInfo memberInfo, IExpressionInfo expressionInfo) Parameters Type Name Description System.String providerName MemberInfo memberInfo IExpressionInfo expressionInfo | Improve this Doc View Source MapMember(String, Type, MemberInfo, LambdaExpression) Declaration public static void MapMember(string providerName, Type objectType, MemberInfo memberInfo, LambdaExpression expression) Parameters Type Name Description System.String providerName Type objectType MemberInfo memberInfo LambdaExpression expression | Improve this Doc View Source MapMember(String, Type, MemberInfo, IExpressionInfo) Declaration public static void MapMember(string providerName, Type objectType, MemberInfo memberInfo, IExpressionInfo expressionInfo) Parameters Type Name Description System.String providerName Type objectType MemberInfo memberInfo IExpressionInfo expressionInfo | Improve this Doc View Source MapMember<T>(Expression<Func<T, Nullable<Object>>>, LambdaExpression) Declaration public static void MapMember<T>(Expression<Func<T, object?>> memberInfo, LambdaExpression expression) Parameters Type Name Description Expression < Func <T, System.Nullable < System.Object >>> memberInfo LambdaExpression expression Type Parameters Name Description T | Improve this Doc View Source MapMember<TR>(Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description Expression < Func <TR>> memberInfo Expression < Func <TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<T>(String, Expression<Func<T, Nullable<Object>>>, LambdaExpression) Declaration public static void MapMember<T>(string providerName, Expression<Func<T, object?>> memberInfo, LambdaExpression expression) Parameters Type Name Description System.String providerName Expression < Func <T, System.Nullable < System.Object >>> memberInfo LambdaExpression expression Type Parameters Name Description T | Improve this Doc View Source MapMember<TR>(String, Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(string providerName, Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description System.String providerName Expression < Func <TR>> memberInfo Expression < Func <TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<TR>(String, Type, Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(string providerName, Type objectType, Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description System.String providerName Type objectType Expression < Func <TR>> memberInfo Expression < Func <TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<TR>(Type, Expression<Func<TR>>, Expression<Func<TR>>) Declaration public static void MapMember<TR>(Type objectType, Expression<Func<TR>> memberInfo, Expression<Func<TR>> expression) Parameters Type Name Description Type objectType Expression < Func <TR>> memberInfo Expression < Func <TR>> expression Type Parameters Name Description TR | Improve this Doc View Source MapMember<T1, TR>(Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description Expression < Func <T1, TR>> memberInfo Expression < Func <T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, TR>(String, Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(string providerName, Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description System.String providerName Expression < Func <T1, TR>> memberInfo Expression < Func <T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, TR>(String, Type, Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(string providerName, Type objectType, Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description System.String providerName Type objectType Expression < Func <T1, TR>> memberInfo Expression < Func <T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, TR>(Type, Expression<Func<T1, TR>>, Expression<Func<T1, TR>>) Declaration public static void MapMember<T1, TR>(Type objectType, Expression<Func<T1, TR>> memberInfo, Expression<Func<T1, TR>> expression) Parameters Type Name Description Type objectType Expression < Func <T1, TR>> memberInfo Expression < Func <T1, TR>> expression Type Parameters Name Description T1 TR | Improve this Doc View Source MapMember<T1, T2, TR>(Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description Expression < Func <T1, T2, TR>> memberInfo Expression < Func <T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, TR>(String, Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(string providerName, Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description System.String providerName Expression < Func <T1, T2, TR>> memberInfo Expression < Func <T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, TR>(String, Type, Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(string providerName, Type objectType, Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description System.String providerName Type objectType Expression < Func <T1, T2, TR>> memberInfo Expression < Func <T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, TR>(Type, Expression<Func<T1, T2, TR>>, Expression<Func<T1, T2, TR>>) Declaration public static void MapMember<T1, T2, TR>(Type objectType, Expression<Func<T1, T2, TR>> memberInfo, Expression<Func<T1, T2, TR>> expression) Parameters Type Name Description Type objectType Expression < Func <T1, T2, TR>> memberInfo Expression < Func <T1, T2, TR>> expression Type Parameters Name Description T1 T2 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description Expression < Func <T1, T2, T3, TR>> memberInfo Expression < Func <T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(String, Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(string providerName, Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description System.String providerName Expression < Func <T1, T2, T3, TR>> memberInfo Expression < Func <T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(String, Type, Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(string providerName, Type objectType, Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description System.String providerName Type objectType Expression < Func <T1, T2, T3, TR>> memberInfo Expression < Func <T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, TR>(Type, Expression<Func<T1, T2, T3, TR>>, Expression<Func<T1, T2, T3, TR>>) Declaration public static void MapMember<T1, T2, T3, TR>(Type objectType, Expression<Func<T1, T2, T3, TR>> memberInfo, Expression<Func<T1, T2, T3, TR>> expression) Parameters Type Name Description Type objectType Expression < Func <T1, T2, T3, TR>> memberInfo Expression < Func <T1, T2, T3, TR>> expression Type Parameters Name Description T1 T2 T3 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, TR>> memberInfo Expression < Func <T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(String, Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(string providerName, Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description System.String providerName Expression < Func <T1, T2, T3, T4, TR>> memberInfo Expression < Func <T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(String, Type, Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(string providerName, Type objectType, Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description System.String providerName Type objectType Expression < Func <T1, T2, T3, T4, TR>> memberInfo Expression < Func <T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, TR>(Type, Expression<Func<T1, T2, T3, T4, TR>>, Expression<Func<T1, T2, T3, T4, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, TR>(Type objectType, Expression<Func<T1, T2, T3, T4, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, TR>> expression) Parameters Type Name Description Type objectType Expression < Func <T1, T2, T3, T4, TR>> memberInfo Expression < Func <T1, T2, T3, T4, TR>> expression Type Parameters Name Description T1 T2 T3 T4 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description Expression < Func <T1, T2, T3, T4, T5, TR>> memberInfo Expression < Func <T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(String, Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(string providerName, Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description System.String providerName Expression < Func <T1, T2, T3, T4, T5, TR>> memberInfo Expression < Func <T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(String, Type, Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(string providerName, Type objectType, Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description System.String providerName Type objectType Expression < Func <T1, T2, T3, T4, T5, TR>> memberInfo Expression < Func <T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source MapMember<T1, T2, T3, T4, T5, TR>(Type, Expression<Func<T1, T2, T3, T4, T5, TR>>, Expression<Func<T1, T2, T3, T4, T5, TR>>) Declaration public static void MapMember<T1, T2, T3, T4, T5, TR>(Type objectType, Expression<Func<T1, T2, T3, T4, T5, TR>> memberInfo, Expression<Func<T1, T2, T3, T4, T5, TR>> expression) Parameters Type Name Description Type objectType Expression < Func <T1, T2, T3, T4, T5, TR>> memberInfo Expression < Func <T1, T2, T3, T4, T5, TR>> expression Type Parameters Name Description T1 T2 T3 T4 T5 TR | Improve this Doc View Source Mdy(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration public static DateTime? Mdy(int? month, int? day, int? year) Parameters Type Name Description System.Nullable < System.Int32 > month System.Nullable < System.Int32 > day System.Nullable < System.Int32 > year Returns Type Description System.Nullable < DateTime > | Improve this Doc View Source N(Func<LambdaExpression>) Declaration public static Expressions.LazyExpressionInfo N(Func<LambdaExpression> func) Parameters Type Name Description Func < LambdaExpression > func Returns Type Description Expressions.LazyExpressionInfo | Improve this Doc View Source Replicate(Nullable<Char>, Nullable<Int32>) Declaration public static string? Replicate(char? ch, int? count) Parameters Type Name Description System.Nullable < System.Char > ch System.Nullable < System.Int32 > count Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Replicate(Nullable<String>, Nullable<Int32>) Declaration public static string? Replicate(string? str, int? count) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Int32 > count Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Round(Nullable<Decimal>, Int32, Int32) Declaration public static decimal? Round(decimal? value, int precision, int mode) Parameters Type Name Description System.Nullable < System.Decimal > value System.Int32 precision System.Int32 mode Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source Round(Nullable<Double>, Int32, Int32) Declaration public static double? Round(double? value, int precision, int mode) Parameters Type Name Description System.Nullable < System.Double > value System.Int32 precision System.Int32 mode Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source SetGenericInfoProvider(Type) Declaration public static void SetGenericInfoProvider(Type type) Parameters Type Name Description Type type | Improve this Doc View Source TrimLeft(Nullable<String>, Char[]) Declaration public static string? TrimLeft(string? str, params char[] trimChars) Parameters Type Name Description System.Nullable < System.String > str System.Char [] trimChars Returns Type Description System.Nullable < System.String > | Improve this Doc View Source TrimRight(Nullable<String>, Char[]) Declaration public static string? TrimRight(string? str, params char[] trimChars) Parameters Type Name Description System.Nullable < System.String > str System.Char [] trimChars Returns Type Description System.Nullable < System.String > | Improve this Doc View Source VarChar(Object, Nullable<Int32>) Declaration public static string? VarChar(object obj, int? size) Parameters Type Name Description System.Object obj System.Nullable < System.Int32 > size Returns Type Description System.Nullable < System.String >"
  },
  "api/LinqToDB.Linq.Expressions.LazyExpressionInfo.html": {
    "href": "api/LinqToDB.Linq.Expressions.LazyExpressionInfo.html",
    "title": "Class Expressions.LazyExpressionInfo | Linq To DB (aka linq2db)",
    "keywords": "Class Expressions.LazyExpressionInfo Inheritance System.Object Expressions.LazyExpressionInfo Implements IExpressionInfo Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public class LazyExpressionInfo : object, IExpressionInfo Fields | Improve this Doc View Source Lambda Declaration public Func<LambdaExpression>? Lambda Field Value Type Description System.Nullable < Func < LambdaExpression >> Methods | Improve this Doc View Source GetExpression(MappingSchema) Declaration public LambdaExpression GetExpression(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description LambdaExpression | Improve this Doc View Source SetExpression(LambdaExpression) Declaration public void SetExpression(LambdaExpression expression) Parameters Type Name Description LambdaExpression expression Implements IExpressionInfo Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.html": {
    "href": "api/LinqToDB.Linq.html",
    "title": "Namespace LinqToDB.Linq | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Linq Classes AccessorMember Expressions Expressions.LazyExpressionInfo Internals This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. LinqException Defines the base class for the namespace exceptions. MethodHelper NoLinqCache Provides a scope, in which LINQ queries will not be added to a LINQ query cache. This could be used to tell linq2db to not cache queries that operate with big parametes. More details could be found here . Take into account that this class only disables adding of new query, created in its scope, to a cache. If query already present in cache - linq2db will use cached query. Query Interfaces IDataReaderAsync IExpressionInfo IExpressionPreprocessor IExpressionQuery IExpressionQuery<T> IMergeable<TTarget, TSource> Merge command builder that have target table, source, match (ON) condition and at least one operation configured. You can add more operations to this type of builder or execute command. IMergeableOn<TTarget, TSource> Merge command builder that have only target table and source configured. Only operation available for this type of builder is match (ON) condition configuration. IMergeableSource<TTarget, TSource> Merge command builder that have target table, source and match (ON) condition configured. You can only add operations to this type of builder. IMergeableUsing<TTarget> Merge command builder that have only target table configured. Only operation available for this type of builder is source configuration. IQueryContext IQueryRunner ISelectInsertable<TSource, TTarget> IUpdatable<T> IValueInsertable<T>"
  },
  "api/LinqToDB.Linq.IDataReaderAsync.html": {
    "href": "api/LinqToDB.Linq.IDataReaderAsync.html",
    "title": "Interface IDataReaderAsync | Linq To DB (aka linq2db)",
    "keywords": "Interface IDataReaderAsync Inherited Members IAsyncDisposable.DisposeAsync() Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IDataReaderAsync : IAsyncDisposable Properties | Improve this Doc View Source DataReader Declaration IDataReader DataReader { get; } Property Value Type Description IDataReader Methods | Improve this Doc View Source ReadAsync(CancellationToken) Declaration Task<bool> ReadAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < System.Boolean > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IExpressionInfo.html": {
    "href": "api/LinqToDB.Linq.IExpressionInfo.html",
    "title": "Interface IExpressionInfo | Linq To DB (aka linq2db)",
    "keywords": "Interface IExpressionInfo Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IExpressionInfo Methods | Improve this Doc View Source GetExpression(MappingSchema) Declaration LambdaExpression GetExpression(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description LambdaExpression Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IExpressionPreprocessor.html": {
    "href": "api/LinqToDB.Linq.IExpressionPreprocessor.html",
    "title": "Interface IExpressionPreprocessor | Linq To DB (aka linq2db)",
    "keywords": "Interface IExpressionPreprocessor Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IExpressionPreprocessor Methods | Improve this Doc View Source ProcessExpression(Expression) Declaration Expression ProcessExpression(Expression expression) Parameters Type Name Description Expression expression Returns Type Description Expression Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IExpressionQuery.html": {
    "href": "api/LinqToDB.Linq.IExpressionQuery.html",
    "title": "Interface IExpressionQuery | Linq To DB (aka linq2db)",
    "keywords": "Interface IExpressionQuery Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IExpressionQuery Properties | Improve this Doc View Source DataContext Declaration IDataContext DataContext { get; } Property Value Type Description IDataContext | Improve this Doc View Source Expression Declaration Expression Expression { get; } Property Value Type Description Expression | Improve this Doc View Source SqlText Declaration string SqlText { get; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IExpressionQuery-1.html": {
    "href": "api/LinqToDB.Linq.IExpressionQuery-1.html",
    "title": "Interface IExpressionQuery<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IExpressionQuery<T> Inherited Members IQueryProviderAsync.ExecuteAsyncEnumerable<TResult>(Expression, CancellationToken) IQueryProviderAsync.ExecuteAsync<TResult>(Expression, CancellationToken) IExpressionQuery.SqlText IExpressionQuery.DataContext Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IExpressionQuery<out T> : IQueryProviderAsync, IExpressionQuery Type Parameters Name Description T Properties | Improve this Doc View Source Expression Declaration Expression Expression { get; set; } Property Value Type Description Expression Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IMergeable-2.html": {
    "href": "api/LinqToDB.Linq.IMergeable-2.html",
    "title": "Interface IMergeable<TTarget, TSource> | Linq To DB (aka linq2db)",
    "keywords": "Interface IMergeable<TTarget, TSource> Merge command builder that have target table, source, match (ON) condition and at least one operation configured. You can add more operations to this type of builder or execute command. Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IMergeable<TTarget, TSource> : IMergeableSource<TTarget, TSource> Type Parameters Name Description TTarget Target record type. TSource Source record type. Extension Methods Map.DeepCopy<T>(T) LinqExtensions.InsertWhenNotMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWhenNotMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TSource, Boolean>>, Expression<Func<TSource, TTarget>>) LinqExtensions.UpdateWhenMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, TTarget>>) LinqExtensions.UpdateWhenMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>) LinqExtensions.UpdateWhenMatchedThenDelete<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, TTarget>>, Expression<Func<TTarget, TSource, Boolean>>) LinqExtensions.UpdateWhenMatchedAndThenDelete<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>, Expression<Func<TTarget, TSource, Boolean>>) LinqExtensions.DeleteWhenMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>) LinqExtensions.DeleteWhenMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>) LinqExtensions.UpdateWhenNotMatchedBySource<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TTarget>>) LinqExtensions.UpdateWhenNotMatchedBySourceAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, Boolean>>, Expression<Func<TTarget, TTarget>>) LinqExtensions.DeleteWhenNotMatchedBySource<TTarget, TSource>(IMergeableSource<TTarget, TSource>) LinqExtensions.DeleteWhenNotMatchedBySourceAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, Boolean>>) LinqExtensions.Merge<TTarget, TSource>(IMergeable<TTarget, TSource>) LinqExtensions.MergeWithOutput<TTarget, TSource, TOutput>(IMergeable<TTarget, TSource>, Expression<Func<String, TTarget, TTarget, TOutput>>) LinqExtensions.MergeWithOutputAsync<TTarget, TSource, TOutput>(IMergeable<TTarget, TSource>, Expression<Func<String, TTarget, TTarget, TOutput>>) LinqExtensions.MergeWithOutputInto<TTarget, TSource, TOutput>(IMergeable<TTarget, TSource>, ITable<TOutput>, Expression<Func<String, TTarget, TTarget, TOutput>>) LinqExtensions.MergeWithOutputIntoAsync<TTarget, TSource, TOutput>(IMergeable<TTarget, TSource>, ITable<TOutput>, Expression<Func<String, TTarget, TTarget, TOutput>>, CancellationToken) LinqExtensions.MergeAsync<TTarget, TSource>(IMergeable<TTarget, TSource>, CancellationToken) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IMergeableOn-2.html": {
    "href": "api/LinqToDB.Linq.IMergeableOn-2.html",
    "title": "Interface IMergeableOn<TTarget, TSource> | Linq To DB (aka linq2db)",
    "keywords": "Interface IMergeableOn<TTarget, TSource> Merge command builder that have only target table and source configured. Only operation available for this type of builder is match (ON) condition configuration. Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IMergeableOn<TTarget, TSource> Type Parameters Name Description TTarget Target record type. TSource Source record type. Extension Methods Map.DeepCopy<T>(T) LinqExtensions.On<TTarget, TSource, TKey>(IMergeableOn<TTarget, TSource>, Expression<Func<TTarget, TKey>>, Expression<Func<TSource, TKey>>) LinqExtensions.On<TTarget, TSource>(IMergeableOn<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IMergeableSource-2.html": {
    "href": "api/LinqToDB.Linq.IMergeableSource-2.html",
    "title": "Interface IMergeableSource<TTarget, TSource> | Linq To DB (aka linq2db)",
    "keywords": "Interface IMergeableSource<TTarget, TSource> Merge command builder that have target table, source and match (ON) condition configured. You can only add operations to this type of builder. Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IMergeableSource<TTarget, TSource> Type Parameters Name Description TTarget Target record type. TSource Source record type. Extension Methods Map.DeepCopy<T>(T) LinqExtensions.InsertWhenNotMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TSource, TTarget>>) LinqExtensions.InsertWhenNotMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TSource, Boolean>>, Expression<Func<TSource, TTarget>>) LinqExtensions.UpdateWhenMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, TTarget>>) LinqExtensions.UpdateWhenMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>) LinqExtensions.UpdateWhenMatchedThenDelete<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, TTarget>>, Expression<Func<TTarget, TSource, Boolean>>) LinqExtensions.UpdateWhenMatchedAndThenDelete<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>, Expression<Func<TTarget, TSource, Boolean>>) LinqExtensions.DeleteWhenMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>) LinqExtensions.DeleteWhenMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>) LinqExtensions.UpdateWhenNotMatchedBySource<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TTarget>>) LinqExtensions.UpdateWhenNotMatchedBySourceAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, Boolean>>, Expression<Func<TTarget, TTarget>>) LinqExtensions.DeleteWhenNotMatchedBySource<TTarget, TSource>(IMergeableSource<TTarget, TSource>) LinqExtensions.DeleteWhenNotMatchedBySourceAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, Boolean>>) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IMergeableUsing-1.html": {
    "href": "api/LinqToDB.Linq.IMergeableUsing-1.html",
    "title": "Interface IMergeableUsing<TTarget> | Linq To DB (aka linq2db)",
    "keywords": "Interface IMergeableUsing<TTarget> Merge command builder that have only target table configured. Only operation available for this type of builder is source configuration. Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IMergeableUsing<TTarget> Type Parameters Name Description TTarget Target record type. Extension Methods Map.DeepCopy<T>(T) LinqExtensions.Using<TTarget, TSource>(IMergeableUsing<TTarget>, IQueryable<TSource>) LinqExtensions.Using<TTarget, TSource>(IMergeableUsing<TTarget>, IEnumerable<TSource>) LinqExtensions.UsingTarget<TTarget>(IMergeableUsing<TTarget>) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Internal.ColumnReaderAttribute.html": {
    "href": "api/LinqToDB.Linq.Internal.ColumnReaderAttribute.html",
    "title": "Class ColumnReaderAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnReaderAttribute Internal API. Inheritance System.Object ColumnReaderAttribute Namespace : LinqToDB.Linq.Internal Assembly : linq2db.dll Syntax public class ColumnReaderAttribute : Attribute Constructors | Improve this Doc View Source ColumnReaderAttribute(Int32) Declaration public ColumnReaderAttribute(int indexParameterIndex) Parameters Type Name Description System.Int32 indexParameterIndex Properties | Improve this Doc View Source IndexParameterIndex Declaration public int IndexParameterIndex { get; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Internal.html": {
    "href": "api/LinqToDB.Linq.Internal.html",
    "title": "Namespace LinqToDB.Linq.Internal | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Linq.Internal Classes ColumnReaderAttribute Internal API."
  },
  "api/LinqToDB.Linq.Internals.html": {
    "href": "api/LinqToDB.Linq.Internals.html",
    "title": "Class Internals | Linq To DB (aka linq2db)",
    "keywords": "Class Internals This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Inheritance System.Object Internals Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public static class Internals : object Methods | Improve this Doc View Source CreateExpressionQueryInstance<T>(IDataContext, Expression) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static IQueryable<T> CreateExpressionQueryInstance<T>(IDataContext dataContext, Expression expression) Parameters Type Name Description IDataContext dataContext Expression expression Returns Type Description IQueryable <T> Type Parameters Name Description T | Improve this Doc View Source GetDataContext<T>(IQueryable<T>) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static IDataContext GetDataContext<T>(IQueryable<T> queryable) Parameters Type Name Description IQueryable <T> queryable Returns Type Description IDataContext Type Parameters Name Description T | Improve this Doc View Source GetDataContext<T>(IUpdatable<T>) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static IDataContext GetDataContext<T>(IUpdatable<T> updatable) Parameters Type Name Description IUpdatable <T> updatable Returns Type Description IDataContext Type Parameters Name Description T | Improve this Doc View Source GetDataContext<T>(IValueInsertable<T>) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static IDataContext GetDataContext<T>(IValueInsertable<T> insertable) Parameters Type Name Description IValueInsertable <T> insertable Returns Type Description IDataContext Type Parameters Name Description T | Improve this Doc View Source GetDataContext<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static IDataContext GetDataContext<TSource, TTarget>(ISelectInsertable<TSource, TTarget> insertable) Parameters Type Name Description ISelectInsertable <TSource, TTarget> insertable Returns Type Description IDataContext Type Parameters Name Description TSource TTarget"
  },
  "api/LinqToDB.Linq.IQueryContext.html": {
    "href": "api/LinqToDB.Linq.IQueryContext.html",
    "title": "Interface IQueryContext | Linq To DB (aka linq2db)",
    "keywords": "Interface IQueryContext Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IQueryContext Properties | Improve this Doc View Source Aliases Declaration AliasesContext Aliases { get; set; } Property Value Type Description AliasesContext | Improve this Doc View Source Context Declaration object? Context { get; set; } Property Value Type Description System.Nullable < System.Object > | Improve this Doc View Source Parameters Declaration SqlParameter[] Parameters { get; set; } Property Value Type Description SqlParameter [] | Improve this Doc View Source Statement Declaration SqlStatement Statement { get; } Property Value Type Description SqlStatement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IQueryRunner.html": {
    "href": "api/LinqToDB.Linq.IQueryRunner.html",
    "title": "Interface IQueryRunner | Linq To DB (aka linq2db)",
    "keywords": "Interface IQueryRunner Inherited Members IAsyncDisposable.DisposeAsync() Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IQueryRunner : IAsyncDisposable Properties | Improve this Doc View Source DataContext Declaration IDataContext DataContext { get; set; } Property Value Type Description IDataContext | Improve this Doc View Source Expression Declaration Expression Expression { get; set; } Property Value Type Description Expression | Improve this Doc View Source MapperExpression Declaration Expression? MapperExpression { get; set; } Property Value Type Description System.Nullable < Expression > | Improve this Doc View Source Parameters Declaration object? [] Parameters { get; set; } Property Value Type Description System.Nullable < System.Object >[] | Improve this Doc View Source Preambles Declaration object? [] Preambles { get; set; } Property Value Type Description System.Nullable < System.Object >[] | Improve this Doc View Source QueryNumber Declaration int QueryNumber { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source RowsCount Declaration int RowsCount { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ExecuteNonQuery() Executes query and returns number of affected records. Declaration int ExecuteNonQuery() Returns Type Description System.Int32 Number of affected records. | Improve this Doc View Source ExecuteNonQueryAsync(CancellationToken) Executes query asynchronously and returns number of affected records. Declaration Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. | Improve this Doc View Source ExecuteReader() Executes query and returns data reader. Declaration IDataReader ExecuteReader() Returns Type Description IDataReader Data reader with query results. | Improve this Doc View Source ExecuteReaderAsync(CancellationToken) Executes query asynchronously and returns data reader. Declaration Task<IDataReaderAsync> ExecuteReaderAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < IDataReaderAsync > Data reader with query results. | Improve this Doc View Source ExecuteScalar() Executes query and returns scalar value. Declaration object? ExecuteScalar() Returns Type Description System.Nullable < System.Object > Scalar value. | Improve this Doc View Source ExecuteScalarAsync(CancellationToken) Executes query asynchronously and returns scalar value. Declaration Task<object?> ExecuteScalarAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < System.Nullable < System.Object >> Scalar value. | Improve this Doc View Source GetSqlText() Returns SQL text for query. Declaration string GetSqlText() Returns Type Description System.String Query SQL text. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.ISelectInsertable-2.html": {
    "href": "api/LinqToDB.Linq.ISelectInsertable-2.html",
    "title": "Interface ISelectInsertable<TSource, TTarget> | Linq To DB (aka linq2db)",
    "keywords": "Interface ISelectInsertable<TSource, TTarget> Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface ISelectInsertable<TSource, TTarget> Type Parameters Name Description TSource TTarget Extension Methods Map.DeepCopy<T>(T) LinqExtensions.Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TSource, TValue>>) LinqExtensions.Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TValue>>) LinqExtensions.Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, TValue) LinqExtensions.Insert<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) LinqExtensions.InsertWithIdentity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertWithInt32Identity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertWithInt64Identity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertWithDecimalIdentity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertWithIdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) LinqExtensions.InsertWithInt32IdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) LinqExtensions.InsertWithInt64IdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) LinqExtensions.InsertWithDecimalIdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) LinqExtensions.InsertWithOutput<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) LinqExtensions.InsertWithOutputAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) LinqExtensions.InsertWithOutputInto<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, ITable<TTarget>) LinqExtensions.InsertWithOutputIntoAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, ITable<TTarget>, CancellationToken) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IUpdatable-1.html": {
    "href": "api/LinqToDB.Linq.IUpdatable-1.html",
    "title": "Interface IUpdatable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IUpdatable<T> Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IUpdatable<T> Type Parameters Name Description T Extension Methods Map.DeepCopy<T>(T) LinqExtensions.Update<T>(IUpdatable<T>) LinqExtensions.UpdateAsync<T>(IUpdatable<T>, CancellationToken) LinqExtensions.Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) LinqExtensions.Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Set<T>(IUpdatable<T>, Expression<Func<T, String>>) LinqExtensions.UpdateWithOutput<T>(IUpdatable<T>) LinqExtensions.UpdateWithOutputAsync<T>(IUpdatable<T>, CancellationToken) LinqExtensions.UpdateWithOutput<T, TOutput>(IUpdatable<T>, Expression<Func<T, T, TOutput>>) LinqExtensions.UpdateWithOutputAsync<T, TOutput>(IUpdatable<T>, Expression<Func<T, T, TOutput>>, CancellationToken) LinqExtensions.UpdateWithOutputInto<T, TOutput>(IUpdatable<T>, ITable<TOutput>, Expression<Func<T, T, TOutput>>) LinqExtensions.UpdateWithOutputIntoAsync<T, TOutput>(IUpdatable<T>, ITable<TOutput>, Expression<Func<T, T, TOutput>>, CancellationToken) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.IValueInsertable-1.html": {
    "href": "api/LinqToDB.Linq.IValueInsertable-1.html",
    "title": "Interface IValueInsertable<T> | Linq To DB (aka linq2db)",
    "keywords": "Interface IValueInsertable<T> Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public interface IValueInsertable<T> Type Parameters Name Description T Extension Methods Map.DeepCopy<T>(T) LinqExtensions.Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) LinqExtensions.Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, TV) LinqExtensions.Insert<T>(IValueInsertable<T>) LinqExtensions.InsertAsync<T>(IValueInsertable<T>, CancellationToken) LinqExtensions.InsertWithIdentity<T>(IValueInsertable<T>) LinqExtensions.InsertWithInt32Identity<T>(IValueInsertable<T>) LinqExtensions.InsertWithInt64Identity<T>(IValueInsertable<T>) LinqExtensions.InsertWithDecimalIdentity<T>(IValueInsertable<T>) LinqExtensions.InsertWithIdentityAsync<T>(IValueInsertable<T>, CancellationToken) LinqExtensions.InsertWithInt32IdentityAsync<T>(IValueInsertable<T>, CancellationToken) LinqExtensions.InsertWithInt64IdentityAsync<T>(IValueInsertable<T>, CancellationToken) LinqExtensions.InsertWithDecimalIdentityAsync<T>(IValueInsertable<T>, CancellationToken) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.LinqException.html": {
    "href": "api/LinqToDB.Linq.LinqException.html",
    "title": "Class LinqException | Linq To DB (aka linq2db)",
    "keywords": "Class LinqException Defines the base class for the namespace exceptions. Inheritance System.Object LinqException Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public class LinqException : Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source LinqException() Initializes a new instance of the LinqException class. Declaration public LinqException() Remarks This constructor initializes the property of the new instance to a system-supplied message that describes the error, such as \"LinqToDB Linq error has occurred.\" | Improve this Doc View Source LinqException(Exception) Initializes a new instance of the LinqException class with the InnerException property. Declaration public LinqException(Exception innerException) Parameters Type Name Description Exception innerException The InnerException, if any, that threw the current exception. | Improve this Doc View Source LinqException(SerializationInfo, StreamingContext) Initializes a new instance of the LinqException class with serialized data. Declaration protected LinqException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source LinqException(String, Exception) Initializes a new instance of the LinqException class with the specified error message and InnerException property. Declaration public LinqException(string message, Exception innerException) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. Exception innerException The InnerException, if any, that threw the current exception. | Improve this Doc View Source LinqException(String, Nullable<Object>[]) Initializes a new instance of the LinqException class with the specified error message. Declaration public LinqException(string message, params object? [] args) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. System.Nullable < System.Object >[] args An array containing zero or more objects to format. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.MethodHelper.html": {
    "href": "api/LinqToDB.Linq.MethodHelper.html",
    "title": "Class MethodHelper | Linq To DB (aka linq2db)",
    "keywords": "Class MethodHelper Inheritance System.Object MethodHelper Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public static class MethodHelper : object Methods | Improve this Doc View Source GetMethodInfo(Delegate) Declaration public static MethodInfo GetMethodInfo(this Delegate del) Parameters Type Name Description Delegate del Returns Type Description MethodInfo | Improve this Doc View Source GetMethodInfo<T1, T2>(Func<T1, T2>, T1) Declaration public static MethodInfo GetMethodInfo<T1, T2>(Func<T1, T2> f, T1 unused1) Parameters Type Name Description Func <T1, T2> f T1 unused1 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 | Improve this Doc View Source GetMethodInfo<T1, T2, T3>(Func<T1, T2, T3>, T1, T2) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3>(Func<T1, T2, T3> f, T1 unused1, T2 unused2) Parameters Type Name Description Func <T1, T2, T3> f T1 unused1 T2 unused2 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 | Improve this Doc View Source GetMethodInfo<T1, T2, T3, T4>(Func<T1, T2, T3, T4>, T1, T2, T3) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4>(Func<T1, T2, T3, T4> f, T1 unused1, T2 unused2, T3 unused3) Parameters Type Name Description Func <T1, T2, T3, T4> f T1 unused1 T2 unused2 T3 unused3 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 T4 | Improve this Doc View Source GetMethodInfo<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5>, T1, T2, T3, T4) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5> f, T1 unused1, T2 unused2, T3 unused3, T4 unused4) Parameters Type Name Description Func <T1, T2, T3, T4, T5> f T1 unused1 T2 unused2 T3 unused3 T4 unused4 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 T4 T5 | Improve this Doc View Source GetMethodInfo<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6> f, T1 unused1, T2 unused2, T3 unused3, T4 unused4, T5 unused5) Parameters Type Name Description Func <T1, T2, T3, T4, T5, T6> f T1 unused1 T2 unused2 T3 unused3 T4 unused4 T5 unused5 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 T4 T5 T6 | Improve this Doc View Source GetMethodInfo<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7>, T1, T2, T3, T4, T5, T6) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7> f, T1 unused1, T2 unused2, T3 unused3, T4 unused4, T5 unused5, T6 unused6) Parameters Type Name Description Func <T1, T2, T3, T4, T5, T6, T7> f T1 unused1 T2 unused2 T3 unused3 T4 unused4 T5 unused5 T6 unused6 Returns Type Description MethodInfo Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7"
  },
  "api/LinqToDB.Linq.NoLinqCache.html": {
    "href": "api/LinqToDB.Linq.NoLinqCache.html",
    "title": "Class NoLinqCache | Linq To DB (aka linq2db)",
    "keywords": "Class NoLinqCache Provides a scope, in which LINQ queries will not be added to a LINQ query cache. This could be used to tell linq2db to not cache queries that operate with big parametes. More details could be found here . Take into account that this class only disables adding of new query, created in its scope, to a cache. If query already present in cache - linq2db will use cached query. Inheritance System.Object NoLinqCache Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public class NoLinqCache : IDisposable Methods | Improve this Doc View Source Scope() Creates disposable no-cache scope. Declaration public static IDisposable Scope() Returns Type Description IDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Linq.Query.html": {
    "href": "api/LinqToDB.Linq.Query.html",
    "title": "Class Query | Linq To DB (aka linq2db)",
    "keywords": "Class Query Inheritance System.Object Query Namespace : LinqToDB.Linq Assembly : linq2db.dll Syntax public abstract class Query : object Fields | Improve this Doc View Source GetElement Declaration public Func<IDataContext, Expression, object? [], object? [], object?> GetElement Field Value Type Description Func < IDataContext , Expression , System.Nullable < System.Object >[], System.Nullable < System.Object >[], System.Nullable < System.Object >> | Improve this Doc View Source GetElementAsync Declaration public Func<IDataContext, Expression, object? [], object? [], CancellationToken, Task<object?>> GetElementAsync Field Value Type Description Func < IDataContext , Expression , System.Nullable < System.Object >[], System.Nullable < System.Object >[], CancellationToken , Task < System.Nullable < System.Object >>> Properties | Improve this Doc View Source IsFastCacheable Declaration public bool IsFastCacheable { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ClearCaches() Clears query caches for all typed queries. Declaration public static void ClearCaches() | Improve this Doc View Source ClearMemberQueryableInfo() Declaration public void ClearMemberQueryableInfo() | Improve this Doc View Source Compare(IDataContext, Expression) Declaration protected bool Compare(IDataContext dataContext, Expression expr) Parameters Type Name Description IDataContext dataContext Expression expr Returns Type Description System.Boolean | Improve this Doc View Source IsAnyPreambles() Declaration public bool IsAnyPreambles() Returns Type Description System.Boolean | Improve this Doc View Source PreamblesCount() Declaration public int PreamblesCount() Returns Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.LinqExtensions.html": {
    "href": "api/LinqToDB.LinqExtensions.html",
    "title": "Class LinqExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class LinqExtensions Contains extension methods for LINQ queries. Inheritance System.Object LinqExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class LinqExtensions : object Properties | Improve this Doc View Source ExtensionsAdapter Declaration public static IExtensionsAdapter ExtensionsAdapter { get; set; } Property Value Type Description IExtensionsAdapter | Improve this Doc View Source ProcessSourceQueryable Gets or sets callback for preprocessing query before execution. Useful for intercepting queries. Declaration public static Func<IQueryable, IQueryable>? ProcessSourceQueryable { get; set; } Property Value Type Description System.Nullable < Func < IQueryable , IQueryable >> Methods | Improve this Doc View Source AsCte<TSource>(IQueryable<TSource>) Specifies a temporary named result set, known as a common table expression (CTE). Declaration public static IQueryable<TSource> AsCte<TSource>(this IQueryable<TSource> source) Parameters Type Name Description IQueryable <TSource> source Source query. Returns Type Description IQueryable <TSource> Common table expression. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source AsCte<TSource>(IQueryable<TSource>, Nullable<String>) Specifies a temporary named result set, known as a common table expression (CTE). Declaration public static IQueryable<TSource> AsCte<TSource>(this IQueryable<TSource> source, string? name) Parameters Type Name Description IQueryable <TSource> source Source query. System.Nullable < System.String > name Common table expression name. Returns Type Description IQueryable <TSource> Common table expression. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source AsQueryable<TElement>(IEnumerable<TElement>, IDataContext) Converts a generic to Linq To DB query. Declaration public static IQueryable<TElement> AsQueryable<TElement>(this IEnumerable<TElement> source, IDataContext dataContext) Parameters Type Name Description IEnumerable <TElement> source A sequence to convert. IDataContext dataContext Database connection context. Returns Type Description IQueryable <TElement> An that represents the input sequence. Type Parameters Name Description TElement The type of the elements of source . | Improve this Doc View Source AsSubQuery<TSource>(IQueryable<TSource>) Defines that sub-query is mandatory for source query. Declaration public static IQueryable<TSource> AsSubQuery<TSource>(this IQueryable<TSource> source) Parameters Type Name Description IQueryable <TSource> source Source data query. Returns Type Description IQueryable <TSource> Query covered in sub-query. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source AsSubQuery<TKey, TElement>(IQueryable<IGrouping<TKey, TElement>>) Defines that sub-query is mandatory for grouping query. Declaration public static IQueryable<TKey> AsSubQuery<TKey, TElement>(this IQueryable<IGrouping<TKey, TElement>> grouping) Parameters Type Name Description IQueryable < IGrouping <TKey, TElement>> grouping Source data query. Returns Type Description IQueryable <TKey> Query covered in sub-query. Type Parameters Name Description TKey The type of the key of the . TElement The type of the values in the . | Improve this Doc View Source AsUpdatable<T>(IQueryable<T>) Casts query to IUpdatable<T> query. Declaration public static IUpdatable<T> AsUpdatable<T>(this IQueryable<T> source) Parameters Type Name Description IQueryable <T> source Source query. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Query record type. | Improve this Doc View Source CrossJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, TResult>>) Defines cross join between two sub-queries or tables. Declaration public static IQueryable<TResult> CrossJoin<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source DatabaseName<T>(ITable<T>, Nullable<String>) Overrides database name with new name for current query. This call will have effect only for databases that support database name in fully-qualified table name. Supported by: Access, DB2, MySQL, PostgreSQL, SAP HANA, SQLite, Informix, SQL Server, Sybase ASE. Requires schema name (see ): DB2, SAP HANA, PostgreSQL. PostgreSQL supports only name of current database. Declaration public static ITable<T> DatabaseName<T>(this ITable<T> table, string? name) Parameters Type Name Description ITable <T> table Table-like query source. System.Nullable < System.String > name Name of database. Returns Type Description ITable <T> Table-like query source with new database name. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source Delete<T>(IQueryable<T>) Executes delete operation, using source query as filter for records, that should be deleted. Declaration public static int Delete<T>(this IQueryable<T> source) Parameters Type Name Description IQueryable <T> source Query that returns records to delete. Returns Type Description System.Int32 Number of deleted records. Type Parameters Name Description T Mapping class for delete operation target table. | Improve this Doc View Source Delete<T>(IQueryable<T>, Expression<Func<T, Boolean>>) Executes delete operation, using source query as initial filter for records, that should be deleted, and predicate expression as additional filter. Declaration public static int Delete<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate) Parameters Type Name Description IQueryable <T> source Query that returns records to delete. Expression < Func <T, System.Boolean >> predicate Filter expression, to specify what records from source should be deleted. Returns Type Description System.Int32 Number of deleted records. Type Parameters Name Description T Mapping class for delete operation target table. | Improve this Doc View Source DeleteAsync<T>(IQueryable<T>, CancellationToken) Executes delete operation asynchronously, using source query as filter for records, that should be deleted. Declaration public static async Task<int> DeleteAsync<T>(this IQueryable<T> source, CancellationToken token = null) Parameters Type Name Description IQueryable <T> source Query that returns records to delete. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of deleted records. Type Parameters Name Description T Mapping class for delete operation target table. | Improve this Doc View Source DeleteAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, CancellationToken) Executes delete operation asynchronously, using source query as initial filter for records, that should be deleted, and predicate expression as additional filter. Declaration public static async Task<int> DeleteAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, CancellationToken token = null) Parameters Type Name Description IQueryable <T> source Query that returns records to delete. Expression < Func <T, System.Boolean >> predicate Filter expression, to specify what records from source should be deleted. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of deleted records. Type Parameters Name Description T Mapping class for delete operation target table. | Improve this Doc View Source DeleteWhenMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>) Adds new delete operation to merge and returns new merge command with added operation. This operation removes record in target table for each record that was matched in source and target, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> DeleteWhenMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source DeleteWhenMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>) Adds new delete operation to merge and returns new merge command with added operation. This operation removes record in target table for each record that was matched in source and target, if it was matched by operation predicate and wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> DeleteWhenMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TSource, System.Boolean >> searchCondition Operation execution condition over target and source records. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source DeleteWhenNotMatchedBySource<TTarget, TSource>(IMergeableSource<TTarget, TSource>) IMPORTANT: This operation supported only by Microsoft SQL Server. Adds new delete by source operation to merge and returns new merge command with added operation. This operation removes record in target table for each record that was matched only in target and wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> DeleteWhenNotMatchedBySource<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source DeleteWhenNotMatchedBySourceAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, Boolean>>) IMPORTANT: This operation supported only by Microsoft SQL Server. Adds new delete by source operation to merge and returns new merge command with added operation. This operation removes record in target table for each record that was matched only in target and passed filtering with operation predicate, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> DeleteWhenNotMatchedBySourceAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, bool>> searchCondition) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, System.Boolean >> searchCondition Operation execution condition over target record. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source DeleteWithOutput<TSource>(IQueryable<TSource>) Deletes records from source query and returns deleted records. Declaration public static IEnumerable<TSource> DeleteWithOutput<TSource>(this IQueryable<TSource> source) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for delete operation. Returns Type Description IEnumerable <TSource> Enumeration of records. Type Parameters Name Description TSource Source query record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source DeleteWithOutput<TSource, TOutput>(IQueryable<TSource>, Expression<Func<TSource, TOutput>>) Deletes records from source query into target table and returns deleted records. Declaration public static IEnumerable<TOutput> DeleteWithOutput<TSource, TOutput>(this IQueryable<TSource> source, Expression<Func<TSource, TOutput>> outputExpression) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for delete operation. Expression < Func <TSource, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. Returns Type Description IEnumerable <TOutput> Enumeration of records. Type Parameters Name Description TSource Source query record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source DeleteWithOutputAsync<TSource>(IQueryable<TSource>, CancellationToken) Deletes records from source query into target table asynchronously and returns deleted records. Declaration public static Task<TSource[]> DeleteWithOutputAsync<TSource>(this IQueryable<TSource> source, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for delete operation. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TSource[]> Array of records. Type Parameters Name Description TSource Source query record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source DeleteWithOutputAsync<TSource, TOutput>(IQueryable<TSource>, Expression<Func<TSource, TOutput>>, CancellationToken) Deletes records from source query into target table asynchronously and returns deleted records. Declaration public static Task<TOutput[]> DeleteWithOutputAsync<TSource, TOutput>(this IQueryable<TSource> source, Expression<Func<TSource, TOutput>> outputExpression, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for delete operation. Expression < Func <TSource, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TOutput[]> Array of records. Type Parameters Name Description TSource Source query record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source DeleteWithOutputInto<TSource, TOutput>(IQueryable<TSource>, ITable<TOutput>) Deletes records from source query into target table and outputs deleted records into outputTable . Declaration public static int DeleteWithOutputInto<TSource, TOutput>(this IQueryable<TSource> source, ITable<TOutput> outputTable) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for delete operation. ITable <TOutput> outputTable Output table. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description TSource Source query record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source DeleteWithOutputInto<TSource, TOutput>(IQueryable<TSource>, ITable<TOutput>, Expression<Func<TSource, TOutput>>) Deletes records from source query into target table and outputs deleted records into outputTable . Declaration public static int DeleteWithOutputInto<TSource, TOutput>(this IQueryable<TSource> source, ITable<TOutput> outputTable, Expression<Func<TSource, TOutput>> outputExpression) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for delete operation. ITable <TOutput> outputTable Output table. Expression < Func <TSource, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description TSource Source query record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source DeleteWithOutputIntoAsync<TSource, TOutput>(IQueryable<TSource>, ITable<TOutput>, CancellationToken) Deletes records from source query into target table asynchronously and outputs deleted records into outputTable . Declaration public static Task<int> DeleteWithOutputIntoAsync<TSource, TOutput>(this IQueryable<TSource> source, ITable<TOutput> outputTable, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for delete operation. ITable <TOutput> outputTable Output table. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source DeleteWithOutputIntoAsync<TSource, TOutput>(IQueryable<TSource>, ITable<TOutput>, Expression<Func<TSource, TOutput>>, CancellationToken) Deletes records from source query into target table asynchronously and outputs deleted records into outputTable . Declaration public static Task<int> DeleteWithOutputIntoAsync<TSource, TOutput>(this IQueryable<TSource> source, ITable<TOutput> outputTable, Expression<Func<TSource, TOutput>> outputExpression, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for delete operation. ITable <TOutput> outputTable Output table. Expression < Func <TSource, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source DisableGuard<TKey, TElement>(IQueryable<IGrouping<TKey, TElement>>) Disables grouping guard for particular grouping query. Declaration public static IQueryable<IGrouping<TKey, TElement>> DisableGuard<TKey, TElement>(this IQueryable<IGrouping<TKey, TElement>> grouping) Parameters Type Name Description IQueryable < IGrouping <TKey, TElement>> grouping Source data query. Returns Type Description IQueryable < IGrouping <TKey, TElement>> Query with suppressed grouping guard. Type Parameters Name Description TKey The type of the key of the . TElement The type of the values in the . | Improve this Doc View Source Drop<T>(ITable<T>, Boolean) Drops database table. Declaration public static int Drop<T>(this ITable<T> target, bool throwExceptionIfNotExists = true) Parameters Type Name Description ITable <T> target Dropped table. System.Boolean throwExceptionIfNotExists If false , any exception during drop operation will be silently catched and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . Returns Type Description System.Int32 Number of affected records. Usually -1 as it is not data modification operation. Type Parameters Name Description T Table record type. | Improve this Doc View Source DropAsync<T>(ITable<T>, Boolean, CancellationToken) Drops database table asynchronously. Declaration public static async Task<int> DropAsync<T>(this ITable<T> target, bool throwExceptionIfNotExists = true, CancellationToken token = null) Parameters Type Name Description ITable <T> target Dropped table. System.Boolean throwExceptionIfNotExists If false , any exception during drop operation will be silently catched and 0 returned. This behavior is not correct and will be fixed in future to mask only missing table exceptions. Tracked by issue . Default value: true . CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Usually -1 as it is not data modification operation. Type Parameters Name Description T Table record type. | Improve this Doc View Source ElementAt<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Selects record at specified position from source query. If query doesn't return enough records, will be thrown. Declaration public static TSource ElementAt<TSource>(this IQueryable<TSource> source, Expression<Func<int>> index) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < System.Int32 >> index Expression that defines index of record to select. Returns Type Description TSource Record at specified position. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source ElementAtAsync<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, CancellationToken) Selects record at specified position from source query asynchronously. If query doesn't return enough records, will be thrown. Declaration public static async Task<TSource> ElementAtAsync<TSource>(this IQueryable<TSource> source, Expression<Func<int>> index, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < System.Int32 >> index Expression that defines index of record to select. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TSource> Record at specified position. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source ElementAtOrDefault<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Selects record at specified position from source query. Declaration public static TSource ElementAtOrDefault<TSource>(this IQueryable<TSource> source, Expression<Func<int>> index) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < System.Int32 >> index Expression that defines index of record to select. Returns Type Description TSource Record at specified position or default value, if source query doesn't have record with such index. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source ElementAtOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, CancellationToken) Selects record at specified position from source query asynchronously. Declaration public static async Task<TSource> ElementAtOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<int>> index, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < System.Int32 >> index Expression that defines index of record to select. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TSource> Record at specified position or default value, if source query doesn't have record with such index. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source ExceptAll<TSource>(IQueryable<TSource>, IEnumerable<TSource>) Produces the set difference of two sequences. Declaration public static IQueryable<TSource> ExceptAll<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2) Parameters Type Name Description IQueryable <TSource> source1 An whose elements that are not also in source2 will be returned. IEnumerable <TSource> source2 An whose elements that also occur in the first sequence will not appear in the returned sequence. Returns Type Description IQueryable <TSource> An that contains the set difference of the two sequences. Type Parameters Name Description TSource The type of the elements of the input sequences. | Improve this Doc View Source FullJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Defines full outer join between two sub-queries or tables. Declaration public static IQueryable<TSource> FullJoin<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Right join operand. Expression < Func <TSource, System.Boolean >> predicate Join predicate. Returns Type Description IQueryable <TSource> Right operand. Type Parameters Name Description TSource Type of record for right join operand. | Improve this Doc View Source FullJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) Defines full outer join between two sub-queries or tables. Declaration public static IQueryable<TResult> FullJoin<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, Expression<Func<TOuter, TInner, bool>> predicate, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. Expression < Func <TOuter, TInner, System.Boolean >> predicate Join predicate. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source GenerateTestString(IQueryable, Boolean) Generates test source code for specified query. This method could be usefull to debug queries and attach test code to linq2db issue reports. Declaration public static string GenerateTestString(this IQueryable query, bool mangleNames = false) Parameters Type Name Description IQueryable query Query to test. System.Boolean mangleNames Should we use real names for used types, members and namespace or generate obfuscated names. Returns Type Description System.String Test source code. | Improve this Doc View Source HasCreateIfNotExists(TableOptions) Declaration public static bool HasCreateIfNotExists(this TableOptions tableOptions) Parameters Type Name Description TableOptions tableOptions Returns Type Description System.Boolean | Improve this Doc View Source HasDropIfExists(TableOptions) Declaration public static bool HasDropIfExists(this TableOptions tableOptions) Parameters Type Name Description TableOptions tableOptions Returns Type Description System.Boolean | Improve this Doc View Source HasIsGlobalTemporaryData(TableOptions) Declaration public static bool HasIsGlobalTemporaryData(this TableOptions tableOptions) Parameters Type Name Description TableOptions tableOptions Returns Type Description System.Boolean | Improve this Doc View Source HasIsGlobalTemporaryStructure(TableOptions) Declaration public static bool HasIsGlobalTemporaryStructure(this TableOptions tableOptions) Parameters Type Name Description TableOptions tableOptions Returns Type Description System.Boolean | Improve this Doc View Source HasIsLocalTemporaryData(TableOptions) Declaration public static bool HasIsLocalTemporaryData(this TableOptions tableOptions) Parameters Type Name Description TableOptions tableOptions Returns Type Description System.Boolean | Improve this Doc View Source HasIsLocalTemporaryStructure(TableOptions) Declaration public static bool HasIsLocalTemporaryStructure(this TableOptions tableOptions) Parameters Type Name Description TableOptions tableOptions Returns Type Description System.Boolean | Improve this Doc View Source HasIsTemporary(TableOptions) Declaration public static bool HasIsTemporary(this TableOptions tableOptions) Parameters Type Name Description TableOptions tableOptions Returns Type Description System.Boolean | Improve this Doc View Source HasIsTransactionTemporaryData(TableOptions) Declaration public static bool HasIsTransactionTemporaryData(this TableOptions tableOptions) Parameters Type Name Description TableOptions tableOptions Returns Type Description System.Boolean | Improve this Doc View Source HasUniqueKey<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) Records unique key for IQueryable. It allows sub-query to be optimized out in LEFT JOIN if columns from sub-query are not used in final projection and predicate. Declaration public static IQueryable<TSource> HasUniqueKey<TSource, TKey>(this IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector) Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TKey>> keySelector A function to specify which fields are unique. Returns Type Description IQueryable <TSource> Query covered in sub-query. Type Parameters Name Description TSource Source query record type. TKey Key type. | Improve this Doc View Source Having<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Filters source query using HAVING SQL clause. In general you don't need to use this method as linq2db is able to propely identify current context for method and generate HAVING clause. More details . Declaration public static IQueryable<TSource> Having<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Source query to filter. Expression < Func <TSource, System.Boolean >> predicate Filtering expression. Returns Type Description IQueryable <TSource> Filtered query. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source IgnoreFilters<TSource>(IQueryable<TSource>, Type[]) Disables Query Filters in current query. Declaration public static IQueryable<TSource> IgnoreFilters<TSource>(this IQueryable<TSource> source, params Type[] entityTypes) Parameters Type Name Description IQueryable <TSource> source Source query. Type [] entityTypes Optional types with which filters should be disabled. Returns Type Description IQueryable <TSource> Query with disabled filters. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source InlineParameters<TSource>(IQueryable<TSource>) Inline parameters in query which can be converted to SQL Literal. Declaration public static IQueryable<TSource> InlineParameters<TSource>(this IQueryable<TSource> source) Parameters Type Name Description IQueryable <TSource> source Source data query. Returns Type Description IQueryable <TSource> Query with inlined parameters. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source InnerJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Defines inner join between two sub-queries or tables. Declaration public static IQueryable<TSource> InnerJoin<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Right join operand. Expression < Func <TSource, System.Boolean >> predicate Join predicate. Returns Type Description IQueryable <TSource> Right operand. Type Parameters Name Description TSource Type of record for right join operand. | Improve this Doc View Source InnerJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) Defines inner or outer join between two sub-queries or tables. Declaration public static IQueryable<TResult> InnerJoin<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, Expression<Func<TOuter, TInner, bool>> predicate, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. Expression < Func <TOuter, TInner, System.Boolean >> predicate Join predicate. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source Insert<T>(ITable<T>, Expression<Func<T>>) Inserts single record into target table. Declaration public static int Insert<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source Insert<T>(IValueInsertable<T>) Executes insert query. Declaration public static int Insert<T>(this IValueInsertable<T> source) Parameters Type Name Description IValueInsertable <T> source Insert query. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description T Target table record type. | Improve this Doc View Source Insert<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Inserts records from source query into target table. Declaration public static int Insert<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source Insert<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Executes configured insert query. Declaration public static int Insert<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) Inserts single record into target table asynchronously. Declaration public static async Task<int> InsertAsync<T>(this ITable<T> target, Expression<Func<T>> setter, CancellationToken token = null) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertAsync<T>(IValueInsertable<T>, CancellationToken) Executes insert query asynchronously. Declaration public static async Task<int> InsertAsync<T>(this IValueInsertable<T> source, CancellationToken token = null) Parameters Type Name Description IValueInsertable <T> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Inserts records from source query into target table asynchronously. Declaration public static async Task<int> InsertAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) Executes configured insert query asynchronously. Declaration public static async Task<int> InsertAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, CancellationToken token = null) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Nullable<Expression<Func<T, T>>>) Inserts new record into target table or updates existing record if record with the same primary key value already exists in target table. When null value or expression without field setters passed to onDuplicateKeyUpdateSetter , this method implements INSERT IF NOT EXISTS logic. Declaration public static int InsertOrUpdate<T>(this ITable<T> target, Expression<Func<T>> insertSetter, Expression<Func<T, T>>? onDuplicateKeyUpdateSetter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> insertSetter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. System.Nullable < Expression < Func <T, T>>> onDuplicateKeyUpdateSetter Updated record constructor expression. Expression supports only target table record new expression with field initializers. Accepts updated record as parameter. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description T Table record type. | Improve this Doc View Source InsertOrUpdate<T>(ITable<T>, Expression<Func<T>>, Nullable<Expression<Func<T, T>>>, Expression<Func<T>>) Inserts new record into target table or updates existing record if record with the same key value already exists in target table. When null value or expression without field setters passed to onDuplicateKeyUpdateSetter , this method implements INSERT IF NOT EXISTS logic. Declaration public static int InsertOrUpdate<T>(this ITable<T> target, Expression<Func<T>> insertSetter, Expression<Func<T, T>>? onDuplicateKeyUpdateSetter, Expression<Func<T>> keySelector) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> insertSetter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. System.Nullable < Expression < Func <T, T>>> onDuplicateKeyUpdateSetter Updated record constructor expression. Expression supports only target table record new expression with field initializers. Accepts updated record as parameter. Expression < Func <T>> keySelector Key fields selector to specify what fields and values must be used as key fields for selection between insert and update operations. Expression supports only target table record new expression with field initializers for each key field. Assigned key field value will be used as key value by operation type selector. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description T Table record type. | Improve this Doc View Source InsertOrUpdateAsync<T>(ITable<T>, Expression<Func<T>>, Nullable<Expression<Func<T, T>>>, CancellationToken) Asynchronously inserts new record into target table or updates existing record if record with the same primary key value already exists in target table. When null value or expression without field setters passed to onDuplicateKeyUpdateSetter , this method implements INSERT IF NOT EXISTS logic. Declaration public static async Task<int> InsertOrUpdateAsync<T>(this ITable<T> target, Expression<Func<T>> insertSetter, Expression<Func<T, T>>? onDuplicateKeyUpdateSetter, CancellationToken token = null) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> insertSetter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. System.Nullable < Expression < Func <T, T>>> onDuplicateKeyUpdateSetter Updated record constructor expression. Expression supports only target table record new expression with field initializers. Accepts updated record as parameter. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description T Table record type. | Improve this Doc View Source InsertOrUpdateAsync<T>(ITable<T>, Expression<Func<T>>, Nullable<Expression<Func<T, T>>>, Expression<Func<T>>, CancellationToken) Asynchronously inserts new record into target table or updates existing record if record with the same key value already exists in target table. When null value or expression without field setters passed to onDuplicateKeyUpdateSetter , this method implements INSERT IF NOT EXISTS logic. Declaration public static async Task<int> InsertOrUpdateAsync<T>(this ITable<T> target, Expression<Func<T>> insertSetter, Expression<Func<T, T>>? onDuplicateKeyUpdateSetter, Expression<Func<T>> keySelector, CancellationToken token = null) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> insertSetter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. System.Nullable < Expression < Func <T, T>>> onDuplicateKeyUpdateSetter Updated record constructor expression. Expression supports only target table record new expression with field initializers. Accepts updated record as parameter. Expression < Func <T>> keySelector Key fields selector to specify what fields and values must be used as key fields for selection between insert and update operations. Expression supports only target table record new expression with field initializers for each key field. Assigned key field value will be used as key value by operation type selector. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description T Table record type. | Improve this Doc View Source InsertWhenNotMatched<TTarget>(IMergeableSource<TTarget, TTarget>) Adds new insert operation to merge and returns new merge command with added operation. This operation inserts new record to target table using data from the same fields of source record for each new record from source, not processed by previous operations. Declaration public static IMergeable<TTarget, TTarget> InsertWhenNotMatched<TTarget>(this IMergeableSource<TTarget, TTarget> merge) Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source InsertWhenNotMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TSource, TTarget>>) Adds new insert operation to merge and returns new merge command with added operation. This operation inserts new record to target table using user-defined values for target columns for each new record from source, not processed by previous operations. Declaration public static IMergeable<TTarget, TSource> InsertWhenNotMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TSource, TTarget>> setter Create record expression using source record. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source InsertWhenNotMatchedAnd<TTarget>(IMergeableSource<TTarget, TTarget>, Expression<Func<TTarget, Boolean>>) Adds new insert operation to merge and returns new merge command with added operation. This operation inserts new record to target table using data from the same fields of source record for each new record from source that passes filtering with specified predicate, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TTarget> InsertWhenNotMatchedAnd<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, bool>> searchCondition) Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Expression < Func <TTarget, System.Boolean >> searchCondition Operation execution condition over source record. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source InsertWhenNotMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TSource, Boolean>>, Expression<Func<TSource, TTarget>>) Adds new insert operation to merge and returns new merge command with added operation. This operation inserts new record to target table using user-defined values for target columns for each new record from source that passes filtering with specified predicate, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> InsertWhenNotMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TSource, bool>> searchCondition, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TSource, System.Boolean >> searchCondition Operation execution condition over source record. Expression < Func <TSource, TTarget>> setter Create record expression using source record. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source InsertWithDecimalIdentity<T>(ITable<T>, Expression<Func<T>>) Inserts single record into target table and returns identity value of inserted record as value. Declaration public static decimal InsertWithDecimalIdentity<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. Returns Type Description System.Decimal Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithDecimalIdentity<T>(IValueInsertable<T>) Executes insert query and returns identity value of inserted record as value. Declaration public static decimal? InsertWithDecimalIdentity<T>(this IValueInsertable<T> source) Parameters Type Name Description IValueInsertable <T> source Insert query. Returns Type Description System.Nullable < System.Decimal > Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithDecimalIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Inserts records from source query into target table and returns identity value of last inserted record as value. Declaration public static decimal? InsertWithDecimalIdentity<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Returns Type Description System.Nullable < System.Decimal > Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithDecimalIdentity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Executes configured insert query and returns identity value of last inserted record as value. Declaration public static decimal? InsertWithDecimalIdentity<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Returns Type Description System.Nullable < System.Decimal > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithDecimalIdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) Inserts single record into target table asynchronously and returns identity value of inserted record as value. Declaration public static async Task<decimal> InsertWithDecimalIdentityAsync<T>(this ITable<T> target, Expression<Func<T>> setter, CancellationToken token = null) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Decimal > Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithDecimalIdentityAsync<T>(IValueInsertable<T>, CancellationToken) Executes insert query asynchronously and returns identity value of inserted record as value. Declaration public static async Task<decimal?> InsertWithDecimalIdentityAsync<T>(this IValueInsertable<T> source, CancellationToken token = null) Parameters Type Name Description IValueInsertable <T> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Nullable < System.Decimal >> Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithDecimalIdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Inserts records from source query into target table asynchronously and returns identity value of last inserted record as value. Declaration public static async Task<decimal?> InsertWithDecimalIdentityAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Nullable < System.Decimal >> Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithDecimalIdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) Executes configured insert query asynchronously and returns identity value of last inserted record as value. Declaration public static async Task<decimal?> InsertWithDecimalIdentityAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, CancellationToken token = null) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Nullable < System.Decimal >> Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithIdentity<T>(ITable<T>, Expression<Func<T>>) Inserts single record into target table and returns identity value of inserted record. Declaration public static object InsertWithIdentity<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. Returns Type Description System.Object Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithIdentity<T>(IValueInsertable<T>) Executes insert query and returns identity value of inserted record. Declaration public static object InsertWithIdentity<T>(this IValueInsertable<T> source) Parameters Type Name Description IValueInsertable <T> source Insert query. Returns Type Description System.Object Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithIdentity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Inserts records from source query into target table and returns identity value of last inserted record. Declaration public static object InsertWithIdentity<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Returns Type Description System.Object Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithIdentity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Executes configured insert query and returns identity value of last inserted record. Declaration public static object InsertWithIdentity<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Returns Type Description System.Object Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithIdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) Inserts single record into target table asynchronously and returns identity value of inserted record. Declaration public static async Task<object> InsertWithIdentityAsync<T>(this ITable<T> target, Expression<Func<T>> setter, CancellationToken token = null) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Object > Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithIdentityAsync<T>(IValueInsertable<T>, CancellationToken) Executes insert query asynchronously and returns identity value of inserted record. Declaration public static async Task<object> InsertWithIdentityAsync<T>(this IValueInsertable<T> source, CancellationToken token = null) Parameters Type Name Description IValueInsertable <T> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Object > Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithIdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Inserts records from source query into target table asynchronously and returns identity value of last inserted record. Declaration public static async Task<object> InsertWithIdentityAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Object > Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithIdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) Executes configured insert query asynchronously and returns identity value of last inserted record. Declaration public static async Task<object> InsertWithIdentityAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, CancellationToken token = null) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Object > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithInt32Identity<T>(ITable<T>, Expression<Func<T>>) Inserts single record into target table and returns identity value of inserted record as value. Declaration public static int InsertWithInt32Identity<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. Returns Type Description System.Int32 Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithInt32Identity<T>(IValueInsertable<T>) Executes insert query and returns identity value of inserted record as value. Declaration public static int? InsertWithInt32Identity<T>(this IValueInsertable<T> source) Parameters Type Name Description IValueInsertable <T> source Insert query. Returns Type Description System.Nullable < System.Int32 > Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithInt32Identity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Inserts records from source query into target table and returns identity value of last inserted record as value. Declaration public static int? InsertWithInt32Identity<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Returns Type Description System.Nullable < System.Int32 > Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithInt32Identity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Executes configured insert query and returns identity value of last inserted record as value. Declaration public static int? InsertWithInt32Identity<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Returns Type Description System.Nullable < System.Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithInt32IdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) Inserts single record into target table asynchronously and returns identity value of inserted record as value. Declaration public static async Task<int> InsertWithInt32IdentityAsync<T>(this ITable<T> target, Expression<Func<T>> setter, CancellationToken token = null) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithInt32IdentityAsync<T>(IValueInsertable<T>, CancellationToken) Executes insert query asynchronously and returns identity value of inserted record as value. Declaration public static async Task<int?> InsertWithInt32IdentityAsync<T>(this IValueInsertable<T> source, CancellationToken token = null) Parameters Type Name Description IValueInsertable <T> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Nullable < System.Int32 >> Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithInt32IdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Inserts records from source query into target table asynchronously and returns identity value of last inserted record as value. Declaration public static async Task<int?> InsertWithInt32IdentityAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Nullable < System.Int32 >> Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithInt32IdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) Executes configured insert query asynchronously and returns identity value of last inserted record as value. Declaration public static async Task<int?> InsertWithInt32IdentityAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, CancellationToken token = null) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Nullable < System.Int32 >> Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithInt64Identity<T>(ITable<T>, Expression<Func<T>>) Inserts single record into target table and returns identity value of inserted record as value. Declaration public static long InsertWithInt64Identity<T>(this ITable<T> target, Expression<Func<T>> setter) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. Returns Type Description System.Int64 Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithInt64Identity<T>(IValueInsertable<T>) Executes insert query and returns identity value of inserted record as value. Declaration public static long? InsertWithInt64Identity<T>(this IValueInsertable<T> source) Parameters Type Name Description IValueInsertable <T> source Insert query. Returns Type Description System.Nullable < System.Int64 > Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithInt64Identity<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Inserts records from source query into target table and returns identity value of last inserted record as value. Declaration public static long? InsertWithInt64Identity<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Returns Type Description System.Nullable < System.Int64 > Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithInt64Identity<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Executes configured insert query and returns identity value of last inserted record as value. Declaration public static long? InsertWithInt64Identity<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Returns Type Description System.Nullable < System.Int64 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithInt64IdentityAsync<T>(ITable<T>, Expression<Func<T>>, CancellationToken) Inserts single record into target table asynchronously and returns identity value of inserted record as value. Declaration public static async Task<long> InsertWithInt64IdentityAsync<T>(this ITable<T> target, Expression<Func<T>> setter, CancellationToken token = null) Parameters Type Name Description ITable <T> target Target table. Expression < Func <T>> setter Insert expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int64 > Inserted record's identity value. Type Parameters Name Description T Inserted record type. | Improve this Doc View Source InsertWithInt64IdentityAsync<T>(IValueInsertable<T>, CancellationToken) Executes insert query asynchronously and returns identity value of inserted record as value. Declaration public static async Task<long?> InsertWithInt64IdentityAsync<T>(this IValueInsertable<T> source, CancellationToken token = null) Parameters Type Name Description IValueInsertable <T> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Nullable < System.Int64 >> Inserted record's identity value. Type Parameters Name Description T Target table record type. | Improve this Doc View Source InsertWithInt64IdentityAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Inserts records from source query into target table asynchronously and returns identity value of last inserted record as value. Declaration public static async Task<long?> InsertWithInt64IdentityAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Nullable < System.Int64 >> Last inserted record's identity value. Type Parameters Name Description TSource Source query record type. TTarget Target table record type | Improve this Doc View Source InsertWithInt64IdentityAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) Executes configured insert query asynchronously and returns identity value of last inserted record as value. Declaration public static async Task<long?> InsertWithInt64IdentityAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, CancellationToken token = null) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Nullable < System.Int64 >> Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source InsertWithOutput<TTarget>(ITable<TTarget>, TTarget) Inserts single record into target table and returns inserted record. Declaration public static TTarget InsertWithOutput<TTarget>(this ITable<TTarget> target, TTarget obj) Parameters Type Name Description ITable <TTarget> target Target table. TTarget obj Object with data to insert. Returns Type Description TTarget Inserted record. Type Parameters Name Description TTarget Inserted record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutput<TTarget>(ITable<TTarget>, Expression<Func<TTarget>>) Inserts single record into target table and returns inserted record. Declaration public static TTarget InsertWithOutput<TTarget>(this ITable<TTarget> target, Expression<Func<TTarget>> setter) Parameters Type Name Description ITable <TTarget> target Target table. Expression < Func <TTarget>> setter Insert expression. Expression supports only target table record new expression with field initializers. Returns Type Description TTarget Inserted record. Type Parameters Name Description TTarget Inserted record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutput<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Inserts records from source query into target table and returns newly created records. Declaration public static IEnumerable<TTarget> InsertWithOutput<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Returns Type Description IEnumerable <TTarget> Enumeration of records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutput<TTarget, TOutput>(ITable<TTarget>, Expression<Func<TTarget>>, Expression<Func<TTarget, TOutput>>) Inserts single record into target table and returns inserted record. Declaration public static TOutput InsertWithOutput<TTarget, TOutput>(this ITable<TTarget> target, Expression<Func<TTarget>> setter, Expression<Func<TTarget, TOutput>> outputExpression) Parameters Type Name Description ITable <TTarget> target Target table. Expression < Func <TTarget>> setter Insert expression. Expression supports only target table record new expression with field initializers. Expression < Func <TTarget, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. Returns Type Description TOutput Inserted record. Type Parameters Name Description TTarget Inserted record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutput<TSource, TTarget>(ISelectInsertable<TSource, TTarget>) Executes configured insert query and returns inserted record. Declaration public static TTarget InsertWithOutput<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Returns Type Description TTarget Inserted record. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutput<TSource, TTarget, TOutput>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, Expression<Func<TTarget, TOutput>>) Inserts records from source query into target table and returns newly created records. Declaration public static IEnumerable<TOutput> InsertWithOutput<TSource, TTarget, TOutput>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, Expression<Func<TTarget, TOutput>> outputExpression) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Expression < Func <TTarget, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. Returns Type Description IEnumerable <TOutput> Enumeration of records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputAsync<TTarget>(ITable<TTarget>, TTarget, CancellationToken) Inserts single record into target table asynchronously and returns inserted record. Declaration public static Task<TTarget> InsertWithOutputAsync<TTarget>(this ITable<TTarget> target, TTarget obj, CancellationToken token = null) Parameters Type Name Description ITable <TTarget> target Target table. TTarget obj Object with data to insert. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TTarget> Inserted record. Type Parameters Name Description TTarget Inserted record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputAsync<TTarget>(ITable<TTarget>, Expression<Func<TTarget>>, CancellationToken) Inserts single record into target table asynchronously and returns inserted record. Declaration public static Task<TTarget> InsertWithOutputAsync<TTarget>(this ITable<TTarget> target, Expression<Func<TTarget>> setter, CancellationToken token = null) Parameters Type Name Description ITable <TTarget> target Target table. Expression < Func <TTarget>> setter Insert expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TTarget> Inserted record. Type Parameters Name Description TTarget Inserted record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Inserts records from source query into target table asynchronously and returns newly created records. Declaration public static Task<TTarget[]> InsertWithOutputAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TTarget[]> Array of records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputAsync<TTarget, TOutput>(ITable<TTarget>, Expression<Func<TTarget>>, Expression<Func<TTarget, TOutput>>, CancellationToken) Inserts single record into target table asynchronously and returns inserted record. Declaration public static Task<TOutput> InsertWithOutputAsync<TTarget, TOutput>(this ITable<TTarget> target, Expression<Func<TTarget>> setter, Expression<Func<TTarget, TOutput>> outputExpression, CancellationToken token = null) Parameters Type Name Description ITable <TTarget> target Target table. Expression < Func <TTarget>> setter Insert expression. Expression supports only target table record new expression with field initializers. Expression < Func <TTarget, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TOutput> Inserted record. Type Parameters Name Description TTarget Inserted record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, CancellationToken) Executes configured insert query asynchronously and returns inserted record. Declaration public static Task<TTarget> InsertWithOutputAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, CancellationToken token = null) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TTarget> Inserted record. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputAsync<TSource, TTarget, TOutput>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, Expression<Func<TTarget, TOutput>>, CancellationToken) Inserts records from source query into target table asynchronously and returns newly created records. Declaration public static Task<TOutput[]> InsertWithOutputAsync<TSource, TTarget, TOutput>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, Expression<Func<TTarget, TOutput>> outputExpression, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. Expression < Func <TTarget, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TOutput[]> Array of records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputInto<TTarget>(ITable<TTarget>, Expression<Func<TTarget>>, ITable<TTarget>) Inserts single record into target table and outputs that record into outputTable . Declaration public static int InsertWithOutputInto<TTarget>(this ITable<TTarget> target, Expression<Func<TTarget>> setter, ITable<TTarget> outputTable) Parameters Type Name Description ITable <TTarget> target Target table. Expression < Func <TTarget>> setter Insert expression. Expression supports only target table record new expression with field initializers. ITable <TTarget> outputTable Output table. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description TTarget Inserted record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputInto<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, ITable<TTarget>) Inserts records from source query into target table and outputs newly created records into outputTable . Declaration public static int InsertWithOutputInto<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, ITable<TTarget> outputTable) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. ITable <TTarget> outputTable Output table. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputInto<TTarget, TOutput>(ITable<TTarget>, Expression<Func<TTarget>>, ITable<TOutput>, Expression<Func<TTarget, TOutput>>) Inserts single record into target table and outputs that record into outputTable . Declaration public static int InsertWithOutputInto<TTarget, TOutput>(this ITable<TTarget> target, Expression<Func<TTarget>> setter, ITable<TOutput> outputTable, Expression<Func<TTarget, TOutput>> outputExpression) Parameters Type Name Description ITable <TTarget> target Target table. Expression < Func <TTarget>> setter Insert expression. Expression supports only target table record new expression with field initializers. ITable <TOutput> outputTable Output table. Expression < Func <TTarget, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description TTarget Inserted record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputInto<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, ITable<TTarget>) Executes configured insert query and returns inserted record. Declaration public static int InsertWithOutputInto<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, ITable<TTarget> outputTable) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. ITable <TTarget> outputTable Output table. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputInto<TSource, TTarget, TOutput>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, ITable<TOutput>, Expression<Func<TTarget, TOutput>>) Inserts records from source query into target table and outputs inserted records into outputTable . Declaration public static int InsertWithOutputInto<TSource, TTarget, TOutput>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, ITable<TOutput> outputTable, Expression<Func<TTarget, TOutput>> outputExpression) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. ITable <TOutput> outputTable Output table. Expression < Func <TTarget, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputIntoAsync<TTarget>(ITable<TTarget>, Expression<Func<TTarget>>, ITable<TTarget>, CancellationToken) Inserts single record into target table asynchronously and outputs that record into outputTable . Declaration public static Task<int> InsertWithOutputIntoAsync<TTarget>(this ITable<TTarget> target, Expression<Func<TTarget>> setter, ITable<TTarget> outputTable, CancellationToken token = null) Parameters Type Name Description ITable <TTarget> target Target table. Expression < Func <TTarget>> setter Insert expression. Expression supports only target table record new expression with field initializers. ITable <TTarget> outputTable Output table. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description TTarget Inserted record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputIntoAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, ITable<TTarget>, CancellationToken) Inserts records from source query into target table asynchronously and outputs inserted records into outputTable . Declaration public static Task<int> InsertWithOutputIntoAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, ITable<TTarget> outputTable, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. ITable <TTarget> outputTable Output table. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputIntoAsync<TTarget, TOutput>(ITable<TTarget>, Expression<Func<TTarget>>, ITable<TOutput>, Expression<Func<TTarget, TOutput>>, CancellationToken) Inserts single record into target table asynchronously and outputs that record into outputTable . Declaration public static Task<int> InsertWithOutputIntoAsync<TTarget, TOutput>(this ITable<TTarget> target, Expression<Func<TTarget>> setter, ITable<TOutput> outputTable, Expression<Func<TTarget, TOutput>> outputExpression, CancellationToken token = null) Parameters Type Name Description ITable <TTarget> target Target table. Expression < Func <TTarget>> setter Insert expression. Expression supports only target table record new expression with field initializers. ITable <TOutput> outputTable Output table. Expression < Func <TTarget, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description TTarget Inserted record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputIntoAsync<TSource, TTarget>(ISelectInsertable<TSource, TTarget>, ITable<TTarget>, CancellationToken) Executes configured insert query asynchronously and returns inserted record. Declaration public static Task<int> InsertWithOutputIntoAsync<TSource, TTarget>(this ISelectInsertable<TSource, TTarget> source, ITable<TTarget> outputTable, CancellationToken token = null) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. ITable <TTarget> outputTable Output table. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source InsertWithOutputIntoAsync<TSource, TTarget, TOutput>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, ITable<TOutput>, Expression<Func<TTarget, TOutput>>, CancellationToken) Inserts records from source query into target table asynchronously and outputs inserted records into outputTable . Declaration public static Task<int> InsertWithOutputIntoAsync<TSource, TTarget, TOutput>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, ITable<TOutput> outputTable, Expression<Func<TTarget, TOutput>> outputExpression, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Inserted record constructor expression. Expression supports only target table record new expression with field initializers. ITable <TOutput> outputTable Output table. Expression < Func <TTarget, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source IntersectAll<TSource>(IQueryable<TSource>, IEnumerable<TSource>) Produces the set intersection of two sequences. Declaration public static IQueryable<TSource> IntersectAll<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2) Parameters Type Name Description IQueryable <TSource> source1 A sequence whose elements that also appear in source2 are returned. IEnumerable <TSource> source2 A sequence whose elements that also appear in the first sequence are returned. Returns Type Description IQueryable <TSource> A sequence that contains the set intersection of the two sequences. Type Parameters Name Description TSource The type of the elements of the input sequences. | Improve this Doc View Source Into<T>(IDataContext, ITable<T>) Starts insert operation LINQ query definition. Declaration public static IValueInsertable<T> Into<T>(this IDataContext dataContext, ITable<T> target) Parameters Type Name Description IDataContext dataContext Database connection context. ITable <T> target Target table. Returns Type Description IValueInsertable <T> Insertable source query. Type Parameters Name Description T Target table mapping class. | Improve this Doc View Source Into<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>) Converts LINQ query into insert query with source query data as data to insert. Declaration public static ISelectInsertable<TSource, TTarget> Into<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target) Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Returns Type Description ISelectInsertable <TSource, TTarget> Insertable source query. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. | Improve this Doc View Source IsSet(TableOptions) Declaration public static bool IsSet(this TableOptions tableOptions) Parameters Type Name Description TableOptions tableOptions Returns Type Description System.Boolean | Improve this Doc View Source IsTemporaryOptionSet(TableOptions) Declaration public static bool IsTemporaryOptionSet(this TableOptions tableOptions) Parameters Type Name Description TableOptions tableOptions Returns Type Description System.Boolean | Improve this Doc View Source Join<TSource>(IQueryable<TSource>, SqlJoinType, Expression<Func<TSource, Boolean>>) Defines inner or outer join between two sub-queries or tables. Declaration public static IQueryable<TSource> Join<TSource>(this IQueryable<TSource> source, SqlJoinType joinType, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Right join operand. SqlJoinType joinType Type of join. Expression < Func <TSource, System.Boolean >> predicate Join predicate. Returns Type Description IQueryable <TSource> Right operand. Type Parameters Name Description TSource Type of record for right join operand. | Improve this Doc View Source Join<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, SqlJoinType, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) Defines inner or outer join between two sub-queries or tables. Declaration public static IQueryable<TResult> Join<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, SqlJoinType joinType, Expression<Func<TOuter, TInner, bool>> predicate, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. SqlJoinType joinType Type of join. Expression < Func <TOuter, TInner, System.Boolean >> predicate Join predicate. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source LeftJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Defines left outer join between two sub-queries or tables. Declaration public static IQueryable<TSource> LeftJoin<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Right join operand. Expression < Func <TSource, System.Boolean >> predicate Join predicate. Returns Type Description IQueryable <TSource> Right operand. Type Parameters Name Description TSource Type of record for right join operand. | Improve this Doc View Source LeftJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) Defines left outer join between two sub-queries or tables. Declaration public static IQueryable<TResult> LeftJoin<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, Expression<Func<TOuter, TInner, bool>> predicate, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. Expression < Func <TOuter, TInner, System.Boolean >> predicate Join predicate. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source LoadWith<TEntity, TProperty>(IQueryable<TEntity>, Expression<Func<TEntity, TProperty>>) Specifies associations that should be loaded for each loaded record from current table. All associations, specified in selector expression, will be loaded. Take into account that use of this method could require multiple queries to load all requested associations. Declaration public static ILoadWithQueryable<TEntity, TProperty> LoadWith<TEntity, TProperty>(this IQueryable<TEntity> source, Expression<Func<TEntity, TProperty>> selector) where TEntity : class Parameters Type Name Description IQueryable <TEntity> source The source query. Expression < Func <TEntity, TProperty>> selector A lambda expression representing navigation property to be included ( t => t.Property1 ). Returns Type Description ILoadWithQueryable <TEntity, TProperty> Returns new query with related data included. Type Parameters Name Description TEntity Type of entity being queried. TProperty Type of the related entity to be included. Examples Following query loads records from Table1 with Reference association, loaded for each Table1 record. db.Table1.LoadWith(r => r.Reference); Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record. db.Table1.LoadWith(r => r.Reference1.Reference2); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2); Following query loads records from Table1 with References collection association loaded for each Table1 record. db.Table1.LoadWith(r => r.References); Following query loads records from Table1 with References collection association loaded for each Table1 record. Also it limits loaded records. db.Table1.LoadWith(r => r.References.Where(e => !e.IsDeleted).Take(10)); Following query loads records from Table1 with: - Reference1 collection association loaded for each Table1 record; - Reference2 collection association for each loaded Reference1 record; - Reference3 association for each loaded Reference2 record. Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records. db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3); | Improve this Doc View Source LoadWith<TEntity, TProperty>(IQueryable<TEntity>, Expression<Func<TEntity, TProperty>>, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>>) Specifies associations that should be loaded for each loaded record from current table. All associations, specified in selector expression, will be loaded. Take into account that use of this method could require multiple queries to load all requested associations. loadFunc parameter could be used to define additional association loading logic like filters or loading of more associations. Declaration public static ILoadWithQueryable<TEntity, TProperty> LoadWith<TEntity, TProperty>(this IQueryable<TEntity> source, Expression<Func<TEntity, TProperty>> selector, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>> loadFunc) where TEntity : class Parameters Type Name Description IQueryable <TEntity> source The source query. Expression < Func <TEntity, TProperty>> selector A lambda expression representing navigation property to be included ( t => t.Property1 ). Expression < Func < IQueryable <TProperty>, IQueryable <TProperty>>> loadFunc Defines additional logic for association load query. Returns Type Description ILoadWithQueryable <TEntity, TProperty> Returns new query with related data included. Type Parameters Name Description TEntity Type of entity being queried. TProperty Type of the related entity to be included. Examples Following query loads records from Table1 with Reference association, loaded for each Table1 record. db.Table1.LoadWith(r => r.Reference); Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record. db.Table1.LoadWith(r => r.Reference1.Reference2); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2); Following query loads records from Table1 with References collection association loaded for each Table1 record. db.Table1.LoadWith(r => r.References); Following query loads records from Table1 with: - Reference1 collection association loaded for each Table1 record; - Reference2 collection association for each loaded Reference1 record; - Reference3 association for each loaded Reference2 record. Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records. db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3); Following query loads records from Table1 with References collection association loaded for each Table1 record, where References record contains only records without \"exclude\" text in Name property. db.Table1.LoadWith(r => r.References, r => r.Where(rr => !rr.Name.Contains(\"exclude\"))); Following query loads records from Table1 with References1 collection association loaded for each Table1 record, where References1 record also load Reference2 association. db.Table1.LoadWith(r => r.References1, r => r.LoadWith(rr => rr.Reference2)); | Improve this Doc View Source LoadWith<TEntity, TProperty>(IQueryable<TEntity>, Expression<Func<TEntity, IEnumerable<TProperty>>>, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>>) Specifies associations that should be loaded for each loaded record from current table. All associations, specified in selector expression, will be loaded. Take into account that use of this method could require multiple queries to load all requested associations. loadFunc parameter could be used to define additional association loading logic like filters or loading of more associations. Declaration public static ILoadWithQueryable<TEntity, TProperty> LoadWith<TEntity, TProperty>(this IQueryable<TEntity> source, Expression<Func<TEntity, IEnumerable<TProperty>>> selector, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>> loadFunc) where TEntity : class Parameters Type Name Description IQueryable <TEntity> source The source query. Expression < Func <TEntity, IEnumerable <TProperty>>> selector A lambda expression representing navigation property to be included ( t => t.Property1 ). Expression < Func < IQueryable <TProperty>, IQueryable <TProperty>>> loadFunc Defines additional logic for association load query. Returns Type Description ILoadWithQueryable <TEntity, TProperty> Returns new query with related data included. Type Parameters Name Description TEntity Type of entity being queried. TProperty Type of the related entity to be included. Examples Following query loads records from Table1 with Reference association, loaded for each Table1 record. db.Table1.LoadWith(r => r.Reference); Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record. db.Table1.LoadWith(r => r.Reference1.Reference2); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2); Following query loads records from Table1 with References collection association loaded for each Table1 record. db.Table1.LoadWith(r => r.References); Following query loads records from Table1 with: - Reference1 collection association loaded for each Table1 record; - Reference2 collection association for each loaded Reference1 record; - Reference3 association for each loaded Reference2 record. Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records. db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3); Following query loads records from Table1 with References collection association loaded for each Table1 record, where References record contains only records without \"exclude\" text in Name property. db.Table1.LoadWith(r => r.References, r => r.Where(rr => !rr.Name.Contains(\"exclude\"))); Following query loads records from Table1 with References1 collection association loaded for each Table1 record, where References1 record also load Reference2 association. db.Table1.LoadWith(r => r.References1, r => r.LoadWith(rr => rr.Reference2)); | Improve this Doc View Source LoadWithAsTable<T>(ITable<T>, Expression<Func<T, Nullable<Object>>>) Specifies associations, that should be loaded for each loaded record from current table. All associations, specified in selector expression, will be loaded. Take into account that use of this method could require multiple queries to load all requested associations. Some usage examples: // loads records from Table1 with Reference association loaded for each Table1 record db.Table1.LoadWithAsTable(r => r.Reference); // loads records from Table1 with Reference1 association loaded for each Table1 record // loads records from Reference2 association for each loaded Reference1 record db.Table1.LoadWithAsTable(r => r.Reference1.Reference2); // loads records from Table1 with References collection association loaded for each Table1 record db.Table1.LoadWithAsTable(r => r.References); // loads records from Table1 with Reference1 collection association loaded for each Table1 record // loads records from Reference2 collection association for each loaded Reference1 record // loads records from Reference3 association for each loaded Reference2 record // note that a way you access collection association record (by index, using First() method) doesn't affect // query results and always select all records db.Table1.LoadWithAsTable(r => r.References1[0].References2.First().Reference3); Declaration public static ITable<T> LoadWithAsTable<T>(this ITable<T> table, Expression<Func<T, object?>> selector) Parameters Type Name Description ITable <T> table Table-like query source. Expression < Func <T, System.Nullable < System.Object >>> selector Association selection expression. Returns Type Description ITable <T> Table-like query source. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source Merge<TTarget>(IQueryable<TTarget>) Starts merge operation definition from a subquery. If the query is not a table or a cte, it will be converted into a cte as the merge target. Declaration public static IMergeableUsing<TTarget> Merge<TTarget>(this IQueryable<TTarget> target) Parameters Type Name Description IQueryable <TTarget> target Target table. Returns Type Description IMergeableUsing <TTarget> Returns merge command builder, that contains only target. Type Parameters Name Description TTarget Target record type. | Improve this Doc View Source Merge<TTarget>(ITable<TTarget>) Starts merge operation definition from target table. Declaration public static IMergeableUsing<TTarget> Merge<TTarget>(this ITable<TTarget> target) Parameters Type Name Description ITable <TTarget> target Target table. Returns Type Description IMergeableUsing <TTarget> Returns merge command builder, that contains only target. Type Parameters Name Description TTarget Target record type. | Improve this Doc View Source Merge<TTarget>(ITable<TTarget>, String) Starts merge operation definition from target table. Declaration public static IMergeableUsing<TTarget> Merge<TTarget>(this ITable<TTarget> target, string hint) Parameters Type Name Description ITable <TTarget> target Target table. System.String hint Database-specific merge hint. Returns Type Description IMergeableUsing <TTarget> Returns merge command builder, that contains only target. Type Parameters Name Description TTarget Target record type. | Improve this Doc View Source Merge<TTarget, TSource>(IMergeable<TTarget, TSource>) Executes merge command and returns total number of target records, affected by merge operations. Declaration public static int Merge<TTarget, TSource>(this IMergeable<TTarget, TSource> merge) Parameters Type Name Description IMergeable <TTarget, TSource> merge Merge command definition. Returns Type Description System.Int32 Returns number of target table records, affected by merge command. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source MergeAsync<TTarget, TSource>(IMergeable<TTarget, TSource>, CancellationToken) Executes merge command and returns total number of target records, affected by merge operations. Declaration public static Task<int> MergeAsync<TTarget, TSource>(this IMergeable<TTarget, TSource> merge, CancellationToken token = null) Parameters Type Name Description IMergeable <TTarget, TSource> merge Merge command definition. CancellationToken token Asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Returns number of target table records, affected by merge command. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source MergeInto<TTarget, TSource>(IQueryable<TSource>, IQueryable<TTarget>) Starts merge operation definition from source query. Declaration public static IMergeableOn<TTarget, TSource> MergeInto<TTarget, TSource>(this IQueryable<TSource> source, IQueryable<TTarget> target) Parameters Type Name Description IQueryable <TSource> source Source data query. IQueryable <TTarget> target Target query. If the query is not a table or a cte, it will be converted into a cte as the merge target. Returns Type Description IMergeableOn <TTarget, TSource> Returns merge command builder with source and target set. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source MergeInto<TTarget, TSource>(IQueryable<TSource>, ITable<TTarget>) Starts merge operation definition from source query. Declaration public static IMergeableOn<TTarget, TSource> MergeInto<TTarget, TSource>(this IQueryable<TSource> source, ITable<TTarget> target) Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Returns Type Description IMergeableOn <TTarget, TSource> Returns merge command builder with source and target set. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source MergeInto<TTarget, TSource>(IQueryable<TSource>, ITable<TTarget>, String) Starts merge operation definition from source query. Declaration public static IMergeableOn<TTarget, TSource> MergeInto<TTarget, TSource>(this IQueryable<TSource> source, ITable<TTarget> target, string hint) Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. System.String hint Database-specific merge hint. Returns Type Description IMergeableOn <TTarget, TSource> Returns merge command builder with source and target set. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source MergeWithOutput<TTarget, TSource, TOutput>(IMergeable<TTarget, TSource>, Expression<Func<String, TTarget, TTarget, TOutput>>) Executes merge command and returns output information, affected by merge operations. Declaration public static IEnumerable<TOutput> MergeWithOutput<TTarget, TSource, TOutput>(this IMergeable<TTarget, TSource> merge, Expression<Func<string, TTarget, TTarget, TOutput>> outputExpression) Parameters Type Name Description IMergeable <TTarget, TSource> merge Merge command definition. Expression < Func < System.String , TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. Returns Type Description IEnumerable <TOutput> Returns number of target table records, affected by merge command. Type Parameters Name Description TTarget Target record type. TSource Source record type. TOutput Output table record type. | Improve this Doc View Source MergeWithOutputAsync<TTarget, TSource, TOutput>(IMergeable<TTarget, TSource>, Expression<Func<String, TTarget, TTarget, TOutput>>) Executes merge command and returns output information, affected by merge operations. Declaration public static IAsyncEnumerable<TOutput> MergeWithOutputAsync<TTarget, TSource, TOutput>(this IMergeable<TTarget, TSource> merge, Expression<Func<string, TTarget, TTarget, TOutput>> outputExpression) Parameters Type Name Description IMergeable <TTarget, TSource> merge Merge command definition. Expression < Func < System.String , TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. Returns Type Description IAsyncEnumerable <TOutput> Returns number of target table records, affected by merge command. Type Parameters Name Description TTarget Target record type. TSource Source record type. TOutput Output table record type. | Improve this Doc View Source MergeWithOutputInto<TTarget, TSource, TOutput>(IMergeable<TTarget, TSource>, ITable<TOutput>, Expression<Func<String, TTarget, TTarget, TOutput>>) Executes merge command, inserts output information into table and returns total number of target records, affected by merge operations. Declaration public static int MergeWithOutputInto<TTarget, TSource, TOutput>(this IMergeable<TTarget, TSource> merge, ITable<TOutput> outputTable, Expression<Func<string, TTarget, TTarget, TOutput>> outputExpression) Parameters Type Name Description IMergeable <TTarget, TSource> merge Merge command definition. ITable <TOutput> outputTable Table which should handle output result. Expression < Func < System.String , TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Expression supports only record new expression with field initializers. Returns Type Description System.Int32 Returns number of target table records, affected by merge command. Type Parameters Name Description TTarget Target record type. TSource Source record type. TOutput Output table record type. | Improve this Doc View Source MergeWithOutputIntoAsync<TTarget, TSource, TOutput>(IMergeable<TTarget, TSource>, ITable<TOutput>, Expression<Func<String, TTarget, TTarget, TOutput>>, CancellationToken) Executes merge command, inserts output information into table and returns total number of target records, affected by merge operations. Declaration public static Task<int> MergeWithOutputIntoAsync<TTarget, TSource, TOutput>(this IMergeable<TTarget, TSource> merge, ITable<TOutput> outputTable, Expression<Func<string, TTarget, TTarget, TOutput>> outputExpression, CancellationToken token = null) Parameters Type Name Description IMergeable <TTarget, TSource> merge Merge command definition. ITable <TOutput> outputTable Table which should handle output result. Expression < Func < System.String , TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Optional asynchronous operation cancellation token. Expression supports only record new expression with field initializers. CancellationToken token Returns Type Description Task < System.Int32 > Returns number of target table records, affected by merge command. Type Parameters Name Description TTarget Target record type. TSource Source record type. TOutput Output table record type. | Improve this Doc View Source On<TTarget, TSource>(IMergeableOn<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>) Adds definition of matching of target and source records using match condition. Declaration public static IMergeableSource<TTarget, TSource> On<TTarget, TSource>(this IMergeableOn<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> matchCondition) Parameters Type Name Description IMergeableOn <TTarget, TSource> merge Merge command builder. Expression < Func <TTarget, TSource, System.Boolean >> matchCondition Rule to match/join target and source records. Returns Type Description IMergeableSource <TTarget, TSource> Returns merge command builder with source, target and match (ON) set. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source On<TTarget, TSource, TKey>(IMergeableOn<TTarget, TSource>, Expression<Func<TTarget, TKey>>, Expression<Func<TSource, TKey>>) Adds definition of matching of target and source records using key value. Declaration public static IMergeableSource<TTarget, TSource> On<TTarget, TSource, TKey>(this IMergeableOn<TTarget, TSource> merge, Expression<Func<TTarget, TKey>> targetKey, Expression<Func<TSource, TKey>> sourceKey) Parameters Type Name Description IMergeableOn <TTarget, TSource> merge Merge command builder. Expression < Func <TTarget, TKey>> targetKey Target record match key definition. Expression < Func <TSource, TKey>> sourceKey Source record match key definition. Returns Type Description IMergeableSource <TTarget, TSource> Returns merge command builder with source, target and match (ON) set. Type Parameters Name Description TTarget Target record type. TSource Source record type. TKey Source and target records join/match key type. | Improve this Doc View Source OnTargetKey<TTarget>(IMergeableOn<TTarget, TTarget>) Adds definition of matching of target and source records using primary key columns. Declaration public static IMergeableSource<TTarget, TTarget> OnTargetKey<TTarget>(this IMergeableOn<TTarget, TTarget> merge) Parameters Type Name Description IMergeableOn <TTarget, TTarget> merge Merge command builder. Returns Type Description IMergeableSource <TTarget, TTarget> Returns merge command builder with source, target and match (ON) set. Type Parameters Name Description TTarget Target record type. | Improve this Doc View Source Or(TableOptions, TableOptions) Declaration public static TableOptions Or(this TableOptions tableOptions, TableOptions additionalOptions) Parameters Type Name Description TableOptions tableOptions TableOptions additionalOptions Returns Type Description TableOptions | Improve this Doc View Source RemoveOrderBy<TSource>(IQueryable<TSource>) Removes ordering from current query. Declaration public static IQueryable<TSource> RemoveOrderBy<TSource>(this IQueryable<TSource> source) Parameters Type Name Description IQueryable <TSource> source Source query. Returns Type Description IQueryable <TSource> Unsorted query. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source RightJoin<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Defines right outer join between two sub-queries or tables. Declaration public static IQueryable<TSource> RightJoin<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate) Parameters Type Name Description IQueryable <TSource> source Right join operand. Expression < Func <TSource, System.Boolean >> predicate Join predicate. Returns Type Description IQueryable <TSource> Right operand. Type Parameters Name Description TSource Type of record for right join operand. | Improve this Doc View Source RightJoin<TOuter, TInner, TResult>(IQueryable<TOuter>, IQueryable<TInner>, Expression<Func<TOuter, TInner, Boolean>>, Expression<Func<TOuter, TInner, TResult>>) Defines right outer join between two sub-queries or tables. Declaration public static IQueryable<TResult> RightJoin<TOuter, TInner, TResult>(this IQueryable<TOuter> outer, IQueryable<TInner> inner, Expression<Func<TOuter, TInner, bool>> predicate, Expression<Func<TOuter, TInner, TResult>> resultSelector) Parameters Type Name Description IQueryable <TOuter> outer Left join operand. IQueryable <TInner> inner Right join operand. Expression < Func <TOuter, TInner, System.Boolean >> predicate Join predicate. Expression < Func <TOuter, TInner, TResult>> resultSelector A function to create a result element from two matching elements. Returns Type Description IQueryable <TResult> Right operand. Type Parameters Name Description TOuter Type of record for left join operand. TInner Type of record for right join operand. TResult The type of the result elements. | Improve this Doc View Source SchemaName<T>(ITable<T>, Nullable<String>) Overrides owner/schema name with new name for current query. This call will have effect only for databases that support owner/schema name in fully-qualified table name. Supported by: DB2, Oracle, PostgreSQL, Informix, SQL Server, Sybase ASE. Declaration public static ITable<T> SchemaName<T>(this ITable<T> table, string? name) Parameters Type Name Description ITable <T> table Table-like query source. System.Nullable < System.String > name Name of owner/schema. Returns Type Description ITable <T> Table-like query source with new owner/schema name. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source Select<T>(IDataContext, Expression<Func<T>>) Loads scalar value or record from database without explicit table source. Could be usefull for function calls, querying of database variables or properties, subqueries, execution of code on server side. Declaration public static T Select<T>(this IDataContext dataContext, Expression<Func<T>> selector) Parameters Type Name Description IDataContext dataContext Database connection context. Expression < Func <T>> selector Value selection expression. Returns Type Description T Requested value. Type Parameters Name Description T Type of result. | Improve this Doc View Source SelectAsync<T>(IDataContext, Expression<Func<T>>) Loads scalar value or record from database without explicit table source asynchronously. Could be usefull for function calls, querying of database variables or properties, subqueries, execution of code on server side. Declaration public static async Task<T> SelectAsync<T>(this IDataContext dataContext, Expression<Func<T>> selector) Parameters Type Name Description IDataContext dataContext Database connection context. Expression < Func <T>> selector Value selection expression. Returns Type Description Task <T> Requested value. Type Parameters Name Description T Type of result. | Improve this Doc View Source ServerName<T>(ITable<T>, Nullable<String>) Overrides linked server name with new name for current query. This call will have effect only for databases that support linked server name in fully-qualified table name. Supported by: SQL Server, Informix, Oracle, SAP HANA2. Declaration public static ITable<T> ServerName<T>(this ITable<T> table, string? name) Parameters Type Name Description ITable <T> table Table-like query source. System.Nullable < System.String > name Name of linked server. Returns Type Description ITable <T> Table-like query source with new linked server name. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source Set<T>(IQueryable<T>, Expression<Func<T, String>>) Adds update field expression to query. It can be any expression with string interpolation. Declaration public static IUpdatable<T> Set<T>(this IQueryable<T> source, Expression<Func<T, string>> setExpression) Parameters Type Name Description IQueryable <T> source Source query with records to update. Expression < Func <T, System.String >> setExpression Custom update expression. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. Examples The following example shows how to append string value to appropriate field. db.Users.Where(u => u.UserId == id) .Set(u => $\"{u.Name}\" += {str}\") .Update(); | Improve this Doc View Source Set<T>(IUpdatable<T>, Expression<Func<T, String>>) Adds update field expression to query. It can be any expression with string interpolation. Declaration public static IUpdatable<T> Set<T>(this IUpdatable<T> source, Expression<Func<T, string>> setExpression) Parameters Type Name Description IUpdatable <T> source Source query with records to update. Expression < Func <T, System.String >> setExpression Custom update expression. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. Examples The following example shows how to append string value to appropriate field. db.Users.Where(u => u.UserId == id) .AsUpdatable() .Set(u => $\"{u.Name}\" += {str}\") .Update(); | Improve this Doc View Source Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, TV) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IQueryable<T> source, Expression<Func<T, TV>> extract, TV value) Parameters Type Name Description IQueryable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. TV value Value, assigned to updated field. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IQueryable<T> source, Expression<Func<T, TV>> extract, Expression<Func<T, TV>> update) Parameters Type Name Description IQueryable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. Expression < Func <T, TV>> update Updated field setter expression. Uses updated record as parameter. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Set<T, TV>(IQueryable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IQueryable<T> source, Expression<Func<T, TV>> extract, Expression<Func<TV>> update) Parameters Type Name Description IQueryable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. Expression < Func <TV>> update Updated field setter expression. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, TV) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IUpdatable<T> source, Expression<Func<T, TV>> extract, TV value) Parameters Type Name Description IUpdatable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. TV value Value, assigned to updated field. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<T, TV>>) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IUpdatable<T> source, Expression<Func<T, TV>> extract, Expression<Func<T, TV>> update) Parameters Type Name Description IUpdatable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. Expression < Func <T, TV>> update Updated field setter expression. Uses updated record as parameter. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Set<T, TV>(IUpdatable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Adds update field expression to query. Declaration public static IUpdatable<T> Set<T, TV>(this IUpdatable<T> source, Expression<Func<T, TV>> extract, Expression<Func<TV>> update) Parameters Type Name Description IUpdatable <T> source Source query with records to update. Expression < Func <T, TV>> extract Updated field selector expression. Expression < Func <TV>> update Updated field setter expression. Returns Type Description IUpdatable <T> IUpdatable<T> query. Type Parameters Name Description T Updated record type. TV Updated field type. | Improve this Doc View Source Skip<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Ignores first N records from source query. Declaration public static IQueryable<TSource> Skip<TSource>(this IQueryable<TSource> source, Expression<Func<int>> count) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < System.Int32 >> count Expression that defines number of records to skip. Returns Type Description IQueryable <TSource> Query without skipped records. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source TableName<T>(ITable<T>, String) Overrides table or view name with new name for current query. Declaration public static ITable<T> TableName<T>(this ITable<T> table, string name) Parameters Type Name Description ITable <T> table Table-like query source. System.String name Name of table. Returns Type Description ITable <T> Table-like query source with new name. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source TagQuery<TSource>(IQueryable<TSource>, String) Adds a tag comment before generated query. The example below will produce following code before generated query: /* my tag */\\r\\n db.Table.TagQuery(\"my tag\"); Declaration public static IQueryable<TSource> TagQuery<TSource>(this IQueryable<TSource> source, string tagValue) Parameters Type Name Description IQueryable <TSource> source Source data query. System.String tagValue Tag text to be added as comment before generated query. Returns Type Description IQueryable <TSource> Query with tag. Type Parameters Name Description TSource Table record mapping class. | Improve this Doc View Source TagQuery<T>(ITable<T>, String) Adds a tag comment before generated query for table. The example below will produce following code before generated query: /* my tag */\\r\\n db.Table.TagQuery(\"my tag\"); Declaration public static ITable<T> TagQuery<T>(this ITable<T> table, string tagValue) Parameters Type Name Description ITable <T> table Table-like query source. System.String tagValue Tag text to be added as comment before generated query. Returns Type Description ITable <T> Table-like query source with tag. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>) Limits number of records, returned from query. Declaration public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, Expression<Func<int>> count) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < System.Int32 >> count Expression that defines number of records to select. Returns Type Description IQueryable <TSource> Query with limit applied. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source Take<TSource>(IQueryable<TSource>, Expression<Func<Int32>>, TakeHints) Limits number of records, returned from query. Allows to specify TAKE clause hints. Using this method may cause runtime LinqException if take hints are not supported by database. Declaration public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, Expression<Func<int>> count, TakeHints hints) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func < System.Int32 >> count Expression that defines SQL TAKE parameter value. TakeHints hints TakeHints hints for SQL TAKE clause. Returns Type Description IQueryable <TSource> Query with limit applied. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source Take<TSource>(IQueryable<TSource>, Int32, TakeHints) Limits number of records, returned from query. Allows to specify TAKE clause hints. Using this method may cause runtime LinqException if take hints are not supported by database. Declaration public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, int count, TakeHints hints) Parameters Type Name Description IQueryable <TSource> source Source query. System.Int32 count SQL TAKE parameter value. TakeHints hints TakeHints hints for SQL TAKE clause. Returns Type Description IQueryable <TSource> Query with limit applied. Type Parameters Name Description TSource Source table record type. | Improve this Doc View Source ThenLoad<TEntity, TPreviousProperty, TProperty>(ILoadWithQueryable<TEntity, TPreviousProperty>, Expression<Func<TPreviousProperty, TProperty>>) Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain. All associations, specified in selector expression, will be loaded. Take into account that use of this method could require multiple queries to load all requested associations. Declaration public static ILoadWithQueryable<TEntity, TProperty> ThenLoad<TEntity, TPreviousProperty, TProperty>(this ILoadWithQueryable<TEntity, TPreviousProperty> source, Expression<Func<TPreviousProperty, TProperty>> selector) where TEntity : class Parameters Type Name Description ILoadWithQueryable <TEntity, TPreviousProperty> source The source query. Expression < Func <TPreviousProperty, TProperty>> selector A lambda expression representing navigation property to be included ( t => t.Property1 ). Returns Type Description ILoadWithQueryable <TEntity, TProperty> Returns new query with related data included. Type Parameters Name Description TEntity Type of entity being queried. TPreviousProperty Type of parent association. TProperty Type of the related entity to be included. Examples Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record. db.Table1.LoadWith(r => r.Reference1.Reference2); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2); Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records. db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3); | Improve this Doc View Source ThenLoad<TEntity, TPreviousProperty, TProperty>(ILoadWithQueryable<TEntity, TPreviousProperty>, Expression<Func<TPreviousProperty, TProperty>>, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>>) Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain. All associations, specified in selector expression, will be loaded. Take into account that use of this method could require multiple queries to load all requested associations. loadFunc parameter could be used to define additional association loading logic like filters or loading of more associations. Declaration public static ILoadWithQueryable<TEntity, TProperty> ThenLoad<TEntity, TPreviousProperty, TProperty>(this ILoadWithQueryable<TEntity, TPreviousProperty> source, Expression<Func<TPreviousProperty, TProperty>> selector, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>> loadFunc) where TEntity : class Parameters Type Name Description ILoadWithQueryable <TEntity, TPreviousProperty> source The source query. Expression < Func <TPreviousProperty, TProperty>> selector A lambda expression representing navigation property to be included ( t => t.Property1 ). Expression < Func < IQueryable <TProperty>, IQueryable <TProperty>>> loadFunc Defines additional logic for association load query. Returns Type Description ILoadWithQueryable <TEntity, TProperty> Returns new query with related data included. Type Parameters Name Description TEntity Type of entity being queried. TPreviousProperty Type of parent association. TProperty Type of the related entity to be included. Examples Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record. db.Table1.LoadWith(r => r.Reference1.Reference2); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2); Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records. db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3); Following query loads records from Table1 with References1 collection association loaded for each Table1 record with References2 collection association loaded for each record in References1, with filter over References2 record to include only records without \"exclude\" text in Name property. db.Table1.LoadWith(r => r.References1).ThenLoad(r1 => r1.References2, r2 => r2.Where(rr2 => !rr2.Name.Contains(\"exclude\"))); | Improve this Doc View Source ThenLoad<TEntity, TPreviousProperty, TProperty>(ILoadWithQueryable<TEntity, TPreviousProperty>, Expression<Func<TPreviousProperty, IEnumerable<TProperty>>>, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>>) Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain. All associations, specified in selector expression, will be loaded. Take into account that use of this method could require multiple queries to load all requested associations. loadFunc parameter could be used to define additional association loading logic like filters or loading of more associations. Declaration public static ILoadWithQueryable<TEntity, TProperty> ThenLoad<TEntity, TPreviousProperty, TProperty>(this ILoadWithQueryable<TEntity, TPreviousProperty> source, Expression<Func<TPreviousProperty, IEnumerable<TProperty>>> selector, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>> loadFunc) where TEntity : class Parameters Type Name Description ILoadWithQueryable <TEntity, TPreviousProperty> source The source query. Expression < Func <TPreviousProperty, IEnumerable <TProperty>>> selector A lambda expression representing navigation property to be included ( t => t.Property1 ). Expression < Func < IQueryable <TProperty>, IQueryable <TProperty>>> loadFunc Defines additional logic for association load query. Returns Type Description ILoadWithQueryable <TEntity, TProperty> Returns new query with related data included. Type Parameters Name Description TEntity Type of entity being queried. TPreviousProperty Type of parent association. TProperty Type of the related entity to be included. Examples Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record. db.Table1.LoadWith(r => r.Reference1.Reference2); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2); Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records. db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3); Following query loads records from Table1 with References1 collection association loaded for each Table1 record with References2 collection association loaded for each record in References1, with filter over References2 record to include only records without \"exclude\" text in Name property. db.Table1.LoadWith(r => r.References1).ThenLoad(r1 => r1.References2, r2 => r2.Where(rr2 => !rr2.Name.Contains(\"exclude\"))); | Improve this Doc View Source ThenLoad<TEntity, TPreviousProperty, TProperty>(ILoadWithQueryable<TEntity, IEnumerable<TPreviousProperty>>, Expression<Func<TPreviousProperty, TProperty>>) Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain. All associations, specified in selector expression, will be loaded. Take into account that use of this method could require multiple queries to load all requested associations. Declaration public static ILoadWithQueryable<TEntity, TProperty> ThenLoad<TEntity, TPreviousProperty, TProperty>(this ILoadWithQueryable<TEntity, IEnumerable<TPreviousProperty>> source, Expression<Func<TPreviousProperty, TProperty>> selector) where TEntity : class Parameters Type Name Description ILoadWithQueryable <TEntity, IEnumerable <TPreviousProperty>> source The source query. Expression < Func <TPreviousProperty, TProperty>> selector A lambda expression representing navigation property to be included ( t => t.Property1 ). Returns Type Description ILoadWithQueryable <TEntity, TProperty> Returns new query with related data included. Type Parameters Name Description TEntity Type of entity being queried. TPreviousProperty Type of parent association. TProperty Type of the related entity to be included. Examples Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record. db.Table1.LoadWith(r => r.Reference1.Reference2); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2); Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records. db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3); | Improve this Doc View Source ThenLoad<TEntity, TPreviousProperty, TProperty>(ILoadWithQueryable<TEntity, IEnumerable<TPreviousProperty>>, Expression<Func<TPreviousProperty, TProperty>>, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>>) Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain. All associations, specified in selector expression, will be loaded. Take into account that use of this method could require multiple queries to load all requested associations. loadFunc parameter could be used to define additional association loading logic like filters or loading of more associations. Declaration public static ILoadWithQueryable<TEntity, TProperty> ThenLoad<TEntity, TPreviousProperty, TProperty>(this ILoadWithQueryable<TEntity, IEnumerable<TPreviousProperty>> source, Expression<Func<TPreviousProperty, TProperty>> selector, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>> loadFunc) where TEntity : class Parameters Type Name Description ILoadWithQueryable <TEntity, IEnumerable <TPreviousProperty>> source The source query. Expression < Func <TPreviousProperty, TProperty>> selector A lambda expression representing navigation property to be included ( t => t.Property1 ). Expression < Func < IQueryable <TProperty>, IQueryable <TProperty>>> loadFunc Defines additional logic for association load query. Returns Type Description ILoadWithQueryable <TEntity, TProperty> Returns new query with related data included. Type Parameters Name Description TEntity Type of entity being queried. TPreviousProperty Type of parent association. TProperty Type of the related entity to be included. Examples Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record. db.Table1.LoadWith(r => r.Reference1.Reference2); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2); Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records. db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3); Following query loads records from Table1 with References1 collection association loaded for each Table1 record with References2 collection association loaded for each record in References1, with filter over References2 record to include only records without \"exclude\" text in Name property. db.Table1.LoadWith(r => r.References1).ThenLoad(r1 => r1.References2, r2 => r2.Where(rr2 => !rr2.Name.Contains(\"exclude\"))); | Improve this Doc View Source ThenLoad<TEntity, TPreviousProperty, TProperty>(ILoadWithQueryable<TEntity, IEnumerable<TPreviousProperty>>, Expression<Func<TPreviousProperty, IEnumerable<TProperty>>>, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>>) Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain. All associations, specified in selector expression, will be loaded. Take into account that use of this method could require multiple queries to load all requested associations. loadFunc parameter could be used to define additional association loading logic like filters or loading of more associations. Declaration public static ILoadWithQueryable<TEntity, TProperty> ThenLoad<TEntity, TPreviousProperty, TProperty>(this ILoadWithQueryable<TEntity, IEnumerable<TPreviousProperty>> source, Expression<Func<TPreviousProperty, IEnumerable<TProperty>>> selector, Expression<Func<IQueryable<TProperty>, IQueryable<TProperty>>> loadFunc) where TEntity : class Parameters Type Name Description ILoadWithQueryable <TEntity, IEnumerable <TPreviousProperty>> source The source query. Expression < Func <TPreviousProperty, IEnumerable <TProperty>>> selector A lambda expression representing navigation property to be included ( t => t.Property1 ). Expression < Func < IQueryable <TProperty>, IQueryable <TProperty>>> loadFunc Defines additional logic for association load query. Returns Type Description ILoadWithQueryable <TEntity, TProperty> Returns new query with related data included. Type Parameters Name Description TEntity Type of entity being queried. TPreviousProperty Type of parent association. TProperty Type of the related entity to be included. Examples Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record. db.Table1.LoadWith(r => r.Reference1.Reference2); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2); Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records. db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3); Same query using ThenLoad extension. db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3); Following query loads records from Table1 with References1 collection association loaded for each Table1 record with References2 collection association loaded for each record in References1, with filter over References2 record to include only records without \"exclude\" text in Name property. db.Table1.LoadWith(r => r.References1).ThenLoad(r1 => r1.References2, r2 => r2.Where(rr2 => !rr2.Name.Contains(\"exclude\"))); | Improve this Doc View Source ThenOrBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) Adds ascending sort expression to a query. If query already sorted, existing sorting will be preserved and updated with new sort. Declaration public static IOrderedQueryable<TSource> ThenOrBy<TSource, TKey>(this IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func <TSource, TKey>> keySelector Sort expression selector. Returns Type Description IOrderedQueryable <TSource> Sorted query. Type Parameters Name Description TSource Source query record type. TKey Sort expression type. | Improve this Doc View Source ThenOrByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>) Adds descending sort expression to a query. If query already sorted, existing sorting will be preserved and updated with new sort. Declaration public static IOrderedQueryable<TSource> ThenOrByDescending<TSource, TKey>(this IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector) Parameters Type Name Description IQueryable <TSource> source Source query. Expression < Func <TSource, TKey>> keySelector Sort expression selector. Returns Type Description IOrderedQueryable <TSource> Sorted query. Type Parameters Name Description TSource Source query record type. TKey Sort expression type. | Improve this Doc View Source Truncate<T>(ITable<T>, Boolean) Truncates database table. Declaration public static int Truncate<T>(this ITable<T> target, bool resetIdentity = true) Parameters Type Name Description ITable <T> target Truncated table. System.Boolean resetIdentity Performs reset identity column. Returns Type Description System.Int32 Number of affected records. Usually -1 as it is not data modification operation. Type Parameters Name Description T Table record type. | Improve this Doc View Source TruncateAsync<T>(ITable<T>, Boolean, CancellationToken) Truncates database table asynchronously. Declaration public static async Task<int> TruncateAsync<T>(this ITable<T> target, bool resetIdentity = true, CancellationToken token = null) Parameters Type Name Description ITable <T> target Truncated table. System.Boolean resetIdentity Performs reset identity column. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Usually -1 as it is not data modification operation. Type Parameters Name Description T Table record type. | Improve this Doc View Source UnionAll<TSource>(IQueryable<TSource>, IEnumerable<TSource>) Concatenates two sequences, similar to . Declaration public static IQueryable<TSource> UnionAll<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2) Parameters Type Name Description IQueryable <TSource> source1 The first sequence to concatenate. IEnumerable <TSource> source2 The sequence to concatenate to the first sequence. Returns Type Description IQueryable <TSource> An that contains the concatenated elements of the two input sequences. Type Parameters Name Description TSource The type of the elements of the input sequences. | Improve this Doc View Source Update<T>(IQueryable<T>, Expression<Func<T, T>>) Executes update operation using source query as record filter. Declaration public static int Update<T>(this IQueryable<T> source, Expression<Func<T, T>> setter) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description System.Int32 Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source Update<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>) Executes update operation using source query as record filter with additional filter expression. Declaration public static int Update<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, Expression<Func<T, T>> setter) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, System.Boolean >> predicate Filter expression, to specify what records from source query should be updated. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description System.Int32 Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source Update<T>(IUpdatable<T>) Executes update operation for already configured update query. Declaration public static int Update<T>(this IUpdatable<T> source) Parameters Type Name Description IUpdatable <T> source Update query. Returns Type Description System.Int32 Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source Update<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>) Executes update-from-source operation against target table. Also see Update<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) method. Declaration public static int Update<TSource, TTarget>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table selection expression. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description System.Int32 Number of updated records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. | Improve this Doc View Source Update<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Executes update-from-source operation against target table. Declaration public static int Update<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description System.Int32 Number of updated records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. | Improve this Doc View Source UpdateAsync<T>(IQueryable<T>, Expression<Func<T, T>>, CancellationToken) Executes update operation asynchronously using source query as record filter. Declaration public static async Task<int> UpdateAsync<T>(this IQueryable<T> source, Expression<Func<T, T>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source UpdateAsync<T>(IQueryable<T>, Expression<Func<T, Boolean>>, Expression<Func<T, T>>, CancellationToken) Executes update operation asynchronously using source query as record filter with additional filter expression. Declaration public static async Task<int> UpdateAsync<T>(this IQueryable<T> source, Expression<Func<T, bool>> predicate, Expression<Func<T, T>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, System.Boolean >> predicate Filter expression, to specify what records from source query should be updated. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source UpdateAsync<T>(IUpdatable<T>, CancellationToken) Executes update operation asynchronously for already configured update query. Declaration public static async Task<int> UpdateAsync<T>(this IUpdatable<T> source, CancellationToken token = null) Parameters Type Name Description IUpdatable <T> source Update query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of updated records. Type Parameters Name Description T Updated table record type. | Improve this Doc View Source UpdateAsync<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, CancellationToken) Executes update-from-source operation asynchronously against target table. Also see UpdateAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) method. Declaration public static async Task<int> UpdateAsync<TSource, TTarget>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table selection expression. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of updated records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. | Improve this Doc View Source UpdateAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Executes update-from-source operation asynchronously against target table. Declaration public static async Task<int> UpdateAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of updated records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. | Improve this Doc View Source UpdateWhenMatched<TTarget>(IMergeableSource<TTarget, TTarget>) Adds new update operation to merge and returns new merge command with added operation. This operation updates record in target table using data from the same fields of source record for each record that was matched in source and target, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TTarget> UpdateWhenMatched<TTarget>(this IMergeableSource<TTarget, TTarget> merge) Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source UpdateWhenMatched<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, TTarget>>) Adds new update operation to merge and returns new merge command with added operation. This operation updates record in target table using user-defined values for target columns for each record that was matched in source and target, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> UpdateWhenMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, TTarget>> setter) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TSource, TTarget>> setter Update record expression using target and source records. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UpdateWhenMatchedAnd<TTarget>(IMergeableSource<TTarget, TTarget>, Expression<Func<TTarget, TTarget, Boolean>>) Adds new update operation to merge and returns new merge command with added operation. This operation updates record in target table using data from the same fields of source record for each record that was matched in source and target and passes filtering with specified predicate, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TTarget> UpdateWhenMatchedAnd<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> searchCondition) Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Expression < Func <TTarget, TTarget, System.Boolean >> searchCondition Operation execution condition over target and source records. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source UpdateWhenMatchedAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>) Adds new update operation to merge and returns new merge command with added operation. This operation updates record in target table using user-defined values for target columns for each record that was matched in source and target and passes filtering with specified predicate, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> UpdateWhenMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition, Expression<Func<TTarget, TSource, TTarget>> setter) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TSource, System.Boolean >> searchCondition Operation execution condition over target and source records. Expression < Func <TTarget, TSource, TTarget>> setter Update record expression using target and source records. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UpdateWhenMatchedAndThenDelete<TTarget>(IMergeableSource<TTarget, TTarget>, Expression<Func<TTarget, TTarget, Boolean>>, Expression<Func<TTarget, TTarget, Boolean>>) IMPORTANT: This operation supported only by Oracle Database. Adds new update with delete operation to merge and returns new merge command with added operation. This operation updates record in target table using data from the same fields of source record for each record that was matched in source and target and passes filtering with specified predicate, if it wasn't processed by previous operations. After that it removes updated records if they are matched by delete predicate. Declaration public static IMergeable<TTarget, TTarget> UpdateWhenMatchedAndThenDelete<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> searchCondition, Expression<Func<TTarget, TTarget, bool>> deleteCondition) Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Expression < Func <TTarget, TTarget, System.Boolean >> searchCondition Update execution condition over target and source records. Expression < Func <TTarget, TTarget, System.Boolean >> deleteCondition Delete execution condition over updated target and source records. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source UpdateWhenMatchedAndThenDelete<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>, Expression<Func<TTarget, TSource, Boolean>>) IMPORTANT: This operation supported only by Oracle Database. Adds new update with delete operation to merge and returns new merge command with added operation. This operation updates record in target table using user-defined values for target columns for each record that was matched in source and target and passes filtering with specified predicate, if it wasn't processed by previous operations. After that it removes updated records if they matched by delete predicate. Declaration public static IMergeable<TTarget, TSource> UpdateWhenMatchedAndThenDelete<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition, Expression<Func<TTarget, TSource, TTarget>> setter, Expression<Func<TTarget, TSource, bool>> deleteCondition) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TSource, System.Boolean >> searchCondition Update execution condition over target and source records. Expression < Func <TTarget, TSource, TTarget>> setter Update record expression using target and source records. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Expression < Func <TTarget, TSource, System.Boolean >> deleteCondition Delete execution condition over updated target and source records. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UpdateWhenMatchedThenDelete<TTarget>(IMergeableSource<TTarget, TTarget>, Expression<Func<TTarget, TTarget, Boolean>>) IMPORTANT: This operation supported only by Oracle Database. Adds new update with delete operation to merge and returns new merge command with added operation. This operation updates record in target table using data from the same fields of source record for each record that was matched in source and target, if it wasn't processed by previous operations. After that it removes updated records if they are matched by delete predicate. Declaration public static IMergeable<TTarget, TTarget> UpdateWhenMatchedThenDelete<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> deleteCondition) Parameters Type Name Description IMergeableSource <TTarget, TTarget> merge Merge command builder interface. Expression < Func <TTarget, TTarget, System.Boolean >> deleteCondition Delete execution condition over updated target and source records. Returns Type Description IMergeable <TTarget, TTarget> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target and source records type. | Improve this Doc View Source UpdateWhenMatchedThenDelete<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TSource, TTarget>>, Expression<Func<TTarget, TSource, Boolean>>) IMPORTANT: This operation supported only by Oracle Database. Adds new update with delete operation to merge and returns new merge command with added operation. This operation updates record in target table using user-defined values for target columns for each record that was matched in source and target, if it wasn't processed by previous operations. After that it removes updated records if they matched by delete predicate. Declaration public static IMergeable<TTarget, TSource> UpdateWhenMatchedThenDelete<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, TTarget>> setter, Expression<Func<TTarget, TSource, bool>> deleteCondition) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TSource, TTarget>> setter Update record expression using target and source records. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Expression < Func <TTarget, TSource, System.Boolean >> deleteCondition Delete execution condition over updated target and source records. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UpdateWhenNotMatchedBySource<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, TTarget>>) IMPORTANT: This operation supported only by Microsoft SQL Server. Adds new update by source operation to merge and returns new merge command with added operation. This operation updates record in target table for each record that was matched only in target using user-defined values for target columns, if it wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> UpdateWhenNotMatchedBySource<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TTarget>> setter) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, TTarget>> setter Update record expression using target record. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UpdateWhenNotMatchedBySourceAnd<TTarget, TSource>(IMergeableSource<TTarget, TSource>, Expression<Func<TTarget, Boolean>>, Expression<Func<TTarget, TTarget>>) IMPORTANT: This operation supported only by Microsoft SQL Server. Adds new update by source operation to merge and returns new merge command with added operation. This operation updates record in target table for each record that was matched only in target using user-defined values for target columns, if it passed filtering by operation predicate and wasn't processed by previous operations. Declaration public static IMergeable<TTarget, TSource> UpdateWhenNotMatchedBySourceAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, bool>> searchCondition, Expression<Func<TTarget, TTarget>> setter) Parameters Type Name Description IMergeableSource <TTarget, TSource> merge Merge command builder interface. Expression < Func <TTarget, System.Boolean >> searchCondition Operation execution condition over target record. Expression < Func <TTarget, TTarget>> setter Update record expression using target record. Expression should be a call to target record constructor with field/properties initializers to be recognized by API. Returns Type Description IMergeable <TTarget, TSource> Returns new merge command builder with new operation. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UpdateWithOutput<T>(IQueryable<T>, Expression<Func<T, T>>) Executes update operation using source query as record filter. Declaration public static IEnumerable<UpdateOutput<T>> UpdateWithOutput<T>(this IQueryable<T> source, Expression<Func<T, T>> setter) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description IEnumerable < UpdateOutput <T>> Deleted and inserted values for every record updated. Type Parameters Name Description T Updated table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutput<T>(IUpdatable<T>) Executes update operation using source query as record filter. Declaration public static IEnumerable<UpdateOutput<T>> UpdateWithOutput<T>(this IUpdatable<T> source) Parameters Type Name Description IUpdatable <T> source Source data query. Returns Type Description IEnumerable < UpdateOutput <T>> Deleted and inserted values for every record updated. Type Parameters Name Description T Updated table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutput<T, TOutput>(IQueryable<T>, Expression<Func<T, T>>, Expression<Func<T, T, TOutput>>) Executes update operation using source query as record filter. Declaration public static IEnumerable<TOutput> UpdateWithOutput<T, TOutput>(this IQueryable<T> source, Expression<Func<T, T>> setter, Expression<Func<T, T, TOutput>> outputExpression) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. Expression < Func <T, T, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( T deleted, T inserted). Expression supports only record new expression with field initializers. Returns Type Description IEnumerable <TOutput> Output values from the update statement. Type Parameters Name Description T Updated table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutput<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>) Executes update-from-source operation against target table. Declaration public static IEnumerable<UpdateOutput<TTarget>> UpdateWithOutput<TSource, TTarget>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description IEnumerable < UpdateOutput <TTarget>> Deleted and inserted values for every record updated. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutput<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Executes update-from-source operation against target table. Declaration public static IEnumerable<UpdateOutput<TTarget>> UpdateWithOutput<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) where TTarget : class Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description IEnumerable < UpdateOutput <TTarget>> Deleted and inserted values for every record updated. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutput<T, TOutput>(IUpdatable<T>, Expression<Func<T, T, TOutput>>) Executes update operation using source query as record filter. Declaration public static IEnumerable<TOutput> UpdateWithOutput<T, TOutput>(this IUpdatable<T> source, Expression<Func<T, T, TOutput>> outputExpression) Parameters Type Name Description IUpdatable <T> source Source data query. Expression < Func <T, T, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( T deleted, T inserted). Expression supports only record new expression with field initializers. Returns Type Description IEnumerable <TOutput> Output values from the update statement. Type Parameters Name Description T Updated table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutput<TSource, TTarget, TOutput>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget, TTarget, TOutput>>) Executes update-from-source operation against target table. Declaration public static IEnumerable<TOutput> UpdateWithOutput<TSource, TTarget, TOutput>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter, Expression<Func<TSource, TTarget, TTarget, TOutput>> outputExpression) Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Expression < Func <TSource, TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( TSource source, TTarget deleted, TTarget inserted). Expression supports only record new expression with field initializers. Returns Type Description IEnumerable <TOutput> Output values from the update statement. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutput<TSource, TTarget, TOutput>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget, TTarget, TOutput>>) Executes update-from-source operation against target table. Declaration public static IEnumerable<TOutput> UpdateWithOutput<TSource, TTarget, TOutput>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, Expression<Func<TSource, TTarget, TTarget, TOutput>> outputExpression) where TTarget : class Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Expression < Func <TSource, TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( TSource source, TTarget deleted, TTarget inserted). Expression supports only record new expression with field initializers. Returns Type Description IEnumerable <TOutput> Output values from the update statement. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputAsync<T>(IQueryable<T>, Expression<Func<T, T>>, CancellationToken) Executes update operation using source query as record filter. Declaration public static Task<UpdateOutput<T>[]> UpdateWithOutputAsync<T>(this IQueryable<T> source, Expression<Func<T, T>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < UpdateOutput <T>[]> Deleted and inserted values for every record updated. Type Parameters Name Description T Updated table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputAsync<T>(IUpdatable<T>, CancellationToken) Executes update operation using source query as record filter. Declaration public static Task<UpdateOutput<T>[]> UpdateWithOutputAsync<T>(this IUpdatable<T> source, CancellationToken token = null) Parameters Type Name Description IUpdatable <T> source Source data query. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < UpdateOutput <T>[]> Deleted and inserted values for every record updated. Type Parameters Name Description T Updated table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputAsync<T, TOutput>(IQueryable<T>, Expression<Func<T, T>>, Expression<Func<T, T, TOutput>>, CancellationToken) Executes update operation using source query as record filter. Declaration public static Task<TOutput[]> UpdateWithOutputAsync<T, TOutput>(this IQueryable<T> source, Expression<Func<T, T>> setter, Expression<Func<T, T, TOutput>> outputExpression, CancellationToken token = null) Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. Expression < Func <T, T, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( T deleted, T inserted). Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TOutput[]> Output values from the update statement. Type Parameters Name Description T Updated table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputAsync<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, CancellationToken) Executes update-from-source operation against target table. Declaration public static Task<UpdateOutput<TTarget>[]> UpdateWithOutputAsync<TSource, TTarget>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < UpdateOutput <TTarget>[]> Deleted and inserted values for every record updated. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, CancellationToken) Executes update-from-source operation against target table. Declaration public static Task<UpdateOutput<TTarget>[]> UpdateWithOutputAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, CancellationToken token = null) where TTarget : class Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < UpdateOutput <TTarget>[]> Deleted and inserted values for every record updated. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputAsync<T, TOutput>(IUpdatable<T>, Expression<Func<T, T, TOutput>>, CancellationToken) Executes update operation using source query as record filter. Declaration public static Task<TOutput[]> UpdateWithOutputAsync<T, TOutput>(this IUpdatable<T> source, Expression<Func<T, T, TOutput>> outputExpression, CancellationToken token = null) Parameters Type Name Description IUpdatable <T> source Source data query. Expression < Func <T, T, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( T deleted, T inserted). Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TOutput[]> Output values from the update statement. Type Parameters Name Description T Updated table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputAsync<TSource, TTarget, TOutput>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget, TTarget, TOutput>>, CancellationToken) Executes update-from-source operation against target table. Declaration public static Task<TOutput[]> UpdateWithOutputAsync<TSource, TTarget, TOutput>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter, Expression<Func<TSource, TTarget, TTarget, TOutput>> outputExpression, CancellationToken token = null) Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Expression < Func <TSource, TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( TSource source, TTarget deleted, TTarget inserted). Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TOutput[]> Output values from the update statement. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputAsync<TSource, TTarget, TOutput>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget, TTarget, TOutput>>, CancellationToken) Executes update-from-source operation against target table. Declaration public static Task<TOutput[]> UpdateWithOutputAsync<TSource, TTarget, TOutput>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, Expression<Func<TSource, TTarget, TTarget, TOutput>> outputExpression, CancellationToken token = null) where TTarget : class Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Expression < Func <TSource, TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( TSource source, TTarget deleted, TTarget inserted). Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task <TOutput[]> Output values from the update statement. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputInto<T>(IQueryable<T>, Expression<Func<T, T>>, ITable<T>) Executes update operation using source query as record filter. Declaration public static int UpdateWithOutputInto<T>(this IQueryable<T> source, Expression<Func<T, T>> setter, ITable<T> outputTable) where T : class Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. ITable <T> outputTable Output table. Returns Type Description System.Int32 Number of updated records. Type Parameters Name Description T Updated table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputInto<T>(IUpdatable<T>, ITable<T>) Executes update operation using source query as record filter. Declaration public static int UpdateWithOutputInto<T>(this IUpdatable<T> source, ITable<T> outputTable) where T : class Parameters Type Name Description IUpdatable <T> source Source data query. ITable <T> outputTable Output table. Returns Type Description System.Int32 Number of updated records. Type Parameters Name Description T Updated table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputInto<T, TOutput>(IQueryable<T>, Expression<Func<T, T>>, ITable<TOutput>, Expression<Func<T, T, TOutput>>) Executes update operation using source query as record filter. Declaration public static int UpdateWithOutputInto<T, TOutput>(this IQueryable<T> source, Expression<Func<T, T>> setter, ITable<TOutput> outputTable, Expression<Func<T, T, TOutput>> outputExpression) where TOutput : class Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. ITable <TOutput> outputTable Output table. Expression < Func <T, T, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( T deleted, T inserted). Expression supports only record new expression with field initializers. Returns Type Description System.Int32 Number of updated records. Type Parameters Name Description T Updated table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputInto<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, ITable<TTarget>) Executes update-from-source operation against target table. Declaration public static int UpdateWithOutputInto<TSource, TTarget>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter, ITable<TTarget> outputTable) where TTarget : class Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. ITable <TTarget> outputTable Output table. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputInto<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, ITable<TTarget>) Executes update-from-source operation against target table. Declaration public static int UpdateWithOutputInto<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, ITable<TTarget> outputTable) where TTarget : class Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. ITable <TTarget> outputTable Output table. Returns Type Description System.Int32 Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputInto<T, TOutput>(IUpdatable<T>, ITable<TOutput>, Expression<Func<T, T, TOutput>>) Executes update operation using source query as record filter. Declaration public static int UpdateWithOutputInto<T, TOutput>(this IUpdatable<T> source, ITable<TOutput> outputTable, Expression<Func<T, T, TOutput>> outputExpression) where TOutput : class Parameters Type Name Description IUpdatable <T> source Source data query. ITable <TOutput> outputTable Output table. Expression < Func <T, T, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( T deleted, T inserted). Expression supports only record new expression with field initializers. Returns Type Description System.Int32 Number of updated records. Type Parameters Name Description T Updated table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputInto<TSource, TTarget, TOutput>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, ITable<TOutput>, Expression<Func<TSource, TTarget, TTarget, TOutput>>) Executes update-from-source operation against target table. Declaration public static int UpdateWithOutputInto<TSource, TTarget, TOutput>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter, ITable<TOutput> outputTable, Expression<Func<TSource, TTarget, TTarget, TOutput>> outputExpression) where TOutput : class Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. ITable <TOutput> outputTable Output table. Expression < Func <TSource, TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( TSource source, TTarget deleted, TTarget inserted). Expression supports only record new expression with field initializers. Returns Type Description System.Int32 Output values from the update statement. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputInto<TSource, TTarget, TOutput>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, ITable<TOutput>, Expression<Func<TSource, TTarget, TTarget, TOutput>>) Executes update-from-source operation against target table. Declaration public static int UpdateWithOutputInto<TSource, TTarget, TOutput>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, ITable<TOutput> outputTable, Expression<Func<TSource, TTarget, TTarget, TOutput>> outputExpression) where TTarget : class where TOutput : class Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. ITable <TOutput> outputTable Output table. Expression < Func <TSource, TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( TSource source, TTarget deleted, TTarget inserted). Expression supports only record new expression with field initializers. Returns Type Description System.Int32 Output values from the update statement. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputIntoAsync<T>(IQueryable<T>, Expression<Func<T, T>>, ITable<T>, CancellationToken) Executes update operation using source query as record filter. Declaration public static Task<int> UpdateWithOutputIntoAsync<T>(this IQueryable<T> source, Expression<Func<T, T>> setter, ITable<T> outputTable, CancellationToken token = null) where T : class Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. ITable <T> outputTable Output table. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of updated records. Type Parameters Name Description T Updated table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputIntoAsync<T>(IUpdatable<T>, ITable<T>, CancellationToken) Executes update operation using source query as record filter. Declaration public static Task<int> UpdateWithOutputIntoAsync<T>(this IUpdatable<T> source, ITable<T> outputTable, CancellationToken token = null) where T : class Parameters Type Name Description IUpdatable <T> source Source data query. ITable <T> outputTable Output table. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of updated records. Type Parameters Name Description T Updated table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputIntoAsync<T, TOutput>(IQueryable<T>, Expression<Func<T, T>>, ITable<TOutput>, Expression<Func<T, T, TOutput>>, CancellationToken) Executes update operation using source query as record filter. Declaration public static Task<int> UpdateWithOutputIntoAsync<T, TOutput>(this IQueryable<T> source, Expression<Func<T, T>> setter, ITable<TOutput> outputTable, Expression<Func<T, T, TOutput>> outputExpression, CancellationToken token = null) where TOutput : class Parameters Type Name Description IQueryable <T> source Source data query. Expression < Func <T, T>> setter Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers. ITable <TOutput> outputTable Output table. Expression < Func <T, T, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( T deleted, T inserted). Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of updated records. Type Parameters Name Description T Updated table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputIntoAsync<TSource, TTarget>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, ITable<TTarget>, CancellationToken) Executes update-from-source operation against target table. Declaration public static Task<int> UpdateWithOutputIntoAsync<TSource, TTarget>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter, ITable<TTarget> outputTable, CancellationToken token = null) where TTarget : class Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. ITable <TTarget> outputTable Output table. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputIntoAsync<TSource, TTarget>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, ITable<TTarget>, CancellationToken) Executes update-from-source operation against target table. Declaration public static Task<int> UpdateWithOutputIntoAsync<TSource, TTarget>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, ITable<TTarget> outputTable, CancellationToken token = null) where TTarget : class Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. ITable <TTarget> outputTable Output table. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of affected records. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputIntoAsync<T, TOutput>(IUpdatable<T>, ITable<TOutput>, Expression<Func<T, T, TOutput>>, CancellationToken) Executes update operation using source query as record filter. Declaration public static Task<int> UpdateWithOutputIntoAsync<T, TOutput>(this IUpdatable<T> source, ITable<TOutput> outputTable, Expression<Func<T, T, TOutput>> outputExpression, CancellationToken token = null) where TOutput : class Parameters Type Name Description IUpdatable <T> source Source data query. ITable <TOutput> outputTable Output table. Expression < Func <T, T, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( T deleted, T inserted). Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Number of updated records. Type Parameters Name Description T Updated table record type. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputIntoAsync<TSource, TTarget, TOutput>(IQueryable<TSource>, Expression<Func<TSource, TTarget>>, Expression<Func<TSource, TTarget>>, ITable<TOutput>, Expression<Func<TSource, TTarget, TTarget, TOutput>>, CancellationToken) Executes update-from-source operation against target table. Declaration public static Task<int> UpdateWithOutputIntoAsync<TSource, TTarget, TOutput>(this IQueryable<TSource> source, Expression<Func<TSource, TTarget>> target, Expression<Func<TSource, TTarget>> setter, ITable<TOutput> outputTable, Expression<Func<TSource, TTarget, TTarget, TOutput>> outputExpression, CancellationToken token = null) where TOutput : class Parameters Type Name Description IQueryable <TSource> source Source data query. Expression < Func <TSource, TTarget>> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. ITable <TOutput> outputTable Output table. Expression < Func <TSource, TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( TSource source, TTarget deleted, TTarget inserted). Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Output values from the update statement. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source UpdateWithOutputIntoAsync<TSource, TTarget, TOutput>(IQueryable<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>, ITable<TOutput>, Expression<Func<TSource, TTarget, TTarget, TOutput>>, CancellationToken) Executes update-from-source operation against target table. Declaration public static Task<int> UpdateWithOutputIntoAsync<TSource, TTarget, TOutput>(this IQueryable<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter, ITable<TOutput> outputTable, Expression<Func<TSource, TTarget, TTarget, TOutput>> outputExpression, CancellationToken token = null) where TTarget : class where TOutput : class Parameters Type Name Description IQueryable <TSource> source Source data query. ITable <TTarget> target Target table. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. ITable <TOutput> outputTable Output table. Expression < Func <TSource, TTarget, TTarget, TOutput>> outputExpression Output record constructor expression. Parameters passed are as follows: ( TSource source, TTarget deleted, TTarget inserted). Expression supports only record new expression with field initializers. CancellationToken token Optional asynchronous operation cancellation token. Returns Type Description Task < System.Int32 > Output values from the update statement. Type Parameters Name Description TSource Source query record type. TTarget Target table mapping class. TOutput Output table record type. Remarks Supported Providers: MS SQL | Improve this Doc View Source Using<TTarget, TSource>(IMergeableUsing<TTarget>, IEnumerable<TSource>) Adds source collection to merge command definition. Declaration public static IMergeableOn<TTarget, TSource> Using<TTarget, TSource>(this IMergeableUsing<TTarget> merge, IEnumerable<TSource> source) Parameters Type Name Description IMergeableUsing <TTarget> merge Merge command builder. IEnumerable <TSource> source Source data collection. Returns Type Description IMergeableOn <TTarget, TSource> Returns merge command builder with source and target set. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source Using<TTarget, TSource>(IMergeableUsing<TTarget>, IQueryable<TSource>) Adds source query to merge command definition. Declaration public static IMergeableOn<TTarget, TSource> Using<TTarget, TSource>(this IMergeableUsing<TTarget> merge, IQueryable<TSource> source) Parameters Type Name Description IMergeableUsing <TTarget> merge Merge command builder. IQueryable <TSource> source Source data query. Returns Type Description IMergeableOn <TTarget, TSource> Returns merge command builder with source and target set. Type Parameters Name Description TTarget Target record type. TSource Source record type. | Improve this Doc View Source UsingTarget<TTarget>(IMergeableUsing<TTarget>) Sets target table as merge command source. Declaration public static IMergeableOn<TTarget, TTarget> UsingTarget<TTarget>(this IMergeableUsing<TTarget> merge) Parameters Type Name Description IMergeableUsing <TTarget> merge Merge command builder. Returns Type Description IMergeableOn <TTarget, TTarget> Returns merge command builder with source and target set. Type Parameters Name Description TTarget Target record type. | Improve this Doc View Source Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, TV) Starts insert operation LINQ query definition from field setter expression. Declaration public static IValueInsertable<T> Value<T, TV>(this ITable<T> source, Expression<Func<T, TV>> field, TV value) Parameters Type Name Description ITable <T> source Source table to insert to. Expression < Func <T, TV>> field Setter field selector expression. TV value Setter field value. Returns Type Description IValueInsertable <T> Insert query. Type Parameters Name Description T Target table record type. TV Setter field type. | Improve this Doc View Source Value<T, TV>(ITable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Starts insert operation LINQ query definition from field setter expression. Declaration public static IValueInsertable<T> Value<T, TV>(this ITable<T> source, Expression<Func<T, TV>> field, Expression<Func<TV>> value) Parameters Type Name Description ITable <T> source Source table to insert to. Expression < Func <T, TV>> field Setter field selector expression. Expression < Func <TV>> value Setter field value expression. Returns Type Description IValueInsertable <T> Insert query. Type Parameters Name Description T Target table record type. TV Setter field type. | Improve this Doc View Source Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, TV) Add field setter to insert operation LINQ query. Declaration public static IValueInsertable<T> Value<T, TV>(this IValueInsertable<T> source, Expression<Func<T, TV>> field, TV value) Parameters Type Name Description IValueInsertable <T> source Insert query. Expression < Func <T, TV>> field Setter field selector expression. TV value Setter field value. Returns Type Description IValueInsertable <T> Insert query. Type Parameters Name Description T Target table record type. TV Setter field type. | Improve this Doc View Source Value<T, TV>(IValueInsertable<T>, Expression<Func<T, TV>>, Expression<Func<TV>>) Add field setter to insert operation LINQ query. Declaration public static IValueInsertable<T> Value<T, TV>(this IValueInsertable<T> source, Expression<Func<T, TV>> field, Expression<Func<TV>> value) Parameters Type Name Description IValueInsertable <T> source Insert query. Expression < Func <T, TV>> field Setter field selector expression. Expression < Func <TV>> value Setter field value expression. Returns Type Description IValueInsertable <T> Insert query. Type Parameters Name Description T Target table record type. TV Setter field type. | Improve this Doc View Source Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, TValue) Add field setter to insert operation LINQ query. Declaration public static ISelectInsertable<TSource, TTarget> Value<TSource, TTarget, TValue>(this ISelectInsertable<TSource, TTarget> source, Expression<Func<TTarget, TValue>> field, TValue value) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Expression < Func <TTarget, TValue>> field Setter field selector expression. TValue value Setter field value. Returns Type Description ISelectInsertable <TSource, TTarget> Insert query. Type Parameters Name Description TSource Source record type. TTarget Target record type TValue Field type. | Improve this Doc View Source Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TSource, TValue>>) Add field setter to insert operation LINQ query. Declaration public static ISelectInsertable<TSource, TTarget> Value<TSource, TTarget, TValue>(this ISelectInsertable<TSource, TTarget> source, Expression<Func<TTarget, TValue>> field, Expression<Func<TSource, TValue>> value) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Expression < Func <TTarget, TValue>> field Setter field selector expression. Expression < Func <TSource, TValue>> value Setter field value expression. Accepts source record as parameter. Returns Type Description ISelectInsertable <TSource, TTarget> Insert query. Type Parameters Name Description TSource Source record type. TTarget Target record type TValue Field type. | Improve this Doc View Source Value<TSource, TTarget, TValue>(ISelectInsertable<TSource, TTarget>, Expression<Func<TTarget, TValue>>, Expression<Func<TValue>>) Add field setter to insert operation LINQ query. Declaration public static ISelectInsertable<TSource, TTarget> Value<TSource, TTarget, TValue>(this ISelectInsertable<TSource, TTarget> source, Expression<Func<TTarget, TValue>> field, Expression<Func<TValue>> value) Parameters Type Name Description ISelectInsertable <TSource, TTarget> source Insert query. Expression < Func <TTarget, TValue>> field Setter field selector expression. Expression < Func <TValue>> value Setter field value expression. Returns Type Description ISelectInsertable <TSource, TTarget> Insert query. Type Parameters Name Description TSource Source record type. TTarget Target record type TValue Field type. | Improve this Doc View Source With<T>(ITable<T>, String) Adds table hints to a table in generated query. Also see WithTableExpression<T>(ITable<T>, String) method. // will produce following SQL code in generated query: table tablealias with(UpdLock) var tableWithHint = db.Table.With(\"UpdLock\"); Declaration public static ITable<T> With<T>(this ITable<T> table, string args) Parameters Type Name Description ITable <T> table Table-like query source. System.String args SQL text, added to WITH({0}) after table name in generated query. Returns Type Description ITable <T> Table-like query source with table hints. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source WithTableExpression<T>(ITable<T>, String) Replaces access to a table in generated query with SQL expression. Example below adds hint to a table. Also see With<T>(ITable<T>, String) method. var tableWithHint = db.Table.WithTableExpression(\"{0} {1} with (UpdLock)\"); Declaration public static ITable<T> WithTableExpression<T>(this ITable<T> table, string expression) Parameters Type Name Description ITable <T> table Table-like query source. System.String expression SQL template to use instead of table name. Template supports two parameters: - {0} original table name; - {1} table alias. Returns Type Description ITable <T> Table-like query source with new table source expression. Type Parameters Name Description T Table record mapping class."
  },
  "api/LinqToDB.LinqToDBConstants.html": {
    "href": "api/LinqToDB.LinqToDBConstants.html",
    "title": "Class LinqToDBConstants | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBConstants Inheritance System.Object LinqToDBConstants Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class LinqToDBConstants : object Fields | Improve this Doc View Source Copyright Declaration public const string Copyright = null Field Value Type Description System.String | Improve this Doc View Source ProductDescription Declaration public const string ProductDescription = null Field Value Type Description System.String | Improve this Doc View Source ProductName Declaration public const string ProductName = null Field Value Type Description System.String"
  },
  "api/LinqToDB.LinqToDBException.html": {
    "href": "api/LinqToDB.LinqToDBException.html",
    "title": "Class LinqToDBException | Linq To DB (aka linq2db)",
    "keywords": "Class LinqToDBException Defines the base class for the namespace exceptions. Inheritance System.Object LinqToDBException LinqToDBConvertException RetryLimitExceededException Namespace : LinqToDB Assembly : linq2db.dll Syntax public class LinqToDBException : Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source LinqToDBException() Initializes a new instance of the LinqToDBException class. Declaration public LinqToDBException() Remarks This constructor initializes the property of the new instance such as \"A Build Type exception has occurred.\". | Improve this Doc View Source LinqToDBException(Exception) Initializes a new instance of the LinqToDBException class with the specified InnerException property. Declaration public LinqToDBException(Exception innerException) Parameters Type Name Description Exception innerException The InnerException, if any, that threw the current exception. | Improve this Doc View Source LinqToDBException(SerializationInfo, StreamingContext) Initializes a new instance of the LinqToDBException class with serialized data. Declaration protected LinqToDBException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source LinqToDBException(String) Initializes a new instance of the LinqToDBException class with the specified error message. Declaration public LinqToDBException(string message) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. | Improve this Doc View Source LinqToDBException(String, Exception) Initializes a new instance of the LinqToDBException class with the specified error message and InnerException property. Declaration public LinqToDBException(string message, Exception innerException) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. Exception innerException The InnerException, if any, that threw the current exception. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.AssociationAttribute.html": {
    "href": "api/LinqToDB.Mapping.AssociationAttribute.html",
    "title": "Class AssociationAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class AssociationAttribute Defines relation between tables or views. Could be applied to: instance properties and fields; instance and static methods. For associations, defined using static methods, this mapping side defined by type of first parameter. Also, optionally, you can pass data context object as extra method parameter. Based on association type - to one or to multiple records - result type should be target record's mapping type or collection. By default associations are used only for joins generation in LINQ queries and will have null value for loaded records. To load data into association, you should explicitly specify it in your query using method. Inheritance System.Object AssociationAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class AssociationAttribute : Attribute Constructors | Improve this Doc View Source AssociationAttribute() Creates attribute instance. Declaration public AssociationAttribute() Properties | Improve this Doc View Source AliasName Gets or sets alias for association. Used in SQL generation process. Declaration public string? AliasName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source BackReferenceName This property is not used by linq2db and could be used for informational purposes. Declaration public string? BackReferenceName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source CanBeNull Defines type of join: inner join for CanBeNull = false ; left join for CanBeNull = true . Default value: true . Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ExpressionPredicate Specifies static property or method without parameters, that returns join predicate expression. This predicate will be used together with ThisKey / OtherKey join keys, if they are specified. Predicate expression lambda function takes two parameters: this record and other record and returns boolean result. Declaration public string? ExpressionPredicate { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsBackReference This property is not used by linq2db and could be used for informational purposes. Declaration public bool IsBackReference { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source KeyName This property is not used by linq2db and could be used for informational purposes. Declaration public string? KeyName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source OtherKey Gets or sets comma-separated list of association key members on another side of association. Those keys will be used for join predicate generation and must be compatible with ThisKey keys. You must specify keys it you do not use custom predicate (see ExpressionPredicate ). Declaration public string? OtherKey { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Predicate Specifies predicate expression. This predicate will be used together with ThisKey / OtherKey join keys, if they are specified. Predicate expression lambda function takes two parameters: this record and other record and returns boolean result. Declaration public Expression? Predicate { get; set; } Property Value Type Description System.Nullable < Expression > | Improve this Doc View Source QueryExpression Specifies query expression. If is set, other association keys are ignored. Lambda function takes two parameters: this record, IDataContext and returns IQueryable result. var Expression<Func<SomeEntity, IDataContext, IQueryable<SomeOtherEntity>>> associationQuery; associationQuery = (e, db) => db.GetTable<SomeOtherEntity>().Where(se => se.Id == e.Id); Declaration public Expression? QueryExpression { get; set; } Property Value Type Description System.Nullable < Expression > | Improve this Doc View Source QueryExpressionMethod Specifies static property or method without parameters, that returns IQueryable expression. If is set, other association keys are ignored. Result of query method should be lambda which takes two parameters: this record, IDataContext and returns IQueryable result. public class SomeEntity { [Association(ExpressionQueryMethod = nameof(OtherImpl), CanBeNull = true)] public SomeOtherEntity Other { get; set; } public static Expression<Func<SomeEntity, IDataContext, IQueryable<SomeOtherEntity>>> OtherImpl() { return (e, db) => db.GetTable<SomeOtherEntity>().Where(se => se.Id == e.Id); } } Declaration public string? QueryExpressionMethod { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Relationship This property is not used by linq2db and could be used for informational purposes. Declaration public Relationship Relationship { get; set; } Property Value Type Description Relationship | Improve this Doc View Source Storage Specify name of property or field to store association value, loaded using method. When not specified, current association member will be used. Declaration public string? Storage { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ThisKey Gets or sets comma-separated list of association key members on this side of association. Those keys will be used for join predicate generation and must be compatible with OtherKey keys. You must specify keys it you do not use custom predicate (see ExpressionPredicate ). Declaration public string? ThisKey { get; set; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source GetOtherKeys() Returns OtherKey value as a list of key member names. Declaration public string[] GetOtherKeys() Returns Type Description System.String [] List of key members. | Improve this Doc View Source GetThisKeys() Returns ThisKey value as a list of key member names. Declaration public string[] GetThisKeys() Returns Type Description System.String [] List of key members. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.AssociationDescriptor.html": {
    "href": "api/LinqToDB.Mapping.AssociationDescriptor.html",
    "title": "Class AssociationDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Class AssociationDescriptor Stores association descriptor. Inheritance System.Object AssociationDescriptor Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class AssociationDescriptor : object Constructors | Improve this Doc View Source AssociationDescriptor(Type, MemberInfo, String[], String[], Nullable<String>, Nullable<Expression>, Nullable<String>, Nullable<Expression>, Nullable<String>, Boolean, Nullable<String>) Creates descriptor instance. Declaration public AssociationDescriptor(Type type, MemberInfo memberInfo, string[] thisKey, string[] otherKey, string? expressionPredicate, Expression? predicate, string? expressionQueryMethod, Expression? expressionQuery, string? storage, bool canBeNull, string? aliasName) Parameters Type Name Description Type type From (this) side entity mapping type. MemberInfo memberInfo Association member (field, property or method). System.String [] thisKey List of names of from (this) key members. System.String [] otherKey List of names of to (other) key members. System.Nullable < System.String > expressionPredicate Optional predicate expression source property or method. System.Nullable < Expression > predicate Optional predicate expression. System.Nullable < System.String > expressionQueryMethod Optional name of query method. System.Nullable < Expression > expressionQuery Optional query expression. System.Nullable < System.String > storage Optional association value storage field or property name. System.Boolean canBeNull If true , association will generate outer join, otherwise - inner join. System.Nullable < System.String > aliasName Optional alias for representation in SQL. Properties | Improve this Doc View Source AliasName Gets or sets alias for association. Used in SQL generation process. Declaration public string? AliasName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source CanBeNull Gets or sets join type, generated for current association. If true , association will generate outer join, otherwise - inner join. Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ExpressionPredicate Gets or sets optional predicate expression source property or method. Declaration public string? ExpressionPredicate { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ExpressionQuery Gets or sets optional query expression. Declaration public Expression? ExpressionQuery { get; set; } Property Value Type Description System.Nullable < Expression > | Improve this Doc View Source ExpressionQueryMethod Gets or sets optional query method source property or method. Declaration public string? ExpressionQueryMethod { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsList Declaration public bool IsList { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MemberInfo Gets or sets association member (field, property or method). Declaration public MemberInfo MemberInfo { get; set; } Property Value Type Description MemberInfo | Improve this Doc View Source OtherKey Gets or sets list of names of to (other) key members. Could be empty, if association has predicate expression. Declaration public string[] OtherKey { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source Predicate Gets or sets optional predicate expression. Declaration public Expression? Predicate { get; set; } Property Value Type Description System.Nullable < Expression > | Improve this Doc View Source Storage Gets or sets optional association value storage field or property name. Used with LoadWith. Declaration public string? Storage { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ThisKey Gets or sets list of names of from (this) key members. Could be empty, if association has predicate expression. Declaration public string[] ThisKey { get; set; } Property Value Type Description System.String [] Methods | Improve this Doc View Source GenerateAlias() Generates table alias for association. Declaration public string GenerateAlias() Returns Type Description System.String Generated alias. | Improve this Doc View Source GetElementType(MappingSchema) Declaration public Type GetElementType(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Returns Type Description Type | Improve this Doc View Source GetParentElementType() Declaration public Type GetParentElementType() Returns Type Description Type | Improve this Doc View Source GetPredicate(Type, Type) Loads predicate expression from ExpressionPredicate member. Declaration public LambdaExpression? GetPredicate(Type parentType, Type objectType) Parameters Type Name Description Type parentType Type of object that declares association Type objectType Type of object associated with expression predicate Returns Type Description System.Nullable < LambdaExpression > null of association has no custom predicate expression or predicate expression, specified by ExpressionPredicate member. | Improve this Doc View Source GetQueryMethod(Type, Type) Loads query method expression from ExpressionQueryMethod member. Declaration public LambdaExpression? GetQueryMethod(Type parentType, Type objectType) Parameters Type Name Description Type parentType Type of object that declares association Type objectType Type of object associated with query method expression Returns Type Description System.Nullable < LambdaExpression > null of association has no custom query method expression or query method expression, specified by ExpressionQueryMethod member. | Improve this Doc View Source HasQueryMethod() Declaration public bool HasQueryMethod() Returns Type Description System.Boolean | Improve this Doc View Source ParseKeys(Nullable<String>) Parse comma-separated list of association key column members into string array. Declaration public static string[] ParseKeys(string? keys) Parameters Type Name Description System.Nullable < System.String > keys Comma-separated (spaces allowed) list of association key column members. Returns Type Description System.String [] Returns array with names of association key column members. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.ColumnAliasAttribute.html": {
    "href": "api/LinqToDB.Mapping.ColumnAliasAttribute.html",
    "title": "Class ColumnAliasAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnAliasAttribute Specifies that current field or property is just an alias to another property or field. Currently this attribute has several issues: you can apply it to class or interface - such attribute will be ignored by linq2db; it is possible to define attribute without setting MemberName value; you can define alias to another alias property or field and potentially create loop. Inheritance System.Object ColumnAliasAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class ColumnAliasAttribute : Attribute Constructors | Improve this Doc View Source ColumnAliasAttribute() Use ColumnAliasAttribute(String) constructor or specify MemberName value. Declaration public ColumnAliasAttribute() | Improve this Doc View Source ColumnAliasAttribute(String) Creates attribute instance. Declaration public ColumnAliasAttribute(string memberName) Parameters Type Name Description System.String memberName Name of target property or field. Properties | Improve this Doc View Source Configuration Mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source MemberName Gets or sets the name of target property or field. Declaration public string? MemberName { get; set; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.ColumnAttribute.html": {
    "href": "api/LinqToDB.Mapping.ColumnAttribute.html",
    "title": "Class ColumnAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnAttribute Configures mapping of mapping class member to database column. Could be applied directly to a property or field or to mapping class/interface. In latter case you should specify member name using MemberName property. Inheritance System.Object ColumnAttribute NotColumnAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class ColumnAttribute : Attribute Constructors | Improve this Doc View Source ColumnAttribute() Creates attribute instance. Declaration public ColumnAttribute() | Improve this Doc View Source ColumnAttribute(String) Creates attribute instance. Declaration public ColumnAttribute(string columnName) Parameters Type Name Description System.String columnName Database column name. | Improve this Doc View Source ColumnAttribute(String, String) Creates attribute instance. Declaration public ColumnAttribute(string columnName, string memberName) Parameters Type Name Description System.String columnName Database column name. System.String memberName Name of mapped member. See MemberName for more details. Properties | Improve this Doc View Source CanBeNull Gets or sets whether a column can contain NULL values. Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source CreateFormat Custom template for column definition in create table SQL expression, generated using CreateTable<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, DefaultNullable, Nullable<String>, TableOptions) methods. Template accepts following string parameters: {0} - column name; {1} - column type; {2} - NULL specifier; {3} - identity specification. Declaration public string? CreateFormat { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataType Gets or sets linq2db type for column. Default value: default type, defined for member type in mapping schema. Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source DbType Gets or sets the name of the database column type. Default value: default type, defined for member type in mapping schema. Declaration public string? DbType { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsColumn Gets or sets flag that tells that current member should be included into mapping. Use NonColumnAttribute instead as a shorthand. Default value: true . Declaration public bool IsColumn { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDiscriminator Gets or sets whether a column contains a discriminator value for a LINQ to DB inheritance hierarchy. InheritanceMappingAttribute for more details. Default value: false . Declaration public bool IsDiscriminator { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsIdentity Gets or sets whether a column contains values that the database auto-generates. Also see IdentityAttribute . Declaration public bool IsIdentity { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPrimaryKey Gets or sets whether this class member represents a column that is part or all of the primary key of the table. Also see PrimaryKeyAttribute . Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Gets or sets the length of the database column. Default value: value, defined for member type in mapping schema. Declaration public int Length { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MemberName Gets or sets the name of mapped member. When applied to class or interface, should contain name of property of field. If column mapped to a property or field of composite object, MemberName should contain a path to that member using dot as separator. public class Address { public string City { get; set; } public string Street { get; set; } public int Building { get; set; } } [Column(\"city\", \"Residence.City\")] [Column(\"user_name\", \"Name\")] public class User { public string Name; [Column(\"street\", \".Street\")] [Column(\"building_number\", MemberName = \".Building\")] public Address Residence { get; set; } } Declaration public string? MemberName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Name Gets or sets the name of a column in database. If not specified, member name will be used. Declaration public string? Name { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Order Specifies the order of the field in table creation. Positive values first (ascending), then unspecified (arbitrary), then negative values (ascending). Declaration public int Order { get; set; } Property Value Type Description System.Int32 Remarks Ordering performed in SqlTable constructor. | Improve this Doc View Source Precision Gets or sets the precision of the database column. Default value: value, defined for member type in mapping schema. Declaration public int Precision { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PrimaryKeyOrder Gets or sets the Primary Key order. See Order for more details. Declaration public int PrimaryKeyOrder { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Scale Gets or sets the Scale of the database column. Default value: value, defined for member type in mapping schema. Declaration public int Scale { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SkipOnEntityFetch Gets or sets whether a column must be explicitly defined in a Select statement to be fetched. If true , a \"SELECT *\"-ish statement won't retrieve this column. Default value: false . Declaration public bool SkipOnEntityFetch { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipOnInsert Gets or sets whether a column is insertable. This flag will affect only insert operations with implicit columns specification like Insert<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) method and will be ignored when user explicitly specifies value for this column. Declaration public bool SkipOnInsert { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipOnUpdate Gets or sets whether a column is updatable. This flag will affect only update operations with implicit columns specification like Update<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) method and will be ignored when user explicitly specifies value for this column. Declaration public bool SkipOnUpdate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Storage Gets or sets a storage property or field to hold the value from a column. Could be usefull e.g. in combination of private storage field and getter-only mapping property. Declaration public string? Storage { get; set; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.ColumnDescriptor.html": {
    "href": "api/LinqToDB.Mapping.ColumnDescriptor.html",
    "title": "Class ColumnDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnDescriptor Stores mapping entity column descriptor. Inheritance System.Object ColumnDescriptor Implements IColumnChangeDescriptor Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class ColumnDescriptor : object, IColumnChangeDescriptor Constructors | Improve this Doc View Source ColumnDescriptor(MappingSchema, EntityDescriptor, ColumnAttribute, MemberAccessor, Boolean) Creates descriptor instance. Declaration public ColumnDescriptor(MappingSchema mappingSchema, EntityDescriptor entityDescriptor, ColumnAttribute columnAttribute, MemberAccessor memberAccessor, bool hasInheritanceMapping) Parameters Type Name Description MappingSchema mappingSchema Mapping schema, associated with descriptor. EntityDescriptor entityDescriptor Entity descriptor. ColumnAttribute columnAttribute Column attribute, from which descriptor data should be extracted. MemberAccessor memberAccessor Column mapping member accessor. System.Boolean hasInheritanceMapping Owning entity included in inheritance mapping. Properties | Improve this Doc View Source CanBeNull Gets whether a column can contain null values. Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ColumnName Gets the name of a column in database. If not specified, MemberName value will be used. Declaration public string ColumnName { get; } Property Value Type Description System.String | Improve this Doc View Source CreateFormat Custom template for column definition in create table SQL expression, generated using CreateTable<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, DefaultNullable, Nullable<String>, TableOptions) methods. Template accepts following string parameters: {0} - column name; {1} - column type; {2} - NULL specifier; {3} - identity specification. Declaration public string? CreateFormat { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataType Gets LINQ to DB type for column. Declaration public DataType DataType { get; } Property Value Type Description DataType | Improve this Doc View Source DbType Gets the name of the database column type. Declaration public string? DbType { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source EntityDescriptor Gets Entity descriptor. Declaration public EntityDescriptor EntityDescriptor { get; } Property Value Type Description EntityDescriptor | Improve this Doc View Source HasInheritanceMapping Indicates that owning entity included in inheritance mapping. Declaration public bool HasInheritanceMapping { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasValuesToSkipOnInsert Gets whether the column has specific values that should be skipped on insert. Declaration public bool HasValuesToSkipOnInsert { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasValuesToSkipOnUpdate Gets whether the column has specific values that should be skipped on update. Declaration public bool HasValuesToSkipOnUpdate { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDiscriminator Gets whether a column contains a discriminator value for a LINQ to DB inheritance hierarchy. InheritanceMappingAttribute for more details. Default value: false . Declaration public bool IsDiscriminator { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsIdentity Gets whether a column contains values that the database auto-generates. Declaration public bool IsIdentity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPrimaryKey Gets whether this member represents a column that is part or all of the primary key of the table. Also see PrimaryKeyAttribute . Declaration public bool IsPrimaryKey { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Gets the length of the database column. Declaration public int? Length { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source MappingSchema Gets MappingSchema for current ColumnDescriptor. Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source MemberAccessor Gets column mapping member accessor. Declaration public MemberAccessor MemberAccessor { get; } Property Value Type Description MemberAccessor | Improve this Doc View Source MemberInfo Gets column mapping member (field or property). Declaration public MemberInfo MemberInfo { get; } Property Value Type Description MemberInfo | Improve this Doc View Source MemberName Gets the name of mapped member. When applied to class or interface, should contain name of property of field. If column is mapped to a property or field of composite object, MemberName should contain a path to that member using dot as separator. public class Address { public string City { get; set; } public string Street { get; set; } public int Building { get; set; } } [Column(\"city\", \"Residence.Street\")] [Column(\"user_name\", \"Name\")] public class User { public string Name; [Column(\"street\", \".Street\")] [Column(\"building_number\", MemberName = \".Building\")] public Address Residence { get; set; } } Declaration public string MemberName { get; } Property Value Type Description System.String | Improve this Doc View Source MemberType Gets type of column mapping member (field or property). Declaration public Type MemberType { get; } Property Value Type Description Type | Improve this Doc View Source Order Sort order for column list. Positive values first, then unspecified (null), then negative values. Declaration public int? Order { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Precision Gets the precision of the database column. Declaration public int? Precision { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source PrimaryKeyOrder Gets order of current column in composite primary key. Order is used for query generation to define in which order primary key columns must be mentioned in query from columns with smallest order value to greatest. Declaration public int PrimaryKeyOrder { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Scale Gets the Scale of the database column. Declaration public int? Scale { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source SequenceName Gets sequence name for specified column. Declaration public SequenceNameAttribute SequenceName { get; } Property Value Type Description SequenceNameAttribute | Improve this Doc View Source SkipModificationFlags Gets flags for which operation values are skipped. Declaration public SkipModification SkipModificationFlags { get; } Property Value Type Description SkipModification | Improve this Doc View Source SkipOnEntityFetch Gets whether a column must be explicitly defined in a Select statement to be fetched. If true , a \"SELECT *\"-ish statement won't retrieve this column. Default value: false . Declaration public bool SkipOnEntityFetch { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipOnInsert Gets whether a column is insertable. This flag will affect only insert operations with implicit columns specification like Insert<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) method and will be ignored when user explicitly specifies value for this column. Declaration public bool SkipOnInsert { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipOnUpdate Gets whether a column is updatable. This flag will affect only update operations with implicit columns specification like Update<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) method and will be ignored when user explicitly specifies value for this column. Declaration public bool SkipOnUpdate { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Storage Gets storage property or field to hold the value from a column. Could be usefull e.g. in combination of private storage field and getter-only mapping property. Declaration public string? Storage { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source StorageInfo Gets value storage member (field or property). Declaration public MemberInfo StorageInfo { get; } Property Value Type Description MemberInfo | Improve this Doc View Source StorageType Gets type of column value storage member (field or property). Declaration public Type StorageType { get; } Property Value Type Description Type | Improve this Doc View Source ValueConverter Gets value converter for specific column. Declaration public IValueConverter ValueConverter { get; } Property Value Type Description IValueConverter Methods | Improve this Doc View Source ApplyConversions(Expression, DbDataType, Boolean) Helper function for applying all needed conversions for converting value to database type. Declaration public Expression ApplyConversions(Expression getterExpr, DbDataType dbDataType, bool includingEnum) Parameters Type Name Description Expression getterExpr Expression which returns value which has to be converted. DbDataType dbDataType Database type. System.Boolean includingEnum Provides default enum conversion. Returns Type Description Expression Expression with applied conversions. | Improve this Doc View Source ApplyConversions(MappingSchema, Expression, DbDataType, IValueConverter, Boolean) Helper function for applying all needed conversions for converting value to database type. Declaration public static Expression ApplyConversions(MappingSchema mappingSchema, Expression getterExpr, DbDataType dbDataType, IValueConverter valueConverter, bool includingEnum) Parameters Type Name Description MappingSchema mappingSchema Mapping schema. Expression getterExpr Expression which returns value which has to be converted. DbDataType dbDataType Database type. IValueConverter valueConverter Optional IValueConverter System.Boolean includingEnum Provides default enum conversion. Returns Type Description Expression Expression with applied conversions. | Improve this Doc View Source CalculateDataType(MappingSchema, Type) Declaration public static DataType CalculateDataType(MappingSchema mappingSchema, Type systemType) Parameters Type Name Description MappingSchema mappingSchema Type systemType Returns Type Description DataType | Improve this Doc View Source GetConvertedDbDataType() Returns DbDataType for current column after conversions. Declaration public DbDataType GetConvertedDbDataType() Returns Type Description DbDataType | Improve this Doc View Source GetDbDataType(Boolean) Returns DbDataType for current column. Declaration public DbDataType GetDbDataType(bool completeDataType) Parameters Type Name Description System.Boolean completeDataType Returns Type Description DbDataType | Improve this Doc View Source GetDbParamLambda() Returns Lambda for extracting column value, converted to database type or DataParameter , from entity object. Declaration public LambdaExpression GetDbParamLambda() Returns Type Description LambdaExpression Returns Lambda which extracts member value to database type or DataParameter . | Improve this Doc View Source GetDbValueLambda() Returns Lambda for extracting column value, converted to database type, from entity object. Declaration public LambdaExpression GetDbValueLambda() Returns Type Description LambdaExpression Returns Lambda which extracts member value to database type. | Improve this Doc View Source GetDefaultDbParamExpression() Returns default column value, converted to database type or DataParameter . Declaration public Expression GetDefaultDbParamExpression() Returns Type Description Expression | Improve this Doc View Source GetDefaultDbValueExpression() Returns Lambda for extracting column value, converted to database type, from entity object. Declaration public Expression GetDefaultDbValueExpression() Returns Type Description Expression Returns Lambda which extracts member value to database type. | Improve this Doc View Source GetValue(Object) Extracts column value, converted to database type, from entity object. Declaration public virtual object? GetValue(object obj) Parameters Type Name Description System.Object obj Entity object to extract column value from. Returns Type Description System.Nullable < System.Object > Returns column value, converted to database type. | Improve this Doc View Source ShouldSkip(Object, EntityDescriptor, SkipModification) Checks if the passed object has values that should bes skipped based on the given flags. Declaration public virtual bool ShouldSkip(object obj, EntityDescriptor descriptor, SkipModification flags) Parameters Type Name Description System.Object obj The object containing the values for the operation. EntityDescriptor descriptor EntityDescriptor of the current instance. SkipModification flags The flags that specify which operation should be checked. Returns Type Description System.Boolean true if object contains values that should be skipped. Explicit Interface Implementations | Improve this Doc View Source IColumnChangeDescriptor.ColumnName Declaration string IColumnChangeDescriptor.ColumnName { get; set; } Returns Type Description System.String | Improve this Doc View Source IColumnChangeDescriptor.MemberName Declaration string IColumnChangeDescriptor.MemberName { get; } Returns Type Description System.String Implements IColumnChangeDescriptor Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.DataTypeAttribute.html": {
    "href": "api/LinqToDB.Mapping.DataTypeAttribute.html",
    "title": "Class DataTypeAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class DataTypeAttribute This attribute allows to override default types, defined in mapping schema, for current column. Also see DataType and DbType . Applying this attribute to class or interface will have no effect. Inheritance System.Object DataTypeAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class DataTypeAttribute : Attribute Constructors | Improve this Doc View Source DataTypeAttribute(DataType) Creates attribute instance. Declaration public DataTypeAttribute(DataType dataType) Parameters Type Name Description DataType dataType linq2db column type name. | Improve this Doc View Source DataTypeAttribute(DataType, String) Creates attribute instance. Declaration public DataTypeAttribute(DataType dataType, string dbType) Parameters Type Name Description DataType dataType linq2db column type name. System.String dbType SQL column type name. | Improve this Doc View Source DataTypeAttribute(String) Creates attribute instance. Declaration public DataTypeAttribute(string dbType) Parameters Type Name Description System.String dbType SQL column type name. Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataType Gets or sets linq2db type of the database column. Declaration public DataType? DataType { get; set; } Property Value Type Description System.Nullable < DataType > | Improve this Doc View Source DbType Gets or sets the name of the database column type. Declaration public string? DbType { get; set; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.DynamicColumnAccessorAttribute.html": {
    "href": "api/LinqToDB.Mapping.DynamicColumnAccessorAttribute.html",
    "title": "Class DynamicColumnAccessorAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class DynamicColumnAccessorAttribute Configure setter and getter methods for dynamic columns. Inheritance System.Object DynamicColumnAccessorAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class DynamicColumnAccessorAttribute : Attribute Remarks Expected signatures for getter and setter: // should return true and value of property, if property value found in storage // should return false if property value not found in storage static object Getter(Entity object, string propertyName, object defaultValue); // or object this.Getter(string propertyName, object defaultValue); // where defaultValue is default value for property type for current MappingSchema static void Setter(Entity object, string propertyName, object value) or void this.Setter(string propertyName, object value) Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source GetterExpression Gets or sets name of dynamic properties property get expression. Declaration public LambdaExpression? GetterExpression { get; set; } Property Value Type Description System.Nullable < LambdaExpression > | Improve this Doc View Source GetterExpressionMethod Gets or sets name of dynamic properties property getter expression method or property. Method or property must be static. Declaration public string? GetterExpressionMethod { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source GetterMethod Gets or sets name of dynamic properties property getter method. Declaration public string? GetterMethod { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SetterExpression Gets or sets name of dynamic properties property set expression. Declaration public LambdaExpression? SetterExpression { get; set; } Property Value Type Description System.Nullable < LambdaExpression > | Improve this Doc View Source SetterExpressionMethod Gets or sets name of dynamic properties property setter expression method or property. Method or property must be static. Declaration public string? SetterExpressionMethod { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SetterMethod Gets or sets name of dynamic properties property setter method. Declaration public string? SetterMethod { get; set; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source Validate() Declaration protected void Validate() Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.DynamicColumnInfo.html": {
    "href": "api/LinqToDB.Mapping.DynamicColumnInfo.html",
    "title": "Class DynamicColumnInfo | Linq To DB (aka linq2db)",
    "keywords": "Class DynamicColumnInfo Represents a dynamic column, which doesn't have a backing field in it's declaring type. Inheritance System.Object DynamicColumnInfo Implements IEquatable < DynamicColumnInfo > Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class DynamicColumnInfo : PropertyInfo Constructors | Improve this Doc View Source DynamicColumnInfo(Type, Type, String) Initializes a new instance of the DynamicColumnInfo class. Declaration public DynamicColumnInfo(Type declaringType, Type columnType, string memberName) Parameters Type Name Description Type declaringType Type of the declaring. Type columnType Type of the column. System.String memberName Name of the member. Properties | Improve this Doc View Source Attributes Declaration public override PropertyAttributes Attributes { get; } Property Value Type Description PropertyAttributes | Improve this Doc View Source CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean | Improve this Doc View Source CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean | Improve this Doc View Source DeclaringType Declaration public override Type DeclaringType { get; } Property Value Type Description Type | Improve this Doc View Source Name Declaration public override string Name { get; } Property Value Type Description System.String | Improve this Doc View Source PropertyType Declaration public override Type PropertyType { get; } Property Value Type Description Type | Improve this Doc View Source ReflectedType Declaration public override Type ReflectedType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Equals(DynamicColumnInfo) Declaration public bool Equals(DynamicColumnInfo other) Parameters Type Name Description DynamicColumnInfo other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source GetAccessors(Boolean) Declaration public override MethodInfo[] GetAccessors(bool nonPublic) Parameters Type Name Description System.Boolean nonPublic Returns Type Description MethodInfo [] | Improve this Doc View Source GetCustomAttributes(Boolean) Declaration public override object[] GetCustomAttributes(bool inherit) Parameters Type Name Description System.Boolean inherit Returns Type Description System.Object [] | Improve this Doc View Source GetCustomAttributes(Type, Boolean) Declaration public override object[] GetCustomAttributes(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType System.Boolean inherit Returns Type Description System.Object [] | Improve this Doc View Source GetGetMethod(Boolean) Declaration public override MethodInfo GetGetMethod(bool nonPublic) Parameters Type Name Description System.Boolean nonPublic Returns Type Description MethodInfo | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source GetIndexParameters() Declaration public override ParameterInfo[] GetIndexParameters() Returns Type Description ParameterInfo [] | Improve this Doc View Source GetSetMethod(Boolean) Declaration public override MethodInfo GetSetMethod(bool nonPublic) Parameters Type Name Description System.Boolean nonPublic Returns Type Description MethodInfo | Improve this Doc View Source GetValue(Nullable<Object>, BindingFlags, Nullable<Binder>, Nullable<Object>[], Nullable<CultureInfo>) Declaration public override object GetValue(object? obj, BindingFlags invokeAttr, Binder? binder, object? [] index, CultureInfo? culture) Parameters Type Name Description System.Nullable < System.Object > obj BindingFlags invokeAttr System.Nullable < Binder > binder System.Nullable < System.Object >[] index System.Nullable < CultureInfo > culture Returns Type Description System.Object | Improve this Doc View Source IsDefined(Type, Boolean) Declaration public override bool IsDefined(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType System.Boolean inherit Returns Type Description System.Boolean | Improve this Doc View Source SetValue(Nullable<Object>, Nullable<Object>, BindingFlags, Nullable<Binder>, Nullable<Object>[], Nullable<CultureInfo>) Declaration public override void SetValue(object? obj, object? value, BindingFlags invokeAttr, Binder? binder, object? [] index, CultureInfo? culture) Parameters Type Name Description System.Nullable < System.Object > obj System.Nullable < System.Object > value BindingFlags invokeAttr System.Nullable < Binder > binder System.Nullable < System.Object >[] index System.Nullable < CultureInfo > culture Operators | Improve this Doc View Source Equality(DynamicColumnInfo, DynamicColumnInfo) Implements the operator ==. Declaration public static bool operator ==(DynamicColumnInfo a, DynamicColumnInfo b) Parameters Type Name Description DynamicColumnInfo a a. DynamicColumnInfo b The b. Returns Type Description System.Boolean The result of the operator. | Improve this Doc View Source Inequality(DynamicColumnInfo, DynamicColumnInfo) Implements the operator !=. Declaration public static bool operator !=(DynamicColumnInfo a, DynamicColumnInfo b) Parameters Type Name Description DynamicColumnInfo a a. DynamicColumnInfo b The b. Returns Type Description System.Boolean The result of the operator. Implements IEquatable<> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.DynamicColumnsStoreAttribute.html": {
    "href": "api/LinqToDB.Mapping.DynamicColumnsStoreAttribute.html",
    "title": "Class DynamicColumnsStoreAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class DynamicColumnsStoreAttribute Marks target member as dynamic columns store. Inheritance System.Object DynamicColumnsStoreAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class DynamicColumnsStoreAttribute : Attribute Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.EntityDescriptor.html": {
    "href": "api/LinqToDB.Mapping.EntityDescriptor.html",
    "title": "Class EntityDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Class EntityDescriptor Stores mapping entity descriptor. Inheritance System.Object EntityDescriptor Implements IEntityChangeDescriptor Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class EntityDescriptor : object, IEntityChangeDescriptor Constructors | Improve this Doc View Source EntityDescriptor(MappingSchema, Type) Creates descriptor instance. Declaration public EntityDescriptor(MappingSchema mappingSchema, Type type) Parameters Type Name Description MappingSchema mappingSchema Mapping schema, associated with descriptor. Type type Mapping class type. Properties | Improve this Doc View Source Aliases Gets mapping dictionary to map column aliases to target columns or aliases. Declaration public Dictionary<string, string?>? Aliases { get; } Property Value Type Description System.Nullable < Dictionary < System.String , System.Nullable < System.String >>> | Improve this Doc View Source Associations Gets list of association descriptors for current entity. Declaration public List<AssociationDescriptor> Associations { get; } Property Value Type Description List < AssociationDescriptor > | Improve this Doc View Source CalculatedMembers Gets list of calculated column members (properties with IsColumn set to true ). Declaration public List<MemberAccessor>? CalculatedMembers { get; } Property Value Type Description System.Nullable < List < MemberAccessor >> | Improve this Doc View Source Columns Gets list of column descriptors for current entity. Declaration public List<ColumnDescriptor> Columns { get; } Property Value Type Description List < ColumnDescriptor > | Improve this Doc View Source DatabaseName Gets optional database name, to override default database name. See method for support information per provider. Declaration public string? DatabaseName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DynamicColumnsStore Gets the dynamic columns store descriptor. Declaration public ColumnDescriptor DynamicColumnsStore { get; } Property Value Type Description ColumnDescriptor | Improve this Doc View Source HasCalculatedMembers Returns true , if entity has calculated columns. Also see CalculatedMembers . Declaration public bool HasCalculatedMembers { get; } Property Value Type Description System.Boolean | Improve this Doc View Source InheritanceMapping Gets list of inheritance mapping descriptors for current entity. Declaration public List<InheritanceMapping> InheritanceMapping { get; } Property Value Type Description List < InheritanceMapping > | Improve this Doc View Source IsColumnAttributeRequired Gets or sets column mapping rules for current mapping class or interface. If true , properties and fields should be marked with one of those attributes to be used for mapping: ColumnAttribute ; PrimaryKeyAttribute ; IdentityAttribute ; ColumnAliasAttribute . Otherwise all supported members of scalar type will be used: public instance fields and properties; explicit interface implementation properties. Also see IsStructIsScalarType and ScalarTypeAttribute . Declaration public bool IsColumnAttributeRequired { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] Gets column descriptor by member name. Declaration public ColumnDescriptor this[string memberName] { get; } Parameters Type Name Description System.String memberName Member name. Property Value Type Description ColumnDescriptor Returns column descriptor or null , if descriptor not found. | Improve this Doc View Source ObjectType Gets mapping class type. Declaration public Type ObjectType { get; } Property Value Type Description Type | Improve this Doc View Source QueryFilterFunc Declaration public Delegate? QueryFilterFunc { get; } Property Value Type Description System.Nullable < Delegate > | Improve this Doc View Source SchemaName Gets optional schema/owner name, to override default name. See method for support information per provider. Declaration public string? SchemaName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ServerName Gets or sets optional linked server name. See method for support information per provider. Declaration public string? ServerName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SkipModificationFlags Gets flags for which operation values are skipped. Declaration public SkipModification SkipModificationFlags { get; } Property Value Type Description SkipModification | Improve this Doc View Source TableName Gets name of table or view in database. Declaration public string TableName { get; } Property Value Type Description System.String | Improve this Doc View Source TableOptions Gets or sets table options. See TableOptions enum for support information per provider. Declaration public TableOptions TableOptions { get; } Property Value Type Description TableOptions | Improve this Doc View Source TypeAccessor Gets or sets mapping type accessor. Declaration public TypeAccessor TypeAccessor { get; set; } Property Value Type Description TypeAccessor Methods | Improve this Doc View Source FindColumnDescriptor(MemberInfo) Returns column descriptor based on its MemberInfo Declaration public ColumnDescriptor FindColumnDescriptor(MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo Returns Type Description ColumnDescriptor Explicit Interface Implementations | Improve this Doc View Source IEntityChangeDescriptor.Columns Declaration IEnumerable<IColumnChangeDescriptor> IEntityChangeDescriptor.Columns { get; } Returns Type Description IEnumerable < IColumnChangeDescriptor > | Improve this Doc View Source IEntityChangeDescriptor.DatabaseName Declaration string? IEntityChangeDescriptor.DatabaseName { get; set; } Returns Type Description System.Nullable < System.String > | Improve this Doc View Source IEntityChangeDescriptor.SchemaName Declaration string? IEntityChangeDescriptor.SchemaName { get; set; } Returns Type Description System.Nullable < System.String > | Improve this Doc View Source IEntityChangeDescriptor.ServerName Declaration string? IEntityChangeDescriptor.ServerName { get; set; } Returns Type Description System.Nullable < System.String > | Improve this Doc View Source IEntityChangeDescriptor.TableName Declaration string IEntityChangeDescriptor.TableName { get; set; } Returns Type Description System.String | Improve this Doc View Source IEntityChangeDescriptor.TableOptions Declaration TableOptions IEntityChangeDescriptor.TableOptions { get; set; } Returns Type Description TableOptions Implements IEntityChangeDescriptor Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.EntityMappingBuilder-1.html": {
    "href": "api/LinqToDB.Mapping.EntityMappingBuilder-1.html",
    "title": "Class EntityMappingBuilder<TEntity> | Linq To DB (aka linq2db)",
    "keywords": "Class EntityMappingBuilder<TEntity> Fluent mapping entity builder. Inheritance System.Object EntityMappingBuilder<TEntity> Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class EntityMappingBuilder<TEntity> : object Type Parameters Name Description TEntity Entity mapping type. Constructors | Improve this Doc View Source EntityMappingBuilder(FluentMappingBuilder, Nullable<String>) Creates entity mapping builder. Declaration public EntityMappingBuilder(FluentMappingBuilder builder, string? configuration) Parameters Type Name Description FluentMappingBuilder builder Fluent mapping builder. System.Nullable < System.String > configuration Optional mapping schema configuration name, for which this entity builder should be taken into account. ProviderName for standard configuration names. Properties | Improve this Doc View Source Configuration Gets mapping schema configuration name, for which this entity builder should be taken into account. ProviderName for standard configuration names. Declaration public string? Configuration { get; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source Association<TOther>(Expression<Func<TEntity, TOther>>, Expression<Func<TEntity, TOther, Boolean>>, Boolean) Adds one-to-one association mapping to current entity. Declaration public PropertyMappingBuilder<TEntity, TOther> Association<TOther>(Expression<Func<TEntity, TOther>> prop, Expression<Func<TEntity, TOther, bool>> predicate, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, TOther>> prop Association member getter expression. Expression < Func <TEntity, TOther, System.Boolean >> predicate Predicate expression System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, TOther> Returns fluent property mapping builder. Type Parameters Name Description TOther Other association side type | Improve this Doc View Source Association<TOther>(Expression<Func<TEntity, TOther>>, Expression<Func<TEntity, IDataContext, IQueryable<TOther>>>, Boolean) Adds one-to-one association mapping to current entity. Declaration public PropertyMappingBuilder<TEntity, TOther> Association<TOther>(Expression<Func<TEntity, TOther>> prop, Expression<Func<TEntity, IDataContext, IQueryable<TOther>>> queryExpression, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, TOther>> prop Association member getter expression. Expression < Func <TEntity, IDataContext , IQueryable <TOther>>> queryExpression Query expression. System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, TOther> Returns fluent property mapping builder. Type Parameters Name Description TOther Other association side type | Improve this Doc View Source Association<TOther>(Expression<Func<TEntity, IEnumerable<TOther>>>, Expression<Func<TEntity, TOther, Boolean>>, Boolean) Adds one-to-many association mapping to current entity. Declaration public PropertyMappingBuilder<TEntity, IEnumerable<TOther>> Association<TOther>(Expression<Func<TEntity, IEnumerable<TOther>>> prop, Expression<Func<TEntity, TOther, bool>> predicate, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, IEnumerable <TOther>>> prop Association member getter expression. Expression < Func <TEntity, TOther, System.Boolean >> predicate Predicate expression. System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, IEnumerable <TOther>> Returns fluent property mapping builder. Type Parameters Name Description TOther Other association side type | Improve this Doc View Source Association<TOther>(Expression<Func<TEntity, IEnumerable<TOther>>>, Expression<Func<TEntity, IDataContext, IQueryable<TOther>>>, Boolean) Adds one-to-many association mapping to current entity. Declaration public PropertyMappingBuilder<TEntity, IEnumerable<TOther>> Association<TOther>(Expression<Func<TEntity, IEnumerable<TOther>>> prop, Expression<Func<TEntity, IDataContext, IQueryable<TOther>>> queryExpression, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, IEnumerable <TOther>>> prop Association member getter expression. Expression < Func <TEntity, IDataContext , IQueryable <TOther>>> queryExpression Query expression. System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, IEnumerable <TOther>> Returns fluent property mapping builder. Type Parameters Name Description TOther Other association side type | Improve this Doc View Source Association<TProperty, TThisKey, TOtherKey>(Expression<Func<TEntity, TProperty>>, Expression<Func<TEntity, TThisKey>>, Expression<Func<TProperty, TOtherKey>>, Boolean) Adds association mapping to current entity. Declaration public PropertyMappingBuilder<TEntity, TProperty> Association<TProperty, TThisKey, TOtherKey>(Expression<Func<TEntity, TProperty>> prop, Expression<Func<TEntity, TThisKey>> thisKey, Expression<Func<TProperty, TOtherKey>> otherKey, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, TProperty>> prop Association member getter expression. Expression < Func <TEntity, TThisKey>> thisKey This association key getter expression. Expression < Func <TProperty, TOtherKey>> otherKey Other association key getter expression. System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns fluent property mapping builder. Type Parameters Name Description TProperty Association member type. TThisKey This association side key type. TOtherKey Other association side key type. | Improve this Doc View Source Association<TPropElement, TThisKey, TOtherKey>(Expression<Func<TEntity, IEnumerable<TPropElement>>>, Expression<Func<TEntity, TThisKey>>, Expression<Func<TPropElement, TOtherKey>>, Boolean) Adds association mapping to current entity. Declaration public PropertyMappingBuilder<TEntity, IEnumerable<TPropElement>> Association<TPropElement, TThisKey, TOtherKey>(Expression<Func<TEntity, IEnumerable<TPropElement>>> prop, Expression<Func<TEntity, TThisKey>> thisKey, Expression<Func<TPropElement, TOtherKey>> otherKey, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, IEnumerable <TPropElement>>> prop Association member getter expression. Expression < Func <TEntity, TThisKey>> thisKey This association key getter expression. Expression < Func <TPropElement, TOtherKey>> otherKey Other association key getter expression. System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, IEnumerable <TPropElement>> Returns fluent property mapping builder. Type Parameters Name Description TPropElement Association member type. TThisKey This association side key type. TOtherKey Other association side key type. | Improve this Doc View Source DynamicColumnsStore(Expression<Func<TEntity, Nullable<Object>>>) Adds dynamic columns store dictionary member mapping to current entity. Declaration public EntityMappingBuilder<TEntity> DynamicColumnsStore(Expression<Func<TEntity, object?>> func) Parameters Type Name Description Expression < Func <TEntity, System.Nullable < System.Object >>> func Column mapping property or field getter expression. Returns Type Description EntityMappingBuilder <TEntity> Returns fluent property mapping builder. | Improve this Doc View Source DynamicPropertyAccessors(Expression<Func<TEntity, String, Object, Object>>, Expression<Action<TEntity, String, Object>>) Declaration public EntityMappingBuilder<TEntity> DynamicPropertyAccessors(Expression<Func<TEntity, string, object, object>> getter, Expression<Action<TEntity, string, object>> setter) Parameters Type Name Description Expression < Func <TEntity, System.String , System.Object , System.Object >> getter Expression < Action <TEntity, System.String , System.Object >> setter Returns Type Description EntityMappingBuilder <TEntity> | Improve this Doc View Source Entity<TE>(Nullable<String>) Creates entity builder for specified mapping type. Declaration public EntityMappingBuilder<TE> Entity<TE>(string? configuration = null) Parameters Type Name Description System.Nullable < System.String > configuration Optional mapping schema configuration name, for which this entity builder should be taken into account. ProviderName for standard configuration names. Returns Type Description EntityMappingBuilder <TE> Returns new fluent entity mapping builder. Type Parameters Name Description TE Mapping type. | Improve this Doc View Source GetAttributes<TA>() Returns attributes of specified type, applied to current entity type. Declaration public TA[] GetAttributes<TA>() where TA : Attribute Returns Type Description TA[] Returns list of attributes, applied to current entity type. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source GetAttributes<TA>(Func<TA, Nullable<String>>) Returns attributes of specified type, applied to current entity type and active for current configuration. Declaration public TA[] GetAttributes<TA>(Func<TA, string?> configGetter) where TA : Attribute Parameters Type Name Description Func <TA, System.Nullable < System.String >> configGetter Function to extract configuration name from attribute instance. Returns Type Description TA[] Returns list of attributes. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source GetAttributes<TA>(MemberInfo) Returns attributes of specified type, applied to specified entity member. Member could be inherited from parent classes. Declaration public TA[] GetAttributes<TA>(MemberInfo memberInfo) where TA : Attribute Parameters Type Name Description MemberInfo memberInfo Member info object. Returns Type Description TA[] Returns list of attributes, applied to specified entity member. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source GetAttributes<TA>(MemberInfo, Func<TA, Nullable<String>>) Returns attributes of specified type, applied to specified entity member and active for current configuration. Declaration public TA[] GetAttributes<TA>(MemberInfo memberInfo, Func<TA, string?> configGetter) where TA : Attribute Parameters Type Name Description MemberInfo memberInfo Member info object. Func <TA, System.Nullable < System.String >> configGetter Function to extract configuration name from attribute instance. Returns Type Description TA[] Returns list of attributes. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source GetAttributes<TA>(Type) Returns attributes of specified type, applied to specified entity type. Declaration public TA[] GetAttributes<TA>(Type type) where TA : Attribute Parameters Type Name Description Type type Entity type. Returns Type Description TA[] Returns list of attributes, applied to specified entity type. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source GetAttributes<TA>(Type, Func<TA, Nullable<String>>) Returns attributes of specified type, applied to specified entity type and active for current configuration. Declaration public TA[] GetAttributes<TA>(Type type, Func<TA, string?> configGetter) where TA : Attribute Parameters Type Name Description Type type Entity type. Func <TA, System.Nullable < System.String >> configGetter Function to extract configuration name from attribute instance. Returns Type Description TA[] Returns list of attributes. Type Parameters Name Description TA Attribute type. | Improve this Doc View Source HasAttribute(Attribute) Adds mapping attribute to current entity. Declaration public EntityMappingBuilder<TEntity> HasAttribute(Attribute attribute) Parameters Type Name Description Attribute attribute Mapping attribute to add. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasAttribute(Expression<Func<TEntity, Nullable<Object>>>, Attribute) Adds mapping attribute to a member, specified using lambda expression. Declaration public EntityMappingBuilder<TEntity> HasAttribute(Expression<Func<TEntity, object?>> func, Attribute attribute) Parameters Type Name Description Expression < Func <TEntity, System.Nullable < System.Object >>> func Target member, specified using lambda expression. Attribute attribute Mapping attribute to add to specified member. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasAttribute(LambdaExpression, Attribute) Adds mapping attribute to a member, specified using lambda expression. Declaration public EntityMappingBuilder<TEntity> HasAttribute(LambdaExpression func, Attribute attribute) Parameters Type Name Description LambdaExpression func Target member, specified using lambda expression. Attribute attribute Mapping attribute to add to specified member. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasAttribute(MemberInfo, Attribute) Adds mapping attribute to specified member. Declaration public EntityMappingBuilder<TEntity> HasAttribute(MemberInfo memberInfo, Attribute attribute) Parameters Type Name Description MemberInfo memberInfo Target member. Attribute attribute Mapping attribute to add to specified member. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasColumn(Expression<Func<TEntity, Nullable<Object>>>, Int32) Adds column mapping to current entity. Declaration public EntityMappingBuilder<TEntity> HasColumn(Expression<Func<TEntity, object?>> func, int order = null) Parameters Type Name Description Expression < Func <TEntity, System.Nullable < System.Object >>> func Column member getter expression. System.Int32 order Unused. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasDatabaseName(String) Sets database name, to override default database name. See method for support information per provider. Declaration public EntityMappingBuilder<TEntity> HasDatabaseName(string databaseName) Parameters Type Name Description System.String databaseName Database name. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasIdentity<TProperty>(Expression<Func<TEntity, TProperty>>) Adds identity column mappping to current entity. Declaration public EntityMappingBuilder<TEntity> HasIdentity<TProperty>(Expression<Func<TEntity, TProperty>> func) Parameters Type Name Description Expression < Func <TEntity, TProperty>> func Identity field getter expression. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. Type Parameters Name Description TProperty | Improve this Doc View Source HasIsTemporary(Boolean) Sets linked server name. See IsTemporary<T>(ITable<T>, Boolean) method for support information per provider. Declaration public EntityMappingBuilder<TEntity> HasIsTemporary(bool isTemporary = true) Parameters Type Name Description System.Boolean isTemporary Linked server name. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasPrimaryKey<TProperty>(Expression<Func<TEntity, TProperty>>, Int32) Adds primary key mapping to current entity. Declaration public EntityMappingBuilder<TEntity> HasPrimaryKey<TProperty>(Expression<Func<TEntity, TProperty>> func, int order = null) Parameters Type Name Description Expression < Func <TEntity, TProperty>> func Primary key getter expression. System.Int32 order Primary key field order. When multiple fields specified by getter expression, fields will be ordered from first menthioned field to last one starting from provided order with step 1 . Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. Type Parameters Name Description TProperty | Improve this Doc View Source HasQueryFilter(Expression<Func<TEntity, IDataContext, Boolean>>) Specifies a LINQ predicate expression that will automatically be applied to any queries targeting this entity type. Declaration public EntityMappingBuilder<TEntity> HasQueryFilter(Expression<Func<TEntity, IDataContext, bool>> filter) Parameters Type Name Description Expression < Func <TEntity, IDataContext , System.Boolean >> filter The LINQ predicate expression. Returns Type Description EntityMappingBuilder <TEntity> The same builder instance so that multiple configuration calls can be chained. | Improve this Doc View Source HasQueryFilter(Func<IQueryable<TEntity>, IDataContext, IQueryable<TEntity>>) Specifies a LINQ function that will automatically be applied to any queries targeting this entity type. Declaration public EntityMappingBuilder<TEntity> HasQueryFilter(Func<IQueryable<TEntity>, IDataContext, IQueryable<TEntity>> filterFunc) Parameters Type Name Description Func < IQueryable <TEntity>, IDataContext , IQueryable <TEntity>> filterFunc The LINQ predicate expression. Returns Type Description EntityMappingBuilder <TEntity> The same builder instance so that multiple configuration calls can be chained. | Improve this Doc View Source HasQueryFilter<TDataContext>(Expression<Func<TEntity, TDataContext, Boolean>>) Specifies a LINQ predicate expression that will automatically be applied to any queries targeting this entity type. Declaration public EntityMappingBuilder<TEntity> HasQueryFilter<TDataContext>(Expression<Func<TEntity, TDataContext, bool>> filter) where TDataContext : IDataContext Parameters Type Name Description Expression < Func <TEntity, TDataContext, System.Boolean >> filter The LINQ predicate expression. Returns Type Description EntityMappingBuilder <TEntity> The same builder instance so that multiple configuration calls can be chained. Type Parameters Name Description TDataContext | Improve this Doc View Source HasQueryFilter<TDataContext>(Func<IQueryable<TEntity>, TDataContext, IQueryable<TEntity>>) Specifies a LINQ function that will automatically be applied to any queries targeting this entity type. Declaration public EntityMappingBuilder<TEntity> HasQueryFilter<TDataContext>(Func<IQueryable<TEntity>, TDataContext, IQueryable<TEntity>> filterFunc) where TDataContext : IDataContext Parameters Type Name Description Func < IQueryable <TEntity>, TDataContext, IQueryable <TEntity>> filterFunc The LINQ predicate expression. Returns Type Description EntityMappingBuilder <TEntity> The same builder instance so that multiple configuration calls can be chained. Type Parameters Name Description TDataContext | Improve this Doc View Source HasSchemaName(String) Sets database schema/owner name for current entity, to override default name. See method for support information per provider. Declaration public EntityMappingBuilder<TEntity> HasSchemaName(string schemaName) Parameters Type Name Description System.String schemaName Schema/owner name. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasServerName(String) Sets linked server name. See method for support information per provider. Declaration public EntityMappingBuilder<TEntity> HasServerName(string serverName) Parameters Type Name Description System.String serverName Linked server name. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasSkipValuesOnInsert(Expression<Func<TEntity, Nullable<Object>>>, Nullable<Object>[]) Adds option for skipping values for column on current entity during insert. Declaration public EntityMappingBuilder<TEntity> HasSkipValuesOnInsert(Expression<Func<TEntity, object?>> func, params object? [] values) Parameters Type Name Description Expression < Func <TEntity, System.Nullable < System.Object >>> func Column member getter expression. System.Nullable < System.Object >[] values Values that should be skipped during insert. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasSkipValuesOnUpdate(Expression<Func<TEntity, Nullable<Object>>>, Nullable<Object>[]) Adds option for skipping values for column on current entity during update. Declaration public EntityMappingBuilder<TEntity> HasSkipValuesOnUpdate(Expression<Func<TEntity, object?>> func, params object? [] values) Parameters Type Name Description Expression < Func <TEntity, System.Nullable < System.Object >>> func Column member getter expression. System.Nullable < System.Object >[] values Values that should be skipped during update. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasTableName(String) Sets database table name for current entity. Declaration public EntityMappingBuilder<TEntity> HasTableName(string tableName) Parameters Type Name Description System.String tableName Table name. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source HasTableOptions(TableOptions) Sets Table options. See TableOptions<T>(ITable<T>, TableOptions) method for support information per provider. Declaration public EntityMappingBuilder<TEntity> HasTableOptions(TableOptions tableOptions) Parameters Type Name Description TableOptions tableOptions Table options. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source Ignore(Expression<Func<TEntity, Nullable<Object>>>, Int32) Instruct LINQ to DB to not incude specified member into mapping. Declaration public EntityMappingBuilder<TEntity> Ignore(Expression<Func<TEntity, object?>> func, int order = null) Parameters Type Name Description Expression < Func <TEntity, System.Nullable < System.Object >>> func Member getter expression. System.Int32 order Unused. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source Inheritance<TS>(Expression<Func<TEntity, TS>>, TS, Type, Boolean) Adds inheritance mapping for specified discriminator value. Declaration public EntityMappingBuilder<TEntity> Inheritance<TS>(Expression<Func<TEntity, TS>> key, TS value, Type type, bool isDefault = false) Parameters Type Name Description Expression < Func <TEntity, TS>> key Discriminator member getter expression. TS value Discriminator value. Type type Mapping type, used with specified discriminator value. System.Boolean isDefault If true , current mapping type used by default. Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. Type Parameters Name Description TS Discriminator value type. | Improve this Doc View Source IsColumnNotRequired() Sets if it is not required to use IsColumn() - all public fields and properties are treated as columns This is the default behaviour Declaration public EntityMappingBuilder<TEntity> IsColumnNotRequired() Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source IsColumnRequired() Sets if it is required to use IsColumn() to treat property or field as column Declaration public EntityMappingBuilder<TEntity> IsColumnRequired() Returns Type Description EntityMappingBuilder <TEntity> Returns current fluent entity mapping builder. | Improve this Doc View Source Member<TProperty>(Expression<Func<TEntity, TProperty>>) Adds member mapping to current entity. Declaration public PropertyMappingBuilder<TEntity, TProperty> Member<TProperty>(Expression<Func<TEntity, TProperty>> func) Parameters Type Name Description Expression < Func <TEntity, TProperty>> func Column mapping property or field getter expression. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns fluent property mapping builder. Type Parameters Name Description TProperty | Improve this Doc View Source Property<TProperty>(Expression<Func<TEntity, TProperty>>) Adds column mapping to current entity. Declaration public PropertyMappingBuilder<TEntity, TProperty> Property<TProperty>(Expression<Func<TEntity, TProperty>> func) Parameters Type Name Description Expression < Func <TEntity, TProperty>> func Column mapping property or field getter expression. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns fluent property mapping builder. Type Parameters Name Description TProperty Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.FluentMappingBuilder.html": {
    "href": "api/LinqToDB.Mapping.FluentMappingBuilder.html",
    "title": "Class FluentMappingBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class FluentMappingBuilder Fluent mapping builder. Inheritance System.Object FluentMappingBuilder Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class FluentMappingBuilder : object Constructors | Improve this Doc View Source FluentMappingBuilder(MappingSchema) Creates fluent mapping builder for specified mapping schema. Declaration public FluentMappingBuilder(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Mapping schema. Properties | Improve this Doc View Source MappingSchema Gets builder's mapping schema. Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema Methods | Improve this Doc View Source Entity<T>(Nullable<String>) Creates entity builder for specified mapping type. Declaration public EntityMappingBuilder<T> Entity<T>(string? configuration = null) Parameters Type Name Description System.Nullable < System.String > configuration Optional mapping schema configuration name, for which this entity builder should be taken into account. ProviderName for standard configuration names. Returns Type Description EntityMappingBuilder <T> Returns entity fluent mapping builder. Type Parameters Name Description T Mapping type. | Improve this Doc View Source GetAttributes<T>(Type) Gets attributes of type T , applied to specified type. Declaration public T[] GetAttributes<T>(Type type) where T : Attribute Parameters Type Name Description Type type Type with attributes. Returns Type Description T[] Returns attributes of specified type, applied to type . Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo) Gets attributes of type T , applied to specified member. Search for member in specified type or it's parents. Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo) where T : Attribute Parameters Type Name Description Type type Member owner type. MemberInfo memberInfo Member descriptor. Returns Type Description T[] Returns attributes of specified type, applied to memberInfo . Type Parameters Name Description T Attribute type. | Improve this Doc View Source HasAttribute(LambdaExpression, Attribute) Adds mapping attribute to a member, specified using lambda expression. Declaration public FluentMappingBuilder HasAttribute(LambdaExpression func, Attribute attribute) Parameters Type Name Description LambdaExpression func Target member, specified using lambda expression. Attribute attribute Mapping attribute to add to specified member. Returns Type Description FluentMappingBuilder Returns current fluent mapping builder. | Improve this Doc View Source HasAttribute(MemberInfo, Attribute) Adds mapping attribute to specified member. Declaration public FluentMappingBuilder HasAttribute(MemberInfo memberInfo, Attribute attribute) Parameters Type Name Description MemberInfo memberInfo Target member. Attribute attribute Mapping attribute to add to specified member. Returns Type Description FluentMappingBuilder Returns current fluent mapping builder. | Improve this Doc View Source HasAttribute(Type, Attribute) Adds mapping attribute to specified type. Declaration public FluentMappingBuilder HasAttribute(Type type, Attribute attribute) Parameters Type Name Description Type type Target type. Attribute attribute Mapping attribute to add to specified type. Returns Type Description FluentMappingBuilder Returns current fluent mapping builder. | Improve this Doc View Source HasAttribute<T>(Attribute) Adds mapping attribute to specified type. Declaration public FluentMappingBuilder HasAttribute<T>(Attribute attribute) Parameters Type Name Description Attribute attribute Mapping attribute to add to specified type. Returns Type Description FluentMappingBuilder Returns current fluent mapping builder. Type Parameters Name Description T Target type. | Improve this Doc View Source HasAttribute<T>(Expression<Func<T, Nullable<Object>>>, Attribute) Adds mapping attribute to a member, specified using lambda expression. Declaration public FluentMappingBuilder HasAttribute<T>(Expression<Func<T, object?>> func, Attribute attribute) Parameters Type Name Description Expression < Func <T, System.Nullable < System.Object >>> func Target member, specified using lambda expression. Attribute attribute Mapping attribute to add to specified member. Returns Type Description FluentMappingBuilder Returns current fluent mapping builder. Type Parameters Name Description T Type of labmda expression parameter. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.html": {
    "href": "api/LinqToDB.Mapping.html",
    "title": "Namespace LinqToDB.Mapping | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Mapping Classes AssociationAttribute Defines relation between tables or views. Could be applied to: instance properties and fields; instance and static methods. For associations, defined using static methods, this mapping side defined by type of first parameter. Also, optionally, you can pass data context object as extra method parameter. Based on association type - to one or to multiple records - result type should be target record's mapping type or collection. By default associations are used only for joins generation in LINQ queries and will have null value for loaded records. To load data into association, you should explicitly specify it in your query using method. AssociationDescriptor Stores association descriptor. ColumnAliasAttribute Specifies that current field or property is just an alias to another property or field. Currently this attribute has several issues: you can apply it to class or interface - such attribute will be ignored by linq2db; it is possible to define attribute without setting MemberName value; you can define alias to another alias property or field and potentially create loop. ColumnAttribute Configures mapping of mapping class member to database column. Could be applied directly to a property or field or to mapping class/interface. In latter case you should specify member name using MemberName property. ColumnDescriptor Stores mapping entity column descriptor. DataTypeAttribute This attribute allows to override default types, defined in mapping schema, for current column. Also see DataType and DbType . Applying this attribute to class or interface will have no effect. DynamicColumnAccessorAttribute Configure setter and getter methods for dynamic columns. DynamicColumnInfo Represents a dynamic column, which doesn't have a backing field in it's declaring type. DynamicColumnsStoreAttribute Marks target member as dynamic columns store. EntityDescriptor Stores mapping entity descriptor. EntityMappingBuilder<TEntity> Fluent mapping entity builder. FluentMappingBuilder Fluent mapping builder. IdentityAttribute Marks target column as identity column with value, generated on database side during insert operations. Identity columns will be ignored for insert and update operations with implicit column list like Insert<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) or Update<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) methods. InheritanceMapping Stores inheritance mapping information for single discriminator value. InheritanceMappingAttribute Defines to which type linq2db should map record based on discriminator value. You can apply this attribute to a base class or insterface, implemented by all child classes. Don't forget to define discriminator value storage column using IsDiscriminator . MappingSchema Mapping schema. MapValue Stores enum mapping information for single enum value. MapValueAttribute Defines bidirectional mapping between enum field value, used on client and database value, stored in database and used in queries. Enumeration field could have multiple MapValueAttribute attributes. Mapping from database value to enumeration performed when you load data from database. Linq2db will search for enumeration field with MapValueAttribute with required value. If attribute with such value is not found, you will receive LinqToDBException error. If you cannot specify all possible values using MapValueAttribute , you can specify custom mapping using methods like . Mapping from enumeration value performed when you save it to database or use in query. If your enum field has multiple MapValueAttribute attributes, you should mark one of them as default using IsDefault property. NotColumnAttribute Marks current property or column to be ignored for mapping when explicit column mapping disabled. See IsColumnAttributeRequired . NotNullAttribute Sets nullability flag for current column to false . See NullableAttribute for more details. NullableAttribute Explicitly specifies that associated column could contain NULL values. Overrides default nullability flag from current mapping schema for property/field type. Has lower priority over CanBeNull . Using this attribute, you can allow NULL values for identity columns. PrimaryKeyAttribute Marks property or field as a member of primary key for current mapping type. PropertyMappingBuilder<TEntity, TProperty> Column or association fluent mapping builder. QueryFilterAttribute Contains reference to filter function defined by ResultSetIndexAttribute Used to mark the index of a result set when multiple result sets need to be processed for a command. ScalarTypeAttribute Overrides default scalar detection for target class or structure. By default linq2db treats primitives and structs as scalar types. This attribute allows you to mark class or struct as scalar type or mark struct as non-scalar type. Also see IsStructIsScalarType . Note that if you marks some type as scalar, you will need to define custom mapping logic between object of that type and data parameter using methods. SequenceNameAttribute Specifies value generation sequence for mapped property of field. Currently it supported only for: Firebird generators; Oracle sequences; PostgreSQL serial pseudotypes/sequences; SkipBaseAttribute Abstract Attribute to be used for skipping values SkipValuesByListAttribute Abstract Attribute to be used for skipping value for SkipValuesOnInsertAttribute based on Insert or SkipValuesOnUpdateAttribute based on Update /> or a custom Attribute derived from this to override ShouldSkip(Object, EntityDescriptor, ColumnDescriptor) SkipValuesOnInsertAttribute Attribute for skipping specific values on insert. SkipValuesOnUpdateAttribute Attribute for skipping specific values on update. TableAttribute Maps databse table or view to a class or interface. You can apply it to any class including non-public, nester or abstract classes. Applying it to interfaces will allow you to perform queries against target table, but you need to specify projection in your query explicitly, if you want to select data from such mapping. ValueConverterAttribute Interfaces IColumnChangeDescriptor Mapping entity column descriptor change interface. IEntityChangeDescriptor Mapping entity descriptor change interface. Enums Relationship Defines relationship types for associations. See Relationship for more details. SkipModification Flags for specifying skip modifications used for Attributes based on SkipBaseAttribute ."
  },
  "api/LinqToDB.Mapping.IColumnChangeDescriptor.html": {
    "href": "api/LinqToDB.Mapping.IColumnChangeDescriptor.html",
    "title": "Interface IColumnChangeDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Interface IColumnChangeDescriptor Mapping entity column descriptor change interface. Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public interface IColumnChangeDescriptor Properties | Improve this Doc View Source ColumnName Gets or sets the name of a column in database. If not specified, MemberName value will be returned. Declaration string ColumnName { get; set; } Property Value Type Description System.String | Improve this Doc View Source MemberName Gets the name of mapped member. When applied to class or interface, should contain name of property of field. If column is mapped to a property or field of composite object, MemberName should contain a path to that member using dot as separator. public class Address { public string City { get; set; } public string Street { get; set; } public int Building { get; set; } } [Column(\"city\", \"Residence.Street\")] [Column(\"user_name\", \"Name\")] public class User { public string Name; [Column(\"street\", \".Street\")] [Column(\"building_number\", MemberName = \".Building\")] public Address Residence { get; set; } } Declaration string MemberName { get; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.IdentityAttribute.html": {
    "href": "api/LinqToDB.Mapping.IdentityAttribute.html",
    "title": "Class IdentityAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityAttribute Marks target column as identity column with value, generated on database side during insert operations. Identity columns will be ignored for insert and update operations with implicit column list like Insert<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) or Update<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) methods. Inheritance System.Object IdentityAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class IdentityAttribute : Attribute Constructors | Improve this Doc View Source IdentityAttribute() Creates attribute instance. Declaration public IdentityAttribute() | Improve this Doc View Source IdentityAttribute(Nullable<String>) Creates attribute instance. Declaration public IdentityAttribute(string? configuration) Parameters Type Name Description System.Nullable < System.String > configuration Mapping schema configuration name. See Configuration . Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.IEntityChangeDescriptor.html": {
    "href": "api/LinqToDB.Mapping.IEntityChangeDescriptor.html",
    "title": "Interface IEntityChangeDescriptor | Linq To DB (aka linq2db)",
    "keywords": "Interface IEntityChangeDescriptor Mapping entity descriptor change interface. Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public interface IEntityChangeDescriptor Properties | Improve this Doc View Source Columns Gets list of change interfaces for column descriptors for current entity. Declaration IEnumerable<IColumnChangeDescriptor> Columns { get; } Property Value Type Description IEnumerable < IColumnChangeDescriptor > | Improve this Doc View Source DatabaseName Gets or sets optional database name, to override default database name. See method for support information per provider. Declaration string? DatabaseName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SchemaName Gets or sets optional schema/owner name, to override default name. See method for support information per provider. Declaration string? SchemaName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ServerName Gets or sets optional linked server name. See method for support information per provider. Declaration string? ServerName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TableName Gets or sets name of table or view in database. Declaration string TableName { get; set; } Property Value Type Description System.String | Improve this Doc View Source TableOptions Gets or sets Table options. See TableOptions enum for support information per provider. Declaration TableOptions TableOptions { get; set; } Property Value Type Description TableOptions | Improve this Doc View Source TypeAccessor Gets or sets mapping type accessor. Declaration TypeAccessor TypeAccessor { get; set; } Property Value Type Description TypeAccessor Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.InheritanceMapping.html": {
    "href": "api/LinqToDB.Mapping.InheritanceMapping.html",
    "title": "Class InheritanceMapping | Linq To DB (aka linq2db)",
    "keywords": "Class InheritanceMapping Stores inheritance mapping information for single discriminator value. Inheritance System.Object InheritanceMapping Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class InheritanceMapping : object Fields | Improve this Doc View Source Code Inheritance discriminator value. Declaration public object? Code Field Value Type Description System.Nullable < System.Object > | Improve this Doc View Source Discriminator Discriminator column descriptor. Declaration public ColumnDescriptor Discriminator Field Value Type Description ColumnDescriptor | Improve this Doc View Source IsDefault Is it default mapping. Declaration public bool IsDefault Field Value Type Description System.Boolean | Improve this Doc View Source Type Mapping class type for current discriminator value. Declaration public Type Type Field Value Type Description Type Properties | Improve this Doc View Source DiscriminatorName Gets discriminator field or property name. Declaration public string DiscriminatorName { get; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.InheritanceMappingAttribute.html": {
    "href": "api/LinqToDB.Mapping.InheritanceMappingAttribute.html",
    "title": "Class InheritanceMappingAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class InheritanceMappingAttribute Defines to which type linq2db should map record based on discriminator value. You can apply this attribute to a base class or insterface, implemented by all child classes. Don't forget to define discriminator value storage column using IsDiscriminator . Inheritance System.Object InheritanceMappingAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class InheritanceMappingAttribute : Attribute Remarks You cannot configure inheritance mapping using this attribute for discriminator types, not supported by .NET attributes. See document for a list of supported types. Properties | Improve this Doc View Source Code Gets or sets discriminator value. Declaration public object? Code { get; set; } Property Value Type Description System.Nullable < System.Object > | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsDefault Get or sets flag, that tells linq2db that current mapping should be used by default if suitable mapping type not found. Declaration public bool IsDefault { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Type Gets or sets type, to which record with current discriminator value should be mapped. Declaration public Type Type { get; set; } Property Value Type Description Type Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.MappingSchema.html": {
    "href": "api/LinqToDB.Mapping.MappingSchema.html",
    "title": "Class MappingSchema | Linq To DB (aka linq2db)",
    "keywords": "Class MappingSchema Mapping schema. Inheritance System.Object MappingSchema AccessMappingSchema AccessMappingSchema.ODBCMappingSchema AccessMappingSchema.OleDbMappingSchema DB2LUWMappingSchema DB2MappingSchema DB2zOSMappingSchema FirebirdMappingSchema InformixMappingSchema InformixMappingSchema.DB2MappingSchema InformixMappingSchema.IfxMappingSchema MySqlMappingSchema MySqlMappingSchema.MySqlConnectorMappingSchema MySqlMappingSchema.MySqlOfficialMappingSchema OracleMappingSchema OracleMappingSchema.ManagedMappingSchema OracleMappingSchema.NativeMappingSchema PostgreSQL92MappingSchema PostgreSQL93MappingSchema PostgreSQL95MappingSchema PostgreSQLMappingSchema SapHanaMappingSchema SapHanaMappingSchema.NativeMappingSchema SapHanaMappingSchema.OdbcMappingSchema SqlCeMappingSchema SQLiteMappingSchema SQLiteMappingSchema.ClassicMappingSchema SQLiteMappingSchema.MicrosoftMappingSchema SqlServer2000MappingSchema SqlServer2005MappingSchema SqlServer2008MappingSchema SqlServer2012MappingSchema SqlServer2016MappingSchema SqlServer2017MappingSchema SqlServerMappingSchema SybaseMappingSchema SybaseMappingSchema.ManagedMappingSchema SybaseMappingSchema.NativeMappingSchema Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class MappingSchema : object Constructors | Improve this Doc View Source MappingSchema() Creates mapping schema instance. Declaration public MappingSchema() | Improve this Doc View Source MappingSchema(MappingSchema[]) Creates mapping schema, derived from other mapping schemas. Declaration public MappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Base mapping schemas. | Improve this Doc View Source MappingSchema(Nullable<String>) Creates mapping schema for specified configuration name. Declaration public MappingSchema(string? configuration) Parameters Type Name Description System.Nullable < System.String > configuration Mapping schema configuration name. ProviderName for standard names. Remarks Schema name should be unique for mapping schemas with different mappings. Using same name could lead to incorrect mapping used when mapping schemas with same name define different mappings for same type. | Improve this Doc View Source MappingSchema(Nullable<String>, MappingSchema[]) Creates mapping schema with specified configuration name and base mapping schemas. Declaration public MappingSchema(string? configuration, params MappingSchema[] schemas) Parameters Type Name Description System.Nullable < System.String > configuration Mapping schema configuration name. ProviderName for standard names. MappingSchema [] schemas Base mapping schemas. Remarks Schema name should be unique for mapping schemas with different mappings. Using same name could lead to incorrect mapping used when mapping schemas with same name define different mappings for same type. Fields | Improve this Doc View Source Default Default mapping schema, used by LINQ to DB, when more specific mapping schema not provided. Declaration public static MappingSchema Default Field Value Type Description MappingSchema Properties | Improve this Doc View Source ColumnNameComparer Gets or sets column name comparison rules for comparison of column names in mapping with column name, returned by provider's data reader. Declaration public StringComparer ColumnNameComparer { get; set; } Property Value Type Description StringComparer | Improve this Doc View Source ConfigurationList Gets configurations, associated with current mapping schema. Declaration public string[] ConfigurationList { get; } Property Value Type Description System.String [] | Improve this Doc View Source EntityDescriptorCreatedCallback Gets or sets action, called when the EntityDescriptor is created. Could be used to adjust created descriptor before use. Declaration public Action<MappingSchema, IEntityChangeDescriptor>? EntityDescriptorCreatedCallback { get; set; } Property Value Type Description System.Nullable < Action < MappingSchema , IEntityChangeDescriptor >> | Improve this Doc View Source MetadataReader Gets or sets metadata attributes provider for current schema. Metadata providers, shipped with LINQ to DB: MetadataReader - aggregation metadata provider over collection of other providers; AttributeReader - .NET attributes provider; FluentMetadataReader - fluent mappings metadata provider; SystemDataLinqAttributeReader - metadata provider that converts attributes to LINQ to DB mapping attributes; SystemDataSqlServerAttributeReader - metadata provider that converts attributes to LINQ to DB mapping attributes; XmlAttributeReader - XML-based mappings metadata provider. Declaration public IMetadataReader MetadataReader { get; set; } Property Value Type Description IMetadataReader | Improve this Doc View Source ValueToSqlConverter Gets value to SQL (usually literal) converter. Declaration public ValueToSqlConverter ValueToSqlConverter { get; } Property Value Type Description ValueToSqlConverter Methods | Improve this Doc View Source AddMetadataReader(IMetadataReader) Adds additional metadata attributes provider to current schema. Declaration public void AddMetadataReader(IMetadataReader reader) Parameters Type Name Description IMetadataReader reader Metadata attributes provider. | Improve this Doc View Source AddScalarType(Type, DataType) Configure provided type mapping to scalar database type. Declaration public void AddScalarType(Type type, DataType dataType = default(DataType)) Parameters Type Name Description Type type Type to configure. DataType dataType Optional scalar data type. | Improve this Doc View Source AddScalarType(Type, SqlDataType) Configure provided type mapping to scalar database type. Declaration public void AddScalarType(Type type, SqlDataType dataType) Parameters Type Name Description Type type Type to configure. SqlDataType dataType Database data type. | Improve this Doc View Source AddScalarType(Type, Nullable<Object>, DataType) Configure provided type mapping to scalar database type. Declaration public void AddScalarType(Type type, object? defaultValue, DataType dataType = default(DataType)) Parameters Type Name Description Type type Type to configure. System.Nullable < System.Object > defaultValue Default value. See for more details. DataType dataType Optional scalar data type. | Improve this Doc View Source AddScalarType(Type, Nullable<Object>, Boolean, DataType) Configure provided type mapping to scalar database type. Declaration public void AddScalarType(Type type, object? defaultValue, bool canBeNull, DataType dataType = default(DataType)) Parameters Type Name Description Type type Type to configure. System.Nullable < System.Object > defaultValue Default value. See for more details. System.Boolean canBeNull Set null value support flag. See SetCanBeNull(Type, Boolean) for more details. DataType dataType Optional scalar data type. | Improve this Doc View Source ChangeType(Nullable<Object>, Type) Converts value to specified type. Declaration public object? ChangeType(object? value, Type conversionType) Parameters Type Name Description System.Nullable < System.Object > value Value to convert. Type conversionType Target type. Returns Type Description System.Nullable < System.Object > Converted value. | Improve this Doc View Source ChangeTypeTo<T>(Nullable<Object>) Converts value to specified type. Declaration public T ChangeTypeTo<T>(object? value) Parameters Type Name Description System.Nullable < System.Object > value Value to convert. Returns Type Description T Converted value. Type Parameters Name Description T Target type. | Improve this Doc View Source ClearCache() Clears EntityDescriptor cache. Declaration public static void ClearCache() | Improve this Doc View Source EnumToValue(Enum) Converts enum value to database value. Declaration public object? EnumToValue(Enum value) Parameters Type Name Description Enum value Enum value. Returns Type Description System.Nullable < System.Object > Database value. | Improve this Doc View Source GenerateConvertedValueExpression(Nullable<Object>, Type) Declaration public Expression GenerateConvertedValueExpression(object? value, Type type) Parameters Type Name Description System.Nullable < System.Object > value Type type Returns Type Description Expression | Improve this Doc View Source GenerateSafeConvert(Type, Type) Declaration public LambdaExpression GenerateSafeConvert(Type fromType, Type type) Parameters Type Name Description Type fromType Type type Returns Type Description LambdaExpression | Improve this Doc View Source GetAttribute<T>(Type, Func<T, Nullable<String>>, Boolean) Gets attribute of specified type, associated with specified type. Attributes filtered by schema's configuration names (see ConfigurationList ). Declaration public T GetAttribute<T>(Type type, Func<T, string?> configGetter, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Attribute owner type. Func <T, System.Nullable < System.String >> configGetter Attribute configuration name provider. System.Boolean inherit If true - include inherited attribute. Returns Type Description T First found attribute of specified type or null , if no attributes found. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttribute<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean) Gets attribute of specified type, associated with specified type member. Attributes filtered by schema's configuration names (see ConfigurationList ). Declaration public T GetAttribute<T>(Type type, MemberInfo memberInfo, Func<T, string?> configGetter, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Member's owner type. MemberInfo memberInfo Attribute owner member. Func <T, System.Nullable < System.String >> configGetter Attribute configuration name provider. System.Boolean inherit If true - include inherited attribute. Returns Type Description T First found attribute of specified type or null , if no attributes found. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttribute<T>(Type, MemberInfo, Boolean) Gets attribute of specified type, associated with specified type member. Declaration public T GetAttribute<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Member's owner type. MemberInfo memberInfo Attribute owner member. System.Boolean inherit If true - include inherited attribute. Returns Type Description T First found attribute of specified type or null , if no attributes found. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttribute<T>(Type, Boolean) Gets attribute of specified type, associated with specified type. Declaration public T GetAttribute<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Attribute owner type. System.Boolean inherit If true - include inherited attribute. Returns Type Description T First found attribute of specified type or null , if no attributes found. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttributes<T>(Type, Func<T, Nullable<String>>, Boolean, Boolean) Gets attributes of specified type, associated with specified type. Attributes filtered by schema's configuration names (see ConfigurationList ). Declaration public T[] GetAttributes<T>(Type type, Func<T, string?> configGetter, bool inherit = true, bool exactForConfiguration = false) where T : Attribute Parameters Type Name Description Type type Attributes owner type. Func <T, System.Nullable < System.String >> configGetter Attribute configuration name provider. System.Boolean inherit If true - include inherited attributes. System.Boolean exactForConfiguration If true - only associated to configuration attributes will be returned. Returns Type Description T[] Attributes of specified type. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Func<T, Nullable<String>>, Boolean, Boolean) Gets attributes of specified type, associated with specified type member. Attributes filtered by schema's configuration names (see ConfigurationList ). Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, Func<T, string?> configGetter, bool inherit = true, bool exactForConfiguration = false) where T : Attribute Parameters Type Name Description Type type Member's owner type. MemberInfo memberInfo Attributes owner member. Func <T, System.Nullable < System.String >> configGetter Attribute configuration name provider. System.Boolean inherit If true - include inherited attributes. System.Boolean exactForConfiguration If true - only associated to configuration attributes will be returned. Returns Type Description T[] Attributes of specified type. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Gets attributes of specified type, associated with specified type member. Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Member's owner type. MemberInfo memberInfo Attributes owner member. System.Boolean inherit If true - include inherited attributes. Returns Type Description T[] Attributes of specified type. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Gets attributes of specified type, associated with specified type. Declaration public T[] GetAttributes<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type Attributes owner type. System.Boolean inherit If true - include inherited attributes. Returns Type Description T[] Attributes of specified type. Type Parameters Name Description T Attribute type. | Improve this Doc View Source GetCanBeNull(Type) Returns true , if value of specified type could contain null . Declaration public bool GetCanBeNull(Type type) Parameters Type Name Description Type type Value type. Returns Type Description System.Boolean Returns true if specified type supports null values. | Improve this Doc View Source GetConverter<TFrom, TTo>() Returns conversion delegate for conversion from TFrom type to TTo type. Declaration public Func<TFrom, TTo>? GetConverter<TFrom, TTo>() Returns Type Description System.Nullable < Func <TFrom, TTo>> Conversion delegate or null if conversion is not defined. Type Parameters Name Description TFrom Source type. TTo Target type. | Improve this Doc View Source GetConvertExpression(DbDataType, DbDataType, Boolean, Boolean) Returns conversion expression from from type to to type. Declaration public LambdaExpression? GetConvertExpression(DbDataType from, DbDataType to, bool checkNull = true, bool createDefault = true) Parameters Type Name Description DbDataType from Source type. DbDataType to Target type. System.Boolean checkNull If true , and source type could contain null , conversion expression will check converted value for null and replace it with default value. for more details. System.Boolean createDefault Create new conversion expression, if conversion is not defined. Returns Type Description System.Nullable < LambdaExpression > Conversion expression or null , if there is no such conversion and createDefault is false . | Improve this Doc View Source GetConvertExpression(Type, Type, Boolean, Boolean) Returns conversion expression from from type to to type. Declaration public LambdaExpression? GetConvertExpression(Type from, Type to, bool checkNull = true, bool createDefault = true) Parameters Type Name Description Type from Source type. Type to Target type. System.Boolean checkNull If true , and source type could contain null , conversion expression will check converted value for null and replace it with default value. for more details. System.Boolean createDefault Create new conversion expression, if conversion is not defined. Returns Type Description System.Nullable < LambdaExpression > Conversion expression or null , if there is no such conversion and createDefault is false . | Improve this Doc View Source GetConvertExpression<TFrom, TTo>(Boolean, Boolean) Returns conversion expression from TFrom type to TTo type. Declaration public Expression<Func<TFrom, TTo>>? GetConvertExpression<TFrom, TTo>(bool checkNull = true, bool createDefault = true) Parameters Type Name Description System.Boolean checkNull If true , and source type could contain null , conversion expression will check converted value for null and replace it with default value. for more details. System.Boolean createDefault Create new conversion expression, if conversion is not defined. Returns Type Description System.Nullable < Expression < Func <TFrom, TTo>>> Conversion expression or null , if there is no such conversion and createDefault is false . Type Parameters Name Description TFrom Source type. TTo Target type. | Improve this Doc View Source GetDataType(Type) Returns database type mapping information for specified type. Declaration public SqlDataType GetDataType(Type type) Parameters Type Name Description Type type Mapped type. Returns Type Description SqlDataType Database type information. | Improve this Doc View Source GetDefaultFromEnumType(Type) Returns type, to which provided enumeration type is mapped or null , if type is not configured. See SetDefaultFromEnumType(Type, Type) . Declaration public Type? GetDefaultFromEnumType(Type enumType) Parameters Type Name Description Type enumType Enumeration type. Returns Type Description System.Nullable < Type > Mapped type or null . | Improve this Doc View Source GetDefaultValue(Type) Returns default value for specified type. Default value is a value, used instead of NULL value, read from database. Declaration public object? GetDefaultValue(Type type) Parameters Type Name Description Type type Value type. Returns Type Description System.Nullable < System.Object > Returns default value for type. | Improve this Doc View Source GetDefinedTypes() Enumerates types registered by FluentMetadataBuilder. Declaration public Type[] GetDefinedTypes() Returns Type Description Type [] Returns array with all types, mapped by fluent mappings. | Improve this Doc View Source GetDynamicColumns(Type) Gets the dynamic columns defined on given type. Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type The type. Returns Type Description MemberInfo [] All dynamic columns defined on given type. | Improve this Doc View Source GetEntityDescriptor(Type) Returns mapped entity descriptor. Declaration public EntityDescriptor GetEntityDescriptor(Type type) Parameters Type Name Description Type type Mapped type. Returns Type Description EntityDescriptor Mapping descriptor. | Improve this Doc View Source GetFluentMappingBuilder() Gets fluent mapping builder for current schema. Declaration public FluentMappingBuilder GetFluentMappingBuilder() Returns Type Description FluentMappingBuilder Fluent mapping builder. | Improve this Doc View Source GetMapValues(Type) Returns enum type mapping information or null for non-enum types. Declaration public virtual MapValue[] GetMapValues(Type type) Parameters Type Name Description Type type Mapped type. Returns Type Description MapValue [] Mapping values for enum type and null for non-enum types. | Improve this Doc View Source GetUnderlyingDataType(Type, out Boolean) Returns scalar database type mapping information for provided type. Declaration public SqlDataType GetUnderlyingDataType(Type type, out bool canBeNull) Parameters Type Name Description Type type Mapped type. System.Boolean canBeNull Returns true , if type type is enum with mapping to null value. Initial parameter value, passed to this method is not used. Returns Type Description SqlDataType Scalar database type information. | Improve this Doc View Source InitGenericConvertProvider(Type[]) Initialize generic conversions for specific type parameters. Declaration public bool InitGenericConvertProvider(params Type[] types) Parameters Type Name Description Type [] types Generic type parameters. Returns Type Description System.Boolean Returns true if new generic type conversions could have added to mapping schema. | Improve this Doc View Source InitGenericConvertProvider<T>() Initialize generic conversions for specific type parameter. Declaration public void InitGenericConvertProvider<T>() Type Parameters Name Description T Generic type parameter, for which converters should be initialized. | Improve this Doc View Source IsScalarType(Type) Returns true , if provided type mapped to scalar database type in current schema. Declaration public bool IsScalarType(Type type) Parameters Type Name Description Type type Type to check. Returns Type Description System.Boolean true , if type mapped to scalar database type. | Improve this Doc View Source SetCanBeNull(Type, Boolean) Sets null value support flag for specified type. Declaration public void SetCanBeNull(Type type, bool value) Parameters Type Name Description Type type Value type. System.Boolean value If true , specified type value could contain null . | Improve this Doc View Source SetConverter<TFrom, TTo>(Func<TFrom, TTo>) Specify conversion delegate for conversion from TFrom type to TTo type. Declaration public void SetConverter<TFrom, TTo>(Func<TFrom, TTo> func) Parameters Type Name Description Func <TFrom, TTo> func Conversion delegate. Type Parameters Name Description TFrom Source type. TTo Target type. | Improve this Doc View Source SetConverter<TFrom, TTo>(Func<TFrom, TTo>, DbDataType, DbDataType) Specify conversion delegate for conversion from TFrom type to TTo type. Declaration public void SetConverter<TFrom, TTo>(Func<TFrom, TTo> func, DbDataType from, DbDataType to) Parameters Type Name Description Func <TFrom, TTo> func Conversion delegate. DbDataType from Source type detalization DbDataType to Target type detalization Type Parameters Name Description TFrom Source type. TTo Target type. | Improve this Doc View Source SetConvertExpression(DbDataType, DbDataType, LambdaExpression, Boolean) Specify conversion expression for conversion from fromType type to toType type. Declaration public void SetConvertExpression(DbDataType fromType, DbDataType toType, LambdaExpression expr, bool addNullCheck = true) Parameters Type Name Description DbDataType fromType Source type. DbDataType toType Target type. LambdaExpression expr Conversion expression. System.Boolean addNullCheck If true , conversion expression will be wrapped with default value substitution logic for null values. Wrapper will be added only if source type can have null values and conversion expression doesn't use default value provider. See DefaultValue<T> and DefaultValue types for more details. | Improve this Doc View Source SetConvertExpression(Type, Type, LambdaExpression, Boolean) Specify conversion expression for conversion from fromType type to toType type. Declaration public void SetConvertExpression(Type fromType, Type toType, LambdaExpression expr, bool addNullCheck = true) Parameters Type Name Description Type fromType Source type. Type toType Target type. LambdaExpression expr Conversion expression. System.Boolean addNullCheck If true , conversion expression will be wrapped with default value substitution logic for null values. Wrapper will be added only if source type can have null values and conversion expression doesn't use default value provider. See DefaultValue<T> and DefaultValue types for more details. | Improve this Doc View Source SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) Specify conversion expression for conversion from TFrom type to TTo type. Declaration public void SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>> checkNullExpr, Expression<Func<TFrom, TTo>> expr) Parameters Type Name Description Expression < Func <TFrom, TTo>> checkNullExpr null values conversion expression. Expression < Func <TFrom, TTo>> expr Conversion expression. Type Parameters Name Description TFrom Source type. TTo Target type. | Improve this Doc View Source SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) Specify conversion expression for conversion from TFrom type to TTo type. Declaration public void SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>> expr, bool addNullCheck = true) Parameters Type Name Description Expression < Func <TFrom, TTo>> expr Conversion expression. System.Boolean addNullCheck If true , conversion expression will be wrapped with default value substitution logic for null values. Wrapper will be added only if source type can have null values and conversion expression doesn't use default value provider. See DefaultValue<T> and DefaultValue types for more details. Type Parameters Name Description TFrom Source type. TTo Target type. | Improve this Doc View Source SetCultureInfo(CultureInfo) Set conversion expressions for conversion from and to string for basic types ( byte , sbyte , short , ushort , int , uint , long , ulong , float , double , decimal , DateTime , DateTimeOffset ) using provided culture format providers. Declaration public void SetCultureInfo(CultureInfo info) Parameters Type Name Description CultureInfo info Culture with format providers for conversions. | Improve this Doc View Source SetDataType(Type, DataType) Associate specified type with LINQ to DB data type. Declaration public void SetDataType(Type type, DataType dataType) Parameters Type Name Description Type type Mapped type. DataType dataType LINQ to DB data type. | Improve this Doc View Source SetDataType(Type, SqlDataType) Associate specified type with database data type. Declaration public void SetDataType(Type type, SqlDataType dataType) Parameters Type Name Description Type type Mapped type. SqlDataType dataType Database data type. | Improve this Doc View Source SetDefaultFromEnumType(Type, Type) Sets type, to which provided enumeration type should be mapped. Declaration public void SetDefaultFromEnumType(Type enumType, Type defaultFromType) Parameters Type Name Description Type enumType Enumeration type. Type defaultFromType Mapped type. | Improve this Doc View Source SetDefaultValue(Type, Nullable<Object>) Sets default value for specific type. Default value is a value, used instead of NULL value, read from database. Declaration public void SetDefaultValue(Type type, object? value) Parameters Type Name Description Type type Value type. System.Nullable < System.Object > value Default value. | Improve this Doc View Source SetGenericConvertProvider(Type) Adds generic type conversions provider. Type converter must implement IGenericInfoProvider interface. IGenericInfoProvider for more details and examples. Declaration public void SetGenericConvertProvider(Type type) Parameters Type Name Description Type type Generic type conversions provider. | Improve this Doc View Source SetScalarType(Type, Boolean) Configure how provided type should be handled during mapping to database - as scalar value or composite type. Declaration public void SetScalarType(Type type, bool isScalarType = true) Parameters Type Name Description Type type Type to configure. System.Boolean isScalarType true , if provided type should be mapped to scalar database value. | Improve this Doc View Source SetValueToSqlConverter(Type, Action<StringBuilder, SqlDataType, Object>) Sets value to SQL converter action for specific value type. Declaration public void SetValueToSqlConverter(Type type, Action<StringBuilder, SqlDataType, object> converter) Parameters Type Name Description Type type Value type. Action < StringBuilder , SqlDataType , System.Object > converter Converter action. Action accepts three parameters: SQL string builder to write generated value SQL to; value SQL type descriptor; value. | Improve this Doc View Source TryGetConvertExpression(Type, Type) Returns custom value conversion expression from from type to to type if it is defined in mapping schema, or null otherwise. Declaration public virtual LambdaExpression? TryGetConvertExpression(Type from, Type to) Parameters Type Name Description Type from Source type. Type to Target type. Returns Type Description System.Nullable < LambdaExpression > Conversion expression or null , if conversion is not defined. Extension Methods MappingSchemaExtensions.GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) MappingSchemaExtensions.GetEntityEqualityComparer<T>(MappingSchema) MappingSchemaExtensions.GetKeyEqualityComparer<T>(MappingSchema) Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.MapValue.html": {
    "href": "api/LinqToDB.Mapping.MapValue.html",
    "title": "Class MapValue | Linq To DB (aka linq2db)",
    "keywords": "Class MapValue Stores enum mapping information for single enum value. Inheritance System.Object MapValue Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class MapValue : object Constructors | Improve this Doc View Source MapValue(Object, MapValueAttribute[]) Creates instance of class. Declaration public MapValue(object origValue, params MapValueAttribute[] mapValues) Parameters Type Name Description System.Object origValue Mapped enum value. MapValueAttribute [] mapValues Enum value mappings. Properties | Improve this Doc View Source MapValues Gets enum value mappings. Declaration public MapValueAttribute[] MapValues { get; } Property Value Type Description MapValueAttribute [] | Improve this Doc View Source OrigValue Gets enum value. Declaration public object OrigValue { get; } Property Value Type Description System.Object Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.MapValueAttribute.html": {
    "href": "api/LinqToDB.Mapping.MapValueAttribute.html",
    "title": "Class MapValueAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class MapValueAttribute Defines bidirectional mapping between enum field value, used on client and database value, stored in database and used in queries. Enumeration field could have multiple MapValueAttribute attributes. Mapping from database value to enumeration performed when you load data from database. Linq2db will search for enumeration field with MapValueAttribute with required value. If attribute with such value is not found, you will receive LinqToDBException error. If you cannot specify all possible values using MapValueAttribute , you can specify custom mapping using methods like . Mapping from enumeration value performed when you save it to database or use in query. If your enum field has multiple MapValueAttribute attributes, you should mark one of them as default using IsDefault property. Inheritance System.Object MapValueAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class MapValueAttribute : Attribute Constructors | Improve this Doc View Source MapValueAttribute() Adds MapValueAttribute mapping to enum field. If you don't specify Value property, null value will be used. Declaration public MapValueAttribute() | Improve this Doc View Source MapValueAttribute(Nullable<Object>) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(object? value) Parameters Type Name Description System.Nullable < System.Object > value Database value, mapped to current enumeration field. | Improve this Doc View Source MapValueAttribute(Object, Boolean) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(object value, bool isDefault) Parameters Type Name Description System.Object value Database value, mapped to current enumeration field. System.Boolean isDefault If true , database value from this attribute will be used for mapping to database value. | Improve this Doc View Source MapValueAttribute(String, Nullable<Object>, Boolean) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(string configuration, object? value, bool isDefault) Parameters Type Name Description System.String configuration Name of configuration, for which this attribute instance will be used. System.Nullable < System.Object > value Database value, mapped to current enumeration field. System.Boolean isDefault If true , database value from this attribute will be used for mapping to database value. | Improve this Doc View Source MapValueAttribute(String, Object) Adds MapValueAttribute to enum field. Declaration public MapValueAttribute(string configuration, object value) Parameters Type Name Description System.String configuration Name of configuration, for which this attribute instance will be used. System.Object value Database value, mapped to current enumeration field. Properties | Improve this Doc View Source Configuration Mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsDefault If true , Value property value will be used for conversion from enumeration to database value. Declaration public bool IsDefault { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Database value, to which current enumeration field will be mapped when used in query or saved to database. This value, when loaded from database, will be converted to current enumeration field. Declaration public object? Value { get; set; } Property Value Type Description System.Nullable < System.Object > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.NotColumnAttribute.html": {
    "href": "api/LinqToDB.Mapping.NotColumnAttribute.html",
    "title": "Class NotColumnAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class NotColumnAttribute Marks current property or column to be ignored for mapping when explicit column mapping disabled. See IsColumnAttributeRequired . Inheritance System.Object ColumnAttribute NotColumnAttribute Inherited Members ColumnAttribute.Configuration ColumnAttribute.Name ColumnAttribute.MemberName ColumnAttribute.DataType ColumnAttribute.DbType ColumnAttribute.IsColumn ColumnAttribute.Storage ColumnAttribute.IsDiscriminator ColumnAttribute.SkipOnEntityFetch ColumnAttribute.SkipOnInsert ColumnAttribute.SkipOnUpdate ColumnAttribute.IsIdentity ColumnAttribute.IsPrimaryKey ColumnAttribute.PrimaryKeyOrder ColumnAttribute.CanBeNull ColumnAttribute.Length ColumnAttribute.Precision ColumnAttribute.Scale ColumnAttribute.CreateFormat ColumnAttribute.Order Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class NotColumnAttribute : ColumnAttribute Constructors | Improve this Doc View Source NotColumnAttribute() Creates attribute instance. Declaration public NotColumnAttribute() Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.NotNullAttribute.html": {
    "href": "api/LinqToDB.Mapping.NotNullAttribute.html",
    "title": "Class NotNullAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class NotNullAttribute Sets nullability flag for current column to false . See NullableAttribute for more details. Inheritance System.Object NullableAttribute NotNullAttribute Inherited Members NullableAttribute.Configuration NullableAttribute.CanBeNull Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class NotNullAttribute : NullableAttribute Constructors | Improve this Doc View Source NotNullAttribute() Creates attribute isntance. Declaration public NotNullAttribute() | Improve this Doc View Source NotNullAttribute(String) Creates attribute isntance. Declaration public NotNullAttribute(string configuration) Parameters Type Name Description System.String configuration Mapping schema configuration name. See LinqToDB.Configuration . Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.NullableAttribute.html": {
    "href": "api/LinqToDB.Mapping.NullableAttribute.html",
    "title": "Class NullableAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class NullableAttribute Explicitly specifies that associated column could contain NULL values. Overrides default nullability flag from current mapping schema for property/field type. Has lower priority over CanBeNull . Using this attribute, you can allow NULL values for identity columns. Inheritance System.Object NullableAttribute NotNullAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class NullableAttribute : Attribute Constructors | Improve this Doc View Source NullableAttribute() Creates attribute isntance. Declaration public NullableAttribute() | Improve this Doc View Source NullableAttribute(Boolean) Creates attribute isntance. Declaration public NullableAttribute(bool isNullable) Parameters Type Name Description System.Boolean isNullable Nullability flag for current column. | Improve this Doc View Source NullableAttribute(String, Boolean) Creates attribute isntance. Declaration public NullableAttribute(string configuration, bool isNullable) Parameters Type Name Description System.String configuration Mapping schema configuration name. See Configuration . System.Boolean isNullable Nullability flag for current column. Properties | Improve this Doc View Source CanBeNull Gets or sets nullability flag for current column. Default value: true . Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.PrimaryKeyAttribute.html": {
    "href": "api/LinqToDB.Mapping.PrimaryKeyAttribute.html",
    "title": "Class PrimaryKeyAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class PrimaryKeyAttribute Marks property or field as a member of primary key for current mapping type. Inheritance System.Object PrimaryKeyAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class PrimaryKeyAttribute : Attribute Constructors | Improve this Doc View Source PrimaryKeyAttribute() Creates attribute instance. Declaration public PrimaryKeyAttribute() | Improve this Doc View Source PrimaryKeyAttribute(Int32) Creates attribute instance. Declaration public PrimaryKeyAttribute(int order) Parameters Type Name Description System.Int32 order Column order in composite primary key. | Improve this Doc View Source PrimaryKeyAttribute(Nullable<String>, Int32) Creates attribute instance. Declaration public PrimaryKeyAttribute(string? configuration, int order) Parameters Type Name Description System.Nullable < System.String > configuration Mapping schema configuration name. See Configuration . System.Int32 order Column order in composite primary key. Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Order Gets or sets order of current column in composite primary key. Order is used for query generation to define in which order primary key columns must be mentioned in query from columns with smallest order value to greatest. Default value: -1 . Declaration public int Order { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.PropertyMappingBuilder-2.html": {
    "href": "api/LinqToDB.Mapping.PropertyMappingBuilder-2.html",
    "title": "Class PropertyMappingBuilder<TEntity, TProperty> | Linq To DB (aka linq2db)",
    "keywords": "Class PropertyMappingBuilder<TEntity, TProperty> Column or association fluent mapping builder. Inheritance System.Object PropertyMappingBuilder<TEntity, TProperty> Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class PropertyMappingBuilder<TEntity, TProperty> : object Type Parameters Name Description TEntity Entity type. TProperty Column or association member type. Constructors | Improve this Doc View Source PropertyMappingBuilder(EntityMappingBuilder<TEntity>, Expression<Func<TEntity, TProperty>>) Creates column or association fluent mapping builder. Declaration public PropertyMappingBuilder(EntityMappingBuilder<TEntity> entity, Expression<Func<TEntity, TProperty>> memberGetter) Parameters Type Name Description EntityMappingBuilder <TEntity> entity Entity fluent mapping builder. Expression < Func <TEntity, TProperty>> memberGetter Column or association member getter expression. Methods | Improve this Doc View Source Association<TOther>(Expression<Func<TEntity, TOther>>, Expression<Func<TEntity, TOther, Boolean>>, Boolean) Adds association mapping to current column's entity. Declaration public PropertyMappingBuilder<TEntity, TOther> Association<TOther>(Expression<Func<TEntity, TOther>> prop, Expression<Func<TEntity, TOther, bool>> predicate, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, TOther>> prop Association member getter expression. Expression < Func <TEntity, TOther, System.Boolean >> predicate Predicate expression System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, TOther> Returns fluent property mapping builder. Type Parameters Name Description TOther Other association side type | Improve this Doc View Source Association<TOther>(Expression<Func<TEntity, TOther>>, Expression<Func<TEntity, IDataContext, IQueryable<TOther>>>, Boolean) Adds association mapping to current column's entity. Declaration public PropertyMappingBuilder<TEntity, TOther> Association<TOther>(Expression<Func<TEntity, TOther>> prop, Expression<Func<TEntity, IDataContext, IQueryable<TOther>>> queryExpression, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, TOther>> prop Association member getter expression. Expression < Func <TEntity, IDataContext , IQueryable <TOther>>> queryExpression Query expression. System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, TOther> Returns fluent property mapping builder. Type Parameters Name Description TOther Other association side type | Improve this Doc View Source Association<TOther>(Expression<Func<TEntity, IEnumerable<TOther>>>, Expression<Func<TEntity, TOther, Boolean>>, Boolean) Adds association mapping to current column's entity. Declaration public PropertyMappingBuilder<TEntity, IEnumerable<TOther>> Association<TOther>(Expression<Func<TEntity, IEnumerable<TOther>>> prop, Expression<Func<TEntity, TOther, bool>> predicate, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, IEnumerable <TOther>>> prop Association member getter expression. Expression < Func <TEntity, TOther, System.Boolean >> predicate Predicate expression. System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, IEnumerable <TOther>> Returns fluent property mapping builder. Type Parameters Name Description TOther Other association side type | Improve this Doc View Source Association<TOther>(Expression<Func<TEntity, IEnumerable<TOther>>>, Expression<Func<TEntity, IDataContext, IQueryable<TOther>>>, Boolean) Adds association mapping to current column's entity. Declaration public PropertyMappingBuilder<TEntity, IEnumerable<TOther>> Association<TOther>(Expression<Func<TEntity, IEnumerable<TOther>>> prop, Expression<Func<TEntity, IDataContext, IQueryable<TOther>>> queryExpression, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, IEnumerable <TOther>>> prop Association member getter expression. Expression < Func <TEntity, IDataContext , IQueryable <TOther>>> queryExpression Query expression. System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, IEnumerable <TOther>> Returns fluent property mapping builder. Type Parameters Name Description TOther Other association side type | Improve this Doc View Source Association<TOther, TThisKey, TOtherKey>(Expression<Func<TEntity, TOther>>, Expression<Func<TEntity, TThisKey>>, Expression<Func<TOther, TOtherKey>>, Boolean) Adds association mapping to current column's entity. Declaration public PropertyMappingBuilder<TEntity, TOther> Association<TOther, TThisKey, TOtherKey>(Expression<Func<TEntity, TOther>> prop, Expression<Func<TEntity, TThisKey>> thisKey, Expression<Func<TOther, TOtherKey>> otherKey, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, TOther>> prop Association member getter expression. Expression < Func <TEntity, TThisKey>> thisKey This association key getter expression. Expression < Func <TOther, TOtherKey>> otherKey Other association key getter expression. System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, TOther> Returns association mapping builder. Type Parameters Name Description TOther Association member type. TThisKey This association side key type. TOtherKey Other association side key type. | Improve this Doc View Source Association<TPropElement, TThisKey, TOtherKey>(Expression<Func<TEntity, IEnumerable<TPropElement>>>, Expression<Func<TEntity, TThisKey>>, Expression<Func<TPropElement, TOtherKey>>, Boolean) Adds association mapping to current column's entity. Declaration public PropertyMappingBuilder<TEntity, IEnumerable<TPropElement>> Association<TPropElement, TThisKey, TOtherKey>(Expression<Func<TEntity, IEnumerable<TPropElement>>> prop, Expression<Func<TEntity, TThisKey>> thisKey, Expression<Func<TPropElement, TOtherKey>> otherKey, bool canBeNull = true) Parameters Type Name Description Expression < Func <TEntity, IEnumerable <TPropElement>>> prop Association member getter expression. Expression < Func <TEntity, TThisKey>> thisKey This association key getter expression. Expression < Func <TPropElement, TOtherKey>> otherKey Other association key getter expression. System.Boolean canBeNull Defines type of join. True - left join, False - inner join. Returns Type Description PropertyMappingBuilder <TEntity, IEnumerable <TPropElement>> Returns fluent property mapping builder. Type Parameters Name Description TPropElement Association member type. TThisKey This association side key type. TOtherKey Other association side key type. | Improve this Doc View Source Entity<TE>(Nullable<String>) Creates entity builder for specified mapping type. Declaration public EntityMappingBuilder<TE> Entity<TE>(string? configuration = null) Parameters Type Name Description System.Nullable < System.String > configuration Optional mapping schema configuration name, for which this entity builder should be taken into account. ProviderName for standard configuration names. Returns Type Description EntityMappingBuilder <TE> Returns entity mapping builder. Type Parameters Name Description TE Mapping type. | Improve this Doc View Source HasAttribute(Attribute) Adds attribute to current mapping member. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasAttribute(Attribute attribute) Parameters Type Name Description Attribute attribute Mapping attribute to add to specified member. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column or association mapping builder. | Improve this Doc View Source HasColumnName(String) Sets name for current column. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasColumnName(string columnName) Parameters Type Name Description System.String columnName Column name. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source HasConversion<TProvider>(Expression<Func<TProperty, TProvider>>, Expression<Func<TProvider, TProperty>>, Boolean) Configures the property so that the property value is converted to the given type before writing to the database and converted back when reading from the database. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasConversion<TProvider>(Expression<Func<TProperty, TProvider>> toProvider, Expression<Func<TProvider, TProperty>> toModel, bool handlesNulls = false) Parameters Type Name Description Expression < Func <TProperty, TProvider>> toProvider Expression < Func <TProvider, TProperty>> toModel System.Boolean handlesNulls Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. Type Parameters Name Description TProvider The type to convert to and from. | Improve this Doc View Source HasConversionFunc<TProvider>(Func<TProperty, TProvider>, Func<TProvider, TProperty>, Boolean) Configures the property so that the property value is converted to the given type before writing to the database and converted back when reading from the database. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasConversionFunc<TProvider>(Func<TProperty, TProvider> toProvider, Func<TProvider, TProperty> toModel, bool handlesNulls = false) Parameters Type Name Description Func <TProperty, TProvider> toProvider Func <TProvider, TProperty> toModel System.Boolean handlesNulls Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. Type Parameters Name Description TProvider The type to convert to and from. | Improve this Doc View Source HasCreateFormat(String) Sets custom column create SQL template. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasCreateFormat(string format) Parameters Type Name Description System.String format Custom template for column definition in create table SQL expression, generated using CreateTable<T>(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, DefaultNullable, Nullable<String>, TableOptions) methods. Template accepts following string parameters: {0} - column name; {1} - column type; {2} - NULL specifier; {3} - identity specification. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source HasDataType(DataType) Sets LINQ to DB type for current column. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasDataType(DataType dataType) Parameters Type Name Description DataType dataType Data type. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source HasDbType(String) Sets database type for current column. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasDbType(string dbType) Parameters Type Name Description System.String dbType Column type. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source HasLength(Int32) Sets the length of the database column. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasLength(int length) Parameters Type Name Description System.Int32 length Column length. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source HasOrder(Int32) Sets the Order of the database column. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasOrder(int order) Parameters Type Name Description System.Int32 order Column order. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source HasPrecision(Int32) Sets the precision of the database column. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasPrecision(int precision) Parameters Type Name Description System.Int32 precision Column precision. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source HasScale(Int32) Sets the Scale of the database column. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasScale(int scale) Parameters Type Name Description System.Int32 scale Column scale. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source HasSkipOnInsert(Boolean) Sets whether a column is insertable. This flag will affect only insert operations with implicit columns specification like Insert<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) method and will be ignored when user explicitly specifies value for this column. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasSkipOnInsert(bool skipOnInsert = true) Parameters Type Name Description System.Boolean skipOnInsert If true - column will be ignored for implicit insert operations. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source HasSkipOnUpdate(Boolean) Sets whether a column is updatable. This flag will affect only update operations with implicit columns specification like Update<T>(IDataContext, T, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) method and will be ignored when user explicitly specifies value for this column. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasSkipOnUpdate(bool skipOnUpdate = true) Parameters Type Name Description System.Boolean skipOnUpdate If true - column will be ignored for implicit update operations. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source HasStorage(String) Adds data storage property or field for current column. Declaration public PropertyMappingBuilder<TEntity, TProperty> HasStorage(string storage) Parameters Type Name Description System.String storage Name of storage property or field for current column. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source IsAlias(Expression<Func<TEntity, Object>>) Sets that property is alias to another member. Declaration public PropertyMappingBuilder<TEntity, TProperty> IsAlias(Expression<Func<TEntity, object>> aliasMember) Parameters Type Name Description Expression < Func <TEntity, System.Object >> aliasMember Alias member getter expression. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source IsAlias(String) Sets that property is alias to another member. Declaration public PropertyMappingBuilder<TEntity, TProperty> IsAlias(string aliasMember) Parameters Type Name Description System.String aliasMember Alias member name. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source IsColumn() Sets current member to be included into mapping as column. Declaration public PropertyMappingBuilder<TEntity, TProperty> IsColumn() Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source IsDiscriminator(Boolean) Marks current column as discriminator column for inheritance mapping. Declaration public PropertyMappingBuilder<TEntity, TProperty> IsDiscriminator(bool isDiscriminator = true) Parameters Type Name Description System.Boolean isDiscriminator If true - column is used as inheritance mapping discriminator. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source IsExpression<TR>(Expression<Func<TEntity, TR>>, Boolean, Nullable<String>) Configure property as alias to another member. Declaration public PropertyMappingBuilder<TEntity, TProperty> IsExpression<TR>(Expression<Func<TEntity, TR>> expression, bool isColumn = false, string? alias = null) Parameters Type Name Description Expression < Func <TEntity, TR>> expression Expression for mapping member during read. System.Boolean isColumn Indicates whether a property value should be filled during entity materialization (calculated property). System.Nullable < System.String > alias Optional alias for specific member expression. By default Member Name is used. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. Type Parameters Name Description TR | Improve this Doc View Source IsIdentity() Marks current column as identity column. Declaration public PropertyMappingBuilder<TEntity, TProperty> IsIdentity() Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source IsNotColumn() Sets current member to be excluded from mapping. Declaration public PropertyMappingBuilder<TEntity, TProperty> IsNotColumn() Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current mapping builder. | Improve this Doc View Source IsNullable(Boolean) Sets whether a column can contain NULL values. Declaration public PropertyMappingBuilder<TEntity, TProperty> IsNullable(bool isNullable = true) Parameters Type Name Description System.Boolean isNullable If true - column could contain NULL values. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source IsPrimaryKey(Int32) Marks current column as primary key member. Declaration public PropertyMappingBuilder<TEntity, TProperty> IsPrimaryKey(int order = null) Parameters Type Name Description System.Int32 order Order of property in primary key. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. | Improve this Doc View Source Member<TMember>(Expression<Func<TEntity, TMember>>) Adds member mapping to current entity. Declaration public PropertyMappingBuilder<TEntity, TMember> Member<TMember>(Expression<Func<TEntity, TMember>> func) Parameters Type Name Description Expression < Func <TEntity, TMember>> func Column mapping property or field getter expression. Returns Type Description PropertyMappingBuilder <TEntity, TMember> Returns fluent property mapping builder. Type Parameters Name Description TMember | Improve this Doc View Source Property<TMember>(Expression<Func<TEntity, TMember>>) Adds new column mapping to current column's entity. Declaration public PropertyMappingBuilder<TEntity, TMember> Property<TMember>(Expression<Func<TEntity, TMember>> func) Parameters Type Name Description Expression < Func <TEntity, TMember>> func Column mapping property or field getter expression. Returns Type Description PropertyMappingBuilder <TEntity, TMember> Returns property mapping builder. Type Parameters Name Description TMember | Improve this Doc View Source SkipOnEntityFetch(Boolean) Marks current column to be skipped by default during a full entity fetch Declaration public PropertyMappingBuilder<TEntity, TProperty> SkipOnEntityFetch(bool skipOnEntityFetch = true) Parameters Type Name Description System.Boolean skipOnEntityFetch If true , column won't be fetched unless explicity selected in a Linq query. Returns Type Description PropertyMappingBuilder <TEntity, TProperty> Returns current column mapping builder. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.QueryFilterAttribute.html": {
    "href": "api/LinqToDB.Mapping.QueryFilterAttribute.html",
    "title": "Class QueryFilterAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class QueryFilterAttribute Contains reference to filter function defined by Inheritance System.Object QueryFilterAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class QueryFilterAttribute : Attribute Properties | Improve this Doc View Source FilterFunc Filter function of type . Declaration public Delegate? FilterFunc { get; set; } Property Value Type Description System.Nullable < Delegate > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.Relationship.html": {
    "href": "api/LinqToDB.Mapping.Relationship.html",
    "title": "Enum Relationship | Linq To DB (aka linq2db)",
    "keywords": "Enum Relationship Defines relationship types for associations. See Relationship for more details. Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public enum Relationship : int Fields Name Description ManyToOne Many-to-one relationship. OneToMany One-to-many relationship. OneToOne One-to-one relationship. Extension Methods Map.DeepCopy<Relationship>() Sql.IsDistinctFrom<Relationship>(Relationship) Sql.IsDistinctFrom<Relationship>(Nullable<Relationship>) Sql.IsNotDistinctFrom<Relationship>(Relationship) Sql.IsNotDistinctFrom<Relationship>(Nullable<Relationship>) SqlExtensions.In<Relationship>(IEnumerable<Relationship>) SqlExtensions.In<Relationship>(IQueryable<Relationship>) SqlExtensions.In<Relationship>(Relationship[]) SqlExtensions.In<Relationship>(Relationship, Relationship) SqlExtensions.In<Relationship>(Relationship, Relationship, Relationship) SqlExtensions.NotIn<Relationship>(IEnumerable<Relationship>) SqlExtensions.NotIn<Relationship>(IQueryable<Relationship>) SqlExtensions.NotIn<Relationship>(Relationship[]) SqlExtensions.NotIn<Relationship>(Relationship, Relationship) SqlExtensions.NotIn<Relationship>(Relationship, Relationship, Relationship)"
  },
  "api/LinqToDB.Mapping.ResultSetIndexAttribute.html": {
    "href": "api/LinqToDB.Mapping.ResultSetIndexAttribute.html",
    "title": "Class ResultSetIndexAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ResultSetIndexAttribute Used to mark the index of a result set when multiple result sets need to be processed for a command. Inheritance System.Object ResultSetIndexAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class ResultSetIndexAttribute : Attribute Constructors | Improve this Doc View Source ResultSetIndexAttribute(Int32) Declaration public ResultSetIndexAttribute(int index) Parameters Type Name Description System.Int32 index Properties | Improve this Doc View Source Index Declaration public int Index { get; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.ScalarTypeAttribute.html": {
    "href": "api/LinqToDB.Mapping.ScalarTypeAttribute.html",
    "title": "Class ScalarTypeAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ScalarTypeAttribute Overrides default scalar detection for target class or structure. By default linq2db treats primitives and structs as scalar types. This attribute allows you to mark class or struct as scalar type or mark struct as non-scalar type. Also see IsStructIsScalarType . Note that if you marks some type as scalar, you will need to define custom mapping logic between object of that type and data parameter using methods. Inheritance System.Object ScalarTypeAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class ScalarTypeAttribute : Attribute Constructors | Improve this Doc View Source ScalarTypeAttribute() Creates attribute instance. Declaration public ScalarTypeAttribute() | Improve this Doc View Source ScalarTypeAttribute(Boolean) Creates attribute instance. Declaration public ScalarTypeAttribute(bool isScalar) Parameters Type Name Description System.Boolean isScalar Should target type be treated as scalar type or not. | Improve this Doc View Source ScalarTypeAttribute(String) Creates attribute instance. Declaration public ScalarTypeAttribute(string configuration) Parameters Type Name Description System.String configuration Mapping schema configuration name. See Configuration . | Improve this Doc View Source ScalarTypeAttribute(String, Boolean) Creates attribute instance. Declaration public ScalarTypeAttribute(string configuration, bool isScalar) Parameters Type Name Description System.String configuration Mapping schema configuration name. See Configuration . System.Boolean isScalar Should target type be treated as scalar type or not. Properties | Improve this Doc View Source Configuration Mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsScalar Gets or sets scalar type flag. Default value: true . Declaration public bool IsScalar { get; set; } Property Value Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.SequenceNameAttribute.html": {
    "href": "api/LinqToDB.Mapping.SequenceNameAttribute.html",
    "title": "Class SequenceNameAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class SequenceNameAttribute Specifies value generation sequence for mapped property of field. Currently it supported only for: Firebird generators; Oracle sequences; PostgreSQL serial pseudotypes/sequences; Inheritance System.Object SequenceNameAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class SequenceNameAttribute : Attribute Constructors | Improve this Doc View Source SequenceNameAttribute(String) Creates attribute instance. Declaration public SequenceNameAttribute(string sequenceName) Parameters Type Name Description System.String sequenceName Sequence generator name. | Improve this Doc View Source SequenceNameAttribute(String, String) Creates attribute instance. Declaration public SequenceNameAttribute(string configuration, string sequenceName) Parameters Type Name Description System.String configuration Mapping schema configuration name. See Configuration . System.String sequenceName Sequence generator name. Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Schema Gets or sets sequence generator schema name. Declaration public string? Schema { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SequenceName Gets or sets sequence generator name. Declaration public string SequenceName { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.SkipBaseAttribute.html": {
    "href": "api/LinqToDB.Mapping.SkipBaseAttribute.html",
    "title": "Class SkipBaseAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class SkipBaseAttribute Abstract Attribute to be used for skipping values Inheritance System.Object SkipBaseAttribute SkipValuesByListAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public abstract class SkipBaseAttribute : Attribute Properties | Improve this Doc View Source Affects Defines on which method a value should be skipped. Declaration public abstract SkipModification Affects { get; } Property Value Type Description SkipModification | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source ShouldSkip(Object, EntityDescriptor, ColumnDescriptor) Check if object contains values that should be skipped. Declaration public abstract bool ShouldSkip(object obj, EntityDescriptor entityDescriptor, ColumnDescriptor columnDescriptor) Parameters Type Name Description System.Object obj The object to check. EntityDescriptor entityDescriptor The entity descriptor. ColumnDescriptor columnDescriptor The column descriptor. Returns Type Description System.Boolean true if object should be skipped for the operation. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.SkipModification.html": {
    "href": "api/LinqToDB.Mapping.SkipModification.html",
    "title": "Enum SkipModification | Linq To DB (aka linq2db)",
    "keywords": "Enum SkipModification Flags for specifying skip modifications used for Attributes based on SkipBaseAttribute . Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public enum SkipModification : int Fields Name Description Insert A value should be skipped on insert. None No value should be skipped. Update A value should be skipped on update. Extension Methods Map.DeepCopy<SkipModification>() Sql.IsDistinctFrom<SkipModification>(SkipModification) Sql.IsDistinctFrom<SkipModification>(Nullable<SkipModification>) Sql.IsNotDistinctFrom<SkipModification>(SkipModification) Sql.IsNotDistinctFrom<SkipModification>(Nullable<SkipModification>) SqlExtensions.In<SkipModification>(IEnumerable<SkipModification>) SqlExtensions.In<SkipModification>(IQueryable<SkipModification>) SqlExtensions.In<SkipModification>(SkipModification[]) SqlExtensions.In<SkipModification>(SkipModification, SkipModification) SqlExtensions.In<SkipModification>(SkipModification, SkipModification, SkipModification) SqlExtensions.NotIn<SkipModification>(IEnumerable<SkipModification>) SqlExtensions.NotIn<SkipModification>(IQueryable<SkipModification>) SqlExtensions.NotIn<SkipModification>(SkipModification[]) SqlExtensions.NotIn<SkipModification>(SkipModification, SkipModification) SqlExtensions.NotIn<SkipModification>(SkipModification, SkipModification, SkipModification)"
  },
  "api/LinqToDB.Mapping.SkipValuesByListAttribute.html": {
    "href": "api/LinqToDB.Mapping.SkipValuesByListAttribute.html",
    "title": "Class SkipValuesByListAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class SkipValuesByListAttribute Abstract Attribute to be used for skipping value for SkipValuesOnInsertAttribute based on Insert or SkipValuesOnUpdateAttribute based on Update /> or a custom Attribute derived from this to override ShouldSkip(Object, EntityDescriptor, ColumnDescriptor) Inheritance System.Object SkipBaseAttribute SkipValuesByListAttribute SkipValuesOnInsertAttribute SkipValuesOnUpdateAttribute Inherited Members SkipBaseAttribute.Affects SkipBaseAttribute.Configuration Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public abstract class SkipValuesByListAttribute : SkipBaseAttribute Constructors | Improve this Doc View Source SkipValuesByListAttribute(IEnumerable<Nullable<Object>>) Declaration protected SkipValuesByListAttribute(IEnumerable<object?> values) Parameters Type Name Description IEnumerable < System.Nullable < System.Object >> values Properties | Improve this Doc View Source Values Gets collection with values to skip. Declaration protected HashSet<object?> Values { get; set; } Property Value Type Description HashSet < System.Nullable < System.Object >> Methods | Improve this Doc View Source ShouldSkip(Object, EntityDescriptor, ColumnDescriptor) Check if object contains values that should be skipped. Declaration public override bool ShouldSkip(object obj, EntityDescriptor entityDescriptor, ColumnDescriptor columnDescriptor) Parameters Type Name Description System.Object obj The object to check. EntityDescriptor entityDescriptor The entity descriptor. ColumnDescriptor columnDescriptor The column descriptor. Returns Type Description System.Boolean true if object should be skipped for the operation. Overrides SkipBaseAttribute.ShouldSkip(Object, EntityDescriptor, ColumnDescriptor) Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.SkipValuesOnInsertAttribute.html": {
    "href": "api/LinqToDB.Mapping.SkipValuesOnInsertAttribute.html",
    "title": "Class SkipValuesOnInsertAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class SkipValuesOnInsertAttribute Attribute for skipping specific values on insert. Inheritance System.Object SkipBaseAttribute SkipValuesByListAttribute SkipValuesOnInsertAttribute Inherited Members SkipValuesByListAttribute.Values SkipValuesByListAttribute.ShouldSkip(Object, EntityDescriptor, ColumnDescriptor) SkipBaseAttribute.Configuration Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class SkipValuesOnInsertAttribute : SkipValuesByListAttribute Constructors | Improve this Doc View Source SkipValuesOnInsertAttribute(Nullable<Object>[]) Constructor. Declaration public SkipValuesOnInsertAttribute(params object? [] values) Parameters Type Name Description System.Nullable < System.Object >[] values Values to skip on insert operations. Properties | Improve this Doc View Source Affects Operations, affected by value skipping. Declaration public override SkipModification Affects { get; } Property Value Type Description SkipModification Overrides SkipBaseAttribute.Affects Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.SkipValuesOnUpdateAttribute.html": {
    "href": "api/LinqToDB.Mapping.SkipValuesOnUpdateAttribute.html",
    "title": "Class SkipValuesOnUpdateAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class SkipValuesOnUpdateAttribute Attribute for skipping specific values on update. Inheritance System.Object SkipBaseAttribute SkipValuesByListAttribute SkipValuesOnUpdateAttribute Inherited Members SkipValuesByListAttribute.Values SkipValuesByListAttribute.ShouldSkip(Object, EntityDescriptor, ColumnDescriptor) SkipBaseAttribute.Configuration Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class SkipValuesOnUpdateAttribute : SkipValuesByListAttribute Constructors | Improve this Doc View Source SkipValuesOnUpdateAttribute(Nullable<Object>[]) Constructor. Declaration public SkipValuesOnUpdateAttribute(params object? [] values) Parameters Type Name Description System.Nullable < System.Object >[] values Values to skip on update operations. Properties | Improve this Doc View Source Affects Operations, affected by value skipping. Declaration public override SkipModification Affects { get; } Property Value Type Description SkipModification Overrides SkipBaseAttribute.Affects Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.TableAttribute.html": {
    "href": "api/LinqToDB.Mapping.TableAttribute.html",
    "title": "Class TableAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class TableAttribute Maps databse table or view to a class or interface. You can apply it to any class including non-public, nester or abstract classes. Applying it to interfaces will allow you to perform queries against target table, but you need to specify projection in your query explicitly, if you want to select data from such mapping. Inheritance System.Object TableAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class TableAttribute : Attribute Constructors | Improve this Doc View Source TableAttribute() Creates new table mapping attribute. Declaration public TableAttribute() | Improve this Doc View Source TableAttribute(String) Creates new table mapping attribute. Declaration public TableAttribute(string tableName) Parameters Type Name Description System.String tableName Name of mapped table or view in database. Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Database Gets or sets optional database name, to override default database name. See method for support information per provider. Declaration public string? Database { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsColumnAttributeRequired Gets or sets column mapping rules for current class or interface. If true , properties and fields should be marked with one of those attributes to be used for mapping: ColumnAttribute ; PrimaryKeyAttribute ; IdentityAttribute ; ColumnAliasAttribute . Otherwise all supported members of scalar type will be used: public instance fields and properties; explicit interface implementation properties. Also see IsStructIsScalarType and ScalarTypeAttribute . Default value: true . Declaration public bool IsColumnAttributeRequired { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsTemporary Gets or sets IsTemporary flag. See IsTemporary<T>(ITable<T>, Boolean) method for support information per provider. Declaration public bool IsTemporary { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsView This property is not used by linq2db and could be used for informational purposes. Declaration public bool IsView { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets or sets name of table or view in database. When not specified, name of class or interface will be used. Declaration public string? Name { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Schema Gets or sets optional schema/owner name, to override default name. See method for support information per provider. Declaration public string? Schema { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Server Gets or sets optional linked server name. See method for support information per provider. Declaration public string? Server { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TableOptions Gets or sets Table options. See TableOptions enum for support information per provider. Declaration public TableOptions TableOptions { get; set; } Property Value Type Description TableOptions Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Mapping.ValueConverterAttribute.html": {
    "href": "api/LinqToDB.Mapping.ValueConverterAttribute.html",
    "title": "Class ValueConverterAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ValueConverterAttribute Inheritance System.Object ValueConverterAttribute Namespace : LinqToDB.Mapping Assembly : linq2db.dll Syntax public class ValueConverterAttribute : Attribute Properties | Improve this Doc View Source Configuration Gets or sets mapping schema configuration name, for which this attribute should be taken into account. ProviderName for standard names. Attributes with null or empty string Configuration value applied to all configurations (if no attribute found for current configuration). Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ConverterType Gets or sets converter type. ConverterType should implement IValueConverter interface, should have public constructor with no parameters. Declaration public Type? ConverterType { get; set; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source ValueConverter ValueConverter for mapping Database Values to Model values. Declaration public IValueConverter ValueConverter { get; set; } Property Value Type Description IValueConverter Methods | Improve this Doc View Source GetValueConverter(ColumnDescriptor) Returns IValueConverter for specific column. Declaration public virtual IValueConverter GetValueConverter(ColumnDescriptor columnDescriptor) Parameters Type Name Description ColumnDescriptor columnDescriptor Returns Type Description IValueConverter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.MergeDefinition-2.html": {
    "href": "api/LinqToDB.MergeDefinition-2.html",
    "title": "Class MergeDefinition<TTarget, TSource> | Linq To DB (aka linq2db)",
    "keywords": "Class MergeDefinition<TTarget, TSource> Inheritance System.Object MergeDefinition<TTarget, TSource> Implements IMergeableUsing <TTarget> IMergeableOn <TTarget, TSource> IMergeable <TTarget, TSource> IMergeableSource <TTarget, TSource> Namespace : LinqToDB Assembly : linq2db.dll Syntax public class MergeDefinition<TTarget, TSource> : object, IMergeableUsing<TTarget>, IMergeableOn<TTarget, TSource>, IMergeable<TTarget, TSource>, IMergeableSource<TTarget, TSource> Type Parameters Name Description TTarget TSource Constructors | Improve this Doc View Source MergeDefinition(ITable<TTarget>) Declaration public MergeDefinition(ITable<TTarget> target) Parameters Type Name Description ITable <TTarget> target | Improve this Doc View Source MergeDefinition(ITable<TTarget>, IQueryable<TSource>) Declaration public MergeDefinition(ITable<TTarget> target, IQueryable<TSource> source) Parameters Type Name Description ITable <TTarget> target IQueryable <TSource> source | Improve this Doc View Source MergeDefinition(ITable<TTarget>, IQueryable<TSource>, String) Declaration public MergeDefinition(ITable<TTarget> target, IQueryable<TSource> source, string hint) Parameters Type Name Description ITable <TTarget> target IQueryable <TSource> source System.String hint | Improve this Doc View Source MergeDefinition(ITable<TTarget>, String) Declaration public MergeDefinition(ITable<TTarget> target, string hint) Parameters Type Name Description ITable <TTarget> target System.String hint Properties | Improve this Doc View Source EnumerableSource Declaration public IEnumerable<TSource>? EnumerableSource { get; } Property Value Type Description System.Nullable < IEnumerable <TSource>> | Improve this Doc View Source Hint Declaration public string? Hint { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source KeyType Declaration public Type? KeyType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source MatchPredicate Declaration public Expression<Func<TTarget, TSource, bool>>? MatchPredicate { get; } Property Value Type Description System.Nullable < Expression < Func <TTarget, TSource, System.Boolean >>> | Improve this Doc View Source Operations Declaration public MergeDefinition<TTarget, TSource>.Operation[] Operations { get; } Property Value Type Description MergeDefinition.Operation <>[] | Improve this Doc View Source QueryableSource Declaration public IQueryable<TSource>? QueryableSource { get; } Property Value Type Description System.Nullable < IQueryable <TSource>> | Improve this Doc View Source SourceKey Declaration public Expression? SourceKey { get; } Property Value Type Description System.Nullable < Expression > | Improve this Doc View Source Target Declaration public ITable<TTarget> Target { get; } Property Value Type Description ITable <TTarget> | Improve this Doc View Source TargetKey Declaration public Expression? TargetKey { get; } Property Value Type Description System.Nullable < Expression > Methods | Improve this Doc View Source AddOnKey<TKey>(Expression<Func<TTarget, TKey>>, Expression<Func<TSource, TKey>>) Declaration public MergeDefinition<TTarget, TSource> AddOnKey<TKey>(Expression<Func<TTarget, TKey>> targetKey, Expression<Func<TSource, TKey>> sourceKey) Parameters Type Name Description Expression < Func <TTarget, TKey>> targetKey Expression < Func <TSource, TKey>> sourceKey Returns Type Description MergeDefinition <TTarget, TSource> Type Parameters Name Description TKey | Improve this Doc View Source AddOnPredicate(Expression<Func<TTarget, TSource, Boolean>>) Declaration public MergeDefinition<TTarget, TSource> AddOnPredicate(Expression<Func<TTarget, TSource, bool>> matchPredicate) Parameters Type Name Description Expression < Func <TTarget, TSource, System.Boolean >> matchPredicate Returns Type Description MergeDefinition <TTarget, TSource> | Improve this Doc View Source AddOperation(MergeDefinition<TTarget, TSource>.Operation) Declaration public MergeDefinition<TTarget, TSource> AddOperation(MergeDefinition<TTarget, TSource>.Operation operation) Parameters Type Name Description MergeDefinition.Operation <> operation Returns Type Description MergeDefinition <TTarget, TSource> | Improve this Doc View Source AddSource<TNewSource>(IEnumerable<TNewSource>) Declaration public MergeDefinition<TTarget, TNewSource> AddSource<TNewSource>(IEnumerable<TNewSource> source) where TNewSource : class Parameters Type Name Description IEnumerable <TNewSource> source Returns Type Description MergeDefinition <TTarget, TNewSource> Type Parameters Name Description TNewSource | Improve this Doc View Source AddSource<TNewSource>(IQueryable<TNewSource>) Declaration public MergeDefinition<TTarget, TNewSource> AddSource<TNewSource>(IQueryable<TNewSource> source) where TNewSource : class Parameters Type Name Description IQueryable <TNewSource> source Returns Type Description MergeDefinition <TTarget, TNewSource> Type Parameters Name Description TNewSource Implements IMergeableUsing<TTarget> IMergeableOn<TTarget, TSource> IMergeable<TTarget, TSource> IMergeableSource<TTarget, TSource> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.MergeDefinition-2.Operation.html": {
    "href": "api/LinqToDB.MergeDefinition-2.Operation.html",
    "title": "Class MergeDefinition<TTarget, TSource>.Operation | Linq To DB (aka linq2db)",
    "keywords": "Class MergeDefinition<TTarget, TSource>.Operation Inheritance System.Object MergeDefinition<TTarget, TSource>.Operation Namespace : LinqToDB Assembly : linq2db.dll Syntax public class Operation : object Properties | Improve this Doc View Source BySourcePredicate Declaration public Expression<Func<TTarget, bool>>? BySourcePredicate { get; } Property Value Type Description System.Nullable < Expression < Func <TTarget, System.Boolean >>> | Improve this Doc View Source CreateExpression Declaration public Expression<Func<TSource, TTarget>>? CreateExpression { get; } Property Value Type Description System.Nullable < Expression < Func <TSource, TTarget>>> | Improve this Doc View Source HasCondition Declaration public bool HasCondition { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MatchedPredicate Declaration public Expression<Func<TTarget, TSource, bool>>? MatchedPredicate { get; } Property Value Type Description System.Nullable < Expression < Func <TTarget, TSource, System.Boolean >>> | Improve this Doc View Source MatchedPredicate2 Declaration public Expression<Func<TTarget, TSource, bool>>? MatchedPredicate2 { get; } Property Value Type Description System.Nullable < Expression < Func <TTarget, TSource, System.Boolean >>> | Improve this Doc View Source NotMatchedPredicate Declaration public Expression<Func<TSource, bool>>? NotMatchedPredicate { get; } Property Value Type Description System.Nullable < Expression < Func <TSource, System.Boolean >>> | Improve this Doc View Source Type Declaration public MergeOperationType Type { get; } Property Value Type Description MergeOperationType | Improve this Doc View Source UpdateBySourceExpression Declaration public Expression<Func<TTarget, TTarget>>? UpdateBySourceExpression { get; } Property Value Type Description System.Nullable < Expression < Func <TTarget, TTarget>>> | Improve this Doc View Source UpdateExpression Declaration public Expression<Func<TTarget, TSource, TTarget>>? UpdateExpression { get; } Property Value Type Description System.Nullable < Expression < Func <TTarget, TSource, TTarget>>> Methods | Improve this Doc View Source Delete(Expression<Func<TTarget, TSource, Boolean>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation Delete(Expression<Func<TTarget, TSource, bool>> predicate) Parameters Type Name Description Expression < Func <TTarget, TSource, System.Boolean >> predicate Returns Type Description MergeDefinition.Operation <> | Improve this Doc View Source DeleteBySource(Expression<Func<TTarget, Boolean>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation DeleteBySource(Expression<Func<TTarget, bool>> predicate) Parameters Type Name Description Expression < Func <TTarget, System.Boolean >> predicate Returns Type Description MergeDefinition.Operation <> | Improve this Doc View Source Insert(Expression<Func<TSource, Boolean>>, Expression<Func<TSource, TTarget>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation Insert(Expression<Func<TSource, bool>> predicate, Expression<Func<TSource, TTarget>> create) Parameters Type Name Description Expression < Func <TSource, System.Boolean >> predicate Expression < Func <TSource, TTarget>> create Returns Type Description MergeDefinition.Operation <> | Improve this Doc View Source Update(Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation Update(Expression<Func<TTarget, TSource, bool>> predicate, Expression<Func<TTarget, TSource, TTarget>> update) Parameters Type Name Description Expression < Func <TTarget, TSource, System.Boolean >> predicate Expression < Func <TTarget, TSource, TTarget>> update Returns Type Description MergeDefinition.Operation <> | Improve this Doc View Source UpdateBySource(Expression<Func<TTarget, Boolean>>, Expression<Func<TTarget, TTarget>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation UpdateBySource(Expression<Func<TTarget, bool>> predicate, Expression<Func<TTarget, TTarget>> update) Parameters Type Name Description Expression < Func <TTarget, System.Boolean >> predicate Expression < Func <TTarget, TTarget>> update Returns Type Description MergeDefinition.Operation <> | Improve this Doc View Source UpdateWithDelete(Expression<Func<TTarget, TSource, Boolean>>, Expression<Func<TTarget, TSource, TTarget>>, Expression<Func<TTarget, TSource, Boolean>>) Declaration public static MergeDefinition<TTarget, TSource>.Operation UpdateWithDelete(Expression<Func<TTarget, TSource, bool>> updatePredicate, Expression<Func<TTarget, TSource, TTarget>> update, Expression<Func<TTarget, TSource, bool>> deletePredicate) Parameters Type Name Description Expression < Func <TTarget, TSource, System.Boolean >> updatePredicate Expression < Func <TTarget, TSource, TTarget>> update Expression < Func <TTarget, TSource, System.Boolean >> deletePredicate Returns Type Description MergeDefinition.Operation <> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.MergeOperationType.html": {
    "href": "api/LinqToDB.MergeOperationType.html",
    "title": "Enum MergeOperationType | Linq To DB (aka linq2db)",
    "keywords": "Enum MergeOperationType Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum MergeOperationType : int Fields Name Description Delete DeleteBySource Insert Update UpdateBySource UpdateWithDelete Extension Methods Map.DeepCopy<MergeOperationType>() Sql.IsDistinctFrom<MergeOperationType>(MergeOperationType) Sql.IsDistinctFrom<MergeOperationType>(Nullable<MergeOperationType>) Sql.IsNotDistinctFrom<MergeOperationType>(MergeOperationType) Sql.IsNotDistinctFrom<MergeOperationType>(Nullable<MergeOperationType>) SqlExtensions.In<MergeOperationType>(IEnumerable<MergeOperationType>) SqlExtensions.In<MergeOperationType>(IQueryable<MergeOperationType>) SqlExtensions.In<MergeOperationType>(MergeOperationType[]) SqlExtensions.In<MergeOperationType>(MergeOperationType, MergeOperationType) SqlExtensions.In<MergeOperationType>(MergeOperationType, MergeOperationType, MergeOperationType) SqlExtensions.NotIn<MergeOperationType>(IEnumerable<MergeOperationType>) SqlExtensions.NotIn<MergeOperationType>(IQueryable<MergeOperationType>) SqlExtensions.NotIn<MergeOperationType>(MergeOperationType[]) SqlExtensions.NotIn<MergeOperationType>(MergeOperationType, MergeOperationType) SqlExtensions.NotIn<MergeOperationType>(MergeOperationType, MergeOperationType, MergeOperationType)"
  },
  "api/LinqToDB.Metadata.AttributeReader.html": {
    "href": "api/LinqToDB.Metadata.AttributeReader.html",
    "title": "Class AttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class AttributeReader Inheritance System.Object AttributeReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class AttributeReader : object, IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Gets the dynamic columns defined on given type. Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type The type. Returns Type Description MemberInfo [] All dynamic columns defined on given type. Implements IMetadataReader Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.FluentMetadataReader.html": {
    "href": "api/LinqToDB.Metadata.FluentMetadataReader.html",
    "title": "Class FluentMetadataReader | Linq To DB (aka linq2db)",
    "keywords": "Class FluentMetadataReader Inheritance System.Object FluentMetadataReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class FluentMetadataReader : object, IMetadataReader Methods | Improve this Doc View Source AddAttribute(MemberInfo, Attribute) Declaration public void AddAttribute(MemberInfo memberInfo, Attribute attribute) Parameters Type Name Description MemberInfo memberInfo Attribute attribute | Improve this Doc View Source AddAttribute(Type, Attribute) Declaration public void AddAttribute(Type type, Attribute attribute) Parameters Type Name Description Type type Attribute attribute | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Gets the dynamic columns defined on given type. Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type The type. Returns Type Description MemberInfo [] All dynamic columns defined on given type. | Improve this Doc View Source GetRegisteredTypes() Gets all types, registered by by current fluent mapper. Declaration public Type[] GetRegisteredTypes() Returns Type Description Type [] Returns array with all types, mapped by current fluent mapper. Implements IMetadataReader Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.html": {
    "href": "api/LinqToDB.Metadata.html",
    "title": "Namespace LinqToDB.Metadata | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Metadata Classes AttributeReader FluentMetadataReader MetadataException Defines the base class for the namespace exceptions. MetadataReader Aggregation metadata reader, that just delegates all calls to nested readers. SystemComponentModelDataAnnotationsSchemaAttributeReader SystemDataLinqAttributeReader SystemDataSqlServerAttributeReader Adds support for types and functions, defined in Microsoft.SqlServer.Types spatial types (or any other types and methods, that use SqlMethodAttribute or SqlUserDefinedTypeAttribute mapping attributes). Check https://linq2db.github.io/articles/FAQ.html#how-can-i-use-sql-server-spatial-types for additional required configuration steps to support SQL Server spatial types. XmlAttributeReader Interfaces IMetadataReader"
  },
  "api/LinqToDB.Metadata.IMetadataReader.html": {
    "href": "api/LinqToDB.Metadata.IMetadataReader.html",
    "title": "Interface IMetadataReader | Linq To DB (aka linq2db)",
    "keywords": "Interface IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public interface IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration T[] GetAttributes<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Gets the dynamic columns defined on given type. Declaration MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type The type. Returns Type Description MemberInfo [] All dynamic columns defined on given type. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.MetadataException.html": {
    "href": "api/LinqToDB.Metadata.MetadataException.html",
    "title": "Class MetadataException | Linq To DB (aka linq2db)",
    "keywords": "Class MetadataException Defines the base class for the namespace exceptions. Inheritance System.Object MetadataException Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class MetadataException : Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source MetadataException() Initializes a new instance of the MetadataException class. Declaration public MetadataException() Remarks This constructor initializes the property of the new instance such as \"A Build Type exception has occurred.\" | Improve this Doc View Source MetadataException(Exception) Initializes a new instance of the MetadataException class with the specified InnerException property. Declaration public MetadataException(Exception innerException) Parameters Type Name Description Exception innerException The InnerException, if any, that threw the current exception. | Improve this Doc View Source MetadataException(SerializationInfo, StreamingContext) Initializes a new instance of the MetadataException class with serialized data. Declaration protected MetadataException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source MetadataException(String) Initializes a new instance of the MetadataException class with the specified error message. Declaration public MetadataException(string message) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. | Improve this Doc View Source MetadataException(String, Exception) Initializes a new instance of the MetadataException class with the specified error message and InnerException property. Declaration public MetadataException(string message, Exception innerException) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. Exception innerException The InnerException, if any, that threw the current exception. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.MetadataReader.html": {
    "href": "api/LinqToDB.Metadata.MetadataReader.html",
    "title": "Class MetadataReader | Linq To DB (aka linq2db)",
    "keywords": "Class MetadataReader Aggregation metadata reader, that just delegates all calls to nested readers. Inheritance System.Object MetadataReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class MetadataReader : object, IMetadataReader Constructors | Improve this Doc View Source MetadataReader(IMetadataReader[]) Declaration public MetadataReader(params IMetadataReader[] readers) Parameters Type Name Description IMetadataReader [] readers Fields | Improve this Doc View Source Default Declaration public static MetadataReader Default Field Value Type Description MetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit) where T : Attribute Parameters Type Name Description Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Gets the dynamic columns defined on given type. Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type The type. Returns Type Description MemberInfo [] All dynamic columns defined on given type. Implements IMetadataReader Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.SystemComponentModelDataAnnotationsSchemaAttributeReader.html": {
    "href": "api/LinqToDB.Metadata.SystemComponentModelDataAnnotationsSchemaAttributeReader.html",
    "title": "Class SystemComponentModelDataAnnotationsSchemaAttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class SystemComponentModelDataAnnotationsSchemaAttributeReader Inheritance System.Object SystemComponentModelDataAnnotationsSchemaAttributeReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class SystemComponentModelDataAnnotationsSchemaAttributeReader : object, IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit) where T : Attribute Parameters Type Name Description Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Gets the dynamic columns defined on given type. Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type The type. Returns Type Description MemberInfo [] All dynamic columns defined on given type. Implements IMetadataReader Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.SystemDataLinqAttributeReader.html": {
    "href": "api/LinqToDB.Metadata.SystemDataLinqAttributeReader.html",
    "title": "Class SystemDataLinqAttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class SystemDataLinqAttributeReader Inheritance System.Object SystemDataLinqAttributeReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class SystemDataLinqAttributeReader : object, IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit) where T : Attribute Parameters Type Name Description Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Gets the dynamic columns defined on given type. Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type The type. Returns Type Description MemberInfo [] All dynamic columns defined on given type. Implements IMetadataReader Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.SystemDataSqlServerAttributeReader.html": {
    "href": "api/LinqToDB.Metadata.SystemDataSqlServerAttributeReader.html",
    "title": "Class SystemDataSqlServerAttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class SystemDataSqlServerAttributeReader Adds support for types and functions, defined in Microsoft.SqlServer.Types spatial types (or any other types and methods, that use SqlMethodAttribute or SqlUserDefinedTypeAttribute mapping attributes). Check https://linq2db.github.io/articles/FAQ.html#how-can-i-use-sql-server-spatial-types for additional required configuration steps to support SQL Server spatial types. Inheritance System.Object SystemDataSqlServerAttributeReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class SystemDataSqlServerAttributeReader : object, IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit) where T : Attribute Parameters Type Name Description Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Gets the dynamic columns defined on given type. Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type The type. Returns Type Description MemberInfo [] All dynamic columns defined on given type. Implements IMetadataReader Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Metadata.XmlAttributeReader.html": {
    "href": "api/LinqToDB.Metadata.XmlAttributeReader.html",
    "title": "Class XmlAttributeReader | Linq To DB (aka linq2db)",
    "keywords": "Class XmlAttributeReader Inheritance System.Object XmlAttributeReader Implements IMetadataReader Namespace : LinqToDB.Metadata Assembly : linq2db.dll Syntax public class XmlAttributeReader : object, IMetadataReader Constructors | Improve this Doc View Source XmlAttributeReader(Stream) Declaration public XmlAttributeReader(Stream xmlDocStream) Parameters Type Name Description Stream xmlDocStream | Improve this Doc View Source XmlAttributeReader(String) Declaration public XmlAttributeReader(string xmlFile) Parameters Type Name Description System.String xmlFile | Improve this Doc View Source XmlAttributeReader(String, Assembly) Declaration public XmlAttributeReader(string xmlFile, Assembly assembly) Parameters Type Name Description System.String xmlFile Assembly assembly Methods | Improve this Doc View Source GetAttributes<T>(Type, MemberInfo, Boolean) Declaration public T[] GetAttributes<T>(Type type, MemberInfo memberInfo, bool inherit = true) where T : Attribute Parameters Type Name Description Type type MemberInfo memberInfo System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Declaration public T[] GetAttributes<T>(Type type, bool inherit = true) where T : Attribute Parameters Type Name Description Type type System.Boolean inherit Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetDynamicColumns(Type) Gets the dynamic columns defined on given type. Declaration public MemberInfo[] GetDynamicColumns(Type type) Parameters Type Name Description Type type The type. Returns Type Description MemberInfo [] All dynamic columns defined on given type. Implements IMetadataReader Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.MultiInsertExtensions.html": {
    "href": "api/LinqToDB.MultiInsertExtensions.html",
    "title": "Class MultiInsertExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class MultiInsertExtensions Inheritance System.Object MultiInsertExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class MultiInsertExtensions : object Methods | Improve this Doc View Source Else<TSource, TTarget>(MultiInsertExtensions.IMultiInsertWhen<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Insert into target table when previous conditions don't match. Declaration public static MultiInsertExtensions.IMultiInsertElse<TSource> Else<TSource, TTarget>(this MultiInsertExtensions.IMultiInsertWhen<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description MultiInsertExtensions.IMultiInsertWhen <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table to insert into. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description MultiInsertExtensions.IMultiInsertElse <TSource> Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source Insert<TSource>(MultiInsertExtensions.IMultiInsertInto<TSource>) Inserts source data into every configured table. Declaration public static int Insert<TSource>(this MultiInsertExtensions.IMultiInsertInto<TSource> insert) Parameters Type Name Description MultiInsertExtensions.IMultiInsertInto <TSource> insert Multi-table insert to perform. Returns Type Description System.Int32 Number of inserted rows. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source InsertAll<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>) Inserts source data into every matching condition. Declaration public static int InsertAll<TSource>(this MultiInsertExtensions.IMultiInsertElse<TSource> insert) Parameters Type Name Description MultiInsertExtensions.IMultiInsertElse <TSource> insert Multi-table insert to perform. Returns Type Description System.Int32 Number of inserted rows. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source InsertAllAsync<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>, CancellationToken) Asynchronously inserts source data into every matching condition. Declaration public static Task<int> InsertAllAsync<TSource>(this MultiInsertExtensions.IMultiInsertElse<TSource> insert, CancellationToken token = null) Parameters Type Name Description MultiInsertExtensions.IMultiInsertElse <TSource> insert Multi-table insert to perform. CancellationToken token Cancellation token for async operation. Returns Type Description Task < System.Int32 > Number of inserted rows. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source InsertAsync<TSource>(MultiInsertExtensions.IMultiInsertInto<TSource>, CancellationToken) Asynchronously inserts source data into every configured table. Declaration public static Task<int> InsertAsync<TSource>(this MultiInsertExtensions.IMultiInsertInto<TSource> insert, CancellationToken token = null) Parameters Type Name Description MultiInsertExtensions.IMultiInsertInto <TSource> insert Multi-table insert to perform. CancellationToken token Cancellation token for async operation. Returns Type Description Task < System.Int32 > Number of inserted rows. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source InsertFirst<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>) Inserts source data into the first matching condition. Declaration public static int InsertFirst<TSource>(this MultiInsertExtensions.IMultiInsertElse<TSource> insert) Parameters Type Name Description MultiInsertExtensions.IMultiInsertElse <TSource> insert Multi-table insert to perform. Returns Type Description System.Int32 Number of inserted rows. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source InsertFirstAsync<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>, CancellationToken) Asynchronously inserts source data into the first matching condition. Declaration public static Task<int> InsertFirstAsync<TSource>(this MultiInsertExtensions.IMultiInsertElse<TSource> insert, CancellationToken token = null) Parameters Type Name Description MultiInsertExtensions.IMultiInsertElse <TSource> insert Multi-table insert to perform. CancellationToken token Cancellation token for async operation. Returns Type Description Task < System.Int32 > Number of inserted rows. Type Parameters Name Description TSource Source query record type. | Improve this Doc View Source Into<TSource, TTarget>(MultiInsertExtensions.IMultiInsertInto<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Unconditionally insert into target table. Declaration public static MultiInsertExtensions.IMultiInsertInto<TSource> Into<TSource, TTarget>(this MultiInsertExtensions.IMultiInsertInto<TSource> source, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description MultiInsertExtensions.IMultiInsertInto <TSource> source Source query, that returns data for insert operation. ITable <TTarget> target Target table to insert into. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description MultiInsertExtensions.IMultiInsertInto <TSource> Type Parameters Name Description TSource Source query record type. TTarget Target table record type. | Improve this Doc View Source MultiInsert<TSource>(IQueryable<TSource>) Inserts records from source query into multiple target tables. Declaration public static MultiInsertExtensions.IMultiInsertSource<TSource> MultiInsert<TSource>(this IQueryable<TSource> source) Parameters Type Name Description IQueryable <TSource> source Source query, that returns data for insert operation. Returns Type Description MultiInsertExtensions.IMultiInsertSource <TSource> Type Parameters Name Description TSource Source query record type. Remarks Only supported by Oracle data provider. | Improve this Doc View Source When<TSource, TTarget>(MultiInsertExtensions.IMultiInsertWhen<TSource>, Expression<Func<TSource, Boolean>>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) Conditionally insert into target table. Declaration public static MultiInsertExtensions.IMultiInsertWhen<TSource> When<TSource, TTarget>(this MultiInsertExtensions.IMultiInsertWhen<TSource> source, Expression<Func<TSource, bool>> condition, ITable<TTarget> target, Expression<Func<TSource, TTarget>> setter) Parameters Type Name Description MultiInsertExtensions.IMultiInsertWhen <TSource> source Source query, that returns data for insert operation. Expression < Func <TSource, System.Boolean >> condition Predicate indicating when to insert into target table. ITable <TTarget> target Target table to insert into. Expression < Func <TSource, TTarget>> setter Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers. Returns Type Description MultiInsertExtensions.IMultiInsertWhen <TSource> Type Parameters Name Description TSource Source query record type. TTarget Target table record type."
  },
  "api/LinqToDB.MultiInsertExtensions.IMultiInsertElse-1.html": {
    "href": "api/LinqToDB.MultiInsertExtensions.IMultiInsertElse-1.html",
    "title": "Interface MultiInsertExtensions.IMultiInsertElse<TSource> | Linq To DB (aka linq2db)",
    "keywords": "Interface MultiInsertExtensions.IMultiInsertElse<TSource> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IMultiInsertElse<TSource> Type Parameters Name Description TSource Extension Methods Map.DeepCopy<T>(T) MultiInsertExtensions.InsertAll<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>) MultiInsertExtensions.InsertAllAsync<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>, CancellationToken) MultiInsertExtensions.InsertFirst<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>) MultiInsertExtensions.InsertFirstAsync<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>, CancellationToken) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.MultiInsertExtensions.IMultiInsertInto-1.html": {
    "href": "api/LinqToDB.MultiInsertExtensions.IMultiInsertInto-1.html",
    "title": "Interface MultiInsertExtensions.IMultiInsertInto<TSource> | Linq To DB (aka linq2db)",
    "keywords": "Interface MultiInsertExtensions.IMultiInsertInto<TSource> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IMultiInsertInto<TSource> Type Parameters Name Description TSource Extension Methods Map.DeepCopy<T>(T) MultiInsertExtensions.Into<TSource, TTarget>(MultiInsertExtensions.IMultiInsertInto<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) MultiInsertExtensions.Insert<TSource>(MultiInsertExtensions.IMultiInsertInto<TSource>) MultiInsertExtensions.InsertAsync<TSource>(MultiInsertExtensions.IMultiInsertInto<TSource>, CancellationToken) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.MultiInsertExtensions.IMultiInsertSource-1.html": {
    "href": "api/LinqToDB.MultiInsertExtensions.IMultiInsertSource-1.html",
    "title": "Interface MultiInsertExtensions.IMultiInsertSource<TSource> | Linq To DB (aka linq2db)",
    "keywords": "Interface MultiInsertExtensions.IMultiInsertSource<TSource> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IMultiInsertSource<TSource> : MultiInsertExtensions.IMultiInsertInto<TSource>, MultiInsertExtensions.IMultiInsertWhen<TSource>, MultiInsertExtensions.IMultiInsertElse<TSource> Type Parameters Name Description TSource Extension Methods Map.DeepCopy<T>(T) MultiInsertExtensions.Into<TSource, TTarget>(MultiInsertExtensions.IMultiInsertInto<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) MultiInsertExtensions.When<TSource, TTarget>(MultiInsertExtensions.IMultiInsertWhen<TSource>, Expression<Func<TSource, Boolean>>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) MultiInsertExtensions.Else<TSource, TTarget>(MultiInsertExtensions.IMultiInsertWhen<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) MultiInsertExtensions.Insert<TSource>(MultiInsertExtensions.IMultiInsertInto<TSource>) MultiInsertExtensions.InsertAsync<TSource>(MultiInsertExtensions.IMultiInsertInto<TSource>, CancellationToken) MultiInsertExtensions.InsertAll<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>) MultiInsertExtensions.InsertAllAsync<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>, CancellationToken) MultiInsertExtensions.InsertFirst<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>) MultiInsertExtensions.InsertFirstAsync<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>, CancellationToken) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.MultiInsertExtensions.IMultiInsertWhen-1.html": {
    "href": "api/LinqToDB.MultiInsertExtensions.IMultiInsertWhen-1.html",
    "title": "Interface MultiInsertExtensions.IMultiInsertWhen<TSource> | Linq To DB (aka linq2db)",
    "keywords": "Interface MultiInsertExtensions.IMultiInsertWhen<TSource> Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IMultiInsertWhen<TSource> : MultiInsertExtensions.IMultiInsertElse<TSource> Type Parameters Name Description TSource Extension Methods Map.DeepCopy<T>(T) MultiInsertExtensions.When<TSource, TTarget>(MultiInsertExtensions.IMultiInsertWhen<TSource>, Expression<Func<TSource, Boolean>>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) MultiInsertExtensions.Else<TSource, TTarget>(MultiInsertExtensions.IMultiInsertWhen<TSource>, ITable<TTarget>, Expression<Func<TSource, TTarget>>) MultiInsertExtensions.InsertAll<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>) MultiInsertExtensions.InsertAllAsync<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>, CancellationToken) MultiInsertExtensions.InsertFirst<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>) MultiInsertExtensions.InsertFirstAsync<TSource>(MultiInsertExtensions.IMultiInsertElse<TSource>, CancellationToken) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ProviderName.html": {
    "href": "api/LinqToDB.ProviderName.html",
    "title": "Class ProviderName | Linq To DB (aka linq2db)",
    "keywords": "Class ProviderName Default names for providers. Inheritance System.Object ProviderName Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class ProviderName : object Fields | Improve this Doc View Source Access Microsoft Access OleDb provider (both JET or ACE). Used as configuration name for Access mapping schema AccessMappingSchema . Declaration public const string Access = null Field Value Type Description System.String | Improve this Doc View Source AccessOdbc Microsoft Access ODBC provider. Used as configuration name for Access mapping schema AccessMappingSchema . Declaration public const string AccessOdbc = null Field Value Type Description System.String | Improve this Doc View Source DB2 IBM DB2 default provider (DB2 LUW). Used as configuration name for both DB2 base mapping schema DB2MappingSchema . Declaration public const string DB2 = null Field Value Type Description System.String | Improve this Doc View Source DB2LUW IBM DB2 LUW provider. Used as configuration name for DB2 LUW mapping schema DB2LUWMappingSchema . Declaration public const string DB2LUW = null Field Value Type Description System.String | Improve this Doc View Source DB2zOS IBM DB2 for z/OS provider. Used as configuration name for DB2 z/OS mapping schema DB2zOSMappingSchema . Declaration public const string DB2zOS = null Field Value Type Description System.String | Improve this Doc View Source Firebird Firebird provider. Used as configuration name for Firebird mapping schema FirebirdMappingSchema . Declaration public const string Firebird = null Field Value Type Description System.String | Improve this Doc View Source Informix Informix IBM.Data.Informix provider (including IDS provider). Used as configuration name for Informix mapping schema InformixMappingSchema . Declaration public const string Informix = null Field Value Type Description System.String | Improve this Doc View Source InformixDB2 Informix over IBM.Data.DB2 IDS provider. Used as configuration name for Informix mapping schema InformixMappingSchema . Declaration public const string InformixDB2 = null Field Value Type Description System.String | Improve this Doc View Source MySql MySql provider. Used as configuration name for MySql mapping schema MySqlMappingSchema . Declaration public const string MySql = null Field Value Type Description System.String | Improve this Doc View Source MySqlConnector MySqlConnector provider. Used as configuration name for MySql mapping schema MySqlMappingSchema . Declaration public const string MySqlConnector = null Field Value Type Description System.String | Improve this Doc View Source MySqlOfficial MySql provider. Used as configuration name for MySql mapping schema MySqlMappingSchema . Declaration public const string MySqlOfficial = null Field Value Type Description System.String | Improve this Doc View Source Oracle Oracle ODP.NET autodetected provider (native or managed). Used as configuration name for Oracle base mapping schema OracleMappingSchema . Declaration public const string Oracle = null Field Value Type Description System.String | Improve this Doc View Source OracleManaged Oracle ODP.NET managed provider. Used as configuration name for Oracle managed provider mapping schema OracleMappingSchema.ManagedMappingSchema . Declaration public const string OracleManaged = null Field Value Type Description System.String | Improve this Doc View Source OracleNative Oracle ODP.NET native provider. Used as configuration name for Oracle native provider mapping schema OracleMappingSchema.NativeMappingSchema . Declaration public const string OracleNative = null Field Value Type Description System.String | Improve this Doc View Source PostgreSQL PostgreSQL 9.2- data provider. Used as configuration name for PostgreSQL mapping schema PostgreSQLMappingSchema . Declaration public const string PostgreSQL = null Field Value Type Description System.String | Improve this Doc View Source PostgreSQL92 PostgreSQL 9.2- data provider. Declaration public const string PostgreSQL92 = null Field Value Type Description System.String | Improve this Doc View Source PostgreSQL93 PostgreSQL 9.3+ data provider. Declaration public const string PostgreSQL93 = null Field Value Type Description System.String | Improve this Doc View Source PostgreSQL95 PostgreSQL 9.5+ data provider. Declaration public const string PostgreSQL95 = null Field Value Type Description System.String | Improve this Doc View Source SapHana SAP HANA provider. Used as configuration name for SAP HANA mapping schema SapHanaMappingSchema . Declaration public const string SapHana = null Field Value Type Description System.String | Improve this Doc View Source SapHanaNative SAP HANA provider. Used as configuration name for SAP HANA mapping schema SapHanaMappingSchema.NativeMappingSchema . Declaration public const string SapHanaNative = null Field Value Type Description System.String | Improve this Doc View Source SapHanaOdbc SAP HANA ODBC provider. Used as configuration name for SAP HANA mapping schema SapHanaMappingSchema.OdbcMappingSchema . Declaration public const string SapHanaOdbc = null Field Value Type Description System.String | Improve this Doc View Source SqlCe Microsoft SQL Server Compact Edition provider. Used as configuration name for SQL CE mapping schema SqlCeMappingSchema . Declaration public const string SqlCe = null Field Value Type Description System.String | Improve this Doc View Source SQLite SQLite provider. Used as configuration name for SQLite mapping schema SQLiteMappingSchema . Declaration public const string SQLite = null Field Value Type Description System.String | Improve this Doc View Source SQLiteClassic System.Data.Sqlite provider. Declaration public const string SQLiteClassic = null Field Value Type Description System.String | Improve this Doc View Source SQLiteMS Microsoft.Data.Sqlite provider. Declaration public const string SQLiteMS = null Field Value Type Description System.String | Improve this Doc View Source SqlServer Microsoft SQL Server default provider (SQL Server 2008). Used as configuration name for SQL Server base mapping schema SqlServerMappingSchema . Declaration public const string SqlServer = null Field Value Type Description System.String | Improve this Doc View Source SqlServer2000 Microsoft SQL Server 2000 provider. Used as configuration name for SQL Server 2000 mapping schema SqlServer2000MappingSchema . Declaration public const string SqlServer2000 = null Field Value Type Description System.String | Improve this Doc View Source SqlServer2005 Microsoft SQL Server 2005 provider. Used as configuration name for SQL Server 2005 mapping schema SqlServer2005MappingSchema . Declaration public const string SqlServer2005 = null Field Value Type Description System.String | Improve this Doc View Source SqlServer2008 Microsoft SQL Server 2008 provider. Used as configuration name for SQL Server 2008 mapping schema SqlServer2008MappingSchema . Declaration public const string SqlServer2008 = null Field Value Type Description System.String | Improve this Doc View Source SqlServer2012 Microsoft SQL Server 2012 provider. Used as configuration name for SQL Server 2012 mapping schema SqlServer2012MappingSchema . Declaration public const string SqlServer2012 = null Field Value Type Description System.String | Improve this Doc View Source SqlServer2014 Microsoft SQL Server 2012 provider. Declaration public const string SqlServer2014 = null Field Value Type Description System.String | Improve this Doc View Source SqlServer2016 Microsoft SQL Server 2016 provider. Used as configuration name for SQL Server 2016 mapping schema SqlServer2016MappingSchema . Declaration public const string SqlServer2016 = null Field Value Type Description System.String | Improve this Doc View Source SqlServer2017 Microsoft SQL Server 2017 provider. Used as configuration name for SQL Server 2017 mapping schema SqlServer2017MappingSchema . Declaration public const string SqlServer2017 = null Field Value Type Description System.String | Improve this Doc View Source Sybase Native SAP/Sybase ASE provider. Used as configuration name for Sybase ASE mapping schema SybaseMappingSchema.NativeMappingSchema . Declaration public const string Sybase = null Field Value Type Description System.String | Improve this Doc View Source SybaseManaged Managed Sybase/SAP ASE provider from DataAction . Used as configuration name for Sybase ASE mapping schema SybaseMappingSchema.ManagedMappingSchema . Declaration public const string SybaseManaged = null Field Value Type Description System.String"
  },
  "api/LinqToDB.Reflection.html": {
    "href": "api/LinqToDB.Reflection.html",
    "title": "Namespace LinqToDB.Reflection | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Reflection Classes MemberAccessor Methods This API supports the LinqToDB infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Methods.ADONet Methods.Enumerable Methods.LinqToDB Methods.LinqToDB.ColumnReader Methods.LinqToDB.DataParameter Methods.LinqToDB.Delete Methods.LinqToDB.GroupBy Methods.LinqToDB.Insert Methods.LinqToDB.Insert.DC Methods.LinqToDB.Insert.Q Methods.LinqToDB.Insert.SI Methods.LinqToDB.Insert.T Methods.LinqToDB.Insert.VI Methods.LinqToDB.Merge Methods.LinqToDB.MultiInsert Methods.LinqToDB.SqlExt Methods.LinqToDB.Table Methods.LinqToDB.Tools Methods.LinqToDB.Update Methods.Queryable ObjectFactoryAttribute TypeAccessor TypeAccessor<T> Interfaces IObjectFactory"
  },
  "api/LinqToDB.Reflection.IObjectFactory.html": {
    "href": "api/LinqToDB.Reflection.IObjectFactory.html",
    "title": "Interface IObjectFactory | Linq To DB (aka linq2db)",
    "keywords": "Interface IObjectFactory Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public interface IObjectFactory Methods | Improve this Doc View Source CreateInstance(TypeAccessor) Declaration object CreateInstance(TypeAccessor typeAccessor) Parameters Type Name Description TypeAccessor typeAccessor Returns Type Description System.Object Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Reflection.MemberAccessor.html": {
    "href": "api/LinqToDB.Reflection.MemberAccessor.html",
    "title": "Class MemberAccessor | Linq To DB (aka linq2db)",
    "keywords": "Class MemberAccessor Inheritance System.Object MemberAccessor Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public class MemberAccessor : object Constructors | Improve this Doc View Source MemberAccessor(TypeAccessor, MemberInfo, EntityDescriptor) Declaration public MemberAccessor(TypeAccessor typeAccessor, MemberInfo memberInfo, EntityDescriptor ed) Parameters Type Name Description TypeAccessor typeAccessor MemberInfo memberInfo EntityDescriptor ed Properties | Improve this Doc View Source Getter Declaration public Func<object, object?>? Getter { get; } Property Value Type Description System.Nullable < Func < System.Object , System.Nullable < System.Object >>> | Improve this Doc View Source GetterExpression Declaration public LambdaExpression GetterExpression { get; } Property Value Type Description LambdaExpression | Improve this Doc View Source HasGetter Declaration public bool HasGetter { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasSetter Declaration public bool HasSetter { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsComplex Declaration public bool IsComplex { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MemberInfo Declaration public MemberInfo MemberInfo { get; } Property Value Type Description MemberInfo | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Setter Declaration public Action<object, object?>? Setter { get; } Property Value Type Description System.Nullable < Action < System.Object , System.Nullable < System.Object >>> | Improve this Doc View Source SetterExpression Declaration public LambdaExpression? SetterExpression { get; } Property Value Type Description System.Nullable < LambdaExpression > | Improve this Doc View Source Type Declaration public Type Type { get; } Property Value Type Description Type | Improve this Doc View Source TypeAccessor Declaration public TypeAccessor TypeAccessor { get; } Property Value Type Description TypeAccessor Methods | Improve this Doc View Source GetAttribute<T>() Declaration public T GetAttribute<T>() where T : Attribute Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetAttributes() Declaration public object[] GetAttributes() Returns Type Description System.Object [] | Improve this Doc View Source GetAttributes<T>() Declaration public T[] GetAttributes<T>() where T : Attribute Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetTypeAttributes<T>() Declaration public T[] GetTypeAttributes<T>() where T : Attribute Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source GetValue(Object) Declaration public virtual object? GetValue(object o) Parameters Type Name Description System.Object o Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source SetValue(Object, Nullable<Object>) Declaration public virtual void SetValue(object o, object? value) Parameters Type Name Description System.Object o System.Nullable < System.Object > value Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Reflection.Methods.ADONet.html": {
    "href": "api/LinqToDB.Reflection.Methods.ADONet.html",
    "title": "Class Methods.ADONet | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.ADONet Inheritance System.Object Methods.ADONet Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class ADONet : object Fields | Improve this Doc View Source IsDBNull Declaration public static readonly MethodInfo IsDBNull Field Value Type Description MethodInfo | Improve this Doc View Source IsDBNullAsync Declaration public static readonly MethodInfo IsDBNullAsync Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.Enumerable.html": {
    "href": "api/LinqToDB.Reflection.Methods.Enumerable.html",
    "title": "Class Methods.Enumerable | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.Enumerable Inheritance System.Object Methods.Enumerable Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class Enumerable : object Fields | Improve this Doc View Source AsQueryable Declaration public static readonly MethodInfo AsQueryable Field Value Type Description MethodInfo | Improve this Doc View Source Contains Declaration public static readonly MethodInfo Contains Field Value Type Description MethodInfo | Improve this Doc View Source DefaultIfEmpty Declaration public static readonly MethodInfo DefaultIfEmpty Field Value Type Description MethodInfo | Improve this Doc View Source DefaultIfEmptyValue Declaration public static readonly MethodInfo DefaultIfEmptyValue Field Value Type Description MethodInfo | Improve this Doc View Source Distinct Declaration public static readonly MethodInfo Distinct Field Value Type Description MethodInfo | Improve this Doc View Source ElementAt Declaration public static readonly MethodInfo ElementAt Field Value Type Description MethodInfo | Improve this Doc View Source ElementAtOrDefault Declaration public static readonly MethodInfo ElementAtOrDefault Field Value Type Description MethodInfo | Improve this Doc View Source First Declaration public static readonly MethodInfo First Field Value Type Description MethodInfo | Improve this Doc View Source FirstOrDefault Declaration public static readonly MethodInfo FirstOrDefault Field Value Type Description MethodInfo | Improve this Doc View Source FirstOrDefaultCondition Declaration public static readonly MethodInfo FirstOrDefaultCondition Field Value Type Description MethodInfo | Improve this Doc View Source GroupJoin Declaration public static readonly MethodInfo GroupJoin Field Value Type Description MethodInfo | Improve this Doc View Source Join Declaration public static readonly MethodInfo Join Field Value Type Description MethodInfo | Improve this Doc View Source OfType Declaration public static readonly MethodInfo OfType Field Value Type Description MethodInfo | Improve this Doc View Source Select Declaration public static readonly MethodInfo Select Field Value Type Description MethodInfo | Improve this Doc View Source SelectManyProjection Declaration public static readonly MethodInfo SelectManyProjection Field Value Type Description MethodInfo | Improve this Doc View Source SelectManySimple Declaration public static readonly MethodInfo SelectManySimple Field Value Type Description MethodInfo | Improve this Doc View Source Skip Declaration public static readonly MethodInfo Skip Field Value Type Description MethodInfo | Improve this Doc View Source Take Declaration public static readonly MethodInfo Take Field Value Type Description MethodInfo | Improve this Doc View Source ToArray Declaration public static readonly MethodInfo ToArray Field Value Type Description MethodInfo | Improve this Doc View Source ToList Declaration public static readonly MethodInfo ToList Field Value Type Description MethodInfo | Improve this Doc View Source Where Declaration public static readonly MethodInfo Where Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.html": {
    "href": "api/LinqToDB.Reflection.Methods.html",
    "title": "Class Methods | Linq To DB (aka linq2db)",
    "keywords": "Class Methods This API supports the LinqToDB infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance System.Object Methods Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class Methods : object"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.ColumnReader.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.ColumnReader.html",
    "title": "Class Methods.LinqToDB.ColumnReader | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.ColumnReader Inheritance System.Object Methods.LinqToDB.ColumnReader Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class ColumnReader : object Fields | Improve this Doc View Source GetRawValueSequential Declaration public static readonly MethodInfo GetRawValueSequential Field Value Type Description MethodInfo | Improve this Doc View Source GetValue Declaration public static readonly MethodInfo GetValue Field Value Type Description MethodInfo | Improve this Doc View Source GetValueSequential Declaration public static readonly MethodInfo GetValueSequential Field Value Type Description MethodInfo | Improve this Doc View Source RawValuePlaceholder Declaration public static readonly MethodInfo RawValuePlaceholder Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.DataParameter.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.DataParameter.html",
    "title": "Class Methods.LinqToDB.DataParameter | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.DataParameter Inheritance System.Object Methods.LinqToDB.DataParameter Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class DataParameter : object Fields | Improve this Doc View Source DbDataType Declaration public static readonly PropertyInfo DbDataType Field Value Type Description PropertyInfo | Improve this Doc View Source Value Declaration public static readonly PropertyInfo Value Field Value Type Description PropertyInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.Delete.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.Delete.html",
    "title": "Class Methods.LinqToDB.Delete | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.Delete Inheritance System.Object Methods.LinqToDB.Delete Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class Delete : object Fields | Improve this Doc View Source DeleteQueryable Declaration public static readonly MethodInfo DeleteQueryable Field Value Type Description MethodInfo | Improve this Doc View Source DeleteQueryableAsync Declaration public static readonly MethodInfo DeleteQueryableAsync Field Value Type Description MethodInfo | Improve this Doc View Source DeleteQueryablePredicate Declaration public static readonly MethodInfo DeleteQueryablePredicate Field Value Type Description MethodInfo | Improve this Doc View Source DeleteQueryablePredicateAsync Declaration public static readonly MethodInfo DeleteQueryablePredicateAsync Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.GroupBy.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.GroupBy.html",
    "title": "Class Methods.LinqToDB.GroupBy | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.GroupBy Inheritance System.Object Methods.LinqToDB.GroupBy Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class GroupBy : object Fields | Improve this Doc View Source Cube Declaration public static readonly MethodInfo Cube Field Value Type Description MethodInfo | Improve this Doc View Source Grouping Declaration public static readonly MethodInfo Grouping Field Value Type Description MethodInfo | Improve this Doc View Source GroupingSets Declaration public static readonly MethodInfo GroupingSets Field Value Type Description MethodInfo | Improve this Doc View Source Rollup Declaration public static readonly MethodInfo Rollup Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.html",
    "title": "Class Methods.LinqToDB | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB Inheritance System.Object Methods.LinqToDB Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class LinqToDB : object Fields | Improve this Doc View Source AsQueryable Declaration public static readonly MethodInfo AsQueryable Field Value Type Description MethodInfo | Improve this Doc View Source AsSubQuery Declaration public static readonly MethodInfo AsSubQuery Field Value Type Description MethodInfo | Improve this Doc View Source DisableGuard Declaration public static readonly MethodInfo DisableGuard Field Value Type Description MethodInfo | Improve this Doc View Source GetTable Declaration public static readonly MethodInfo GetTable Field Value Type Description MethodInfo | Improve this Doc View Source IgnoreFilters Declaration public static readonly MethodInfo IgnoreFilters Field Value Type Description MethodInfo | Improve this Doc View Source InlineParameters Declaration public static readonly MethodInfo InlineParameters Field Value Type Description MethodInfo | Improve this Doc View Source JoinTypePredicateSelector Declaration public static readonly MethodInfo JoinTypePredicateSelector Field Value Type Description MethodInfo | Improve this Doc View Source LoadWith Declaration public static readonly MethodInfo LoadWith Field Value Type Description MethodInfo | Improve this Doc View Source LoadWithAsTable Declaration public static readonly MethodInfo LoadWithAsTable Field Value Type Description MethodInfo | Improve this Doc View Source LoadWithManyFilter Declaration public static readonly MethodInfo LoadWithManyFilter Field Value Type Description MethodInfo | Improve this Doc View Source LoadWithSingleFilter Declaration public static readonly MethodInfo LoadWithSingleFilter Field Value Type Description MethodInfo | Improve this Doc View Source RemoveOrderBy Declaration public static readonly MethodInfo RemoveOrderBy Field Value Type Description MethodInfo | Improve this Doc View Source TagQuery Declaration public static readonly MethodInfo TagQuery Field Value Type Description MethodInfo | Improve this Doc View Source ThenLoadFromMany Declaration public static readonly MethodInfo ThenLoadFromMany Field Value Type Description MethodInfo | Improve this Doc View Source ThenLoadFromManyManyFilter Declaration public static readonly MethodInfo ThenLoadFromManyManyFilter Field Value Type Description MethodInfo | Improve this Doc View Source ThenLoadFromManySingleFilter Declaration public static readonly MethodInfo ThenLoadFromManySingleFilter Field Value Type Description MethodInfo | Improve this Doc View Source ThenLoadFromSingle Declaration public static readonly MethodInfo ThenLoadFromSingle Field Value Type Description MethodInfo | Improve this Doc View Source ThenLoadFromSingleManyFilter Declaration public static readonly MethodInfo ThenLoadFromSingleManyFilter Field Value Type Description MethodInfo | Improve this Doc View Source ThenLoadFromSingleSingleFilter Declaration public static readonly MethodInfo ThenLoadFromSingleSingleFilter Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.DC.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.DC.html",
    "title": "Class Methods.LinqToDB.Insert.DC | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.Insert.DC Inheritance System.Object Methods.LinqToDB.Insert.DC Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class DC : object Fields | Improve this Doc View Source Insert Declaration public static readonly MethodInfo Insert Field Value Type Description MethodInfo | Improve this Doc View Source InsertAsync Declaration public static readonly MethodInfo InsertAsync Field Value Type Description MethodInfo | Improve this Doc View Source Into Declaration public static readonly MethodInfo Into Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.html",
    "title": "Class Methods.LinqToDB.Insert | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.Insert Inheritance System.Object Methods.LinqToDB.Insert Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class Insert : object"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.Q.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.Q.html",
    "title": "Class Methods.LinqToDB.Insert.Q | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.Insert.Q Inheritance System.Object Methods.LinqToDB.Insert.Q Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class Q : object Fields | Improve this Doc View Source Insert Declaration public static readonly MethodInfo Insert Field Value Type Description MethodInfo | Improve this Doc View Source InsertAsync Declaration public static readonly MethodInfo InsertAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithDecimalIdentity Declaration public static readonly MethodInfo InsertWithDecimalIdentity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithDecimalIdentityAsync Declaration public static readonly MethodInfo InsertWithDecimalIdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithIdentity Declaration public static readonly MethodInfo InsertWithIdentity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithIdentityAsync Declaration public static readonly MethodInfo InsertWithIdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt32Identity Declaration public static readonly MethodInfo InsertWithInt32Identity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt32IdentityAsync Declaration public static readonly MethodInfo InsertWithInt32IdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt64Identity Declaration public static readonly MethodInfo InsertWithInt64Identity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt64IdentityAsync Declaration public static readonly MethodInfo InsertWithInt64IdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source Into Declaration public static readonly MethodInfo Into Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.SI.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.SI.html",
    "title": "Class Methods.LinqToDB.Insert.SI | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.Insert.SI Inheritance System.Object Methods.LinqToDB.Insert.SI Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class SI : object Fields | Improve this Doc View Source Insert Declaration public static readonly MethodInfo Insert Field Value Type Description MethodInfo | Improve this Doc View Source InsertAsync Declaration public static readonly MethodInfo InsertAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithDecimalIdentity Declaration public static readonly MethodInfo InsertWithDecimalIdentity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithDecimalIdentityAsync Declaration public static readonly MethodInfo InsertWithDecimalIdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithIdentity Declaration public static readonly MethodInfo InsertWithIdentity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithIdentityAsync Declaration public static readonly MethodInfo InsertWithIdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt32Identity Declaration public static readonly MethodInfo InsertWithInt32Identity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt32IdentityAsync Declaration public static readonly MethodInfo InsertWithInt32IdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt64Identity Declaration public static readonly MethodInfo InsertWithInt64Identity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt64IdentityAsync Declaration public static readonly MethodInfo InsertWithInt64IdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source Value Declaration public static readonly MethodInfo Value Field Value Type Description MethodInfo | Improve this Doc View Source ValueExpression Declaration public static readonly MethodInfo ValueExpression Field Value Type Description MethodInfo | Improve this Doc View Source ValueSourceExpression Declaration public static readonly MethodInfo ValueSourceExpression Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.T.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.T.html",
    "title": "Class Methods.LinqToDB.Insert.T | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.Insert.T Inheritance System.Object Methods.LinqToDB.Insert.T Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class T : object Fields | Improve this Doc View Source Insert Declaration public static readonly MethodInfo Insert Field Value Type Description MethodInfo | Improve this Doc View Source InsertAsync Declaration public static readonly MethodInfo InsertAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithDecimalIdentity Declaration public static readonly MethodInfo InsertWithDecimalIdentity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithDecimalIdentityAsync Declaration public static readonly MethodInfo InsertWithDecimalIdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithIdentity Declaration public static readonly MethodInfo InsertWithIdentity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithIdentityAsync Declaration public static readonly MethodInfo InsertWithIdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt32Identity Declaration public static readonly MethodInfo InsertWithInt32Identity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt32IdentityAsync Declaration public static readonly MethodInfo InsertWithInt32IdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt64Identity Declaration public static readonly MethodInfo InsertWithInt64Identity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt64IdentityAsync Declaration public static readonly MethodInfo InsertWithInt64IdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source Value Declaration public static readonly MethodInfo Value Field Value Type Description MethodInfo | Improve this Doc View Source ValueExpression Declaration public static readonly MethodInfo ValueExpression Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.VI.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.Insert.VI.html",
    "title": "Class Methods.LinqToDB.Insert.VI | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.Insert.VI Inheritance System.Object Methods.LinqToDB.Insert.VI Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class VI : object Fields | Improve this Doc View Source Insert Declaration public static readonly MethodInfo Insert Field Value Type Description MethodInfo | Improve this Doc View Source InsertAsync Declaration public static readonly MethodInfo InsertAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithDecimalIdentity Declaration public static readonly MethodInfo InsertWithDecimalIdentity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithDecimalIdentityAsync Declaration public static readonly MethodInfo InsertWithDecimalIdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithIdentity Declaration public static readonly MethodInfo InsertWithIdentity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithIdentityAsync Declaration public static readonly MethodInfo InsertWithIdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt32Identity Declaration public static readonly MethodInfo InsertWithInt32Identity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt32IdentityAsync Declaration public static readonly MethodInfo InsertWithInt32IdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt64Identity Declaration public static readonly MethodInfo InsertWithInt64Identity Field Value Type Description MethodInfo | Improve this Doc View Source InsertWithInt64IdentityAsync Declaration public static readonly MethodInfo InsertWithInt64IdentityAsync Field Value Type Description MethodInfo | Improve this Doc View Source Value Declaration public static readonly MethodInfo Value Field Value Type Description MethodInfo | Improve this Doc View Source ValueExpression Declaration public static readonly MethodInfo ValueExpression Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.Merge.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.Merge.html",
    "title": "Class Methods.LinqToDB.Merge | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.Merge Inheritance System.Object Methods.LinqToDB.Merge Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class Merge : object Fields | Improve this Doc View Source DeleteWhenMatchedAndMethodInfo Declaration public static readonly MethodInfo DeleteWhenMatchedAndMethodInfo Field Value Type Description MethodInfo | Improve this Doc View Source DeleteWhenNotMatchedBySourceAndMethodInfo Declaration public static readonly MethodInfo DeleteWhenNotMatchedBySourceAndMethodInfo Field Value Type Description MethodInfo | Improve this Doc View Source ExecuteMergeMethodInfo Declaration public static readonly MethodInfo ExecuteMergeMethodInfo Field Value Type Description MethodInfo | Improve this Doc View Source InsertWhenNotMatchedAndMethodInfo Declaration public static readonly MethodInfo InsertWhenNotMatchedAndMethodInfo Field Value Type Description MethodInfo | Improve this Doc View Source MergeIntoMethodInfo1 Declaration public static readonly MethodInfo MergeIntoMethodInfo1 Field Value Type Description MethodInfo | Improve this Doc View Source MergeIntoMethodInfo2 Declaration public static readonly MethodInfo MergeIntoMethodInfo2 Field Value Type Description MethodInfo | Improve this Doc View Source MergeMethodInfo1 Declaration public static readonly MethodInfo MergeMethodInfo1 Field Value Type Description MethodInfo | Improve this Doc View Source MergeMethodInfo2 Declaration public static readonly MethodInfo MergeMethodInfo2 Field Value Type Description MethodInfo | Improve this Doc View Source MergeWithOutput Declaration public static readonly MethodInfo MergeWithOutput Field Value Type Description MethodInfo | Improve this Doc View Source MergeWithOutputInto Declaration public static readonly MethodInfo MergeWithOutputInto Field Value Type Description MethodInfo | Improve this Doc View Source OnMethodInfo1 Declaration public static readonly MethodInfo OnMethodInfo1 Field Value Type Description MethodInfo | Improve this Doc View Source OnMethodInfo2 Declaration public static readonly MethodInfo OnMethodInfo2 Field Value Type Description MethodInfo | Improve this Doc View Source OnTargetKeyMethodInfo Declaration public static readonly MethodInfo OnTargetKeyMethodInfo Field Value Type Description MethodInfo | Improve this Doc View Source UpdateWhenMatchedAndMethodInfo Declaration public static readonly MethodInfo UpdateWhenMatchedAndMethodInfo Field Value Type Description MethodInfo | Improve this Doc View Source UpdateWhenMatchedAndThenDeleteMethodInfo Declaration public static readonly MethodInfo UpdateWhenMatchedAndThenDeleteMethodInfo Field Value Type Description MethodInfo | Improve this Doc View Source UpdateWhenNotMatchedBySourceAndMethodInfo Declaration public static readonly MethodInfo UpdateWhenNotMatchedBySourceAndMethodInfo Field Value Type Description MethodInfo | Improve this Doc View Source UsingMethodInfo1 Declaration public static readonly MethodInfo UsingMethodInfo1 Field Value Type Description MethodInfo | Improve this Doc View Source UsingMethodInfo2 Declaration public static readonly MethodInfo UsingMethodInfo2 Field Value Type Description MethodInfo | Improve this Doc View Source UsingTargetMethodInfo Declaration public static readonly MethodInfo UsingTargetMethodInfo Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.MultiInsert.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.MultiInsert.html",
    "title": "Class Methods.LinqToDB.MultiInsert | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.MultiInsert Inheritance System.Object Methods.LinqToDB.MultiInsert Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class MultiInsert : object Fields | Improve this Doc View Source Begin Declaration public static readonly MethodInfo Begin Field Value Type Description MethodInfo | Improve this Doc View Source Else Declaration public static readonly MethodInfo Else Field Value Type Description MethodInfo | Improve this Doc View Source Insert Declaration public static readonly MethodInfo Insert Field Value Type Description MethodInfo | Improve this Doc View Source InsertAll Declaration public static readonly MethodInfo InsertAll Field Value Type Description MethodInfo | Improve this Doc View Source InsertFirst Declaration public static readonly MethodInfo InsertFirst Field Value Type Description MethodInfo | Improve this Doc View Source Into Declaration public static readonly MethodInfo Into Field Value Type Description MethodInfo | Improve this Doc View Source When Declaration public static readonly MethodInfo When Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.SqlExt.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.SqlExt.html",
    "title": "Class Methods.LinqToDB.SqlExt | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.SqlExt Inheritance System.Object Methods.LinqToDB.SqlExt Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class SqlExt : object Fields | Improve this Doc View Source Alias Declaration public static readonly MethodInfo Alias Field Value Type Description MethodInfo | Improve this Doc View Source Property Declaration public static readonly MethodInfo Property Field Value Type Description MethodInfo | Improve this Doc View Source ToNotNull Declaration public static readonly MethodInfo ToNotNull Field Value Type Description MethodInfo | Improve this Doc View Source ToNotNullable Declaration public static readonly MethodInfo ToNotNullable Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.Table.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.Table.html",
    "title": "Class Methods.LinqToDB.Table | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.Table Inheritance System.Object Methods.LinqToDB.Table Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class Table : object Fields | Improve this Doc View Source DatabaseName Declaration public static readonly MethodInfo DatabaseName Field Value Type Description MethodInfo | Improve this Doc View Source SchemaName Declaration public static readonly MethodInfo SchemaName Field Value Type Description MethodInfo | Improve this Doc View Source ServerName Declaration public static readonly MethodInfo ServerName Field Value Type Description MethodInfo | Improve this Doc View Source TableName Declaration public static readonly MethodInfo TableName Field Value Type Description MethodInfo | Improve this Doc View Source TableOptions Declaration public static readonly MethodInfo TableOptions Field Value Type Description MethodInfo | Improve this Doc View Source With Declaration public static readonly MethodInfo With Field Value Type Description MethodInfo | Improve this Doc View Source WithTableExpression Declaration public static readonly MethodInfo WithTableExpression Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.Tools.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.Tools.html",
    "title": "Class Methods.LinqToDB.Tools | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.Tools Inheritance System.Object Methods.LinqToDB.Tools Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class Tools : object Fields | Improve this Doc View Source CreateEmptyQuery Declaration public static readonly MethodInfo CreateEmptyQuery Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.LinqToDB.Update.html": {
    "href": "api/LinqToDB.Reflection.Methods.LinqToDB.Update.html",
    "title": "Class Methods.LinqToDB.Update | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.LinqToDB.Update Inheritance System.Object Methods.LinqToDB.Update Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class Update : object Fields | Improve this Doc View Source AsUpdatable Declaration public static readonly MethodInfo AsUpdatable Field Value Type Description MethodInfo | Improve this Doc View Source SetQueryableExpression Declaration public static readonly MethodInfo SetQueryableExpression Field Value Type Description MethodInfo | Improve this Doc View Source SetQueryablePrev Declaration public static readonly MethodInfo SetQueryablePrev Field Value Type Description MethodInfo | Improve this Doc View Source SetQueryableSetCustom Declaration public static readonly MethodInfo SetQueryableSetCustom Field Value Type Description MethodInfo | Improve this Doc View Source SetQueryableValue Declaration public static readonly MethodInfo SetQueryableValue Field Value Type Description MethodInfo | Improve this Doc View Source SetUpdatableExpression Declaration public static readonly MethodInfo SetUpdatableExpression Field Value Type Description MethodInfo | Improve this Doc View Source SetUpdatablePrev Declaration public static readonly MethodInfo SetUpdatablePrev Field Value Type Description MethodInfo | Improve this Doc View Source SetUpdatableSetCustom Declaration public static readonly MethodInfo SetUpdatableSetCustom Field Value Type Description MethodInfo | Improve this Doc View Source SetUpdatableValue Declaration public static readonly MethodInfo SetUpdatableValue Field Value Type Description MethodInfo | Improve this Doc View Source UpdatePredicateSetter Declaration public static readonly MethodInfo UpdatePredicateSetter Field Value Type Description MethodInfo | Improve this Doc View Source UpdatePredicateSetterAsync Declaration public static readonly MethodInfo UpdatePredicateSetterAsync Field Value Type Description MethodInfo | Improve this Doc View Source UpdateSetter Declaration public static readonly MethodInfo UpdateSetter Field Value Type Description MethodInfo | Improve this Doc View Source UpdateSetterAsync Declaration public static readonly MethodInfo UpdateSetterAsync Field Value Type Description MethodInfo | Improve this Doc View Source UpdateTarget Declaration public static readonly MethodInfo UpdateTarget Field Value Type Description MethodInfo | Improve this Doc View Source UpdateTargetAsync Declaration public static readonly MethodInfo UpdateTargetAsync Field Value Type Description MethodInfo | Improve this Doc View Source UpdateTargetFuncSetter Declaration public static readonly MethodInfo UpdateTargetFuncSetter Field Value Type Description MethodInfo | Improve this Doc View Source UpdateTargetFuncSetterAsync Declaration public static readonly MethodInfo UpdateTargetFuncSetterAsync Field Value Type Description MethodInfo | Improve this Doc View Source UpdateUpdatable Declaration public static readonly MethodInfo UpdateUpdatable Field Value Type Description MethodInfo | Improve this Doc View Source UpdateUpdatableAsync Declaration public static readonly MethodInfo UpdateUpdatableAsync Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.Methods.Queryable.html": {
    "href": "api/LinqToDB.Reflection.Methods.Queryable.html",
    "title": "Class Methods.Queryable | Linq To DB (aka linq2db)",
    "keywords": "Class Methods.Queryable Inheritance System.Object Methods.Queryable Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public static class Queryable : object Fields | Improve this Doc View Source AsEnumerable Declaration public static readonly MethodInfo AsEnumerable Field Value Type Description MethodInfo | Improve this Doc View Source Contains Declaration public static readonly MethodInfo Contains Field Value Type Description MethodInfo | Improve this Doc View Source DefaultIfEmpty Declaration public static readonly MethodInfo DefaultIfEmpty Field Value Type Description MethodInfo | Improve this Doc View Source DefaultIfEmptyValue Declaration public static readonly MethodInfo DefaultIfEmptyValue Field Value Type Description MethodInfo | Improve this Doc View Source Distinct Declaration public static readonly MethodInfo Distinct Field Value Type Description MethodInfo | Improve this Doc View Source ElementAt Declaration public static readonly MethodInfo ElementAt Field Value Type Description MethodInfo | Improve this Doc View Source ElementAtAsync Declaration public static readonly MethodInfo ElementAtAsync Field Value Type Description MethodInfo | Improve this Doc View Source ElementAtOrDefault Declaration public static readonly MethodInfo ElementAtOrDefault Field Value Type Description MethodInfo | Improve this Doc View Source ElementAtOrDefaultAsync Declaration public static readonly MethodInfo ElementAtOrDefaultAsync Field Value Type Description MethodInfo | Improve this Doc View Source First Declaration public static readonly MethodInfo First Field Value Type Description MethodInfo | Improve this Doc View Source FirstOrDefault Declaration public static readonly MethodInfo FirstOrDefault Field Value Type Description MethodInfo | Improve this Doc View Source FirstOrDefaultCondition Declaration public static readonly MethodInfo FirstOrDefaultCondition Field Value Type Description MethodInfo | Improve this Doc View Source GroupJoin Declaration public static readonly MethodInfo GroupJoin Field Value Type Description MethodInfo | Improve this Doc View Source Join Declaration public static readonly MethodInfo Join Field Value Type Description MethodInfo | Improve this Doc View Source OfType Declaration public static readonly MethodInfo OfType Field Value Type Description MethodInfo | Improve this Doc View Source Select Declaration public static readonly MethodInfo Select Field Value Type Description MethodInfo | Improve this Doc View Source SelectManyProjection Declaration public static readonly MethodInfo SelectManyProjection Field Value Type Description MethodInfo | Improve this Doc View Source SelectManySimple Declaration public static readonly MethodInfo SelectManySimple Field Value Type Description MethodInfo | Improve this Doc View Source Skip Declaration public static readonly MethodInfo Skip Field Value Type Description MethodInfo | Improve this Doc View Source Take Declaration public static readonly MethodInfo Take Field Value Type Description MethodInfo | Improve this Doc View Source ToArray Declaration public static readonly MethodInfo ToArray Field Value Type Description MethodInfo | Improve this Doc View Source ToList Declaration public static readonly MethodInfo ToList Field Value Type Description MethodInfo | Improve this Doc View Source Where Declaration public static readonly MethodInfo Where Field Value Type Description MethodInfo"
  },
  "api/LinqToDB.Reflection.ObjectFactoryAttribute.html": {
    "href": "api/LinqToDB.Reflection.ObjectFactoryAttribute.html",
    "title": "Class ObjectFactoryAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class ObjectFactoryAttribute Inheritance System.Object ObjectFactoryAttribute Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public class ObjectFactoryAttribute : Attribute Constructors | Improve this Doc View Source ObjectFactoryAttribute(Type) Declaration public ObjectFactoryAttribute(Type type) Parameters Type Name Description Type type Properties | Improve this Doc View Source ObjectFactory Declaration public IObjectFactory ObjectFactory { get; } Property Value Type Description IObjectFactory Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Reflection.TypeAccessor.html": {
    "href": "api/LinqToDB.Reflection.TypeAccessor.html",
    "title": "Class TypeAccessor | Linq To DB (aka linq2db)",
    "keywords": "Class TypeAccessor Inheritance System.Object TypeAccessor TypeAccessor <T> Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public abstract class TypeAccessor : object Properties | Improve this Doc View Source Item[Int32] Declaration public MemberAccessor this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description MemberAccessor | Improve this Doc View Source Item[String] Declaration public MemberAccessor this[string memberName] { get; } Parameters Type Name Description System.String memberName Property Value Type Description MemberAccessor | Improve this Doc View Source Members Declaration public List<MemberAccessor> Members { get; } Property Value Type Description List < MemberAccessor > | Improve this Doc View Source ObjectFactory Declaration public IObjectFactory ObjectFactory { get; set; } Property Value Type Description IObjectFactory | Improve this Doc View Source Type Declaration public abstract Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source AddMember(MemberAccessor) Declaration protected void AddMember(MemberAccessor member) Parameters Type Name Description MemberAccessor member | Improve this Doc View Source CreateInstance() Declaration public virtual object CreateInstance() Returns Type Description System.Object | Improve this Doc View Source CreateInstanceEx() Declaration public object CreateInstanceEx() Returns Type Description System.Object | Improve this Doc View Source GetAccessor(Type) Declaration public static TypeAccessor GetAccessor(Type type) Parameters Type Name Description Type type Returns Type Description TypeAccessor | Improve this Doc View Source GetAccessor<T>() Declaration public static TypeAccessor<T> GetAccessor<T>() Returns Type Description TypeAccessor <T> Type Parameters Name Description T Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Reflection.TypeAccessor-1.html": {
    "href": "api/LinqToDB.Reflection.TypeAccessor-1.html",
    "title": "Class TypeAccessor<T> | Linq To DB (aka linq2db)",
    "keywords": "Class TypeAccessor<T> Inheritance System.Object TypeAccessor TypeAccessor<T> Inherited Members TypeAccessor.AddMember(MemberAccessor) TypeAccessor.CreateInstanceEx() TypeAccessor.ObjectFactory TypeAccessor.Members TypeAccessor.Item[String] TypeAccessor.Item[Int32] TypeAccessor.GetAccessor(Type) TypeAccessor.GetAccessor<T>() Namespace : LinqToDB.Reflection Assembly : linq2db.dll Syntax public class TypeAccessor<T> : TypeAccessor Type Parameters Name Description T Properties | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description Type Overrides TypeAccessor.Type Methods | Improve this Doc View Source Create() Declaration public T Create() Returns Type Description T | Improve this Doc View Source CreateInstance() Declaration public override object CreateInstance() Returns Type Description System.Object Overrides TypeAccessor.CreateInstance() Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.AssociationType.html": {
    "href": "api/LinqToDB.SchemaProvider.AssociationType.html",
    "title": "Enum AssociationType | Linq To DB (aka linq2db)",
    "keywords": "Enum AssociationType Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public enum AssociationType : int Fields Name Description Auto ManyToOne OneToMany OneToOne Extension Methods Map.DeepCopy<AssociationType>() Sql.IsDistinctFrom<AssociationType>(AssociationType) Sql.IsDistinctFrom<AssociationType>(Nullable<AssociationType>) Sql.IsNotDistinctFrom<AssociationType>(AssociationType) Sql.IsNotDistinctFrom<AssociationType>(Nullable<AssociationType>) SqlExtensions.In<AssociationType>(IEnumerable<AssociationType>) SqlExtensions.In<AssociationType>(IQueryable<AssociationType>) SqlExtensions.In<AssociationType>(AssociationType[]) SqlExtensions.In<AssociationType>(AssociationType, AssociationType) SqlExtensions.In<AssociationType>(AssociationType, AssociationType, AssociationType) SqlExtensions.NotIn<AssociationType>(IEnumerable<AssociationType>) SqlExtensions.NotIn<AssociationType>(IQueryable<AssociationType>) SqlExtensions.NotIn<AssociationType>(AssociationType[]) SqlExtensions.NotIn<AssociationType>(AssociationType, AssociationType) SqlExtensions.NotIn<AssociationType>(AssociationType, AssociationType, AssociationType)"
  },
  "api/LinqToDB.SchemaProvider.ColumnInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ColumnInfo.html",
    "title": "Class ColumnInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnInfo Inheritance System.Object ColumnInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ColumnInfo : object Fields | Improve this Doc View Source ColumnType Declaration public string? ColumnType Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataType Declaration public string? DataType Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source Description Declaration public string? Description Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsIdentity Declaration public bool IsIdentity Field Value Type Description System.Boolean | Improve this Doc View Source IsNullable Declaration public bool IsNullable Field Value Type Description System.Boolean | Improve this Doc View Source Length Declaration public long? Length Field Value Type Description System.Nullable < System.Int64 > | Improve this Doc View Source Name Declaration public string Name Field Value Type Description System.String | Improve this Doc View Source Ordinal Declaration public int Ordinal Field Value Type Description System.Int32 | Improve this Doc View Source Precision Declaration public int? Precision Field Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Scale Declaration public int? Scale Field Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source SkipOnInsert Declaration public bool SkipOnInsert Field Value Type Description System.Boolean | Improve this Doc View Source SkipOnUpdate Declaration public bool SkipOnUpdate Field Value Type Description System.Boolean | Improve this Doc View Source TableID Declaration public string TableID Field Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ColumnSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ColumnSchema.html",
    "title": "Class ColumnSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ColumnSchema Describes table column. Inheritance System.Object ColumnSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ColumnSchema : object Fields | Improve this Doc View Source Table Gets column owner schema. Declaration public TableSchema Table Field Value Type Description TableSchema Properties | Improve this Doc View Source ColumnName Gets column name. Declaration public string ColumnName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ColumnType Gets db-specific column type. Declaration public string? ColumnType { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataType Gets column type as DataType enumeration value. Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source Description Gets column description. Declaration public string? Description { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsIdentity Gets flag indicating that it is identity column. Declaration public bool IsIdentity { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNullable Gets flag indicating that it is nullable column. Declaration public bool IsNullable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPrimaryKey Gets flag indicating that column is a part of primary key. Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Gets column type length. Declaration public long? Length { get; set; } Property Value Type Description System.Nullable < System.Int64 > | Improve this Doc View Source MemberName Gets C# friendly column name. Declaration public string MemberName { get; set; } Property Value Type Description System.String | Improve this Doc View Source MemberType Gets .net column type as a string. Declaration public string MemberType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Precision Gets column type precision. Declaration public int? Precision { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source PrimaryKeyOrder Gets position of column in composite primary key. Declaration public int PrimaryKeyOrder { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ProviderSpecificType Gets provider-specific .net column type as a string. Declaration public string? ProviderSpecificType { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Scale Gets column type scale. Declaration public int? Scale { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source SkipOnInsert Gets flag indicating that insert operations without explicit column setter should ignore this column. Declaration public bool SkipOnInsert { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipOnUpdate Gets flag indicating that update operations without explicit column setter should ignore this column. Declaration public bool SkipOnUpdate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SystemType Gets .net column type. Declaration public Type SystemType { get; set; } Property Value Type Description Type Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.DatabaseSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.DatabaseSchema.html",
    "title": "Class DatabaseSchema | Linq To DB (aka linq2db)",
    "keywords": "Class DatabaseSchema Inheritance System.Object DatabaseSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class DatabaseSchema : object Properties | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataSource Declaration public string DataSource { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataTypesSchema Declaration public DataTable DataTypesSchema { get; set; } Property Value Type Description DataTable | Improve this Doc View Source Procedures Declaration public List<ProcedureSchema> Procedures { get; set; } Property Value Type Description List < ProcedureSchema > | Improve this Doc View Source ProviderSpecificTypeNamespace Declaration public string? ProviderSpecificTypeNamespace { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ServerVersion Declaration public string ServerVersion { get; set; } Property Value Type Description System.String | Improve this Doc View Source Tables Declaration public List<TableSchema> Tables { get; set; } Property Value Type Description List < TableSchema > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.DataTypeInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.DataTypeInfo.html",
    "title": "Class DataTypeInfo | Linq To DB (aka linq2db)",
    "keywords": "Class DataTypeInfo Database data type descriptor. Implements subset of DataTypes schema collection: https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/common-schema-collections . Inheritance System.Object DataTypeInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class DataTypeInfo : object Fields | Improve this Doc View Source CreateFormat Gets or sets SQL type name template - type name and, optionally, parameters. This template could be used to define column or variable of specific type. E.g. DECIMAL({0}, {1}). Declaration public string? CreateFormat Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source CreateParameters Gets or sets comma-separated positional list of CreateFormat parameters. E.g. \"precision,scale\". Order of parameters must match order in CreateFormat . Declaration public string? CreateParameters Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataType Gets or sets .NET type name, used by provider for current type. Declaration public string DataType Field Value Type Description System.String | Improve this Doc View Source ProviderDbType Gets or sets provider-specific type identifier to use for query parameters of this type. Corresponds to some provider's enumeration, e.g. SqlDbType, OracleType, etc. Declaration public int ProviderDbType Field Value Type Description System.Int32 | Improve this Doc View Source ProviderSpecific Marks provider-specific types. Declaration public bool ProviderSpecific Field Value Type Description System.Boolean | Improve this Doc View Source TypeName Gets or sets SQL name of data type. Declaration public string TypeName Field Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ForeignKeyInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ForeignKeyInfo.html",
    "title": "Class ForeignKeyInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ForeignKeyInfo Inheritance System.Object ForeignKeyInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ForeignKeyInfo : object Fields | Improve this Doc View Source Name Declaration public string Name Field Value Type Description System.String | Improve this Doc View Source Ordinal Declaration public int Ordinal Field Value Type Description System.Int32 | Improve this Doc View Source OtherColumn Declaration public string OtherColumn Field Value Type Description System.String | Improve this Doc View Source OtherTableID Declaration public string OtherTableID Field Value Type Description System.String | Improve this Doc View Source ThisColumn Declaration public string ThisColumn Field Value Type Description System.String | Improve this Doc View Source ThisTableID Declaration public string ThisTableID Field Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ForeignKeySchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ForeignKeySchema.html",
    "title": "Class ForeignKeySchema | Linq To DB (aka linq2db)",
    "keywords": "Class ForeignKeySchema Inheritance System.Object ForeignKeySchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ForeignKeySchema : object Properties | Improve this Doc View Source AssociationType Declaration public AssociationType AssociationType { get; set; } Property Value Type Description AssociationType | Improve this Doc View Source BackReference Declaration public ForeignKeySchema BackReference { get; set; } Property Value Type Description ForeignKeySchema | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source KeyName Declaration public string KeyName { get; set; } Property Value Type Description System.String | Improve this Doc View Source MemberName Declaration public string MemberName { get; set; } Property Value Type Description System.String | Improve this Doc View Source OtherColumns Declaration public List<ColumnSchema> OtherColumns { get; set; } Property Value Type Description List < ColumnSchema > | Improve this Doc View Source OtherTable Declaration public TableSchema OtherTable { get; set; } Property Value Type Description TableSchema | Improve this Doc View Source ThisColumns Declaration public List<ColumnSchema> ThisColumns { get; set; } Property Value Type Description List < ColumnSchema > | Improve this Doc View Source ThisTable Declaration public TableSchema ThisTable { get; set; } Property Value Type Description TableSchema Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.GetSchemaOptions.html": {
    "href": "api/LinqToDB.SchemaProvider.GetSchemaOptions.html",
    "title": "Class GetSchemaOptions | Linq To DB (aka linq2db)",
    "keywords": "Class GetSchemaOptions Defines schema load options. Inheritance System.Object GetSchemaOptions GetHanaSchemaOptions Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class GetSchemaOptions : object Fields | Improve this Doc View Source DefaultSchema Default Schema name. Declaration public string? DefaultSchema Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source ExcludedCatalogs List of disallowed databases/catalogs. Declaration public string? [] ExcludedCatalogs Field Value Type Description System.Nullable < System.String >[] | Improve this Doc View Source ExcludedSchemas List of disallowed schemas/owners. Declaration public string? [] ExcludedSchemas Field Value Type Description System.Nullable < System.String >[] | Improve this Doc View Source GenerateChar1AsString Should linq2db use for char(1) type or . Default type: ( false ). Declaration public bool GenerateChar1AsString Field Value Type Description System.Boolean | Improve this Doc View Source GetAssociationMemberName Optional custom name generation logic for association property. Declaration public Func<ForeignKeySchema, string>? GetAssociationMemberName Field Value Type Description System.Nullable < Func < ForeignKeySchema , System.String >> | Improve this Doc View Source GetForeignKeys Enable or disable read of foreign keys. Default - enabled ( true ). Disabe could be useful at least for Access, as it could crash on some database files. Declaration public bool GetForeignKeys Field Value Type Description System.Boolean | Improve this Doc View Source GetProcedures Enable or disable read of procedures and functions metadata. Default - enabled ( true ). Declaration public bool GetProcedures Field Value Type Description System.Boolean | Improve this Doc View Source GetTables Enable or disable read of table schema. Default - enabled ( true ). Declaration public bool GetTables Field Value Type Description System.Boolean | Improve this Doc View Source IncludedCatalogs List of allowed databases/catalogs. Declaration public string? [] IncludedCatalogs Field Value Type Description System.Nullable < System.String >[] | Improve this Doc View Source IncludedSchemas List of allowed schemas/owners. Declaration public string? [] IncludedSchemas Field Value Type Description System.Nullable < System.String >[] | Improve this Doc View Source LoadProcedure Optional procedure metadata load filter. By default all procedures loaded. Declaration public Func<ProcedureSchema, bool> LoadProcedure Field Value Type Description Func < ProcedureSchema , System.Boolean > | Improve this Doc View Source LoadTable Optinal callback to filter loaded tables. receives object with table details and return boolean flag to indicate that table should be loaded ( true ) or skipped ( false ). Declaration public Func<LoadTableData, bool>? LoadTable Field Value Type Description System.Nullable < Func < LoadTableData , System.Boolean >> | Improve this Doc View Source PreferProviderSpecificTypes When set to true, will prefer generation of provider-specific types instead of general types. Declaration public bool PreferProviderSpecificTypes Field Value Type Description System.Boolean | Improve this Doc View Source ProcedureLoadingProgress Optional callback to report procedure metadata load progress. First parameter contains total number of discovered procedures. Second parameter provides position of currently loaded procedure. Declaration public Action<int, int> ProcedureLoadingProgress Field Value Type Description Action < System.Int32 , System.Int32 > | Improve this Doc View Source StringComparer String comparison logic for IncludedSchemas , ExcludedSchemas , IncludedCatalogs and ExcludedCatalogs values. Default is . Declaration public StringComparer StringComparer Field Value Type Description StringComparer | Improve this Doc View Source UseSchemaOnly if set to true, SchemaProvider uses to get SqlServer metadata. Otherwise the sp_describe_first_result_set sproc is used. Declaration public bool UseSchemaOnly Field Value Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.html": {
    "href": "api/LinqToDB.SchemaProvider.html",
    "title": "Namespace LinqToDB.SchemaProvider | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.SchemaProvider Classes ColumnInfo ColumnSchema Describes table column. DatabaseSchema DataTypeInfo Database data type descriptor. Implements subset of DataTypes schema collection: https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/common-schema-collections . ForeignKeyInfo ForeignKeySchema GetSchemaOptions Defines schema load options. ParameterSchema Describes database procedure or function parameter. PrimaryKeyInfo ProcedureInfo Database procedure or function description. ProcedureParameterInfo Database procedure or function parameter description. ProcedureSchema Describes database procedure or function. SchemaProviderBase TableInfo TableSchema Describes table-like objects such as tables, views, procedure or function results. Structs LoadTableData Contains table information, passed to LoadTable delegate. Interfaces ISchemaProvider Database schema provider. Enums AssociationType"
  },
  "api/LinqToDB.SchemaProvider.ISchemaProvider.html": {
    "href": "api/LinqToDB.SchemaProvider.ISchemaProvider.html",
    "title": "Interface ISchemaProvider | Linq To DB (aka linq2db)",
    "keywords": "Interface ISchemaProvider Database schema provider. Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public interface ISchemaProvider Methods | Improve this Doc View Source GetSchema(DataConnection, GetSchemaOptions) Returns database schema. Note that it is recommended to call this method outside of transaction as some providers do not support it or behave incorrectly. At least following providers shouldn't be called in transaction: MySQL; Microsoft SQL Server; Sybase; DB2. Declaration DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options = null) Parameters Type Name Description DataConnection dataConnection Data connection to use to read schema from. GetSchemaOptions options Schema read configuration options. Returns Type Description DatabaseSchema Returns database schema information. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.LoadTableData.html": {
    "href": "api/LinqToDB.SchemaProvider.LoadTableData.html",
    "title": "Struct LoadTableData | Linq To DB (aka linq2db)",
    "keywords": "Struct LoadTableData Contains table information, passed to LoadTable delegate. Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public struct LoadTableData Properties | Improve this Doc View Source Database Gets table database/catalog name. Could be null for some providers. Declaration public readonly string? Database { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsDefaultSchema Gets flag to indicate that table belongs to default schema. Declaration public readonly bool IsDefaultSchema { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSystem Gets flag to indicate system view or table. Declaration public readonly bool IsSystem { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsView Gets flag to indicate that this is not a table but view. Declaration public readonly bool IsView { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets name of current table or view. Declaration public readonly string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Schema Gets table schema/owner name. Could be null for some providers. Declaration public readonly string? Schema { get; } Property Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsDistinctFrom<T>(T, Nullable<T>) Sql.IsNotDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, Nullable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ParameterSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ParameterSchema.html",
    "title": "Class ParameterSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ParameterSchema Describes database procedure or function parameter. Inheritance System.Object ParameterSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ParameterSchema : object Properties | Improve this Doc View Source DataType Gets parameter type as DataType enumeration value. Declaration public DataType DataType { get; set; } Property Value Type Description DataType | Improve this Doc View Source Description Gets parameter description. Declaration public string? Description { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsIn Gets flag indicating that it is input parameter. Declaration public bool IsIn { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNullable Gets flag indicating that it is nullable parameter. Declaration public bool IsNullable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOut Gets flag indicating that it is output parameter. Declaration public bool IsOut { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsResult Gets flag indicating that it is return value parameter. Declaration public bool IsResult { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ParameterName Gets C#-friendly parameter name. Declaration public string ParameterName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ParameterType Gets .net type for parameter as string. Declaration public string ParameterType { get; set; } Property Value Type Description System.String | Improve this Doc View Source ProviderSpecificType Gets provider-specific .net parameter type as a string. Declaration public string? ProviderSpecificType { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SchemaName Gets parameter's name. Declaration public string? SchemaName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SchemaType Gets database-specific parameter type. Declaration public string? SchemaType { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Size Gets parameter type size. Declaration public long? Size { get; set; } Property Value Type Description System.Nullable < System.Int64 > | Improve this Doc View Source SystemType Gets .net type for parameter. Declaration public Type SystemType { get; set; } Property Value Type Description Type Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.PrimaryKeyInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.PrimaryKeyInfo.html",
    "title": "Class PrimaryKeyInfo | Linq To DB (aka linq2db)",
    "keywords": "Class PrimaryKeyInfo Inheritance System.Object PrimaryKeyInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class PrimaryKeyInfo : object Fields | Improve this Doc View Source ColumnName Declaration public string ColumnName Field Value Type Description System.String | Improve this Doc View Source Ordinal Declaration public int Ordinal Field Value Type Description System.Int32 | Improve this Doc View Source PrimaryKeyName Declaration public string PrimaryKeyName Field Value Type Description System.String | Improve this Doc View Source TableID Declaration public string TableID Field Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ProcedureInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ProcedureInfo.html",
    "title": "Class ProcedureInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ProcedureInfo Database procedure or function description. Inheritance System.Object ProcedureInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ProcedureInfo : object Fields | Improve this Doc View Source CatalogName Gets or sets database name for procedure. Declaration public string? CatalogName Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source Description Procedure or function description. Declaration public string? Description Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsAggregateFunction Gets or sets flag to distinguish aggregate function from other functions. Declaration public bool IsAggregateFunction Field Value Type Description System.Boolean | Improve this Doc View Source IsDefaultSchema Get or sets flag, indicating that procedure belongs to default schema/owner. Declaration public bool IsDefaultSchema Field Value Type Description System.Boolean | Improve this Doc View Source IsFunction Gets or sets flag to distinguish function from procedure. Declaration public bool IsFunction Field Value Type Description System.Boolean | Improve this Doc View Source IsResultDynamic Get or sets flag, indicating that procedure returns dynamic (generic) result. Declaration public bool IsResultDynamic Field Value Type Description System.Boolean | Improve this Doc View Source IsTableFunction Gets or sets flag to distinguish table function from other functions. Declaration public bool IsTableFunction Field Value Type Description System.Boolean | Improve this Doc View Source IsWindowFunction Gets or sets flag to distinguish window function from other functions. Declaration public bool IsWindowFunction Field Value Type Description System.Boolean | Improve this Doc View Source ProcedureDefinition Gets or sets procedure source code. Declaration public string? ProcedureDefinition Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source ProcedureID Gets or sets unique procedure identifier. NOTE: this is not fully-qualified procedure name (even if it used right now for some providers as procedure identifier). Declaration public string ProcedureID Field Value Type Description System.String | Improve this Doc View Source ProcedureName Gets or sets procedure name. Declaration public string ProcedureName Field Value Type Description System.String | Improve this Doc View Source SchemaName Gets or sets schema/owner name for procedure. Declaration public string? SchemaName Field Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ProcedureParameterInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.ProcedureParameterInfo.html",
    "title": "Class ProcedureParameterInfo | Linq To DB (aka linq2db)",
    "keywords": "Class ProcedureParameterInfo Database procedure or function parameter description. Inheritance System.Object ProcedureParameterInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ProcedureParameterInfo : object Fields | Improve this Doc View Source DataType Get or sets database type for parameter. Declaration public string? DataType Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataTypeExact Get or sets exact database type for parameter. Declaration public string? DataTypeExact Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source Description Parameter's description. Declaration public string? Description Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsIn Gets or sets input or input-output parameter flag. Declaration public bool IsIn Field Value Type Description System.Boolean | Improve this Doc View Source IsNullable Gets flag indicating that it is nullable parameter. Declaration public bool IsNullable Field Value Type Description System.Boolean | Improve this Doc View Source IsOut Gets or sets output or input-output parameter flag. Declaration public bool IsOut Field Value Type Description System.Boolean | Improve this Doc View Source IsResult Gets or sets return value parameter flag. Declaration public bool IsResult Field Value Type Description System.Boolean | Improve this Doc View Source Length Gets or sets parameter type length attribute. Declaration public long? Length Field Value Type Description System.Nullable < System.Int64 > | Improve this Doc View Source Ordinal Gets or sets parameter position. Declaration public int Ordinal Field Value Type Description System.Int32 | Improve this Doc View Source ParameterName Gets or sets parameter name. Declaration public string? ParameterName Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source Precision Gets or sets parameter type precision attribute. Declaration public int? Precision Field Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source ProcedureID Gets or sets unique procedure identifier. NOTE: this is not fully-qualified procedure name (even if it used right now for some providers as procedure identifier). Declaration public string ProcedureID Field Value Type Description System.String | Improve this Doc View Source Scale Gets or sets parameter type scale attribute. Declaration public int? Scale Field Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source UDTCatalog Parameter's user-defined type(UDT) catalog/database. Declaration public string? UDTCatalog Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source UDTName Parameter's user-defined type(UDT) name. Declaration public string? UDTName Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source UDTSchema Parameter's user-defined type(UDT) schema/owner. Declaration public string? UDTSchema Field Value Type Description System.Nullable < System.String > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.ProcedureSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.ProcedureSchema.html",
    "title": "Class ProcedureSchema | Linq To DB (aka linq2db)",
    "keywords": "Class ProcedureSchema Describes database procedure or function. Inheritance System.Object ProcedureSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class ProcedureSchema : object Properties | Improve this Doc View Source CatalogName Name of database, that contains current procedure. Declaration public string? CatalogName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Description Gets procedure or function description. Declaration public string? Description { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsAggregateFunction Gets flag indicating that it is aggregate function or not. Declaration public bool IsAggregateFunction { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDefaultSchema Gets flag indicating that procedure defined with default owner/schema or not. Declaration public bool IsDefaultSchema { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsFunction true for function and false for procedure. Declaration public bool IsFunction { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsLoaded Gets flag indicating that procedure tabl result schema loaded. If it is false , procedure doesn't return table-like results or schema loading failed. In latter case check ResultException property for error. Declaration public bool IsLoaded { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsResultDynamic Get or sets flag, indicating that procedure returns dynamic (generic) result. Declaration public bool IsResultDynamic { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsTableFunction Gets flag indicating that it is scalar or table function. Declaration public bool IsTableFunction { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MemberName C#-friendly name. Declaration public string MemberName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Parameters Gets list of procedure parameters. Declaration public List<ParameterSchema> Parameters { get; set; } Property Value Type Description List < ParameterSchema > | Improve this Doc View Source ProcedureName Procedure or function name. Declaration public string ProcedureName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ResultException Contains exception, generated during schema load. Declaration public Exception? ResultException { get; set; } Property Value Type Description System.Nullable < Exception > | Improve this Doc View Source ResultTable Gets table result schema for procedure to table function. Declaration public TableSchema ResultTable { get; set; } Property Value Type Description TableSchema | Improve this Doc View Source SchemaName Name of procedure schema/owner. Declaration public string? SchemaName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SimilarTables List of tables with the same schema as schema in ResultTable . Declaration public List<TableSchema>? SimilarTables { get; set; } Property Value Type Description System.Nullable < List < TableSchema >> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.SchemaProviderBase.html": {
    "href": "api/LinqToDB.SchemaProvider.SchemaProviderBase.html",
    "title": "Class SchemaProviderBase | Linq To DB (aka linq2db)",
    "keywords": "Class SchemaProviderBase Inheritance System.Object SchemaProviderBase PostgreSQLSchemaProvider Implements ISchemaProvider Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public abstract class SchemaProviderBase : object, ISchemaProvider Fields | Improve this Doc View Source DataTypesSchema Declaration protected DataTable DataTypesSchema Field Value Type Description DataTable | Improve this Doc View Source ExcludedCatalogs Declaration protected HashSet<string?> ExcludedCatalogs Field Value Type Description HashSet < System.Nullable < System.String >> | Improve this Doc View Source ExcludedSchemas Declaration protected HashSet<string?> ExcludedSchemas Field Value Type Description HashSet < System.Nullable < System.String >> | Improve this Doc View Source GenerateChar1AsString Declaration protected bool GenerateChar1AsString Field Value Type Description System.Boolean | Improve this Doc View Source IncludedCatalogs Declaration protected HashSet<string?> IncludedCatalogs Field Value Type Description HashSet < System.Nullable < System.String >> | Improve this Doc View Source IncludedSchemas Declaration protected HashSet<string?> IncludedSchemas Field Value Type Description HashSet < System.Nullable < System.String >> Properties | Improve this Doc View Source GetProcedureSchemaExecutesProcedure If true, provider doesn't support schema-only procedure execution and will execute procedure for real. Declaration protected virtual bool GetProcedureSchemaExecutesProcedure { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source BuildProcedureParameter(ParameterSchema) Declaration protected virtual DataParameter BuildProcedureParameter(ParameterSchema p) Parameters Type Name Description ParameterSchema p Returns Type Description DataParameter | Improve this Doc View Source BuildSchemaFilter(GetSchemaOptions, String, Action<StringBuilder, String>) Declaration protected string? BuildSchemaFilter(GetSchemaOptions options, string defaultSchema, Action<StringBuilder, string> stringLiteralBuilder) Parameters Type Name Description GetSchemaOptions options System.String defaultSchema Action < StringBuilder , System.String > stringLiteralBuilder Returns Type Description System.Nullable < System.String > | Improve this Doc View Source BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema, String) Builds table function call command. Declaration protected virtual string BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema procedure, string commandText) Parameters Type Name Description ProcedureSchema procedure System.String commandText Returns Type Description System.String | Improve this Doc View Source ForeignKeyColumnComparison(String) Declaration protected virtual StringComparison ForeignKeyColumnComparison(string column) Parameters Type Name Description System.String column Returns Type Description StringComparison | Improve this Doc View Source GetColumns(DataConnection, GetSchemaOptions) Declaration protected abstract List<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options Returns Type Description List < ColumnInfo > | Improve this Doc View Source GetDatabaseName(DataConnection) Declaration protected virtual string GetDatabaseName(DataConnection dbConnection) Parameters Type Name Description DataConnection dbConnection Returns Type Description System.String | Improve this Doc View Source GetDataSourceName(DataConnection) Declaration protected virtual string GetDataSourceName(DataConnection dbConnection) Parameters Type Name Description DataConnection dbConnection Returns Type Description System.String | Improve this Doc View Source GetDataType(Nullable<String>, GetSchemaOptions) Declaration protected virtual DataTypeInfo GetDataType(string? typeName, GetSchemaOptions options) Parameters Type Name Description System.Nullable < System.String > typeName GetSchemaOptions options Returns Type Description DataTypeInfo | Improve this Doc View Source GetDataType(Nullable<String>, Nullable<String>, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>) Declaration protected abstract DataType GetDataType(string? dataType, string? columnType, long? length, int? prec, int? scale) Parameters Type Name Description System.Nullable < System.String > dataType System.Nullable < System.String > columnType System.Nullable < System.Int64 > length System.Nullable < System.Int32 > prec System.Nullable < System.Int32 > scale Returns Type Description DataType | Improve this Doc View Source GetDataTypeByProviderDbType(Int32, GetSchemaOptions) Declaration protected DataTypeInfo GetDataTypeByProviderDbType(int typeId, GetSchemaOptions options) Parameters Type Name Description System.Int32 typeId GetSchemaOptions options Returns Type Description DataTypeInfo | Improve this Doc View Source GetDataTypes(DataConnection) Returns list of database data types. Declaration protected virtual List<DataTypeInfo> GetDataTypes(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Database connection instance. Returns Type Description List < DataTypeInfo > List of database data types. | Improve this Doc View Source GetDbType(GetSchemaOptions, Nullable<String>, DataTypeInfo, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, Nullable<String>, Nullable<String>, Nullable<String>) Declaration protected virtual string? GetDbType(GetSchemaOptions options, string? columnType, DataTypeInfo dataType, long? length, int? precision, int? scale, string? udtCatalog, string? udtSchema, string? udtName) Parameters Type Name Description GetSchemaOptions options System.Nullable < System.String > columnType DataTypeInfo dataType System.Nullable < System.Int64 > length System.Nullable < System.Int32 > precision System.Nullable < System.Int32 > scale System.Nullable < System.String > udtCatalog System.Nullable < System.String > udtSchema System.Nullable < System.String > udtName Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetForeignKeys(DataConnection, IEnumerable<TableSchema>, GetSchemaOptions) Declaration protected abstract IReadOnlyCollection<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable<TableSchema> tables, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection IEnumerable < TableSchema > tables GetSchemaOptions options Returns Type Description IReadOnlyCollection < ForeignKeyInfo > | Improve this Doc View Source GetHashSet(Nullable<String>[], IEqualityComparer<Nullable<String>>) Declaration protected static HashSet<string?> GetHashSet(string? [] data, IEqualityComparer<string?> comparer) Parameters Type Name Description System.Nullable < System.String >[] data IEqualityComparer < System.Nullable < System.String >> comparer Returns Type Description HashSet < System.Nullable < System.String >> | Improve this Doc View Source GetPrimaryKeys(DataConnection, IEnumerable<TableSchema>, GetSchemaOptions) Declaration protected abstract IReadOnlyCollection<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable<TableSchema> tables, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection IEnumerable < TableSchema > tables GetSchemaOptions options Returns Type Description IReadOnlyCollection < PrimaryKeyInfo > | Improve this Doc View Source GetProcedureParameters(DataConnection, IEnumerable<ProcedureInfo>, GetSchemaOptions) Declaration protected virtual List<ProcedureParameterInfo>? GetProcedureParameters(DataConnection dataConnection, IEnumerable<ProcedureInfo> procedures, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection IEnumerable < ProcedureInfo > procedures GetSchemaOptions options Returns Type Description System.Nullable < List < ProcedureParameterInfo >> | Improve this Doc View Source GetProcedureResultColumns(DataTable, GetSchemaOptions) Declaration protected virtual List<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options) Parameters Type Name Description DataTable resultTable GetSchemaOptions options Returns Type Description List < ColumnSchema > | Improve this Doc View Source GetProcedures(DataConnection, GetSchemaOptions) Declaration protected virtual List<ProcedureInfo>? GetProcedures(DataConnection dataConnection, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options Returns Type Description System.Nullable < List < ProcedureInfo >> | Improve this Doc View Source GetProcedureSchema(DataConnection, String, CommandType, DataParameter[], GetSchemaOptions) Declaration protected virtual DataTable? GetProcedureSchema(DataConnection dataConnection, string commandText, CommandType commandType, DataParameter[] parameters, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection System.String commandText CommandType commandType DataParameter [] parameters GetSchemaOptions options Returns Type Description System.Nullable < DataTable > | Improve this Doc View Source GetProviderSpecificProcedures(DataConnection) Declaration protected virtual List<ProcedureSchema>? GetProviderSpecificProcedures(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection Returns Type Description System.Nullable < List < ProcedureSchema >> | Improve this Doc View Source GetProviderSpecificTables(DataConnection, GetSchemaOptions) Declaration protected virtual List<TableSchema>? GetProviderSpecificTables(DataConnection dataConnection, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options Returns Type Description System.Nullable < List < TableSchema >> | Improve this Doc View Source GetProviderSpecificType(Nullable<String>) Declaration protected virtual string? GetProviderSpecificType(string? dataType) Parameters Type Name Description System.Nullable < System.String > dataType Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetProviderSpecificTypeNamespace() Declaration protected abstract string? GetProviderSpecificTypeNamespace() Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetSchema(DataConnection, GetSchemaOptions) Declaration public virtual DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options = null) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options Returns Type Description DatabaseSchema | Improve this Doc View Source GetSystemType(Nullable<String>, Nullable<String>, DataTypeInfo, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, GetSchemaOptions) Declaration protected virtual Type? GetSystemType(string? dataType, string? columnType, DataTypeInfo dataTypeInfo, long? length, int? precision, int? scale, GetSchemaOptions options) Parameters Type Name Description System.Nullable < System.String > dataType System.Nullable < System.String > columnType DataTypeInfo dataTypeInfo System.Nullable < System.Int64 > length System.Nullable < System.Int32 > precision System.Nullable < System.Int32 > scale GetSchemaOptions options Returns Type Description System.Nullable < Type > | Improve this Doc View Source GetTables(DataConnection, GetSchemaOptions) Declaration protected abstract List<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options Returns Type Description List < TableInfo > | Improve this Doc View Source InitProvider(DataConnection) Declaration protected virtual void InitProvider(DataConnection dataConnection) Parameters Type Name Description DataConnection dataConnection | Improve this Doc View Source LoadProcedureTableSchema(DataConnection, GetSchemaOptions, ProcedureSchema, String, List<TableSchema>) Declaration protected virtual void LoadProcedureTableSchema(DataConnection dataConnection, GetSchemaOptions options, ProcedureSchema procedure, string commandText, List<TableSchema> tables) Parameters Type Name Description DataConnection dataConnection GetSchemaOptions options ProcedureSchema procedure System.String commandText List < TableSchema > tables | Improve this Doc View Source ProcessSchema(DatabaseSchema, GetSchemaOptions) Declaration protected virtual DatabaseSchema ProcessSchema(DatabaseSchema databaseSchema, GetSchemaOptions schemaOptions) Parameters Type Name Description DatabaseSchema databaseSchema GetSchemaOptions schemaOptions Returns Type Description DatabaseSchema | Improve this Doc View Source ToTypeName(Nullable<Type>, Boolean) Declaration public static string ToTypeName(Type? type, bool isNullable) Parameters Type Name Description System.Nullable < Type > type System.Boolean isNullable Returns Type Description System.String | Improve this Doc View Source ToValidName(String) Declaration public static string ToValidName(string name) Parameters Type Name Description System.String name Returns Type Description System.String Implements ISchemaProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.TableInfo.html": {
    "href": "api/LinqToDB.SchemaProvider.TableInfo.html",
    "title": "Class TableInfo | Linq To DB (aka linq2db)",
    "keywords": "Class TableInfo Inheritance System.Object TableInfo Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class TableInfo : object Fields | Improve this Doc View Source CatalogName Declaration public string? CatalogName Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source Description Declaration public string? Description Field Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsDefaultSchema Declaration public bool IsDefaultSchema Field Value Type Description System.Boolean | Improve this Doc View Source IsProviderSpecific Declaration public bool IsProviderSpecific Field Value Type Description System.Boolean | Improve this Doc View Source IsView Declaration public bool IsView Field Value Type Description System.Boolean | Improve this Doc View Source SchemaName Declaration public string SchemaName Field Value Type Description System.String | Improve this Doc View Source TableID Declaration public string TableID Field Value Type Description System.String | Improve this Doc View Source TableName Declaration public string TableName Field Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SchemaProvider.TableSchema.html": {
    "href": "api/LinqToDB.SchemaProvider.TableSchema.html",
    "title": "Class TableSchema | Linq To DB (aka linq2db)",
    "keywords": "Class TableSchema Describes table-like objects such as tables, views, procedure or function results. Inheritance System.Object TableSchema ViewWithParametersTableSchema Namespace : LinqToDB.SchemaProvider Assembly : linq2db.dll Syntax public class TableSchema : object Properties | Improve this Doc View Source CatalogName Gets table database (catalog) name. Declaration public string? CatalogName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Columns Gets list of table columns. Declaration public List<ColumnSchema> Columns { get; set; } Property Value Type Description List < ColumnSchema > | Improve this Doc View Source Description Gets table description. Declaration public string? Description { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ForeignKeys Gets list of table foreign keys. Declaration public List<ForeignKeySchema> ForeignKeys { get; set; } Property Value Type Description List < ForeignKeySchema > | Improve this Doc View Source ID Gets unique table identifier, based on name, schema and database names. Declaration public string? ID { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsDefaultSchema Gets flag indicating that table defined with default owner/schema or not. Declaration public bool IsDefaultSchema { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsProcedureResult Gets flag indicating that table describes procedure or function result set. Declaration public bool IsProcedureResult { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsProviderSpecific Gets flag indicating that it is not a user-defined table. Declaration public bool IsProviderSpecific { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsView Gets flag indicating that table describes view. Declaration public bool IsView { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SchemaName Gets table owner/schema name. Declaration public string? SchemaName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TableName Gets database table name. Declaration public string? TableName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TypeName Gets C# friendly table name. Declaration public string TypeName { get; set; } Property Value Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.Async.html": {
    "href": "api/LinqToDB.ServiceModel.Async.html",
    "title": "Namespace LinqToDB.ServiceModel.Async | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.ServiceModel.Async Interfaces ILinqService ILinqSoapService"
  },
  "api/LinqToDB.ServiceModel.Async.ILinqService.html": {
    "href": "api/LinqToDB.ServiceModel.Async.ILinqService.html",
    "title": "Interface ILinqService | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqService Namespace : LinqToDB.ServiceModel.Async Assembly : linq2db.dll Syntax public interface ILinqService Methods | Improve this Doc View Source BeginExecuteBatch(Nullable<String>, String, AsyncCallback, Nullable<Object>) Declaration IAsyncResult BeginExecuteBatch(string? configuration, string queryData, AsyncCallback callback, object? asyncState) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData AsyncCallback callback System.Nullable < System.Object > asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteNonQuery(Nullable<String>, String, AsyncCallback, Nullable<Object>) Declaration IAsyncResult BeginExecuteNonQuery(string? configuration, string queryData, AsyncCallback callback, object? asyncState) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData AsyncCallback callback System.Nullable < System.Object > asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteReader(Nullable<String>, String, AsyncCallback, Nullable<Object>) Declaration IAsyncResult BeginExecuteReader(string? configuration, string queryData, AsyncCallback callback, object? asyncState) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData AsyncCallback callback System.Nullable < System.Object > asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteScalar(Nullable<String>, String, AsyncCallback, Nullable<Object>) Declaration IAsyncResult BeginExecuteScalar(string? configuration, string queryData, AsyncCallback callback, object? asyncState) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData AsyncCallback callback System.Nullable < System.Object > asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginGetInfo(Nullable<String>, AsyncCallback, Nullable<Object>) Declaration IAsyncResult BeginGetInfo(string? configuration, AsyncCallback callback, object? asyncState) Parameters Type Name Description System.Nullable < System.String > configuration AsyncCallback callback System.Nullable < System.Object > asyncState Returns Type Description IAsyncResult | Improve this Doc View Source EndExecuteBatch(IAsyncResult) Declaration int EndExecuteBatch(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description System.Int32 | Improve this Doc View Source EndExecuteNonQuery(IAsyncResult) Declaration int EndExecuteNonQuery(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description System.Int32 | Improve this Doc View Source EndExecuteReader(IAsyncResult) Declaration string EndExecuteReader(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description System.String | Improve this Doc View Source EndExecuteScalar(IAsyncResult) Declaration object? EndExecuteScalar(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source EndGetInfo(IAsyncResult) Declaration LinqServiceInfo EndGetInfo(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description LinqServiceInfo Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.Async.ILinqSoapService.html": {
    "href": "api/LinqToDB.ServiceModel.Async.ILinqSoapService.html",
    "title": "Interface ILinqSoapService | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqSoapService Namespace : LinqToDB.ServiceModel.Async Assembly : linq2db.dll Syntax public interface ILinqSoapService Methods | Improve this Doc View Source BeginExecuteBatch(Nullable<String>, String, AsyncCallback, Nullable<Object>) Declaration IAsyncResult BeginExecuteBatch(string? configuration, string queryData, AsyncCallback callback, object? asyncState) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData AsyncCallback callback System.Nullable < System.Object > asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteNonQuery(Nullable<String>, String, AsyncCallback, Nullable<Object>) Declaration IAsyncResult BeginExecuteNonQuery(string? configuration, string queryData, AsyncCallback callback, object? asyncState) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData AsyncCallback callback System.Nullable < System.Object > asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteReader(Nullable<String>, String, AsyncCallback, Nullable<Object>) Declaration IAsyncResult BeginExecuteReader(string? configuration, string queryData, AsyncCallback callback, object? asyncState) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData AsyncCallback callback System.Nullable < System.Object > asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginExecuteScalar(Nullable<String>, String, AsyncCallback, Nullable<Object>) Declaration IAsyncResult BeginExecuteScalar(string? configuration, string queryData, AsyncCallback callback, object? asyncState) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData AsyncCallback callback System.Nullable < System.Object > asyncState Returns Type Description IAsyncResult | Improve this Doc View Source BeginGetInfo(Nullable<String>, AsyncCallback, Nullable<Object>) Declaration IAsyncResult BeginGetInfo(string? configuration, AsyncCallback callback, object? asyncState) Parameters Type Name Description System.Nullable < System.String > configuration AsyncCallback callback System.Nullable < System.Object > asyncState Returns Type Description IAsyncResult | Improve this Doc View Source EndExecuteBatch(IAsyncResult) Declaration int EndExecuteBatch(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description System.Int32 | Improve this Doc View Source EndExecuteNonQuery(IAsyncResult) Declaration int EndExecuteNonQuery(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description System.Int32 | Improve this Doc View Source EndExecuteReader(IAsyncResult) Declaration string EndExecuteReader(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description System.String | Improve this Doc View Source EndExecuteScalar(IAsyncResult) Declaration object? EndExecuteScalar(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source EndGetInfo(IAsyncResult) Declaration LinqServiceInfo EndGetInfo(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description LinqServiceInfo Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.DataService-1.html": {
    "href": "api/LinqToDB.ServiceModel.DataService-1.html",
    "title": "Class DataService<T> | Linq To DB (aka linq2db)",
    "keywords": "Class DataService<T> Inheritance System.Object DataService<T> Implements IServiceProvider Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class DataService<T> : Data.Services.DataService<T> where T : IDataContext Type Parameters Name Description T Constructors | Improve this Doc View Source DataService() Declaration public DataService() | Improve this Doc View Source DataService(MappingSchema) Declaration public DataService(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Methods | Improve this Doc View Source GetService(Type) Declaration public object? GetService(Type serviceType) Parameters Type Name Description Type serviceType Returns Type Description System.Nullable < System.Object > Implements IServiceProvider Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.html": {
    "href": "api/LinqToDB.ServiceModel.html",
    "title": "Namespace LinqToDB.ServiceModel | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.ServiceModel Classes DataService<T> LinqService LinqServiceInfo LinqServiceQuery LinqServiceResult RemoteDataContextBase ServiceModelDataContext SoapDataContext Interfaces ILinqClient ILinqService ILinqSoapClient"
  },
  "api/LinqToDB.ServiceModel.ILinqClient.html": {
    "href": "api/LinqToDB.ServiceModel.ILinqClient.html",
    "title": "Interface ILinqClient | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqClient Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public interface ILinqClient Methods | Improve this Doc View Source ExecuteBatch(Nullable<String>, String) Declaration int ExecuteBatch(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteBatchAsync(Nullable<String>, String) Declaration Task<int> ExecuteBatchAsync(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description Task < System.Int32 > | Improve this Doc View Source ExecuteNonQuery(Nullable<String>, String) Declaration int ExecuteNonQuery(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteNonQueryAsync(Nullable<String>, String) Declaration Task<int> ExecuteNonQueryAsync(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description Task < System.Int32 > | Improve this Doc View Source ExecuteReader(Nullable<String>, String) Declaration string ExecuteReader(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.String | Improve this Doc View Source ExecuteReaderAsync(Nullable<String>, String) Declaration Task<string> ExecuteReaderAsync(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description Task < System.String > | Improve this Doc View Source ExecuteScalar(Nullable<String>, String) Declaration object? ExecuteScalar(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source ExecuteScalarAsync(Nullable<String>, String) Declaration Task<object?> ExecuteScalarAsync(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description Task < System.Nullable < System.Object >> | Improve this Doc View Source GetInfo(Nullable<String>) Declaration LinqServiceInfo GetInfo(string? configuration) Parameters Type Name Description System.Nullable < System.String > configuration Returns Type Description LinqServiceInfo | Improve this Doc View Source GetInfoAsync(Nullable<String>) Declaration Task<LinqServiceInfo> GetInfoAsync(string? configuration) Parameters Type Name Description System.Nullable < System.String > configuration Returns Type Description Task < LinqServiceInfo > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.ILinqService.html": {
    "href": "api/LinqToDB.ServiceModel.ILinqService.html",
    "title": "Interface ILinqService | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqService Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public interface ILinqService Methods | Improve this Doc View Source ExecuteBatch(Nullable<String>, String) Declaration int ExecuteBatch(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteNonQuery(Nullable<String>, String) Declaration int ExecuteNonQuery(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteReader(Nullable<String>, String) Declaration string ExecuteReader(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.String | Improve this Doc View Source ExecuteScalar(Nullable<String>, String) Declaration object? ExecuteScalar(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source GetInfo(Nullable<String>) Declaration LinqServiceInfo GetInfo(string? configuration) Parameters Type Name Description System.Nullable < System.String > configuration Returns Type Description LinqServiceInfo Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.ILinqSoapClient.html": {
    "href": "api/LinqToDB.ServiceModel.ILinqSoapClient.html",
    "title": "Interface ILinqSoapClient | Linq To DB (aka linq2db)",
    "keywords": "Interface ILinqSoapClient Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public interface ILinqSoapClient Methods | Improve this Doc View Source ExecuteBatch(Nullable<String>, String) Declaration int ExecuteBatch(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteBatchAsync(Nullable<String>, String) Declaration Task<int> ExecuteBatchAsync(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description Task < System.Int32 > | Improve this Doc View Source ExecuteNonQuery(Nullable<String>, String) Declaration int ExecuteNonQuery(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteNonQueryAsync(Nullable<String>, String) Declaration Task<int> ExecuteNonQueryAsync(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description Task < System.Int32 > | Improve this Doc View Source ExecuteReader(Nullable<String>, String) Declaration string ExecuteReader(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.String | Improve this Doc View Source ExecuteReaderAsync(Nullable<String>, String) Declaration Task<string> ExecuteReaderAsync(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description Task < System.String > | Improve this Doc View Source ExecuteScalar(Nullable<String>, String) Declaration object? ExecuteScalar(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source ExecuteScalarAsync(Nullable<String>, String) Declaration Task<object?> ExecuteScalarAsync(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description Task < System.Nullable < System.Object >> | Improve this Doc View Source GetInfo(Nullable<String>) Declaration LinqServiceInfo GetInfo(string? configuration) Parameters Type Name Description System.Nullable < System.String > configuration Returns Type Description LinqServiceInfo | Improve this Doc View Source GetInfoAsync(Nullable<String>) Declaration Task<LinqServiceInfo> GetInfoAsync(string? configuration) Parameters Type Name Description System.Nullable < System.String > configuration Returns Type Description Task < LinqServiceInfo > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.LinqService.html": {
    "href": "api/LinqToDB.ServiceModel.LinqService.html",
    "title": "Class LinqService | Linq To DB (aka linq2db)",
    "keywords": "Class LinqService Inheritance System.Object LinqService Implements ILinqService Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class LinqService : object, ILinqService Constructors | Improve this Doc View Source LinqService() Declaration public LinqService() | Improve this Doc View Source LinqService(MappingSchema) Declaration public LinqService(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Fields | Improve this Doc View Source TypeResolver Declaration public static Func<string, Type?> TypeResolver Field Value Type Description Func < System.String , System.Nullable < Type >> Properties | Improve this Doc View Source AllowUpdates Declaration public bool AllowUpdates { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; set; } Property Value Type Description MappingSchema Methods | Improve this Doc View Source CreateDataContext(Nullable<String>) Declaration public virtual DataConnection CreateDataContext(string? configuration) Parameters Type Name Description System.Nullable < System.String > configuration Returns Type Description DataConnection | Improve this Doc View Source ExecuteBatch(Nullable<String>, String) Declaration public int ExecuteBatch(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteNonQuery(Nullable<String>, String) Declaration public int ExecuteNonQuery(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Int32 | Improve this Doc View Source ExecuteReader(Nullable<String>, String) Declaration public string ExecuteReader(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.String | Improve this Doc View Source ExecuteScalar(Nullable<String>, String) Declaration public object? ExecuteScalar(string? configuration, string queryData) Parameters Type Name Description System.Nullable < System.String > configuration System.String queryData Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source GetInfo(Nullable<String>) Declaration public virtual LinqServiceInfo GetInfo(string? configuration) Parameters Type Name Description System.Nullable < System.String > configuration Returns Type Description LinqServiceInfo | Improve this Doc View Source HandleException(Exception) Declaration protected virtual void HandleException(Exception exception) Parameters Type Name Description Exception exception | Improve this Doc View Source ValidateQuery(LinqServiceQuery) Declaration protected virtual void ValidateQuery(LinqServiceQuery query) Parameters Type Name Description LinqServiceQuery query Implements ILinqService Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.LinqServiceInfo.html": {
    "href": "api/LinqToDB.ServiceModel.LinqServiceInfo.html",
    "title": "Class LinqServiceInfo | Linq To DB (aka linq2db)",
    "keywords": "Class LinqServiceInfo Inheritance System.Object LinqServiceInfo Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class LinqServiceInfo : object Properties | Improve this Doc View Source MappingSchemaType Declaration public string MappingSchemaType { get; set; } Property Value Type Description System.String | Improve this Doc View Source SqlBuilderType Declaration public string SqlBuilderType { get; set; } Property Value Type Description System.String | Improve this Doc View Source SqlOptimizerType Declaration public string SqlOptimizerType { get; set; } Property Value Type Description System.String | Improve this Doc View Source SqlProviderFlags Declaration public SqlProviderFlags SqlProviderFlags { get; set; } Property Value Type Description SqlProviderFlags | Improve this Doc View Source SupportedTableOptions Declaration public TableOptions SupportedTableOptions { get; set; } Property Value Type Description TableOptions Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.LinqServiceQuery.html": {
    "href": "api/LinqToDB.ServiceModel.LinqServiceQuery.html",
    "title": "Class LinqServiceQuery | Linq To DB (aka linq2db)",
    "keywords": "Class LinqServiceQuery Inheritance System.Object LinqServiceQuery Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class LinqServiceQuery : object Properties | Improve this Doc View Source QueryHints Declaration public IReadOnlyCollection<string>? QueryHints { get; set; } Property Value Type Description System.Nullable < IReadOnlyCollection < System.String >> | Improve this Doc View Source Statement Declaration public SqlStatement Statement { get; set; } Property Value Type Description SqlStatement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.LinqServiceResult.html": {
    "href": "api/LinqToDB.ServiceModel.LinqServiceResult.html",
    "title": "Class LinqServiceResult | Linq To DB (aka linq2db)",
    "keywords": "Class LinqServiceResult Inheritance System.Object LinqServiceResult Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class LinqServiceResult : object Properties | Improve this Doc View Source Data Declaration public List<string[]> Data { get; set; } Property Value Type Description List < System.String []> | Improve this Doc View Source FieldCount Declaration public int FieldCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source FieldNames Declaration public string[] FieldNames { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source FieldTypes Declaration public Type[] FieldTypes { get; set; } Property Value Type Description Type [] | Improve this Doc View Source QueryID Declaration public Guid QueryID { get; set; } Property Value Type Description Guid | Improve this Doc View Source RowCount Declaration public int RowCount { get; set; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.RemoteDataContextBase.html": {
    "href": "api/LinqToDB.ServiceModel.RemoteDataContextBase.html",
    "title": "Class RemoteDataContextBase | Linq To DB (aka linq2db)",
    "keywords": "Class RemoteDataContextBase Inheritance System.Object RemoteDataContextBase ServiceModelDataContext SoapDataContext Implements IDataContext IEntityServices IDisposable IAsyncDisposable Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public abstract class RemoteDataContextBase : object, IDataContext, IEntityServices, IAsyncDisposable Properties | Improve this Doc View Source CloseAfterUse Declaration public bool CloseAfterUse { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Configuration Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ContextIDPrefix Declaration protected abstract string ContextIDPrefix { get; } Property Value Type Description System.String | Improve this Doc View Source Disposed Declaration protected bool Disposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source GetSqlOptimizer Declaration public Func<ISqlOptimizer> GetSqlOptimizer { get; } Property Value Type Description Func < ISqlOptimizer > | Improve this Doc View Source InlineParameters Declaration public bool InlineParameters { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; set; } Property Value Type Description MappingSchema | Improve this Doc View Source NextQueryHints Declaration public List<string> NextQueryHints { get; } Property Value Type Description List < System.String > | Improve this Doc View Source OnEntityCreated Occurs when a new entity is created during query materialization. Not triggered for explicitly constructed objects. In code below event could be triggered only for first query: // r created by linq2db from r in db.table select r; // Entity constructor specified explicitly by user (projection) from r in db.table select new Entity() { field = r.field }; . Declaration public Action<EntityCreatedEventArgs>? OnEntityCreated { get; set; } Property Value Type Description System.Nullable < Action < EntityCreatedEventArgs >> | Improve this Doc View Source QueryHints Declaration public List<string> QueryHints { get; } Property Value Type Description List < System.String > | Improve this Doc View Source SqlOptimizerType Declaration public virtual Type SqlOptimizerType { get; set; } Property Value Type Description Type | Improve this Doc View Source SqlProviderType Declaration public virtual Type SqlProviderType { get; set; } Property Value Type Description Type Methods | Improve this Doc View Source BeginBatch() Declaration public void BeginBatch() | Improve this Doc View Source Clone() Declaration protected abstract IDataContext Clone() Returns Type Description IDataContext | Improve this Doc View Source CommitBatch() Declaration public void CommitBatch() | Improve this Doc View Source CommitBatchAsync() Declaration public async Task CommitBatchAsync() Returns Type Description Task | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source DisposeAsync() Declaration public Task DisposeAsync() Returns Type Description Task | Improve this Doc View Source GetClient() Declaration protected abstract ILinqClient GetClient() Returns Type Description ILinqClient | Improve this Doc View Source ThrowOnDisposed() Declaration protected void ThrowOnDisposed() Events | Improve this Doc View Source OnClosing Declaration public event EventHandler? OnClosing Event Type Type Description System.Nullable < EventHandler > Explicit Interface Implementations | Improve this Doc View Source IDataContext.Clone(Boolean) Declaration IDataContext IDataContext.Clone(bool forNestedQuery) Parameters Type Name Description System.Boolean forNestedQuery Returns Type Description IDataContext | Improve this Doc View Source IDataContext.Close() Declaration void IDataContext.Close() | Improve this Doc View Source IDataContext.CloseAsync() Declaration Task IDataContext.CloseAsync() Returns Type Description Task | Improve this Doc View Source IDataContext.ContextID Declaration string IDataContext.ContextID { get; } Returns Type Description System.String | Improve this Doc View Source IDataContext.CreateSqlProvider Declaration Func<ISqlBuilder> IDataContext.CreateSqlProvider { get; } Returns Type Description Func < ISqlBuilder > | Improve this Doc View Source IDataContext.DataReaderType Declaration Type IDataContext.DataReaderType { get; } Returns Type Description Type | Improve this Doc View Source IDataContext.GetQueryRunner(Query, Int32, Expression, Nullable<Object>[], Nullable<Object>[]) Declaration IQueryRunner IDataContext.GetQueryRunner(Query query, int queryNumber, Expression expression, object? [] parameters, object? [] preambles) Parameters Type Name Description Query query System.Int32 queryNumber Expression expression System.Nullable < System.Object >[] parameters System.Nullable < System.Object >[] preambles Returns Type Description IQueryRunner | Improve this Doc View Source IDataContext.GetReaderExpression(IDataReader, Int32, Expression, Type) Declaration Expression IDataContext.GetReaderExpression(IDataReader reader, int idx, Expression readerExpression, Type toType) Parameters Type Name Description IDataReader reader System.Int32 idx Expression readerExpression Type toType Returns Type Description Expression | Improve this Doc View Source IDataContext.IsDBNullAllowed(IDataReader, Int32) Declaration bool? IDataContext.IsDBNullAllowed(IDataReader reader, int idx) Parameters Type Name Description IDataReader reader System.Int32 idx Returns Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IDataContext.SqlProviderFlags Declaration SqlProviderFlags IDataContext.SqlProviderFlags { get; } Returns Type Description SqlProviderFlags | Improve this Doc View Source IDataContext.SupportedTableOptions Declaration TableOptions IDataContext.SupportedTableOptions { get; } Returns Type Description TableOptions Implements IDataContext IEntityServices IDisposable IAsyncDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.ServiceModelDataContext.html": {
    "href": "api/LinqToDB.ServiceModel.ServiceModelDataContext.html",
    "title": "Class ServiceModelDataContext | Linq To DB (aka linq2db)",
    "keywords": "Class ServiceModelDataContext Inheritance System.Object RemoteDataContextBase ServiceModelDataContext Implements IDataContext IEntityServices IDisposable IAsyncDisposable Inherited Members RemoteDataContextBase.Configuration RemoteDataContextBase.IDataContext.ContextID RemoteDataContextBase.MappingSchema RemoteDataContextBase.InlineParameters RemoteDataContextBase.CloseAfterUse RemoteDataContextBase.QueryHints RemoteDataContextBase.NextQueryHints RemoteDataContextBase.SqlProviderType RemoteDataContextBase.SqlOptimizerType RemoteDataContextBase.IDataContext.SqlProviderFlags RemoteDataContextBase.IDataContext.SupportedTableOptions RemoteDataContextBase.IDataContext.DataReaderType RemoteDataContextBase.IDataContext.GetReaderExpression(IDataReader, Int32, Expression, Type) RemoteDataContextBase.IDataContext.IsDBNullAllowed(IDataReader, Int32) RemoteDataContextBase.IDataContext.CreateSqlProvider RemoteDataContextBase.GetSqlOptimizer RemoteDataContextBase.BeginBatch() RemoteDataContextBase.CommitBatch() RemoteDataContextBase.CommitBatchAsync() RemoteDataContextBase.IDataContext.Clone(Boolean) RemoteDataContextBase.OnClosing RemoteDataContextBase.OnEntityCreated RemoteDataContextBase.Disposed RemoteDataContextBase.ThrowOnDisposed() RemoteDataContextBase.IDataContext.Close() RemoteDataContextBase.IDataContext.CloseAsync() RemoteDataContextBase.Dispose() RemoteDataContextBase.DisposeAsync() RemoteDataContextBase.IDataContext.GetQueryRunner(Query, Int32, Expression, Nullable<Object>[], Nullable<Object>[]) Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class ServiceModelDataContext : RemoteDataContextBase, IDataContext, IEntityServices, IAsyncDisposable Constructors | Improve this Doc View Source ServiceModelDataContext(Binding, EndpointAddress) Declaration public ServiceModelDataContext(Binding binding, EndpointAddress endpointAddress) Parameters Type Name Description Binding binding EndpointAddress endpointAddress | Improve this Doc View Source ServiceModelDataContext(String) Declaration public ServiceModelDataContext(string endpointConfigurationName) Parameters Type Name Description System.String endpointConfigurationName | Improve this Doc View Source ServiceModelDataContext(String, EndpointAddress) Declaration public ServiceModelDataContext(string endpointConfigurationName, EndpointAddress endpointAddress) Parameters Type Name Description System.String endpointConfigurationName EndpointAddress endpointAddress | Improve this Doc View Source ServiceModelDataContext(String, String) Declaration public ServiceModelDataContext(string endpointConfigurationName, string remoteAddress) Parameters Type Name Description System.String endpointConfigurationName System.String remoteAddress Properties | Improve this Doc View Source Binding Declaration public Binding? Binding { get; } Property Value Type Description System.Nullable < Binding > | Improve this Doc View Source ContextIDPrefix Declaration protected override string ContextIDPrefix { get; } Property Value Type Description System.String Overrides RemoteDataContextBase.ContextIDPrefix Methods | Improve this Doc View Source Clone() Declaration protected override IDataContext Clone() Returns Type Description IDataContext Overrides RemoteDataContextBase.Clone() | Improve this Doc View Source GetClient() Declaration protected override ILinqClient GetClient() Returns Type Description ILinqClient Overrides RemoteDataContextBase.GetClient() Implements IDataContext IEntityServices IDisposable IAsyncDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.ServiceModel.SoapDataContext.html": {
    "href": "api/LinqToDB.ServiceModel.SoapDataContext.html",
    "title": "Class SoapDataContext | Linq To DB (aka linq2db)",
    "keywords": "Class SoapDataContext Inheritance System.Object RemoteDataContextBase SoapDataContext Implements IDataContext IEntityServices IDisposable IAsyncDisposable Inherited Members RemoteDataContextBase.Configuration RemoteDataContextBase.IDataContext.ContextID RemoteDataContextBase.MappingSchema RemoteDataContextBase.InlineParameters RemoteDataContextBase.CloseAfterUse RemoteDataContextBase.QueryHints RemoteDataContextBase.NextQueryHints RemoteDataContextBase.SqlProviderType RemoteDataContextBase.SqlOptimizerType RemoteDataContextBase.IDataContext.SqlProviderFlags RemoteDataContextBase.IDataContext.SupportedTableOptions RemoteDataContextBase.IDataContext.DataReaderType RemoteDataContextBase.IDataContext.GetReaderExpression(IDataReader, Int32, Expression, Type) RemoteDataContextBase.IDataContext.IsDBNullAllowed(IDataReader, Int32) RemoteDataContextBase.IDataContext.CreateSqlProvider RemoteDataContextBase.GetSqlOptimizer RemoteDataContextBase.BeginBatch() RemoteDataContextBase.CommitBatch() RemoteDataContextBase.CommitBatchAsync() RemoteDataContextBase.IDataContext.Clone(Boolean) RemoteDataContextBase.OnClosing RemoteDataContextBase.OnEntityCreated RemoteDataContextBase.Disposed RemoteDataContextBase.ThrowOnDisposed() RemoteDataContextBase.IDataContext.Close() RemoteDataContextBase.IDataContext.CloseAsync() RemoteDataContextBase.Dispose() RemoteDataContextBase.DisposeAsync() RemoteDataContextBase.IDataContext.GetQueryRunner(Query, Int32, Expression, Nullable<Object>[], Nullable<Object>[]) Namespace : LinqToDB.ServiceModel Assembly : linq2db.dll Syntax public class SoapDataContext : RemoteDataContextBase, IDataContext, IEntityServices, IAsyncDisposable Constructors | Improve this Doc View Source SoapDataContext(Binding, EndpointAddress) Declaration public SoapDataContext(Binding binding, EndpointAddress endpointAddress) Parameters Type Name Description Binding binding EndpointAddress endpointAddress | Improve this Doc View Source SoapDataContext(String) Declaration public SoapDataContext(string endpointConfigurationName) Parameters Type Name Description System.String endpointConfigurationName | Improve this Doc View Source SoapDataContext(String, EndpointAddress) Declaration public SoapDataContext(string endpointConfigurationName, EndpointAddress endpointAddress) Parameters Type Name Description System.String endpointConfigurationName EndpointAddress endpointAddress | Improve this Doc View Source SoapDataContext(String, String) Declaration public SoapDataContext(string endpointConfigurationName, string remoteAddress) Parameters Type Name Description System.String endpointConfigurationName System.String remoteAddress Properties | Improve this Doc View Source Binding Declaration public Binding? Binding { get; } Property Value Type Description System.Nullable < Binding > | Improve this Doc View Source ContextIDPrefix Declaration protected override string ContextIDPrefix { get; } Property Value Type Description System.String Overrides RemoteDataContextBase.ContextIDPrefix Methods | Improve this Doc View Source Clone() Declaration protected override IDataContext Clone() Returns Type Description IDataContext Overrides RemoteDataContextBase.Clone() | Improve this Doc View Source GetClient() Declaration protected override ILinqClient GetClient() Returns Type Description ILinqClient Overrides RemoteDataContextBase.GetClient() Implements IDataContext IEntityServices IDisposable IAsyncDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.AggregateFunctionNotOrderedImpl-2.html": {
    "href": "api/LinqToDB.Sql.AggregateFunctionNotOrderedImpl-2.html",
    "title": "Class Sql.AggregateFunctionNotOrderedImpl<T, TR> | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.AggregateFunctionNotOrderedImpl<T, TR> Inheritance System.Object Sql.AggregateFunctionNotOrderedImpl<T, TR> Implements Sql.IAggregateFunctionNotOrdered <T, TR> Sql.IAggregateFunctionOrdered <T, TR> Sql.IAggregateFunction <T, TR> Sql.IQueryableContainer Namespace : LinqToDB Assembly : linq2db.dll Syntax public class AggregateFunctionNotOrderedImpl<T, TR> : object, Sql.IAggregateFunctionNotOrdered<T, TR>, Sql.IAggregateFunctionOrdered<T, TR>, Sql.IAggregateFunction<T, TR>, Sql.IQueryableContainer Type Parameters Name Description T TR Constructors | Improve this Doc View Source AggregateFunctionNotOrderedImpl(IQueryable<TR>) Declaration public AggregateFunctionNotOrderedImpl(IQueryable<TR> query) Parameters Type Name Description IQueryable <TR> query Properties | Improve this Doc View Source Query Declaration public IQueryable Query { get; } Property Value Type Description IQueryable Implements Sql.IAggregateFunctionNotOrdered<T, TR> Sql.IAggregateFunctionOrdered<T, TR> Sql.IAggregateFunction<T, TR> Sql.IQueryableContainer Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.AggregateModifier.html": {
    "href": "api/LinqToDB.Sql.AggregateModifier.html",
    "title": "Enum Sql.AggregateModifier | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.AggregateModifier Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum AggregateModifier : int Fields Name Description All Distinct None Extension Methods Map.DeepCopy<Sql.AggregateModifier>() Sql.IsDistinctFrom<Sql.AggregateModifier>(Sql.AggregateModifier) Sql.IsDistinctFrom<Sql.AggregateModifier>(Nullable<Sql.AggregateModifier>) Sql.IsNotDistinctFrom<Sql.AggregateModifier>(Sql.AggregateModifier) Sql.IsNotDistinctFrom<Sql.AggregateModifier>(Nullable<Sql.AggregateModifier>) SqlExtensions.In<Sql.AggregateModifier>(IEnumerable<Sql.AggregateModifier>) SqlExtensions.In<Sql.AggregateModifier>(IQueryable<Sql.AggregateModifier>) SqlExtensions.In<Sql.AggregateModifier>(Sql.AggregateModifier[]) SqlExtensions.In<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier) SqlExtensions.In<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier, Sql.AggregateModifier) SqlExtensions.NotIn<Sql.AggregateModifier>(IEnumerable<Sql.AggregateModifier>) SqlExtensions.NotIn<Sql.AggregateModifier>(IQueryable<Sql.AggregateModifier>) SqlExtensions.NotIn<Sql.AggregateModifier>(Sql.AggregateModifier[]) SqlExtensions.NotIn<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier) SqlExtensions.NotIn<Sql.AggregateModifier>(Sql.AggregateModifier, Sql.AggregateModifier, Sql.AggregateModifier)"
  },
  "api/LinqToDB.Sql.ConvertTo-1.html": {
    "href": "api/LinqToDB.Sql.ConvertTo-1.html",
    "title": "Class Sql.ConvertTo<TTo> | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ConvertTo<TTo> Inheritance System.Object Sql.ConvertTo<TTo> Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class ConvertTo<TTo> : object Type Parameters Name Description TTo Methods | Improve this Doc View Source From<TFrom>(TFrom) Declaration public static TTo From<TFrom>(TFrom obj) Parameters Type Name Description TFrom obj Returns Type Description TTo Type Parameters Name Description TFrom"
  },
  "api/LinqToDB.Sql.DateParts.html": {
    "href": "api/LinqToDB.Sql.DateParts.html",
    "title": "Enum Sql.DateParts | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.DateParts Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum DateParts : int Fields Name Description Day DayOfYear Hour Millisecond Minute Month Quarter Second Week This date part behavior depends on used database and also depends on where if calculated - in C# code or in database. Eeach database could have own week numbering logic, see notes below. Current implementation uses following schemas per-provider: C# evaluation: CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(date.Value, CalendarWeekRule.FirstDay, DayOfWeek.Sunday) Databases: US numbering schema used by: MS Access, SQL CE, SQL Server, SAP/Sybase ASE, Informix databases; US 0-based numbering schema used by MySQL database; ISO numbering schema with incorrect numbering of first week used by: SAP HANA database; ISO numbering schema with proper numbering of first week used by: Firebird, PostgreSQL databases; Primitive (each 7 days counted as week) numbering schema: DB2, Oracle databases; SQLite numbering logic cannot be classified by human being. WeekDay Year Extension Methods Map.DeepCopy<Sql.DateParts>() Sql.IsDistinctFrom<Sql.DateParts>(Sql.DateParts) Sql.IsDistinctFrom<Sql.DateParts>(Nullable<Sql.DateParts>) Sql.IsNotDistinctFrom<Sql.DateParts>(Sql.DateParts) Sql.IsNotDistinctFrom<Sql.DateParts>(Nullable<Sql.DateParts>) SqlExtensions.In<Sql.DateParts>(IEnumerable<Sql.DateParts>) SqlExtensions.In<Sql.DateParts>(IQueryable<Sql.DateParts>) SqlExtensions.In<Sql.DateParts>(Sql.DateParts[]) SqlExtensions.In<Sql.DateParts>(Sql.DateParts, Sql.DateParts) SqlExtensions.In<Sql.DateParts>(Sql.DateParts, Sql.DateParts, Sql.DateParts) SqlExtensions.NotIn<Sql.DateParts>(IEnumerable<Sql.DateParts>) SqlExtensions.NotIn<Sql.DateParts>(IQueryable<Sql.DateParts>) SqlExtensions.NotIn<Sql.DateParts>(Sql.DateParts[]) SqlExtensions.NotIn<Sql.DateParts>(Sql.DateParts, Sql.DateParts) SqlExtensions.NotIn<Sql.DateParts>(Sql.DateParts, Sql.DateParts, Sql.DateParts)"
  },
  "api/LinqToDB.Sql.EnumAttribute.html": {
    "href": "api/LinqToDB.Sql.EnumAttribute.html",
    "title": "Class Sql.EnumAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.EnumAttribute Inheritance System.Object Sql.EnumAttribute Namespace : LinqToDB Assembly : linq2db.dll Syntax public class EnumAttribute : Attribute Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.ExpressionAttribute.html": {
    "href": "api/LinqToDB.Sql.ExpressionAttribute.html",
    "title": "Class Sql.ExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ExpressionAttribute An Attribute that allows custom Expressions to be defined for a Method used within a Linq Expression. Inheritance System.Object Sql.ExpressionAttribute Sql.ExtensionAttribute Sql.FunctionAttribute Sql.PropertyAttribute Namespace : LinqToDB Assembly : linq2db.dll Syntax public class ExpressionAttribute : Attribute Constructors | Improve this Doc View Source ExpressionAttribute(Nullable<String>) Creates an Expression that will be used in SQL, in place of the method call decorated by this attribute. Declaration public ExpressionAttribute(string? expression) Parameters Type Name Description System.Nullable < System.String > expression The SQL expression. Use {0},{1}... for parameters given to the method call. | Improve this Doc View Source ExpressionAttribute(String, Int32[]) Creates an Expression that will be used in SQL, in place of the method call decorated by this attribute. Declaration public ExpressionAttribute(string expression, params int[] argIndices) Parameters Type Name Description System.String expression The SQL expression. Use {0},{1}... for parameters given to the method call. System.Int32 [] argIndices Used for setting the order of the method arguments being passed into the function. | Improve this Doc View Source ExpressionAttribute(String, String) Creates an Expression that will be used in SQL, for the ProviderName specified, in place of the method call decorated by this attribute. Declaration public ExpressionAttribute(string configuration, string expression) Parameters Type Name Description System.String configuration The Database configuration for which this Expression will be used. System.String expression The SQL expression. Use {0},{1}... for parameters given to the method call. | Improve this Doc View Source ExpressionAttribute(String, String, Int32[]) Creates an Expression that will be used in SQL, for the ProviderName specified, in place of the method call decorated by this attribute. Declaration public ExpressionAttribute(string configuration, string expression, params int[] argIndices) Parameters Type Name Description System.String configuration The Database configuration for which this Expression will be used. System.String expression The SQL expression. Use {0},{1}... for parameters given to the method call. System.Int32 [] argIndices Used for setting the order of the method arguments being passed into the function. Fields | Improve this Doc View Source UnknownExpression Declaration public static readonly SqlExpression UnknownExpression Field Value Type Description SqlExpression Properties | Improve this Doc View Source ArgIndices The order of Arguments to be passed into the function from the method call. Declaration public int[] ArgIndices { get; set; } Property Value Type Description System.Int32 [] | Improve this Doc View Source CanBeNull If true , result can be null Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Configuration If null , this will be treated as the default evaluation for the expression. If set to a ProviderName , It will only be used for that provider configuration. Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ExpectExpression Used internally by Sql.ExtensionAttribute . Declaration public bool ExpectExpression { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Expression The expression to be used in building the SQL. Declaration public string? Expression { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source InlineParameters If true inline all parameters passed into the expression. Declaration public bool InlineParameters { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsAggregate If true , this expression represents an aggregate result Examples would be SUM(),COUNT(). Declaration public bool IsAggregate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNullable Used to determine whether the return type should be treated as something that can be null If CanBeNull is not explicitly set. Default is Undefined , which will be treated as true Declaration public Sql.IsNullableType IsNullable { get; set; } Property Value Type Description Sql.IsNullableType | Improve this Doc View Source IsPredicate If true the expression is treated as a Predicate And when used in a Where clause will not have an added comparison to 'true' in the database. Declaration public bool IsPredicate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPure If true , it notifies SQL Optimizer that expression returns same result if the same values/parameters are used. It gives optimizer additional information how to simplify query. For example ORDER BY PureFunction(\"Str\") can be removed because PureFunction function uses constant value. For example Random function is NOT Pure function because it returns different result all time. But expression CurrentTimestamp is Pure in case of executed query. is also Pure function because it returns the same result with the same parameters. Declaration public bool IsPure { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsWindowFunction If true , this expression represents a Window Function Examples would be SUM() OVER(), COUNT() OVER(). Declaration public bool IsWindowFunction { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Precedence Determines the priority of the expression in evaluation. Refer to Precedence . Declaration public int Precedence { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PreferServerSide If true a greater effort will be made to execute the expression on the DB server instead of in .NET. Declaration public bool PreferServerSide { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ServerSideOnly If true The expression will only be evaluated on the database server. If it cannot, an exception will be thrown. Declaration public bool ServerSideOnly { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CalcCanBeNull(Sql.IsNullableType, IEnumerable<Boolean>) Declaration public static bool? CalcCanBeNull(Sql.IsNullableType isNullable, IEnumerable<bool> nullInfo) Parameters Type Name Description Sql.IsNullableType isNullable IEnumerable < System.Boolean > nullInfo Returns Type Description System.Nullable < System.Boolean > | Improve this Doc View Source GetCanBeNull(ISqlExpression[]) Declaration protected bool GetCanBeNull(ISqlExpression[] parameters) Parameters Type Name Description ISqlExpression [] parameters Returns Type Description System.Boolean | Improve this Doc View Source GetExpression<TContext>(TContext, IDataContext, SelectQuery, Expression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Declaration public virtual ISqlExpression GetExpression<TContext>(TContext context, IDataContext dataContext, SelectQuery query, Expression expression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression> converter) Parameters Type Name Description TContext context IDataContext dataContext SelectQuery query Expression expression Func <TContext, Expression , ColumnDescriptor , ISqlExpression > converter Returns Type Description ISqlExpression Type Parameters Name Description TContext | Improve this Doc View Source GetIsPredicate(Expression) Declaration public virtual bool GetIsPredicate(Expression expression) Parameters Type Name Description Expression expression Returns Type Description System.Boolean | Improve this Doc View Source PrepareArguments<TContext>(TContext, String, Int32[], Boolean, List<Nullable<Expression>>, Nullable<List<ISqlExpression>>, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Declaration public static ISqlExpression[] PrepareArguments<TContext>(TContext context, string expressionStr, int[] argIndices, bool addDefault, List<Expression?> knownExpressions, List<ISqlExpression>? genericTypes, Func<TContext, Expression, ColumnDescriptor, ISqlExpression> converter) Parameters Type Name Description TContext context System.String expressionStr System.Int32 [] argIndices System.Boolean addDefault List < System.Nullable < Expression >> knownExpressions System.Nullable < List < ISqlExpression >> genericTypes Func <TContext, Expression , ColumnDescriptor , ISqlExpression > converter Returns Type Description ISqlExpression [] Type Parameters Name Description TContext | Improve this Doc View Source PrepareParameterValues(Expression, ref Nullable<String>, Boolean, out List<Nullable<Expression>>, out Nullable<List<ISqlExpression>>) Declaration public static void PrepareParameterValues(Expression expression, ref string? expressionStr, bool includeInstance, out List<Expression?> knownExpressions, out List<ISqlExpression>? genericTypes) Parameters Type Name Description Expression expression System.Nullable < System.String > expressionStr System.Boolean includeInstance List < System.Nullable < Expression >> knownExpressions System.Nullable < List < ISqlExpression >> genericTypes | Improve this Doc View Source ResolveExpressionValues<TContext>(TContext, String, Func<TContext, String, Nullable<String>, Nullable<String>>) Declaration public static string ResolveExpressionValues<TContext>(TContext context, string expression, Func<TContext, string, string?, string?> valueProvider) Parameters Type Name Description TContext context System.String expression Func <TContext, System.String , System.Nullable < System.String >, System.Nullable < System.String >> valueProvider Returns Type Description System.String Type Parameters Name Description TContext Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder-1.html": {
    "href": "api/LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder-1.html",
    "title": "Class Sql.ExtensionAttribute.ExtensionBuilder<TContext> | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ExtensionAttribute.ExtensionBuilder<TContext> Inheritance System.Object Sql.ExtensionAttribute.ExtensionBuilder<TContext> Implements Sql.ISqExtensionBuilder Namespace : LinqToDB Assembly : linq2db.dll Syntax protected class ExtensionBuilder<TContext> : object, Sql.ISqExtensionBuilder Type Parameters Name Description TContext Constructors | Improve this Doc View Source ExtensionBuilder(TContext, Nullable<String>, Nullable<Object>, IDataContext, SelectQuery, Sql.SqlExtension, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>, MemberInfo, Expression[]) Declaration public ExtensionBuilder(TContext context, string? configuration, object? builderValue, IDataContext dataContext, SelectQuery query, Sql.SqlExtension extension, Func<TContext, Expression, ColumnDescriptor, ISqlExpression> converter, MemberInfo member, Expression[] arguments) Parameters Type Name Description TContext context System.Nullable < System.String > configuration System.Nullable < System.Object > builderValue IDataContext dataContext SelectQuery query Sql.SqlExtension extension Func <TContext, Expression , ColumnDescriptor , ISqlExpression > converter MemberInfo member Expression [] arguments Properties | Improve this Doc View Source Arguments Declaration public Expression[] Arguments { get; } Property Value Type Description Expression [] | Improve this Doc View Source BuilderValue Declaration public object? BuilderValue { get; } Property Value Type Description System.Nullable < System.Object > | Improve this Doc View Source Configuration Declaration public string? Configuration { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataContext Declaration public IDataContext DataContext { get; } Property Value Type Description IDataContext | Improve this Doc View Source Expression Declaration public string Expression { get; set; } Property Value Type Description System.String | Improve this Doc View Source Extension Declaration public Sql.SqlExtension Extension { get; } Property Value Type Description Sql.SqlExtension | Improve this Doc View Source Mapping Declaration public MappingSchema Mapping { get; } Property Value Type Description MappingSchema | Improve this Doc View Source Member Declaration public MemberInfo Member { get; } Property Value Type Description MemberInfo | Improve this Doc View Source Method Declaration public MethodInfo? Method { get; } Property Value Type Description System.Nullable < MethodInfo > | Improve this Doc View Source Query Declaration public SelectQuery Query { get; } Property Value Type Description SelectQuery | Improve this Doc View Source ResultExpression Declaration public ISqlExpression ResultExpression { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source AddParameter(String, ISqlExpression) Declaration public Sql.SqlExtensionParam AddParameter(string name, ISqlExpression expr) Parameters Type Name Description System.String name ISqlExpression expr Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source ConvertExpression(Expression, Boolean, ColumnDescriptor) Declaration public ISqlExpression ConvertExpression(Expression expr, bool unwrap, ColumnDescriptor columnDescriptor) Parameters Type Name Description Expression expr System.Boolean unwrap ColumnDescriptor columnDescriptor Returns Type Description ISqlExpression | Improve this Doc View Source ConvertExpressionToSql(Expression, Boolean) Declaration public ISqlExpression ConvertExpressionToSql(Expression expression, bool unwrap) Parameters Type Name Description Expression expression System.Boolean unwrap Returns Type Description ISqlExpression | Improve this Doc View Source ConvertToSqlExpression() Declaration public ISqlExpression ConvertToSqlExpression() Returns Type Description ISqlExpression | Improve this Doc View Source ConvertToSqlExpression(Int32) Declaration public ISqlExpression ConvertToSqlExpression(int precedence) Parameters Type Name Description System.Int32 precedence Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(Int32, Boolean) Declaration public ISqlExpression GetExpression(int index, bool unwrap) Parameters Type Name Description System.Int32 index System.Boolean unwrap Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(String, Boolean) Declaration public ISqlExpression GetExpression(string argName, bool unwrap) Parameters Type Name Description System.String argName System.Boolean unwrap Returns Type Description ISqlExpression | Improve this Doc View Source GetValue<T>(Int32) Declaration public T GetValue<T>(int index) Parameters Type Name Description System.Int32 index Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValue<T>(String) Declaration public T GetValue<T>(string argName) Parameters Type Name Description System.String argName Returns Type Description T Type Parameters Name Description T Implements Sql.ISqExtensionBuilder Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.ExtensionAttribute.html": {
    "href": "api/LinqToDB.Sql.ExtensionAttribute.html",
    "title": "Class Sql.ExtensionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.ExtensionAttribute Inheritance System.Object Sql.ExpressionAttribute Sql.ExtensionAttribute Inherited Members Sql.ExpressionAttribute.Expression Sql.ExpressionAttribute.ArgIndices Sql.ExpressionAttribute.Precedence Sql.ExpressionAttribute.Configuration Sql.ExpressionAttribute.ServerSideOnly Sql.ExpressionAttribute.PreferServerSide Sql.ExpressionAttribute.InlineParameters Sql.ExpressionAttribute.ExpectExpression Sql.ExpressionAttribute.IsPredicate Sql.ExpressionAttribute.IsAggregate Sql.ExpressionAttribute.IsWindowFunction Sql.ExpressionAttribute.IsPure Sql.ExpressionAttribute.IsNullable Sql.ExpressionAttribute.CanBeNull Sql.ExpressionAttribute.GetCanBeNull(ISqlExpression[]) Sql.ExpressionAttribute.CalcCanBeNull(Sql.IsNullableType, IEnumerable<Boolean>) Sql.ExpressionAttribute.ResolveExpressionValues<TContext>(TContext, String, Func<TContext, String, Nullable<String>, Nullable<String>>) Sql.ExpressionAttribute.UnknownExpression Sql.ExpressionAttribute.PrepareParameterValues(Expression, Nullable<String>, Boolean, List<Nullable<Expression>>, Nullable<List<ISqlExpression>>) Sql.ExpressionAttribute.PrepareArguments<TContext>(TContext, String, Int32[], Boolean, List<Nullable<Expression>>, Nullable<List<ISqlExpression>>, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Sql.ExpressionAttribute.GetIsPredicate(Expression) Namespace : LinqToDB Assembly : linq2db.dll Syntax public class ExtensionAttribute : Sql.ExpressionAttribute Constructors | Improve this Doc View Source ExtensionAttribute(String) Declaration public ExtensionAttribute(string expression) Parameters Type Name Description System.String expression | Improve this Doc View Source ExtensionAttribute(String, String) Declaration public ExtensionAttribute(string configuration, string expression) Parameters Type Name Description System.String configuration System.String expression | Improve this Doc View Source ExtensionAttribute(String, Type) Declaration public ExtensionAttribute(string configuration, Type builderType) Parameters Type Name Description System.String configuration Type builderType | Improve this Doc View Source ExtensionAttribute(Type) Declaration public ExtensionAttribute(Type builderType) Parameters Type Name Description Type builderType Properties | Improve this Doc View Source BuilderType Declaration public Type? BuilderType { get; set; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source BuilderValue Declaration public object? BuilderValue { get; set; } Property Value Type Description System.Nullable < System.Object > | Improve this Doc View Source ChainPrecedence Defines in which order process extensions. Items will be ordered Descending. Declaration public int ChainPrecedence { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TokenName Declaration public string? TokenName { get; set; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source BuildFunctionsChain<TContext>(TContext, IDataContext, SelectQuery, Expression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Declaration protected List<Sql.SqlExtensionParam> BuildFunctionsChain<TContext>(TContext context, IDataContext dataContext, SelectQuery query, Expression expr, Func<TContext, Expression, ColumnDescriptor, ISqlExpression> converter) Parameters Type Name Description TContext context IDataContext dataContext SelectQuery query Expression expr Func <TContext, Expression , ColumnDescriptor , ISqlExpression > converter Returns Type Description List < Sql.SqlExtensionParam > Type Parameters Name Description TContext | Improve this Doc View Source BuildSqlExpression(Sql.SqlExtension, Nullable<Type>, Int32, SqlFlags, Nullable<Boolean>, Sql.IsNullableType) Declaration public static SqlExpression BuildSqlExpression(Sql.SqlExtension root, Type? systemType, int precedence, SqlFlags flags, bool? canBeNull, Sql.IsNullableType isNullable) Parameters Type Name Description Sql.SqlExtension root System.Nullable < Type > systemType System.Int32 precedence SqlFlags flags System.Nullable < System.Boolean > canBeNull Sql.IsNullableType isNullable Returns Type Description SqlExpression | Improve this Doc View Source ExcludeExtensionChain(MappingSchema, Expression) Declaration public static Expression ExcludeExtensionChain(MappingSchema mapping, Expression expr) Parameters Type Name Description MappingSchema mapping Expression expr Returns Type Description Expression | Improve this Doc View Source GetExpression<TContext>(TContext, IDataContext, SelectQuery, Expression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Declaration public override ISqlExpression GetExpression<TContext>(TContext context, IDataContext dataContext, SelectQuery query, Expression expression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression> converter) Parameters Type Name Description TContext context IDataContext dataContext SelectQuery query Expression expression Func <TContext, Expression , ColumnDescriptor , ISqlExpression > converter Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.Sql.ExpressionAttribute.GetExpression<TContext>(TContext, LinqToDB.IDataContext, LinqToDB.SqlQuery.SelectQuery, Expression, Func<TContext, Expression, LinqToDB.Mapping.ColumnDescriptor, LinqToDB.SqlQuery.ISqlExpression>) | Improve this Doc View Source GetExtensionAttributes(Expression, MappingSchema) Declaration public static Sql.ExtensionAttribute[] GetExtensionAttributes(Expression expression, MappingSchema mapping) Parameters Type Name Description Expression expression MappingSchema mapping Returns Type Description Sql.ExtensionAttribute [] Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.From.html": {
    "href": "api/LinqToDB.Sql.From.html",
    "title": "Enum Sql.From | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.From Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum From : int Fields Name Description First Last None Extension Methods Map.DeepCopy<Sql.From>() Sql.IsDistinctFrom<Sql.From>(Sql.From) Sql.IsDistinctFrom<Sql.From>(Nullable<Sql.From>) Sql.IsNotDistinctFrom<Sql.From>(Sql.From) Sql.IsNotDistinctFrom<Sql.From>(Nullable<Sql.From>) SqlExtensions.In<Sql.From>(IEnumerable<Sql.From>) SqlExtensions.In<Sql.From>(IQueryable<Sql.From>) SqlExtensions.In<Sql.From>(Sql.From[]) SqlExtensions.In<Sql.From>(Sql.From, Sql.From) SqlExtensions.In<Sql.From>(Sql.From, Sql.From, Sql.From) SqlExtensions.NotIn<Sql.From>(IEnumerable<Sql.From>) SqlExtensions.NotIn<Sql.From>(IQueryable<Sql.From>) SqlExtensions.NotIn<Sql.From>(Sql.From[]) SqlExtensions.NotIn<Sql.From>(Sql.From, Sql.From) SqlExtensions.NotIn<Sql.From>(Sql.From, Sql.From, Sql.From)"
  },
  "api/LinqToDB.Sql.FunctionAttribute.html": {
    "href": "api/LinqToDB.Sql.FunctionAttribute.html",
    "title": "Class Sql.FunctionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.FunctionAttribute Defines an SQL server-side Function with parameters passed in. Inheritance System.Object Sql.ExpressionAttribute Sql.FunctionAttribute Inherited Members Sql.ExpressionAttribute.Expression Sql.ExpressionAttribute.ArgIndices Sql.ExpressionAttribute.Precedence Sql.ExpressionAttribute.Configuration Sql.ExpressionAttribute.ServerSideOnly Sql.ExpressionAttribute.PreferServerSide Sql.ExpressionAttribute.InlineParameters Sql.ExpressionAttribute.ExpectExpression Sql.ExpressionAttribute.IsPredicate Sql.ExpressionAttribute.IsAggregate Sql.ExpressionAttribute.IsWindowFunction Sql.ExpressionAttribute.IsPure Sql.ExpressionAttribute.IsNullable Sql.ExpressionAttribute.CanBeNull Sql.ExpressionAttribute.GetCanBeNull(ISqlExpression[]) Sql.ExpressionAttribute.CalcCanBeNull(Sql.IsNullableType, IEnumerable<Boolean>) Sql.ExpressionAttribute.ResolveExpressionValues<TContext>(TContext, String, Func<TContext, String, Nullable<String>, Nullable<String>>) Sql.ExpressionAttribute.UnknownExpression Sql.ExpressionAttribute.PrepareParameterValues(Expression, Nullable<String>, Boolean, List<Nullable<Expression>>, Nullable<List<ISqlExpression>>) Sql.ExpressionAttribute.PrepareArguments<TContext>(TContext, String, Int32[], Boolean, List<Nullable<Expression>>, Nullable<List<ISqlExpression>>, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Sql.ExpressionAttribute.GetIsPredicate(Expression) Namespace : LinqToDB Assembly : linq2db.dll Syntax public class FunctionAttribute : Sql.ExpressionAttribute Constructors | Improve this Doc View Source FunctionAttribute() Defines an SQL Function, which shall be the same as the name as the function called. Declaration public FunctionAttribute() | Improve this Doc View Source FunctionAttribute(String) Defines an SQL function with the given name. Declaration public FunctionAttribute(string name) Parameters Type Name Description System.String name The name of the function. no parenthesis () should be used. | Improve this Doc View Source FunctionAttribute(String, Int32[]) Defines an SQL function with the given name. Declaration public FunctionAttribute(string name, params int[] argIndices) Parameters Type Name Description System.String name The name of the function. no parenthesis () should be used. System.Int32 [] argIndices Used for setting the order of the method arguments being passed into the function. | Improve this Doc View Source FunctionAttribute(String, String) Defines an SQL function with the given name, for the ProviderName given. Declaration public FunctionAttribute(string configuration, string name) Parameters Type Name Description System.String configuration The Database configuration for which this Expression will be used. System.String name The name of the function. no parenthesis () should be used. | Improve this Doc View Source FunctionAttribute(String, String, Int32[]) Defines an SQL function with the given name, for the ProviderName given. Declaration public FunctionAttribute(string configuration, string name, params int[] argIndices) Parameters Type Name Description System.String configuration The Database configuration for which this Expression will be used. System.String name The name of the function. no parenthesis () should be used. System.Int32 [] argIndices Used for setting the order of the method arguments being passed into the function. Properties | Improve this Doc View Source Name The name of the Database Function Declaration public string? Name { get; set; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source GetExpression<TContext>(TContext, IDataContext, SelectQuery, Expression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Declaration public override ISqlExpression GetExpression<TContext>(TContext context, IDataContext dataContext, SelectQuery query, Expression expression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression> converter) Parameters Type Name Description TContext context IDataContext dataContext SelectQuery query Expression expression Func <TContext, Expression , ColumnDescriptor , ISqlExpression > converter Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.Sql.ExpressionAttribute.GetExpression<TContext>(TContext, LinqToDB.IDataContext, LinqToDB.SqlQuery.SelectQuery, Expression, Func<TContext, Expression, LinqToDB.Mapping.ColumnDescriptor, LinqToDB.SqlQuery.ISqlExpression>) Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.html": {
    "href": "api/LinqToDB.Sql.html",
    "title": "Class Sql | Linq To DB (aka linq2db)",
    "keywords": "Class Sql Inheritance System.Object Sql Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class Sql : object Fields | Improve this Doc View Source GroupBy Declaration public static Sql.IGroupBy GroupBy Field Value Type Description Sql.IGroupBy Properties | Improve this Doc View Source BigInt Declaration public static long BigInt { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Bit Declaration public static bool Bit { get; } Property Value Type Description System.Boolean | Improve this Doc View Source CurrentTimestamp Declaration public static DateTime CurrentTimestamp { get; } Property Value Type Description DateTime | Improve this Doc View Source CurrentTimestamp2 Declaration public static DateTime CurrentTimestamp2 { get; } Property Value Type Description DateTime | Improve this Doc View Source CurrentTimestampUtc Declaration public static DateTime CurrentTimestampUtc { get; } Property Value Type Description DateTime | Improve this Doc View Source CurrentTzTimestamp Declaration public static DateTimeOffset CurrentTzTimestamp { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source Date Declaration public static DateTime Date { get; } Property Value Type Description DateTime | Improve this Doc View Source DateFirst Declaration public static int DateFirst { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DateTime Declaration public static DateTime DateTime { get; } Property Value Type Description DateTime | Improve this Doc View Source DateTime2 Declaration public static DateTime DateTime2 { get; } Property Value Type Description DateTime | Improve this Doc View Source DateTimeOffset Declaration public static DateTimeOffset DateTimeOffset { get; } Property Value Type Description DateTimeOffset | Improve this Doc View Source DefaultChar Declaration public static string DefaultChar { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultDecimal Declaration public static decimal DefaultDecimal { get; } Property Value Type Description System.Decimal | Improve this Doc View Source DefaultNChar Declaration public static string DefaultNChar { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultNVarChar Declaration public static string DefaultNVarChar { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultVarChar Declaration public static string DefaultVarChar { get; } Property Value Type Description System.String | Improve this Doc View Source Ext Declaration public static Sql.ISqlExtension Ext { get; } Property Value Type Description Sql.ISqlExtension | Improve this Doc View Source Float Declaration public static double Float { get; } Property Value Type Description System.Double | Improve this Doc View Source Int Declaration public static int Int { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Money Declaration public static decimal Money { get; } Property Value Type Description System.Decimal | Improve this Doc View Source Real Declaration public static float Real { get; } Property Value Type Description System.Single | Improve this Doc View Source SmallDateTime Declaration public static DateTime SmallDateTime { get; } Property Value Type Description DateTime | Improve this Doc View Source SmallInt Declaration public static short SmallInt { get; } Property Value Type Description System.Int16 | Improve this Doc View Source SmallMoney Declaration public static decimal SmallMoney { get; } Property Value Type Description System.Decimal | Improve this Doc View Source Time Declaration public static DateTime Time { get; } Property Value Type Description DateTime | Improve this Doc View Source TinyInt Declaration public static byte TinyInt { get; } Property Value Type Description System.Byte Methods | Improve this Doc View Source Abs(Nullable<Decimal>) Declaration public static decimal? Abs(decimal? value) Parameters Type Name Description System.Nullable < System.Decimal > value Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source Abs(Nullable<Double>) Declaration public static double? Abs(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Abs(Nullable<Int16>) Declaration public static short? Abs(short? value) Parameters Type Name Description System.Nullable < System.Int16 > value Returns Type Description System.Nullable < System.Int16 > | Improve this Doc View Source Abs(Nullable<Int32>) Declaration public static int? Abs(int? value) Parameters Type Name Description System.Nullable < System.Int32 > value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Abs(Nullable<Int64>) Declaration public static long? Abs(long? value) Parameters Type Name Description System.Nullable < System.Int64 > value Returns Type Description System.Nullable < System.Int64 > | Improve this Doc View Source Abs(Nullable<SByte>) Declaration public static sbyte? Abs(sbyte? value) Parameters Type Name Description System.Nullable < System.SByte > value Returns Type Description System.Nullable < System.SByte > | Improve this Doc View Source Abs(Nullable<Single>) Declaration public static float? Abs(float? value) Parameters Type Name Description System.Nullable < System.Single > value Returns Type Description System.Nullable < System.Single > | Improve this Doc View Source Acos(Nullable<Double>) Declaration public static double? Acos(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source AliasExpr() Useful for specifying place of alias when using FromSql<TEntity>(IDataContext, RawSqlString, Nullable<Object>[]) method. Declaration public static ISqlExpression AliasExpr() Returns Type Description ISqlExpression ISqlExpression which is Alias Placeholder. Remarks If FromSql<TEntity>(IDataContext, RawSqlString, Nullable<Object>[]) contains at least one AliasExpr() , automatic alias for the query will be not generated. Examples The following FromSql<TEntity>(IDataContext, RawSqlString, Nullable<Object>[]) calls are equivalent. db.FromSql<int>($\"select 1 as value from TableA {Sql.AliasExpr()}\") db.FromSql<int>($\"select 1 as value from TableA\") | Improve this Doc View Source AllColumns() Generates '*'. Declaration public static object? [] AllColumns() Returns Type Description System.Nullable < System.Object >[] | Improve this Doc View Source Asin(Nullable<Double>) Declaration public static double? Asin(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source AsNotNull<T>(T) Declaration public static T AsNotNull<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AsNotNullable<T>(T) Declaration public static T AsNotNullable<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AsNullable<T>(T) Declaration public static T AsNullable<T>(T value) Parameters Type Name Description T value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AsSql<T>(T) Enforces generating SQL even if an expression can be calculated locally. Declaration public static T AsSql<T>(T obj) Parameters Type Name Description T obj Expression to generate SQL. Returns Type Description T Returns 'obj'. Type Parameters Name Description T | Improve this Doc View Source Atan(Nullable<Double>) Declaration public static double? Atan(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Atan2(Nullable<Double>, Nullable<Double>) Declaration public static double? Atan2(double? x, double? y) Parameters Type Name Description System.Nullable < System.Double > x System.Nullable < System.Double > y Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Between<T>(T, T, T) Declaration public static bool Between<T>(this T value, T low, T high) where T : IComparable Parameters Type Name Description T value T low T high Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Between<T>(Nullable<T>, Nullable<T>, Nullable<T>) Declaration public static bool Between<T>(this T? value, T? low, T? high) where T : struct, IComparable Parameters Type Name Description System.Nullable <T> value System.Nullable <T> low System.Nullable <T> high Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Ceiling(Nullable<Decimal>) Declaration public static decimal? Ceiling(decimal? value) Parameters Type Name Description System.Nullable < System.Decimal > value Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source Ceiling(Nullable<Double>) Declaration public static double? Ceiling(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Char(Int32) Declaration public static string Char(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.String | Improve this Doc View Source CharIndex(Nullable<Char>, Nullable<String>) Declaration public static int? CharIndex(char? value, string? str) Parameters Type Name Description System.Nullable < System.Char > value System.Nullable < System.String > str Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source CharIndex(Nullable<Char>, Nullable<String>, Nullable<Int32>) Declaration public static int? CharIndex(char? value, string? str, int? start) Parameters Type Name Description System.Nullable < System.Char > value System.Nullable < System.String > str System.Nullable < System.Int32 > start Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source CharIndex(Nullable<String>, Nullable<String>) Declaration public static int? CharIndex(string? substring, string? str) Parameters Type Name Description System.Nullable < System.String > substring System.Nullable < System.String > str Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source CharIndex(Nullable<String>, Nullable<String>, Nullable<Int32>) Declaration public static int? CharIndex(string? substring, string? str, int? start) Parameters Type Name Description System.Nullable < System.String > substring System.Nullable < System.String > str System.Nullable < System.Int32 > start Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Collate(String, String) Apply collation to a string expression. Declaration public static string Collate(this string expr, string collation) Parameters Type Name Description System.String expr Expression to apply collation to. System.String collation Collation to apply. Returns Type Description System.String Expression with specified collation. Remarks Server-side only, does not perform validation on collation name beyond simple valid character checks. | Improve this Doc View Source Concat(Object[]) Declaration public static string Concat(params object[] args) Parameters Type Name Description System.Object [] args Returns Type Description System.String | Improve this Doc View Source Concat(String[]) Declaration public static string Concat(params string[] args) Parameters Type Name Description System.String [] args Returns Type Description System.String | Improve this Doc View Source ConcatStrings(String, Nullable<String>[]) Concatenates NOT NULL strings, using the specified separator between each member. Declaration public static string ConcatStrings(string separator, params string? [] arguments) Parameters Type Name Description System.String separator The string to use as a separator. separator is included in the returned string only if arguments has more than one element. System.Nullable < System.String >[] arguments A collection that contains the strings to concatenate. Returns Type Description System.String | Improve this Doc View Source Convert<TTo, TFrom>(TTo, TFrom) Declaration public static TTo Convert<TTo, TFrom>(TTo to, TFrom from) Parameters Type Name Description TTo to TFrom from Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source Convert<TTo, TFrom>(TTo, TFrom, Int32) Declaration public static TTo Convert<TTo, TFrom>(TTo to, TFrom from, int format) Parameters Type Name Description TTo to TFrom from System.Int32 format Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source Convert<TTo, TFrom>(TFrom) Declaration public static TTo Convert<TTo, TFrom>(TFrom obj) Parameters Type Name Description TFrom obj Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source Convert2<TTo, TFrom>(TTo, TFrom) Declaration public static TTo Convert2<TTo, TFrom>(TTo to, TFrom from) Parameters Type Name Description TTo to TFrom from Returns Type Description TTo Type Parameters Name Description TTo TFrom | Improve this Doc View Source Cos(Nullable<Double>) Declaration public static double? Cos(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Cosh(Nullable<Double>) Declaration public static double? Cosh(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Cot(Nullable<Double>) Declaration public static double? Cot(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source DateAdd(Sql.DateParts, Nullable<Double>, Nullable<DateTime>) Declaration public static DateTime? DateAdd(Sql.DateParts part, double? number, DateTime? date) Parameters Type Name Description Sql.DateParts part System.Nullable < System.Double > number System.Nullable < DateTime > date Returns Type Description System.Nullable < DateTime > | Improve this Doc View Source DateAdd(Sql.DateParts, Nullable<Double>, Nullable<DateTimeOffset>) Declaration public static DateTimeOffset? DateAdd(Sql.DateParts part, double? number, DateTimeOffset? date) Parameters Type Name Description Sql.DateParts part System.Nullable < System.Double > number System.Nullable < DateTimeOffset > date Returns Type Description System.Nullable < DateTimeOffset > | Improve this Doc View Source DateDiff(Sql.DateParts, Nullable<DateTime>, Nullable<DateTime>) Declaration public static int? DateDiff(Sql.DateParts part, DateTime? startDate, DateTime? endDate) Parameters Type Name Description Sql.DateParts part System.Nullable < DateTime > startDate System.Nullable < DateTime > endDate Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source DateDiff(Sql.DateParts, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>) Declaration public static int? DateDiff(Sql.DateParts part, DateTimeOffset? startDate, DateTimeOffset? endDate) Parameters Type Name Description Sql.DateParts part System.Nullable < DateTimeOffset > startDate System.Nullable < DateTimeOffset > endDate Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source DatePart(Sql.DateParts, Nullable<DateTime>) Declaration public static int? DatePart(Sql.DateParts part, DateTime? date) Parameters Type Name Description Sql.DateParts part System.Nullable < DateTime > date Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source DatePart(Sql.DateParts, Nullable<DateTimeOffset>) Declaration public static int? DatePart(Sql.DateParts part, DateTimeOffset? date) Parameters Type Name Description Sql.DateParts part System.Nullable < DateTimeOffset > date Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source DateToTime(Nullable<DateTime>) Declaration public static TimeSpan? DateToTime(DateTime? date) Parameters Type Name Description System.Nullable < DateTime > date Returns Type Description System.Nullable < TimeSpan > | Improve this Doc View Source Decimal(Int32) Declaration public static decimal Decimal(int precision) Parameters Type Name Description System.Int32 precision Returns Type Description System.Decimal | Improve this Doc View Source Decimal(Int32, Int32) Declaration public static decimal Decimal(int precision, int scale) Parameters Type Name Description System.Int32 precision System.Int32 scale Returns Type Description System.Decimal | Improve this Doc View Source Default<T>() Generates 'DEFAULT' keyword, usable in inserts. Declaration public static T Default<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Degrees(Nullable<Decimal>) Declaration public static decimal? Degrees(decimal? value) Parameters Type Name Description System.Nullable < System.Decimal > value Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source Degrees(Nullable<Double>) Declaration public static double? Degrees(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Degrees(Nullable<Int16>) Declaration public static short? Degrees(short? value) Parameters Type Name Description System.Nullable < System.Int16 > value Returns Type Description System.Nullable < System.Int16 > | Improve this Doc View Source Degrees(Nullable<Int32>) Declaration public static int? Degrees(int? value) Parameters Type Name Description System.Nullable < System.Int32 > value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Degrees(Nullable<Int64>) Declaration public static long? Degrees(long? value) Parameters Type Name Description System.Nullable < System.Int64 > value Returns Type Description System.Nullable < System.Int64 > | Improve this Doc View Source Degrees(Nullable<SByte>) Declaration public static sbyte? Degrees(sbyte? value) Parameters Type Name Description System.Nullable < System.SByte > value Returns Type Description System.Nullable < System.SByte > | Improve this Doc View Source Degrees(Nullable<Single>) Declaration public static float? Degrees(float? value) Parameters Type Name Description System.Nullable < System.Single > value Returns Type Description System.Nullable < System.Single > | Improve this Doc View Source Exp(Nullable<Double>) Declaration public static double? Exp(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Expr<T>(RawSqlString, Object[]) Declaration public static T Expr<T>(RawSqlString sql, params object[] parameters) Parameters Type Name Description RawSqlString sql System.Object [] parameters Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source FieldExpr(Object) Declaration public static ISqlExpression FieldExpr(object fieldExpr) Parameters Type Name Description System.Object fieldExpr Returns Type Description ISqlExpression | Improve this Doc View Source FieldExpr(Object, Boolean) Declaration public static ISqlExpression FieldExpr(object fieldExpr, bool qualified) Parameters Type Name Description System.Object fieldExpr System.Boolean qualified Returns Type Description ISqlExpression | Improve this Doc View Source FieldExpr<T, TV>(ITable<T>, Expression<Func<T, TV>>) Declaration public static ISqlExpression FieldExpr<T, TV>(ITable<T> table, Expression<Func<T, TV>> fieldExpr) Parameters Type Name Description ITable <T> table Expression < Func <T, TV>> fieldExpr Returns Type Description ISqlExpression Type Parameters Name Description T TV | Improve this Doc View Source FieldExpr<T, TV>(ITable<T>, Expression<Func<T, TV>>, Boolean) Declaration public static ISqlExpression FieldExpr<T, TV>(ITable<T> table, Expression<Func<T, TV>> fieldExpr, bool qualified) Parameters Type Name Description ITable <T> table Expression < Func <T, TV>> fieldExpr System.Boolean qualified Returns Type Description ISqlExpression Type Parameters Name Description T TV | Improve this Doc View Source FieldName(Object) Declaration public static string FieldName(object fieldExpr) Parameters Type Name Description System.Object fieldExpr Returns Type Description System.String | Improve this Doc View Source FieldName(Object, Boolean) Declaration public static string FieldName(object fieldExpr, bool qualified) Parameters Type Name Description System.Object fieldExpr System.Boolean qualified Returns Type Description System.String | Improve this Doc View Source FieldName<T>(ITable<T>, Expression<Func<T, Object>>) Declaration public static string FieldName<T>(ITable<T> table, Expression<Func<T, object>> fieldExpr) Parameters Type Name Description ITable <T> table Expression < Func <T, System.Object >> fieldExpr Returns Type Description System.String Type Parameters Name Description T | Improve this Doc View Source FieldName<T>(ITable<T>, Expression<Func<T, Object>>, Boolean) Declaration public static string FieldName<T>(ITable<T> table, Expression<Func<T, object>> fieldExpr, bool qualified) Parameters Type Name Description ITable <T> table Expression < Func <T, System.Object >> fieldExpr System.Boolean qualified Returns Type Description System.String Type Parameters Name Description T | Improve this Doc View Source Floor(Nullable<Decimal>) Declaration public static decimal? Floor(decimal? value) Parameters Type Name Description System.Nullable < System.Decimal > value Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source Floor(Nullable<Double>) Declaration public static double? Floor(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source GetDate() Declaration public static DateTime GetDate() Returns Type Description DateTime | Improve this Doc View Source Grouping(Object[]) Declaration public static int Grouping(params object[] fields) Parameters Type Name Description System.Object [] fields Returns Type Description System.Int32 | Improve this Doc View Source IsDistinctFrom<T>(T, T) Declaration public static bool IsDistinctFrom<T>(this T value, T other) Parameters Type Name Description T value T other Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source IsDistinctFrom<T>(T, Nullable<T>) Declaration public static bool IsDistinctFrom<T>(this T value, T? other) where T : struct Parameters Type Name Description T value System.Nullable <T> other Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source IsNotDistinctFrom<T>(T, T) Declaration public static bool IsNotDistinctFrom<T>(this T value, T other) Parameters Type Name Description T value T other Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source IsNotDistinctFrom<T>(T, Nullable<T>) Declaration public static bool IsNotDistinctFrom<T>(this T value, T? other) where T : struct Parameters Type Name Description T value System.Nullable <T> other Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Left(Nullable<String>, Nullable<Int32>) Declaration public static string? Left(string? str, int? length) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Int32 > length Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Length(Byte[]) Declaration public static int? Length(byte[] value) Parameters Type Name Description System.Byte [] value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Length(Nullable<Binary>) Declaration public static int? Length(Binary? value) Parameters Type Name Description System.Nullable < Binary > value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Length(String) Declaration public static int? Length(string str) Parameters Type Name Description System.String str Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Like(Nullable<String>, Nullable<String>) Declaration public static bool Like(string? matchExpression, string? pattern) Parameters Type Name Description System.Nullable < System.String > matchExpression System.Nullable < System.String > pattern Returns Type Description System.Boolean | Improve this Doc View Source Like(Nullable<String>, Nullable<String>, Nullable<Char>) Declaration public static bool Like(string? matchExpression, string? pattern, char? escapeCharacter) Parameters Type Name Description System.Nullable < System.String > matchExpression System.Nullable < System.String > pattern System.Nullable < System.Char > escapeCharacter Returns Type Description System.Boolean | Improve this Doc View Source Log(Nullable<Decimal>) Declaration public static decimal? Log(decimal? value) Parameters Type Name Description System.Nullable < System.Decimal > value Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source Log(Nullable<Decimal>, Nullable<Decimal>) Declaration public static decimal? Log(decimal? newBase, decimal? value) Parameters Type Name Description System.Nullable < System.Decimal > newBase System.Nullable < System.Decimal > value Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source Log(Nullable<Double>) Declaration public static double? Log(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Log(Nullable<Double>, Nullable<Double>) Declaration public static double? Log(double? newBase, double? value) Parameters Type Name Description System.Nullable < System.Double > newBase System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Log10(Nullable<Double>) Declaration public static double? Log10(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Lower(Nullable<String>) Declaration public static string? Lower(string? str) Parameters Type Name Description System.Nullable < System.String > str Returns Type Description System.Nullable < System.String > | Improve this Doc View Source MakeDateTime(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration public static DateTime? MakeDateTime(int? year, int? month, int? day) Parameters Type Name Description System.Nullable < System.Int32 > year System.Nullable < System.Int32 > month System.Nullable < System.Int32 > day Returns Type Description System.Nullable < DateTime > | Improve this Doc View Source MakeDateTime(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration public static DateTime? MakeDateTime(int? year, int? month, int? day, int? hour, int? minute, int? second) Parameters Type Name Description System.Nullable < System.Int32 > year System.Nullable < System.Int32 > month System.Nullable < System.Int32 > day System.Nullable < System.Int32 > hour System.Nullable < System.Int32 > minute System.Nullable < System.Int32 > second Returns Type Description System.Nullable < DateTime > | Improve this Doc View Source NChar(Int32) Declaration public static string NChar(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.String | Improve this Doc View Source NewGuid() Declaration public static Guid NewGuid() Returns Type Description Guid | Improve this Doc View Source NoConvert<T>(T) Declaration public static T NoConvert<T>(T expr) Parameters Type Name Description T expr Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source NotBetween<T>(T, T, T) Declaration public static bool NotBetween<T>(this T value, T low, T high) where T : IComparable Parameters Type Name Description T value T low T high Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source NotBetween<T>(Nullable<T>, Nullable<T>, Nullable<T>) Declaration public static bool NotBetween<T>(this T? value, T? low, T? high) where T : struct, IComparable Parameters Type Name Description System.Nullable <T> value System.Nullable <T> low System.Nullable <T> high Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source NVarChar(Int32) Declaration public static string NVarChar(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.String | Improve this Doc View Source PadLeft(Nullable<String>, Nullable<Int32>, Nullable<Char>) Declaration public static string? PadLeft(string? str, int? length, char? paddingChar) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Int32 > length System.Nullable < System.Char > paddingChar Returns Type Description System.Nullable < System.String > | Improve this Doc View Source PadRight(Nullable<String>, Nullable<Int32>, Nullable<Char>) Declaration public static string? PadRight(string? str, int? length, char? paddingChar) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Int32 > length System.Nullable < System.Char > paddingChar Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Power(Nullable<Double>, Nullable<Double>) Declaration public static double? Power(double? x, double? y) Parameters Type Name Description System.Nullable < System.Double > x System.Nullable < System.Double > y Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Property<T>(Nullable<Object>, String) Allows access to entity property via name. Property can be dynamic or non-dynamic. Declaration public static T Property<T>(object? entity, string propertyName) Parameters Type Name Description System.Nullable < System.Object > entity The entity. System.String propertyName Name of the property. Returns Type Description T Type Parameters Name Description T Property type. Exceptions Type Condition LinqException 'Property' is only server-side method. | Improve this Doc View Source Replace(Nullable<String>, Nullable<Char>, Nullable<Char>) Declaration public static string? Replace(string? str, char? oldValue, char? newValue) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Char > oldValue System.Nullable < System.Char > newValue Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Replace(Nullable<String>, Nullable<String>, Nullable<String>) Declaration public static string? Replace(string? str, string? oldValue, string? newValue) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.String > oldValue System.Nullable < System.String > newValue Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Reverse(Nullable<String>) Declaration public static string? Reverse(string? str) Parameters Type Name Description System.Nullable < System.String > str Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Right(Nullable<String>, Nullable<Int32>) Declaration public static string? Right(string? str, int? length) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Int32 > length Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Round(Nullable<Decimal>) Declaration public static decimal? Round(decimal? value) Parameters Type Name Description System.Nullable < System.Decimal > value Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source Round(Nullable<Decimal>, Nullable<Int32>) Declaration public static decimal? Round(decimal? value, int? precision) Parameters Type Name Description System.Nullable < System.Decimal > value System.Nullable < System.Int32 > precision Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source Round(Nullable<Double>) Declaration public static double? Round(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Round(Nullable<Double>, Nullable<Int32>) Declaration public static double? Round(double? value, int? precision) Parameters Type Name Description System.Nullable < System.Double > value System.Nullable < System.Int32 > precision Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source RoundToEven(Nullable<Decimal>) Declaration public static decimal? RoundToEven(decimal? value) Parameters Type Name Description System.Nullable < System.Decimal > value Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source RoundToEven(Nullable<Decimal>, Nullable<Int32>) Declaration public static decimal? RoundToEven(decimal? value, int? precision) Parameters Type Name Description System.Nullable < System.Decimal > value System.Nullable < System.Int32 > precision Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source RoundToEven(Nullable<Double>) Declaration public static double? RoundToEven(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source RoundToEven(Nullable<Double>, Nullable<Int32>) Declaration public static double? RoundToEven(double? value, int? precision) Parameters Type Name Description System.Nullable < System.Double > value System.Nullable < System.Int32 > precision Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Sign(Nullable<Decimal>) Declaration public static int? Sign(decimal? value) Parameters Type Name Description System.Nullable < System.Decimal > value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Sign(Nullable<Double>) Declaration public static int? Sign(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Sign(Nullable<Int16>) Declaration public static int? Sign(short? value) Parameters Type Name Description System.Nullable < System.Int16 > value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Sign(Nullable<Int32>) Declaration public static int? Sign(int? value) Parameters Type Name Description System.Nullable < System.Int32 > value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Sign(Nullable<Int64>) Declaration public static int? Sign(long? value) Parameters Type Name Description System.Nullable < System.Int64 > value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Sign(Nullable<SByte>) Declaration public static int? Sign(sbyte? value) Parameters Type Name Description System.Nullable < System.SByte > value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Sign(Nullable<Single>) Declaration public static int? Sign(float? value) Parameters Type Name Description System.Nullable < System.Single > value Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Sin(Nullable<Double>) Declaration public static double? Sin(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Sinh(Nullable<Double>) Declaration public static double? Sinh(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Space(Nullable<Int32>) Declaration public static string? Space(int? length) Parameters Type Name Description System.Nullable < System.Int32 > length Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Sqrt(Nullable<Double>) Declaration public static double? Sqrt(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source StringAggregate(IEnumerable<Nullable<String>>, String) Declaration public static Sql.IAggregateFunctionNotOrdered<string?, string> StringAggregate(this IEnumerable<string?> source, string separator) Parameters Type Name Description IEnumerable < System.Nullable < System.String >> source System.String separator Returns Type Description Sql.IAggregateFunctionNotOrdered < System.Nullable < System.String >, System.String > | Improve this Doc View Source StringAggregate(IQueryable<Nullable<String>>, String) Declaration public static Sql.IAggregateFunctionNotOrdered<string?, string> StringAggregate(this IQueryable<string?> source, string separator) Parameters Type Name Description IQueryable < System.Nullable < System.String >> source System.String separator Returns Type Description Sql.IAggregateFunctionNotOrdered < System.Nullable < System.String >, System.String > | Improve this Doc View Source StringAggregate<T>(IEnumerable<T>, String, Func<T, Nullable<String>>) Declaration public static Sql.IAggregateFunctionNotOrdered<T, string> StringAggregate<T>(this IEnumerable<T> source, string separator, Func<T, string?> selector) Parameters Type Name Description IEnumerable <T> source System.String separator Func <T, System.Nullable < System.String >> selector Returns Type Description Sql.IAggregateFunctionNotOrdered <T, System.String > Type Parameters Name Description T | Improve this Doc View Source StringAggregate<T>(IQueryable<T>, String, Expression<Func<T, Nullable<String>>>) Declaration public static Sql.IAggregateFunctionNotOrdered<T, string> StringAggregate<T>(this IQueryable<T> source, string separator, Expression<Func<T, string?>> selector) Parameters Type Name Description IQueryable <T> source System.String separator Expression < Func <T, System.Nullable < System.String >>> selector Returns Type Description Sql.IAggregateFunctionNotOrdered <T, System.String > Type Parameters Name Description T | Improve this Doc View Source Stuff(IEnumerable<String>, Nullable<Int32>, Nullable<Int32>, String) Declaration public static string Stuff(IEnumerable<string> characterExpression, int? start, int? length, string replaceWithExpression) Parameters Type Name Description IEnumerable < System.String > characterExpression System.Nullable < System.Int32 > start System.Nullable < System.Int32 > length System.String replaceWithExpression Returns Type Description System.String | Improve this Doc View Source Stuff(Nullable<String>, Nullable<Int32>, Nullable<Int32>, Nullable<String>) Declaration public static string? Stuff(string? str, int? start, int? length, string? newString) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Int32 > start System.Nullable < System.Int32 > length System.Nullable < System.String > newString Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Substring(Nullable<String>, Nullable<Int32>, Nullable<Int32>) Declaration public static string? Substring(string? str, int? start, int? length) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Int32 > start System.Nullable < System.Int32 > length Returns Type Description System.Nullable < System.String > | Improve this Doc View Source TableExpr(Object) Declaration public static ISqlExpression TableExpr(object tableExpr) Parameters Type Name Description System.Object tableExpr Returns Type Description ISqlExpression | Improve this Doc View Source TableExpr(Object, Sql.TableQualification) Declaration public static ISqlExpression TableExpr(object tableExpr, Sql.TableQualification qualification) Parameters Type Name Description System.Object tableExpr Sql.TableQualification qualification Returns Type Description ISqlExpression | Improve this Doc View Source TableExpr<T>(ITable<T>) Declaration public static ISqlExpression TableExpr<T>(ITable<T> table) Parameters Type Name Description ITable <T> table Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source TableExpr<T>(ITable<T>, Sql.TableQualification) Declaration public static ISqlExpression TableExpr<T>(ITable<T> table, Sql.TableQualification qualification) Parameters Type Name Description ITable <T> table Sql.TableQualification qualification Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source TableName(Object) Declaration public static string TableName(object tableExpr) Parameters Type Name Description System.Object tableExpr Returns Type Description System.String | Improve this Doc View Source TableName(Object, Sql.TableQualification) Declaration public static string TableName(object tableExpr, Sql.TableQualification qualification) Parameters Type Name Description System.Object tableExpr Sql.TableQualification qualification Returns Type Description System.String | Improve this Doc View Source TableName<T>(ITable<T>) Declaration public static string TableName<T>(ITable<T> table) Parameters Type Name Description ITable <T> table Returns Type Description System.String Type Parameters Name Description T | Improve this Doc View Source TableName<T>(ITable<T>, Sql.TableQualification) Declaration public static string TableName<T>(ITable<T> table, Sql.TableQualification qualification) Parameters Type Name Description ITable <T> table Sql.TableQualification qualification Returns Type Description System.String Type Parameters Name Description T | Improve this Doc View Source Tan(Nullable<Double>) Declaration public static double? Tan(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source Tanh(Nullable<Double>) Declaration public static double? Tanh(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source ToDate(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration public static DateTime? ToDate(int? year, int? month, int? day) Parameters Type Name Description System.Nullable < System.Int32 > year System.Nullable < System.Int32 > month System.Nullable < System.Int32 > day Returns Type Description System.Nullable < DateTime > | Improve this Doc View Source ToDate(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration public static DateTime? ToDate(int? year, int? month, int? day, int? hour, int? minute, int? second) Parameters Type Name Description System.Nullable < System.Int32 > year System.Nullable < System.Int32 > month System.Nullable < System.Int32 > day System.Nullable < System.Int32 > hour System.Nullable < System.Int32 > minute System.Nullable < System.Int32 > second Returns Type Description System.Nullable < DateTime > | Improve this Doc View Source ToDate(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>) Declaration public static DateTime? ToDate(int? year, int? month, int? day, int? hour, int? minute, int? second, int? millisecond) Parameters Type Name Description System.Nullable < System.Int32 > year System.Nullable < System.Int32 > month System.Nullable < System.Int32 > day System.Nullable < System.Int32 > hour System.Nullable < System.Int32 > minute System.Nullable < System.Int32 > second System.Nullable < System.Int32 > millisecond Returns Type Description System.Nullable < DateTime > | Improve this Doc View Source ToNotNull<T>(Nullable<T>) Declaration public static T ToNotNull<T>(T? value) where T : struct Parameters Type Name Description System.Nullable <T> value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ToNotNullable<T>(Nullable<T>) Declaration public static T ToNotNullable<T>(T? value) where T : struct Parameters Type Name Description System.Nullable <T> value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ToNullable<T>(T) Declaration public static T? ToNullable<T>(T value) where T : struct Parameters Type Name Description T value Returns Type Description System.Nullable <T> Type Parameters Name Description T | Improve this Doc View Source ToSql<T>(T) Declaration public static T ToSql<T>(T obj) Parameters Type Name Description T obj Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Trim(Nullable<String>) Declaration public static string? Trim(string? str) Parameters Type Name Description System.Nullable < System.String > str Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Trim(Nullable<String>, Nullable<Char>) Declaration public static string? Trim(string? str, char? ch) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Char > ch Returns Type Description System.Nullable < System.String > | Improve this Doc View Source TrimLeft(Nullable<String>) Declaration public static string? TrimLeft(string? str) Parameters Type Name Description System.Nullable < System.String > str Returns Type Description System.Nullable < System.String > | Improve this Doc View Source TrimLeft(Nullable<String>, Nullable<Char>) Declaration public static string? TrimLeft(string? str, char? ch) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Char > ch Returns Type Description System.Nullable < System.String > | Improve this Doc View Source TrimRight(Nullable<String>) Declaration public static string? TrimRight(string? str) Parameters Type Name Description System.Nullable < System.String > str Returns Type Description System.Nullable < System.String > | Improve this Doc View Source TrimRight(Nullable<String>, Nullable<Char>) Declaration public static string? TrimRight(string? str, char? ch) Parameters Type Name Description System.Nullable < System.String > str System.Nullable < System.Char > ch Returns Type Description System.Nullable < System.String > | Improve this Doc View Source Truncate(Nullable<Decimal>) Declaration public static decimal? Truncate(decimal? value) Parameters Type Name Description System.Nullable < System.Decimal > value Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source Truncate(Nullable<Double>) Declaration public static double? Truncate(double? value) Parameters Type Name Description System.Nullable < System.Double > value Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source TryConvert<TFrom, TTo>(TFrom, TTo) Performs value conversion to specified type. If conversion failed, returns null . Supported databases: Declaration public static TTo TryConvert<TFrom, TTo>(TFrom value, TTo _) where TTo : class Parameters Type Name Description TFrom value Value to convert. TTo _ Unused. Added to support method overloads. Returns Type Description TTo Value, converted to target type or null if conversion failed. Type Parameters Name Description TFrom Source value type. TTo Target value type. | Improve this Doc View Source TryConvert<TFrom, TTo>(TFrom, Nullable<TTo>) Performs value conversion to specified type. If conversion failed, returns null . Supported databases: Declaration public static TTo? TryConvert<TFrom, TTo>(TFrom value, TTo? _) where TTo : struct Parameters Type Name Description TFrom value Value to convert. System.Nullable <TTo> _ Unused. Added to support method overloads. Returns Type Description System.Nullable <TTo> Value, converted to target type or null if conversion failed. Type Parameters Name Description TFrom Source value type. TTo Target value type. | Improve this Doc View Source TryConvertOrDefault<TFrom, TTo>(TFrom, TTo) Performs value conversion to specified type. If conversion failed, returns value, specified by defaultValue parameter. Supported databases: Declaration public static TTo TryConvertOrDefault<TFrom, TTo>(TFrom value, TTo defaultValue) where TTo : class Parameters Type Name Description TFrom value Value to convert. TTo defaultValue Value, returned when conversion failed. Returns Type Description TTo Value, converted to target type or defaultValue if conversion failed. Type Parameters Name Description TFrom Source value type. TTo Target value type. | Improve this Doc View Source TryConvertOrDefault<TFrom, TTo>(TFrom, Nullable<TTo>) Performs value conversion to specified type. If conversion failed, returns value, specified by defaultValue parameter. Supported databases: Declaration public static TTo? TryConvertOrDefault<TFrom, TTo>(TFrom value, TTo? defaultValue) where TTo : struct Parameters Type Name Description TFrom value Value to convert. System.Nullable <TTo> defaultValue Value, returned when conversion failed. Returns Type Description System.Nullable <TTo> Value, converted to target type or defaultValue if conversion failed. Type Parameters Name Description TFrom Source value type. TTo Target value type. | Improve this Doc View Source Upper(Nullable<String>) Declaration public static string? Upper(string? str) Parameters Type Name Description System.Nullable < System.String > str Returns Type Description System.Nullable < System.String > | Improve this Doc View Source VarChar(Int32) Declaration public static string VarChar(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.String"
  },
  "api/LinqToDB.Sql.IAggregateFunction-2.html": {
    "href": "api/LinqToDB.Sql.IAggregateFunction-2.html",
    "title": "Interface Sql.IAggregateFunction<T, TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.IAggregateFunction<T, TR> Inherited Members Sql.IQueryableContainer.Query Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IAggregateFunction<out T, out TR> : Sql.IQueryableContainer Type Parameters Name Description T TR Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) StringAggregateExtensions.ToValue<T, TR>(Sql.IAggregateFunction<T, TR>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.IAggregateFunctionNotOrdered-2.html": {
    "href": "api/LinqToDB.Sql.IAggregateFunctionNotOrdered-2.html",
    "title": "Interface Sql.IAggregateFunctionNotOrdered<T, TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.IAggregateFunctionNotOrdered<T, TR> Inherited Members Sql.IQueryableContainer.Query Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IAggregateFunctionNotOrdered<out T, out TR> : Sql.IAggregateFunction<T, TR>, Sql.IQueryableContainer Type Parameters Name Description T TR Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) StringAggregateExtensions.OrderBy<T, TR, TKey>(Sql.IAggregateFunctionNotOrdered<T, TR>, Expression<Func<T, TKey>>) StringAggregateExtensions.OrderBy<T, TR>(Sql.IAggregateFunctionNotOrdered<T, TR>) StringAggregateExtensions.OrderByDescending<T, TR, TKey>(Sql.IAggregateFunctionNotOrdered<T, TR>, Expression<Func<T, TKey>>) StringAggregateExtensions.OrderByDescending<T, TR>(Sql.IAggregateFunctionNotOrdered<T, TR>) StringAggregateExtensions.ToValue<T, TR>(Sql.IAggregateFunction<T, TR>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.IAggregateFunctionOrdered-2.html": {
    "href": "api/LinqToDB.Sql.IAggregateFunctionOrdered-2.html",
    "title": "Interface Sql.IAggregateFunctionOrdered<T, TR> | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.IAggregateFunctionOrdered<T, TR> Inherited Members Sql.IQueryableContainer.Query Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IAggregateFunctionOrdered<out T, out TR> : Sql.IAggregateFunction<T, TR>, Sql.IQueryableContainer Type Parameters Name Description T TR Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) StringAggregateExtensions.ThenBy<T, TR, TKey>(Sql.IAggregateFunctionOrdered<T, TR>, Expression<Func<T, TKey>>) StringAggregateExtensions.ThenByDescending<T, TR, TKey>(Sql.IAggregateFunctionOrdered<T, TR>, Expression<Func<T, TKey>>) StringAggregateExtensions.ToValue<T, TR>(Sql.IAggregateFunction<T, TR>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.IExtensionCallBuilder.html": {
    "href": "api/LinqToDB.Sql.IExtensionCallBuilder.html",
    "title": "Interface Sql.IExtensionCallBuilder | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.IExtensionCallBuilder Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IExtensionCallBuilder Methods | Improve this Doc View Source Build(Sql.ISqExtensionBuilder) Declaration void Build(Sql.ISqExtensionBuilder builder) Parameters Type Name Description Sql.ISqExtensionBuilder builder Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.IGroupBy.html": {
    "href": "api/LinqToDB.Sql.IGroupBy.html",
    "title": "Interface Sql.IGroupBy | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.IGroupBy Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IGroupBy Properties | Improve this Doc View Source None Declaration bool None { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Cube<T>(Expression<Func<T>>) Declaration T Cube<T>(Expression<Func<T>> cubeKey) Parameters Type Name Description Expression < Func <T>> cubeKey Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GroupingSets<T>(Expression<Func<T>>) Declaration T GroupingSets<T>(Expression<Func<T>> setsExpression) Parameters Type Name Description Expression < Func <T>> setsExpression Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Rollup<T>(Expression<Func<T>>) Declaration T Rollup<T>(Expression<Func<T>> rollupKey) Parameters Type Name Description Expression < Func <T>> rollupKey Returns Type Description T Type Parameters Name Description T Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.IQueryableContainer.html": {
    "href": "api/LinqToDB.Sql.IQueryableContainer.html",
    "title": "Interface Sql.IQueryableContainer | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.IQueryableContainer Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface IQueryableContainer Properties | Improve this Doc View Source Query Declaration IQueryable Query { get; } Property Value Type Description IQueryable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.IsNullableType.html": {
    "href": "api/LinqToDB.Sql.IsNullableType.html",
    "title": "Enum Sql.IsNullableType | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.IsNullableType Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum IsNullableType : int Fields Name Description IfAnyParameterNullable NotNullable Nullable SameAsFirstParameter SameAsLastParameter SameAsSecondParameter SameAsThirdParameter Undefined Extension Methods Map.DeepCopy<Sql.IsNullableType>() Sql.IsDistinctFrom<Sql.IsNullableType>(Sql.IsNullableType) Sql.IsDistinctFrom<Sql.IsNullableType>(Nullable<Sql.IsNullableType>) Sql.IsNotDistinctFrom<Sql.IsNullableType>(Sql.IsNullableType) Sql.IsNotDistinctFrom<Sql.IsNullableType>(Nullable<Sql.IsNullableType>) SqlExtensions.In<Sql.IsNullableType>(IEnumerable<Sql.IsNullableType>) SqlExtensions.In<Sql.IsNullableType>(IQueryable<Sql.IsNullableType>) SqlExtensions.In<Sql.IsNullableType>(Sql.IsNullableType[]) SqlExtensions.In<Sql.IsNullableType>(Sql.IsNullableType, Sql.IsNullableType) SqlExtensions.In<Sql.IsNullableType>(Sql.IsNullableType, Sql.IsNullableType, Sql.IsNullableType) SqlExtensions.NotIn<Sql.IsNullableType>(IEnumerable<Sql.IsNullableType>) SqlExtensions.NotIn<Sql.IsNullableType>(IQueryable<Sql.IsNullableType>) SqlExtensions.NotIn<Sql.IsNullableType>(Sql.IsNullableType[]) SqlExtensions.NotIn<Sql.IsNullableType>(Sql.IsNullableType, Sql.IsNullableType) SqlExtensions.NotIn<Sql.IsNullableType>(Sql.IsNullableType, Sql.IsNullableType, Sql.IsNullableType)"
  },
  "api/LinqToDB.Sql.ISqExtensionBuilder.html": {
    "href": "api/LinqToDB.Sql.ISqExtensionBuilder.html",
    "title": "Interface Sql.ISqExtensionBuilder | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.ISqExtensionBuilder Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ISqExtensionBuilder Properties | Improve this Doc View Source Arguments Declaration Expression[] Arguments { get; } Property Value Type Description Expression [] | Improve this Doc View Source BuilderValue Declaration object? BuilderValue { get; } Property Value Type Description System.Nullable < System.Object > | Improve this Doc View Source Configuration Declaration string? Configuration { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataContext Declaration IDataContext DataContext { get; } Property Value Type Description IDataContext | Improve this Doc View Source Expression Declaration string Expression { get; set; } Property Value Type Description System.String | Improve this Doc View Source Extension Declaration Sql.SqlExtension Extension { get; } Property Value Type Description Sql.SqlExtension | Improve this Doc View Source Mapping Declaration MappingSchema Mapping { get; } Property Value Type Description MappingSchema | Improve this Doc View Source Member Declaration MemberInfo Member { get; } Property Value Type Description MemberInfo | Improve this Doc View Source Query Declaration SelectQuery Query { get; } Property Value Type Description SelectQuery | Improve this Doc View Source ResultExpression Declaration ISqlExpression ResultExpression { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source AddParameter(String, ISqlExpression) Declaration Sql.SqlExtensionParam AddParameter(string name, ISqlExpression expr) Parameters Type Name Description System.String name ISqlExpression expr Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source ConvertExpressionToSql(Expression, Boolean) Declaration ISqlExpression ConvertExpressionToSql(Expression expression, bool unwrap = false) Parameters Type Name Description Expression expression System.Boolean unwrap Returns Type Description ISqlExpression | Improve this Doc View Source ConvertToSqlExpression() Declaration ISqlExpression ConvertToSqlExpression() Returns Type Description ISqlExpression | Improve this Doc View Source ConvertToSqlExpression(Int32) Declaration ISqlExpression ConvertToSqlExpression(int precedence) Parameters Type Name Description System.Int32 precedence Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(Int32, Boolean) Declaration ISqlExpression GetExpression(int index, bool unwrap = false) Parameters Type Name Description System.Int32 index System.Boolean unwrap Returns Type Description ISqlExpression | Improve this Doc View Source GetExpression(String, Boolean) Declaration ISqlExpression GetExpression(string argName, bool unwrap = false) Parameters Type Name Description System.String argName System.Boolean unwrap Returns Type Description ISqlExpression | Improve this Doc View Source GetValue<T>(Int32) Declaration T GetValue<T>(int index) Parameters Type Name Description System.Int32 index Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValue<T>(String) Declaration T GetValue<T>(string argName) Parameters Type Name Description System.String argName Returns Type Description T Type Parameters Name Description T Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) ExtensionlBuilderExtensions.AddParameter(Sql.ISqExtensionBuilder, String, String) ExtensionlBuilderExtensions.AddExpression(Sql.ISqExtensionBuilder, String, String) ExtensionlBuilderExtensions.Add(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Add<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Add(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Inc(Sql.ISqExtensionBuilder, ISqlExpression) ExtensionlBuilderExtensions.Sub(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Sub<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Sub(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Dec(Sql.ISqExtensionBuilder, ISqlExpression) ExtensionlBuilderExtensions.Mul(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Mul<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Mul(Sql.ISqExtensionBuilder, ISqlExpression, Int32) ExtensionlBuilderExtensions.Div(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression, Type) ExtensionlBuilderExtensions.Div<T>(Sql.ISqExtensionBuilder, ISqlExpression, ISqlExpression) ExtensionlBuilderExtensions.Div(Sql.ISqExtensionBuilder, ISqlExpression, Int32) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.ISqlExtension.html": {
    "href": "api/LinqToDB.Sql.ISqlExtension.html",
    "title": "Interface Sql.ISqlExtension | Linq To DB (aka linq2db)",
    "keywords": "Interface Sql.ISqlExtension Namespace : LinqToDB Assembly : linq2db.dll Syntax public interface ISqlExtension Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) AnalyticFunctions.Average<T>(Sql.ISqlExtension, Nullable<Object>) AnalyticFunctions.Average<T>(Sql.ISqlExtension, Nullable<Object>, Sql.AggregateModifier) AnalyticFunctions.Corr<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) AnalyticFunctions.Count(Sql.ISqlExtension) AnalyticFunctions.Count<T>(Sql.ISqlExtension, T) AnalyticFunctions.Count(Sql.ISqlExtension, Nullable<Object>, Sql.AggregateModifier) AnalyticFunctions.LongCount(Sql.ISqlExtension) AnalyticFunctions.LongCount<T>(Sql.ISqlExtension, T) AnalyticFunctions.LongCount(Sql.ISqlExtension, Nullable<Object>, Sql.AggregateModifier) AnalyticFunctions.CovarPop<T>(Sql.ISqlExtension, T, T) AnalyticFunctions.CovarSamp<T>(Sql.ISqlExtension, T, T) AnalyticFunctions.CumeDist<TR>(Sql.ISqlExtension, Nullable<Object>[]) AnalyticFunctions.CumeDist<TR>(Sql.ISqlExtension) AnalyticFunctions.DenseRank(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) AnalyticFunctions.DenseRank(Sql.ISqlExtension) AnalyticFunctions.FirstValue<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lag<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lag<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) AnalyticFunctions.LastValue<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lead<T>(Sql.ISqlExtension, T, Sql.Nulls) AnalyticFunctions.Lead<T>(Sql.ISqlExtension, T, Sql.Nulls, Int32, Nullable<Int32>) AnalyticFunctions.ListAgg<T>(Sql.ISqlExtension, T) AnalyticFunctions.ListAgg<T>(Sql.ISqlExtension, T, String) AnalyticFunctions.Max<T>(Sql.ISqlExtension, T) AnalyticFunctions.Max<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) AnalyticFunctions.Median<T>(Sql.ISqlExtension, T) AnalyticFunctions.Min<T>(Sql.ISqlExtension, T) AnalyticFunctions.Min<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) AnalyticFunctions.NthValue<T>(Sql.ISqlExtension, T, Int64) AnalyticFunctions.NthValue<T>(Sql.ISqlExtension, T, Int64, Sql.From, Sql.Nulls) AnalyticFunctions.NTile<T>(Sql.ISqlExtension, T) AnalyticFunctions.PercentRank<T>(Sql.ISqlExtension, Nullable<Object>[]) AnalyticFunctions.PercentRank<T>(Sql.ISqlExtension) AnalyticFunctions.PercentileCont<T>(Sql.ISqlExtension, Nullable<Object>) AnalyticFunctions.PercentileDisc<T>(Sql.ISqlExtension, Nullable<Object>) AnalyticFunctions.Rank(Sql.ISqlExtension, Nullable<Object>[]) AnalyticFunctions.Rank(Sql.ISqlExtension) AnalyticFunctions.RatioToReport<TR>(Sql.ISqlExtension, Nullable<Object>) AnalyticFunctions.RegrSlope<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) AnalyticFunctions.RegrIntercept<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) AnalyticFunctions.RegrCount(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) AnalyticFunctions.RegrR2<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) AnalyticFunctions.RegrAvgX<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) AnalyticFunctions.RegrAvgY<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) AnalyticFunctions.RegrSXX<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) AnalyticFunctions.RegrSYY<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) AnalyticFunctions.RegrSXY<T>(Sql.ISqlExtension, Nullable<Object>, Nullable<Object>) AnalyticFunctions.RowNumber(Sql.ISqlExtension) AnalyticFunctions.StdDev<T>(Sql.ISqlExtension, Nullable<Object>) AnalyticFunctions.StdDev<T>(Sql.ISqlExtension, Nullable<Object>, Sql.AggregateModifier) AnalyticFunctions.StdDevPop<T>(Sql.ISqlExtension, Nullable<Object>) AnalyticFunctions.StdDevSamp<T>(Sql.ISqlExtension, Nullable<Object>) AnalyticFunctions.Sum<T>(Sql.ISqlExtension, T) AnalyticFunctions.Sum<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) AnalyticFunctions.VarPop<T>(Sql.ISqlExtension, Nullable<Object>) AnalyticFunctions.VarSamp<T>(Sql.ISqlExtension, Nullable<Object>) AnalyticFunctions.Variance<T>(Sql.ISqlExtension, Nullable<Object>) AnalyticFunctions.Variance<T>(Sql.ISqlExtension, Nullable<Object>, Sql.AggregateModifier) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T) MySqlExtensions.MySql(Sql.ISqlExtension) PostgreSQLExtensions.PostgreSQL(Sql.ISqlExtension) PostgreSQLExtensions.ArrayAggregate<T>(Sql.ISqlExtension, T) PostgreSQLExtensions.ArrayAggregate<T>(Sql.ISqlExtension, T, Sql.AggregateModifier) SQLiteExtensions.SQLite(Sql.ISqlExtension) SqlServerExtensions.SqlServer(Sql.ISqlExtension)"
  },
  "api/LinqToDB.Sql.Nulls.html": {
    "href": "api/LinqToDB.Sql.Nulls.html",
    "title": "Enum Sql.Nulls | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.Nulls Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum Nulls : int Fields Name Description Ignore None Respect Extension Methods Map.DeepCopy<Sql.Nulls>() Sql.IsDistinctFrom<Sql.Nulls>(Sql.Nulls) Sql.IsDistinctFrom<Sql.Nulls>(Nullable<Sql.Nulls>) Sql.IsNotDistinctFrom<Sql.Nulls>(Sql.Nulls) Sql.IsNotDistinctFrom<Sql.Nulls>(Nullable<Sql.Nulls>) SqlExtensions.In<Sql.Nulls>(IEnumerable<Sql.Nulls>) SqlExtensions.In<Sql.Nulls>(IQueryable<Sql.Nulls>) SqlExtensions.In<Sql.Nulls>(Sql.Nulls[]) SqlExtensions.In<Sql.Nulls>(Sql.Nulls, Sql.Nulls) SqlExtensions.In<Sql.Nulls>(Sql.Nulls, Sql.Nulls, Sql.Nulls) SqlExtensions.NotIn<Sql.Nulls>(IEnumerable<Sql.Nulls>) SqlExtensions.NotIn<Sql.Nulls>(IQueryable<Sql.Nulls>) SqlExtensions.NotIn<Sql.Nulls>(Sql.Nulls[]) SqlExtensions.NotIn<Sql.Nulls>(Sql.Nulls, Sql.Nulls) SqlExtensions.NotIn<Sql.Nulls>(Sql.Nulls, Sql.Nulls, Sql.Nulls)"
  },
  "api/LinqToDB.Sql.NullsPosition.html": {
    "href": "api/LinqToDB.Sql.NullsPosition.html",
    "title": "Enum Sql.NullsPosition | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.NullsPosition Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum NullsPosition : int Fields Name Description First Last None Extension Methods Map.DeepCopy<Sql.NullsPosition>() Sql.IsDistinctFrom<Sql.NullsPosition>(Sql.NullsPosition) Sql.IsDistinctFrom<Sql.NullsPosition>(Nullable<Sql.NullsPosition>) Sql.IsNotDistinctFrom<Sql.NullsPosition>(Sql.NullsPosition) Sql.IsNotDistinctFrom<Sql.NullsPosition>(Nullable<Sql.NullsPosition>) SqlExtensions.In<Sql.NullsPosition>(IEnumerable<Sql.NullsPosition>) SqlExtensions.In<Sql.NullsPosition>(IQueryable<Sql.NullsPosition>) SqlExtensions.In<Sql.NullsPosition>(Sql.NullsPosition[]) SqlExtensions.In<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition) SqlExtensions.In<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition, Sql.NullsPosition) SqlExtensions.NotIn<Sql.NullsPosition>(IEnumerable<Sql.NullsPosition>) SqlExtensions.NotIn<Sql.NullsPosition>(IQueryable<Sql.NullsPosition>) SqlExtensions.NotIn<Sql.NullsPosition>(Sql.NullsPosition[]) SqlExtensions.NotIn<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition) SqlExtensions.NotIn<Sql.NullsPosition>(Sql.NullsPosition, Sql.NullsPosition, Sql.NullsPosition)"
  },
  "api/LinqToDB.Sql.PropertyAttribute.html": {
    "href": "api/LinqToDB.Sql.PropertyAttribute.html",
    "title": "Class Sql.PropertyAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.PropertyAttribute An attribute used to define a static value or a Database side property/method that takes no parameters. Inheritance System.Object Sql.ExpressionAttribute Sql.PropertyAttribute Inherited Members Sql.ExpressionAttribute.Expression Sql.ExpressionAttribute.ArgIndices Sql.ExpressionAttribute.Precedence Sql.ExpressionAttribute.Configuration Sql.ExpressionAttribute.ServerSideOnly Sql.ExpressionAttribute.PreferServerSide Sql.ExpressionAttribute.InlineParameters Sql.ExpressionAttribute.ExpectExpression Sql.ExpressionAttribute.IsPredicate Sql.ExpressionAttribute.IsAggregate Sql.ExpressionAttribute.IsWindowFunction Sql.ExpressionAttribute.IsPure Sql.ExpressionAttribute.IsNullable Sql.ExpressionAttribute.CanBeNull Sql.ExpressionAttribute.GetCanBeNull(ISqlExpression[]) Sql.ExpressionAttribute.CalcCanBeNull(Sql.IsNullableType, IEnumerable<Boolean>) Sql.ExpressionAttribute.ResolveExpressionValues<TContext>(TContext, String, Func<TContext, String, Nullable<String>, Nullable<String>>) Sql.ExpressionAttribute.UnknownExpression Sql.ExpressionAttribute.PrepareParameterValues(Expression, Nullable<String>, Boolean, List<Nullable<Expression>>, Nullable<List<ISqlExpression>>) Sql.ExpressionAttribute.PrepareArguments<TContext>(TContext, String, Int32[], Boolean, List<Nullable<Expression>>, Nullable<List<ISqlExpression>>, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Sql.ExpressionAttribute.GetIsPredicate(Expression) Namespace : LinqToDB Assembly : linq2db.dll Syntax public class PropertyAttribute : Sql.ExpressionAttribute Constructors | Improve this Doc View Source PropertyAttribute() Creates a property to be used in SQL The name of the Property/Method will be used. Declaration public PropertyAttribute() | Improve this Doc View Source PropertyAttribute(String) Creates a Property to be used in SQL. Declaration public PropertyAttribute(string name) Parameters Type Name Description System.String name The name of the property. | Improve this Doc View Source PropertyAttribute(String, String) Creates a property to be used in SQL for the given ProviderName . Declaration public PropertyAttribute(string configuration, string name) Parameters Type Name Description System.String configuration The ProviderName the property will be used under. System.String name The name of the property. Properties | Improve this Doc View Source Name The name of the Property. Declaration public string? Name { get; set; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source GetExpression<TContext>(TContext, IDataContext, SelectQuery, Expression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Declaration public override ISqlExpression GetExpression<TContext>(TContext context, IDataContext dataContext, SelectQuery query, Expression expression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression> converter) Parameters Type Name Description TContext context IDataContext dataContext SelectQuery query Expression expression Func <TContext, Expression , ColumnDescriptor , ISqlExpression > converter Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.Sql.ExpressionAttribute.GetExpression<TContext>(TContext, LinqToDB.IDataContext, LinqToDB.SqlQuery.SelectQuery, Expression, Func<TContext, Expression, LinqToDB.Mapping.ColumnDescriptor, LinqToDB.SqlQuery.ISqlExpression>) Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.SqlExtension.html": {
    "href": "api/LinqToDB.Sql.SqlExtension.html",
    "title": "Class Sql.SqlExtension | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.SqlExtension Inheritance System.Object Sql.SqlExtension Namespace : LinqToDB Assembly : linq2db.dll Syntax public class SqlExtension : object Constructors | Improve this Doc View Source SqlExtension(Nullable<Type>, String, Int32, Int32, Boolean, Boolean, Boolean, Boolean, Nullable<Boolean>, Sql.SqlExtensionParam[]) Declaration public SqlExtension(Type? systemType, string expr, int precedence, int chainPrecedence, bool isAggregate, bool isWindowFunction, bool isPure, bool isPredicate, bool? canBeNull, params Sql.SqlExtensionParam[] parameters) Parameters Type Name Description System.Nullable < Type > systemType System.String expr System.Int32 precedence System.Int32 chainPrecedence System.Boolean isAggregate System.Boolean isWindowFunction System.Boolean isPure System.Boolean isPredicate System.Nullable < System.Boolean > canBeNull Sql.SqlExtensionParam [] parameters | Improve this Doc View Source SqlExtension(String, Sql.SqlExtensionParam[]) Declaration public SqlExtension(string expr, params Sql.SqlExtensionParam[] parameters) Parameters Type Name Description System.String expr Sql.SqlExtensionParam [] parameters Properties | Improve this Doc View Source CanBeNull Declaration public bool? CanBeNull { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source ChainPrecedence Declaration public int ChainPrecedence { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Expr Declaration public string Expr { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsAggregate Declaration public bool IsAggregate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPredicate Declaration public bool IsPredicate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPure Declaration public bool IsPure { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsWindowFunction Declaration public bool IsWindowFunction { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source NamedParameters Declaration public Dictionary<string, List<Sql.SqlExtensionParam>> NamedParameters { get; } Property Value Type Description Dictionary < System.String , List < Sql.SqlExtensionParam >> | Improve this Doc View Source Precedence Declaration public int Precedence { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SystemType Declaration public Type? SystemType { get; set; } Property Value Type Description System.Nullable < Type > Methods | Improve this Doc View Source AddParameter(Sql.SqlExtensionParam) Declaration public Sql.SqlExtensionParam AddParameter(Sql.SqlExtensionParam param) Parameters Type Name Description Sql.SqlExtensionParam param Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source AddParameter(String, ISqlExpression) Declaration public Sql.SqlExtensionParam AddParameter(string name, ISqlExpression sqlExpression) Parameters Type Name Description System.String name ISqlExpression sqlExpression Returns Type Description Sql.SqlExtensionParam | Improve this Doc View Source GetParameters() Declaration public Sql.SqlExtensionParam[] GetParameters() Returns Type Description Sql.SqlExtensionParam [] | Improve this Doc View Source GetParametersByName(String) Declaration public IEnumerable<Sql.SqlExtensionParam> GetParametersByName(string name) Parameters Type Name Description System.String name Returns Type Description IEnumerable < Sql.SqlExtensionParam > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.SqlExtensionParam.html": {
    "href": "api/LinqToDB.Sql.SqlExtensionParam.html",
    "title": "Class Sql.SqlExtensionParam | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.SqlExtensionParam Inheritance System.Object Sql.SqlExtensionParam Namespace : LinqToDB Assembly : linq2db.dll Syntax public class SqlExtensionParam : object Constructors | Improve this Doc View Source SqlExtensionParam(Nullable<String>, Sql.SqlExtension) Declaration public SqlExtensionParam(string? name, Sql.SqlExtension extension) Parameters Type Name Description System.Nullable < System.String > name Sql.SqlExtension extension | Improve this Doc View Source SqlExtensionParam(Nullable<String>, ISqlExpression) Declaration public SqlExtensionParam(string? name, ISqlExpression expression) Parameters Type Name Description System.Nullable < System.String > name ISqlExpression expression Properties | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source Extension Declaration public Sql.SqlExtension Extension { get; set; } Property Value Type Description Sql.SqlExtension | Improve this Doc View Source Name Declaration public string? Name { get; set; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source ToDebugString() Declaration public string ToDebugString() Returns Type Description System.String Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.TableExpressionAttribute.html": {
    "href": "api/LinqToDB.Sql.TableExpressionAttribute.html",
    "title": "Class Sql.TableExpressionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.TableExpressionAttribute Inheritance System.Object Sql.TableFunctionAttribute Sql.TableExpressionAttribute CalculationViewInputParametersExpressionAttribute Inherited Members Sql.TableFunctionAttribute.Configuration Sql.TableFunctionAttribute.Schema Sql.TableFunctionAttribute.Database Sql.TableFunctionAttribute.Server Sql.TableFunctionAttribute.ArgIndices Namespace : LinqToDB Assembly : linq2db.dll Syntax public class TableExpressionAttribute : Sql.TableFunctionAttribute Constructors | Improve this Doc View Source TableExpressionAttribute(String) Declaration public TableExpressionAttribute(string expression) Parameters Type Name Description System.String expression | Improve this Doc View Source TableExpressionAttribute(String, Int32[]) Declaration public TableExpressionAttribute(string expression, params int[] argIndices) Parameters Type Name Description System.String expression System.Int32 [] argIndices | Improve this Doc View Source TableExpressionAttribute(String, String) Declaration public TableExpressionAttribute(string sqlProvider, string expression) Parameters Type Name Description System.String sqlProvider System.String expression | Improve this Doc View Source TableExpressionAttribute(String, String, Int32[]) Declaration public TableExpressionAttribute(string sqlProvider, string expression, params int[] argIndices) Parameters Type Name Description System.String sqlProvider System.String expression System.Int32 [] argIndices Properties | Improve this Doc View Source Expression Declaration public string? Expression { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Name Declaration protected string? Name { get; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source SetTable<TContext>(TContext, ISqlBuilder, MappingSchema, SqlTable, MethodCallExpression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Declaration public override void SetTable<TContext>(TContext context, ISqlBuilder sqlBuilder, MappingSchema mappingSchema, SqlTable table, MethodCallExpression methodCall, Func<TContext, Expression, ColumnDescriptor, ISqlExpression> converter) Parameters Type Name Description TContext context ISqlBuilder sqlBuilder MappingSchema mappingSchema SqlTable table MethodCallExpression methodCall Func <TContext, Expression , ColumnDescriptor , ISqlExpression > converter Type Parameters Name Description TContext Overrides LinqToDB.Sql.TableFunctionAttribute.SetTable<TContext>(TContext, LinqToDB.SqlProvider.ISqlBuilder, LinqToDB.Mapping.MappingSchema, LinqToDB.SqlQuery.SqlTable, MethodCallExpression, Func<TContext, Expression, LinqToDB.Mapping.ColumnDescriptor, LinqToDB.SqlQuery.ISqlExpression>) Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.TableFunctionAttribute.html": {
    "href": "api/LinqToDB.Sql.TableFunctionAttribute.html",
    "title": "Class Sql.TableFunctionAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class Sql.TableFunctionAttribute Inheritance System.Object Sql.TableFunctionAttribute Sql.TableExpressionAttribute Namespace : LinqToDB Assembly : linq2db.dll Syntax public class TableFunctionAttribute : Attribute Constructors | Improve this Doc View Source TableFunctionAttribute() Declaration public TableFunctionAttribute() | Improve this Doc View Source TableFunctionAttribute(String) Declaration public TableFunctionAttribute(string name) Parameters Type Name Description System.String name | Improve this Doc View Source TableFunctionAttribute(String, Int32[]) Declaration public TableFunctionAttribute(string name, params int[] argIndices) Parameters Type Name Description System.String name System.Int32 [] argIndices | Improve this Doc View Source TableFunctionAttribute(String, String) Declaration public TableFunctionAttribute(string configuration, string name) Parameters Type Name Description System.String configuration System.String name | Improve this Doc View Source TableFunctionAttribute(String, String, Int32[]) Declaration public TableFunctionAttribute(string configuration, string name, params int[] argIndices) Parameters Type Name Description System.String configuration System.String name System.Int32 [] argIndices Properties | Improve this Doc View Source ArgIndices Declaration public int[] ArgIndices { get; set; } Property Value Type Description System.Int32 [] | Improve this Doc View Source Configuration Declaration public string? Configuration { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Database Declaration public string? Database { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Name Declaration public string? Name { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Schema Declaration public string? Schema { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Server Declaration public string? Server { get; set; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source SetTable<TContext>(TContext, ISqlBuilder, MappingSchema, SqlTable, MethodCallExpression, Func<TContext, Expression, ColumnDescriptor, ISqlExpression>) Declaration public virtual void SetTable<TContext>(TContext context, ISqlBuilder sqlBuilder, MappingSchema mappingSchema, SqlTable table, MethodCallExpression methodCall, Func<TContext, Expression, ColumnDescriptor, ISqlExpression> converter) Parameters Type Name Description TContext context ISqlBuilder sqlBuilder MappingSchema mappingSchema SqlTable table MethodCallExpression methodCall Func <TContext, Expression , ColumnDescriptor , ISqlExpression > converter Type Parameters Name Description TContext Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Sql.TableQualification.html": {
    "href": "api/LinqToDB.Sql.TableQualification.html",
    "title": "Enum Sql.TableQualification | Linq To DB (aka linq2db)",
    "keywords": "Enum Sql.TableQualification Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum TableQualification : int Fields Name Description DatabaseName Full None SchemaName ServerName TableName TableOptions Extension Methods Map.DeepCopy<Sql.TableQualification>() Sql.IsDistinctFrom<Sql.TableQualification>(Sql.TableQualification) Sql.IsDistinctFrom<Sql.TableQualification>(Nullable<Sql.TableQualification>) Sql.IsNotDistinctFrom<Sql.TableQualification>(Sql.TableQualification) Sql.IsNotDistinctFrom<Sql.TableQualification>(Nullable<Sql.TableQualification>) SqlExtensions.In<Sql.TableQualification>(IEnumerable<Sql.TableQualification>) SqlExtensions.In<Sql.TableQualification>(IQueryable<Sql.TableQualification>) SqlExtensions.In<Sql.TableQualification>(Sql.TableQualification[]) SqlExtensions.In<Sql.TableQualification>(Sql.TableQualification, Sql.TableQualification) SqlExtensions.In<Sql.TableQualification>(Sql.TableQualification, Sql.TableQualification, Sql.TableQualification) SqlExtensions.NotIn<Sql.TableQualification>(IEnumerable<Sql.TableQualification>) SqlExtensions.NotIn<Sql.TableQualification>(IQueryable<Sql.TableQualification>) SqlExtensions.NotIn<Sql.TableQualification>(Sql.TableQualification[]) SqlExtensions.NotIn<Sql.TableQualification>(Sql.TableQualification, Sql.TableQualification) SqlExtensions.NotIn<Sql.TableQualification>(Sql.TableQualification, Sql.TableQualification, Sql.TableQualification)"
  },
  "api/LinqToDB.SqlJoinType.html": {
    "href": "api/LinqToDB.SqlJoinType.html",
    "title": "Enum SqlJoinType | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlJoinType Defines join type. Used with join LINQ helpers. Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum SqlJoinType : int Fields Name Description Full Full outer join. Inner Inner join. Left Left outer join. Right Right outer join. Extension Methods Map.DeepCopy<SqlJoinType>() Sql.IsDistinctFrom<SqlJoinType>(SqlJoinType) Sql.IsDistinctFrom<SqlJoinType>(Nullable<SqlJoinType>) Sql.IsNotDistinctFrom<SqlJoinType>(SqlJoinType) Sql.IsNotDistinctFrom<SqlJoinType>(Nullable<SqlJoinType>) SqlExtensions.In<SqlJoinType>(IEnumerable<SqlJoinType>) SqlExtensions.In<SqlJoinType>(IQueryable<SqlJoinType>) SqlExtensions.In<SqlJoinType>(SqlJoinType[]) SqlExtensions.In<SqlJoinType>(SqlJoinType, SqlJoinType) SqlExtensions.In<SqlJoinType>(SqlJoinType, SqlJoinType, SqlJoinType) SqlExtensions.NotIn<SqlJoinType>(IEnumerable<SqlJoinType>) SqlExtensions.NotIn<SqlJoinType>(IQueryable<SqlJoinType>) SqlExtensions.NotIn<SqlJoinType>(SqlJoinType[]) SqlExtensions.NotIn<SqlJoinType>(SqlJoinType, SqlJoinType) SqlExtensions.NotIn<SqlJoinType>(SqlJoinType, SqlJoinType, SqlJoinType)"
  },
  "api/LinqToDB.SqlProvider.BasicSqlBuilder.ColumnSelector.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlBuilder.ColumnSelector.html",
    "title": "Delegate BasicSqlBuilder.ColumnSelector | Linq To DB (aka linq2db)",
    "keywords": "Delegate BasicSqlBuilder.ColumnSelector Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax protected delegate IEnumerable<SqlColumn> ColumnSelector(); Returns Type Description IEnumerable < SqlColumn > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.BasicSqlBuilder.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlBuilder.html",
    "title": "Class BasicSqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class BasicSqlBuilder Inheritance System.Object BasicSqlBuilder FirebirdSqlBuilder PostgreSQLSqlBuilder SQLiteSqlBuilder Implements ISqlBuilder Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public abstract class BasicSqlBuilder : object, ISqlBuilder Constructors | Improve this Doc View Source BasicSqlBuilder(MappingSchema, ISqlOptimizer, SqlProviderFlags) Declaration protected BasicSqlBuilder(MappingSchema mappingSchema, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags) Parameters Type Name Description MappingSchema mappingSchema ISqlOptimizer sqlOptimizer SqlProviderFlags sqlProviderFlags Fields | Improve this Doc View Source BuildStep Declaration protected BasicSqlBuilder.Step BuildStep Field Value Type Description BasicSqlBuilder.Step | Improve this Doc View Source EndLine Declaration protected static readonly char[] EndLine Field Value Type Description System.Char [] | Improve this Doc View Source Indent Declaration protected int Indent Field Value Type Description System.Int32 | Improve this Doc View Source MappingSchema Declaration protected readonly MappingSchema MappingSchema Field Value Type Description MappingSchema | Improve this Doc View Source SkipAlias Declaration protected bool SkipAlias Field Value Type Description System.Boolean | Improve this Doc View Source SqlOptimizer Declaration protected ISqlOptimizer SqlOptimizer Field Value Type Description ISqlOptimizer | Improve this Doc View Source SqlProviderFlags Declaration protected SqlProviderFlags SqlProviderFlags Field Value Type Description SqlProviderFlags | Improve this Doc View Source Statement Declaration protected SqlStatement Statement Field Value Type Description SqlStatement | Improve this Doc View Source StringBuilder Declaration protected StringBuilder StringBuilder Field Value Type Description StringBuilder Properties | Improve this Doc View Source Comma End-of-line comma separator. Default value: \",\" Declaration protected virtual string Comma { get; } Property Value Type Description System.String | Improve this Doc View Source FakeTable If IsValuesSyntaxSupported set to false and provider doesn't support SELECTs without FROM clause, this property should contain name of table with single record. Declaration protected virtual string? FakeTable { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source FakeTableSchema If IsValuesSyntaxSupported set to false and provider doesn't support SELECTs without FROM clause, this property could contain name of schema for table with single record. Declaration protected virtual string? FakeTableSchema { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source InlineComma Inline comma separator. Default value: \", \" Declaration protected virtual string InlineComma { get; } Property Value Type Description System.String | Improve this Doc View Source isEmptyValuesSourceSupported If true, builder will generate command for empty enumerable source; Otherwise exception will be generated. Declaration protected virtual bool isEmptyValuesSourceSupported { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNestedJoinParenthesisRequired Declaration public virtual bool IsNestedJoinParenthesisRequired { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNestedJoinSupported Declaration public virtual bool IsNestedJoinSupported { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsRecursiveCteKeywordRequired Declaration protected virtual bool IsRecursiveCteKeywordRequired { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsValuesSyntaxSupported If true, provider supports list of VALUES as a source element of merge command. Declaration protected virtual bool IsValuesSyntaxSupported { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public virtual string Name { get; } Property Value Type Description System.String | Improve this Doc View Source OffsetFirst Declaration protected virtual bool OffsetFirst { get; } Property Value Type Description System.Boolean | Improve this Doc View Source OpenParens End-of-line open parentheses element. Default value: \"(\" Declaration protected virtual string OpenParens { get; } Property Value Type Description System.String | Improve this Doc View Source OptimizationContext Declaration public OptimizationContext OptimizationContext { get; protected set; } Property Value Type Description OptimizationContext | Improve this Doc View Source RequiresConstantColumnAliases If true, provider require column aliases for each column. E.g. as table_alias (column_alias1, column_alias2). Declaration protected virtual bool RequiresConstantColumnAliases { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipFirst Declaration protected virtual bool SkipFirst { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipFormat Declaration protected virtual string? SkipFormat { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SupportsBooleanInColumn Declaration protected virtual bool SupportsBooleanInColumn { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsColumnAliasesInSource If true, provider supports column aliases specification after table alias. E.g. as table_alias (column_alias1, column_alias2). Declaration protected virtual bool SupportsColumnAliasesInSource { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsNullInColumn Declaration protected virtual bool SupportsNullInColumn { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TakePercent Declaration protected virtual string TakePercent { get; } Property Value Type Description System.String | Improve this Doc View Source TakeTies Declaration protected virtual string TakeTies { get; } Property Value Type Description System.String | Improve this Doc View Source ValueToSqlConverter Declaration protected ValueToSqlConverter ValueToSqlConverter { get; } Property Value Type Description ValueToSqlConverter | Improve this Doc View Source WrapJoinCondition True if it is needed to wrap join condition with () Declaration public virtual bool WrapJoinCondition { get; } Property Value Type Description System.Boolean Examples INNER JOIN Table2 t2 ON (t1.Value = t2.Value) Methods | Improve this Doc View Source AlternativeGetSelectedColumns(SelectQuery, BasicSqlBuilder.ColumnSelector) Declaration protected IEnumerable<SqlColumn> AlternativeGetSelectedColumns(SelectQuery selectQuery, BasicSqlBuilder.ColumnSelector columnSelector) Parameters Type Name Description SelectQuery selectQuery BasicSqlBuilder.ColumnSelector columnSelector Returns Type Description IEnumerable < SqlColumn > | Improve this Doc View Source AppendIndent() Declaration protected StringBuilder AppendIndent() Returns Type Description StringBuilder | Improve this Doc View Source ApplyQueryHints(String, IReadOnlyCollection<String>) Declaration public string ApplyQueryHints(string sqlText, IReadOnlyCollection<string> queryHints) Parameters Type Name Description System.String sqlText IReadOnlyCollection < System.String > queryHints Returns Type Description System.String | Improve this Doc View Source BuildBinaryExpression(SqlBinaryExpression) Declaration protected virtual void BuildBinaryExpression(SqlBinaryExpression expr) Parameters Type Name Description SqlBinaryExpression expr | Improve this Doc View Source BuildColumnExpression(SelectQuery, ISqlExpression, Nullable<String>, ref Boolean) Declaration protected virtual void BuildColumnExpression(SelectQuery selectQuery, ISqlExpression expr, string? alias, ref bool addAlias) Parameters Type Name Description SelectQuery selectQuery ISqlExpression expr System.Nullable < System.String > alias System.Boolean addAlias | Improve this Doc View Source BuildColumns(SelectQuery) Declaration protected virtual void BuildColumns(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildCommand(SqlStatement, Int32) Declaration protected virtual void BuildCommand(SqlStatement statement, int commandNumber) Parameters Type Name Description SqlStatement statement System.Int32 commandNumber | Improve this Doc View Source BuildCreateTableCommand(SqlTable) Declaration protected virtual void BuildCreateTableCommand(SqlTable table) Parameters Type Name Description SqlTable table | Improve this Doc View Source BuildCreateTableFieldType(SqlField) Declaration protected virtual void BuildCreateTableFieldType(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source BuildCreateTableIdentityAttribute1(SqlField) Declaration protected virtual void BuildCreateTableIdentityAttribute1(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source BuildCreateTableIdentityAttribute2(SqlField) Declaration protected virtual void BuildCreateTableIdentityAttribute2(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source BuildCreateTableNullAttribute(SqlField, DefaultNullable) Declaration protected virtual void BuildCreateTableNullAttribute(SqlField field, DefaultNullable defaultNullable) Parameters Type Name Description SqlField field DefaultNullable defaultNullable | Improve this Doc View Source BuildCreateTablePrimaryKey(SqlCreateTableStatement, String, IEnumerable<String>) Declaration protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable<string> fieldNames) Parameters Type Name Description SqlCreateTableStatement createTable System.String pkName IEnumerable < System.String > fieldNames | Improve this Doc View Source BuildCreateTableStatement(SqlCreateTableStatement) Declaration protected virtual void BuildCreateTableStatement(SqlCreateTableStatement createTable) Parameters Type Name Description SqlCreateTableStatement createTable | Improve this Doc View Source BuildCteBody(SelectQuery) Declaration protected virtual void BuildCteBody(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildDataType(SqlDataType, Boolean) Declaration protected void BuildDataType(SqlDataType type, bool forCreateTable) Parameters Type Name Description SqlDataType type System.Boolean forCreateTable | Improve this Doc View Source BuildDataType(StringBuilder, SqlDataType) Appends an SqlDataType 's String to a provided StringBuilder Declaration public StringBuilder BuildDataType(StringBuilder sb, SqlDataType dataType) Parameters Type Name Description StringBuilder sb SqlDataType dataType Returns Type Description StringBuilder The stringbuilder with the type information appended. | Improve this Doc View Source BuildDataTypeFromDataType(SqlDataType, Boolean) Declaration protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable) Parameters Type Name Description SqlDataType type System.Boolean forCreateTable | Improve this Doc View Source BuildDeleteClause(SqlDeleteStatement) Declaration protected virtual void BuildDeleteClause(SqlDeleteStatement deleteStatement) Parameters Type Name Description SqlDeleteStatement deleteStatement | Improve this Doc View Source BuildDeleteQuery(SqlDeleteStatement) Declaration protected virtual void BuildDeleteQuery(SqlDeleteStatement deleteStatement) Parameters Type Name Description SqlDeleteStatement deleteStatement | Improve this Doc View Source BuildDeleteQuery2(SqlDeleteStatement) Declaration protected void BuildDeleteQuery2(SqlDeleteStatement deleteStatement) Parameters Type Name Description SqlDeleteStatement deleteStatement | Improve this Doc View Source BuildDropTableStatement(SqlDropTableStatement) Declaration protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable) Parameters Type Name Description SqlDropTableStatement dropTable | Improve this Doc View Source BuildDropTableStatementIfExists(SqlDropTableStatement) Declaration protected void BuildDropTableStatementIfExists(SqlDropTableStatement dropTable) Parameters Type Name Description SqlDropTableStatement dropTable | Improve this Doc View Source BuildEmptyInsert(SqlInsertClause) Declaration protected virtual void BuildEmptyInsert(SqlInsertClause insertClause) Parameters Type Name Description SqlInsertClause insertClause | Improve this Doc View Source BuildEmptyValues(SqlValuesTable) Declaration protected void BuildEmptyValues(SqlValuesTable valuesTable) Parameters Type Name Description SqlValuesTable valuesTable | Improve this Doc View Source BuildEndCreateTableStatement(SqlCreateTableStatement) Declaration protected virtual void BuildEndCreateTableStatement(SqlCreateTableStatement createTable) Parameters Type Name Description SqlCreateTableStatement createTable | Improve this Doc View Source BuildExpression(ISqlExpression) Declaration protected StringBuilder BuildExpression(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description StringBuilder | Improve this Doc View Source BuildExpression(ISqlExpression, Boolean, Boolean, Boolean) Declaration protected void BuildExpression(ISqlExpression expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound = true) Parameters Type Name Description ISqlExpression expr System.Boolean buildTableName System.Boolean checkParentheses System.Boolean throwExceptionIfTableNotFound | Improve this Doc View Source BuildExpression(ISqlExpression, Boolean, Boolean, Nullable<String>, ref Boolean, Boolean) Declaration protected virtual StringBuilder BuildExpression(ISqlExpression expr, bool buildTableName, bool checkParentheses, string? alias, ref bool addAlias, bool throwExceptionIfTableNotFound = true) Parameters Type Name Description ISqlExpression expr System.Boolean buildTableName System.Boolean checkParentheses System.Nullable < System.String > alias System.Boolean addAlias System.Boolean throwExceptionIfTableNotFound Returns Type Description StringBuilder | Improve this Doc View Source BuildExpression(Int32, ISqlExpression) Declaration protected void BuildExpression(int precedence, ISqlExpression expr) Parameters Type Name Description System.Int32 precedence ISqlExpression expr | Improve this Doc View Source BuildFakeTableName() Declaration protected virtual bool BuildFakeTableName() Returns Type Description System.Boolean | Improve this Doc View Source BuildFromClause(SqlStatement, SelectQuery) Declaration protected virtual void BuildFromClause(SqlStatement statement, SelectQuery selectQuery) Parameters Type Name Description SqlStatement statement SelectQuery selectQuery | Improve this Doc View Source BuildFunction(SqlFunction) Declaration protected virtual void BuildFunction(SqlFunction func) Parameters Type Name Description SqlFunction func | Improve this Doc View Source BuildGetIdentity(SqlInsertClause) Declaration protected virtual void BuildGetIdentity(SqlInsertClause insertClause) Parameters Type Name Description SqlInsertClause insertClause | Improve this Doc View Source BuildGroupByBody(GroupingType, List<ISqlExpression>) Declaration protected virtual void BuildGroupByBody(GroupingType groupingType, List<ISqlExpression> items) Parameters Type Name Description GroupingType groupingType List < ISqlExpression > items | Improve this Doc View Source BuildGroupByClause(SelectQuery) Declaration protected virtual void BuildGroupByClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildHavingClause(SelectQuery) Declaration protected virtual void BuildHavingClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildInsertClause(SqlStatement, SqlInsertClause, Boolean) Declaration protected void BuildInsertClause(SqlStatement statement, SqlInsertClause insertClause, bool addAlias) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause System.Boolean addAlias | Improve this Doc View Source BuildInsertClause(SqlStatement, SqlInsertClause, Nullable<String>, Boolean, Boolean) Declaration protected virtual void BuildInsertClause(SqlStatement statement, SqlInsertClause insertClause, string? insertText, bool appendTableName, bool addAlias) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause System.Nullable < System.String > insertText System.Boolean appendTableName System.Boolean addAlias | Improve this Doc View Source BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement) Declaration protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate) Parameters Type Name Description SqlInsertOrUpdateStatement insertOrUpdate | Improve this Doc View Source BuildInsertOrUpdateQueryAsMerge(SqlInsertOrUpdateStatement, Nullable<String>) Declaration protected virtual void BuildInsertOrUpdateQueryAsMerge(SqlInsertOrUpdateStatement insertOrUpdate, string? fromDummyTable) Parameters Type Name Description SqlInsertOrUpdateStatement insertOrUpdate System.Nullable < System.String > fromDummyTable | Improve this Doc View Source BuildInsertOrUpdateQueryAsUpdateInsert(SqlInsertOrUpdateStatement) Declaration protected void BuildInsertOrUpdateQueryAsUpdateInsert(SqlInsertOrUpdateStatement insertOrUpdate) Parameters Type Name Description SqlInsertOrUpdateStatement insertOrUpdate | Improve this Doc View Source BuildInsertQuery(SqlStatement, SqlInsertClause, Boolean) Declaration protected virtual void BuildInsertQuery(SqlStatement statement, SqlInsertClause insertClause, bool addAlias) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause System.Boolean addAlias | Improve this Doc View Source BuildInsertQuery2(SqlStatement, SqlInsertClause, Boolean) Declaration protected void BuildInsertQuery2(SqlStatement statement, SqlInsertClause insertClause, bool addAlias) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause System.Boolean addAlias | Improve this Doc View Source BuildIsDistinctPredicate(SqlPredicate.IsDistinct) Declaration protected virtual void BuildIsDistinctPredicate(SqlPredicate.IsDistinct expr) Parameters Type Name Description SqlPredicate.IsDistinct expr | Improve this Doc View Source BuildIsDistinctPredicateFallback(SqlPredicate.IsDistinct) Declaration protected void BuildIsDistinctPredicateFallback(SqlPredicate.IsDistinct expr) Parameters Type Name Description SqlPredicate.IsDistinct expr | Improve this Doc View Source BuildJoinType(JoinType, SqlSearchCondition) Declaration protected virtual bool BuildJoinType(JoinType joinType, SqlSearchCondition condition) Parameters Type Name Description JoinType joinType SqlSearchCondition condition Returns Type Description System.Boolean | Improve this Doc View Source BuildLikePredicate(SqlPredicate.Like) Declaration protected virtual void BuildLikePredicate(SqlPredicate.Like predicate) Parameters Type Name Description SqlPredicate.Like predicate | Improve this Doc View Source BuildMergeInto(SqlMergeStatement) Declaration protected virtual void BuildMergeInto(SqlMergeStatement merge) Parameters Type Name Description SqlMergeStatement merge | Improve this Doc View Source BuildMergeOn(SqlMergeStatement) Declaration protected virtual void BuildMergeOn(SqlMergeStatement mergeStatement) Parameters Type Name Description SqlMergeStatement mergeStatement | Improve this Doc View Source BuildMergeOperationDelete(SqlMergeOperationClause) Declaration protected virtual void BuildMergeOperationDelete(SqlMergeOperationClause operation) Parameters Type Name Description SqlMergeOperationClause operation | Improve this Doc View Source BuildMergeOperationDeleteBySource(SqlMergeOperationClause) Declaration protected virtual void BuildMergeOperationDeleteBySource(SqlMergeOperationClause operation) Parameters Type Name Description SqlMergeOperationClause operation | Improve this Doc View Source BuildMergeOperationInsert(SqlMergeOperationClause) Declaration protected virtual void BuildMergeOperationInsert(SqlMergeOperationClause operation) Parameters Type Name Description SqlMergeOperationClause operation | Improve this Doc View Source BuildMergeOperationUpdate(SqlMergeOperationClause) Declaration protected virtual void BuildMergeOperationUpdate(SqlMergeOperationClause operation) Parameters Type Name Description SqlMergeOperationClause operation | Improve this Doc View Source BuildMergeOperationUpdateBySource(SqlMergeOperationClause) Declaration protected virtual void BuildMergeOperationUpdateBySource(SqlMergeOperationClause operation) Parameters Type Name Description SqlMergeOperationClause operation | Improve this Doc View Source BuildMergeOperationUpdateWithDelete(SqlMergeOperationClause) Declaration protected virtual void BuildMergeOperationUpdateWithDelete(SqlMergeOperationClause operation) Parameters Type Name Description SqlMergeOperationClause operation | Improve this Doc View Source BuildMergeSourceQuery(SqlTableLikeSource) Declaration protected virtual void BuildMergeSourceQuery(SqlTableLikeSource mergeSource) Parameters Type Name Description SqlTableLikeSource mergeSource | Improve this Doc View Source BuildMergeStatement(SqlMergeStatement) Declaration protected virtual void BuildMergeStatement(SqlMergeStatement merge) Parameters Type Name Description SqlMergeStatement merge | Improve this Doc View Source BuildMergeTerminator(SqlMergeStatement) Allows to add text after generated merge command. E.g. to specify command terminator if provider requires it. Declaration protected virtual void BuildMergeTerminator(SqlMergeStatement merge) Parameters Type Name Description SqlMergeStatement merge | Improve this Doc View Source BuildMultiInsertQuery(SqlMultiInsertStatement) Declaration protected virtual void BuildMultiInsertQuery(SqlMultiInsertStatement statement) Parameters Type Name Description SqlMultiInsertStatement statement | Improve this Doc View Source BuildOffsetLimit(SelectQuery) Declaration protected virtual void BuildOffsetLimit(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildOrderByClause(SelectQuery) Declaration protected virtual void BuildOrderByClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildOutputSubclause(SqlOutputClause) Declaration protected virtual void BuildOutputSubclause(SqlOutputClause output) Parameters Type Name Description SqlOutputClause output | Improve this Doc View Source BuildOutputSubclause(SqlStatement, SqlInsertClause) Declaration protected virtual void BuildOutputSubclause(SqlStatement statement, SqlInsertClause insertClause) Parameters Type Name Description SqlStatement statement SqlInsertClause insertClause | Improve this Doc View Source BuildPhysicalTable(ISqlTableSource, Nullable<String>, Nullable<String>) Declaration protected bool? BuildPhysicalTable(ISqlTableSource table, string? alias, string? defaultDatabaseName = null) Parameters Type Name Description ISqlTableSource table System.Nullable < System.String > alias System.Nullable < System.String > defaultDatabaseName Returns Type Description System.Nullable < System.Boolean > | Improve this Doc View Source BuildPredicate(ISqlPredicate) Declaration protected virtual void BuildPredicate(ISqlPredicate predicate) Parameters Type Name Description ISqlPredicate predicate | Improve this Doc View Source BuildPredicate(Int32, Int32, ISqlPredicate) Declaration protected void BuildPredicate(int parentPrecedence, int precedence, ISqlPredicate predicate) Parameters Type Name Description System.Int32 parentPrecedence System.Int32 precedence ISqlPredicate predicate | Improve this Doc View Source BuildReturningSubclause(SqlStatement) Declaration protected virtual void BuildReturningSubclause(SqlStatement statement) Parameters Type Name Description SqlStatement statement | Improve this Doc View Source BuildSearchCondition(SqlSearchCondition, Boolean) Declaration protected virtual void BuildSearchCondition(SqlSearchCondition condition, bool wrapCondition) Parameters Type Name Description SqlSearchCondition condition System.Boolean wrapCondition | Improve this Doc View Source BuildSearchCondition(Int32, SqlSearchCondition, Boolean) Declaration protected virtual void BuildSearchCondition(int parentPrecedence, SqlSearchCondition condition, bool wrapCondition) Parameters Type Name Description System.Int32 parentPrecedence SqlSearchCondition condition System.Boolean wrapCondition | Improve this Doc View Source BuildSelectClause(SelectQuery) Declaration protected virtual void BuildSelectClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildSelectQuery(SqlSelectStatement) Declaration protected virtual void BuildSelectQuery(SqlSelectStatement selectStatement) Parameters Type Name Description SqlSelectStatement selectStatement | Improve this Doc View Source BuildSetOperation(SetOperation, StringBuilder) Declaration protected virtual void BuildSetOperation(SetOperation operation, StringBuilder sb) Parameters Type Name Description SetOperation operation StringBuilder sb | Improve this Doc View Source BuildSkipFirst(SelectQuery) Declaration protected virtual void BuildSkipFirst(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildSql() Declaration protected virtual void BuildSql() | Improve this Doc View Source BuildSql(Int32, SqlStatement, StringBuilder, OptimizationContext, Int32) Declaration public void BuildSql(int commandNumber, SqlStatement statement, StringBuilder sb, OptimizationContext optimizationContext, int startIndent = 0) Parameters Type Name Description System.Int32 commandNumber SqlStatement statement StringBuilder sb OptimizationContext optimizationContext System.Int32 startIndent | Improve this Doc View Source BuildSql(Int32, SqlStatement, StringBuilder, OptimizationContext, Int32, Boolean) Declaration protected virtual void BuildSql(int commandNumber, SqlStatement statement, StringBuilder sb, OptimizationContext optimizationContext, int indent, bool skipAlias) Parameters Type Name Description System.Int32 commandNumber SqlStatement statement StringBuilder sb OptimizationContext optimizationContext System.Int32 indent System.Boolean skipAlias | Improve this Doc View Source BuildSqlBuilder(SelectQuery, Int32, Boolean) Declaration protected virtual void BuildSqlBuilder(SelectQuery selectQuery, int indent, bool skipAlias) Parameters Type Name Description SelectQuery selectQuery System.Int32 indent System.Boolean skipAlias | Improve this Doc View Source BuildSqlComment(StringBuilder, SqlComment) Declaration protected virtual StringBuilder BuildSqlComment(StringBuilder sb, SqlComment comment) Parameters Type Name Description StringBuilder sb SqlComment comment Returns Type Description StringBuilder | Improve this Doc View Source BuildSqlValuesTable(SqlValuesTable, String, out Boolean) Declaration protected virtual void BuildSqlValuesTable(SqlValuesTable valuesTable, string alias, out bool aliasBuilt) Parameters Type Name Description SqlValuesTable valuesTable System.String alias System.Boolean aliasBuilt | Improve this Doc View Source BuildStartCreateTableStatement(SqlCreateTableStatement) Declaration protected virtual void BuildStartCreateTableStatement(SqlCreateTableStatement createTable) Parameters Type Name Description SqlCreateTableStatement createTable | Improve this Doc View Source BuildTableName(SqlTableSource, Boolean, Boolean) Declaration protected void BuildTableName(SqlTableSource ts, bool buildName, bool buildAlias) Parameters Type Name Description SqlTableSource ts System.Boolean buildName System.Boolean buildAlias | Improve this Doc View Source BuildTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) Declaration public virtual StringBuilder BuildTableName(StringBuilder sb, string? server, string? database, string? schema, string table, TableOptions tableOptions) Parameters Type Name Description StringBuilder sb System.Nullable < System.String > server System.Nullable < System.String > database System.Nullable < System.String > schema System.String table TableOptions tableOptions Returns Type Description StringBuilder | Improve this Doc View Source BuildTag(SqlStatement) Declaration protected virtual void BuildTag(SqlStatement statement) Parameters Type Name Description SqlStatement statement | Improve this Doc View Source BuildTakeHints(SelectQuery) Declaration protected virtual void BuildTakeHints(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildTruncateTable(SqlTruncateTableStatement) Declaration protected virtual void BuildTruncateTable(SqlTruncateTableStatement truncateTable) Parameters Type Name Description SqlTruncateTableStatement truncateTable | Improve this Doc View Source BuildTruncateTableStatement(SqlTruncateTableStatement) Declaration protected virtual void BuildTruncateTableStatement(SqlTruncateTableStatement truncateTable) Parameters Type Name Description SqlTruncateTableStatement truncateTable | Improve this Doc View Source BuildTypedExpression(SqlDataType, ISqlExpression) Declaration protected virtual void BuildTypedExpression(SqlDataType dataType, ISqlExpression value) Parameters Type Name Description SqlDataType dataType ISqlExpression value | Improve this Doc View Source BuildUnknownQuery() Declaration protected virtual void BuildUnknownQuery() | Improve this Doc View Source BuildUpdateClause(SqlStatement, SelectQuery, SqlUpdateClause) Declaration protected virtual void BuildUpdateClause(SqlStatement statement, SelectQuery selectQuery, SqlUpdateClause updateClause) Parameters Type Name Description SqlStatement statement SelectQuery selectQuery SqlUpdateClause updateClause | Improve this Doc View Source BuildUpdateQuery(SqlStatement, SelectQuery, SqlUpdateClause) Declaration protected virtual void BuildUpdateQuery(SqlStatement statement, SelectQuery selectQuery, SqlUpdateClause updateClause) Parameters Type Name Description SqlStatement statement SelectQuery selectQuery SqlUpdateClause updateClause | Improve this Doc View Source BuildUpdateSet(SelectQuery, SqlUpdateClause) Declaration protected virtual void BuildUpdateSet(SelectQuery selectQuery, SqlUpdateClause updateClause) Parameters Type Name Description SelectQuery selectQuery SqlUpdateClause updateClause | Improve this Doc View Source BuildUpdateTable(SelectQuery, SqlUpdateClause) Declaration protected virtual void BuildUpdateTable(SelectQuery selectQuery, SqlUpdateClause updateClause) Parameters Type Name Description SelectQuery selectQuery SqlUpdateClause updateClause | Improve this Doc View Source BuildUpdateTableName(SelectQuery, SqlUpdateClause) Declaration protected virtual void BuildUpdateTableName(SelectQuery selectQuery, SqlUpdateClause updateClause) Parameters Type Name Description SelectQuery selectQuery SqlUpdateClause updateClause | Improve this Doc View Source BuildValue(SqlDataType, Nullable<Object>) Declaration protected void BuildValue(SqlDataType dataType, object? value) Parameters Type Name Description SqlDataType dataType System.Nullable < System.Object > value | Improve this Doc View Source BuildValues(SqlValuesTable, IReadOnlyList<ISqlExpression[]>) Declaration protected void BuildValues(SqlValuesTable source, IReadOnlyList<ISqlExpression[]> rows) Parameters Type Name Description SqlValuesTable source IReadOnlyList < ISqlExpression []> rows | Improve this Doc View Source BuildWhere(SelectQuery) Declaration protected virtual bool BuildWhere(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Boolean | Improve this Doc View Source BuildWhereClause(SelectQuery) Declaration protected virtual void BuildWhereClause(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery | Improve this Doc View Source BuildWhereSearchCondition(SelectQuery, SqlSearchCondition) Declaration protected virtual void BuildWhereSearchCondition(SelectQuery selectQuery, SqlSearchCondition condition) Parameters Type Name Description SelectQuery selectQuery SqlSearchCondition condition | Improve this Doc View Source BuildWithClause(SqlWithClause) Declaration protected virtual void BuildWithClause(SqlWithClause with) Parameters Type Name Description SqlWithClause with | Improve this Doc View Source CanSkipRootAliases(SqlStatement) Declaration protected virtual bool CanSkipRootAliases(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description System.Boolean | Improve this Doc View Source CommandCount(SqlStatement) Declaration public virtual int CommandCount(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description System.Int32 | Improve this Doc View Source Convert(StringBuilder, String, ConvertType) Declaration public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType) Parameters Type Name Description StringBuilder sb System.String value ConvertType convertType Returns Type Description StringBuilder | Improve this Doc View Source ConvertElement<T>(T) Declaration public T ConvertElement<T>(T element) where T : class, IQueryElement Parameters Type Name Description T element Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ConvertInline(String, ConvertType) Declaration public string ConvertInline(string value, ConvertType convertType) Parameters Type Name Description System.String value ConvertType convertType Returns Type Description System.String | Improve this Doc View Source ConvertTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) Declaration public virtual StringBuilder ConvertTableName(StringBuilder sb, string? server, string? database, string? schema, string table, TableOptions tableOptions) Parameters Type Name Description StringBuilder sb System.Nullable < System.String > server System.Nullable < System.String > database System.Nullable < System.String > schema System.String table TableOptions tableOptions Returns Type Description StringBuilder | Improve this Doc View Source CreateSqlBuilder() Declaration protected abstract ISqlBuilder CreateSqlBuilder() Returns Type Description ISqlBuilder | Improve this Doc View Source FirstFormat(SelectQuery) Declaration protected virtual string? FirstFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration public virtual ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression | Improve this Doc View Source GetMaxValueSql(EntityDescriptor, ColumnDescriptor) Declaration public virtual string GetMaxValueSql(EntityDescriptor entity, ColumnDescriptor column) Parameters Type Name Description EntityDescriptor entity ColumnDescriptor column Returns Type Description System.String | Improve this Doc View Source GetPrecedence(ISqlPredicate) Declaration protected static int GetPrecedence(ISqlPredicate predicate) Parameters Type Name Description ISqlPredicate predicate Returns Type Description System.Int32 | Improve this Doc View Source GetProviderTypeName(IDbDataParameter) Declaration protected virtual string? GetProviderTypeName(IDbDataParameter parameter) Parameters Type Name Description IDbDataParameter parameter Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetReserveSequenceValuesSql(Int32, String) Declaration public virtual string GetReserveSequenceValuesSql(int count, string sequenceName) Parameters Type Name Description System.Int32 count System.String sequenceName Returns Type Description System.String | Improve this Doc View Source GetSelectedColumns(SelectQuery) Declaration protected virtual IEnumerable<SqlColumn> GetSelectedColumns(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description IEnumerable < SqlColumn > | Improve this Doc View Source GetSequenceNameAttribute(SqlTable, Boolean) Declaration protected SequenceNameAttribute GetSequenceNameAttribute(SqlTable table, bool throwException) Parameters Type Name Description SqlTable table System.Boolean throwException Returns Type Description SequenceNameAttribute | Improve this Doc View Source GetTableAlias(ISqlTableSource) Declaration protected string? GetTableAlias(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetTableDatabaseName(SqlTable) Declaration public virtual string? GetTableDatabaseName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetTablePhysicalName(SqlTable) Declaration public virtual string? GetTablePhysicalName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetTableSchemaName(SqlTable) Declaration public virtual string? GetTableSchemaName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetTableServerName(SqlTable) Declaration public virtual string? GetTableServerName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetTempAliases(Int32, String) Declaration public string[] GetTempAliases(int n, string defaultAlias) Parameters Type Name Description System.Int32 n System.String defaultAlias Returns Type Description System.String [] | Improve this Doc View Source GetTypeName(IDbDataParameter) Declaration protected virtual string? GetTypeName(IDbDataParameter parameter) Parameters Type Name Description IDbDataParameter parameter Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetUdtTypeName(IDbDataParameter) Declaration protected virtual string? GetUdtTypeName(IDbDataParameter parameter) Parameters Type Name Description IDbDataParameter parameter Returns Type Description System.Nullable < System.String > | Improve this Doc View Source IsDateDataType(ISqlExpression, String) Declaration protected static bool IsDateDataType(ISqlExpression expr, string dateName) Parameters Type Name Description ISqlExpression expr System.String dateName Returns Type Description System.Boolean | Improve this Doc View Source IsReserved(String) Declaration protected virtual bool IsReserved(string word) Parameters Type Name Description System.String word Returns Type Description System.Boolean | Improve this Doc View Source IsSqlValuesTableValueTypeRequired(SqlValuesTable, IReadOnlyList<ISqlExpression[]>, Int32, Int32) Checks that value in specific row and column in enumerable source requires type information generation. Declaration protected virtual bool IsSqlValuesTableValueTypeRequired(SqlValuesTable source, IReadOnlyList<ISqlExpression[]> rows, int row, int column) Parameters Type Name Description SqlValuesTable source Merge source table. IReadOnlyList < ISqlExpression []> rows Merge source data. System.Int32 row Index of data row to check. Could contain -1 to indicate that this is a check for empty source NULL value. System.Int32 column Index of data column to check in row. Returns Type Description System.Boolean Returns true , if generated SQL should include type information for value at specified position, otherwise false returned. | Improve this Doc View Source IsTimeDataType(ISqlExpression) Declaration protected static bool IsTimeDataType(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Boolean | Improve this Doc View Source LimitFormat(SelectQuery) Declaration protected virtual string? LimitFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Nullable < System.String > | Improve this Doc View Source NeedSkip(ISqlExpression, ISqlExpression) Declaration protected bool NeedSkip(ISqlExpression takeExpression, ISqlExpression skipExpression) Parameters Type Name Description ISqlExpression takeExpression ISqlExpression skipExpression Returns Type Description System.Boolean | Improve this Doc View Source NeedTake(ISqlExpression) Declaration protected bool NeedTake(ISqlExpression takeExpression) Parameters Type Name Description ISqlExpression takeExpression Returns Type Description System.Boolean | Improve this Doc View Source OffsetFormat(SelectQuery) Declaration protected virtual string? OffsetFormat(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Nullable < System.String > | Improve this Doc View Source ParenthesizeJoin(List<SqlJoinedTable>) Declaration protected virtual bool ParenthesizeJoin(List<SqlJoinedTable> joins) Parameters Type Name Description List < SqlJoinedTable > joins Returns Type Description System.Boolean | Improve this Doc View Source PrintParameterName(StringBuilder, IDbDataParameter) Declaration protected virtual void PrintParameterName(StringBuilder sb, IDbDataParameter parameter) Parameters Type Name Description StringBuilder sb IDbDataParameter parameter | Improve this Doc View Source PrintParameters(StringBuilder, Nullable<IEnumerable<IDbDataParameter>>) Declaration public virtual StringBuilder PrintParameters(StringBuilder sb, IEnumerable<IDbDataParameter>? parameters) Parameters Type Name Description StringBuilder sb System.Nullable < IEnumerable < IDbDataParameter >> parameters Returns Type Description StringBuilder | Improve this Doc View Source PrintParameterType(StringBuilder, IDbDataParameter) Declaration protected virtual void PrintParameterType(StringBuilder sb, IDbDataParameter parameter) Parameters Type Name Description StringBuilder sb IDbDataParameter parameter | Improve this Doc View Source RemoveAlias(String) Declaration public void RemoveAlias(string alias) Parameters Type Name Description System.String alias | Improve this Doc View Source WithStringBuilder<T>(StringBuilder, Func<T>) Declaration protected T WithStringBuilder<T>(StringBuilder sb, Func<T> func) Parameters Type Name Description StringBuilder sb Func <T> func Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source WrapBooleanExpression(ISqlExpression) Declaration protected virtual ISqlExpression WrapBooleanExpression(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description ISqlExpression | Improve this Doc View Source WrapColumnExpression(ISqlExpression) Declaration protected virtual ISqlExpression WrapColumnExpression(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description ISqlExpression Implements ISqlBuilder Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.BasicSqlBuilder.Step.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlBuilder.Step.html",
    "title": "Enum BasicSqlBuilder.Step | Linq To DB (aka linq2db)",
    "keywords": "Enum BasicSqlBuilder.Step Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax protected enum Step : int Fields Name Description DeleteClause FromClause GroupByClause HavingClause InsertClause OffsetLimit OrderByClause SelectClause Tag UpdateClause WhereClause WithClause Extension Methods Map.DeepCopy<BasicSqlBuilder.Step>() Sql.IsDistinctFrom<BasicSqlBuilder.Step>(BasicSqlBuilder.Step) Sql.IsDistinctFrom<BasicSqlBuilder.Step>(Nullable<BasicSqlBuilder.Step>) Sql.IsNotDistinctFrom<BasicSqlBuilder.Step>(BasicSqlBuilder.Step) Sql.IsNotDistinctFrom<BasicSqlBuilder.Step>(Nullable<BasicSqlBuilder.Step>) SqlExtensions.In<BasicSqlBuilder.Step>(IEnumerable<BasicSqlBuilder.Step>) SqlExtensions.In<BasicSqlBuilder.Step>(IQueryable<BasicSqlBuilder.Step>) SqlExtensions.In<BasicSqlBuilder.Step>(BasicSqlBuilder.Step[]) SqlExtensions.In<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step) SqlExtensions.In<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step, BasicSqlBuilder.Step) SqlExtensions.NotIn<BasicSqlBuilder.Step>(IEnumerable<BasicSqlBuilder.Step>) SqlExtensions.NotIn<BasicSqlBuilder.Step>(IQueryable<BasicSqlBuilder.Step>) SqlExtensions.NotIn<BasicSqlBuilder.Step>(BasicSqlBuilder.Step[]) SqlExtensions.NotIn<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step) SqlExtensions.NotIn<BasicSqlBuilder.Step>(BasicSqlBuilder.Step, BasicSqlBuilder.Step, BasicSqlBuilder.Step)"
  },
  "api/LinqToDB.SqlProvider.BasicSqlOptimizer.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlOptimizer.html",
    "title": "Class BasicSqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Class BasicSqlOptimizer Inheritance System.Object BasicSqlOptimizer FirebirdSqlOptimizer Oracle11SqlOptimizer Implements ISqlOptimizer Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public class BasicSqlOptimizer : object, ISqlOptimizer Constructors | Improve this Doc View Source BasicSqlOptimizer(SqlProviderFlags) Declaration protected BasicSqlOptimizer(SqlProviderFlags sqlProviderFlags) Parameters Type Name Description SqlProviderFlags sqlProviderFlags Fields | Improve this Doc View Source StandardLikeCharactersToEscape Declaration protected static string[] StandardLikeCharactersToEscape Field Value Type Description System.String [] Properties | Improve this Doc View Source CanCompareSearchConditions Declaration public virtual bool CanCompareSearchConditions { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LikeCharactersToEscape Declaration public virtual string[] LikeCharactersToEscape { get; } Property Value Type Description System.String [] | Improve this Doc View Source LikeEscapeCharacter Declaration public virtual string LikeEscapeCharacter { get; } Property Value Type Description System.String | Improve this Doc View Source LikeHasCharacterSetSupport Declaration public virtual bool LikeHasCharacterSetSupport { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LikeIsEscapeSupported Declaration public virtual bool LikeIsEscapeSupported { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LikePatternParameterSupport Declaration public virtual bool LikePatternParameterSupport { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LikeValueParameterSupport Declaration public virtual bool LikeValueParameterSupport { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LikeWildcardCharacter Declaration public virtual string LikeWildcardCharacter { get; } Property Value Type Description System.String | Improve this Doc View Source SqlProviderFlags Declaration public SqlProviderFlags SqlProviderFlags { get; } Property Value Type Description SqlProviderFlags Methods | Improve this Doc View Source Add(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Add(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Type type Returns Type Description ISqlExpression | Improve this Doc View Source Add(ISqlExpression, Int32) Declaration public ISqlExpression Add(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Add<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Add<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source AlternativeConvertToBoolean(SqlFunction, Int32) Declaration protected ISqlExpression AlternativeConvertToBoolean(SqlFunction func, int paramNumber) Parameters Type Name Description SqlFunction func System.Int32 paramNumber Returns Type Description ISqlExpression | Improve this Doc View Source CheckAliases(SqlStatement, Int32) Declaration protected void CheckAliases(SqlStatement statement, int maxLen) Parameters Type Name Description SqlStatement statement System.Int32 maxLen | Improve this Doc View Source ConvertBooleanExprToCase(ISqlExpression) Declaration protected ISqlExpression ConvertBooleanExprToCase(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description ISqlExpression | Improve this Doc View Source ConvertCoalesceToBinaryFunc(SqlFunction, String) Declaration protected ISqlExpression ConvertCoalesceToBinaryFunc(SqlFunction func, string funcName) Parameters Type Name Description SqlFunction func System.String funcName Returns Type Description ISqlExpression | Improve this Doc View Source ConvertConvertion(SqlFunction) Declaration protected virtual ISqlExpression ConvertConvertion(SqlFunction func) Parameters Type Name Description SqlFunction func Returns Type Description ISqlExpression | Improve this Doc View Source ConvertCountSubQuery(SelectQuery) Declaration public virtual bool ConvertCountSubQuery(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description System.Boolean | Improve this Doc View Source ConvertElement(MappingSchema, IQueryElement, OptimizationContext) Declaration public virtual IQueryElement ConvertElement(MappingSchema mappingSchema, IQueryElement element, OptimizationContext context) Parameters Type Name Description MappingSchema mappingSchema IQueryElement element OptimizationContext context Returns Type Description IQueryElement | Improve this Doc View Source ConvertExpressionImpl(ISqlExpression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Declaration public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext> visitor) Parameters Type Name Description ISqlExpression expression ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext > visitor Returns Type Description ISqlExpression | Improve this Doc View Source ConvertFunction(SqlFunction) Declaration protected virtual ISqlExpression ConvertFunction(SqlFunction func) Parameters Type Name Description SqlFunction func Returns Type Description ISqlExpression | Improve this Doc View Source ConvertFunctionParameters(SqlFunction, Boolean) Declaration protected SqlFunction ConvertFunctionParameters(SqlFunction func, bool withParameters = false) Parameters Type Name Description SqlFunction func System.Boolean withParameters Returns Type Description SqlFunction | Improve this Doc View Source ConvertInListPredicate(MappingSchema, SqlPredicate.InList, EvaluationContext) Declaration public virtual ISqlPredicate ConvertInListPredicate(MappingSchema mappingSchema, SqlPredicate.InList p, EvaluationContext context) Parameters Type Name Description MappingSchema mappingSchema SqlPredicate.InList p EvaluationContext context Returns Type Description ISqlPredicate | Improve this Doc View Source ConvertLikePredicate(MappingSchema, SqlPredicate.Like, EvaluationContext) Declaration public virtual ISqlPredicate ConvertLikePredicate(MappingSchema mappingSchema, SqlPredicate.Like predicate, EvaluationContext context) Parameters Type Name Description MappingSchema mappingSchema SqlPredicate.Like predicate EvaluationContext context Returns Type Description ISqlPredicate | Improve this Doc View Source ConvertPredicateImpl(ISqlPredicate, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Declaration public virtual ISqlPredicate ConvertPredicateImpl(ISqlPredicate predicate, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext> visitor) Parameters Type Name Description ISqlPredicate predicate ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext > visitor Returns Type Description ISqlPredicate | Improve this Doc View Source ConvertSearchStringPredicate(SqlPredicate.SearchString, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Declaration public virtual ISqlPredicate ConvertSearchStringPredicate(SqlPredicate.SearchString predicate, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext> visitor) Parameters Type Name Description SqlPredicate.SearchString predicate ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext > visitor Returns Type Description ISqlPredicate | Improve this Doc View Source ConvertSearchStringPredicateViaLike(SqlPredicate.SearchString, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Declaration protected ISqlPredicate ConvertSearchStringPredicateViaLike(SqlPredicate.SearchString predicate, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext> visitor) Parameters Type Name Description SqlPredicate.SearchString predicate ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext > visitor Returns Type Description ISqlPredicate | Improve this Doc View Source ConvertSkipTake(MappingSchema, SelectQuery, OptimizationContext, out ISqlExpression, out ISqlExpression) Declaration public virtual void ConvertSkipTake(MappingSchema mappingSchema, SelectQuery selectQuery, OptimizationContext optimizationContext, out ISqlExpression takeExpr, out ISqlExpression skipExpr) Parameters Type Name Description MappingSchema mappingSchema SelectQuery selectQuery OptimizationContext optimizationContext ISqlExpression takeExpr ISqlExpression skipExpr | Improve this Doc View Source CorrectUnionOrderBy(SqlStatement) Declaration protected virtual SqlStatement CorrectUnionOrderBy(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement | Improve this Doc View Source CorrectUpdateTable(SqlUpdateStatement) Corrects situation when update table is located in JOIN clause. Usually it is generated by associations. Declaration protected SqlUpdateStatement CorrectUpdateTable(SqlUpdateStatement statement) Parameters Type Name Description SqlUpdateStatement statement Statement to examine. Returns Type Description SqlUpdateStatement Corrected statement. | Improve this Doc View Source CreateSqlValue(Nullable<Object>, DbDataType, ISqlExpression[]) Declaration public static ISqlExpression CreateSqlValue(object? value, DbDataType dbDataType, params ISqlExpression[] basedOn) Parameters Type Name Description System.Nullable < System.Object > value DbDataType dbDataType ISqlExpression [] basedOn Returns Type Description ISqlExpression | Improve this Doc View Source CreateSqlValue(Nullable<Object>, SqlBinaryExpression) Declaration public static ISqlExpression CreateSqlValue(object? value, SqlBinaryExpression be) Parameters Type Name Description System.Nullable < System.Object > value SqlBinaryExpression be Returns Type Description ISqlExpression | Improve this Doc View Source Dec(ISqlExpression) Declaration public ISqlExpression Dec(ISqlExpression expr1) Parameters Type Name Description ISqlExpression expr1 Returns Type Description ISqlExpression | Improve this Doc View Source Div(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Div(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Type type Returns Type Description ISqlExpression | Improve this Doc View Source Div(ISqlExpression, Int32) Declaration public ISqlExpression Div(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Div<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Div<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source EscapeLikeCharacters(ISqlExpression, ref ISqlExpression) Declaration public virtual ISqlExpression EscapeLikeCharacters(ISqlExpression expression, ref ISqlExpression escape) Parameters Type Name Description ISqlExpression expression ISqlExpression escape Returns Type Description ISqlExpression | Improve this Doc View Source EscapeLikeCharacters(String, String) Declaration public virtual string EscapeLikeCharacters(string str, string escape) Parameters Type Name Description System.String str System.String escape Returns Type Description System.String | Improve this Doc View Source EscapeLikeCharactersBrackets(String, String[]) Declaration protected virtual string EscapeLikeCharactersBrackets(string str, string[] toEscape) Parameters Type Name Description System.String str System.String [] toEscape Returns Type Description System.String | Improve this Doc View Source Finalize(SqlStatement) Declaration public virtual SqlStatement Finalize(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement | Improve this Doc View Source FinalizeStatement(SqlStatement, EvaluationContext) Declaration public virtual SqlStatement FinalizeStatement(SqlStatement statement, EvaluationContext context) Parameters Type Name Description SqlStatement statement EvaluationContext context Returns Type Description SqlStatement | Improve this Doc View Source FixEmptySelect(SqlStatement) Declaration protected virtual void FixEmptySelect(SqlStatement statement) Parameters Type Name Description SqlStatement statement | Improve this Doc View Source FixSetOperationNulls(SqlStatement) Declaration protected virtual SqlStatement FixSetOperationNulls(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement | Improve this Doc View Source FloorBeforeConvert(SqlFunction) Declaration protected ISqlExpression FloorBeforeConvert(SqlFunction func) Parameters Type Name Description SqlFunction func Returns Type Description ISqlExpression | Improve this Doc View Source GenerateEscapeReplacement(ISqlExpression, ISqlExpression) Declaration public static ISqlExpression GenerateEscapeReplacement(ISqlExpression expression, ISqlExpression character) Parameters Type Name Description ISqlExpression expression ISqlExpression character Returns Type Description ISqlExpression | Improve this Doc View Source GetAlternativeDelete(SqlDeleteStatement) Declaration protected SqlDeleteStatement GetAlternativeDelete(SqlDeleteStatement deleteStatement) Parameters Type Name Description SqlDeleteStatement deleteStatement Returns Type Description SqlDeleteStatement | Improve this Doc View Source GetAlternativeUpdate(SqlUpdateStatement) Declaration protected SqlUpdateStatement GetAlternativeUpdate(SqlUpdateStatement updateStatement) Parameters Type Name Description SqlUpdateStatement updateStatement Returns Type Description SqlUpdateStatement | Improve this Doc View Source GetMainTableSource(SelectQuery) Declaration protected SqlTableSource GetMainTableSource(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SqlTableSource | Improve this Doc View Source GetMaxDisplaySize(SqlDataType) Declaration protected virtual int? GetMaxDisplaySize(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source GetMaxLength(SqlDataType) Declaration protected virtual int? GetMaxLength(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source GetMaxPrecision(SqlDataType) Declaration protected virtual int? GetMaxPrecision(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source GetMaxScale(SqlDataType) Declaration protected virtual int? GetMaxScale(SqlDataType type) Parameters Type Name Description SqlDataType type Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source HasParameters(ISqlExpression) Declaration protected static bool HasParameters(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Boolean | Improve this Doc View Source Inc(ISqlExpression) Declaration public ISqlExpression Inc(ISqlExpression expr1) Parameters Type Name Description ISqlExpression expr1 Returns Type Description ISqlExpression | Improve this Doc View Source IsAggregationFunction(IQueryElement) Declaration public static bool IsAggregationFunction(IQueryElement expr) Parameters Type Name Description IQueryElement expr Returns Type Description System.Boolean | Improve this Doc View Source IsBooleanParameter(ISqlExpression, Int32, Int32) Declaration protected static bool IsBooleanParameter(ISqlExpression expr, int count, int i) Parameters Type Name Description ISqlExpression expr System.Int32 count System.Int32 i Returns Type Description System.Boolean | Improve this Doc View Source IsDateDataOffsetType(ISqlExpression) Declaration protected static bool IsDateDataOffsetType(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Boolean | Improve this Doc View Source IsDateDataType(ISqlExpression, String) Declaration protected static bool IsDateDataType(ISqlExpression expr, string dateName) Parameters Type Name Description ISqlExpression expr System.String dateName Returns Type Description System.Boolean | Improve this Doc View Source IsParameterDependedElement(IQueryElement) Declaration public virtual bool IsParameterDependedElement(IQueryElement element) Parameters Type Name Description IQueryElement element Returns Type Description System.Boolean | Improve this Doc View Source IsParameterDependedQuery(SelectQuery) Declaration public virtual bool IsParameterDependedQuery(SelectQuery query) Parameters Type Name Description SelectQuery query Returns Type Description System.Boolean | Improve this Doc View Source IsParameterDependent(SqlStatement) Declaration public bool IsParameterDependent(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description System.Boolean | Improve this Doc View Source IsTimeDataType(ISqlExpression) Declaration protected static bool IsTimeDataType(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Boolean | Improve this Doc View Source Mul(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Mul(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Type type Returns Type Description ISqlExpression | Improve this Doc View Source Mul(ISqlExpression, Int32) Declaration public ISqlExpression Mul(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Mul<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Mul<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source NeedsEnvelopingForUpdate(SelectQuery) Declaration protected bool NeedsEnvelopingForUpdate(SelectQuery query) Parameters Type Name Description SelectQuery query Returns Type Description System.Boolean | Improve this Doc View Source OptimizeAggregates(SqlStatement) Declaration public SqlStatement OptimizeAggregates(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement | Improve this Doc View Source OptimizeBinaryExpression(SqlBinaryExpression, EvaluationContext) Declaration public virtual ISqlExpression OptimizeBinaryExpression(SqlBinaryExpression be, EvaluationContext context) Parameters Type Name Description SqlBinaryExpression be EvaluationContext context Returns Type Description ISqlExpression | Improve this Doc View Source OptimizeElement(MappingSchema, IQueryElement, OptimizationContext, Boolean) Declaration public IQueryElement OptimizeElement(MappingSchema mappingSchema, IQueryElement element, OptimizationContext optimizationContext, bool withConversion) Parameters Type Name Description MappingSchema mappingSchema IQueryElement element OptimizationContext optimizationContext System.Boolean withConversion Returns Type Description IQueryElement | Improve this Doc View Source OptimizeExpression(ISqlExpression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>) Declaration public virtual ISqlExpression OptimizeExpression(ISqlExpression expression, ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext> convertVisitor) Parameters Type Name Description ISqlExpression expression ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext > convertVisitor Returns Type Description ISqlExpression | Improve this Doc View Source OptimizeFunction(SqlFunction, EvaluationContext) Declaration public virtual ISqlExpression OptimizeFunction(SqlFunction func, EvaluationContext context) Parameters Type Name Description SqlFunction func EvaluationContext context Returns Type Description ISqlExpression | Improve this Doc View Source OptimizeJoins(SqlStatement) Declaration public void OptimizeJoins(SqlStatement statement) Parameters Type Name Description SqlStatement statement | Improve this Doc View Source OptimizePredicate(ISqlPredicate, EvaluationContext) Declaration public virtual ISqlPredicate OptimizePredicate(ISqlPredicate predicate, EvaluationContext context) Parameters Type Name Description ISqlPredicate predicate EvaluationContext context Returns Type Description ISqlPredicate | Improve this Doc View Source OptimizeQueryElement(ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>, IQueryElement) Declaration public virtual IQueryElement OptimizeQueryElement(ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext> visitor, IQueryElement element) Parameters Type Name Description ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext > visitor IQueryElement element Returns Type Description IQueryElement | Improve this Doc View Source ReplaceDistinctOrderByWithRowNumber(SqlStatement, Func<SelectQuery, Boolean>) Alternative mechanism how to prevent loosing sorting in Distinct queries. Declaration protected SqlStatement ReplaceDistinctOrderByWithRowNumber(SqlStatement statement, Func<SelectQuery, bool> queryFilter) Parameters Type Name Description SqlStatement statement Statement which may contain Distinct queries. Func < SelectQuery , System.Boolean > queryFilter Query filter predicate to determine if query needs processing. Returns Type Description SqlStatement The same statement or modified statement when transformation has been performed. | Improve this Doc View Source ReplaceTakeSkipWithRowNumber(SqlStatement, Boolean, Boolean) Replaces pagination by Window function ROW_NUMBER(). Declaration protected SqlStatement ReplaceTakeSkipWithRowNumber(SqlStatement statement, bool supportsEmptyOrderBy, bool onlySubqueries) Parameters Type Name Description SqlStatement statement Statement which may contain take/skip modifiers. System.Boolean supportsEmptyOrderBy Indicates that database supports OVER () syntax. System.Boolean onlySubqueries Indicates when transformation needed only for subqueries. Returns Type Description SqlStatement The same statement or modified statement when transformation has been performed. | Improve this Doc View Source ReplaceTakeSkipWithRowNumber<TContext>(TContext, SqlStatement, Func<TContext, SelectQuery, Boolean>, Boolean) Replaces pagination by Window function ROW_NUMBER(). Declaration protected SqlStatement ReplaceTakeSkipWithRowNumber<TContext>(TContext context, SqlStatement statement, Func<TContext, SelectQuery, bool> predicate, bool supportsEmptyOrderBy) Parameters Type Name Description TContext context predicate context object. SqlStatement statement Statement which may contain take/skip modifiers. Func <TContext, SelectQuery , System.Boolean > predicate Indicates when the transformation is needed System.Boolean supportsEmptyOrderBy Indicates that database supports OVER () syntax. Returns Type Description SqlStatement The same statement or modified statement when transformation has been performed. Type Parameters Name Description TContext | Improve this Doc View Source SeparateDistinctFromPagination(SqlStatement, Func<SelectQuery, Boolean>) Moves Distinct query into another subquery. Useful when preserving ordering is required, because some providers do not support DISTINCT ORDER BY. -- before SELECT DISTINCT TAKE 10 c1, c2 FROM A ORDER BY c1 -- after SELECT TAKE 10 B.c1, B.c2 FROM ( SELECT DISTINCT c1, c2 FROM A ) B ORDER BY B.c1 Declaration protected SqlStatement SeparateDistinctFromPagination(SqlStatement statement, Func<SelectQuery, bool> queryFilter) Parameters Type Name Description SqlStatement statement Statement which may contain take/skip and Distinct modifiers. Func < SelectQuery , System.Boolean > queryFilter Query filter predicate to determine if query needs processing. Returns Type Description SqlStatement The same statement or modified statement when transformation has been performed. | Improve this Doc View Source Sub(ISqlExpression, ISqlExpression, Type) Declaration public ISqlExpression Sub(ISqlExpression expr1, ISqlExpression expr2, Type type) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Type type Returns Type Description ISqlExpression | Improve this Doc View Source Sub(ISqlExpression, Int32) Declaration public ISqlExpression Sub(ISqlExpression expr1, int value) Parameters Type Name Description ISqlExpression expr1 System.Int32 value Returns Type Description ISqlExpression | Improve this Doc View Source Sub<T>(ISqlExpression, ISqlExpression) Declaration public ISqlExpression Sub<T>(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description ISqlExpression Type Parameters Name Description T | Improve this Doc View Source TransformStatement(SqlStatement) Used for correcting statement and should return new statement if changes were made. Declaration public virtual SqlStatement TransformStatement(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement | Improve this Doc View Source TryConvertToValue(ISqlExpression, EvaluationContext) Declaration protected static ISqlExpression TryConvertToValue(ISqlExpression expr, EvaluationContext context) Parameters Type Name Description ISqlExpression expr EvaluationContext context Returns Type Description ISqlExpression Implements ISqlOptimizer Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.html": {
    "href": "api/LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.html",
    "title": "Struct BasicSqlOptimizer.RunOptimizationContext | Linq To DB (aka linq2db)",
    "keywords": "Struct BasicSqlOptimizer.RunOptimizationContext Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public readonly struct RunOptimizationContext Constructors | Improve this Doc View Source RunOptimizationContext(OptimizationContext, BasicSqlOptimizer, MappingSchema, Boolean, Func<ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>, IQueryElement, IQueryElement>) Declaration public RunOptimizationContext(OptimizationContext optimizationContext, BasicSqlOptimizer optimizer, MappingSchema mappingSchema, bool register, Func<ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>, IQueryElement, IQueryElement> func) Parameters Type Name Description OptimizationContext optimizationContext BasicSqlOptimizer optimizer MappingSchema mappingSchema System.Boolean register Func < ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext >, IQueryElement , IQueryElement > func Fields | Improve this Doc View Source Func Declaration public readonly Func<ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>, IQueryElement, IQueryElement> Func Field Value Type Description Func < ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext >, IQueryElement , IQueryElement > | Improve this Doc View Source MappingSchema Declaration public readonly MappingSchema MappingSchema Field Value Type Description MappingSchema | Improve this Doc View Source OptimizationContext Declaration public readonly OptimizationContext OptimizationContext Field Value Type Description OptimizationContext | Improve this Doc View Source Optimizer Declaration public readonly BasicSqlOptimizer Optimizer Field Value Type Description BasicSqlOptimizer | Improve this Doc View Source Register Declaration public readonly bool Register Field Value Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsDistinctFrom<T>(T, Nullable<T>) Sql.IsNotDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, Nullable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.ConvertType.html": {
    "href": "api/LinqToDB.SqlProvider.ConvertType.html",
    "title": "Enum ConvertType | Linq To DB (aka linq2db)",
    "keywords": "Enum ConvertType Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public enum ConvertType : int Fields Name Description ExceptionToErrorMessage Gets error message from a native exception. For example: SqlException -> SqlException.Message, OleDbException -> OleDbException.Errors[0].Message ExceptionToErrorNumber Gets error number from a native exception. For example: SqlException -> SqlException.Number, OleDbException -> OleDbException.Errors[0].NativeError NameToCommandParameter Provided name should be converted to command parameter name. For example: firstName -> @firstName for the following query: db.Parameter(&quot;@firstName&quot;) = \"John\"; ^ here NameToDatabase Provided name should be converted to query database. For example: MyDatabase -> [MyDatabase] for the following query: SELECT * FROM [MyDatabase]..[Person] ^ and ^ NameToQueryField Provided name should be converted to query field name. For example: FirstName -> [FirstName] for the following query: SELECT [FirstName] FROM Person WHERE ID = 1 ^ and ^ NameToQueryFieldAlias Provided name should be converted to query field alias. For example: ID -> \"ID\" for the following query: SELECT \"ID\" as \"ID\" FROM Person WHERE \"ID\" = 1 ^ ^ here NameToQueryParameter Provided name should be converted to query parameter name. For example: firstName -> @firstName for the following query: SELECT * FROM Person WHERE FirstName = @firstName ^ here NameToQueryTable Provided name should be converted to query table name. For example: Person -> [Person] for the following query: SELECT * FROM [Person] ^ and ^ NameToQueryTableAlias Provided name should be converted to query table alias. For example: table1 -> [table1] for the following query: SELECT * FROM [Person] [table1] ^ and ^ NameToSchema Provided name should be converted to query schema/owner. For example: dbo -> [dbo] for the following query: SELECT * FROM [ dbo ].[Person] ^ and ^ NameToServer Provided name should be converted to linked server name. For example: host name\\named instance -> [host name\\named instance] for the following query: SELECT * FROM [host name\\named instance]..[Person] ^ and ^ NameToSprocParameter Provided name should be converted to stored procedure parameter name. For example: firstName -> @firstName for the following query: db.Parameter(&quot;@firstName&quot;) = \"John\"; ^ here SequenceName Provided name should be converted to sequence name. SprocParameterToName Provided stored procedure parameter name should be converted to name. For example: @firstName -> firstName for the following query: db.Parameter(&quot;@firstName&quot;) = \"John\"; ^ &apos;@' has to be removed TriggerName Provided name should be converted to trigger name. Extension Methods Map.DeepCopy<ConvertType>() Sql.IsDistinctFrom<ConvertType>(ConvertType) Sql.IsDistinctFrom<ConvertType>(Nullable<ConvertType>) Sql.IsNotDistinctFrom<ConvertType>(ConvertType) Sql.IsNotDistinctFrom<ConvertType>(Nullable<ConvertType>) SqlExtensions.In<ConvertType>(IEnumerable<ConvertType>) SqlExtensions.In<ConvertType>(IQueryable<ConvertType>) SqlExtensions.In<ConvertType>(ConvertType[]) SqlExtensions.In<ConvertType>(ConvertType, ConvertType) SqlExtensions.In<ConvertType>(ConvertType, ConvertType, ConvertType) SqlExtensions.NotIn<ConvertType>(IEnumerable<ConvertType>) SqlExtensions.NotIn<ConvertType>(IQueryable<ConvertType>) SqlExtensions.NotIn<ConvertType>(ConvertType[]) SqlExtensions.NotIn<ConvertType>(ConvertType, ConvertType) SqlExtensions.NotIn<ConvertType>(ConvertType, ConvertType, ConvertType)"
  },
  "api/LinqToDB.SqlProvider.html": {
    "href": "api/LinqToDB.SqlProvider.html",
    "title": "Namespace LinqToDB.SqlProvider | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.SqlProvider Classes BasicSqlBuilder BasicSqlOptimizer OptimizationContext SqlProviderFlags ValueToSqlConverter Structs BasicSqlOptimizer.RunOptimizationContext Interfaces ISqlBuilder ISqlOptimizer Enums BasicSqlBuilder.Step ConvertType Delegates BasicSqlBuilder.ColumnSelector"
  },
  "api/LinqToDB.SqlProvider.ISqlBuilder.html": {
    "href": "api/LinqToDB.SqlProvider.ISqlBuilder.html",
    "title": "Interface ISqlBuilder | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlBuilder Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public interface ISqlBuilder Properties | Improve this Doc View Source Name Declaration string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source ApplyQueryHints(String, IReadOnlyCollection<String>) Declaration string ApplyQueryHints(string sqlText, IReadOnlyCollection<string> queryHints) Parameters Type Name Description System.String sqlText IReadOnlyCollection < System.String > queryHints Returns Type Description System.String | Improve this Doc View Source BuildDataType(StringBuilder, SqlDataType) Declaration StringBuilder BuildDataType(StringBuilder sb, SqlDataType dataType) Parameters Type Name Description StringBuilder sb SqlDataType dataType Returns Type Description StringBuilder | Improve this Doc View Source BuildSql(Int32, SqlStatement, StringBuilder, OptimizationContext, Int32) Declaration void BuildSql(int commandNumber, SqlStatement statement, StringBuilder sb, OptimizationContext optimizationContext, int startIndent = 0) Parameters Type Name Description System.Int32 commandNumber SqlStatement statement StringBuilder sb OptimizationContext optimizationContext System.Int32 startIndent | Improve this Doc View Source BuildTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) Declaration StringBuilder BuildTableName(StringBuilder sb, string? server, string? database, string? schema, string table, TableOptions tableOptions) Parameters Type Name Description StringBuilder sb System.Nullable < System.String > server System.Nullable < System.String > database System.Nullable < System.String > schema System.String table TableOptions tableOptions Returns Type Description StringBuilder | Improve this Doc View Source CommandCount(SqlStatement) Declaration int CommandCount(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description System.Int32 | Improve this Doc View Source Convert(StringBuilder, String, ConvertType) Declaration StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType) Parameters Type Name Description StringBuilder sb System.String value ConvertType convertType Returns Type Description StringBuilder | Improve this Doc View Source ConvertInline(String, ConvertType) Declaration string ConvertInline(string value, ConvertType convertType) Parameters Type Name Description System.String value ConvertType convertType Returns Type Description System.String | Improve this Doc View Source ConvertTableName(StringBuilder, Nullable<String>, Nullable<String>, Nullable<String>, String, TableOptions) Declaration StringBuilder ConvertTableName(StringBuilder sb, string? server, string? database, string? schema, string table, TableOptions tableOptions) Parameters Type Name Description StringBuilder sb System.Nullable < System.String > server System.Nullable < System.String > database System.Nullable < System.String > schema System.String table TableOptions tableOptions Returns Type Description StringBuilder | Improve this Doc View Source GetIdentityExpression(SqlTable) Declaration ISqlExpression GetIdentityExpression(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlExpression | Improve this Doc View Source GetMaxValueSql(EntityDescriptor, ColumnDescriptor) Declaration string GetMaxValueSql(EntityDescriptor entity, ColumnDescriptor column) Parameters Type Name Description EntityDescriptor entity ColumnDescriptor column Returns Type Description System.String | Improve this Doc View Source GetReserveSequenceValuesSql(Int32, String) Declaration string GetReserveSequenceValuesSql(int count, string sequenceName) Parameters Type Name Description System.Int32 count System.String sequenceName Returns Type Description System.String | Improve this Doc View Source GetTableDatabaseName(SqlTable) Declaration string? GetTableDatabaseName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetTablePhysicalName(SqlTable) Declaration string? GetTablePhysicalName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetTableSchemaName(SqlTable) Declaration string? GetTableSchemaName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.Nullable < System.String > | Improve this Doc View Source GetTableServerName(SqlTable) Declaration string? GetTableServerName(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.Nullable < System.String > | Improve this Doc View Source PrintParameters(StringBuilder, Nullable<IEnumerable<IDbDataParameter>>) Declaration StringBuilder PrintParameters(StringBuilder sb, IEnumerable<IDbDataParameter>? parameters) Parameters Type Name Description StringBuilder sb System.Nullable < IEnumerable < IDbDataParameter >> parameters Returns Type Description StringBuilder Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.ISqlOptimizer.html": {
    "href": "api/LinqToDB.SqlProvider.ISqlOptimizer.html",
    "title": "Interface ISqlOptimizer | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlOptimizer Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public interface ISqlOptimizer Methods | Improve this Doc View Source ConvertElement(MappingSchema, IQueryElement, OptimizationContext) Converts query element to specific provider dialect. Declaration IQueryElement ConvertElement(MappingSchema mappingSchema, IQueryElement element, OptimizationContext context) Parameters Type Name Description MappingSchema mappingSchema IQueryElement element OptimizationContext context Returns Type Description IQueryElement | Improve this Doc View Source ConvertSkipTake(MappingSchema, SelectQuery, OptimizationContext, out ISqlExpression, out ISqlExpression) Corrects skip/take for specific DataProvider Declaration void ConvertSkipTake(MappingSchema mappingSchema, SelectQuery selectQuery, OptimizationContext optimizationContext, out ISqlExpression takeExpr, out ISqlExpression skipExpr) Parameters Type Name Description MappingSchema mappingSchema SelectQuery selectQuery OptimizationContext optimizationContext ISqlExpression takeExpr ISqlExpression skipExpr | Improve this Doc View Source Finalize(SqlStatement) Finalizes query. Declaration SqlStatement Finalize(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlStatement Query which is ready for optimization. | Improve this Doc View Source IsParameterDependent(SqlStatement) Examine query for parameter dependency. Declaration bool IsParameterDependent(SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.OptimizationContext.html": {
    "href": "api/LinqToDB.SqlProvider.OptimizationContext.html",
    "title": "Class OptimizationContext | Linq To DB (aka linq2db)",
    "keywords": "Class OptimizationContext Inheritance System.Object OptimizationContext Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public class OptimizationContext : object Constructors | Improve this Doc View Source OptimizationContext(EvaluationContext, AliasesContext, Boolean) Declaration public OptimizationContext(EvaluationContext context, AliasesContext aliases, bool isParameterOrderDepended) Parameters Type Name Description EvaluationContext context AliasesContext aliases System.Boolean isParameterOrderDepended Properties | Improve this Doc View Source Aliases Declaration public AliasesContext Aliases { get; } Property Value Type Description AliasesContext | Improve this Doc View Source Context Declaration public EvaluationContext Context { get; } Property Value Type Description EvaluationContext | Improve this Doc View Source IsParameterOrderDepended Declaration public bool IsParameterOrderDepended { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source AddParameter(SqlParameter) Declaration public SqlParameter AddParameter(SqlParameter parameter) Parameters Type Name Description SqlParameter parameter Returns Type Description SqlParameter | Improve this Doc View Source ClearParameters() Declaration public void ClearParameters() | Improve this Doc View Source ConvertAll<T>(BasicSqlOptimizer.RunOptimizationContext, T, Func<ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>, IQueryElement, IQueryElement>, Func<ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>, Boolean>) Declaration public T ConvertAll<T>(BasicSqlOptimizer.RunOptimizationContext context, T element, Func<ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>, IQueryElement, IQueryElement> convertAction, Func<ConvertVisitor<BasicSqlOptimizer.RunOptimizationContext>, bool> parentAction) where T : class, IQueryElement Parameters Type Name Description BasicSqlOptimizer.RunOptimizationContext context T element Func < ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext >, IQueryElement , IQueryElement > convertAction Func < ConvertVisitor < BasicSqlOptimizer.RunOptimizationContext >, System.Boolean > parentAction Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetParameters() Declaration public IEnumerable<SqlParameter> GetParameters() Returns Type Description IEnumerable < SqlParameter > | Improve this Doc View Source HasParameters() Declaration public bool HasParameters() Returns Type Description System.Boolean | Improve this Doc View Source IsOptimized(IQueryElement, out IQueryElement) Declaration public bool IsOptimized(IQueryElement element, out IQueryElement newExpr) Parameters Type Name Description IQueryElement element IQueryElement newExpr Returns Type Description System.Boolean | Improve this Doc View Source RegisterOptimized(IQueryElement, IQueryElement) Declaration public void RegisterOptimized(IQueryElement element, IQueryElement newExpr) Parameters Type Name Description IQueryElement element IQueryElement newExpr | Improve this Doc View Source SuggestDynamicParameter(DbDataType, String, Nullable<Object>) Declaration public SqlParameter SuggestDynamicParameter(DbDataType dbDataType, string name, object? value) Parameters Type Name Description DbDataType dbDataType System.String name System.Nullable < System.Object > value Returns Type Description SqlParameter Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.SqlProviderFlags.html": {
    "href": "api/LinqToDB.SqlProvider.SqlProviderFlags.html",
    "title": "Class SqlProviderFlags | Linq To DB (aka linq2db)",
    "keywords": "Class SqlProviderFlags Inheritance System.Object SqlProviderFlags Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public class SqlProviderFlags : object Properties | Improve this Doc View Source AcceptsOuterExpressionInAggregate Provider supports aggregated expression with Outer reference SELECT ( SELECT SUM(inner.FieldX + outer.FieldOuter) FROM table2 inner ) AS Sum_Column FROM table1 outer Otherwise aggeragated expression will be wrapped in subquery and aggregate function will be applied to subquery column. SELECT ( SELECT SUM(sub.Column) FROM ( SELECT inner.FieldX + outer.FieldOuter AS Column FROM table2 inner ) sub ) AS Sum_Column FROM table1 outer Declaration public bool AcceptsOuterExpressionInAggregate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source AcceptsTakeAsParameter Declaration public bool AcceptsTakeAsParameter { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source AcceptsTakeAsParameterIfSkip Declaration public bool AcceptsTakeAsParameterIfSkip { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source CanCombineParameters Declaration public bool CanCombineParameters { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source CustomFlags Flags for use by external providers. Declaration public List<string> CustomFlags { get; } Property Value Type Description List < System.String > | Improve this Doc View Source DefaultMultiQueryIsolationLevel Used when there is query which needs several additional database request for completing query. Default is Declaration public IsolationLevel DefaultMultiQueryIsolationLevel { get; set; } Property Value Type Description IsolationLevel | Improve this Doc View Source IsAllSetOperationsSupported Provider supports EXCEPT ALL, INTERSECT ALL set operators. Otherwise it will be emulated. Declaration public bool IsAllSetOperationsSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsApplyJoinSupported Declaration public bool IsApplyJoinSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCommonTableExpressionsSupported Provider supports CTE expressions. If provider does not support CTE, unsuported exception will be thrown when using CTE. Declaration public bool IsCommonTableExpressionsSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCountDistinctSupported Provider supports COUNT(DISTINCT column) function. Otherwise it will be emulated. Declaration public bool IsCountDistinctSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCountSubQuerySupported Declaration public bool IsCountSubQuerySupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCrossJoinSupported Provider supports: CROSS JOIN a Supported Declaration public bool IsCrossJoinSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDistinctOrderBySupported Provider supports DISTINCT and ORDER BY with fields that are not in projection. Declaration public bool IsDistinctOrderBySupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDistinctSetOperationsSupported Provider supports EXCEPT, INTERSECT set operators. Otherwise it will be emulated. Declaration public bool IsDistinctSetOperationsSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsGroupByColumnRequred Provider requires that selected subquery column must be used in group by even for constant column. Declaration public bool IsGroupByColumnRequred { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsGroupByExpressionSupported Declaration public bool IsGroupByExpressionSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsIdentityParameterRequired Declaration public bool IsIdentityParameterRequired { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInnerJoinAsCrossSupported Provider supports: INNER JOIN a ON 1 = 1 Declaration public bool IsInnerJoinAsCrossSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInsertOrUpdateSupported Declaration public bool IsInsertOrUpdateSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOrderByAggregateFunctionsSupported Provider supports aggregate functions in ORDER BY statement. Declaration public bool IsOrderByAggregateFunctionsSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsParameterOrderDependent Declaration public bool IsParameterOrderDependent { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSkipSupported Declaration public bool IsSkipSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSkipSupportedIfTake Declaration public bool IsSkipSupportedIfTake { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSubQueryColumnSupported Declaration public bool IsSubQueryColumnSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSubQueryOrderBySupported Declaration public bool IsSubQueryOrderBySupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSubQueryTakeSupported Declaration public bool IsSubQueryTakeSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSybaseBuggyGroupBy Declaration public bool IsSybaseBuggyGroupBy { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsTakeSupported Declaration public bool IsTakeSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsUpdateFromSupported Provider supports UPDATE A SET ... FROM B syntax Declaration public bool IsUpdateFromSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsUpdateSetTableAliasSupported Declaration public bool IsUpdateSetTableAliasSupported { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxInListValuesCount Declaration public int MaxInListValuesCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TakeHintsSupported Declaration public TakeHints? TakeHintsSupported { get; set; } Property Value Type Description System.Nullable < TakeHints > Methods | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj Returns Type Description System.Boolean | Improve this Doc View Source GetAcceptsTakeAsParameterFlag(SelectQuery) Declaration public bool GetAcceptsTakeAsParameterFlag(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source GetIsSkipSupportedFlag(ISqlExpression, ISqlExpression) Declaration public bool GetIsSkipSupportedFlag(ISqlExpression takeExpression, ISqlExpression skipExpression) Parameters Type Name Description ISqlExpression takeExpression ISqlExpression skipExpression Returns Type Description System.Boolean | Improve this Doc View Source GetIsTakeHintsSupported(TakeHints) Declaration public bool GetIsTakeHintsSupported(TakeHints hints) Parameters Type Name Description TakeHints hints Returns Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlProvider.ValueToSqlConverter.html": {
    "href": "api/LinqToDB.SqlProvider.ValueToSqlConverter.html",
    "title": "Class ValueToSqlConverter | Linq To DB (aka linq2db)",
    "keywords": "Class ValueToSqlConverter Inheritance System.Object ValueToSqlConverter Namespace : LinqToDB.SqlProvider Assembly : linq2db.dll Syntax public class ValueToSqlConverter : object Constructors | Improve this Doc View Source ValueToSqlConverter() Declaration public ValueToSqlConverter() | Improve this Doc View Source ValueToSqlConverter(ValueToSqlConverter[]) Declaration public ValueToSqlConverter(params ValueToSqlConverter[] converters) Parameters Type Name Description ValueToSqlConverter [] converters Methods | Improve this Doc View Source CanConvert(SqlDataType, Nullable<Object>) Declaration public bool CanConvert(SqlDataType dataType, object? value) Parameters Type Name Description SqlDataType dataType System.Nullable < System.Object > value Returns Type Description System.Boolean | Improve this Doc View Source CanConvert(Type) Declaration public bool CanConvert(Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean | Improve this Doc View Source Convert(StringBuilder, SqlDataType, Nullable<Object>) Declaration public StringBuilder Convert(StringBuilder stringBuilder, SqlDataType dataType, object? value) Parameters Type Name Description StringBuilder stringBuilder SqlDataType dataType System.Nullable < System.Object > value Returns Type Description StringBuilder | Improve this Doc View Source Convert(StringBuilder, Nullable<Object>) Declaration public StringBuilder Convert(StringBuilder stringBuilder, object? value) Parameters Type Name Description StringBuilder stringBuilder System.Nullable < System.Object > value Returns Type Description StringBuilder | Improve this Doc View Source SetConverter(Type, Nullable<Action<StringBuilder, SqlDataType, Object>>) Declaration public void SetConverter(Type type, Action<StringBuilder, SqlDataType, object>? converter) Parameters Type Name Description Type type System.Nullable < Action < StringBuilder , SqlDataType , System.Object >> converter | Improve this Doc View Source TryConvert(StringBuilder, SqlDataType, Nullable<Object>) Declaration public bool TryConvert(StringBuilder stringBuilder, SqlDataType dataType, object? value) Parameters Type Name Description StringBuilder stringBuilder SqlDataType dataType System.Nullable < System.Object > value Returns Type Description System.Boolean | Improve this Doc View Source TryConvert(StringBuilder, Nullable<Object>) Declaration public bool TryConvert(StringBuilder stringBuilder, object? value) Parameters Type Name Description StringBuilder stringBuilder System.Nullable < System.Object > value Returns Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.AliasesContext.html": {
    "href": "api/LinqToDB.SqlQuery.AliasesContext.html",
    "title": "Class AliasesContext | Linq To DB (aka linq2db)",
    "keywords": "Class AliasesContext Inheritance System.Object AliasesContext Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class AliasesContext : object Methods | Improve this Doc View Source GetAliased() Declaration public ICollection<IQueryElement> GetAliased() Returns Type Description ICollection < IQueryElement > | Improve this Doc View Source GetParameters() Declaration public SqlParameter[] GetParameters() Returns Type Description SqlParameter [] | Improve this Doc View Source GetUsedTableAliases() Declaration public HashSet<string> GetUsedTableAliases() Returns Type Description HashSet < System.String > | Improve this Doc View Source IsAliased(IQueryElement) Declaration public bool IsAliased(IQueryElement element) Parameters Type Name Description IQueryElement element Returns Type Description System.Boolean | Improve this Doc View Source RegisterAliased(IReadOnlyCollection<IQueryElement>) Declaration public void RegisterAliased(IReadOnlyCollection<IQueryElement> elements) Parameters Type Name Description IReadOnlyCollection < IQueryElement > elements | Improve this Doc View Source RegisterAliased(IQueryElement) Declaration public void RegisterAliased(IQueryElement element) Parameters Type Name Description IQueryElement element Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ClauseBase.html": {
    "href": "api/LinqToDB.SqlQuery.ClauseBase.html",
    "title": "Class ClauseBase | Linq To DB (aka linq2db)",
    "keywords": "Class ClauseBase Inheritance System.Object ClauseBase SqlFromClause SqlGroupByClause SqlOrderByClause SqlSelectClause SqlWhereClause.Next Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class ClauseBase : object Constructors | Improve this Doc View Source ClauseBase(SelectQuery) Declaration protected ClauseBase(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source From Declaration public SqlFromClause From { get; } Property Value Type Description SqlFromClause | Improve this Doc View Source GroupBy Declaration public SqlGroupByClause GroupBy { get; } Property Value Type Description SqlGroupByClause | Improve this Doc View Source Having Declaration public SqlWhereClause Having { get; } Property Value Type Description SqlWhereClause | Improve this Doc View Source OrderBy Declaration public SqlOrderByClause OrderBy { get; } Property Value Type Description SqlOrderByClause | Improve this Doc View Source Select Declaration public SqlSelectClause Select { get; } Property Value Type Description SqlSelectClause | Improve this Doc View Source SelectQuery Declaration protected SelectQuery SelectQuery { get; } Property Value Type Description SelectQuery | Improve this Doc View Source Where Declaration public SqlWhereClause Where { get; } Property Value Type Description SqlWhereClause Methods | Improve this Doc View Source End() Declaration public SelectQuery End() Returns Type Description SelectQuery Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ClauseBase-2.html": {
    "href": "api/LinqToDB.SqlQuery.ClauseBase-2.html",
    "title": "Class ClauseBase<T1, T2> | Linq To DB (aka linq2db)",
    "keywords": "Class ClauseBase<T1, T2> Inheritance System.Object ConditionBase <T1, T2> ClauseBase<T1, T2> SqlWhereClause Inherited Members ConditionBase<T1, T2>.Search ConditionBase<T1, T2>.GetNext() ConditionBase<T1, T2>.SetOr(Boolean) ConditionBase<T1, T2>.Not ConditionBase<T1, T2>.Expr(ISqlExpression) ConditionBase<T1, T2>.Field(SqlField) ConditionBase<T1, T2>.SubQuery(SelectQuery) ConditionBase<T1, T2>.Value(Object) ConditionBase<T1, T2>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class ClauseBase<T1, T2> : ConditionBase<T1, T2> where T1 : ClauseBase<T1, T2> Type Parameters Name Description T1 T2 Constructors | Improve this Doc View Source ClauseBase(SelectQuery) Declaration protected ClauseBase(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source From Declaration public SqlFromClause From { get; } Property Value Type Description SqlFromClause | Improve this Doc View Source GroupBy Declaration public SqlGroupByClause GroupBy { get; } Property Value Type Description SqlGroupByClause | Improve this Doc View Source Having Declaration public SqlWhereClause Having { get; } Property Value Type Description SqlWhereClause | Improve this Doc View Source OrderBy Declaration public SqlOrderByClause OrderBy { get; } Property Value Type Description SqlOrderByClause | Improve this Doc View Source Select Declaration public SqlSelectClause Select { get; } Property Value Type Description SqlSelectClause | Improve this Doc View Source SelectQuery Declaration protected SelectQuery SelectQuery { get; } Property Value Type Description SelectQuery Methods | Improve this Doc View Source End() Declaration public SelectQuery End() Returns Type Description SelectQuery Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.CloneVisitor-1.html": {
    "href": "api/LinqToDB.SqlQuery.CloneVisitor-1.html",
    "title": "Struct CloneVisitor<TContext> | Linq To DB (aka linq2db)",
    "keywords": "Struct CloneVisitor<TContext> Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public readonly struct CloneVisitor<TContext> Type Parameters Name Description TContext Methods | Improve this Doc View Source Clone<T>(T[]) Declaration public readonly T[] Clone<T>(T[] elements) where T : class, IQueryElement Parameters Type Name Description T[] elements Returns Type Description T[] Type Parameters Name Description T Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsDistinctFrom<T>(T, Nullable<T>) Sql.IsNotDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, Nullable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ConditionBase-2.Expr_.html": {
    "href": "api/LinqToDB.SqlQuery.ConditionBase-2.Expr_.html",
    "title": "Class ConditionBase<T1, T2>.Expr_ | Linq To DB (aka linq2db)",
    "keywords": "Class ConditionBase<T1, T2>.Expr_ Inheritance System.Object ConditionBase<T1, T2>.Expr_ Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Expr_ : object Properties | Improve this Doc View Source Equal Declaration public ConditionBase<T1, T2>.Expr_.Op_ Equal { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source Greater Declaration public ConditionBase<T1, T2>.Expr_.Op_ Greater { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source GreaterOrEqual Declaration public ConditionBase<T1, T2>.Expr_.Op_ GreaterOrEqual { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source IsNotNull Declaration public T2 IsNotNull { get; } Property Value Type Description T2 | Improve this Doc View Source IsNull Declaration public T2 IsNull { get; } Property Value Type Description T2 | Improve this Doc View Source Less Declaration public ConditionBase<T1, T2>.Expr_.Op_ Less { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source LessOrEqual Declaration public ConditionBase<T1, T2>.Expr_.Op_ LessOrEqual { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source NotEqual Declaration public ConditionBase<T1, T2>.Expr_.Op_ NotEqual { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source NotGreater Declaration public ConditionBase<T1, T2>.Expr_.Op_ NotGreater { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> | Improve this Doc View Source NotLess Declaration public ConditionBase<T1, T2>.Expr_.Op_ NotLess { get; } Property Value Type Description ConditionBase.Expr_.Op_ <> Methods | Improve this Doc View Source Between(ISqlExpression, ISqlExpression) Declaration public T2 Between(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description T2 | Improve this Doc View Source In(SelectQuery) Declaration public T2 In(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source In(Object[]) Declaration public T2 In(params object[] exprs) Parameters Type Name Description System.Object [] exprs Returns Type Description T2 | Improve this Doc View Source Like(ISqlExpression) Declaration public T2 Like(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description T2 | Improve this Doc View Source Like(ISqlExpression, SqlValue) Declaration public T2 Like(ISqlExpression expression, SqlValue escape) Parameters Type Name Description ISqlExpression expression SqlValue escape Returns Type Description T2 | Improve this Doc View Source Like(String) Declaration public T2 Like(string expression) Parameters Type Name Description System.String expression Returns Type Description T2 | Improve this Doc View Source Like(String, SqlValue) Declaration public T2 Like(string expression, SqlValue escape) Parameters Type Name Description System.String expression SqlValue escape Returns Type Description T2 | Improve this Doc View Source NotBetween(ISqlExpression, ISqlExpression) Declaration public T2 NotBetween(ISqlExpression expr1, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 ISqlExpression expr2 Returns Type Description T2 | Improve this Doc View Source NotIn(SelectQuery) Declaration public T2 NotIn(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source NotIn(Object[]) Declaration public T2 NotIn(params object[] exprs) Parameters Type Name Description System.Object [] exprs Returns Type Description T2 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ConditionBase-2.Expr_.Op_.html": {
    "href": "api/LinqToDB.SqlQuery.ConditionBase-2.Expr_.Op_.html",
    "title": "Class ConditionBase<T1, T2>.Expr_.Op_ | Linq To DB (aka linq2db)",
    "keywords": "Class ConditionBase<T1, T2>.Expr_.Op_ Inheritance System.Object ConditionBase<T1, T2>.Expr_.Op_ Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Op_ : object Methods | Improve this Doc View Source All(SelectQuery) Declaration public T2 All(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Any(SelectQuery) Declaration public T2 Any(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Expr(ISqlExpression) Declaration public T2 Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description T2 | Improve this Doc View Source Field(SqlField) Declaration public T2 Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description T2 | Improve this Doc View Source Some(SelectQuery) Declaration public T2 Some(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source SubQuery(SelectQuery) Declaration public T2 SubQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description T2 | Improve this Doc View Source Value(Object) Declaration public T2 Value(object value) Parameters Type Name Description System.Object value Returns Type Description T2 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ConditionBase-2.html": {
    "href": "api/LinqToDB.SqlQuery.ConditionBase-2.html",
    "title": "Class ConditionBase<T1, T2> | Linq To DB (aka linq2db)",
    "keywords": "Class ConditionBase<T1, T2> Inheritance System.Object ConditionBase<T1, T2> ClauseBase<T1, T2> SqlFromClause.Join SqlSearchCondition Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class ConditionBase<T1, T2> : object where T1 : ConditionBase<T1, T2> Type Parameters Name Description T1 T2 Properties | Improve this Doc View Source Not Declaration public ConditionBase<T1, T2>.Not_ Not { get; } Property Value Type Description ConditionBase.Not_ <> | Improve this Doc View Source Search Declaration protected abstract SqlSearchCondition Search { get; } Property Value Type Description SqlSearchCondition Methods | Improve this Doc View Source Exists(SelectQuery) Declaration public T2 Exists(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Expr(ISqlExpression) Declaration public ConditionBase<T1, T2>.Expr_ Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source Field(SqlField) Declaration public ConditionBase<T1, T2>.Expr_ Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source GetNext() Declaration protected abstract T2 GetNext() Returns Type Description T2 | Improve this Doc View Source SetOr(Boolean) Declaration protected T1 SetOr(bool value) Parameters Type Name Description System.Boolean value Returns Type Description T1 | Improve this Doc View Source SubQuery(SelectQuery) Declaration public ConditionBase<T1, T2>.Expr_ SubQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source Value(Object) Declaration public ConditionBase<T1, T2>.Expr_ Value(object value) Parameters Type Name Description System.Object value Returns Type Description ConditionBase.Expr_ <> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ConditionBase-2.Not_.html": {
    "href": "api/LinqToDB.SqlQuery.ConditionBase-2.Not_.html",
    "title": "Class ConditionBase<T1, T2>.Not_ | Linq To DB (aka linq2db)",
    "keywords": "Class ConditionBase<T1, T2>.Not_ Inheritance System.Object ConditionBase<T1, T2>.Not_ Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Not_ : object Methods | Improve this Doc View Source Exists(SelectQuery) Declaration public T2 Exists(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description T2 | Improve this Doc View Source Expr(ISqlExpression) Declaration public ConditionBase<T1, T2>.Expr_ Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source Field(SqlField) Declaration public ConditionBase<T1, T2>.Expr_ Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source SubQuery(SelectQuery) Declaration public ConditionBase<T1, T2>.Expr_ SubQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description ConditionBase.Expr_ <> | Improve this Doc View Source Value(Object) Declaration public ConditionBase<T1, T2>.Expr_ Value(object value) Parameters Type Name Description System.Object value Returns Type Description ConditionBase.Expr_ <> Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ConvertVisitor-1.html": {
    "href": "api/LinqToDB.SqlQuery.ConvertVisitor-1.html",
    "title": "Class ConvertVisitor<TContext> | Linq To DB (aka linq2db)",
    "keywords": "Class ConvertVisitor<TContext> Inheritance System.Object ConvertVisitor<TContext> Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class ConvertVisitor<TContext> : object Type Parameters Name Description TContext Fields | Improve this Doc View Source AllowMutation Declaration public bool AllowMutation Field Value Type Description System.Boolean | Improve this Doc View Source Context Declaration public TContext Context Field Value Type Description TContext | Improve this Doc View Source CurrentElement Declaration public IQueryElement CurrentElement Field Value Type Description IQueryElement | Improve this Doc View Source HasStack Declaration public bool HasStack Field Value Type Description System.Boolean Properties | Improve this Doc View Source ParentElement Declaration public IQueryElement ParentElement { get; } Property Value Type Description IQueryElement | Improve this Doc View Source Stack Declaration public List<IQueryElement> Stack { get; } Property Value Type Description List < IQueryElement > Methods | Improve this Doc View Source AddVisited(IQueryElement, IQueryElement) Declaration public void AddVisited(IQueryElement element, IQueryElement newElement) Parameters Type Name Description IQueryElement element IQueryElement newElement | Improve this Doc View Source RemoveVisited(IQueryElement) Declaration public void RemoveVisited(IQueryElement element) Parameters Type Name Description IQueryElement element Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.CteClause.html": {
    "href": "api/LinqToDB.SqlQuery.CteClause.html",
    "title": "Class CteClause | Linq To DB (aka linq2db)",
    "keywords": "Class CteClause Inheritance System.Object CteClause Implements IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class CteClause : object, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source CteClause(SelectQuery, Type, Boolean, Nullable<String>) Declaration public CteClause(SelectQuery body, Type objectType, bool isRecursive, string? name) Parameters Type Name Description SelectQuery body Type objectType System.Boolean isRecursive System.Nullable < System.String > name Fields | Improve this Doc View Source CteIDCounter Declaration public static int CteIDCounter Field Value Type Description System.Int32 Properties | Improve this Doc View Source Body Declaration public SelectQuery Body { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source CteID Declaration public int CteID { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Fields Declaration public SqlField[] Fields { get; } Property Value Type Description SqlField [] | Improve this Doc View Source IsRecursive Declaration public bool IsRecursive { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string? Name { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ObjectType Declaration public Type ObjectType { get; set; } Property Value Type Description Type Methods | Improve this Doc View Source RegisterFieldMapping(Int32, Func<SqlField>) Declaration public SqlField RegisterFieldMapping(int index, Func<SqlField> fieldFactory) Parameters Type Name Description System.Int32 index Func < SqlField > fieldFactory Returns Type Description SqlField | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.DefaultNullable.html": {
    "href": "api/LinqToDB.SqlQuery.DefaultNullable.html",
    "title": "Enum DefaultNullable | Linq To DB (aka linq2db)",
    "keywords": "Enum DefaultNullable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum DefaultNullable : int Fields Name Description None NotNull Null Extension Methods Map.DeepCopy<DefaultNullable>() Sql.IsDistinctFrom<DefaultNullable>(DefaultNullable) Sql.IsDistinctFrom<DefaultNullable>(Nullable<DefaultNullable>) Sql.IsNotDistinctFrom<DefaultNullable>(DefaultNullable) Sql.IsNotDistinctFrom<DefaultNullable>(Nullable<DefaultNullable>) SqlExtensions.In<DefaultNullable>(IEnumerable<DefaultNullable>) SqlExtensions.In<DefaultNullable>(IQueryable<DefaultNullable>) SqlExtensions.In<DefaultNullable>(DefaultNullable[]) SqlExtensions.In<DefaultNullable>(DefaultNullable, DefaultNullable) SqlExtensions.In<DefaultNullable>(DefaultNullable, DefaultNullable, DefaultNullable) SqlExtensions.NotIn<DefaultNullable>(IEnumerable<DefaultNullable>) SqlExtensions.NotIn<DefaultNullable>(IQueryable<DefaultNullable>) SqlExtensions.NotIn<DefaultNullable>(DefaultNullable[]) SqlExtensions.NotIn<DefaultNullable>(DefaultNullable, DefaultNullable) SqlExtensions.NotIn<DefaultNullable>(DefaultNullable, DefaultNullable, DefaultNullable)"
  },
  "api/LinqToDB.SqlQuery.EvaluationContext.html": {
    "href": "api/LinqToDB.SqlQuery.EvaluationContext.html",
    "title": "Class EvaluationContext | Linq To DB (aka linq2db)",
    "keywords": "Class EvaluationContext Inheritance System.Object EvaluationContext Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class EvaluationContext : object Constructors | Improve this Doc View Source EvaluationContext(IReadOnlyParameterValues) Declaration public EvaluationContext(IReadOnlyParameterValues parameterValues = null) Parameters Type Name Description IReadOnlyParameterValues parameterValues Properties | Improve this Doc View Source ParameterValues Declaration public IReadOnlyParameterValues ParameterValues { get; } Property Value Type Description IReadOnlyParameterValues Methods | Improve this Doc View Source Register(IQueryElement, Nullable<Object>) Declaration public void Register(IQueryElement expr, object? value) Parameters Type Name Description IQueryElement expr System.Nullable < System.Object > value | Improve this Doc View Source RegisterError(IQueryElement, String) Declaration public void RegisterError(IQueryElement expr, string error) Parameters Type Name Description IQueryElement expr System.String error Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.Extensions.html": {
    "href": "api/LinqToDB.SqlQuery.Extensions.html",
    "title": "Class Extensions | Linq To DB (aka linq2db)",
    "keywords": "Class Extensions Inheritance System.Object Extensions Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class Extensions : object Methods | Improve this Doc View Source CrossApply(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join CrossApply(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source CrossApply(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join CrossApply(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source FullJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join FullJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source FullJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join FullJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source InnerJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join InnerJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source InnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join InnerJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source Join(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join Join(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source Join(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join Join(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source LeftJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join LeftJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source LeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join LeftJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source OuterApply(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join OuterApply(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source OuterApply(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join OuterApply(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source RightJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join RightJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source RightJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join RightJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakInnerJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakInnerJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakInnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakInnerJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakLeftJoin(ISqlTableSource, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakLeftJoin(this ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join | Improve this Doc View Source WeakLeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Declaration public static SqlFromClause.Join WeakLeftJoin(this ISqlTableSource table, string alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.String alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause.Join"
  },
  "api/LinqToDB.SqlQuery.GroupingType.html": {
    "href": "api/LinqToDB.SqlQuery.GroupingType.html",
    "title": "Enum GroupingType | Linq To DB (aka linq2db)",
    "keywords": "Enum GroupingType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum GroupingType : int Fields Name Description Cube Default GroupBySets Rollup Extension Methods Map.DeepCopy<GroupingType>() Sql.IsDistinctFrom<GroupingType>(GroupingType) Sql.IsDistinctFrom<GroupingType>(Nullable<GroupingType>) Sql.IsNotDistinctFrom<GroupingType>(GroupingType) Sql.IsNotDistinctFrom<GroupingType>(Nullable<GroupingType>) SqlExtensions.In<GroupingType>(IEnumerable<GroupingType>) SqlExtensions.In<GroupingType>(IQueryable<GroupingType>) SqlExtensions.In<GroupingType>(GroupingType[]) SqlExtensions.In<GroupingType>(GroupingType, GroupingType) SqlExtensions.In<GroupingType>(GroupingType, GroupingType, GroupingType) SqlExtensions.NotIn<GroupingType>(IEnumerable<GroupingType>) SqlExtensions.NotIn<GroupingType>(IQueryable<GroupingType>) SqlExtensions.NotIn<GroupingType>(GroupingType[]) SqlExtensions.NotIn<GroupingType>(GroupingType, GroupingType) SqlExtensions.NotIn<GroupingType>(GroupingType, GroupingType, GroupingType)"
  },
  "api/LinqToDB.SqlQuery.html": {
    "href": "api/LinqToDB.SqlQuery.html",
    "title": "Namespace LinqToDB.SqlQuery | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.SqlQuery Classes AliasesContext ClauseBase ClauseBase<T1, T2> ConditionBase<T1, T2> ConditionBase<T1, T2>.Expr_ ConditionBase<T1, T2>.Expr_.Op_ ConditionBase<T1, T2>.Not_ ConvertVisitor<TContext> CteClause EvaluationContext Extensions Precedence QueryHelper QueryInformation This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. QueryInformation.HierarchyInfo QueryVisitorExtensions ReservedWords SelectQuery SqlAliasPlaceholder SqlBinaryExpression SqlColumn SqlComment SqlCondition SqlConditionalInsertClause SqlCreateTableStatement SqlCteTable SqlDataType SqlDeleteStatement SqlDropTableStatement SqlException SqlExpression SqlExtensions This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. SqlField SqlFromClause SqlFromClause.Join SqlFromClause.Join.Next SqlFunction SqlGroupByClause SqlGroupingSet SqlInsertClause SqlInsertOrUpdateStatement SqlInsertStatement SqlInsertWithIdentity SqlJoinedTable SqlMergeOperationClause SqlMergeStatement SqlMultiInsertStatement SqlObjectExpression SqlOrderByClause SqlOrderByItem SqlOutputClause SqlParameter SqlParameterValue SqlParameterValues SqlPredicate SqlPredicate.BaseNotExpr SqlPredicate.Between SqlPredicate.Expr SqlPredicate.ExprExpr SqlPredicate.FuncLike SqlPredicate.InList SqlPredicate.InSubQuery SqlPredicate.IsDistinct SqlPredicate.IsNull SqlPredicate.IsTrue SqlPredicate.Like SqlPredicate.NotExpr SqlPredicate.SearchString SqlRawSqlTable SqlSearchCondition SqlSearchCondition.Next SqlSelectClause SqlSelectStatement SqlSetExpression SqlSetOperator SqlStatement SqlStatementWithQueryBase SqlTable SqlTable<T> SqlTableLikeSource SqlTableSource SqlTruncateTableStatement SqlUpdateClause SqlUpdateStatement SqlValue SqlValuesTable SqlWhereClause SqlWhereClause.Next SqlWithClause WalkOptions Structs CloneVisitor<TContext> QueryFindVisitor<TContext> QueryParentVisitor<TContext> QueryVisitor<TContext> Interfaces IInvertibleElement IQueryElement IReadOnlyParameterValues ISqlExpression ISqlExpressionWalkable ISqlPredicate ISqlTableSource Enums DefaultNullable GroupingType JoinType MultiInsertType QueryElementType QueryInformation.HierarchyType QueryType SetOperation SqlFlags SqlPredicate.Operator SqlPredicate.SearchString.SearchKind SqlTableType"
  },
  "api/LinqToDB.SqlQuery.IInvertibleElement.html": {
    "href": "api/LinqToDB.SqlQuery.IInvertibleElement.html",
    "title": "Interface IInvertibleElement | Linq To DB (aka linq2db)",
    "keywords": "Interface IInvertibleElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface IInvertibleElement Methods | Improve this Doc View Source CanInvert() Declaration bool CanInvert() Returns Type Description System.Boolean | Improve this Doc View Source Invert() Declaration IQueryElement Invert() Returns Type Description IQueryElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.IQueryElement.html": {
    "href": "api/LinqToDB.SqlQuery.IQueryElement.html",
    "title": "Interface IQueryElement | Linq To DB (aka linq2db)",
    "keywords": "Interface IQueryElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface IQueryElement Properties | Improve this Doc View Source ElementType Declaration QueryElementType ElementType { get; } Property Value Type Description QueryElementType Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) QueryHelper.ToDebugString(IQueryElement) QueryHelper.TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>) QueryHelper.IsMutable(IQueryElement) QueryHelper.CanBeEvaluated(IQueryElement, Boolean) QueryHelper.CanBeEvaluated(IQueryElement, EvaluationContext) QueryHelper.TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>, out Nullable<String>) QueryHelper.EvaluateExpression(IQueryElement, EvaluationContext) QueryHelper.EvaluateBoolExpression(IQueryElement, EvaluationContext, Nullable<Boolean>) QueryVisitorExtensions.Visit<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) QueryVisitorExtensions.Visit(IQueryElement, Action<IQueryElement>) QueryVisitorExtensions.VisitAll<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) QueryVisitorExtensions.VisitAll(IQueryElement, Action<IQueryElement>) QueryVisitorExtensions.VisitParentFirst<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirst(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirstAll<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirstAll(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Find<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Find(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Find(IQueryElement, QueryElementType) QueryVisitorExtensions.Clone<T>(T, Dictionary<IQueryElement, IQueryElement>) QueryVisitorExtensions.Clone<T, TContext>(T, TContext, Dictionary<IQueryElement, IQueryElement>, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T, TContext>(T, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T>(T, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T>(T) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Func<ConvertVisitor<TContext>, Boolean>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<T>(T, Boolean, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.IReadOnlyParameterValues.html": {
    "href": "api/LinqToDB.SqlQuery.IReadOnlyParameterValues.html",
    "title": "Interface IReadOnlyParameterValues | Linq To DB (aka linq2db)",
    "keywords": "Interface IReadOnlyParameterValues Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface IReadOnlyParameterValues Methods | Improve this Doc View Source TryGetValue(SqlParameter, out SqlParameterValue) Declaration bool TryGetValue(SqlParameter parameter, out SqlParameterValue value) Parameters Type Name Description SqlParameter parameter SqlParameterValue value Returns Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ISqlExpression.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlExpression.html",
    "title": "Interface ISqlExpression | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlExpression Inherited Members IQueryElement.ElementType IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlExpression : IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source CanBeNull Declaration bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Precedence Declaration int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SystemType Declaration Type? SystemType { get; } Property Value Type Description System.Nullable < Type > Methods | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) QueryHelper.ToDebugString(IQueryElement) QueryHelper.IsComplexExpression(ISqlExpression) QueryHelper.ShouldCheckForNull(ISqlExpression) QueryHelper.GetExpressionType(ISqlExpression) QueryHelper.TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>) QueryHelper.IsMutable(IQueryElement) QueryHelper.CanBeEvaluated(IQueryElement, Boolean) QueryHelper.CanBeEvaluated(IQueryElement, EvaluationContext) QueryHelper.TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>, out Nullable<String>) QueryHelper.EvaluateExpression(IQueryElement, EvaluationContext) QueryHelper.EvaluateBoolExpression(IQueryElement, EvaluationContext, Nullable<Boolean>) QueryVisitorExtensions.Visit<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) QueryVisitorExtensions.Visit(IQueryElement, Action<IQueryElement>) QueryVisitorExtensions.VisitAll<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) QueryVisitorExtensions.VisitAll(IQueryElement, Action<IQueryElement>) QueryVisitorExtensions.VisitParentFirst<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirst(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirstAll<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirstAll(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Find<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Find(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Find(IQueryElement, QueryElementType) QueryVisitorExtensions.Clone<T>(T, Dictionary<IQueryElement, IQueryElement>) QueryVisitorExtensions.Clone<T, TContext>(T, TContext, Dictionary<IQueryElement, IQueryElement>, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T, TContext>(T, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T>(T, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T>(T) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Func<ConvertVisitor<TContext>, Boolean>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<T>(T, Boolean, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ISqlExpressionWalkable.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlExpressionWalkable.html",
    "title": "Interface ISqlExpressionWalkable | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlExpressionWalkable Methods | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ISqlPredicate.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlPredicate.html",
    "title": "Interface ISqlPredicate | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlPredicate Inherited Members IQueryElement.ElementType IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlPredicate : IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source CanBeNull Declaration bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Precedence Declaration int Precedence { get; } Property Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) QueryHelper.ToDebugString(IQueryElement) QueryHelper.TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>) QueryHelper.IsMutable(IQueryElement) QueryHelper.CanBeEvaluated(IQueryElement, Boolean) QueryHelper.CanBeEvaluated(IQueryElement, EvaluationContext) QueryHelper.TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>, out Nullable<String>) QueryHelper.EvaluateExpression(IQueryElement, EvaluationContext) QueryHelper.EvaluateBoolExpression(IQueryElement, EvaluationContext, Nullable<Boolean>) QueryVisitorExtensions.Visit<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) QueryVisitorExtensions.Visit(IQueryElement, Action<IQueryElement>) QueryVisitorExtensions.VisitAll<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) QueryVisitorExtensions.VisitAll(IQueryElement, Action<IQueryElement>) QueryVisitorExtensions.VisitParentFirst<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirst(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirstAll<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirstAll(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Find<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Find(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Find(IQueryElement, QueryElementType) QueryVisitorExtensions.Clone<T>(T, Dictionary<IQueryElement, IQueryElement>) QueryVisitorExtensions.Clone<T, TContext>(T, TContext, Dictionary<IQueryElement, IQueryElement>, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T, TContext>(T, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T>(T, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T>(T) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Func<ConvertVisitor<TContext>, Boolean>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<T>(T, Boolean, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.ISqlTableSource.html": {
    "href": "api/LinqToDB.SqlQuery.ISqlTableSource.html",
    "title": "Interface ISqlTableSource | Linq To DB (aka linq2db)",
    "keywords": "Interface ISqlTableSource Inherited Members ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) ISqlExpression.CanBeNull ISqlExpression.Precedence ISqlExpression.SystemType IQueryElement.ElementType IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public interface ISqlTableSource : ISqlExpression, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source All Declaration SqlField All { get; } Property Value Type Description SqlField | Improve this Doc View Source SourceID Declaration int SourceID { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SqlTableType Declaration SqlTableType SqlTableType { get; } Property Value Type Description SqlTableType Methods | Improve this Doc View Source GetKeys(Boolean) Declaration IList<ISqlExpression> GetKeys(bool allIfEmpty) Parameters Type Name Description System.Boolean allIfEmpty Returns Type Description IList < ISqlExpression > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) Extensions.InnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.InnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.LeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, SqlFromClause.Join[]) Extensions.Join(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.CrossApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, SqlFromClause.Join[]) Extensions.OuterApply(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakInnerJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakLeftJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.WeakJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.RightJoin(ISqlTableSource, String, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, SqlFromClause.Join[]) Extensions.FullJoin(ISqlTableSource, String, SqlFromClause.Join[]) QueryHelper.ToDebugString(IQueryElement) QueryHelper.IsComplexExpression(ISqlExpression) QueryHelper.ShouldCheckForNull(ISqlExpression) QueryHelper.GetExpressionType(ISqlExpression) QueryHelper.TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>) QueryHelper.IsMutable(IQueryElement) QueryHelper.CanBeEvaluated(IQueryElement, Boolean) QueryHelper.CanBeEvaluated(IQueryElement, EvaluationContext) QueryHelper.TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>, out Nullable<String>) QueryHelper.EvaluateExpression(IQueryElement, EvaluationContext) QueryHelper.EvaluateBoolExpression(IQueryElement, EvaluationContext, Nullable<Boolean>) QueryVisitorExtensions.Visit<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) QueryVisitorExtensions.Visit(IQueryElement, Action<IQueryElement>) QueryVisitorExtensions.VisitAll<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) QueryVisitorExtensions.VisitAll(IQueryElement, Action<IQueryElement>) QueryVisitorExtensions.VisitParentFirst<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirst(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirstAll<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirstAll(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Find<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Find(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Find(IQueryElement, QueryElementType) QueryVisitorExtensions.Clone<T>(T, Dictionary<IQueryElement, IQueryElement>) QueryVisitorExtensions.Clone<T, TContext>(T, TContext, Dictionary<IQueryElement, IQueryElement>, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T, TContext>(T, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T>(T, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T>(T) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Func<ConvertVisitor<TContext>, Boolean>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<T>(T, Boolean, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.JoinType.html": {
    "href": "api/LinqToDB.SqlQuery.JoinType.html",
    "title": "Enum JoinType | Linq To DB (aka linq2db)",
    "keywords": "Enum JoinType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum JoinType : int Fields Name Description Auto CrossApply Full Inner Left OuterApply Right Extension Methods Map.DeepCopy<JoinType>() Sql.IsDistinctFrom<JoinType>(JoinType) Sql.IsDistinctFrom<JoinType>(Nullable<JoinType>) Sql.IsNotDistinctFrom<JoinType>(JoinType) Sql.IsNotDistinctFrom<JoinType>(Nullable<JoinType>) SqlExtensions.In<JoinType>(IEnumerable<JoinType>) SqlExtensions.In<JoinType>(IQueryable<JoinType>) SqlExtensions.In<JoinType>(JoinType[]) SqlExtensions.In<JoinType>(JoinType, JoinType) SqlExtensions.In<JoinType>(JoinType, JoinType, JoinType) SqlExtensions.NotIn<JoinType>(IEnumerable<JoinType>) SqlExtensions.NotIn<JoinType>(IQueryable<JoinType>) SqlExtensions.NotIn<JoinType>(JoinType[]) SqlExtensions.NotIn<JoinType>(JoinType, JoinType) SqlExtensions.NotIn<JoinType>(JoinType, JoinType, JoinType)"
  },
  "api/LinqToDB.SqlQuery.MultiInsertType.html": {
    "href": "api/LinqToDB.SqlQuery.MultiInsertType.html",
    "title": "Enum MultiInsertType | Linq To DB (aka linq2db)",
    "keywords": "Enum MultiInsertType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum MultiInsertType : int Fields Name Description All First Unconditional Extension Methods Map.DeepCopy<MultiInsertType>() Sql.IsDistinctFrom<MultiInsertType>(MultiInsertType) Sql.IsDistinctFrom<MultiInsertType>(Nullable<MultiInsertType>) Sql.IsNotDistinctFrom<MultiInsertType>(MultiInsertType) Sql.IsNotDistinctFrom<MultiInsertType>(Nullable<MultiInsertType>) SqlExtensions.In<MultiInsertType>(IEnumerable<MultiInsertType>) SqlExtensions.In<MultiInsertType>(IQueryable<MultiInsertType>) SqlExtensions.In<MultiInsertType>(MultiInsertType[]) SqlExtensions.In<MultiInsertType>(MultiInsertType, MultiInsertType) SqlExtensions.In<MultiInsertType>(MultiInsertType, MultiInsertType, MultiInsertType) SqlExtensions.NotIn<MultiInsertType>(IEnumerable<MultiInsertType>) SqlExtensions.NotIn<MultiInsertType>(IQueryable<MultiInsertType>) SqlExtensions.NotIn<MultiInsertType>(MultiInsertType[]) SqlExtensions.NotIn<MultiInsertType>(MultiInsertType, MultiInsertType) SqlExtensions.NotIn<MultiInsertType>(MultiInsertType, MultiInsertType, MultiInsertType)"
  },
  "api/LinqToDB.SqlQuery.Precedence.html": {
    "href": "api/LinqToDB.SqlQuery.Precedence.html",
    "title": "Class Precedence | Linq To DB (aka linq2db)",
    "keywords": "Class Precedence Inheritance System.Object Precedence Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Precedence : object Fields | Improve this Doc View Source Additive Declaration public const int Additive = null Field Value Type Description System.Int32 | Improve this Doc View Source Bitwise Declaration public const int Bitwise = null Field Value Type Description System.Int32 | Improve this Doc View Source Comparison Declaration public const int Comparison = null Field Value Type Description System.Int32 | Improve this Doc View Source Concatenate This precedence is only for SQLite's || concatenate operator: https://www.sqlite.org/lang_expr.html Declaration public const int Concatenate = null Field Value Type Description System.Int32 | Improve this Doc View Source LogicalConjunction Declaration public const int LogicalConjunction = null Field Value Type Description System.Int32 | Improve this Doc View Source LogicalDisjunction Declaration public const int LogicalDisjunction = null Field Value Type Description System.Int32 | Improve this Doc View Source LogicalNegation Declaration public const int LogicalNegation = null Field Value Type Description System.Int32 | Improve this Doc View Source Multiplicative Declaration public const int Multiplicative = null Field Value Type Description System.Int32 | Improve this Doc View Source Primary Declaration public const int Primary = null Field Value Type Description System.Int32 | Improve this Doc View Source Subtraction Declaration public const int Subtraction = null Field Value Type Description System.Int32 | Improve this Doc View Source Unary Declaration public const int Unary = null Field Value Type Description System.Int32 | Improve this Doc View Source Unknown Declaration public const int Unknown = null Field Value Type Description System.Int32 Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.QueryElementType.html": {
    "href": "api/LinqToDB.SqlQuery.QueryElementType.html",
    "title": "Enum QueryElementType | Linq To DB (aka linq2db)",
    "keywords": "Enum QueryElementType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum QueryElementType : int Fields Name Description BetweenPredicate Column Comment Condition ConditionalInsertClause CreateTableStatement CteClause DeleteStatement DropTableStatement ExprExprPredicate ExprPredicate FromClause FuncLikePredicate GroupByClause GroupingSet InListPredicate InsertClause InsertOrUpdateStatement InsertStatement InSubQueryPredicate IsDistinctPredicate IsNullPredicate IsTruePredicate JoinedTable LikePredicate MergeOperationClause MergeStatement MultiInsertStatement NotExprPredicate OrderByClause OrderByItem OutputClause SearchCondition SearchStringPredicate SelectClause SelectStatement SetExpression SetOperator SqlAliasPlaceholder SqlBinaryExpression SqlCteTable SqlDataType SqlExpression SqlField SqlFunction SqlObjectExpression SqlParameter SqlQuery SqlRawSqlTable SqlTable SqlTableLikeSource SqlValue SqlValuesTable TableSource TruncateTableStatement UpdateClause UpdateStatement WhereClause WithClause Extension Methods Map.DeepCopy<QueryElementType>() Sql.IsDistinctFrom<QueryElementType>(QueryElementType) Sql.IsDistinctFrom<QueryElementType>(Nullable<QueryElementType>) Sql.IsNotDistinctFrom<QueryElementType>(QueryElementType) Sql.IsNotDistinctFrom<QueryElementType>(Nullable<QueryElementType>) SqlExtensions.In<QueryElementType>(IEnumerable<QueryElementType>) SqlExtensions.In<QueryElementType>(IQueryable<QueryElementType>) SqlExtensions.In<QueryElementType>(QueryElementType[]) SqlExtensions.In<QueryElementType>(QueryElementType, QueryElementType) SqlExtensions.In<QueryElementType>(QueryElementType, QueryElementType, QueryElementType) SqlExtensions.NotIn<QueryElementType>(IEnumerable<QueryElementType>) SqlExtensions.NotIn<QueryElementType>(IQueryable<QueryElementType>) SqlExtensions.NotIn<QueryElementType>(QueryElementType[]) SqlExtensions.NotIn<QueryElementType>(QueryElementType, QueryElementType) SqlExtensions.NotIn<QueryElementType>(QueryElementType, QueryElementType, QueryElementType)"
  },
  "api/LinqToDB.SqlQuery.QueryFindVisitor-1.html": {
    "href": "api/LinqToDB.SqlQuery.QueryFindVisitor-1.html",
    "title": "Struct QueryFindVisitor<TContext> | Linq To DB (aka linq2db)",
    "keywords": "Struct QueryFindVisitor<TContext> Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public readonly struct QueryFindVisitor<TContext> Type Parameters Name Description TContext Constructors | Improve this Doc View Source QueryFindVisitor(TContext, Func<TContext, IQueryElement, Boolean>) Declaration public QueryFindVisitor(TContext context, Func<TContext, IQueryElement, bool> find) Parameters Type Name Description TContext context Func <TContext, IQueryElement , System.Boolean > find | Improve this Doc View Source QueryFindVisitor(Func<IQueryElement, Boolean>) Declaration public QueryFindVisitor(Func<IQueryElement, bool> find) Parameters Type Name Description Func < IQueryElement , System.Boolean > find Methods | Improve this Doc View Source Find(IQueryElement) Declaration public readonly IQueryElement Find(IQueryElement element) Parameters Type Name Description IQueryElement element Returns Type Description IQueryElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsDistinctFrom<T>(T, Nullable<T>) Sql.IsNotDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, Nullable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.QueryHelper.html": {
    "href": "api/LinqToDB.SqlQuery.QueryHelper.html",
    "title": "Class QueryHelper | Linq To DB (aka linq2db)",
    "keywords": "Class QueryHelper Inheritance System.Object QueryHelper Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class QueryHelper : object Methods | Improve this Doc View Source CanBeEvaluated(IQueryElement, EvaluationContext) Declaration public static bool CanBeEvaluated(this IQueryElement expr, EvaluationContext context) Parameters Type Name Description IQueryElement expr EvaluationContext context Returns Type Description System.Boolean | Improve this Doc View Source CanBeEvaluated(IQueryElement, Boolean) Declaration public static bool CanBeEvaluated(this IQueryElement expr, bool withParameters) Parameters Type Name Description IQueryElement expr System.Boolean withParameters Returns Type Description System.Boolean | Improve this Doc View Source CanRemoveOrderBy(SelectQuery, SqlProviderFlags, QueryInformation) Detects when we can remove order Declaration public static bool CanRemoveOrderBy(SelectQuery selectQuery, SqlProviderFlags flags, QueryInformation information) Parameters Type Name Description SelectQuery selectQuery SqlProviderFlags flags QueryInformation information Returns Type Description System.Boolean | Improve this Doc View Source CollectDependencies(IQueryElement, IEnumerable<ISqlTableSource>, HashSet<ISqlExpression>, Nullable<IEnumerable<IQueryElement>>) Declaration public static void CollectDependencies(IQueryElement root, IEnumerable<ISqlTableSource> sources, HashSet<ISqlExpression> found, IEnumerable<IQueryElement>? ignore = null) Parameters Type Name Description IQueryElement root IEnumerable < ISqlTableSource > sources HashSet < ISqlExpression > found System.Nullable < IEnumerable < IQueryElement >> ignore | Improve this Doc View Source CollectUniqueKeys(ISqlTableSource, Boolean, List<IList<ISqlExpression>>) Collects unique keys from different sources. Declaration public static void CollectUniqueKeys(ISqlTableSource tableSource, bool includeDistinct, List<IList<ISqlExpression>> knownKeys) Parameters Type Name Description ISqlTableSource tableSource System.Boolean includeDistinct Flag to include Distinct as unique key. List < IList < ISqlExpression >> knownKeys List with found keys. | Improve this Doc View Source CollectUniqueKeys(SqlTableSource, List<IList<ISqlExpression>>) Collects unique keys from different sources. Declaration public static void CollectUniqueKeys(SqlTableSource tableSource, List<IList<ISqlExpression>> knownKeys) Parameters Type Name Description SqlTableSource tableSource List < IList < ISqlExpression >> knownKeys List with found keys. | Improve this Doc View Source CollectUsedSources(IQueryElement, HashSet<ISqlTableSource>, Nullable<IEnumerable<IQueryElement>>) Declaration public static void CollectUsedSources(IQueryElement root, HashSet<ISqlTableSource> found, IEnumerable<IQueryElement>? ignore = null) Parameters Type Name Description IQueryElement root HashSet < ISqlTableSource > found System.Nullable < IEnumerable < IQueryElement >> ignore | Improve this Doc View Source ConcatSearchCondition(SqlWhereClause, SqlSearchCondition) Declaration public static void ConcatSearchCondition(this SqlWhereClause where, SqlSearchCondition search) Parameters Type Name Description SqlWhereClause where SqlSearchCondition search | Improve this Doc View Source ContainsElement(IQueryElement, IQueryElement) Declaration public static bool ContainsElement(IQueryElement testedRoot, IQueryElement element) Parameters Type Name Description IQueryElement testedRoot IQueryElement element Returns Type Description System.Boolean | Improve this Doc View Source ConvertFormatToConcatenation(String, IList<ISqlExpression>) Declaration public static ISqlExpression ConvertFormatToConcatenation(string format, IList<ISqlExpression> parameters) Parameters Type Name Description System.String format IList < ISqlExpression > parameters Returns Type Description ISqlExpression | Improve this Doc View Source CorrectSearchConditionNesting(SelectQuery, SqlCondition, HashSet<ISqlTableSource>) Declaration public static SqlCondition CorrectSearchConditionNesting(SelectQuery sql, SqlCondition condition, HashSet<ISqlTableSource> forTableSources) Parameters Type Name Description SelectQuery sql SqlCondition condition HashSet < ISqlTableSource > forTableSources Returns Type Description SqlCondition | Improve this Doc View Source CountElements(ISqlExpression) Declaration public static IDictionary<QueryElementType, int> CountElements(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description IDictionary < QueryElementType , System.Int32 > | Improve this Doc View Source DependencyCount(IQueryElement, IQueryElement, Nullable<HashSet<IQueryElement>>) Declaration public static int DependencyCount(IQueryElement testedRoot, IQueryElement onElement, HashSet<IQueryElement>? elementsToIgnore = null) Parameters Type Name Description IQueryElement testedRoot IQueryElement onElement System.Nullable < HashSet < IQueryElement >> elementsToIgnore Returns Type Description System.Int32 | Improve this Doc View Source EnsureConjunction(SqlSearchCondition) Ensures that expression is not A OR B but (A OR B) Function makes all needed manipulations for that Declaration public static SqlSearchCondition EnsureConjunction(this SqlSearchCondition searchCondition) Parameters Type Name Description SqlSearchCondition searchCondition Returns Type Description SqlSearchCondition | Improve this Doc View Source EnsureConjunction(SqlWhereClause) Ensures that expression is not A OR B but (A OR B) Function makes all needed manipulations for that Declaration public static SqlWhereClause EnsureConjunction(this SqlWhereClause whereClause) Parameters Type Name Description SqlWhereClause whereClause Returns Type Description SqlWhereClause | Improve this Doc View Source EnumerateAccessibleSources(SelectQuery) Enumerates table sources recursively based on joins Declaration public static IEnumerable<ISqlTableSource> EnumerateAccessibleSources(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description IEnumerable < ISqlTableSource > | Improve this Doc View Source EnumerateAccessibleSources(SqlTableSource) Declaration public static IEnumerable<ISqlTableSource> EnumerateAccessibleSources(SqlTableSource tableSource) Parameters Type Name Description SqlTableSource tableSource Returns Type Description IEnumerable < ISqlTableSource > | Improve this Doc View Source EnumerateAccessibleTables(SelectQuery) Declaration public static IEnumerable<SqlTable> EnumerateAccessibleTables(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description IEnumerable < SqlTable > | Improve this Doc View Source EnumerateInnerJoined(SelectQuery) Declaration public static IEnumerable<SqlTableSource> EnumerateInnerJoined(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description IEnumerable < SqlTableSource > | Improve this Doc View Source EnumerateInnerJoined(SqlTableSource) Declaration public static IEnumerable<SqlTableSource> EnumerateInnerJoined(SqlTableSource tableSource) Parameters Type Name Description SqlTableSource tableSource Returns Type Description IEnumerable < SqlTableSource > | Improve this Doc View Source EnumerateJoins(SelectQuery) Declaration public static IEnumerable<SqlJoinedTable> EnumerateJoins(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description IEnumerable < SqlJoinedTable > | Improve this Doc View Source EnumerateJoins(SqlTableSource) Declaration public static IEnumerable<SqlJoinedTable> EnumerateJoins(SqlTableSource tableSource) Parameters Type Name Description SqlTableSource tableSource Returns Type Description IEnumerable < SqlJoinedTable > | Improve this Doc View Source EnumerateLevelSources(SelectQuery) Declaration public static IEnumerable<ISqlTableSource> EnumerateLevelSources(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description IEnumerable < ISqlTableSource > | Improve this Doc View Source EnumerateLevelSources(SqlTableSource) Declaration public static IEnumerable<ISqlTableSource> EnumerateLevelSources(SqlTableSource tableSource) Parameters Type Name Description SqlTableSource tableSource Returns Type Description IEnumerable < ISqlTableSource > | Improve this Doc View Source EnumerateLevelTables(SelectQuery) Declaration public static IEnumerable<SqlTable> EnumerateLevelTables(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description IEnumerable < SqlTable > | Improve this Doc View Source EvaluateBoolExpression(IQueryElement, EvaluationContext, Nullable<Boolean>) Declaration public static bool? EvaluateBoolExpression(this IQueryElement expr, EvaluationContext context, bool? defaultValue = null) Parameters Type Name Description IQueryElement expr EvaluationContext context System.Nullable < System.Boolean > defaultValue Returns Type Description System.Nullable < System.Boolean > | Improve this Doc View Source EvaluateExpression(IQueryElement, EvaluationContext) Declaration public static object? EvaluateExpression(this IQueryElement expr, EvaluationContext context) Parameters Type Name Description IQueryElement expr EvaluationContext context Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source ExtractField(ISqlExpression) Returns SqlField from specific expression. Usually from SqlColumn. Conversion is ignored. Declaration public static SqlField ExtractField(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description SqlField Field instance associated with expression | Improve this Doc View Source FindJoin(SelectQuery, Func<SqlJoinedTable, Boolean>) Declaration public static SqlJoinedTable FindJoin(this SelectQuery query, Func<SqlJoinedTable, bool> match) Parameters Type Name Description SelectQuery query Func < SqlJoinedTable , System.Boolean > match Returns Type Description SqlJoinedTable | Improve this Doc View Source GenerateEquality(ISqlExpression, ISqlExpression) Declaration public static SqlCondition GenerateEquality(ISqlExpression field1, ISqlExpression field2) Parameters Type Name Description ISqlExpression field1 ISqlExpression field2 Returns Type Description SqlCondition | Improve this Doc View Source GetBoolValue(ISqlExpression, EvaluationContext) Declaration public static bool? GetBoolValue(ISqlExpression expression, EvaluationContext context) Parameters Type Name Description ISqlExpression expression EvaluationContext context Returns Type Description System.Nullable < System.Boolean > | Improve this Doc View Source GetColumnDescriptor(ISqlExpression) Returns ColumnDescriptor for expr . Declaration public static ColumnDescriptor GetColumnDescriptor(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Tested SQL Expression. Returns Type Description ColumnDescriptor Associated column descriptor or null . | Improve this Doc View Source GetDbDataType(ISqlExpression) Declaration public static DbDataType GetDbDataType(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description DbDataType | Improve this Doc View Source GetExpressionType(ISqlExpression) Declaration public static DbDataType GetExpressionType(this ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description DbDataType | Improve this Doc View Source GetParameterValue(SqlParameter, IReadOnlyParameterValues) Declaration public static SqlParameterValue GetParameterValue(this SqlParameter parameter, IReadOnlyParameterValues parameterValues) Parameters Type Name Description SqlParameter parameter IReadOnlyParameterValues parameterValues Returns Type Description SqlParameterValue | Improve this Doc View Source GetUnderlyingExpression(ISqlExpression) Unwraps SqlColumn and returns underlying expression. Declaration public static ISqlExpression GetUnderlyingExpression(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description ISqlExpression Underlying expression. | Improve this Doc View Source GetUnderlyingExpressionValue(SqlExpression) Declaration public static ISqlExpression GetUnderlyingExpressionValue(SqlExpression sqlExpression) Parameters Type Name Description SqlExpression sqlExpression Returns Type Description ISqlExpression | Improve this Doc View Source GetUnderlyingField(ISqlExpression) Returns SqlField from specific expression. Usually from SqlColumn. Complex expressions ignored. Declaration public static SqlField GetUnderlyingField(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description SqlField Field instance associated with expression | Improve this Doc View Source GetUsedSources(ISqlExpression, HashSet<ISqlTableSource>) Retrieves which sources are used in the root expression Declaration public static void GetUsedSources(ISqlExpression root, HashSet<ISqlTableSource> foundSources) Parameters Type Name Description ISqlExpression root Expression to analyze. HashSet < ISqlTableSource > foundSources Output container for detected sources/ | Improve this Doc View Source GetValueConverter(ISqlExpression) Returns IValueConverter for expr . Declaration public static IValueConverter GetValueConverter(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Tested SQL Expression. Returns Type Description IValueConverter Associated converter or null . | Improve this Doc View Source HasOuterReferences(SelectQuery, ISqlExpression) Declaration public static bool HasOuterReferences(SelectQuery root, ISqlExpression expr) Parameters Type Name Description SelectQuery root ISqlExpression expr Returns Type Description System.Boolean | Improve this Doc View Source HasQueryParameters(ISqlExpression) Declaration public static bool HasQueryParameters(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description System.Boolean | Improve this Doc View Source IsAggregationOrWindowFunction(IQueryElement) Declaration public static bool IsAggregationOrWindowFunction(IQueryElement expr) Parameters Type Name Description IQueryElement expr Returns Type Description System.Boolean | Improve this Doc View Source IsComplexExpression(ISqlExpression) Declaration public static bool IsComplexExpression(this ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Boolean | Improve this Doc View Source IsConstant(ISqlExpression) Returns true if tested expression is constant during query execution (e.g. value or parameter). Declaration public static bool IsConstant(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Tested expression. Returns Type Description System.Boolean | Improve this Doc View Source IsConstantFast(ISqlExpression) Declaration public static bool IsConstantFast(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Boolean | Improve this Doc View Source IsDependsOn(IQueryElement, HashSet<ISqlTableSource>, Nullable<HashSet<IQueryElement>>) Declaration public static bool IsDependsOn(IQueryElement testedRoot, HashSet<ISqlTableSource> onSources, HashSet<IQueryElement>? elementsToIgnore = null) Parameters Type Name Description IQueryElement testedRoot HashSet < ISqlTableSource > onSources System.Nullable < HashSet < IQueryElement >> elementsToIgnore Returns Type Description System.Boolean | Improve this Doc View Source IsDependsOn(IQueryElement, IQueryElement, Nullable<HashSet<IQueryElement>>) Declaration public static bool IsDependsOn(IQueryElement testedRoot, IQueryElement onElement, HashSet<IQueryElement>? elementsToIgnore = null) Parameters Type Name Description IQueryElement testedRoot IQueryElement onElement System.Nullable < HashSet < IQueryElement >> elementsToIgnore Returns Type Description System.Boolean | Improve this Doc View Source IsEqualTables(SqlTable, SqlTable) Declaration public static bool IsEqualTables(SqlTable table1, SqlTable table2) Parameters Type Name Description SqlTable table1 SqlTable table2 Returns Type Description System.Boolean | Improve this Doc View Source IsExpression(ISqlExpression) Returns true if it is anything except Field or Column. Declaration public static bool IsExpression(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Tested expression Returns Type Description System.Boolean true if tested expression is not a Field or Column | Improve this Doc View Source IsMutable(IQueryElement) Declaration public static bool IsMutable(this IQueryElement expr) Parameters Type Name Description IQueryElement expr Returns Type Description System.Boolean | Improve this Doc View Source IsTransitiveExpression(SqlExpression) Declaration public static bool IsTransitiveExpression(SqlExpression sqlExpression) Parameters Type Name Description SqlExpression sqlExpression Returns Type Description System.Boolean | Improve this Doc View Source JoinRemoval<TContext>(TContext, SqlStatement, Func<TContext, SqlStatement, SqlJoinedTable, Boolean>) Removes Join from query based on joinFunc result. Declaration public static SqlStatement JoinRemoval<TContext>(TContext context, SqlStatement statement, Func<TContext, SqlStatement, SqlJoinedTable, bool> joinFunc) Parameters Type Name Description TContext context joinFunc context object. SqlStatement statement Source statement. Func <TContext, SqlStatement , SqlJoinedTable , System.Boolean > joinFunc Returns Type Description SqlStatement Same or new statement with removed joins. Type Parameters Name Description TContext | Improve this Doc View Source MoveOrderByUp(SelectQuery[]) Helper function for moving Ordering up in select tree. Declaration public static void MoveOrderByUp(params SelectQuery[] queries) Parameters Type Name Description SelectQuery [] queries Array of queries | Improve this Doc View Source MoveSearchConditionsToJoin(SelectQuery, SqlJoinedTable, Nullable<List<SqlCondition>>) Declaration public static void MoveSearchConditionsToJoin(SelectQuery sql, SqlJoinedTable joinedTable, List<SqlCondition>? movedConditions) Parameters Type Name Description SelectQuery sql SqlJoinedTable joinedTable System.Nullable < List < SqlCondition >> movedConditions | Improve this Doc View Source NeedColumnForExpression(SelectQuery, ISqlExpression, Boolean) Returns correct column or field according to nesting. Declaration public static ISqlExpression NeedColumnForExpression(SelectQuery selectQuery, ISqlExpression forExpression, bool inProjection) Parameters Type Name Description SelectQuery selectQuery Analyzed query. ISqlExpression forExpression Expression that has to be enveloped by column. System.Boolean inProjection If 'true', function ensures that column is created. If 'false' it may return Field if it fits to nesting level. Returns Type Description ISqlExpression Returns Column of Field according to its nesting level. May return null if expression is not valid for selectQuery | Improve this Doc View Source NeedParameterInlining(ISqlExpression) Declaration public static bool NeedParameterInlining(ISqlExpression expression) Parameters Type Name Description ISqlExpression expression Returns Type Description System.Boolean | Improve this Doc View Source RootQuery(SelectQuery) Declaration public static SelectQuery RootQuery(this SelectQuery query) Parameters Type Name Description SelectQuery query Returns Type Description SelectQuery | Improve this Doc View Source ShouldCheckForNull(ISqlExpression) Declaration public static bool ShouldCheckForNull(this ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Boolean | Improve this Doc View Source SuggestDbDataType(ISqlExpression) Declaration public static DbDataType? SuggestDbDataType(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Nullable < DbDataType > | Improve this Doc View Source ToDebugString(IQueryElement) Declaration public static string ToDebugString(this IQueryElement expr) Parameters Type Name Description IQueryElement expr Returns Type Description System.String | Improve this Doc View Source TransformExpressionIndexes<TContext>(TContext, String, Func<TContext, Int32, Int32>) Declaration public static string TransformExpressionIndexes<TContext>(TContext context, string expression, Func<TContext, int, int> transformFunc) Parameters Type Name Description TContext context System.String expression Func <TContext, System.Int32 , System.Int32 > transformFunc Returns Type Description System.String Type Parameters Name Description TContext | Improve this Doc View Source TransformInnerJoinsToWhere(SelectQuery) Transforms SELECT * FROM A INNER JOIN B ON A.ID = B.ID to SELECT * FROM A, B WHERE A.ID = B.ID Declaration public static SelectQuery TransformInnerJoinsToWhere(this SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Input SelectQuery. Returns Type Description SelectQuery The same query instance. | Improve this Doc View Source TryConvertOrderedDistinctToGroupBy(SelectQuery, SqlProviderFlags) Converts ORDER BY DISTINCT to GROUP BY equivalent Declaration public static bool TryConvertOrderedDistinctToGroupBy(SelectQuery select, SqlProviderFlags flags) Parameters Type Name Description SelectQuery select SqlProviderFlags flags Returns Type Description System.Boolean | Improve this Doc View Source TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>) Declaration public static bool TryEvaluateExpression(this IQueryElement expr, EvaluationContext context, out object? result) Parameters Type Name Description IQueryElement expr EvaluationContext context System.Nullable < System.Object > result Returns Type Description System.Boolean | Improve this Doc View Source TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>, out Nullable<String>) Declaration public static bool TryEvaluateExpression(this IQueryElement expr, EvaluationContext context, out object? result, out string? errorMessage) Parameters Type Name Description IQueryElement expr EvaluationContext context System.Nullable < System.Object > result System.Nullable < System.String > errorMessage Returns Type Description System.Boolean | Improve this Doc View Source TryRemoveDistinct(SelectQuery, QueryInformation) Detects when we can remove order Declaration public static bool TryRemoveDistinct(SelectQuery selectQuery, QueryInformation information) Parameters Type Name Description SelectQuery selectQuery QueryInformation information Returns Type Description System.Boolean | Improve this Doc View Source UnwrapExpression(ISqlExpression) Declaration public static ISqlExpression UnwrapExpression(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description ISqlExpression | Improve this Doc View Source ValidateTable(SelectQuery, ISqlTableSource) Declaration public static bool ValidateTable(SelectQuery selectQuery, ISqlTableSource table) Parameters Type Name Description SelectQuery selectQuery ISqlTableSource table Returns Type Description System.Boolean | Improve this Doc View Source WrapQuery<TStatement>(TStatement, SelectQuery, Boolean) Wraps queryToWrap by another select. Keeps columns count the same. After modification statement is equivalent symantically. --before SELECT c1, c2 FROM A -- after SELECT B.c1, B.c2 FROM ( SELECT c1, c2 FROM A ) B Declaration public static TStatement WrapQuery<TStatement>(TStatement statement, SelectQuery queryToWrap, bool allowMutation) where TStatement : SqlStatement Parameters Type Name Description TStatement statement Statement which may contain tested query SelectQuery queryToWrap Tells which select query needs enveloping System.Boolean allowMutation Wrapped query can be not recreated for performance considerations. Returns Type Description TStatement The same statement or modified statement when wrapping has been performed. Type Parameters Name Description TStatement | Improve this Doc View Source WrapQuery<TStatement, TContext>(TContext, TStatement, Func<TContext, SelectQuery, IQueryElement, Boolean>, Nullable<Action<TContext, SelectQuery, SelectQuery>>, Boolean, Boolean) Wraps queries by another select. Keeps columns count the same. After modification statement is equivalent symantically. Declaration public static TStatement WrapQuery<TStatement, TContext>(TContext context, TStatement statement, Func<TContext, SelectQuery, IQueryElement, bool> wrapTest, Action<TContext, SelectQuery, SelectQuery>? onWrap, bool allowMutation, bool withStack) where TStatement : SqlStatement Parameters Type Name Description TContext context onWrap and wrapTest context object. TStatement statement Func <TContext, SelectQuery , IQueryElement , System.Boolean > wrapTest Delegate for testing when query needs to be wrapped. System.Nullable < Action <TContext, SelectQuery , SelectQuery >> onWrap After enveloping query this function called for prcess needed optimizations. System.Boolean allowMutation Wrapped query can be not recreated for performance considerations. System.Boolean withStack Must be set to true , if wrapTest function use 3rd parameter (containing parent element) otherwise it will be always null. Returns Type Description TStatement The same statement or modified statement when wrapping has been performed. Type Parameters Name Description TStatement TContext Type of onWrap and wrapTest context object. | Improve this Doc View Source WrapQuery<TStatement, TContext>(TContext, TStatement, Func<TContext, SelectQuery, IQueryElement, Int32>, Action<TContext, IReadOnlyList<SelectQuery>>, Boolean, Boolean) Wraps tested query in subquery(s). Keeps columns count the same. After modification statement is equivalent semantically. --before SELECT c1, c2 -- QA FROM A -- after (with 2 subqueries) SELECT C.c1, C.c2 -- QC FROM ( SELECT B.c1, B.c2 -- QB FROM ( SELECT c1, c2 -- QA FROM A ) B FROM ) C Declaration public static TStatement WrapQuery<TStatement, TContext>(TContext context, TStatement statement, Func<TContext, SelectQuery, IQueryElement, int> wrapTest, Action<TContext, IReadOnlyList<SelectQuery>> onWrap, bool allowMutation, bool withStack) where TStatement : SqlStatement Parameters Type Name Description TContext context onWrap and wrapTest context object. TStatement statement Statement which may contain tested query Func <TContext, SelectQuery , IQueryElement , System.Int32 > wrapTest Delegate for testing which query needs to be enveloped. Result of delegate call tells how many subqueries needed. 0 - no changes 1 - one subquery N - N subqueries Action <TContext, IReadOnlyList < SelectQuery >> onWrap After wrapping query this function called for prcess needed optimizations. Array of queries contains [QC, QB, QA] System.Boolean allowMutation Wrapped query can be not recreated for performance considerations. System.Boolean withStack Must be set to true , if wrapTest function use 3rd parameter (containing parent element) otherwise it will be always null. Returns Type Description TStatement The same statement or modified statement when wrapping has been performed. Type Parameters Name Description TStatement TContext Type of onWrap and wrapTest context object."
  },
  "api/LinqToDB.SqlQuery.QueryInformation.HierarchyInfo.html": {
    "href": "api/LinqToDB.SqlQuery.QueryInformation.HierarchyInfo.html",
    "title": "Class QueryInformation.HierarchyInfo | Linq To DB (aka linq2db)",
    "keywords": "Class QueryInformation.HierarchyInfo Inheritance System.Object QueryInformation.HierarchyInfo Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class HierarchyInfo : object Constructors | Improve this Doc View Source HierarchyInfo(SelectQuery, QueryInformation.HierarchyType, IQueryElement) Declaration public HierarchyInfo(SelectQuery masterQuery, QueryInformation.HierarchyType hierarchyType, IQueryElement parentElement) Parameters Type Name Description SelectQuery masterQuery QueryInformation.HierarchyType hierarchyType IQueryElement parentElement Properties | Improve this Doc View Source HierarchyType Declaration public QueryInformation.HierarchyType HierarchyType { get; } Property Value Type Description QueryInformation.HierarchyType | Improve this Doc View Source MasterQuery Declaration public SelectQuery MasterQuery { get; } Property Value Type Description SelectQuery | Improve this Doc View Source ParentElement Declaration public IQueryElement ParentElement { get; } Property Value Type Description IQueryElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.QueryInformation.HierarchyType.html": {
    "href": "api/LinqToDB.SqlQuery.QueryInformation.HierarchyType.html",
    "title": "Enum QueryInformation.HierarchyType | Linq To DB (aka linq2db)",
    "keywords": "Enum QueryInformation.HierarchyType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum HierarchyType : int Fields Name Description From InnerQuery Join SetOperator Extension Methods Map.DeepCopy<QueryInformation.HierarchyType>() Sql.IsDistinctFrom<QueryInformation.HierarchyType>(QueryInformation.HierarchyType) Sql.IsDistinctFrom<QueryInformation.HierarchyType>(Nullable<QueryInformation.HierarchyType>) Sql.IsNotDistinctFrom<QueryInformation.HierarchyType>(QueryInformation.HierarchyType) Sql.IsNotDistinctFrom<QueryInformation.HierarchyType>(Nullable<QueryInformation.HierarchyType>) SqlExtensions.In<QueryInformation.HierarchyType>(IEnumerable<QueryInformation.HierarchyType>) SqlExtensions.In<QueryInformation.HierarchyType>(IQueryable<QueryInformation.HierarchyType>) SqlExtensions.In<QueryInformation.HierarchyType>(QueryInformation.HierarchyType[]) SqlExtensions.In<QueryInformation.HierarchyType>(QueryInformation.HierarchyType, QueryInformation.HierarchyType) SqlExtensions.In<QueryInformation.HierarchyType>(QueryInformation.HierarchyType, QueryInformation.HierarchyType, QueryInformation.HierarchyType) SqlExtensions.NotIn<QueryInformation.HierarchyType>(IEnumerable<QueryInformation.HierarchyType>) SqlExtensions.NotIn<QueryInformation.HierarchyType>(IQueryable<QueryInformation.HierarchyType>) SqlExtensions.NotIn<QueryInformation.HierarchyType>(QueryInformation.HierarchyType[]) SqlExtensions.NotIn<QueryInformation.HierarchyType>(QueryInformation.HierarchyType, QueryInformation.HierarchyType) SqlExtensions.NotIn<QueryInformation.HierarchyType>(QueryInformation.HierarchyType, QueryInformation.HierarchyType, QueryInformation.HierarchyType)"
  },
  "api/LinqToDB.SqlQuery.QueryInformation.html": {
    "href": "api/LinqToDB.SqlQuery.QueryInformation.html",
    "title": "Class QueryInformation | Linq To DB (aka linq2db)",
    "keywords": "Class QueryInformation This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Inheritance System.Object QueryInformation Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class QueryInformation : object Constructors | Improve this Doc View Source QueryInformation(SelectQuery) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public QueryInformation(SelectQuery rootQuery) Parameters Type Name Description SelectQuery rootQuery Methods | Improve this Doc View Source GetHierarchyInfo(SelectQuery) Returns HirarchyInfo for specific selectQuery Declaration public QueryInformation.HierarchyInfo GetHierarchyInfo(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description QueryInformation.HierarchyInfo | Improve this Doc View Source GetParentQuery(SelectQuery) Returns parent query if query is subquery for select Declaration public SelectQuery GetParentQuery(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Returns Type Description SelectQuery | Improve this Doc View Source GetQueriesChildFirst() Declaration public IEnumerable<SelectQuery> GetQueriesChildFirst() Returns Type Description IEnumerable < SelectQuery > | Improve this Doc View Source GetQueriesChildFirst(SelectQuery) Declaration public IEnumerable<SelectQuery> GetQueriesChildFirst(SelectQuery root) Parameters Type Name Description SelectQuery root Returns Type Description IEnumerable < SelectQuery > | Improve this Doc View Source GetQueriesParentFirst() Declaration public IEnumerable<SelectQuery> GetQueriesParentFirst() Returns Type Description IEnumerable < SelectQuery > | Improve this Doc View Source GetQueriesParentFirst(SelectQuery) Declaration public IEnumerable<SelectQuery> GetQueriesParentFirst(SelectQuery root) Parameters Type Name Description SelectQuery root Returns Type Description IEnumerable < SelectQuery > | Improve this Doc View Source Resync() Resync tree info. Can be called also during enumeration. Declaration public void Resync() Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.QueryParentVisitor-1.html": {
    "href": "api/LinqToDB.SqlQuery.QueryParentVisitor-1.html",
    "title": "Struct QueryParentVisitor<TContext> | Linq To DB (aka linq2db)",
    "keywords": "Struct QueryParentVisitor<TContext> Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public readonly struct QueryParentVisitor<TContext> Type Parameters Name Description TContext Constructors | Improve this Doc View Source QueryParentVisitor(TContext, Boolean, Func<TContext, IQueryElement, Boolean>) Declaration public QueryParentVisitor(TContext context, bool all, Func<TContext, IQueryElement, bool> visit) Parameters Type Name Description TContext context System.Boolean all Func <TContext, IQueryElement , System.Boolean > visit | Improve this Doc View Source QueryParentVisitor(Boolean, Func<IQueryElement, Boolean>) Declaration public QueryParentVisitor(bool all, Func<IQueryElement, bool> visit) Parameters Type Name Description System.Boolean all Func < IQueryElement , System.Boolean > visit Fields | Improve this Doc View Source VisitedElements Declaration public readonly Dictionary<IQueryElement, IQueryElement> VisitedElements Field Value Type Description Dictionary < IQueryElement , IQueryElement > Methods | Improve this Doc View Source Visit(IQueryElement) Declaration public readonly void Visit(IQueryElement element) Parameters Type Name Description IQueryElement element Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsDistinctFrom<T>(T, Nullable<T>) Sql.IsNotDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, Nullable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.QueryType.html": {
    "href": "api/LinqToDB.SqlQuery.QueryType.html",
    "title": "Enum QueryType | Linq To DB (aka linq2db)",
    "keywords": "Enum QueryType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum QueryType : int Fields Name Description CreateTable Delete DropTable Insert InsertOrUpdate Merge MultiInsert Select TruncateTable Update Extension Methods Map.DeepCopy<QueryType>() Sql.IsDistinctFrom<QueryType>(QueryType) Sql.IsDistinctFrom<QueryType>(Nullable<QueryType>) Sql.IsNotDistinctFrom<QueryType>(QueryType) Sql.IsNotDistinctFrom<QueryType>(Nullable<QueryType>) SqlExtensions.In<QueryType>(IEnumerable<QueryType>) SqlExtensions.In<QueryType>(IQueryable<QueryType>) SqlExtensions.In<QueryType>(QueryType[]) SqlExtensions.In<QueryType>(QueryType, QueryType) SqlExtensions.In<QueryType>(QueryType, QueryType, QueryType) SqlExtensions.NotIn<QueryType>(IEnumerable<QueryType>) SqlExtensions.NotIn<QueryType>(IQueryable<QueryType>) SqlExtensions.NotIn<QueryType>(QueryType[]) SqlExtensions.NotIn<QueryType>(QueryType, QueryType) SqlExtensions.NotIn<QueryType>(QueryType, QueryType, QueryType)"
  },
  "api/LinqToDB.SqlQuery.QueryVisitor-1.html": {
    "href": "api/LinqToDB.SqlQuery.QueryVisitor-1.html",
    "title": "Struct QueryVisitor<TContext> | Linq To DB (aka linq2db)",
    "keywords": "Struct QueryVisitor<TContext> Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public readonly struct QueryVisitor<TContext> Type Parameters Name Description TContext Constructors | Improve this Doc View Source QueryVisitor(TContext, Boolean, Action<TContext, IQueryElement>) Declaration public QueryVisitor(TContext context, bool all, Action<TContext, IQueryElement> visit) Parameters Type Name Description TContext context System.Boolean all Action <TContext, IQueryElement > visit | Improve this Doc View Source QueryVisitor(Boolean, Action<IQueryElement>) Declaration public QueryVisitor(bool all, Action<IQueryElement> visit) Parameters Type Name Description System.Boolean all Action < IQueryElement > visit Fields | Improve this Doc View Source VisitedElements Declaration public readonly Dictionary<IQueryElement, IQueryElement> VisitedElements Field Value Type Description Dictionary < IQueryElement , IQueryElement > Methods | Improve this Doc View Source Visit(IQueryElement) Declaration public readonly void Visit(IQueryElement element) Parameters Type Name Description IQueryElement element Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsDistinctFrom<T>(T, Nullable<T>) Sql.IsNotDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, Nullable<T>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.QueryVisitorExtensions.html": {
    "href": "api/LinqToDB.SqlQuery.QueryVisitorExtensions.html",
    "title": "Class QueryVisitorExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class QueryVisitorExtensions Inheritance System.Object QueryVisitorExtensions Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class QueryVisitorExtensions : object Methods | Improve this Doc View Source Clone<T>(T) Declaration public static T Clone<T>(this T element) where T : class, IQueryElement Parameters Type Name Description T element Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Clone<T>(T, Dictionary<IQueryElement, IQueryElement>) Declaration public static T Clone<T>(this T element, Dictionary<IQueryElement, IQueryElement> objectTree) where T : class, IQueryElement Parameters Type Name Description T element Dictionary < IQueryElement , IQueryElement > objectTree Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Clone<T>(T, Func<IQueryElement, Boolean>) Declaration public static T Clone<T>(this T element, Func<IQueryElement, bool> doClone) where T : class, IQueryElement Parameters Type Name Description T element Func < IQueryElement , System.Boolean > doClone Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Clone<T>(T[], Dictionary<IQueryElement, IQueryElement>) Declaration public static T[] Clone<T>(this T[] elements, Dictionary<IQueryElement, IQueryElement> objectTree) where T : class, IQueryElement Parameters Type Name Description T[] elements Dictionary < IQueryElement , IQueryElement > objectTree Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source Clone<T, TContext>(T, TContext, Dictionary<IQueryElement, IQueryElement>, Func<TContext, IQueryElement, Boolean>) Declaration public static T Clone<T, TContext>(this T element, TContext context, Dictionary<IQueryElement, IQueryElement> objectTree, Func<TContext, IQueryElement, bool> doClone) where T : class, IQueryElement Parameters Type Name Description T element TContext context Dictionary < IQueryElement , IQueryElement > objectTree Func <TContext, IQueryElement , System.Boolean > doClone Returns Type Description T Type Parameters Name Description T TContext | Improve this Doc View Source Clone<T, TContext>(T, TContext, Func<TContext, IQueryElement, Boolean>) Declaration public static T Clone<T, TContext>(this T element, TContext context, Func<TContext, IQueryElement, bool> doClone) where T : class, IQueryElement Parameters Type Name Description T element TContext context Func <TContext, IQueryElement , System.Boolean > doClone Returns Type Description T Type Parameters Name Description T TContext | Improve this Doc View Source Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) Declaration public static T Convert<T>(this T element, Func<ConvertVisitor<object?>, IQueryElement, IQueryElement> convertAction) where T : class, IQueryElement Parameters Type Name Description T element Func < ConvertVisitor < System.Nullable < System.Object >>, IQueryElement , IQueryElement > convertAction Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>, Boolean) Declaration public static T Convert<T>(this T element, Func<ConvertVisitor<object?>, IQueryElement, IQueryElement> convertAction, bool withStack) where T : class, IQueryElement Parameters Type Name Description T element Func < ConvertVisitor < System.Nullable < System.Object >>, IQueryElement , IQueryElement > convertAction System.Boolean withStack Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) Declaration public static T Convert<TContext, T>(this T element, TContext context, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement> convertAction) where T : class, IQueryElement Parameters Type Name Description T element TContext context Func < ConvertVisitor <TContext>, IQueryElement , IQueryElement > convertAction Returns Type Description T Type Parameters Name Description TContext T | Improve this Doc View Source Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) Declaration public static T Convert<TContext, T>(this T element, TContext context, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement> convertAction, bool withStack) where T : class, IQueryElement Parameters Type Name Description T element TContext context Func < ConvertVisitor <TContext>, IQueryElement , IQueryElement > convertAction System.Boolean withStack Returns Type Description T Type Parameters Name Description TContext T | Improve this Doc View Source Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) Declaration public static T Convert<TContext, T>(this T element, TContext context, bool allowMutation, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement> convertAction) where T : class, IQueryElement Parameters Type Name Description T element TContext context System.Boolean allowMutation Func < ConvertVisitor <TContext>, IQueryElement , IQueryElement > convertAction Returns Type Description T Type Parameters Name Description TContext T | Improve this Doc View Source Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) Declaration public static T Convert<TContext, T>(this T element, TContext context, bool allowMutation, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement> convertAction, bool withStack) where T : class, IQueryElement Parameters Type Name Description T element TContext context System.Boolean allowMutation Func < ConvertVisitor <TContext>, IQueryElement , IQueryElement > convertAction System.Boolean withStack Returns Type Description T Type Parameters Name Description TContext T | Improve this Doc View Source ConvertAll<T>(T, Boolean, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) Declaration public static T ConvertAll<T>(this T element, bool allowMutation, Func<ConvertVisitor<object?>, IQueryElement, IQueryElement> convertAction) where T : class, IQueryElement Parameters Type Name Description T element System.Boolean allowMutation Func < ConvertVisitor < System.Nullable < System.Object >>, IQueryElement , IQueryElement > convertAction Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) Declaration public static T ConvertAll<TContext, T>(this T element, TContext context, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement> convertAction) where T : class, IQueryElement Parameters Type Name Description T element TContext context Func < ConvertVisitor <TContext>, IQueryElement , IQueryElement > convertAction Returns Type Description T Type Parameters Name Description TContext T | Improve this Doc View Source ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Func<ConvertVisitor<TContext>, Boolean>) Declaration public static T ConvertAll<TContext, T>(this T element, TContext context, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement> convertAction, Func<ConvertVisitor<TContext>, bool> parentAction) where T : class, IQueryElement Parameters Type Name Description T element TContext context Func < ConvertVisitor <TContext>, IQueryElement , IQueryElement > convertAction Func < ConvertVisitor <TContext>, System.Boolean > parentAction Returns Type Description T Type Parameters Name Description TContext T | Improve this Doc View Source ConvertAll<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) Declaration public static T ConvertAll<TContext, T>(this T element, TContext context, bool allowMutation, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement> convertAction) where T : class, IQueryElement Parameters Type Name Description T element TContext context System.Boolean allowMutation Func < ConvertVisitor <TContext>, IQueryElement , IQueryElement > convertAction Returns Type Description T Type Parameters Name Description TContext T | Improve this Doc View Source Find(IQueryElement, Func<IQueryElement, Boolean>) Declaration public static IQueryElement Find(this IQueryElement element, Func<IQueryElement, bool> find) Parameters Type Name Description IQueryElement element Func < IQueryElement , System.Boolean > find Returns Type Description IQueryElement | Improve this Doc View Source Find(IQueryElement, QueryElementType) Declaration public static IQueryElement Find(this IQueryElement element, QueryElementType type) Parameters Type Name Description IQueryElement element QueryElementType type Returns Type Description IQueryElement | Improve this Doc View Source Find<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) Declaration public static IQueryElement Find<TContext>(this IQueryElement element, TContext context, Func<TContext, IQueryElement, bool> find) Parameters Type Name Description IQueryElement element TContext context Func <TContext, IQueryElement , System.Boolean > find Returns Type Description IQueryElement Type Parameters Name Description TContext | Improve this Doc View Source Visit(IQueryElement, Action<IQueryElement>) Declaration public static void Visit(this IQueryElement element, Action<IQueryElement> action) Parameters Type Name Description IQueryElement element Action < IQueryElement > action | Improve this Doc View Source Visit<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) Declaration public static void Visit<TContext>(this IQueryElement element, TContext context, Action<TContext, IQueryElement> action) Parameters Type Name Description IQueryElement element TContext context Action <TContext, IQueryElement > action Type Parameters Name Description TContext | Improve this Doc View Source VisitAll(IQueryElement, Action<IQueryElement>) Declaration public static void VisitAll(this IQueryElement element, Action<IQueryElement> action) Parameters Type Name Description IQueryElement element Action < IQueryElement > action | Improve this Doc View Source VisitAll<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) Declaration public static void VisitAll<TContext>(this IQueryElement element, TContext context, Action<TContext, IQueryElement> action) Parameters Type Name Description IQueryElement element TContext context Action <TContext, IQueryElement > action Type Parameters Name Description TContext | Improve this Doc View Source VisitParentFirst(IQueryElement, Func<IQueryElement, Boolean>) Declaration public static void VisitParentFirst(this IQueryElement element, Func<IQueryElement, bool> action) Parameters Type Name Description IQueryElement element Func < IQueryElement , System.Boolean > action | Improve this Doc View Source VisitParentFirst<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) Declaration public static void VisitParentFirst<TContext>(this IQueryElement element, TContext context, Func<TContext, IQueryElement, bool> action) Parameters Type Name Description IQueryElement element TContext context Func <TContext, IQueryElement , System.Boolean > action Type Parameters Name Description TContext | Improve this Doc View Source VisitParentFirstAll(IQueryElement, Func<IQueryElement, Boolean>) Declaration public static void VisitParentFirstAll(this IQueryElement element, Func<IQueryElement, bool> action) Parameters Type Name Description IQueryElement element Func < IQueryElement , System.Boolean > action | Improve this Doc View Source VisitParentFirstAll<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) Declaration public static void VisitParentFirstAll<TContext>(this IQueryElement element, TContext context, Func<TContext, IQueryElement, bool> action) Parameters Type Name Description IQueryElement element TContext context Func <TContext, IQueryElement , System.Boolean > action Type Parameters Name Description TContext"
  },
  "api/LinqToDB.SqlQuery.ReservedWords.html": {
    "href": "api/LinqToDB.SqlQuery.ReservedWords.html",
    "title": "Class ReservedWords | Linq To DB (aka linq2db)",
    "keywords": "Class ReservedWords Inheritance System.Object ReservedWords Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class ReservedWords : object Methods | Improve this Doc View Source Add(String, Nullable<String>) Declaration public static void Add(string word, string? providerName = null) Parameters Type Name Description System.String word System.Nullable < System.String > providerName | Improve this Doc View Source IsReserved(String, Nullable<String>) Declaration public static bool IsReserved(string word, string? providerName = null) Parameters Type Name Description System.String word System.Nullable < System.String > providerName Returns Type Description System.Boolean"
  },
  "api/LinqToDB.SqlQuery.SelectQuery.html": {
    "href": "api/LinqToDB.SqlQuery.SelectQuery.html",
    "title": "Class SelectQuery | Linq To DB (aka linq2db)",
    "keywords": "Class SelectQuery Inheritance System.Object SelectQuery Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SelectQuery : object, ISqlTableSource, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SelectQuery() Declaration public SelectQuery() Fields | Improve this Doc View Source SourceIDCounter Declaration public static int SourceIDCounter Field Value Type Description System.Int32 Properties | Improve this Doc View Source All Declaration public SqlField All { get; } Property Value Type Description SqlField | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source DebugSqlText Declaration protected string DebugSqlText { get; } Property Value Type Description System.String | Improve this Doc View Source DoNotRemove Gets or sets flag when sub-query can be removed during optimization. Declaration public bool DoNotRemove { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source From Declaration public SqlFromClause From { get; } Property Value Type Description SqlFromClause | Improve this Doc View Source GroupBy Declaration public SqlGroupByClause GroupBy { get; } Property Value Type Description SqlGroupByClause | Improve this Doc View Source HasSetOperators Declaration public bool HasSetOperators { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasUniqueKeys Declaration public bool HasUniqueKeys { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Having Declaration public SqlWhereClause Having { get; } Property Value Type Description SqlWhereClause | Improve this Doc View Source IsParameterDependent Declaration public bool IsParameterDependent { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSimple Declaration public bool IsSimple { get; } Property Value Type Description System.Boolean | Improve this Doc View Source OrderBy Declaration public SqlOrderByClause OrderBy { get; } Property Value Type Description SqlOrderByClause | Improve this Doc View Source ParentSelect Declaration public SelectQuery ParentSelect { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Properties Declaration public List<object> Properties { get; } Property Value Type Description List < System.Object > | Improve this Doc View Source Select Declaration public SqlSelectClause Select { get; } Property Value Type Description SqlSelectClause | Improve this Doc View Source SetOperators Declaration public List<SqlSetOperator> SetOperators { get; } Property Value Type Description List < SqlSetOperator > | Improve this Doc View Source SourceID Declaration public int SourceID { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SqlTableType Declaration public SqlTableType SqlTableType { get; } Property Value Type Description SqlTableType | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description System.String | Improve this Doc View Source SystemType Declaration public Type? SystemType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source UniqueKeys Contains list of columns that build unique key for this sub-query. Used in JoinOptimizer for safely removing sub-query from resulting SQL. Declaration public List<ISqlExpression[]> UniqueKeys { get; } Property Value Type Description List < ISqlExpression []> | Improve this Doc View Source Where Declaration public SqlWhereClause Where { get; } Property Value Type Description SqlWhereClause Methods | Improve this Doc View Source AddUnion(SelectQuery, Boolean) Declaration public void AddUnion(SelectQuery union, bool isAll) Parameters Type Name Description SelectQuery union System.Boolean isAll | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source ForEachTable<TContext>(TContext, Action<TContext, SqlTableSource>, HashSet<SelectQuery>) Declaration public void ForEachTable<TContext>(TContext context, Action<TContext, SqlTableSource> action, HashSet<SelectQuery> visitedQueries) Parameters Type Name Description TContext context Action <TContext, SqlTableSource > action HashSet < SelectQuery > visitedQueries Type Parameters Name Description TContext | Improve this Doc View Source GetKeys(Boolean) Declaration public IList<ISqlExpression> GetKeys(bool allIfEmpty) Parameters Type Name Description System.Boolean allIfEmpty Returns Type Description IList < ISqlExpression > | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) QueryHelper.RootQuery(SelectQuery) QueryHelper.FindJoin(SelectQuery, Func<SqlJoinedTable, Boolean>) QueryHelper.TransformInnerJoinsToWhere(SelectQuery) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SetOperation.html": {
    "href": "api/LinqToDB.SqlQuery.SetOperation.html",
    "title": "Enum SetOperation | Linq To DB (aka linq2db)",
    "keywords": "Enum SetOperation Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum SetOperation : int Fields Name Description Except ExceptAll Intersect IntersectAll Union UnionAll Extension Methods Map.DeepCopy<SetOperation>() Sql.IsDistinctFrom<SetOperation>(SetOperation) Sql.IsDistinctFrom<SetOperation>(Nullable<SetOperation>) Sql.IsNotDistinctFrom<SetOperation>(SetOperation) Sql.IsNotDistinctFrom<SetOperation>(Nullable<SetOperation>) SqlExtensions.In<SetOperation>(IEnumerable<SetOperation>) SqlExtensions.In<SetOperation>(IQueryable<SetOperation>) SqlExtensions.In<SetOperation>(SetOperation[]) SqlExtensions.In<SetOperation>(SetOperation, SetOperation) SqlExtensions.In<SetOperation>(SetOperation, SetOperation, SetOperation) SqlExtensions.NotIn<SetOperation>(IEnumerable<SetOperation>) SqlExtensions.NotIn<SetOperation>(IQueryable<SetOperation>) SqlExtensions.NotIn<SetOperation>(SetOperation[]) SqlExtensions.NotIn<SetOperation>(SetOperation, SetOperation) SqlExtensions.NotIn<SetOperation>(SetOperation, SetOperation, SetOperation)"
  },
  "api/LinqToDB.SqlQuery.SqlAliasPlaceholder.html": {
    "href": "api/LinqToDB.SqlQuery.SqlAliasPlaceholder.html",
    "title": "Class SqlAliasPlaceholder | Linq To DB (aka linq2db)",
    "keywords": "Class SqlAliasPlaceholder Inheritance System.Object SqlAliasPlaceholder Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlAliasPlaceholder : object, ISqlExpression, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Equals(ISqlExpression) Declaration public bool Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlBinaryExpression.html": {
    "href": "api/LinqToDB.SqlQuery.SqlBinaryExpression.html",
    "title": "Class SqlBinaryExpression | Linq To DB (aka linq2db)",
    "keywords": "Class SqlBinaryExpression Inheritance System.Object SqlBinaryExpression Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlBinaryExpression : object, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlBinaryExpression(Type, ISqlExpression, String, ISqlExpression) Declaration public SqlBinaryExpression(Type systemType, ISqlExpression expr1, string operation, ISqlExpression expr2) Parameters Type Name Description Type systemType ISqlExpression expr1 System.String operation ISqlExpression expr2 | Improve this Doc View Source SqlBinaryExpression(Type, ISqlExpression, String, ISqlExpression, Int32) Declaration public SqlBinaryExpression(Type systemType, ISqlExpression expr1, string operation, ISqlExpression expr2, int precedence) Parameters Type Name Description Type systemType ISqlExpression expr1 System.String operation ISqlExpression expr2 System.Int32 precedence Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Expr1 Declaration public ISqlExpression Expr1 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Operation Declaration public string Operation { get; } Property Value Type Description System.String | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description System.String | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Deconstruct(out ISqlExpression, out String, out ISqlExpression) Declaration public void Deconstruct(out ISqlExpression expr1, out string operation, out ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 System.String operation ISqlExpression expr2 | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlColumn.html": {
    "href": "api/LinqToDB.SqlQuery.SqlColumn.html",
    "title": "Class SqlColumn | Linq To DB (aka linq2db)",
    "keywords": "Class SqlColumn Inheritance System.Object SqlColumn Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlColumn : IEquatable<SqlColumn>, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlColumn(SelectQuery, ISqlExpression) Declaration public SqlColumn(SelectQuery builder, ISqlExpression expression) Parameters Type Name Description SelectQuery builder ISqlExpression expression | Improve this Doc View Source SqlColumn(SelectQuery, ISqlExpression, Nullable<String>) Declaration public SqlColumn(SelectQuery parent, ISqlExpression expression, string? alias) Parameters Type Name Description SelectQuery parent ISqlExpression expression System.Nullable < System.String > alias Properties | Improve this Doc View Source Alias Declaration public string? Alias { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source Parent Declaration public SelectQuery Parent { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SystemType Declaration public Type? SystemType { get; } Property Value Type Description System.Nullable < Type > Methods | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source Equals(SqlColumn) Declaration public bool Equals(SqlColumn other) Parameters Type Name Description SqlColumn other Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source UnderlyingExpression() Declaration public ISqlExpression UnderlyingExpression() Returns Type Description ISqlExpression | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) QueryHelper.ToDebugString(IQueryElement) QueryHelper.IsComplexExpression(ISqlExpression) QueryHelper.ShouldCheckForNull(ISqlExpression) QueryHelper.GetExpressionType(ISqlExpression) QueryHelper.TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>) QueryHelper.IsMutable(IQueryElement) QueryHelper.CanBeEvaluated(IQueryElement, Boolean) QueryHelper.CanBeEvaluated(IQueryElement, EvaluationContext) QueryHelper.TryEvaluateExpression(IQueryElement, EvaluationContext, out Nullable<Object>, out Nullable<String>) QueryHelper.EvaluateExpression(IQueryElement, EvaluationContext) QueryHelper.EvaluateBoolExpression(IQueryElement, EvaluationContext, Nullable<Boolean>) QueryVisitorExtensions.Visit<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) QueryVisitorExtensions.Visit(IQueryElement, Action<IQueryElement>) QueryVisitorExtensions.VisitAll<TContext>(IQueryElement, TContext, Action<TContext, IQueryElement>) QueryVisitorExtensions.VisitAll(IQueryElement, Action<IQueryElement>) QueryVisitorExtensions.VisitParentFirst<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirst(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirstAll<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.VisitParentFirstAll(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Find<TContext>(IQueryElement, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Find(IQueryElement, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Find(IQueryElement, QueryElementType) QueryVisitorExtensions.Clone<T>(T, Dictionary<IQueryElement, IQueryElement>) QueryVisitorExtensions.Clone<T, TContext>(T, TContext, Dictionary<IQueryElement, IQueryElement>, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T, TContext>(T, TContext, Func<TContext, IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T>(T, Func<IQueryElement, Boolean>) QueryVisitorExtensions.Clone<T>(T) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<T>(T, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Boolean) QueryVisitorExtensions.Convert<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>, Func<ConvertVisitor<TContext>, Boolean>) QueryVisitorExtensions.ConvertAll<TContext, T>(T, TContext, Boolean, Func<ConvertVisitor<TContext>, IQueryElement, IQueryElement>) QueryVisitorExtensions.ConvertAll<T>(T, Boolean, Func<ConvertVisitor<Nullable<Object>>, IQueryElement, IQueryElement>) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlComment.html": {
    "href": "api/LinqToDB.SqlQuery.SqlComment.html",
    "title": "Class SqlComment | Linq To DB (aka linq2db)",
    "keywords": "Class SqlComment Inheritance System.Object SqlComment Implements IQueryElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlComment : object, IQueryElement Constructors | Improve this Doc View Source SqlComment() Declaration public SqlComment() Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Lines Declaration public List<string> Lines { get; } Property Value Type Description List < System.String > Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements IQueryElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlCondition.html": {
    "href": "api/LinqToDB.SqlQuery.SqlCondition.html",
    "title": "Class SqlCondition | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCondition Inheritance System.Object SqlCondition Implements IQueryElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlCondition : object, IQueryElement Constructors | Improve this Doc View Source SqlCondition(Boolean, ISqlPredicate) Declaration public SqlCondition(bool isNot, ISqlPredicate predicate) Parameters Type Name Description System.Boolean isNot ISqlPredicate predicate | Improve this Doc View Source SqlCondition(Boolean, ISqlPredicate, Boolean) Declaration public SqlCondition(bool isNot, ISqlPredicate predicate, bool isOr) Parameters Type Name Description System.Boolean isNot ISqlPredicate predicate System.Boolean isOr Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsNot Declaration public bool IsNot { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOr Declaration public bool IsOr { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Predicate Declaration public ISqlPredicate Predicate { get; set; } Property Value Type Description ISqlPredicate Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements IQueryElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlConditionalInsertClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlConditionalInsertClause.html",
    "title": "Class SqlConditionalInsertClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlConditionalInsertClause Inheritance System.Object SqlConditionalInsertClause Implements IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlConditionalInsertClause : object, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlConditionalInsertClause(SqlInsertClause, SqlSearchCondition) Declaration public SqlConditionalInsertClause(SqlInsertClause insert, SqlSearchCondition when) Parameters Type Name Description SqlInsertClause insert SqlSearchCondition when Properties | Improve this Doc View Source Insert Declaration public SqlInsertClause Insert { get; } Property Value Type Description SqlInsertClause | Improve this Doc View Source When Declaration public SqlSearchCondition When { get; } Property Value Type Description SqlSearchCondition Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ElementType Declaration QueryElementType IQueryElement.ElementType { get; } Returns Type Description QueryElementType | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlCreateTableStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlCreateTableStatement.html",
    "title": "Class SqlCreateTableStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCreateTableStatement Inheritance System.Object SqlStatement SqlCreateTableStatement Implements IQueryElement ISqlExpressionWalkable Inherited Members SqlStatement.SqlText SqlStatement.DebugSqlText SqlStatement.ParentStatement SqlStatement.CollectParameters() SqlStatement.Tag SqlStatement.PrepareQueryAndAliases(SqlStatement, AliasesContext, AliasesContext) SqlStatement.IsDependedOn(SqlTable) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlCreateTableStatement : SqlStatement, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlCreateTableStatement(SqlTable) Declaration public SqlCreateTableStatement(SqlTable sqlTable) Parameters Type Name Description SqlTable sqlTable Properties | Improve this Doc View Source DefaultNullable Declaration public DefaultNullable DefaultNullable { get; set; } Property Value Type Description DefaultNullable | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description System.Boolean Overrides SqlStatement.IsParameterDependent | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source SelectQuery Declaration public override SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery Overrides SqlStatement.SelectQuery | Improve this Doc View Source StatementFooter Declaration public string? StatementFooter { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source StatementHeader Declaration public string? StatementHeader { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Table Declaration public SqlTable Table { get; } Property Value Type Description SqlTable Methods | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatement.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) | Improve this Doc View Source WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) Declaration public override void WalkQueries<TContext>(TContext context, Func<TContext, SelectQuery, SelectQuery> func) Parameters Type Name Description TContext context Func <TContext, SelectQuery , SelectQuery > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.WalkQueries<TContext>(TContext, Func<TContext, LinqToDB.SqlQuery.SelectQuery, LinqToDB.SqlQuery.SelectQuery>) Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlCteTable.html": {
    "href": "api/LinqToDB.SqlQuery.SqlCteTable.html",
    "title": "Class SqlCteTable | Linq To DB (aka linq2db)",
    "keywords": "Class SqlCteTable Inheritance System.Object SqlTable SqlCteTable Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Inherited Members SqlTable.ToString() SqlTable.Item[String] SqlTable.Alias SqlTable.Server SqlTable.Database SqlTable.Schema SqlTable.ObjectType SqlTable.TableArguments SqlTable.TableOptions SqlTable.Fields SqlTable.IdentityFields SqlTable.SequenceAttributes SqlTable.All SqlTable.GetIdentityField() SqlTable.Add(SqlField) SqlTable.AddRange(IEnumerable<SqlField>) SqlTable.SourceID SqlTable.GetKeys(Boolean) SqlTable.CanBeNull SqlTable.ISqlExpression.Precedence SqlTable.ISqlExpression.SystemType SqlTable.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) SqlTable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlCteTable : SqlTable, ISqlTableSource, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlCteTable(MappingSchema, CteClause) Declaration public SqlCteTable(MappingSchema mappingSchema, CteClause cte) Parameters Type Name Description MappingSchema mappingSchema CteClause cte | Improve this Doc View Source SqlCteTable(SqlCteTable, IEnumerable<SqlField>, CteClause) Declaration public SqlCteTable(SqlCteTable table, IEnumerable<SqlField> fields, CteClause cte) Parameters Type Name Description SqlCteTable table IEnumerable < SqlField > fields CteClause cte Properties | Improve this Doc View Source Cte Declaration public CteClause Cte { get; } Property Value Type Description CteClause | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlTable.ElementType | Improve this Doc View Source Name Declaration public override string? Name { get; set; } Property Value Type Description System.Nullable < System.String > Overrides SqlTable.Name | Improve this Doc View Source PhysicalName Declaration public override string? PhysicalName { get; set; } Property Value Type Description System.Nullable < System.String > Overrides SqlTable.PhysicalName | Improve this Doc View Source SqlTableType Declaration public override SqlTableType SqlTableType { get; } Property Value Type Description SqlTableType Overrides SqlTable.SqlTableType | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description System.String Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlTable.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlDataType.html": {
    "href": "api/LinqToDB.SqlQuery.SqlDataType.html",
    "title": "Class SqlDataType | Linq To DB (aka linq2db)",
    "keywords": "Class SqlDataType Inheritance System.Object SqlDataType Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlDataType : object, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlDataType(DbDataType) Declaration public SqlDataType(DbDataType dataType) Parameters Type Name Description DbDataType dataType | Improve this Doc View Source SqlDataType(DataType) Declaration public SqlDataType(DataType dataType) Parameters Type Name Description DataType dataType | Improve this Doc View Source SqlDataType(DataType, Nullable<Int32>) Declaration public SqlDataType(DataType dataType, int? length) Parameters Type Name Description DataType dataType System.Nullable < System.Int32 > length | Improve this Doc View Source SqlDataType(DataType, Type) Declaration public SqlDataType(DataType dataType, Type type) Parameters Type Name Description DataType dataType Type type | Improve this Doc View Source SqlDataType(DataType, Type, Int32) Declaration public SqlDataType(DataType dataType, Type type, int length) Parameters Type Name Description DataType dataType Type type System.Int32 length | Improve this Doc View Source SqlDataType(DataType, Type, Int32, Int32) Declaration public SqlDataType(DataType dataType, Type type, int precision, int scale) Parameters Type Name Description DataType dataType Type type System.Int32 precision System.Int32 scale | Improve this Doc View Source SqlDataType(DataType, Type, String) Declaration public SqlDataType(DataType dataType, Type type, string dbType) Parameters Type Name Description DataType dataType Type type System.String dbType | Improve this Doc View Source SqlDataType(Type) Declaration public SqlDataType(Type type) Parameters Type Name Description Type type Fields | Improve this Doc View Source Boolean Declaration public static readonly SqlDataType Boolean Field Value Type Description SqlDataType | Improve this Doc View Source Byte Declaration public static readonly SqlDataType Byte Field Value Type Description SqlDataType | Improve this Doc View Source ByteArray Declaration public static readonly SqlDataType ByteArray Field Value Type Description SqlDataType | Improve this Doc View Source Char Declaration public static readonly SqlDataType Char Field Value Type Description SqlDataType | Improve this Doc View Source CharArray Declaration public static readonly SqlDataType CharArray Field Value Type Description SqlDataType | Improve this Doc View Source DateTime Declaration public static readonly SqlDataType DateTime Field Value Type Description SqlDataType | Improve this Doc View Source DateTimeOffset Declaration public static readonly SqlDataType DateTimeOffset Field Value Type Description SqlDataType | Improve this Doc View Source DbBinary Declaration public static readonly SqlDataType DbBinary Field Value Type Description SqlDataType | Improve this Doc View Source DbBinaryJson Declaration public static readonly SqlDataType DbBinaryJson Field Value Type Description SqlDataType | Improve this Doc View Source DbBitArray Declaration public static readonly SqlDataType DbBitArray Field Value Type Description SqlDataType | Improve this Doc View Source DbBoolean Declaration public static readonly SqlDataType DbBoolean Field Value Type Description SqlDataType | Improve this Doc View Source DbByte Declaration public static readonly SqlDataType DbByte Field Value Type Description SqlDataType | Improve this Doc View Source DbChar Declaration public static readonly SqlDataType DbChar Field Value Type Description SqlDataType | Improve this Doc View Source DbDate Declaration public static readonly SqlDataType DbDate Field Value Type Description SqlDataType | Improve this Doc View Source DbDateTime Declaration public static readonly SqlDataType DbDateTime Field Value Type Description SqlDataType | Improve this Doc View Source DbDateTime2 Declaration public static readonly SqlDataType DbDateTime2 Field Value Type Description SqlDataType | Improve this Doc View Source DbDateTimeOffset Declaration public static readonly SqlDataType DbDateTimeOffset Field Value Type Description SqlDataType | Improve this Doc View Source DbDecFloat Declaration public static readonly SqlDataType DbDecFloat Field Value Type Description SqlDataType | Improve this Doc View Source DbDecimal Declaration public static readonly SqlDataType DbDecimal Field Value Type Description SqlDataType | Improve this Doc View Source DbDictionary Declaration public static readonly SqlDataType DbDictionary Field Value Type Description SqlDataType | Improve this Doc View Source DbDouble Declaration public static readonly SqlDataType DbDouble Field Value Type Description SqlDataType | Improve this Doc View Source DbGuid Declaration public static readonly SqlDataType DbGuid Field Value Type Description SqlDataType | Improve this Doc View Source DbImage Declaration public static readonly SqlDataType DbImage Field Value Type Description SqlDataType | Improve this Doc View Source DbInt128 Declaration public static readonly SqlDataType DbInt128 Field Value Type Description SqlDataType | Improve this Doc View Source DbInt16 Declaration public static readonly SqlDataType DbInt16 Field Value Type Description SqlDataType | Improve this Doc View Source DbInt32 Declaration public static readonly SqlDataType DbInt32 Field Value Type Description SqlDataType | Improve this Doc View Source DbInt64 Declaration public static readonly SqlDataType DbInt64 Field Value Type Description SqlDataType | Improve this Doc View Source DbJson Declaration public static readonly SqlDataType DbJson Field Value Type Description SqlDataType | Improve this Doc View Source DbMoney Declaration public static readonly SqlDataType DbMoney Field Value Type Description SqlDataType | Improve this Doc View Source DbNChar Declaration public static readonly SqlDataType DbNChar Field Value Type Description SqlDataType | Improve this Doc View Source DbNText Declaration public static readonly SqlDataType DbNText Field Value Type Description SqlDataType | Improve this Doc View Source DbNVarChar Declaration public static readonly SqlDataType DbNVarChar Field Value Type Description SqlDataType | Improve this Doc View Source DbSByte Declaration public static readonly SqlDataType DbSByte Field Value Type Description SqlDataType | Improve this Doc View Source DbSingle Declaration public static readonly SqlDataType DbSingle Field Value Type Description SqlDataType | Improve this Doc View Source DbSmallDateTime Declaration public static readonly SqlDataType DbSmallDateTime Field Value Type Description SqlDataType | Improve this Doc View Source DbSmallMoney Declaration public static readonly SqlDataType DbSmallMoney Field Value Type Description SqlDataType | Improve this Doc View Source DbText Declaration public static readonly SqlDataType DbText Field Value Type Description SqlDataType | Improve this Doc View Source DbTime Declaration public static readonly SqlDataType DbTime Field Value Type Description SqlDataType | Improve this Doc View Source DbTimestamp Declaration public static readonly SqlDataType DbTimestamp Field Value Type Description SqlDataType | Improve this Doc View Source DbTimeTZ Declaration public static readonly SqlDataType DbTimeTZ Field Value Type Description SqlDataType | Improve this Doc View Source DbUdt Declaration public static readonly SqlDataType DbUdt Field Value Type Description SqlDataType | Improve this Doc View Source DbUInt16 Declaration public static readonly SqlDataType DbUInt16 Field Value Type Description SqlDataType | Improve this Doc View Source DbUInt32 Declaration public static readonly SqlDataType DbUInt32 Field Value Type Description SqlDataType | Improve this Doc View Source DbUInt64 Declaration public static readonly SqlDataType DbUInt64 Field Value Type Description SqlDataType | Improve this Doc View Source DbVarBinary Declaration public static readonly SqlDataType DbVarBinary Field Value Type Description SqlDataType | Improve this Doc View Source DbVarChar Declaration public static readonly SqlDataType DbVarChar Field Value Type Description SqlDataType | Improve this Doc View Source DbVariant Declaration public static readonly SqlDataType DbVariant Field Value Type Description SqlDataType | Improve this Doc View Source DbXml Declaration public static readonly SqlDataType DbXml Field Value Type Description SqlDataType | Improve this Doc View Source Decimal Declaration public static readonly SqlDataType Decimal Field Value Type Description SqlDataType | Improve this Doc View Source Double Declaration public static readonly SqlDataType Double Field Value Type Description SqlDataType | Improve this Doc View Source Guid Declaration public static readonly SqlDataType Guid Field Value Type Description SqlDataType | Improve this Doc View Source Int16 Declaration public static readonly SqlDataType Int16 Field Value Type Description SqlDataType | Improve this Doc View Source Int32 Declaration public static readonly SqlDataType Int32 Field Value Type Description SqlDataType | Improve this Doc View Source LinqBinary Declaration public static readonly SqlDataType LinqBinary Field Value Type Description SqlDataType | Improve this Doc View Source SByte Declaration public static readonly SqlDataType SByte Field Value Type Description SqlDataType | Improve this Doc View Source Single Declaration public static readonly SqlDataType Single Field Value Type Description SqlDataType | Improve this Doc View Source SqlBinary Declaration public static readonly SqlDataType SqlBinary Field Value Type Description SqlDataType | Improve this Doc View Source SqlBoolean Declaration public static readonly SqlDataType SqlBoolean Field Value Type Description SqlDataType | Improve this Doc View Source SqlByte Declaration public static readonly SqlDataType SqlByte Field Value Type Description SqlDataType | Improve this Doc View Source SqlBytes Declaration public static readonly SqlDataType SqlBytes Field Value Type Description SqlDataType | Improve this Doc View Source SqlChars Declaration public static readonly SqlDataType SqlChars Field Value Type Description SqlDataType | Improve this Doc View Source SqlDateTime Declaration public static readonly SqlDataType SqlDateTime Field Value Type Description SqlDataType | Improve this Doc View Source SqlDecimal Declaration public static readonly SqlDataType SqlDecimal Field Value Type Description SqlDataType | Improve this Doc View Source SqlDouble Declaration public static readonly SqlDataType SqlDouble Field Value Type Description SqlDataType | Improve this Doc View Source SqlGuid Declaration public static readonly SqlDataType SqlGuid Field Value Type Description SqlDataType | Improve this Doc View Source SqlInt16 Declaration public static readonly SqlDataType SqlInt16 Field Value Type Description SqlDataType | Improve this Doc View Source SqlInt32 Declaration public static readonly SqlDataType SqlInt32 Field Value Type Description SqlDataType | Improve this Doc View Source SqlInt64 Declaration public static readonly SqlDataType SqlInt64 Field Value Type Description SqlDataType | Improve this Doc View Source SqlMoney Declaration public static readonly SqlDataType SqlMoney Field Value Type Description SqlDataType | Improve this Doc View Source SqlSingle Declaration public static readonly SqlDataType SqlSingle Field Value Type Description SqlDataType | Improve this Doc View Source SqlString Declaration public static readonly SqlDataType SqlString Field Value Type Description SqlDataType | Improve this Doc View Source SqlXml Declaration public static readonly SqlDataType SqlXml Field Value Type Description SqlDataType | Improve this Doc View Source String Declaration public static readonly SqlDataType String Field Value Type Description SqlDataType | Improve this Doc View Source TimeSpan Declaration public static readonly SqlDataType TimeSpan Field Value Type Description SqlDataType | Improve this Doc View Source UInt16 Declaration public static readonly SqlDataType UInt16 Field Value Type Description SqlDataType | Improve this Doc View Source UInt32 Declaration public static readonly SqlDataType UInt32 Field Value Type Description SqlDataType | Improve this Doc View Source UInt64 Declaration public static readonly SqlDataType UInt64 Field Value Type Description SqlDataType | Improve this Doc View Source Undefined Declaration public static readonly SqlDataType Undefined Field Value Type Description SqlDataType Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsCharDataType Declaration public bool IsCharDataType { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type | Improve this Doc View Source Type Declaration public DbDataType Type { get; } Property Value Type Description DbDataType Methods | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source GetDataType(DataType) Declaration public static SqlDataType GetDataType(DataType type) Parameters Type Name Description DataType type Returns Type Description SqlDataType | Improve this Doc View Source GetDataType(Type) Declaration public static SqlDataType GetDataType(Type type) Parameters Type Name Description Type type Returns Type Description SqlDataType | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source GetMaxDisplaySize(DataType) Declaration public static int? GetMaxDisplaySize(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source GetMaxLength(DataType) Declaration public static int? GetMaxLength(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source GetMaxPrecision(DataType) Declaration public static int? GetMaxPrecision(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source GetMaxScale(DataType) Declaration public static int? GetMaxScale(DataType dbType) Parameters Type Name Description DataType dbType Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source TypeCanBeNull(Type) Declaration public static bool TypeCanBeNull(Type type) Parameters Type Name Description Type type Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlDeleteStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlDeleteStatement.html",
    "title": "Class SqlDeleteStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlDeleteStatement Inheritance System.Object SqlStatement SqlStatementWithQueryBase SqlDeleteStatement Implements IQueryElement ISqlExpressionWalkable Inherited Members SqlStatementWithQueryBase.SelectQuery SqlStatementWithQueryBase.With SqlStatementWithQueryBase.GetTableSource(ISqlTableSource) SqlStatement.SqlText SqlStatement.DebugSqlText SqlStatement.ParentStatement SqlStatement.CollectParameters() SqlStatement.Tag SqlStatement.PrepareQueryAndAliases(SqlStatement, AliasesContext, AliasesContext) SqlStatement.IsDependedOn(SqlTable) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlDeleteStatement : SqlStatementWithQueryBase, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlDeleteStatement() Declaration public SqlDeleteStatement() | Improve this Doc View Source SqlDeleteStatement(SelectQuery) Declaration public SqlDeleteStatement(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description System.Boolean Overrides SqlStatementWithQueryBase.IsParameterDependent | Improve this Doc View Source Output Declaration public SqlOutputClause Output { get; set; } Property Value Type Description SqlOutputClause | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable | Improve this Doc View Source Top Declaration public ISqlExpression Top { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) | Improve this Doc View Source WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) Declaration public override void WalkQueries<TContext>(TContext context, Func<TContext, SelectQuery, SelectQuery> func) Parameters Type Name Description TContext context Func <TContext, SelectQuery , SelectQuery > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatementWithQueryBase.WalkQueries<TContext>(TContext, Func<TContext, LinqToDB.SqlQuery.SelectQuery, LinqToDB.SqlQuery.SelectQuery>) Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlDropTableStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlDropTableStatement.html",
    "title": "Class SqlDropTableStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlDropTableStatement Inheritance System.Object SqlStatement SqlDropTableStatement Implements IQueryElement ISqlExpressionWalkable Inherited Members SqlStatement.SqlText SqlStatement.DebugSqlText SqlStatement.ParentStatement SqlStatement.CollectParameters() SqlStatement.Tag SqlStatement.PrepareQueryAndAliases(SqlStatement, AliasesContext, AliasesContext) SqlStatement.IsDependedOn(SqlTable) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlDropTableStatement : SqlStatement, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlDropTableStatement(SqlTable) Declaration public SqlDropTableStatement(SqlTable table) Parameters Type Name Description SqlTable table Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description System.Boolean Overrides SqlStatement.IsParameterDependent | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source SelectQuery Declaration public override SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery Overrides SqlStatement.SelectQuery | Improve this Doc View Source Table Declaration public SqlTable Table { get; } Property Value Type Description SqlTable Methods | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatement.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) | Improve this Doc View Source WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) Declaration public override void WalkQueries<TContext>(TContext context, Func<TContext, SelectQuery, SelectQuery> func) Parameters Type Name Description TContext context Func <TContext, SelectQuery , SelectQuery > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.WalkQueries<TContext>(TContext, Func<TContext, LinqToDB.SqlQuery.SelectQuery, LinqToDB.SqlQuery.SelectQuery>) Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlException.html": {
    "href": "api/LinqToDB.SqlQuery.SqlException.html",
    "title": "Class SqlException | Linq To DB (aka linq2db)",
    "keywords": "Class SqlException Inheritance System.Object SqlException Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlException : Exception Constructors | Improve this Doc View Source SqlException() Declaration public SqlException() | Improve this Doc View Source SqlException(Exception) Declaration public SqlException(Exception innerException) Parameters Type Name Description Exception innerException | Improve this Doc View Source SqlException(SerializationInfo, StreamingContext) Declaration protected SqlException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context | Improve this Doc View Source SqlException(String) Declaration public SqlException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source SqlException(String, Exception) Declaration public SqlException(string message, Exception innerException) Parameters Type Name Description System.String message Exception innerException | Improve this Doc View Source SqlException(String, Nullable<Object>[]) Declaration public SqlException(string message, params object? [] args) Parameters Type Name Description System.String message System.Nullable < System.Object >[] args Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlExpression.html": {
    "href": "api/LinqToDB.SqlQuery.SqlExpression.html",
    "title": "Class SqlExpression | Linq To DB (aka linq2db)",
    "keywords": "Class SqlExpression Inheritance System.Object SqlExpression Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlExpression : object, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlExpression(Nullable<Type>, String, ISqlExpression[]) Declaration public SqlExpression(Type? systemType, string expr, params ISqlExpression[] parameters) Parameters Type Name Description System.Nullable < Type > systemType System.String expr ISqlExpression [] parameters | Improve this Doc View Source SqlExpression(Nullable<Type>, String, Int32, ISqlExpression[]) Declaration public SqlExpression(Type? systemType, string expr, int precedence, params ISqlExpression[] parameters) Parameters Type Name Description System.Nullable < Type > systemType System.String expr System.Int32 precedence ISqlExpression [] parameters | Improve this Doc View Source SqlExpression(Nullable<Type>, String, Int32, SqlFlags, ISqlExpression[]) Declaration public SqlExpression(Type? systemType, string expr, int precedence, SqlFlags flags, params ISqlExpression[] parameters) Parameters Type Name Description System.Nullable < Type > systemType System.String expr System.Int32 precedence SqlFlags flags ISqlExpression [] parameters | Improve this Doc View Source SqlExpression(String, ISqlExpression[]) Declaration public SqlExpression(string expr, params ISqlExpression[] parameters) Parameters Type Name Description System.String expr ISqlExpression [] parameters | Improve this Doc View Source SqlExpression(String, Int32, ISqlExpression[]) Declaration public SqlExpression(string expr, int precedence, params ISqlExpression[] parameters) Parameters Type Name Description System.String expr System.Int32 precedence ISqlExpression [] parameters Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Expr Declaration public string Expr { get; } Property Value Type Description System.String | Improve this Doc View Source Flags Declaration public SqlFlags Flags { get; } Property Value Type Description SqlFlags | Improve this Doc View Source IsAggregate Declaration public bool IsAggregate { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPredicate Declaration public bool IsPredicate { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPure Declaration public bool IsPure { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsWindowFunction Declaration public bool IsWindowFunction { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Parameters Declaration public ISqlExpression[] Parameters { get; } Property Value Type Description ISqlExpression [] | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SystemType Declaration public Type? SystemType { get; } Property Value Type Description System.Nullable < Type > Methods | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source NeedsEqual(IQueryElement) Declaration public static bool NeedsEqual(IQueryElement ex) Parameters Type Name Description IQueryElement ex Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlExtensions.html": {
    "href": "api/LinqToDB.SqlQuery.SqlExtensions.html",
    "title": "Class SqlExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class SqlExtensions This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Inheritance System.Object SqlExtensions Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public static class SqlExtensions : object Methods | Improve this Doc View Source EnsureQuery(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SelectQuery EnsureQuery(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SelectQuery | Improve this Doc View Source GetIdentityField(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SqlField GetIdentityField(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlField | Improve this Doc View Source GetInsertClause(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SqlInsertClause GetInsertClause(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlInsertClause | Improve this Doc View Source GetOutputClause(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SqlOutputClause GetOutputClause(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlOutputClause | Improve this Doc View Source GetUpdateClause(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SqlUpdateClause GetUpdateClause(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlUpdateClause | Improve this Doc View Source GetWithClause(SqlStatement) Declaration public static SqlWithClause GetWithClause(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlWithClause | Improve this Doc View Source IsDelete(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static bool IsDelete(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description System.Boolean | Improve this Doc View Source IsInsert(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static bool IsInsert(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description System.Boolean | Improve this Doc View Source IsUpdate(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static bool IsUpdate(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description System.Boolean | Improve this Doc View Source NeedsIdentity(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static bool NeedsIdentity(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description System.Boolean | Improve this Doc View Source RequireInsertClause(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SqlInsertClause RequireInsertClause(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlInsertClause | Improve this Doc View Source RequireUpdateClause(SqlStatement) This is internal API and is not intended for use by Linq To DB applications. It may change or be removed without further notice. Declaration public static SqlUpdateClause RequireUpdateClause(this SqlStatement statement) Parameters Type Name Description SqlStatement statement Returns Type Description SqlUpdateClause"
  },
  "api/LinqToDB.SqlQuery.SqlField.html": {
    "href": "api/LinqToDB.SqlQuery.SqlField.html",
    "title": "Class SqlField | Linq To DB (aka linq2db)",
    "keywords": "Class SqlField Inheritance System.Object SqlField Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlField : object, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlField(ColumnDescriptor) Declaration public SqlField(ColumnDescriptor column) Parameters Type Name Description ColumnDescriptor column | Improve this Doc View Source SqlField(ISqlTableSource, String) Declaration public SqlField(ISqlTableSource table, string name) Parameters Type Name Description ISqlTableSource table System.String name | Improve this Doc View Source SqlField(SqlField) Declaration public SqlField(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source SqlField(String, String) Declaration public SqlField(string name, string physicalName) Parameters Type Name Description System.String name System.String physicalName | Improve this Doc View Source SqlField(Type, Nullable<String>, Boolean) Declaration public SqlField(Type systemType, string? name, bool canBeNull) Parameters Type Name Description Type systemType System.Nullable < System.String > name System.Boolean canBeNull Properties | Improve this Doc View Source Alias Declaration public string? Alias { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ColumnDescriptor Declaration public ColumnDescriptor ColumnDescriptor { get; set; } Property Value Type Description ColumnDescriptor | Improve this Doc View Source CreateFormat Declaration public string? CreateFormat { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source CreateOrder Declaration public int? CreateOrder { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsDynamic Declaration public bool IsDynamic { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsIdentity Declaration public bool IsIdentity { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInsertable Declaration public bool IsInsertable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPrimaryKey Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsUpdatable Declaration public bool IsUpdatable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source PhysicalName Declaration public string PhysicalName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source PrimaryKeyOrder Declaration public int PrimaryKeyOrder { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SkipOnEntityFetch Declaration public bool SkipOnEntityFetch { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Table Declaration public ISqlTableSource Table { get; set; } Property Value Type Description ISqlTableSource | Improve this Doc View Source Type Declaration public DbDataType Type { get; set; } Property Value Type Description DbDataType Methods | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlFlags.html": {
    "href": "api/LinqToDB.SqlQuery.SqlFlags.html",
    "title": "Enum SqlFlags | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlFlags Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum SqlFlags : int Fields Name Description IsAggregate IsPredicate IsPure IsWindowFunction None Extension Methods Map.DeepCopy<SqlFlags>() Sql.IsDistinctFrom<SqlFlags>(SqlFlags) Sql.IsDistinctFrom<SqlFlags>(Nullable<SqlFlags>) Sql.IsNotDistinctFrom<SqlFlags>(SqlFlags) Sql.IsNotDistinctFrom<SqlFlags>(Nullable<SqlFlags>) SqlExtensions.In<SqlFlags>(IEnumerable<SqlFlags>) SqlExtensions.In<SqlFlags>(IQueryable<SqlFlags>) SqlExtensions.In<SqlFlags>(SqlFlags[]) SqlExtensions.In<SqlFlags>(SqlFlags, SqlFlags) SqlExtensions.In<SqlFlags>(SqlFlags, SqlFlags, SqlFlags) SqlExtensions.NotIn<SqlFlags>(IEnumerable<SqlFlags>) SqlExtensions.NotIn<SqlFlags>(IQueryable<SqlFlags>) SqlExtensions.NotIn<SqlFlags>(SqlFlags[]) SqlExtensions.NotIn<SqlFlags>(SqlFlags, SqlFlags) SqlExtensions.NotIn<SqlFlags>(SqlFlags, SqlFlags, SqlFlags)"
  },
  "api/LinqToDB.SqlQuery.SqlFromClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlFromClause.html",
    "title": "Class SqlFromClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlFromClause Inheritance System.Object ClauseBase SqlFromClause Implements IQueryElement ISqlExpressionWalkable Inherited Members ClauseBase.Select ClauseBase.From ClauseBase.Where ClauseBase.GroupBy ClauseBase.Having ClauseBase.OrderBy ClauseBase.End() ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlFromClause : ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Item[ISqlTableSource] Declaration public SqlTableSource this[ISqlTableSource table] { get; } Parameters Type Name Description ISqlTableSource table Property Value Type Description SqlTableSource | Improve this Doc View Source Item[ISqlTableSource, Nullable<String>] Declaration public SqlTableSource this[ISqlTableSource table, string? alias] { get; } Parameters Type Name Description ISqlTableSource table System.Nullable < System.String > alias Property Value Type Description SqlTableSource | Improve this Doc View Source Tables Declaration public List<SqlTableSource> Tables { get; } Property Value Type Description List < SqlTableSource > Methods | Improve this Doc View Source FindTableSource(SqlTable) Declaration public ISqlTableSource FindTableSource(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description ISqlTableSource | Improve this Doc View Source IsChild(ISqlTableSource) Declaration public bool IsChild(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description System.Boolean | Improve this Doc View Source Table(ISqlTableSource, SqlFromClause.Join[]) Declaration public SqlFromClause Table(ISqlTableSource table, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table SqlFromClause.Join [] joins Returns Type Description SqlFromClause | Improve this Doc View Source Table(ISqlTableSource, Nullable<String>, SqlFromClause.Join[]) Declaration public SqlFromClause Table(ISqlTableSource table, string? alias, params SqlFromClause.Join[] joins) Parameters Type Name Description ISqlTableSource table System.Nullable < System.String > alias SqlFromClause.Join [] joins Returns Type Description SqlFromClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlFromClause.Join.html": {
    "href": "api/LinqToDB.SqlQuery.SqlFromClause.Join.html",
    "title": "Class SqlFromClause.Join | Linq To DB (aka linq2db)",
    "keywords": "Class SqlFromClause.Join Inheritance System.Object ConditionBase < SqlFromClause.Join , SqlFromClause.Join.Next > SqlFromClause.Join Inherited Members ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Search ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.GetNext() ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.SetOr(Boolean) ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Not ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Expr(ISqlExpression) ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Field(SqlField) ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.SubQuery(SelectQuery) ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Value(Object) ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Join : ConditionBase<SqlFromClause.Join, SqlFromClause.Join.Next> Properties | Improve this Doc View Source JoinedTable Declaration public SqlJoinedTable JoinedTable { get; } Property Value Type Description SqlJoinedTable | Improve this Doc View Source Search Declaration protected override SqlSearchCondition Search { get; } Property Value Type Description SqlSearchCondition Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlFromClause.Join, LinqToDB.SqlQuery.SqlFromClause.Join.Next>.Search Methods | Improve this Doc View Source GetNext() Declaration protected override SqlFromClause.Join.Next GetNext() Returns Type Description SqlFromClause.Join.Next Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlFromClause.Join, LinqToDB.SqlQuery.SqlFromClause.Join.Next>.GetNext() Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlFromClause.Join.Next.html": {
    "href": "api/LinqToDB.SqlQuery.SqlFromClause.Join.Next.html",
    "title": "Class SqlFromClause.Join.Next | Linq To DB (aka linq2db)",
    "keywords": "Class SqlFromClause.Join.Next Inheritance System.Object SqlFromClause.Join.Next Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Next : object Properties | Improve this Doc View Source And Declaration public SqlFromClause.Join And { get; } Property Value Type Description SqlFromClause.Join | Improve this Doc View Source Or Declaration public SqlFromClause.Join Or { get; } Property Value Type Description SqlFromClause.Join Operators | Improve this Doc View Source Implicit(SqlFromClause.Join.Next to SqlFromClause.Join) Declaration public static implicit operator SqlFromClause.Join(SqlFromClause.Join.Next next) Parameters Type Name Description SqlFromClause.Join.Next next Returns Type Description SqlFromClause.Join Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlFunction.html": {
    "href": "api/LinqToDB.SqlQuery.SqlFunction.html",
    "title": "Class SqlFunction | Linq To DB (aka linq2db)",
    "keywords": "Class SqlFunction Inheritance System.Object SqlFunction Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlFunction : object, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlFunction(Type, String, ISqlExpression[]) Declaration public SqlFunction(Type systemType, string name, params ISqlExpression[] parameters) Parameters Type Name Description Type systemType System.String name ISqlExpression [] parameters | Improve this Doc View Source SqlFunction(Type, String, Boolean, ISqlExpression[]) Declaration public SqlFunction(Type systemType, string name, bool isAggregate, params ISqlExpression[] parameters) Parameters Type Name Description Type systemType System.String name System.Boolean isAggregate ISqlExpression [] parameters | Improve this Doc View Source SqlFunction(Type, String, Boolean, Boolean, ISqlExpression[]) Declaration public SqlFunction(Type systemType, string name, bool isAggregate, bool isPure, params ISqlExpression[] parameters) Parameters Type Name Description Type systemType System.String name System.Boolean isAggregate System.Boolean isPure ISqlExpression [] parameters | Improve this Doc View Source SqlFunction(Type, String, Boolean, Boolean, Int32, ISqlExpression[]) Declaration public SqlFunction(Type systemType, string name, bool isAggregate, bool isPure, int precedence, params ISqlExpression[] parameters) Parameters Type Name Description Type systemType System.String name System.Boolean isAggregate System.Boolean isPure System.Int32 precedence ISqlExpression [] parameters | Improve this Doc View Source SqlFunction(Type, String, Boolean, Int32, ISqlExpression[]) Declaration public SqlFunction(Type systemType, string name, bool isAggregate, int precedence, params ISqlExpression[] parameters) Parameters Type Name Description Type systemType System.String name System.Boolean isAggregate System.Int32 precedence ISqlExpression [] parameters Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DoNotOptimize Declaration public bool DoNotOptimize { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsAggregate Declaration public bool IsAggregate { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPure Declaration public bool IsPure { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Parameters Declaration public ISqlExpression[] Parameters { get; } Property Value Type Description ISqlExpression [] | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type Methods | Improve this Doc View Source CreateAll(SelectQuery) Declaration public static SqlFunction CreateAll(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source CreateAny(SelectQuery) Declaration public static SqlFunction CreateAny(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source CreateCount(Type, ISqlTableSource) Declaration public static SqlFunction CreateCount(Type type, ISqlTableSource table) Parameters Type Name Description Type type ISqlTableSource table Returns Type Description SqlFunction | Improve this Doc View Source CreateExists(SelectQuery) Declaration public static SqlFunction CreateExists(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source CreateSome(SelectQuery) Declaration public static SqlFunction CreateSome(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlFunction | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlGroupByClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlGroupByClause.html",
    "title": "Class SqlGroupByClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlGroupByClause Inheritance System.Object ClauseBase SqlGroupByClause Implements IQueryElement ISqlExpressionWalkable Inherited Members ClauseBase.Select ClauseBase.From ClauseBase.Where ClauseBase.GroupBy ClauseBase.Having ClauseBase.OrderBy ClauseBase.End() ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlGroupByClause : ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source GroupingType Declaration public GroupingType GroupingType { get; set; } Property Value Type Description GroupingType | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Items Declaration public List<ISqlExpression> Items { get; } Property Value Type Description List < ISqlExpression > Methods | Improve this Doc View Source EnumItems() Declaration public IEnumerable<ISqlExpression> EnumItems() Returns Type Description IEnumerable < ISqlExpression > | Improve this Doc View Source Expr(ISqlExpression) Declaration public SqlGroupByClause Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlGroupByClause | Improve this Doc View Source Field(SqlField) Declaration public SqlGroupByClause Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SqlGroupByClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlGroupingSet.html": {
    "href": "api/LinqToDB.SqlQuery.SqlGroupingSet.html",
    "title": "Class SqlGroupingSet | Linq To DB (aka linq2db)",
    "keywords": "Class SqlGroupingSet Inheritance System.Object SqlGroupingSet Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlGroupingSet : object, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlGroupingSet() Declaration public SqlGroupingSet() Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Items Declaration public List<ISqlExpression> Items { get; } Property Value Type Description List < ISqlExpression > | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SystemType Declaration public Type? SystemType { get; } Property Value Type Description System.Nullable < Type > Methods | Improve this Doc View Source Equals(ISqlExpression) Declaration public bool Equals(ISqlExpression other) Parameters Type Name Description ISqlExpression other Returns Type Description System.Boolean | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlInsertClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlInsertClause.html",
    "title": "Class SqlInsertClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlInsertClause Inheritance System.Object SqlInsertClause Implements IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlInsertClause : object, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlInsertClause() Declaration public SqlInsertClause() Properties | Improve this Doc View Source DefaultItems Declaration public List<SqlSetExpression> DefaultItems { get; } Property Value Type Description List < SqlSetExpression > | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Into Declaration public SqlTable Into { get; set; } Property Value Type Description SqlTable | Improve this Doc View Source Items Declaration public List<SqlSetExpression> Items { get; } Property Value Type Description List < SqlSetExpression > | Improve this Doc View Source WithIdentity Declaration public bool WithIdentity { get; set; } Property Value Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.html",
    "title": "Class SqlInsertOrUpdateStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlInsertOrUpdateStatement Inheritance System.Object SqlStatement SqlStatementWithQueryBase SqlInsertOrUpdateStatement Implements IQueryElement ISqlExpressionWalkable Inherited Members SqlStatementWithQueryBase.IsParameterDependent SqlStatementWithQueryBase.SelectQuery SqlStatementWithQueryBase.With SqlStatementWithQueryBase.WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) SqlStatement.SqlText SqlStatement.DebugSqlText SqlStatement.ParentStatement SqlStatement.CollectParameters() SqlStatement.Tag SqlStatement.PrepareQueryAndAliases(SqlStatement, AliasesContext, AliasesContext) SqlStatement.IsDependedOn(SqlTable) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlInsertOrUpdateStatement : SqlStatementWithQueryBase, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlInsertOrUpdateStatement(SelectQuery) Declaration public SqlInsertOrUpdateStatement(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source Insert Declaration public SqlInsertClause Insert { get; set; } Property Value Type Description SqlInsertClause | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source Update Declaration public SqlUpdateClause Update { get; set; } Property Value Type Description SqlUpdateClause Methods | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatementWithQueryBase.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlInsertStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlInsertStatement.html",
    "title": "Class SqlInsertStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlInsertStatement Inheritance System.Object SqlStatement SqlStatementWithQueryBase SqlInsertStatement Implements IQueryElement ISqlExpressionWalkable Inherited Members SqlStatementWithQueryBase.IsParameterDependent SqlStatementWithQueryBase.SelectQuery SqlStatementWithQueryBase.With SqlStatementWithQueryBase.WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) SqlStatement.SqlText SqlStatement.DebugSqlText SqlStatement.ParentStatement SqlStatement.CollectParameters() SqlStatement.Tag SqlStatement.PrepareQueryAndAliases(SqlStatement, AliasesContext, AliasesContext) SqlStatement.IsDependedOn(SqlTable) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlInsertStatement : SqlStatementWithQueryBase, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlInsertStatement() Declaration public SqlInsertStatement() | Improve this Doc View Source SqlInsertStatement(SelectQuery) Declaration public SqlInsertStatement(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source Insert Declaration public SqlInsertClause Insert { get; set; } Property Value Type Description SqlInsertClause | Improve this Doc View Source Output Declaration public SqlOutputClause Output { get; set; } Property Value Type Description SqlOutputClause | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType Methods | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatementWithQueryBase.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlInsertWithIdentity.html": {
    "href": "api/LinqToDB.SqlQuery.SqlInsertWithIdentity.html",
    "title": "Class SqlInsertWithIdentity | Linq To DB (aka linq2db)",
    "keywords": "Class SqlInsertWithIdentity Inheritance System.Object SqlInsertWithIdentity Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlInsertWithIdentity : object Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlJoinedTable.html": {
    "href": "api/LinqToDB.SqlQuery.SqlJoinedTable.html",
    "title": "Class SqlJoinedTable | Linq To DB (aka linq2db)",
    "keywords": "Class SqlJoinedTable Inheritance System.Object SqlJoinedTable Implements IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlJoinedTable : object, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlJoinedTable(JoinType, ISqlTableSource, Nullable<String>, Boolean) Declaration public SqlJoinedTable(JoinType joinType, ISqlTableSource table, string? alias, bool isWeak) Parameters Type Name Description JoinType joinType ISqlTableSource table System.Nullable < System.String > alias System.Boolean isWeak | Improve this Doc View Source SqlJoinedTable(JoinType, SqlTableSource, Boolean) Declaration public SqlJoinedTable(JoinType joinType, SqlTableSource table, bool isWeak) Parameters Type Name Description JoinType joinType SqlTableSource table System.Boolean isWeak | Improve this Doc View Source SqlJoinedTable(JoinType, SqlTableSource, Boolean, SqlSearchCondition) Declaration public SqlJoinedTable(JoinType joinType, SqlTableSource table, bool isWeak, SqlSearchCondition searchCondition) Parameters Type Name Description JoinType joinType SqlTableSource table System.Boolean isWeak SqlSearchCondition searchCondition Properties | Improve this Doc View Source CanConvertApply Declaration public bool CanConvertApply { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Condition Declaration public SqlSearchCondition Condition { get; } Property Value Type Description SqlSearchCondition | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsWeak Declaration public bool IsWeak { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source JoinType Declaration public JoinType JoinType { get; set; } Property Value Type Description JoinType | Improve this Doc View Source Table Declaration public SqlTableSource Table { get; set; } Property Value Type Description SqlTableSource Methods | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlMergeOperationClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlMergeOperationClause.html",
    "title": "Class SqlMergeOperationClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlMergeOperationClause Inheritance System.Object SqlMergeOperationClause Implements IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlMergeOperationClause : object, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlMergeOperationClause(MergeOperationType) Declaration public SqlMergeOperationClause(MergeOperationType type) Parameters Type Name Description MergeOperationType type Properties | Improve this Doc View Source Items Declaration public List<SqlSetExpression> Items { get; } Property Value Type Description List < SqlSetExpression > | Improve this Doc View Source OperationType Declaration public MergeOperationType OperationType { get; } Property Value Type Description MergeOperationType | Improve this Doc View Source Where Declaration public SqlSearchCondition Where { get; } Property Value Type Description SqlSearchCondition | Improve this Doc View Source WhereDelete Declaration public SqlSearchCondition WhereDelete { get; } Property Value Type Description SqlSearchCondition Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ElementType Declaration QueryElementType IQueryElement.ElementType { get; } Returns Type Description QueryElementType | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlMergeStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlMergeStatement.html",
    "title": "Class SqlMergeStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlMergeStatement Inheritance System.Object SqlStatement SqlStatementWithQueryBase SqlMergeStatement Implements IQueryElement ISqlExpressionWalkable Inherited Members SqlStatementWithQueryBase.With SqlStatement.SqlText SqlStatement.DebugSqlText SqlStatement.ParentStatement SqlStatement.CollectParameters() SqlStatement.Tag SqlStatement.PrepareQueryAndAliases(SqlStatement, AliasesContext, AliasesContext) SqlStatement.IsDependedOn(SqlTable) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlMergeStatement : SqlStatementWithQueryBase, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlMergeStatement(SqlTable) Declaration public SqlMergeStatement(SqlTable target) Parameters Type Name Description SqlTable target Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source HasIdentityInsert Declaration public bool HasIdentityInsert { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Hint Declaration public string? Hint { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description System.Boolean Overrides SqlStatementWithQueryBase.IsParameterDependent | Improve this Doc View Source On Declaration public SqlSearchCondition On { get; } Property Value Type Description SqlSearchCondition | Improve this Doc View Source Operations Declaration public List<SqlMergeOperationClause> Operations { get; } Property Value Type Description List < SqlMergeOperationClause > | Improve this Doc View Source Output Declaration public SqlOutputClause Output { get; set; } Property Value Type Description SqlOutputClause | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source SelectQuery Declaration public override SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery Overrides SqlStatementWithQueryBase.SelectQuery | Improve this Doc View Source Source Declaration public SqlTableLikeSource Source { get; } Property Value Type Description SqlTableLikeSource | Improve this Doc View Source Target Declaration public SqlTableSource Target { get; } Property Value Type Description SqlTableSource Methods | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatementWithQueryBase.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) | Improve this Doc View Source WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) Declaration public override void WalkQueries<TContext>(TContext context, Func<TContext, SelectQuery, SelectQuery> func) Parameters Type Name Description TContext context Func <TContext, SelectQuery , SelectQuery > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatementWithQueryBase.WalkQueries<TContext>(TContext, Func<TContext, LinqToDB.SqlQuery.SelectQuery, LinqToDB.SqlQuery.SelectQuery>) Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlMultiInsertStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlMultiInsertStatement.html",
    "title": "Class SqlMultiInsertStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlMultiInsertStatement Inheritance System.Object SqlStatement SqlMultiInsertStatement Implements IQueryElement ISqlExpressionWalkable Inherited Members SqlStatement.SqlText SqlStatement.DebugSqlText SqlStatement.ParentStatement SqlStatement.CollectParameters() SqlStatement.Tag SqlStatement.PrepareQueryAndAliases(SqlStatement, AliasesContext, AliasesContext) SqlStatement.IsDependedOn(SqlTable) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlMultiInsertStatement : SqlStatement, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlMultiInsertStatement(SqlTableLikeSource) Declaration public SqlMultiInsertStatement(SqlTableLikeSource source) Parameters Type Name Description SqlTableLikeSource source Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source Inserts Declaration public List<SqlConditionalInsertClause> Inserts { get; } Property Value Type Description List < SqlConditionalInsertClause > | Improve this Doc View Source InsertType Declaration public MultiInsertType InsertType { get; } Property Value Type Description MultiInsertType | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description System.Boolean Overrides SqlStatement.IsParameterDependent | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source SelectQuery Declaration public override SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery Overrides SqlStatement.SelectQuery | Improve this Doc View Source Source Declaration public SqlTableLikeSource Source { get; } Property Value Type Description SqlTableLikeSource Methods | Improve this Doc View Source Add(SqlSearchCondition, SqlInsertClause) Declaration public void Add(SqlSearchCondition when, SqlInsertClause insert) Parameters Type Name Description SqlSearchCondition when SqlInsertClause insert | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatement.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) | Improve this Doc View Source WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) Declaration public override void WalkQueries<TContext>(TContext context, Func<TContext, SelectQuery, SelectQuery> func) Parameters Type Name Description TContext context Func <TContext, SelectQuery , SelectQuery > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.WalkQueries<TContext>(TContext, Func<TContext, LinqToDB.SqlQuery.SelectQuery, LinqToDB.SqlQuery.SelectQuery>) Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlObjectExpression.html": {
    "href": "api/LinqToDB.SqlQuery.SqlObjectExpression.html",
    "title": "Class SqlObjectExpression | Linq To DB (aka linq2db)",
    "keywords": "Class SqlObjectExpression Inheritance System.Object SqlObjectExpression Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlObjectExpression : object, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlObjectExpression(MappingSchema, SqlInfo[]) Declaration public SqlObjectExpression(MappingSchema mappingSchema, SqlInfo[] infoParameters) Parameters Type Name Description MappingSchema mappingSchema SqlInfo [] infoParameters Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source MappingSchema Declaration public MappingSchema MappingSchema { get; } Property Value Type Description MappingSchema | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SystemType Declaration public Type? SystemType { get; } Property Value Type Description System.Nullable < Type > Methods | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source GetSqlValue(Object, Int32) Declaration public SqlValue GetSqlValue(object obj, int index) Parameters Type Name Description System.Object obj System.Int32 index Returns Type Description SqlValue Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlOrderByClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlOrderByClause.html",
    "title": "Class SqlOrderByClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlOrderByClause Inheritance System.Object ClauseBase SqlOrderByClause Implements IQueryElement ISqlExpressionWalkable Inherited Members ClauseBase.Select ClauseBase.From ClauseBase.Where ClauseBase.GroupBy ClauseBase.Having ClauseBase.OrderBy ClauseBase.End() ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlOrderByClause : ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Items Declaration public List<SqlOrderByItem> Items { get; } Property Value Type Description List < SqlOrderByItem > Methods | Improve this Doc View Source Expr(ISqlExpression) Declaration public SqlOrderByClause Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlOrderByClause | Improve this Doc View Source Expr(ISqlExpression, Boolean) Declaration public SqlOrderByClause Expr(ISqlExpression expr, bool isDescending) Parameters Type Name Description ISqlExpression expr System.Boolean isDescending Returns Type Description SqlOrderByClause | Improve this Doc View Source ExprAsc(ISqlExpression) Declaration public SqlOrderByClause ExprAsc(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlOrderByClause | Improve this Doc View Source ExprDesc(ISqlExpression) Declaration public SqlOrderByClause ExprDesc(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlOrderByClause | Improve this Doc View Source Field(SqlField) Declaration public SqlOrderByClause Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SqlOrderByClause | Improve this Doc View Source Field(SqlField, Boolean) Declaration public SqlOrderByClause Field(SqlField field, bool isDescending) Parameters Type Name Description SqlField field System.Boolean isDescending Returns Type Description SqlOrderByClause | Improve this Doc View Source FieldAsc(SqlField) Declaration public SqlOrderByClause FieldAsc(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SqlOrderByClause | Improve this Doc View Source FieldDesc(SqlField) Declaration public SqlOrderByClause FieldDesc(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SqlOrderByClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlOrderByItem.html": {
    "href": "api/LinqToDB.SqlQuery.SqlOrderByItem.html",
    "title": "Class SqlOrderByItem | Linq To DB (aka linq2db)",
    "keywords": "Class SqlOrderByItem Inheritance System.Object SqlOrderByItem Implements IQueryElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlOrderByItem : object, IQueryElement Constructors | Improve this Doc View Source SqlOrderByItem(ISqlExpression, Boolean) Declaration public SqlOrderByItem(ISqlExpression expression, bool isDescending) Parameters Type Name Description ISqlExpression expression System.Boolean isDescending Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source IsDescending Declaration public bool IsDescending { get; } Property Value Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements IQueryElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlOutputClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlOutputClause.html",
    "title": "Class SqlOutputClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlOutputClause Inheritance System.Object SqlOutputClause Implements IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlOutputClause : object, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source DeletedTable Declaration public SqlTable DeletedTable { get; set; } Property Value Type Description SqlTable | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source HasOutputItems Declaration public bool HasOutputItems { get; } Property Value Type Description System.Boolean | Improve this Doc View Source InsertedTable Declaration public SqlTable InsertedTable { get; set; } Property Value Type Description SqlTable | Improve this Doc View Source OutputItems Declaration public List<SqlSetExpression> OutputItems { get; } Property Value Type Description List < SqlSetExpression > | Improve this Doc View Source OutputQuery Declaration public SelectQuery OutputQuery { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source OutputTable Declaration public SqlTable OutputTable { get; set; } Property Value Type Description SqlTable | Improve this Doc View Source SourceTable Declaration public SqlTable SourceTable { get; set; } Property Value Type Description SqlTable Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlParameter.html": {
    "href": "api/LinqToDB.SqlQuery.SqlParameter.html",
    "title": "Class SqlParameter | Linq To DB (aka linq2db)",
    "keywords": "Class SqlParameter Inheritance System.Object SqlParameter Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlParameter : object, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlParameter(DbDataType, Nullable<String>, Nullable<Object>) Declaration public SqlParameter(DbDataType type, string? name, object? value) Parameters Type Name Description DbDataType type System.Nullable < System.String > name System.Nullable < System.Object > value Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsQueryParameter Declaration public bool IsQueryParameter { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string? Name { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Type Declaration public DbDataType Type { get; set; } Property Value Type Description DbDataType | Improve this Doc View Source Value Declaration public object? Value { get; } Property Value Type Description System.Nullable < System.Object > | Improve this Doc View Source ValueConverter Declaration public Func<object?, object?>? ValueConverter { get; set; } Property Value Type Description System.Nullable < Func < System.Nullable < System.Object >, System.Nullable < System.Object >>> Methods | Improve this Doc View Source CorrectParameterValue(Nullable<Object>) Declaration public object? CorrectParameterValue(object? rawValue) Parameters Type Name Description System.Nullable < System.Object > rawValue Returns Type Description System.Nullable < System.Object > | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) QueryHelper.GetParameterValue(SqlParameter, IReadOnlyParameterValues) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlParameterValue.html": {
    "href": "api/LinqToDB.SqlQuery.SqlParameterValue.html",
    "title": "Class SqlParameterValue | Linq To DB (aka linq2db)",
    "keywords": "Class SqlParameterValue Inheritance System.Object SqlParameterValue Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlParameterValue : object Constructors | Improve this Doc View Source SqlParameterValue(Nullable<Object>, DbDataType) Declaration public SqlParameterValue(object? value, DbDataType dbDataType) Parameters Type Name Description System.Nullable < System.Object > value DbDataType dbDataType Properties | Improve this Doc View Source DbDataType Declaration public DbDataType DbDataType { get; } Property Value Type Description DbDataType | Improve this Doc View Source Value Declaration public object? Value { get; } Property Value Type Description System.Nullable < System.Object > Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlParameterValues.html": {
    "href": "api/LinqToDB.SqlQuery.SqlParameterValues.html",
    "title": "Class SqlParameterValues | Linq To DB (aka linq2db)",
    "keywords": "Class SqlParameterValues Inheritance System.Object SqlParameterValues Implements IReadOnlyParameterValues Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlParameterValues : object, IReadOnlyParameterValues Fields | Improve this Doc View Source Empty Declaration public static readonly IReadOnlyParameterValues Empty Field Value Type Description IReadOnlyParameterValues Methods | Improve this Doc View Source AddValue(SqlParameter, Nullable<Object>, DbDataType) Declaration public void AddValue(SqlParameter parameter, object? value, DbDataType dbDataType) Parameters Type Name Description SqlParameter parameter System.Nullable < System.Object > value DbDataType dbDataType | Improve this Doc View Source SetValue(SqlParameter, Nullable<Object>) Declaration public void SetValue(SqlParameter parameter, object? value) Parameters Type Name Description SqlParameter parameter System.Nullable < System.Object > value | Improve this Doc View Source TryGetValue(SqlParameter, out SqlParameterValue) Declaration public bool TryGetValue(SqlParameter parameter, out SqlParameterValue value) Parameters Type Name Description SqlParameter parameter SqlParameterValue value Returns Type Description System.Boolean Implements IReadOnlyParameterValues Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.BaseNotExpr.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.BaseNotExpr.html",
    "title": "Class SqlPredicate.BaseNotExpr | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.BaseNotExpr Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.BaseNotExpr SqlPredicate.Between SqlPredicate.InList SqlPredicate.InSubQuery SqlPredicate.IsDistinct SqlPredicate.IsNull SqlPredicate.IsTrue SqlPredicate.Like SqlPredicate.NotExpr SqlPredicate.SearchString Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Inherited Members SqlPredicate.Expr.Expr1 SqlPredicate.Expr.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.Expr.CanBeNull SqlPredicate.Expr.ElementType SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class BaseNotExpr : SqlPredicate.Expr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source BaseNotExpr(ISqlExpression, Boolean, Int32) Declaration public BaseNotExpr(ISqlExpression exp1, bool isNot, int precedence) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot System.Int32 precedence Properties | Improve this Doc View Source IsNot Declaration public bool IsNot { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CanInvert() Declaration public bool CanInvert() Returns Type Description System.Boolean | Improve this Doc View Source Invert() Declaration public abstract IQueryElement Invert() Returns Type Description IQueryElement | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.Expr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.Between.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.Between.html",
    "title": "Class SqlPredicate.Between | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.Between Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.BaseNotExpr SqlPredicate.Between Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Inherited Members SqlPredicate.BaseNotExpr.IsNot SqlPredicate.BaseNotExpr.CanInvert() SqlPredicate.Expr.Expr1 SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Between : SqlPredicate.BaseNotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source Between(ISqlExpression, Boolean, ISqlExpression, ISqlExpression) Declaration public Between(ISqlExpression exp1, bool isNot, ISqlExpression exp2, ISqlExpression exp3) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot ISqlExpression exp2 ISqlExpression exp3 Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Expr3 Declaration public ISqlExpression Expr3 { get; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Invert() Declaration public override IQueryElement Invert() Returns Type Description IQueryElement Overrides SqlPredicate.BaseNotExpr.Invert() | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.BaseNotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration protected override void Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlPredicate.Expr.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.Expr.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.Expr.html",
    "title": "Class SqlPredicate.Expr | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.Expr Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.BaseNotExpr SqlPredicate.ExprExpr Implements ISqlPredicate IQueryElement ISqlExpressionWalkable Inherited Members SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Expr : SqlPredicate, ISqlPredicate, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source Expr(ISqlExpression) Declaration public Expr(ISqlExpression exp1) Parameters Type Name Description ISqlExpression exp1 | Improve this Doc View Source Expr(ISqlExpression, Int32) Declaration public Expr(ISqlExpression exp1, int precedence) Parameters Type Name Description ISqlExpression exp1 System.Int32 precedence Properties | Improve this Doc View Source CanBeNull Declaration public override bool CanBeNull { get; } Property Value Type Description System.Boolean Overrides SqlPredicate.CanBeNull | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.ElementType | Improve this Doc View Source Expr1 Declaration public ISqlExpression Expr1 { get; set; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration protected override void Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlPredicate.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.ExprExpr.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.ExprExpr.html",
    "title": "Class SqlPredicate.ExprExpr | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.ExprExpr Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.ExprExpr Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Inherited Members SqlPredicate.Expr.Expr1 SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class ExprExpr : SqlPredicate.Expr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source ExprExpr(ISqlExpression, SqlPredicate.Operator, ISqlExpression, Nullable<Boolean>) Declaration public ExprExpr(ISqlExpression exp1, SqlPredicate.Operator op, ISqlExpression exp2, bool? withNull) Parameters Type Name Description ISqlExpression exp1 SqlPredicate.Operator op ISqlExpression exp2 System.Nullable < System.Boolean > withNull Properties | Improve this Doc View Source CanBeNull Declaration public override bool CanBeNull { get; } Property Value Type Description System.Boolean Overrides SqlPredicate.Expr.CanBeNull | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Operator Declaration public SqlPredicate.Operator Operator { get; } Property Value Type Description SqlPredicate.Operator | Improve this Doc View Source WithNull Declaration public bool? WithNull { get; } Property Value Type Description System.Nullable < System.Boolean > Methods | Improve this Doc View Source CanInvert() Declaration public bool CanInvert() Returns Type Description System.Boolean | Improve this Doc View Source Deconstruct(out ISqlExpression, out SqlPredicate.Operator, out ISqlExpression, out Nullable<Boolean>) Declaration public void Deconstruct(out ISqlExpression expr1, out SqlPredicate.Operator operator, out ISqlExpression expr2, out bool? withNull) Parameters Type Name Description ISqlExpression expr1 SqlPredicate.Operator operator ISqlExpression expr2 System.Nullable < System.Boolean > withNull | Improve this Doc View Source Invert() Declaration public IQueryElement Invert() Returns Type Description IQueryElement | Improve this Doc View Source Reduce(EvaluationContext) Declaration public ISqlPredicate Reduce(EvaluationContext context) Parameters Type Name Description EvaluationContext context Returns Type Description ISqlPredicate | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.Expr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration protected override void Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlPredicate.Expr.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.FuncLike.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.FuncLike.html",
    "title": "Class SqlPredicate.FuncLike | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.FuncLike Inheritance System.Object SqlPredicate SqlPredicate.FuncLike Implements ISqlPredicate IQueryElement ISqlExpressionWalkable Inherited Members SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class FuncLike : SqlPredicate, ISqlPredicate, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source FuncLike(SqlFunction) Declaration public FuncLike(SqlFunction func) Parameters Type Name Description SqlFunction func Properties | Improve this Doc View Source CanBeNull Declaration public override bool CanBeNull { get; } Property Value Type Description System.Boolean Overrides SqlPredicate.CanBeNull | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.ElementType | Improve this Doc View Source Function Declaration public SqlFunction Function { get; } Property Value Type Description SqlFunction Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration protected override void Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlPredicate.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.html",
    "title": "Class SqlPredicate | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.FuncLike Implements ISqlPredicate IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class SqlPredicate : object, ISqlPredicate, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlPredicate(Int32) Declaration protected SqlPredicate(int precedence) Parameters Type Name Description System.Int32 precedence Properties | Improve this Doc View Source CanBeNull Declaration public abstract bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public abstract QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected abstract void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration protected abstract void Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Type Parameters Name Description TContext Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlPredicate IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.InList.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.InList.html",
    "title": "Class SqlPredicate.InList | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.InList Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.BaseNotExpr SqlPredicate.InList Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Inherited Members SqlPredicate.BaseNotExpr.IsNot SqlPredicate.BaseNotExpr.CanInvert() SqlPredicate.Expr.Expr1 SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class InList : SqlPredicate.BaseNotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source InList(ISqlExpression, Nullable<Boolean>, Boolean) Declaration public InList(ISqlExpression exp1, bool? withNull, bool isNot) Parameters Type Name Description ISqlExpression exp1 System.Nullable < System.Boolean > withNull System.Boolean isNot | Improve this Doc View Source InList(ISqlExpression, Nullable<Boolean>, Boolean, ISqlExpression) Declaration public InList(ISqlExpression exp1, bool? withNull, bool isNot, ISqlExpression value) Parameters Type Name Description ISqlExpression exp1 System.Nullable < System.Boolean > withNull System.Boolean isNot ISqlExpression value | Improve this Doc View Source InList(ISqlExpression, Nullable<Boolean>, Boolean, Nullable<IEnumerable<ISqlExpression>>) Declaration public InList(ISqlExpression exp1, bool? withNull, bool isNot, IEnumerable<ISqlExpression>? values) Parameters Type Name Description ISqlExpression exp1 System.Nullable < System.Boolean > withNull System.Boolean isNot System.Nullable < IEnumerable < ISqlExpression >> values Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType | Improve this Doc View Source Values Declaration public List<ISqlExpression> Values { get; } Property Value Type Description List < ISqlExpression > | Improve this Doc View Source WithNull Declaration public bool? WithNull { get; } Property Value Type Description System.Nullable < System.Boolean > Methods | Improve this Doc View Source Invert() Declaration public override IQueryElement Invert() Returns Type Description IQueryElement Overrides SqlPredicate.BaseNotExpr.Invert() | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.BaseNotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration protected override void Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlPredicate.Expr.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.InSubQuery.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.InSubQuery.html",
    "title": "Class SqlPredicate.InSubQuery | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.InSubQuery Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.BaseNotExpr SqlPredicate.InSubQuery Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Inherited Members SqlPredicate.BaseNotExpr.IsNot SqlPredicate.BaseNotExpr.CanInvert() SqlPredicate.Expr.Expr1 SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class InSubQuery : SqlPredicate.BaseNotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source InSubQuery(ISqlExpression, Boolean, SelectQuery) Declaration public InSubQuery(ISqlExpression exp1, bool isNot, SelectQuery subQuery) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot SelectQuery subQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType | Improve this Doc View Source SubQuery Declaration public SelectQuery SubQuery { get; } Property Value Type Description SelectQuery Methods | Improve this Doc View Source Invert() Declaration public override IQueryElement Invert() Returns Type Description IQueryElement Overrides SqlPredicate.BaseNotExpr.Invert() | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.BaseNotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration protected override void Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlPredicate.Expr.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.IsDistinct.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.IsDistinct.html",
    "title": "Class SqlPredicate.IsDistinct | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.IsDistinct Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.BaseNotExpr SqlPredicate.IsDistinct Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Inherited Members SqlPredicate.BaseNotExpr.IsNot SqlPredicate.BaseNotExpr.CanInvert() SqlPredicate.Expr.Expr1 SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class IsDistinct : SqlPredicate.BaseNotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source IsDistinct(ISqlExpression, Boolean, ISqlExpression) Declaration public IsDistinct(ISqlExpression exp1, bool isNot, ISqlExpression exp2) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot ISqlExpression exp2 Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Invert() Declaration public override IQueryElement Invert() Returns Type Description IQueryElement Overrides SqlPredicate.BaseNotExpr.Invert() | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.BaseNotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration protected override void Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlPredicate.Expr.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.IsNull.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.IsNull.html",
    "title": "Class SqlPredicate.IsNull | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.IsNull Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.BaseNotExpr SqlPredicate.IsNull Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Inherited Members SqlPredicate.BaseNotExpr.IsNot SqlPredicate.BaseNotExpr.CanInvert() SqlPredicate.Expr.Expr1 SqlPredicate.Expr.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class IsNull : SqlPredicate.BaseNotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source IsNull(ISqlExpression, Boolean) Declaration public IsNull(ISqlExpression exp1, bool isNot) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType Methods | Improve this Doc View Source Invert() Declaration public override IQueryElement Invert() Returns Type Description IQueryElement Overrides SqlPredicate.BaseNotExpr.Invert() | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.BaseNotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.IsTrue.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.IsTrue.html",
    "title": "Class SqlPredicate.IsTrue | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.IsTrue Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.BaseNotExpr SqlPredicate.IsTrue Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Inherited Members SqlPredicate.BaseNotExpr.IsNot SqlPredicate.BaseNotExpr.CanInvert() SqlPredicate.Expr.Expr1 SqlPredicate.Expr.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class IsTrue : SqlPredicate.BaseNotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source IsTrue(ISqlExpression, ISqlExpression, ISqlExpression, Nullable<Boolean>, Boolean) Declaration public IsTrue(ISqlExpression exp1, ISqlExpression trueValue, ISqlExpression falseValue, bool? withNull, bool isNot) Parameters Type Name Description ISqlExpression exp1 ISqlExpression trueValue ISqlExpression falseValue System.Nullable < System.Boolean > withNull System.Boolean isNot Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType | Improve this Doc View Source FalseValue Declaration public ISqlExpression FalseValue { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source TrueValue Declaration public ISqlExpression TrueValue { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source WithNull Declaration public bool? WithNull { get; } Property Value Type Description System.Nullable < System.Boolean > Methods | Improve this Doc View Source Invert() Declaration public override IQueryElement Invert() Returns Type Description IQueryElement Overrides SqlPredicate.BaseNotExpr.Invert() | Improve this Doc View Source Reduce() Declaration public ISqlPredicate Reduce() Returns Type Description ISqlPredicate | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.BaseNotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.Like.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.Like.html",
    "title": "Class SqlPredicate.Like | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.Like Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.BaseNotExpr SqlPredicate.Like Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Inherited Members SqlPredicate.BaseNotExpr.IsNot SqlPredicate.BaseNotExpr.CanInvert() SqlPredicate.Expr.Expr1 SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Like : SqlPredicate.BaseNotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source Like(ISqlExpression, Boolean, ISqlExpression, ISqlExpression, Nullable<String>) Declaration public Like(ISqlExpression exp1, bool isNot, ISqlExpression exp2, ISqlExpression escape, string? functionName = null) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot ISqlExpression exp2 ISqlExpression escape System.Nullable < System.String > functionName Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType | Improve this Doc View Source Escape Declaration public ISqlExpression Escape { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source FunctionName Declaration public string? FunctionName { get; } Property Value Type Description System.Nullable < System.String > Methods | Improve this Doc View Source Invert() Declaration public override IQueryElement Invert() Returns Type Description IQueryElement Overrides SqlPredicate.BaseNotExpr.Invert() | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.BaseNotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration protected override void Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlPredicate.Expr.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.NotExpr.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.NotExpr.html",
    "title": "Class SqlPredicate.NotExpr | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.NotExpr Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.BaseNotExpr SqlPredicate.NotExpr Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Inherited Members SqlPredicate.BaseNotExpr.IsNot SqlPredicate.BaseNotExpr.CanInvert() SqlPredicate.BaseNotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) SqlPredicate.Expr.Expr1 SqlPredicate.Expr.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class NotExpr : SqlPredicate.BaseNotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source NotExpr(ISqlExpression, Boolean, Int32) Declaration public NotExpr(ISqlExpression exp1, bool isNot, int precedence) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot System.Int32 precedence Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType Methods | Improve this Doc View Source Invert() Declaration public override IQueryElement Invert() Returns Type Description IQueryElement Overrides SqlPredicate.BaseNotExpr.Invert() Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.Operator.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.Operator.html",
    "title": "Enum SqlPredicate.Operator | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlPredicate.Operator Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum Operator : int Fields Name Description Equal Greater GreaterOrEqual Less LessOrEqual NotEqual NotGreater NotLess Extension Methods Map.DeepCopy<SqlPredicate.Operator>() Sql.IsDistinctFrom<SqlPredicate.Operator>(SqlPredicate.Operator) Sql.IsDistinctFrom<SqlPredicate.Operator>(Nullable<SqlPredicate.Operator>) Sql.IsNotDistinctFrom<SqlPredicate.Operator>(SqlPredicate.Operator) Sql.IsNotDistinctFrom<SqlPredicate.Operator>(Nullable<SqlPredicate.Operator>) SqlExtensions.In<SqlPredicate.Operator>(IEnumerable<SqlPredicate.Operator>) SqlExtensions.In<SqlPredicate.Operator>(IQueryable<SqlPredicate.Operator>) SqlExtensions.In<SqlPredicate.Operator>(SqlPredicate.Operator[]) SqlExtensions.In<SqlPredicate.Operator>(SqlPredicate.Operator, SqlPredicate.Operator) SqlExtensions.In<SqlPredicate.Operator>(SqlPredicate.Operator, SqlPredicate.Operator, SqlPredicate.Operator) SqlExtensions.NotIn<SqlPredicate.Operator>(IEnumerable<SqlPredicate.Operator>) SqlExtensions.NotIn<SqlPredicate.Operator>(IQueryable<SqlPredicate.Operator>) SqlExtensions.NotIn<SqlPredicate.Operator>(SqlPredicate.Operator[]) SqlExtensions.NotIn<SqlPredicate.Operator>(SqlPredicate.Operator, SqlPredicate.Operator) SqlExtensions.NotIn<SqlPredicate.Operator>(SqlPredicate.Operator, SqlPredicate.Operator, SqlPredicate.Operator)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.SearchString.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.SearchString.html",
    "title": "Class SqlPredicate.SearchString | Linq To DB (aka linq2db)",
    "keywords": "Class SqlPredicate.SearchString Inheritance System.Object SqlPredicate SqlPredicate.Expr SqlPredicate.BaseNotExpr SqlPredicate.SearchString Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Inherited Members SqlPredicate.BaseNotExpr.IsNot SqlPredicate.BaseNotExpr.CanInvert() SqlPredicate.Expr.Expr1 SqlPredicate.Expr.CanBeNull SqlPredicate.Precedence SqlPredicate.ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlPredicate.IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SearchString : SqlPredicate.BaseNotExpr, ISqlPredicate, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source SearchString(ISqlExpression, Boolean, ISqlExpression, SqlPredicate.SearchString.SearchKind, ISqlExpression) Declaration public SearchString(ISqlExpression exp1, bool isNot, ISqlExpression exp2, SqlPredicate.SearchString.SearchKind searchKind, ISqlExpression caseSensitive) Parameters Type Name Description ISqlExpression exp1 System.Boolean isNot ISqlExpression exp2 SqlPredicate.SearchString.SearchKind searchKind ISqlExpression caseSensitive Properties | Improve this Doc View Source CaseSensitive Declaration public ISqlExpression CaseSensitive { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlPredicate.Expr.ElementType | Improve this Doc View Source Expr2 Declaration public ISqlExpression Expr2 { get; } Property Value Type Description ISqlExpression | Improve this Doc View Source Kind Declaration public SqlPredicate.SearchString.SearchKind Kind { get; } Property Value Type Description SqlPredicate.SearchString.SearchKind Methods | Improve this Doc View Source Invert() Declaration public override IQueryElement Invert() Returns Type Description IQueryElement Overrides SqlPredicate.BaseNotExpr.Invert() | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration protected override void ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Overrides SqlPredicate.BaseNotExpr.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration protected override void Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlPredicate.Expr.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements ISqlPredicate IQueryElement ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlPredicate.SearchString.SearchKind.html": {
    "href": "api/LinqToDB.SqlQuery.SqlPredicate.SearchString.SearchKind.html",
    "title": "Enum SqlPredicate.SearchString.SearchKind | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlPredicate.SearchString.SearchKind Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum SearchKind : int Fields Name Description Contains EndsWith StartsWith Extension Methods Map.DeepCopy<SqlPredicate.SearchString.SearchKind>() Sql.IsDistinctFrom<SqlPredicate.SearchString.SearchKind>(SqlPredicate.SearchString.SearchKind) Sql.IsDistinctFrom<SqlPredicate.SearchString.SearchKind>(Nullable<SqlPredicate.SearchString.SearchKind>) Sql.IsNotDistinctFrom<SqlPredicate.SearchString.SearchKind>(SqlPredicate.SearchString.SearchKind) Sql.IsNotDistinctFrom<SqlPredicate.SearchString.SearchKind>(Nullable<SqlPredicate.SearchString.SearchKind>) SqlExtensions.In<SqlPredicate.SearchString.SearchKind>(IEnumerable<SqlPredicate.SearchString.SearchKind>) SqlExtensions.In<SqlPredicate.SearchString.SearchKind>(IQueryable<SqlPredicate.SearchString.SearchKind>) SqlExtensions.In<SqlPredicate.SearchString.SearchKind>(SqlPredicate.SearchString.SearchKind[]) SqlExtensions.In<SqlPredicate.SearchString.SearchKind>(SqlPredicate.SearchString.SearchKind, SqlPredicate.SearchString.SearchKind) SqlExtensions.In<SqlPredicate.SearchString.SearchKind>(SqlPredicate.SearchString.SearchKind, SqlPredicate.SearchString.SearchKind, SqlPredicate.SearchString.SearchKind) SqlExtensions.NotIn<SqlPredicate.SearchString.SearchKind>(IEnumerable<SqlPredicate.SearchString.SearchKind>) SqlExtensions.NotIn<SqlPredicate.SearchString.SearchKind>(IQueryable<SqlPredicate.SearchString.SearchKind>) SqlExtensions.NotIn<SqlPredicate.SearchString.SearchKind>(SqlPredicate.SearchString.SearchKind[]) SqlExtensions.NotIn<SqlPredicate.SearchString.SearchKind>(SqlPredicate.SearchString.SearchKind, SqlPredicate.SearchString.SearchKind) SqlExtensions.NotIn<SqlPredicate.SearchString.SearchKind>(SqlPredicate.SearchString.SearchKind, SqlPredicate.SearchString.SearchKind, SqlPredicate.SearchString.SearchKind)"
  },
  "api/LinqToDB.SqlQuery.SqlRawSqlTable.html": {
    "href": "api/LinqToDB.SqlQuery.SqlRawSqlTable.html",
    "title": "Class SqlRawSqlTable | Linq To DB (aka linq2db)",
    "keywords": "Class SqlRawSqlTable Inheritance System.Object SqlTable SqlRawSqlTable Implements ISqlTableSource ISqlExpression IEquatable < ISqlExpression > ISqlExpressionWalkable IQueryElement Inherited Members SqlTable.Item[String] SqlTable.Name SqlTable.Alias SqlTable.Server SqlTable.Database SqlTable.Schema SqlTable.ObjectType SqlTable.PhysicalName SqlTable.SqlTableType SqlTable.TableArguments SqlTable.TableOptions SqlTable.Fields SqlTable.IdentityFields SqlTable.SequenceAttributes SqlTable.All SqlTable.GetIdentityField() SqlTable.Add(SqlField) SqlTable.AddRange(IEnumerable<SqlField>) SqlTable.SourceID SqlTable.GetKeys(Boolean) SqlTable.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) SqlTable.CanBeNull SqlTable.ISqlExpression.Precedence SqlTable.ISqlExpression.SystemType SqlTable.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlRawSqlTable : SqlTable, ISqlTableSource, ISqlExpression, ISqlExpressionWalkable, IQueryElement Constructors | Improve this Doc View Source SqlRawSqlTable(MappingSchema, Type, String, ISqlExpression[]) Declaration public SqlRawSqlTable(MappingSchema mappingSchema, Type objectType, string sql, ISqlExpression[] parameters) Parameters Type Name Description MappingSchema mappingSchema Type objectType System.String sql ISqlExpression [] parameters | Improve this Doc View Source SqlRawSqlTable(SqlRawSqlTable, ISqlExpression[]) Declaration public SqlRawSqlTable(SqlRawSqlTable table, ISqlExpression[] parameters) Parameters Type Name Description SqlRawSqlTable table ISqlExpression [] parameters Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlTable.ElementType | Improve this Doc View Source Parameters Declaration public ISqlExpression[] Parameters { get; } Property Value Type Description ISqlExpression [] | Improve this Doc View Source SQL Declaration public string SQL { get; } Property Value Type Description System.String | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description System.String Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides SqlTable.ToString() | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlTable.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements ISqlTableSource ISqlExpression IEquatable<> ISqlExpressionWalkable IQueryElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlSearchCondition.html": {
    "href": "api/LinqToDB.SqlQuery.SqlSearchCondition.html",
    "title": "Class SqlSearchCondition | Linq To DB (aka linq2db)",
    "keywords": "Class SqlSearchCondition Inheritance System.Object ConditionBase < SqlSearchCondition , SqlSearchCondition.Next > SqlSearchCondition Implements ISqlPredicate ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable IInvertibleElement Inherited Members ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Search ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.GetNext() ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.SetOr(Boolean) ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Not ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Expr(ISqlExpression) ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Field(SqlField) ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.SubQuery(SelectQuery) ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Value(Object) ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlSearchCondition : ConditionBase<SqlSearchCondition, SqlSearchCondition.Next>, ISqlPredicate, ISqlExpression, IQueryElement, ISqlExpressionWalkable, IInvertibleElement Constructors | Improve this Doc View Source SqlSearchCondition() Declaration public SqlSearchCondition() | Improve this Doc View Source SqlSearchCondition(IEnumerable<SqlCondition>) Declaration public SqlSearchCondition(IEnumerable<SqlCondition> list) Parameters Type Name Description IEnumerable < SqlCondition > list | Improve this Doc View Source SqlSearchCondition(SqlCondition) Declaration public SqlSearchCondition(SqlCondition condition) Parameters Type Name Description SqlCondition condition | Improve this Doc View Source SqlSearchCondition(SqlCondition, SqlCondition) Declaration public SqlSearchCondition(SqlCondition condition1, SqlCondition condition2) Parameters Type Name Description SqlCondition condition1 SqlCondition condition2 Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Conditions Declaration public List<SqlCondition> Conditions { get; } Property Value Type Description List < SqlCondition > | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Search Declaration protected override SqlSearchCondition Search { get; } Property Value Type Description SqlSearchCondition Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlSearchCondition, LinqToDB.SqlQuery.SqlSearchCondition.Next>.Search | Improve this Doc View Source SystemType Declaration public Type SystemType { get; } Property Value Type Description Type Methods | Improve this Doc View Source CanInvert() Declaration public bool CanInvert() Returns Type Description System.Boolean | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source GetNext() Declaration protected override SqlSearchCondition.Next GetNext() Returns Type Description SqlSearchCondition.Next Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlSearchCondition, LinqToDB.SqlQuery.SqlSearchCondition.Next>.GetNext() | Improve this Doc View Source Invert() Declaration public IQueryElement Invert() Returns Type Description IQueryElement Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlPredicate ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable IInvertibleElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) QueryHelper.EnsureConjunction(SqlSearchCondition) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlSearchCondition.Next.html": {
    "href": "api/LinqToDB.SqlQuery.SqlSearchCondition.Next.html",
    "title": "Class SqlSearchCondition.Next | Linq To DB (aka linq2db)",
    "keywords": "Class SqlSearchCondition.Next Inheritance System.Object SqlSearchCondition.Next Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Next : object Properties | Improve this Doc View Source And Declaration public SqlSearchCondition And { get; } Property Value Type Description SqlSearchCondition | Improve this Doc View Source Or Declaration public SqlSearchCondition Or { get; } Property Value Type Description SqlSearchCondition Methods | Improve this Doc View Source ToExpr() Declaration public ISqlExpression ToExpr() Returns Type Description ISqlExpression Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlSelectClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlSelectClause.html",
    "title": "Class SqlSelectClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlSelectClause Inheritance System.Object ClauseBase SqlSelectClause Implements IQueryElement ISqlExpressionWalkable Inherited Members ClauseBase.Select ClauseBase.From ClauseBase.Where ClauseBase.GroupBy ClauseBase.Having ClauseBase.OrderBy ClauseBase.End() ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlSelectClause : ClauseBase, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source Columns Declaration public List<SqlColumn> Columns { get; } Property Value Type Description List < SqlColumn > | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source HasModifier Declaration public bool HasModifier { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDistinct Declaration public bool IsDistinct { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source OptimizeDistinct Declaration public bool OptimizeDistinct { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SkipValue Declaration public ISqlExpression SkipValue { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source TakeHints Declaration public TakeHints? TakeHints { get; } Property Value Type Description System.Nullable < TakeHints > | Improve this Doc View Source TakeValue Declaration public ISqlExpression TakeValue { get; } Property Value Type Description ISqlExpression Methods | Improve this Doc View Source Add(ISqlExpression) Declaration public int Add(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description System.Int32 | Improve this Doc View Source Add(ISqlExpression, Nullable<String>) Declaration public int Add(ISqlExpression expr, string? alias) Parameters Type Name Description ISqlExpression expr System.Nullable < System.String > alias Returns Type Description System.Int32 | Improve this Doc View Source AddColumn(ISqlExpression) Declaration public SqlColumn AddColumn(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlColumn | Improve this Doc View Source AddNew(ISqlExpression, Nullable<String>) Declaration public int AddNew(ISqlExpression expr, string? alias = null) Parameters Type Name Description ISqlExpression expr System.Nullable < System.String > alias Returns Type Description System.Int32 | Improve this Doc View Source AddNewColumn(ISqlExpression) Declaration public SqlColumn AddNewColumn(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlColumn | Improve this Doc View Source Expr(ISqlExpression) Declaration public SqlSelectClause Expr(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(ISqlExpression, String) Declaration public SqlSelectClause Expr(ISqlExpression expr, string alias) Parameters Type Name Description ISqlExpression expr System.String alias Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(String, ISqlExpression[]) Declaration public SqlSelectClause Expr(string expr, params ISqlExpression[] values) Parameters Type Name Description System.String expr ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(String, Int32, ISqlExpression[]) Declaration public SqlSelectClause Expr(string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description System.String expr System.Int32 priority ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(String, String, Int32, ISqlExpression[]) Declaration public SqlSelectClause Expr(string alias, string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description System.String alias System.String expr System.Int32 priority ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(Type, String, ISqlExpression[]) Declaration public SqlSelectClause Expr(Type systemType, string expr, params ISqlExpression[] values) Parameters Type Name Description Type systemType System.String expr ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(Type, String, Int32, ISqlExpression[]) Declaration public SqlSelectClause Expr(Type systemType, string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description Type systemType System.String expr System.Int32 priority ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr(Type, String, String, Int32, ISqlExpression[]) Declaration public SqlSelectClause Expr(Type systemType, string alias, string expr, int priority, params ISqlExpression[] values) Parameters Type Name Description Type systemType System.String alias System.String expr System.Int32 priority ISqlExpression [] values Returns Type Description SqlSelectClause | Improve this Doc View Source Expr<T>(ISqlExpression, String, ISqlExpression) Declaration public SqlSelectClause Expr<T>(ISqlExpression expr1, string operation, ISqlExpression expr2) Parameters Type Name Description ISqlExpression expr1 System.String operation ISqlExpression expr2 Returns Type Description SqlSelectClause Type Parameters Name Description T | Improve this Doc View Source Expr<T>(ISqlExpression, String, ISqlExpression, Int32) Declaration public SqlSelectClause Expr<T>(ISqlExpression expr1, string operation, ISqlExpression expr2, int priority) Parameters Type Name Description ISqlExpression expr1 System.String operation ISqlExpression expr2 System.Int32 priority Returns Type Description SqlSelectClause Type Parameters Name Description T | Improve this Doc View Source Expr<T>(String, ISqlExpression, String, ISqlExpression, Int32) Declaration public SqlSelectClause Expr<T>(string alias, ISqlExpression expr1, string operation, ISqlExpression expr2, int priority) Parameters Type Name Description System.String alias ISqlExpression expr1 System.String operation ISqlExpression expr2 System.Int32 priority Returns Type Description SqlSelectClause Type Parameters Name Description T | Improve this Doc View Source ExprNew(ISqlExpression) Declaration public SqlSelectClause ExprNew(ISqlExpression expr) Parameters Type Name Description ISqlExpression expr Returns Type Description SqlSelectClause | Improve this Doc View Source Field(SqlField) Declaration public SqlSelectClause Field(SqlField field) Parameters Type Name Description SqlField field Returns Type Description SqlSelectClause | Improve this Doc View Source Field(SqlField, String) Declaration public SqlSelectClause Field(SqlField field, string alias) Parameters Type Name Description SqlField field System.String alias Returns Type Description SqlSelectClause | Improve this Doc View Source Skip(ISqlExpression) Declaration public SqlSelectClause Skip(ISqlExpression value) Parameters Type Name Description ISqlExpression value Returns Type Description SqlSelectClause | Improve this Doc View Source Skip(Int32) Declaration public SqlSelectClause Skip(int value) Parameters Type Name Description System.Int32 value Returns Type Description SqlSelectClause | Improve this Doc View Source SubQuery(SelectQuery) Declaration public SqlSelectClause SubQuery(SelectQuery subQuery) Parameters Type Name Description SelectQuery subQuery Returns Type Description SqlSelectClause | Improve this Doc View Source SubQuery(SelectQuery, String) Declaration public SqlSelectClause SubQuery(SelectQuery selectQuery, string alias) Parameters Type Name Description SelectQuery selectQuery System.String alias Returns Type Description SqlSelectClause | Improve this Doc View Source Take(ISqlExpression, Nullable<TakeHints>) Declaration public SqlSelectClause Take(ISqlExpression value, TakeHints? hints) Parameters Type Name Description ISqlExpression value System.Nullable < TakeHints > hints Returns Type Description SqlSelectClause | Improve this Doc View Source Take(Int32, Nullable<TakeHints>) Declaration public SqlSelectClause Take(int value, TakeHints? hints) Parameters Type Name Description System.Int32 value System.Nullable < TakeHints > hints Returns Type Description SqlSelectClause Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlSelectStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlSelectStatement.html",
    "title": "Class SqlSelectStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlSelectStatement Inheritance System.Object SqlStatement SqlStatementWithQueryBase SqlSelectStatement Implements IQueryElement ISqlExpressionWalkable Inherited Members SqlStatementWithQueryBase.IsParameterDependent SqlStatementWithQueryBase.SelectQuery SqlStatementWithQueryBase.With SqlStatementWithQueryBase.GetTableSource(ISqlTableSource) SqlStatementWithQueryBase.WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) SqlStatement.SqlText SqlStatement.DebugSqlText SqlStatement.ParentStatement SqlStatement.CollectParameters() SqlStatement.Tag SqlStatement.PrepareQueryAndAliases(SqlStatement, AliasesContext, AliasesContext) SqlStatement.IsDependedOn(SqlTable) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlSelectStatement : SqlStatementWithQueryBase, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlSelectStatement() Declaration public SqlSelectStatement() | Improve this Doc View Source SqlSelectStatement(SelectQuery) Declaration public SqlSelectStatement(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlSetExpression.html": {
    "href": "api/LinqToDB.SqlQuery.SqlSetExpression.html",
    "title": "Class SqlSetExpression | Linq To DB (aka linq2db)",
    "keywords": "Class SqlSetExpression Inheritance System.Object SqlSetExpression Implements IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlSetExpression : object, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlSetExpression(ISqlExpression, ISqlExpression) Declaration public SqlSetExpression(ISqlExpression column, ISqlExpression expression) Parameters Type Name Description ISqlExpression column ISqlExpression expression Properties | Improve this Doc View Source Column Declaration public ISqlExpression Column { get; set; } Property Value Type Description ISqlExpression | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Expression Declaration public ISqlExpression Expression { get; set; } Property Value Type Description ISqlExpression Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlSetOperator.html": {
    "href": "api/LinqToDB.SqlQuery.SqlSetOperator.html",
    "title": "Class SqlSetOperator | Linq To DB (aka linq2db)",
    "keywords": "Class SqlSetOperator Inheritance System.Object SqlSetOperator Implements IQueryElement Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlSetOperator : object, IQueryElement Constructors | Improve this Doc View Source SqlSetOperator(SelectQuery, SetOperation) Declaration public SqlSetOperator(SelectQuery selectQuery, SetOperation operation) Parameters Type Name Description SelectQuery selectQuery SetOperation operation Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Operation Declaration public SetOperation Operation { get; } Property Value Type Description SetOperation | Improve this Doc View Source SelectQuery Declaration public SelectQuery SelectQuery { get; } Property Value Type Description SelectQuery Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Implements IQueryElement Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlStatement.html",
    "title": "Class SqlStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlStatement Inheritance System.Object SqlStatement SqlCreateTableStatement SqlDropTableStatement SqlMultiInsertStatement SqlStatementWithQueryBase SqlTruncateTableStatement Implements IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class SqlStatement : object, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source DebugSqlText Declaration protected string DebugSqlText { get; } Property Value Type Description System.String | Improve this Doc View Source ElementType Declaration public abstract QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsParameterDependent Declaration public abstract bool IsParameterDependent { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ParentStatement Used internally for SQL Builder Declaration public SqlStatement ParentStatement { get; set; } Property Value Type Description SqlStatement | Improve this Doc View Source QueryType Declaration public abstract QueryType QueryType { get; } Property Value Type Description QueryType | Improve this Doc View Source SelectQuery Declaration public abstract SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery | Improve this Doc View Source SqlText Declaration public string SqlText { get; } Property Value Type Description System.String | Improve this Doc View Source Tag Declaration public SqlComment Tag { get; } Property Value Type Description SqlComment Methods | Improve this Doc View Source CollectParameters() Declaration public SqlParameter[] CollectParameters() Returns Type Description SqlParameter [] | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public abstract ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource | Improve this Doc View Source IsDependedOn(SqlTable) Indicates when optimizer can not remove reference for particular table Declaration public virtual bool IsDependedOn(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.Boolean | Improve this Doc View Source PrepareQueryAndAliases(SqlStatement, AliasesContext, out AliasesContext) Declaration public static void PrepareQueryAndAliases(SqlStatement statement, AliasesContext prevAliasContext, out AliasesContext newAliasContext) Parameters Type Name Description SqlStatement statement AliasesContext prevAliasContext AliasesContext newAliasContext | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public abstract StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public abstract ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext | Improve this Doc View Source WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) Declaration public abstract void WalkQueries<TContext>(TContext context, Func<TContext, SelectQuery, SelectQuery> func) Parameters Type Name Description TContext context Func <TContext, SelectQuery , SelectQuery > func Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlStatementWithQueryBase.html": {
    "href": "api/LinqToDB.SqlQuery.SqlStatementWithQueryBase.html",
    "title": "Class SqlStatementWithQueryBase | Linq To DB (aka linq2db)",
    "keywords": "Class SqlStatementWithQueryBase Inheritance System.Object SqlStatement SqlStatementWithQueryBase SqlDeleteStatement SqlInsertOrUpdateStatement SqlInsertStatement SqlMergeStatement SqlSelectStatement SqlUpdateStatement Implements IQueryElement ISqlExpressionWalkable Inherited Members SqlStatement.SqlText SqlStatement.DebugSqlText SqlStatement.QueryType SqlStatement.ParentStatement SqlStatement.CollectParameters() SqlStatement.Tag SqlStatement.ElementType SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) SqlStatement.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) SqlStatement.PrepareQueryAndAliases(SqlStatement, AliasesContext, AliasesContext) SqlStatement.IsDependedOn(SqlTable) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public abstract class SqlStatementWithQueryBase : SqlStatement, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlStatementWithQueryBase(SelectQuery) Declaration protected SqlStatementWithQueryBase(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description System.Boolean Overrides SqlStatement.IsParameterDependent | Improve this Doc View Source SelectQuery Declaration public override SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery Overrides SqlStatement.SelectQuery | Improve this Doc View Source With Declaration public SqlWithClause With { get; set; } Property Value Type Description SqlWithClause Methods | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatement.GetTableSource(ISqlTableSource) | Improve this Doc View Source WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) Declaration public override void WalkQueries<TContext>(TContext context, Func<TContext, SelectQuery, SelectQuery> func) Parameters Type Name Description TContext context Func <TContext, SelectQuery , SelectQuery > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.WalkQueries<TContext>(TContext, Func<TContext, LinqToDB.SqlQuery.SelectQuery, LinqToDB.SqlQuery.SelectQuery>) Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlTable.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTable.html",
    "title": "Class SqlTable | Linq To DB (aka linq2db)",
    "keywords": "Class SqlTable Inheritance System.Object SqlTable SqlCteTable SqlRawSqlTable SqlTable<T> Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlTable : object, ISqlTableSource, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlTable() Declaration public SqlTable() | Improve this Doc View Source SqlTable(MappingSchema, Type, Nullable<String>) Declaration public SqlTable(MappingSchema mappingSchema, Type objectType, string? physicalName = null) Parameters Type Name Description MappingSchema mappingSchema Type objectType System.Nullable < System.String > physicalName | Improve this Doc View Source SqlTable(SqlTable) Declaration public SqlTable(SqlTable table) Parameters Type Name Description SqlTable table | Improve this Doc View Source SqlTable(SqlTable, IEnumerable<SqlField>, ISqlExpression[]) Declaration public SqlTable(SqlTable table, IEnumerable<SqlField> fields, ISqlExpression[] tableArguments) Parameters Type Name Description SqlTable table IEnumerable < SqlField > fields ISqlExpression [] tableArguments | Improve this Doc View Source SqlTable(Type) Declaration public SqlTable(Type objectType) Parameters Type Name Description Type objectType Properties | Improve this Doc View Source Alias Declaration public string? Alias { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source All Declaration public SqlField All { get; } Property Value Type Description SqlField | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Database Declaration public string? Database { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ElementType Declaration public virtual QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Fields Declaration public IReadOnlyList<SqlField> Fields { get; } Property Value Type Description IReadOnlyList < SqlField > | Improve this Doc View Source IdentityFields Declaration public IReadOnlyList<SqlField> IdentityFields { get; } Property Value Type Description IReadOnlyList < SqlField > | Improve this Doc View Source Item[String] Declaration public SqlField this[string fieldName] { get; } Parameters Type Name Description System.String fieldName Property Value Type Description SqlField | Improve this Doc View Source Name Declaration public virtual string? Name { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ObjectType Declaration public Type? ObjectType { get; set; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source PhysicalName Declaration public virtual string? PhysicalName { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Schema Declaration public string? Schema { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SequenceAttributes Declaration public SequenceNameAttribute[] SequenceAttributes { get; } Property Value Type Description SequenceNameAttribute [] | Improve this Doc View Source Server Declaration public string? Server { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source SourceID Declaration public int SourceID { get; protected set; } Property Value Type Description System.Int32 | Improve this Doc View Source SqlTableType Declaration public virtual SqlTableType SqlTableType { get; set; } Property Value Type Description SqlTableType | Improve this Doc View Source TableArguments Declaration public ISqlExpression[] TableArguments { get; set; } Property Value Type Description ISqlExpression [] | Improve this Doc View Source TableOptions Declaration public TableOptions TableOptions { get; set; } Property Value Type Description TableOptions Methods | Improve this Doc View Source Add(SqlField) Declaration public void Add(SqlField field) Parameters Type Name Description SqlField field | Improve this Doc View Source AddRange(IEnumerable<SqlField>) Declaration public void AddRange(IEnumerable<SqlField> collection) Parameters Type Name Description IEnumerable < SqlField > collection | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source GetIdentityField() Declaration public SqlField GetIdentityField() Returns Type Description SqlField | Improve this Doc View Source GetKeys(Boolean) Declaration public IList<ISqlExpression> GetKeys(bool allIfEmpty) Parameters Type Name Description System.Boolean allIfEmpty Returns Type Description IList < ISqlExpression > | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public virtual StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public virtual ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Explicit Interface Implementations | Improve this Doc View Source ISqlExpression.Precedence Declaration int ISqlExpression.Precedence { get; } Returns Type Description System.Int32 | Improve this Doc View Source ISqlExpression.SystemType Declaration Type? ISqlExpression.SystemType { get; } Returns Type Description System.Nullable < Type > Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlTable-1.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTable-1.html",
    "title": "Class SqlTable<T> | Linq To DB (aka linq2db)",
    "keywords": "Class SqlTable<T> Inheritance System.Object SqlTable SqlTable<T> Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Inherited Members SqlTable.ToString() SqlTable.Item[String] SqlTable.Name SqlTable.Alias SqlTable.Server SqlTable.Database SqlTable.Schema SqlTable.ObjectType SqlTable.PhysicalName SqlTable.SqlTableType SqlTable.TableArguments SqlTable.TableOptions SqlTable.Fields SqlTable.IdentityFields SqlTable.SequenceAttributes SqlTable.All SqlTable.GetIdentityField() SqlTable.Add(SqlField) SqlTable.AddRange(IEnumerable<SqlField>) SqlTable.SourceID SqlTable.GetKeys(Boolean) SqlTable.ElementType SqlTable.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) SqlTable.CanBeNull SqlTable.ISqlExpression.Precedence SqlTable.ISqlExpression.SystemType SqlTable.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) SqlTable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlTable<T> : SqlTable, ISqlTableSource, ISqlExpression, IQueryElement, ISqlExpressionWalkable Type Parameters Name Description T Constructors | Improve this Doc View Source SqlTable() Declaration public SqlTable() | Improve this Doc View Source SqlTable(MappingSchema) Declaration public SqlTable(MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlTableLikeSource.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTableLikeSource.html",
    "title": "Class SqlTableLikeSource | Linq To DB (aka linq2db)",
    "keywords": "Class SqlTableLikeSource Inheritance System.Object SqlTableLikeSource Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlTableLikeSource : object, ISqlTableSource, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlTableLikeSource() Declaration public SqlTableLikeSource() Properties | Improve this Doc View Source IsParameterDependent Declaration public bool IsParameterDependent { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Source Declaration public ISqlTableSource Source { get; } Property Value Type Description ISqlTableSource | Improve this Doc View Source SourceEnumerable Declaration public SqlValuesTable SourceEnumerable { get; } Property Value Type Description SqlValuesTable | Improve this Doc View Source SourceFields Declaration public List<SqlField> SourceFields { get; } Property Value Type Description List < SqlField > | Improve this Doc View Source SourceID Declaration public int SourceID { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SourceQuery Declaration public SelectQuery SourceQuery { get; } Property Value Type Description SelectQuery Methods | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext | Improve this Doc View Source WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) Declaration public void WalkQueries<TContext>(TContext context, Func<TContext, SelectQuery, SelectQuery> func) Parameters Type Name Description TContext context Func <TContext, SelectQuery , SelectQuery > func Type Parameters Name Description TContext Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ElementType Declaration QueryElementType IQueryElement.ElementType { get; } Returns Type Description QueryElementType | Improve this Doc View Source ISqlExpression.CanBeNull Declaration bool ISqlExpression.CanBeNull { get; } Returns Type Description System.Boolean | Improve this Doc View Source ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration bool ISqlExpression.Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source ISqlExpression.Precedence Declaration int ISqlExpression.Precedence { get; } Returns Type Description System.Int32 | Improve this Doc View Source ISqlTableSource.All Declaration SqlField ISqlTableSource.All { get; } Returns Type Description SqlField | Improve this Doc View Source ISqlTableSource.GetKeys(Boolean) Declaration IList<ISqlExpression> ISqlTableSource.GetKeys(bool allIfEmpty) Parameters Type Name Description System.Boolean allIfEmpty Returns Type Description IList < ISqlExpression > | Improve this Doc View Source ISqlTableSource.SqlTableType Declaration SqlTableType ISqlTableSource.SqlTableType { get; } Returns Type Description SqlTableType Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlTableSource.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTableSource.html",
    "title": "Class SqlTableSource | Linq To DB (aka linq2db)",
    "keywords": "Class SqlTableSource Inheritance System.Object SqlTableSource Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlTableSource : object, ISqlTableSource, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlTableSource(ISqlTableSource, Nullable<String>) Declaration public SqlTableSource(ISqlTableSource source, string? alias) Parameters Type Name Description ISqlTableSource source System.Nullable < System.String > alias | Improve this Doc View Source SqlTableSource(ISqlTableSource, Nullable<String>, IEnumerable<SqlJoinedTable>, Nullable<IEnumerable<ISqlExpression[]>>) Declaration public SqlTableSource(ISqlTableSource source, string? alias, IEnumerable<SqlJoinedTable> joins, IEnumerable<ISqlExpression[]>? uniqueKeys) Parameters Type Name Description ISqlTableSource source System.Nullable < System.String > alias IEnumerable < SqlJoinedTable > joins System.Nullable < IEnumerable < ISqlExpression []>> uniqueKeys | Improve this Doc View Source SqlTableSource(ISqlTableSource, Nullable<String>, SqlJoinedTable[]) Declaration public SqlTableSource(ISqlTableSource source, string? alias, params SqlJoinedTable[] joins) Parameters Type Name Description ISqlTableSource source System.Nullable < System.String > alias SqlJoinedTable [] joins Properties | Improve this Doc View Source Alias Declaration public string? Alias { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source All Declaration public SqlField All { get; } Property Value Type Description SqlField | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source HasUniqueKeys Declaration public bool HasUniqueKeys { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[ISqlTableSource] Declaration public SqlTableSource this[ISqlTableSource table] { get; } Parameters Type Name Description ISqlTableSource table Property Value Type Description SqlTableSource | Improve this Doc View Source Item[ISqlTableSource, Nullable<String>] Declaration public SqlTableSource this[ISqlTableSource table, string? alias] { get; } Parameters Type Name Description ISqlTableSource table System.Nullable < System.String > alias Property Value Type Description SqlTableSource | Improve this Doc View Source Joins Declaration public List<SqlJoinedTable> Joins { get; } Property Value Type Description List < SqlJoinedTable > | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Source Declaration public ISqlTableSource Source { get; set; } Property Value Type Description ISqlTableSource | Improve this Doc View Source SourceID Declaration public int SourceID { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SqlTableType Declaration public SqlTableType SqlTableType { get; } Property Value Type Description SqlTableType | Improve this Doc View Source SystemType Declaration public Type? SystemType { get; } Property Value Type Description System.Nullable < Type > | Improve this Doc View Source UniqueKeys Contains list of columns that build unique key for Source . Used in JoinOptimizer for safely removing sub-query from resulting SQL. Declaration public List<ISqlExpression[]> UniqueKeys { get; } Property Value Type Description List < ISqlExpression []> Methods | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source ForEach<TContext>(TContext, Action<TContext, SqlTableSource>, HashSet<SelectQuery>) Declaration public void ForEach<TContext>(TContext context, Action<TContext, SqlTableSource> action, HashSet<SelectQuery> visitedQueries) Parameters Type Name Description TContext context Action <TContext, SqlTableSource > action HashSet < SelectQuery > visitedQueries Type Parameters Name Description TContext | Improve this Doc View Source GetJoinNumber() Declaration public int GetJoinNumber() Returns Type Description System.Int32 | Improve this Doc View Source GetTables() Declaration public IEnumerable<ISqlTableSource> GetTables() Returns Type Description IEnumerable < ISqlTableSource > | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlTableSource.GetKeys(Boolean) Declaration IList<ISqlExpression> ISqlTableSource.GetKeys(bool allIfEmpty) Parameters Type Name Description System.Boolean allIfEmpty Returns Type Description IList < ISqlExpression > Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlTableType.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTableType.html",
    "title": "Enum SqlTableType | Linq To DB (aka linq2db)",
    "keywords": "Enum SqlTableType Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public enum SqlTableType : int Fields Name Description Cte Expression Function MergeSource RawSql SystemTable Table Values Extension Methods Map.DeepCopy<SqlTableType>() Sql.IsDistinctFrom<SqlTableType>(SqlTableType) Sql.IsDistinctFrom<SqlTableType>(Nullable<SqlTableType>) Sql.IsNotDistinctFrom<SqlTableType>(SqlTableType) Sql.IsNotDistinctFrom<SqlTableType>(Nullable<SqlTableType>) SqlExtensions.In<SqlTableType>(IEnumerable<SqlTableType>) SqlExtensions.In<SqlTableType>(IQueryable<SqlTableType>) SqlExtensions.In<SqlTableType>(SqlTableType[]) SqlExtensions.In<SqlTableType>(SqlTableType, SqlTableType) SqlExtensions.In<SqlTableType>(SqlTableType, SqlTableType, SqlTableType) SqlExtensions.NotIn<SqlTableType>(IEnumerable<SqlTableType>) SqlExtensions.NotIn<SqlTableType>(IQueryable<SqlTableType>) SqlExtensions.NotIn<SqlTableType>(SqlTableType[]) SqlExtensions.NotIn<SqlTableType>(SqlTableType, SqlTableType) SqlExtensions.NotIn<SqlTableType>(SqlTableType, SqlTableType, SqlTableType)"
  },
  "api/LinqToDB.SqlQuery.SqlTruncateTableStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlTruncateTableStatement.html",
    "title": "Class SqlTruncateTableStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlTruncateTableStatement Inheritance System.Object SqlStatement SqlTruncateTableStatement Implements IQueryElement ISqlExpressionWalkable Inherited Members SqlStatement.SqlText SqlStatement.DebugSqlText SqlStatement.ParentStatement SqlStatement.CollectParameters() SqlStatement.Tag SqlStatement.PrepareQueryAndAliases(SqlStatement, AliasesContext, AliasesContext) SqlStatement.IsDependedOn(SqlTable) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlTruncateTableStatement : SqlStatement, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source IsParameterDependent Declaration public override bool IsParameterDependent { get; set; } Property Value Type Description System.Boolean Overrides SqlStatement.IsParameterDependent | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source ResetIdentity Declaration public bool ResetIdentity { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SelectQuery Declaration public override SelectQuery SelectQuery { get; set; } Property Value Type Description SelectQuery Overrides SqlStatement.SelectQuery | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable Methods | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatement.GetTableSource(ISqlTableSource) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) | Improve this Doc View Source WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) Declaration public override void WalkQueries<TContext>(TContext context, Func<TContext, SelectQuery, SelectQuery> func) Parameters Type Name Description TContext context Func <TContext, SelectQuery , SelectQuery > func Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.WalkQueries<TContext>(TContext, Func<TContext, LinqToDB.SqlQuery.SelectQuery, LinqToDB.SqlQuery.SelectQuery>) Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlUpdateClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlUpdateClause.html",
    "title": "Class SqlUpdateClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlUpdateClause Inheritance System.Object SqlUpdateClause Implements IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlUpdateClause : object, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlUpdateClause() Declaration public SqlUpdateClause() Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Items Declaration public List<SqlSetExpression> Items { get; } Property Value Type Description List < SqlSetExpression > | Improve this Doc View Source Keys Declaration public List<SqlSetExpression> Keys { get; } Property Value Type Description List < SqlSetExpression > | Improve this Doc View Source Table Declaration public SqlTable Table { get; set; } Property Value Type Description SqlTable Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlUpdateStatement.html": {
    "href": "api/LinqToDB.SqlQuery.SqlUpdateStatement.html",
    "title": "Class SqlUpdateStatement | Linq To DB (aka linq2db)",
    "keywords": "Class SqlUpdateStatement Inheritance System.Object SqlStatement SqlStatementWithQueryBase SqlUpdateStatement Implements IQueryElement ISqlExpressionWalkable Inherited Members SqlStatementWithQueryBase.IsParameterDependent SqlStatementWithQueryBase.SelectQuery SqlStatementWithQueryBase.With SqlStatementWithQueryBase.WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) SqlStatement.SqlText SqlStatement.DebugSqlText SqlStatement.ParentStatement SqlStatement.CollectParameters() SqlStatement.Tag SqlStatement.PrepareQueryAndAliases(SqlStatement, AliasesContext, AliasesContext) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlUpdateStatement : SqlStatementWithQueryBase, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlUpdateStatement(SelectQuery) Declaration public SqlUpdateStatement(SelectQuery selectQuery) Parameters Type Name Description SelectQuery selectQuery Properties | Improve this Doc View Source ElementType Declaration public override QueryElementType ElementType { get; } Property Value Type Description QueryElementType Overrides SqlStatement.ElementType | Improve this Doc View Source Output Declaration public SqlOutputClause Output { get; set; } Property Value Type Description SqlOutputClause | Improve this Doc View Source QueryType Declaration public override QueryType QueryType { get; } Property Value Type Description QueryType Overrides SqlStatement.QueryType | Improve this Doc View Source Update Declaration public SqlUpdateClause Update { get; set; } Property Value Type Description SqlUpdateClause Methods | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public override ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource Overrides SqlStatementWithQueryBase.GetTableSource(ISqlTableSource) | Improve this Doc View Source IsDependedOn(SqlTable) Declaration public override bool IsDependedOn(SqlTable table) Parameters Type Name Description SqlTable table Returns Type Description System.Boolean Overrides SqlStatement.IsDependedOn(SqlTable) | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public override StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder Overrides SqlStatement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public override ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Overrides LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions, TContext, Func<TContext, LinqToDB.SqlQuery.ISqlExpression, LinqToDB.SqlQuery.ISqlExpression>) Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.IsInsert(SqlStatement) SqlExtensions.NeedsIdentity(SqlStatement) SqlExtensions.IsUpdate(SqlStatement) SqlExtensions.IsDelete(SqlStatement) SqlExtensions.GetIdentityField(SqlStatement) SqlExtensions.GetInsertClause(SqlStatement) SqlExtensions.GetWithClause(SqlStatement) SqlExtensions.RequireInsertClause(SqlStatement) SqlExtensions.GetUpdateClause(SqlStatement) SqlExtensions.RequireUpdateClause(SqlStatement) SqlExtensions.GetOutputClause(SqlStatement) SqlExtensions.EnsureQuery(SqlStatement) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlValue.html": {
    "href": "api/LinqToDB.SqlQuery.SqlValue.html",
    "title": "Class SqlValue | Linq To DB (aka linq2db)",
    "keywords": "Class SqlValue Inheritance System.Object SqlValue Implements ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlValue : object, ISqlExpression, IQueryElement, ISqlExpressionWalkable Constructors | Improve this Doc View Source SqlValue(DbDataType, Nullable<Object>) Declaration public SqlValue(DbDataType valueType, object? value) Parameters Type Name Description DbDataType valueType System.Nullable < System.Object > value | Improve this Doc View Source SqlValue(Object) Declaration public SqlValue(object value) Parameters Type Name Description System.Object value | Improve this Doc View Source SqlValue(Type, Nullable<Object>) Declaration public SqlValue(Type systemType, object? value) Parameters Type Name Description Type systemType System.Nullable < System.Object > value Properties | Improve this Doc View Source CanBeNull Declaration public bool CanBeNull { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source Precedence Declaration public int Precedence { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Value Declaration public object? Value { get; } Property Value Type Description System.Nullable < System.Object > | Improve this Doc View Source ValueType Declaration public DbDataType ValueType { get; set; } Property Value Type Description DbDataType Methods | Improve this Doc View Source Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration public bool Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlValuesTable.html": {
    "href": "api/LinqToDB.SqlQuery.SqlValuesTable.html",
    "title": "Class SqlValuesTable | Linq To DB (aka linq2db)",
    "keywords": "Class SqlValuesTable Inheritance System.Object SqlValuesTable Implements ISqlTableSource ISqlExpression IQueryElement IEquatable < ISqlExpression > ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlValuesTable : object, ISqlTableSource, ISqlExpression, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source Fields Declaration public List<SqlField> Fields { get; } Property Value Type Description List < SqlField > | Improve this Doc View Source SourceID Declaration public int SourceID { get; } Property Value Type Description System.Int32 Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ElementType Declaration QueryElementType IQueryElement.ElementType { get; } Returns Type Description QueryElementType | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpression.CanBeNull Declaration bool ISqlExpression.CanBeNull { get; } Returns Type Description System.Boolean | Improve this Doc View Source ISqlExpression.Equals(ISqlExpression, Func<ISqlExpression, ISqlExpression, Boolean>) Declaration bool ISqlExpression.Equals(ISqlExpression other, Func<ISqlExpression, ISqlExpression, bool> comparer) Parameters Type Name Description ISqlExpression other Func < ISqlExpression , ISqlExpression , System.Boolean > comparer Returns Type Description System.Boolean | Improve this Doc View Source ISqlExpression.Precedence Declaration int ISqlExpression.Precedence { get; } Returns Type Description System.Int32 | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext | Improve this Doc View Source ISqlTableSource.All Declaration SqlField ISqlTableSource.All { get; } Returns Type Description SqlField | Improve this Doc View Source ISqlTableSource.GetKeys(Boolean) Declaration IList<ISqlExpression> ISqlTableSource.GetKeys(bool allIfEmpty) Parameters Type Name Description System.Boolean allIfEmpty Returns Type Description IList < ISqlExpression > | Improve this Doc View Source ISqlTableSource.SqlTableType Declaration SqlTableType ISqlTableSource.SqlTableType { get; } Returns Type Description SqlTableType Implements ISqlTableSource ISqlExpression IQueryElement IEquatable<> ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlWhereClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlWhereClause.html",
    "title": "Class SqlWhereClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlWhereClause Inheritance System.Object ConditionBase < SqlWhereClause , SqlWhereClause.Next > ClauseBase < SqlWhereClause , SqlWhereClause.Next > SqlWhereClause Implements IQueryElement ISqlExpressionWalkable Inherited Members ClauseBase<SqlWhereClause, SqlWhereClause.Next>.Select ClauseBase<SqlWhereClause, SqlWhereClause.Next>.From ClauseBase<SqlWhereClause, SqlWhereClause.Next>.GroupBy ClauseBase<SqlWhereClause, SqlWhereClause.Next>.Having ClauseBase<SqlWhereClause, SqlWhereClause.Next>.OrderBy ClauseBase<SqlWhereClause, SqlWhereClause.Next>.End() ClauseBase<SqlWhereClause, SqlWhereClause.Next>.SelectQuery ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Search ConditionBase<SqlWhereClause, SqlWhereClause.Next>.GetNext() ConditionBase<SqlWhereClause, SqlWhereClause.Next>.SetOr(Boolean) ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Not ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Expr(ISqlExpression) ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Field(SqlField) ConditionBase<SqlWhereClause, SqlWhereClause.Next>.SubQuery(SelectQuery) ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Value(Object) ConditionBase<SqlWhereClause, SqlWhereClause.Next>.Exists(SelectQuery) Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlWhereClause : ClauseBase<SqlWhereClause, SqlWhereClause.Next>, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Search Declaration protected override SqlSearchCondition Search { get; } Property Value Type Description SqlSearchCondition Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlWhereClause, LinqToDB.SqlQuery.SqlWhereClause.Next>.Search | Improve this Doc View Source SearchCondition Declaration public SqlSearchCondition SearchCondition { get; } Property Value Type Description SqlSearchCondition Methods | Improve this Doc View Source GetNext() Declaration protected override SqlWhereClause.Next GetNext() Returns Type Description SqlWhereClause.Next Overrides LinqToDB.SqlQuery.ConditionBase<LinqToDB.SqlQuery.SqlWhereClause, LinqToDB.SqlQuery.SqlWhereClause.Next>.GetNext() Explicit Interface Implementations | Improve this Doc View Source IQueryElement.ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration StringBuilder IQueryElement.ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source ISqlExpressionWalkable.Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration ISqlExpression ISqlExpressionWalkable.Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) QueryHelper.ConcatSearchCondition(SqlWhereClause, SqlSearchCondition) QueryHelper.EnsureConjunction(SqlWhereClause) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlWhereClause.Next.html": {
    "href": "api/LinqToDB.SqlQuery.SqlWhereClause.Next.html",
    "title": "Class SqlWhereClause.Next | Linq To DB (aka linq2db)",
    "keywords": "Class SqlWhereClause.Next Inheritance System.Object ClauseBase SqlWhereClause.Next Inherited Members ClauseBase.Select ClauseBase.From ClauseBase.Where ClauseBase.GroupBy ClauseBase.Having ClauseBase.OrderBy ClauseBase.End() ClauseBase.SelectQuery Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class Next : ClauseBase Properties | Improve this Doc View Source And Declaration public SqlWhereClause And { get; } Property Value Type Description SqlWhereClause | Improve this Doc View Source Or Declaration public SqlWhereClause Or { get; } Property Value Type Description SqlWhereClause Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.SqlWithClause.html": {
    "href": "api/LinqToDB.SqlQuery.SqlWithClause.html",
    "title": "Class SqlWithClause | Linq To DB (aka linq2db)",
    "keywords": "Class SqlWithClause Inheritance System.Object SqlWithClause Implements IQueryElement ISqlExpressionWalkable Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class SqlWithClause : object, IQueryElement, ISqlExpressionWalkable Properties | Improve this Doc View Source Clauses Declaration public List<CteClause> Clauses { get; set; } Property Value Type Description List < CteClause > | Improve this Doc View Source ElementType Declaration public QueryElementType ElementType { get; } Property Value Type Description QueryElementType Methods | Improve this Doc View Source GetTableSource(ISqlTableSource) Declaration public ISqlTableSource GetTableSource(ISqlTableSource table) Parameters Type Name Description ISqlTableSource table Returns Type Description ISqlTableSource | Improve this Doc View Source ToString(StringBuilder, Dictionary<IQueryElement, IQueryElement>) Declaration public StringBuilder ToString(StringBuilder sb, Dictionary<IQueryElement, IQueryElement> dic) Parameters Type Name Description StringBuilder sb Dictionary < IQueryElement , IQueryElement > dic Returns Type Description StringBuilder | Improve this Doc View Source Walk<TContext>(WalkOptions, TContext, Func<TContext, ISqlExpression, ISqlExpression>) Declaration public ISqlExpression Walk<TContext>(WalkOptions options, TContext context, Func<TContext, ISqlExpression, ISqlExpression> func) Parameters Type Name Description WalkOptions options TContext context Func <TContext, ISqlExpression , ISqlExpression > func Returns Type Description ISqlExpression Type Parameters Name Description TContext | Improve this Doc View Source WalkQueries<TContext>(TContext, Func<TContext, SelectQuery, SelectQuery>) Declaration public void WalkQueries<TContext>(TContext context, Func<TContext, SelectQuery, SelectQuery> func) Parameters Type Name Description TContext context Func <TContext, SelectQuery , SelectQuery > func Type Parameters Name Description TContext Implements IQueryElement ISqlExpressionWalkable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.SqlQuery.WalkOptions.html": {
    "href": "api/LinqToDB.SqlQuery.WalkOptions.html",
    "title": "Class WalkOptions | Linq To DB (aka linq2db)",
    "keywords": "Class WalkOptions Inheritance System.Object WalkOptions Namespace : LinqToDB.SqlQuery Assembly : linq2db.dll Syntax public class WalkOptions : object Fields | Improve this Doc View Source Default Declaration public static readonly WalkOptions Default Field Value Type Description WalkOptions | Improve this Doc View Source ProcessParent Declaration public readonly bool ProcessParent Field Value Type Description System.Boolean | Improve this Doc View Source SkipColumnDeclaration Declaration public readonly bool SkipColumnDeclaration Field Value Type Description System.Boolean | Improve this Doc View Source SkipColumns Declaration public readonly bool SkipColumns Field Value Type Description System.Boolean | Improve this Doc View Source WithProcessParent Declaration public static readonly WalkOptions WithProcessParent Field Value Type Description WalkOptions | Improve this Doc View Source WithSkipColumnDeclaration Declaration public static readonly WalkOptions WithSkipColumnDeclaration Field Value Type Description WalkOptions Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.StringAggregateExtensions.html": {
    "href": "api/LinqToDB.StringAggregateExtensions.html",
    "title": "Class StringAggregateExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class StringAggregateExtensions Inheritance System.Object StringAggregateExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class StringAggregateExtensions : object Methods | Improve this Doc View Source OrderBy<T, TR>(Sql.IAggregateFunctionNotOrdered<T, TR>) Declaration public static Sql.IAggregateFunction<T, TR> OrderBy<T, TR>(this Sql.IAggregateFunctionNotOrdered<T, TR> aggregate) Parameters Type Name Description Sql.IAggregateFunctionNotOrdered <T, TR> aggregate Returns Type Description Sql.IAggregateFunction <T, TR> Type Parameters Name Description T TR | Improve this Doc View Source OrderBy<T, TR, TKey>(Sql.IAggregateFunctionNotOrdered<T, TR>, Expression<Func<T, TKey>>) Declaration public static Sql.IAggregateFunctionOrdered<T, TR> OrderBy<T, TR, TKey>(this Sql.IAggregateFunctionNotOrdered<T, TR> aggregate, Expression<Func<T, TKey>> expr) Parameters Type Name Description Sql.IAggregateFunctionNotOrdered <T, TR> aggregate Expression < Func <T, TKey>> expr Returns Type Description Sql.IAggregateFunctionOrdered <T, TR> Type Parameters Name Description T TR TKey | Improve this Doc View Source OrderByDescending<T, TR>(Sql.IAggregateFunctionNotOrdered<T, TR>) Declaration public static Sql.IAggregateFunction<T, TR> OrderByDescending<T, TR>(this Sql.IAggregateFunctionNotOrdered<T, TR> aggregate) Parameters Type Name Description Sql.IAggregateFunctionNotOrdered <T, TR> aggregate Returns Type Description Sql.IAggregateFunction <T, TR> Type Parameters Name Description T TR | Improve this Doc View Source OrderByDescending<T, TR, TKey>(Sql.IAggregateFunctionNotOrdered<T, TR>, Expression<Func<T, TKey>>) Declaration public static Sql.IAggregateFunctionOrdered<T, TR> OrderByDescending<T, TR, TKey>(this Sql.IAggregateFunctionNotOrdered<T, TR> aggregate, Expression<Func<T, TKey>> expr) Parameters Type Name Description Sql.IAggregateFunctionNotOrdered <T, TR> aggregate Expression < Func <T, TKey>> expr Returns Type Description Sql.IAggregateFunctionOrdered <T, TR> Type Parameters Name Description T TR TKey | Improve this Doc View Source ThenBy<T, TR, TKey>(Sql.IAggregateFunctionOrdered<T, TR>, Expression<Func<T, TKey>>) Declaration public static Sql.IAggregateFunctionOrdered<T, TR> ThenBy<T, TR, TKey>(this Sql.IAggregateFunctionOrdered<T, TR> aggregate, Expression<Func<T, TKey>> expr) Parameters Type Name Description Sql.IAggregateFunctionOrdered <T, TR> aggregate Expression < Func <T, TKey>> expr Returns Type Description Sql.IAggregateFunctionOrdered <T, TR> Type Parameters Name Description T TR TKey | Improve this Doc View Source ThenByDescending<T, TR, TKey>(Sql.IAggregateFunctionOrdered<T, TR>, Expression<Func<T, TKey>>) Declaration public static Sql.IAggregateFunctionOrdered<T, TR> ThenByDescending<T, TR, TKey>(this Sql.IAggregateFunctionOrdered<T, TR> aggregate, Expression<Func<T, TKey>> expr) Parameters Type Name Description Sql.IAggregateFunctionOrdered <T, TR> aggregate Expression < Func <T, TKey>> expr Returns Type Description Sql.IAggregateFunctionOrdered <T, TR> Type Parameters Name Description T TR TKey | Improve this Doc View Source ToValue<T, TR>(Sql.IAggregateFunction<T, TR>) Declaration public static TR ToValue<T, TR>(this Sql.IAggregateFunction<T, TR> aggregate) Parameters Type Name Description Sql.IAggregateFunction <T, TR> aggregate Returns Type Description TR Type Parameters Name Description T TR"
  },
  "api/LinqToDB.TableExtensions.html": {
    "href": "api/LinqToDB.TableExtensions.html",
    "title": "Class TableExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class TableExtensions Contains extension methods for LINQ queries. Inheritance System.Object TableExtensions Namespace : LinqToDB Assembly : linq2db.dll Syntax public static class TableExtensions : object Methods | Improve this Doc View Source IsTemporary<T>(ITable<T>) Overrides IsTemporary flag for the current table. This call will have effect only for databases that support temporary tables. Supported by: DB2, Oracle, PostgreSQL, Informix, SQL Server, Sybase ASE. Declaration public static ITable<T> IsTemporary<T>(this ITable<T> table) Parameters Type Name Description ITable <T> table Table-like query source. Returns Type Description ITable <T> Table-like query source with new owner/schema name. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source IsTemporary<T>(ITable<T>, Boolean) Overrides IsTemporary flag for the current table. This call will have effect only for databases that support temporary tables. Supported by: DB2, Oracle, PostgreSQL, Informix, SQL Server, Sybase ASE. Declaration public static ITable<T> IsTemporary<T>(this ITable<T> table, bool isTemporary) Parameters Type Name Description ITable <T> table Table-like query source. System.Boolean isTemporary If true, the current tables will handled as a temporary table. Returns Type Description ITable <T> Table-like query source with new owner/schema name. Type Parameters Name Description T Table record mapping class. | Improve this Doc View Source TableOptions<T>(ITable<T>, TableOptions) Overrides TableOptions value for the current table. This call will have effect only for databases that support the options. Declaration public static ITable<T> TableOptions<T>(this ITable<T> table, TableOptions options) Parameters Type Name Description ITable <T> table Table-like query source. TableOptions options TableOptions<T>(ITable<T>, TableOptions) value. Returns Type Description ITable <T> Table-like query source with new owner/schema name. Type Parameters Name Description T Table record mapping class."
  },
  "api/LinqToDB.TableOptions.html": {
    "href": "api/LinqToDB.TableOptions.html",
    "title": "Enum TableOptions | Linq To DB (aka linq2db)",
    "keywords": "Enum TableOptions Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum TableOptions : int Fields Name Description CheckExistence CreateIfNotExists IF NOT EXISTS option of the CREATE statement. This option will have effect only for databases that support the option. Supported by: DB2, Firebird, Informix, MySql, Oracle, PostgreSQL, SQLite, SQL Server, Sybase ASE. DropIfExists IF EXISTS option of the DROP statement. This option will have effect only for databases that support the option. Supported by: DB2, Firebird, Informix, MySql, Oracle, PostgreSQL, SQLite, SQL Server, Sybase ASE. IsGlobalTemporaryData Table data is global temporary (table data is visible from other sessions). This option will have effect only for databases that support temporary tables. Supported by: DB2, Firebird, Oracle, SAP Hana, SQL Server, Sybase ASE. IsGlobalTemporaryStructure Table is global temporary (table structure is visible from other sessions). This option will have effect only for databases that support temporary tables. Supported by: DB2, Firebird, Oracle, SAP Hana, SQL Server, Sybase ASE. IsLocalTemporaryData Table data is temporary (table data is not visible to other sessions). This option will have effect only for databases that support temporary tables. Supported by: DB2, Informix, MySql, PostgreSQL, SQLite, SAP Hana, SQL Server, Sybase ASE. IsLocalTemporaryStructure Table is temporary (table structure is not visible to other sessions). This option will have effect only for databases that support temporary tables. Supported by: DB2, Informix, MySql, PostgreSQL, SQLite, SAP Hana, SQL Server, Sybase ASE. IsTemporary Table is temporary (not visible to other sessions). This option will have effect only for databases that support temporary tables. If database supports both global and local temporary tables, local table will be used. Supported by: DB2, Firebird, Informix, MySql, Oracle, PostgreSQL, SQLite, SQL Server, SAP Hana, Sybase ASE. IsTemporaryOptionSet IsTransactionTemporaryData Table data is temporary (table data is transaction level visible). This option will have effect only for databases that support temporary tables. Supported by: Firebird, Oracle, PostgreSQL. None NotSet Extension Methods Map.DeepCopy<TableOptions>() LinqExtensions.IsSet() LinqExtensions.IsTemporaryOptionSet() LinqExtensions.HasCreateIfNotExists() LinqExtensions.HasDropIfExists() LinqExtensions.HasIsTemporary() LinqExtensions.HasIsLocalTemporaryStructure() LinqExtensions.HasIsGlobalTemporaryStructure() LinqExtensions.HasIsLocalTemporaryData() LinqExtensions.HasIsGlobalTemporaryData() LinqExtensions.HasIsTransactionTemporaryData() LinqExtensions.Or(TableOptions) Sql.IsDistinctFrom<TableOptions>(TableOptions) Sql.IsDistinctFrom<TableOptions>(Nullable<TableOptions>) Sql.IsNotDistinctFrom<TableOptions>(TableOptions) Sql.IsNotDistinctFrom<TableOptions>(Nullable<TableOptions>) SqlExtensions.In<TableOptions>(IEnumerable<TableOptions>) SqlExtensions.In<TableOptions>(IQueryable<TableOptions>) SqlExtensions.In<TableOptions>(TableOptions[]) SqlExtensions.In<TableOptions>(TableOptions, TableOptions) SqlExtensions.In<TableOptions>(TableOptions, TableOptions, TableOptions) SqlExtensions.NotIn<TableOptions>(IEnumerable<TableOptions>) SqlExtensions.NotIn<TableOptions>(IQueryable<TableOptions>) SqlExtensions.NotIn<TableOptions>(TableOptions[]) SqlExtensions.NotIn<TableOptions>(TableOptions, TableOptions) SqlExtensions.NotIn<TableOptions>(TableOptions, TableOptions, TableOptions)"
  },
  "api/LinqToDB.TakeHints.html": {
    "href": "api/LinqToDB.TakeHints.html",
    "title": "Enum TakeHints | Linq To DB (aka linq2db)",
    "keywords": "Enum TakeHints Hints for Take . Namespace : LinqToDB Assembly : linq2db.dll Syntax public enum TakeHints : int Fields Name Description Percent SELECT TOP 10 PERCENT. WithTies SELECT TOP 10 WITH TIES. Extension Methods Map.DeepCopy<TakeHints>() Sql.IsDistinctFrom<TakeHints>(TakeHints) Sql.IsDistinctFrom<TakeHints>(Nullable<TakeHints>) Sql.IsNotDistinctFrom<TakeHints>(TakeHints) Sql.IsNotDistinctFrom<TakeHints>(Nullable<TakeHints>) SqlExtensions.In<TakeHints>(IEnumerable<TakeHints>) SqlExtensions.In<TakeHints>(IQueryable<TakeHints>) SqlExtensions.In<TakeHints>(TakeHints[]) SqlExtensions.In<TakeHints>(TakeHints, TakeHints) SqlExtensions.In<TakeHints>(TakeHints, TakeHints, TakeHints) SqlExtensions.NotIn<TakeHints>(IEnumerable<TakeHints>) SqlExtensions.NotIn<TakeHints>(IQueryable<TakeHints>) SqlExtensions.NotIn<TakeHints>(TakeHints[]) SqlExtensions.NotIn<TakeHints>(TakeHints, TakeHints) SqlExtensions.NotIn<TakeHints>(TakeHints, TakeHints, TakeHints)"
  },
  "api/LinqToDB.TempTable-1.html": {
    "href": "api/LinqToDB.TempTable-1.html",
    "title": "Class TempTable<T> | Linq To DB (aka linq2db)",
    "keywords": "Class TempTable<T> Temporary table. Temporary table is a table, created when you create instance of this class and deleted when you dispose it. It uses regular tables even if underlying database supports temporary tables concept. Inheritance System.Object TempTable<T> Implements ITable <T> IExpressionQuery <T> IOrderedQueryable <T> IQueryProviderAsync IQueryProvider IExpressionQuery ITableMutable <T> IDisposable IAsyncDisposable Namespace : LinqToDB Assembly : linq2db.dll Syntax public class TempTable<T> : object, ITable<T>, IExpressionQuery<T>, IQueryProviderAsync, IExpressionQuery, ITableMutable<T>, IAsyncDisposable Type Parameters Name Description T Table record mapping class. Constructors | Improve this Doc View Source TempTable(IDataContext, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Creates new temporary table and populate it using BulkCopy. Declaration public TempTable(IDataContext db, IEnumerable<T> items, BulkCopyOptions options = null, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext db Database connection instance. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. If not specified, value from mapping will be used. | Improve this Doc View Source TempTable(IDataContext, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Action<ITable<T>>>, Nullable<String>, TableOptions) Creates new temporary table and populate it using data from provided query. Declaration public TempTable(IDataContext db, IQueryable<T> items, string? tableName = null, string? databaseName = null, string? schemaName = null, Action<ITable<T>>? action = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext db Database connection instance. IQueryable <T> items Query to get records to populate created table with initial data. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Action < ITable <T>>> action Optional action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. If not specified, value from mapping will be used. | Improve this Doc View Source TempTable(IDataContext, Nullable<String>, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Creates new temporary table and populate it using BulkCopy. Declaration public TempTable(IDataContext db, string? tableName, IEnumerable<T> items, BulkCopyOptions options = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. If not specified, value from mapping will be used. | Improve this Doc View Source TempTable(IDataContext, Nullable<String>, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<Action<ITable<T>>>, Nullable<String>, TableOptions) Creates new temporary table and populate it using data from provided query. Declaration public TempTable(IDataContext db, string? tableName, IQueryable<T> items, string? databaseName = null, string? schemaName = null, Action<ITable<T>>? action = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. IQueryable <T> items Query to get records to populate created table with initial data. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Action < ITable <T>>> action Optional action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. If not specified, value from mapping will be used. | Improve this Doc View Source TempTable(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions) Creates new temporary table. Declaration public TempTable(IDataContext db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0) Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. If not specified, value from mapping will be used. | Improve this Doc View Source TempTable(ITable<T>) Configures a temporary table that will be dropped when this instance is disposed Declaration protected TempTable(ITable<T> table) Parameters Type Name Description ITable <T> table Table instance. Fields | Improve this Doc View Source TotalCopied Gets total number of records, inserted into table using BulkCopy. Declaration public long TotalCopied Field Value Type Description System.Int64 Properties | Improve this Doc View Source DatabaseName Declaration public string? DatabaseName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source DataContext Gets data connection, associated with current table. Declaration public IDataContext DataContext { get; } Property Value Type Description IDataContext | Improve this Doc View Source SchemaName Declaration public string? SchemaName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source ServerName Declaration public string? ServerName { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source TableName Declaration public string TableName { get; } Property Value Type Description System.String | Improve this Doc View Source TableOptions Declaration public TableOptions TableOptions { get; } Property Value Type Description TableOptions Methods | Improve this Doc View Source Copy(IEnumerable<T>, BulkCopyOptions) Insert new records into table using BulkCopy. Declaration public long Copy(IEnumerable<T> items, BulkCopyOptions options = null) Parameters Type Name Description IEnumerable <T> items Records to insert into table. BulkCopyOptions options Optional BulkCopy options. Returns Type Description System.Int64 Number of records, inserted into table. | Improve this Doc View Source CopyAsync(IEnumerable<T>, BulkCopyOptions, CancellationToken) Insert new records into table using BulkCopy. Declaration public async Task<long> CopyAsync(IEnumerable<T> items, BulkCopyOptions options = null, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable <T> items Records to insert into table. BulkCopyOptions options Optional BulkCopy options. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < System.Int64 > Number of records, inserted into table. | Improve this Doc View Source CreateAsync(IDataContext, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table and populate it using BulkCopy. Declaration public static Task<TempTable<T>> CreateAsync(IDataContext db, IEnumerable<T> items, BulkCopyOptions options = null, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) Parameters Type Name Description IDataContext db Database connection instance. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. If not specified, value from mapping will be used. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> | Improve this Doc View Source CreateAsync(IDataContext, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<Func<ITable<T>, Task>>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table and populate it using data from provided query. Declaration public static async Task<TempTable<T>> CreateAsync(IDataContext db, IQueryable<T> items, string? tableName = null, string? databaseName = null, string? schemaName = null, Func<ITable<T>, Task>? action = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) Parameters Type Name Description IDataContext db Database connection instance. IQueryable <T> items Query to get records to populate created table with initial data. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Func < ITable <T>, Task >> action Optional asynchronous action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. If not specified, value from mapping will be used. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> | Improve this Doc View Source CreateAsync(IDataContext, Nullable<String>, IEnumerable<T>, BulkCopyOptions, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table and populate it using BulkCopy. Declaration public static async Task<TempTable<T>> CreateAsync(IDataContext db, string? tableName, IEnumerable<T> items, BulkCopyOptions options = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. IEnumerable <T> items Initial records to insert into created table. BulkCopyOptions options Optional BulkCopy options. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. If not specified, value from mapping will be used. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> | Improve this Doc View Source CreateAsync(IDataContext, Nullable<String>, IQueryable<T>, Nullable<String>, Nullable<String>, Nullable<Func<ITable<T>, Task>>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table and populate it using data from provided query. Declaration public static Task<TempTable<T>> CreateAsync(IDataContext db, string? tableName, IQueryable<T> items, string? databaseName = null, string? schemaName = null, Func<ITable<T>, Task>? action = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. IQueryable <T> items Query to get records to populate created table with initial data. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < Func < ITable <T>, Task >> action Optional asynchronous action that will be executed after table creation but before it populated with data from items . System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. If not specified, value from mapping will be used. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> | Improve this Doc View Source CreateAsync(IDataContext, Nullable<String>, Nullable<String>, Nullable<String>, Nullable<String>, TableOptions, CancellationToken) Creates new temporary table. Declaration public static async Task<TempTable<T>> CreateAsync(IDataContext db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, TableOptions tableOptions = (TableOptions)0, CancellationToken cancellationToken = null) Parameters Type Name Description IDataContext db Database connection instance. System.Nullable < System.String > tableName Optional name of temporary table. If not specified, value from mapping will be used. System.Nullable < System.String > databaseName Optional name of table's database. If not specified, value from mapping will be used. System.Nullable < System.String > schemaName Optional name of table schema/owner. If not specified, value from mapping will be used. System.Nullable < System.String > serverName Optional name of linked server. If not specified, value from mapping will be used. TableOptions tableOptions Optional Table options. If not specified, value from mapping will be used. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < TempTable <T>> | Improve this Doc View Source Dispose() Declaration public virtual void Dispose() | Improve this Doc View Source DisposeAsync() Declaration public virtual Task DisposeAsync() Returns Type Description Task | Improve this Doc View Source GetTableName() Declaration public string GetTableName() Returns Type Description System.String | Improve this Doc View Source Insert(IQueryable<T>) Insert data into table using records, returned by provided query. Declaration public long Insert(IQueryable<T> items) Parameters Type Name Description IQueryable <T> items Query with records to insert into temporary table. Returns Type Description System.Int64 Number of records, inserted into table. | Improve this Doc View Source InsertAsync(IQueryable<T>, CancellationToken) Insert data into table using records, returned by provided query. Declaration public async Task<long> InsertAsync(IQueryable<T> items, CancellationToken cancellationToken = null) Parameters Type Name Description IQueryable <T> items Query with records to insert into temporary table. CancellationToken cancellationToken Asynchronous operation cancellation token. Returns Type Description Task < System.Int64 > Number of records, inserted into table. Explicit Interface Implementations | Improve this Doc View Source IQueryProviderAsync.ExecuteAsync<TResult>(Expression, CancellationToken) Declaration Task<TResult> IQueryProviderAsync.ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) Parameters Type Name Description Expression expression CancellationToken cancellationToken Returns Type Description Task <TResult> Type Parameters Name Description TResult | Improve this Doc View Source IQueryProviderAsync.ExecuteAsyncEnumerable<TResult>(Expression, CancellationToken) Declaration Task<IAsyncEnumerable<TResult>> IQueryProviderAsync.ExecuteAsyncEnumerable<TResult>(Expression expression, CancellationToken cancellationToken) Parameters Type Name Description Expression expression CancellationToken cancellationToken Returns Type Description Task < IAsyncEnumerable <TResult>> Type Parameters Name Description TResult | Improve this Doc View Source ITableMutable<T>.ChangeDatabaseName(Nullable<String>) Declaration ITable<T> ITableMutable<T>.ChangeDatabaseName(string? databaseName) Parameters Type Name Description System.Nullable < System.String > databaseName Returns Type Description ITable <T> | Improve this Doc View Source ITableMutable<T>.ChangeSchemaName(Nullable<String>) Declaration ITable<T> ITableMutable<T>.ChangeSchemaName(string? schemaName) Parameters Type Name Description System.Nullable < System.String > schemaName Returns Type Description ITable <T> | Improve this Doc View Source ITableMutable<T>.ChangeServerName(Nullable<String>) Declaration ITable<T> ITableMutable<T>.ChangeServerName(string? serverName) Parameters Type Name Description System.Nullable < System.String > serverName Returns Type Description ITable <T> | Improve this Doc View Source ITableMutable<T>.ChangeTableName(String) Declaration ITable<T> ITableMutable<T>.ChangeTableName(string tableName) Parameters Type Name Description System.String tableName Returns Type Description ITable <T> | Improve this Doc View Source ITableMutable<T>.ChangeTableOptions(TableOptions) Declaration ITable<T> ITableMutable<T>.ChangeTableOptions(TableOptions options) Parameters Type Name Description TableOptions options Returns Type Description ITable <T> | Improve this Doc View Source IExpressionQuery.Expression Declaration Expression IExpressionQuery.Expression { get; } Returns Type Description Expression | Improve this Doc View Source IExpressionQuery.SqlText Declaration string IExpressionQuery.SqlText { get; } Returns Type Description System.String | Improve this Doc View Source IExpressionQuery<T>.Expression Declaration Expression IExpressionQuery<T>.Expression { get; set; } Returns Type Description Expression Implements ITable<T> IExpressionQuery<T> IOrderedQueryable<> IQueryProviderAsync IQueryProvider IExpressionQuery ITableMutable<T> IDisposable IAsyncDisposable Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Tools.Comparers.ComparerBuilder.html": {
    "href": "api/LinqToDB.Tools.Comparers.ComparerBuilder.html",
    "title": "Class ComparerBuilder | Linq To DB (aka linq2db)",
    "keywords": "Class ComparerBuilder Builds comparer functions and comparers. Inheritance System.Object ComparerBuilder Namespace : LinqToDB.Tools.Comparers Assembly : linq2db.Tools.dll Syntax public static class ComparerBuilder : object Methods | Improve this Doc View Source GetEqualityComparer(Type) Declaration public static IEqualityComparer GetEqualityComparer(Type type) Parameters Type Name Description Type type Returns Type Description IEqualityComparer | Improve this Doc View Source GetEqualityComparer<T>() Returns implementations of the generic interface based on object public members equality. Declaration public static IEqualityComparer<T> GetEqualityComparer<T>() Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of objects to compare. | Improve this Doc View Source GetEqualityComparer<T>(Expression<Func<T, Nullable<Object>>>[]) Returns implementations of the generic interface based on provided object public members equality. Declaration public static IEqualityComparer<T> GetEqualityComparer<T>(params Expression<Func<T, object?>>[] membersToCompare) Parameters Type Name Description Expression < Func <T, System.Nullable < System.Object >>>[] membersToCompare Members to compare. Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of objects to compare. | Improve this Doc View Source GetEqualityComparer<T>(Func<MemberAccessor, Boolean>) Returns implementations of the generic interface based on provided object public members equality. Declaration public static IEqualityComparer<T> GetEqualityComparer<T>(Func<MemberAccessor, bool> memberPredicate) Parameters Type Name Description Func < MemberAccessor , System.Boolean > memberPredicate A function to filter members to compare. Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of objects to compare. | Improve this Doc View Source GetEqualityComparer<T>(Func<TypeAccessor<T>, IEnumerable<MemberAccessor>>) Returns implementations of the generic interface based on provided object public members equality. Declaration public static IEqualityComparer<T> GetEqualityComparer<T>(Func<TypeAccessor<T>, IEnumerable<MemberAccessor>> membersToCompare) Parameters Type Name Description Func < TypeAccessor <T>, IEnumerable < MemberAccessor >> membersToCompare A function that returns members to compare. Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of objects to compare. | Improve this Doc View Source GetEqualityComparer<T>(IEnumerable<T>) Returns implementations of the generic interface based on object public members equality. Declaration public static IEqualityComparer<T> GetEqualityComparer<T>(IEnumerable<T> ignored) Parameters Type Name Description IEnumerable <T> ignored Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of objects to compare. | Improve this Doc View Source GetEqualsFunc<T>() Returns GetEqualsFunc function for type T to compare. Declaration public static Func<T, T, bool> GetEqualsFunc<T>() Returns Type Description Func <T, T, System.Boolean > GetEqualsFunc function. Type Parameters Name Description T The type of objects to compare. | Improve this Doc View Source GetEqualsFunc<T>(Expression<Func<T, Nullable<Object>>>[]) Returns GetEqualsFunc function for provided members for type T to compare. Declaration public static Func<T, T, bool> GetEqualsFunc<T>(params Expression<Func<T, object?>>[] members) Parameters Type Name Description Expression < Func <T, System.Nullable < System.Object >>>[] members Members to compare. Returns Type Description Func <T, T, System.Boolean > GetEqualsFunc function. Type Parameters Name Description T The type of objects to compare. | Improve this Doc View Source GetEqualsFunc<T>(IEnumerable<MemberAccessor>) Returns GetEqualsFunc function for provided members for type T to compare. Declaration public static Func<T, T, bool> GetEqualsFunc<T>(IEnumerable<MemberAccessor> members) Parameters Type Name Description IEnumerable < MemberAccessor > members Members to compare. Returns Type Description Func <T, T, System.Boolean > GetEqualsFunc function. Type Parameters Name Description T The type of objects to compare. | Improve this Doc View Source GetGetHashCodeFunc<T>() Returns GetHashCode function for type T to compare. Declaration public static Func<T, int> GetGetHashCodeFunc<T>() Returns Type Description Func <T, System.Int32 > GetHashCode function. Type Parameters Name Description T The type of objects to compare. | Improve this Doc View Source GetGetHashCodeFunc<T>(Expression<Func<T, Nullable<Object>>>[]) Returns GetHashCode function for provided members for type T to compare. Declaration public static Func<T, int> GetGetHashCodeFunc<T>(params Expression<Func<T, object?>>[] members) Parameters Type Name Description Expression < Func <T, System.Nullable < System.Object >>>[] members Members to compare. Returns Type Description Func <T, System.Int32 > GetHashCode function. Type Parameters Name Description T The type of objects to compare. | Improve this Doc View Source GetGetHashCodeFunc<T>(IEnumerable<MemberAccessor>) Returns GetHashCode function for provided members for type T to compare. Declaration public static Func<T, int> GetGetHashCodeFunc<T>(IEnumerable<MemberAccessor> members) Parameters Type Name Description IEnumerable < MemberAccessor > members Members to compare. Returns Type Description Func <T, System.Int32 > GetHashCode function. Type Parameters Name Description T The type of objects to compare."
  },
  "api/LinqToDB.Tools.Comparers.html": {
    "href": "api/LinqToDB.Tools.Comparers.html",
    "title": "Namespace LinqToDB.Tools.Comparers | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Tools.Comparers Classes ComparerBuilder Builds comparer functions and comparers. IgnoreComparisonAttribute"
  },
  "api/LinqToDB.Tools.Comparers.IgnoreComparisonAttribute.html": {
    "href": "api/LinqToDB.Tools.Comparers.IgnoreComparisonAttribute.html",
    "title": "Class IgnoreComparisonAttribute | Linq To DB (aka linq2db)",
    "keywords": "Class IgnoreComparisonAttribute Inheritance System.Object IgnoreComparisonAttribute Namespace : LinqToDB.Tools.Comparers Assembly : linq2db.Tools.dll Syntax public class IgnoreComparisonAttribute : Attribute Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Tools.DataExtensions.html": {
    "href": "api/LinqToDB.Tools.DataExtensions.html",
    "title": "Class DataExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class DataExtensions Inheritance System.Object DataExtensions Namespace : LinqToDB.Tools Assembly : linq2db.dll Syntax public static class DataExtensions : object Methods | Improve this Doc View Source RetrieveIdentity<T>(IEnumerable<T>, DataConnection, Boolean, Boolean) Initializes source columns, marked with IsIdentity or IdentityAttribute with identity values: Declaration public static IEnumerable<T> RetrieveIdentity<T>(this IEnumerable<T> source, DataConnection context, bool useSequenceName = true, bool useIdentity = false) Parameters Type Name Description IEnumerable <T> source Ordered list of entities to initialize. DataConnection context Data connection to use to retrieve sequence values of max used value for column. System.Boolean useSequenceName Enables identity values retrieval from sequence for columns with sequence name specified in mapping using SequenceNameAttribute . Implemented for Oracle and PostgreSQL. System.Boolean useIdentity Enables identity values retrieval from table with identity column. Implemented for SQL Server 2005+. Returns Type Description IEnumerable <T> Returns new collection of identity fields initialized or source if entity had no identity columns. Type Parameters Name Description T Entity type."
  },
  "api/LinqToDB.Tools.EntityServices.EntityMap-1.html": {
    "href": "api/LinqToDB.Tools.EntityServices.EntityMap-1.html",
    "title": "Class EntityMap<T> | Linq To DB (aka linq2db)",
    "keywords": "Class EntityMap<T> Inheritance System.Object EntityMap<T> Namespace : LinqToDB.Tools.EntityServices Assembly : linq2db.Tools.dll Syntax public class EntityMap<T> : object where T : class Type Parameters Name Description T Constructors | Improve this Doc View Source EntityMap(IDataContext) Declaration public EntityMap(IDataContext dataContext) Parameters Type Name Description IDataContext dataContext Properties | Improve this Doc View Source Entities Declaration public IDictionary<T, EntityMapEntry<T>> Entities { get; } Property Value Type Description IDictionary <T, EntityMapEntry <T>> Methods | Improve this Doc View Source GetEntity(IDataContext, Object) Declaration public T GetEntity(IDataContext context, object key) Parameters Type Name Description IDataContext context System.Object key Returns Type Description T Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Tools.EntityServices.EntityMapEntry-1.html": {
    "href": "api/LinqToDB.Tools.EntityServices.EntityMapEntry-1.html",
    "title": "Class EntityMapEntry<T> | Linq To DB (aka linq2db)",
    "keywords": "Class EntityMapEntry<T> Inheritance System.Object EntityMapEntry<T> Namespace : LinqToDB.Tools.EntityServices Assembly : linq2db.Tools.dll Syntax public class EntityMapEntry<T> : object Type Parameters Name Description T Properties | Improve this Doc View Source CacheCount Declaration public int CacheCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DBCount Declaration public int DBCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Entity Declaration public T Entity { get; } Property Value Type Description T Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Tools.EntityServices.html": {
    "href": "api/LinqToDB.Tools.EntityServices.html",
    "title": "Namespace LinqToDB.Tools.EntityServices | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Tools.EntityServices Classes EntityMap<T> EntityMapEntry<T> IdentityMap"
  },
  "api/LinqToDB.Tools.EntityServices.IdentityMap.html": {
    "href": "api/LinqToDB.Tools.EntityServices.IdentityMap.html",
    "title": "Class IdentityMap | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityMap Inheritance System.Object IdentityMap Namespace : LinqToDB.Tools.EntityServices Assembly : linq2db.Tools.dll Syntax public class IdentityMap : IDisposable Constructors | Improve this Doc View Source IdentityMap(IDataContext) Declaration public IdentityMap(IDataContext dataContext) Parameters Type Name Description IDataContext dataContext Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetEntities(Type) Declaration public IEnumerable GetEntities(Type entityType) Parameters Type Name Description Type entityType Returns Type Description IEnumerable | Improve this Doc View Source GetEntities<T>() Declaration public IEnumerable<T> GetEntities<T>() where T : class Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source GetEntity<T>(Object) Declaration public T GetEntity<T>(object key) where T : class, new() Parameters Type Name Description System.Object key Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetEntityEntries<T>() Declaration public IEnumerable<EntityMapEntry<T>> GetEntityEntries<T>() where T : class Returns Type Description IEnumerable < EntityMapEntry <T>> Type Parameters Name Description T | Improve this Doc View Source GetEntityMap<T>() Declaration public EntityMap<T> GetEntityMap<T>() where T : class Returns Type Description EntityMap <T> Type Parameters Name Description T Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Tools.EnumerableExtensions.html": {
    "href": "api/LinqToDB.Tools.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class EnumerableExtensions Inheritance System.Object EnumerableExtensions Namespace : LinqToDB.Tools Assembly : linq2db.Tools.dll Syntax public static class EnumerableExtensions : object Methods | Improve this Doc View Source ToDiagnosticString<T>(IEnumerable<T>, StringBuilder, Boolean) Returns well formatted text. Declaration public static StringBuilder ToDiagnosticString<T>(this IEnumerable<T> source, StringBuilder stringBuilder, bool addTableHeader = true) Parameters Type Name Description IEnumerable <T> source Source to process. StringBuilder stringBuilder instance. System.Boolean addTableHeader if true (default), adds table header. Returns Type Description StringBuilder Formatted text. Type Parameters Name Description T | Improve this Doc View Source ToDiagnosticString<T>(IEnumerable<T>, Nullable<String>, Boolean) Returns well formatted text. Declaration public static string ToDiagnosticString<T>(this IEnumerable<T> source, string? header = null, bool addTableHeader = true) Parameters Type Name Description IEnumerable <T> source Source to process. System.Nullable < System.String > header Optional header text. System.Boolean addTableHeader if true (default), adds table header. Returns Type Description System.String Formatted text. Type Parameters Name Description T"
  },
  "api/LinqToDB.Tools.html": {
    "href": "api/LinqToDB.Tools.html",
    "title": "Namespace LinqToDB.Tools | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Tools Classes DataExtensions EnumerableExtensions MappingSchemaExtensions SqlExtensions"
  },
  "api/LinqToDB.Tools.Mapper.html": {
    "href": "api/LinqToDB.Tools.Mapper.html",
    "title": "Namespace LinqToDB.Tools.Mapper | Linq To DB (aka linq2db)",
    "keywords": "Namespace LinqToDB.Tools.Mapper Classes Map Mapper helper class. Mapper<TFrom, TTo> Maps an object of TFrom type to an object of TTo type. MapperBuilder<TFrom, TTo> Builds a mapper that maps an object of TFrom type to an object of TTo type. MemberMapperInfo Interfaces IMapperBuilder Builds a mapper that maps an object of TFrom type to an object of TTo type."
  },
  "api/LinqToDB.Tools.Mapper.IMapperBuilder.html": {
    "href": "api/LinqToDB.Tools.Mapper.IMapperBuilder.html",
    "title": "Interface IMapperBuilder | Linq To DB (aka linq2db)",
    "keywords": "Interface IMapperBuilder Builds a mapper that maps an object of TFrom type to an object of TTo type. Namespace : LinqToDB.Tools.Mapper Assembly : linq2db.Tools.dll Syntax public interface IMapperBuilder Properties | Improve this Doc View Source DeepCopy If true, performs deep copy. if default (null), the GetMapperLambdaExpression() method does not do deep copy, however the GetMapperLambdaExpressionEx() method does. Declaration bool? DeepCopy { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source FromMappingDictionary Defines member name mapping for source types. Declaration Dictionary<Type, Dictionary<string, string>>? FromMappingDictionary { get; set; } Property Value Type Description System.Nullable < Dictionary < Type , Dictionary < System.String , System.String >>> | Improve this Doc View Source FromType Type to map from. Declaration Type FromType { get; } Property Value Type Description Type | Improve this Doc View Source MappingSchema Mapping schema. Declaration MappingSchema MappingSchema { get; set; } Property Value Type Description MappingSchema | Improve this Doc View Source MemberMappers Member mappers. Declaration List<MemberMapperInfo>? MemberMappers { get; set; } Property Value Type Description System.Nullable < List < MemberMapperInfo >> | Improve this Doc View Source ProcessCrossReferences If true, processes object cross references. if default (null), the GetMapperLambdaExpression() method does not process cross references, however the GetMapperLambdaExpressionEx() method does. Declaration bool? ProcessCrossReferences { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source ToMappingDictionary Defines member name mapping for destination types. Declaration Dictionary<Type, Dictionary<string, string>>? ToMappingDictionary { get; set; } Property Value Type Description System.Nullable < Dictionary < Type , Dictionary < System.String , System.String >>> | Improve this Doc View Source ToMemberFilter Filters target members to map. Declaration Func<MemberAccessor, bool> ToMemberFilter { get; set; } Property Value Type Description Func < MemberAccessor , System.Boolean > | Improve this Doc View Source ToType Type to map to. Declaration Type ToType { get; } Property Value Type Description Type Methods | Improve this Doc View Source GetMapperLambdaExpression() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Returned expression is compatible to IQueryable. Declaration LambdaExpression GetMapperLambdaExpression() Returns Type Description LambdaExpression Mapping expression. | Improve this Doc View Source GetMapperLambdaExpressionEx() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Declaration LambdaExpression GetMapperLambdaExpressionEx() Returns Type Description LambdaExpression Mapping expression. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Tools.Mapper.Map.html": {
    "href": "api/LinqToDB.Tools.Mapper.Map.html",
    "title": "Class Map | Linq To DB (aka linq2db)",
    "keywords": "Class Map Mapper helper class. Inheritance System.Object Map Namespace : LinqToDB.Tools.Mapper Assembly : linq2db.Tools.dll Syntax public static class Map : object Examples This example shows how to map one object to another. Methods | Improve this Doc View Source DeepCopy<T>(T) Performs deep copy. Declaration public static T DeepCopy<T>(this T obj) Parameters Type Name Description T obj An object to copy. Returns Type Description T Created object. Type Parameters Name Description T Type of object. | Improve this Doc View Source GetMapper<TFrom, TTo>() Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public static Mapper<TFrom, TTo> GetMapper<TFrom, TTo>() Returns Type Description Mapper <TFrom, TTo> Mapping expression. Type Parameters Name Description TFrom Type to map from. TTo Type to map to. | Improve this Doc View Source GetMapper<TFrom, TTo>(Func<MapperBuilder<TFrom, TTo>, MapperBuilder<TFrom, TTo>>) Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public static Mapper<TFrom, TTo> GetMapper<TFrom, TTo>(Func<MapperBuilder<TFrom, TTo>, MapperBuilder<TFrom, TTo>> setter) Parameters Type Name Description Func < MapperBuilder <TFrom, TTo>, MapperBuilder <TFrom, TTo>> setter MapperBuilder parameter setter. Returns Type Description Mapper <TFrom, TTo> Mapping expression. Type Parameters Name Description TFrom Type to map from. TTo Type to map to."
  },
  "api/LinqToDB.Tools.Mapper.Mapper-2.html": {
    "href": "api/LinqToDB.Tools.Mapper.Mapper-2.html",
    "title": "Class Mapper<TFrom, TTo> | Linq To DB (aka linq2db)",
    "keywords": "Class Mapper<TFrom, TTo> Maps an object of TFrom type to an object of TTo type. Inheritance System.Object Mapper<TFrom, TTo> Namespace : LinqToDB.Tools.Mapper Assembly : linq2db.Tools.dll Syntax public class Mapper<TFrom, TTo> : object Type Parameters Name Description TFrom Type to map from. TTo Type to map to. Examples This example shows how to map one object to another. Methods | Improve this Doc View Source GetMapper() Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public Func<TFrom, TTo> GetMapper() Returns Type Description Func <TFrom, TTo> Mapping expression. | Improve this Doc View Source GetMapperEx() Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public Func<TFrom, TTo, IDictionary<object, object>?, TTo> GetMapperEx() Returns Type Description Func <TFrom, TTo, System.Nullable < IDictionary < System.Object , System.Object >>, TTo> Mapping expression. | Improve this Doc View Source GetMapperExpression() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Returned expression is compatible to IQueryable. Declaration public Expression<Func<TFrom, TTo>> GetMapperExpression() Returns Type Description Expression < Func <TFrom, TTo>> Mapping expression. | Improve this Doc View Source GetMapperExpressionEx() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Declaration public Expression<Func<TFrom, TTo, IDictionary<object, object>?, TTo>> GetMapperExpressionEx() Returns Type Description Expression < Func <TFrom, TTo, System.Nullable < IDictionary < System.Object , System.Object >>, TTo>> Mapping expression. | Improve this Doc View Source Map(TFrom) Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public TTo Map(TFrom source) Parameters Type Name Description TFrom source Object to map. Returns Type Description TTo Destination object. | Improve this Doc View Source Map(TFrom, TTo) Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public TTo Map(TFrom source, TTo destination) Parameters Type Name Description TFrom source Object to map. TTo destination Destination object. Returns Type Description TTo Destination object. | Improve this Doc View Source Map(TFrom, TTo, Nullable<IDictionary<Object, Object>>) Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public TTo Map(TFrom source, TTo destination, IDictionary<object, object>? crossReferenceDictionary) Parameters Type Name Description TFrom source Object to map. TTo destination Destination object. System.Nullable < IDictionary < System.Object , System.Object >> crossReferenceDictionary Storage for cress references if applied. Returns Type Description TTo Destination object. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Tools.Mapper.MapperBuilder-2.html": {
    "href": "api/LinqToDB.Tools.Mapper.MapperBuilder-2.html",
    "title": "Class MapperBuilder<TFrom, TTo> | Linq To DB (aka linq2db)",
    "keywords": "Class MapperBuilder<TFrom, TTo> Builds a mapper that maps an object of TFrom type to an object of TTo type. Inheritance System.Object MapperBuilder<TFrom, TTo> Implements IMapperBuilder Namespace : LinqToDB.Tools.Mapper Assembly : linq2db.Tools.dll Syntax public class MapperBuilder<TFrom, TTo> : object, IMapperBuilder Type Parameters Name Description TFrom Type to map from. TTo Type to map to. Properties | Improve this Doc View Source DeepCopy If true, performs deep copy. if default (null), the GetMapperExpression() method does not do deep copy, however the GetMapperExpressionEx() method does. Declaration public bool? DeepCopy { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source FromMappingDictionary Defines member name mapping for source types. Declaration public Dictionary<Type, Dictionary<string, string>>? FromMappingDictionary { get; set; } Property Value Type Description System.Nullable < Dictionary < Type , Dictionary < System.String , System.String >>> | Improve this Doc View Source FromType Type to map from. Declaration public Type FromType { get; } Property Value Type Description Type | Improve this Doc View Source MappingSchema Mapping schema. Declaration public MappingSchema MappingSchema { get; set; } Property Value Type Description MappingSchema | Improve this Doc View Source MemberMappers Member mappers. Declaration public List<MemberMapperInfo>? MemberMappers { get; set; } Property Value Type Description System.Nullable < List < MemberMapperInfo >> | Improve this Doc View Source ProcessCrossReferences If true, processes object cross references. if default (null), the GetMapperExpression() method does not process cross references, however the GetMapperExpressionEx() method does. Declaration public bool? ProcessCrossReferences { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source ToMappingDictionary Defines member name mapping for destination types. Declaration public Dictionary<Type, Dictionary<string, string>>? ToMappingDictionary { get; set; } Property Value Type Description System.Nullable < Dictionary < Type , Dictionary < System.String , System.String >>> | Improve this Doc View Source ToMemberFilter Filters target members to map. Declaration public Func<MemberAccessor, bool> ToMemberFilter { get; set; } Property Value Type Description Func < MemberAccessor , System.Boolean > | Improve this Doc View Source ToType Type to map to. Declaration public Type ToType { get; } Property Value Type Description Type Methods | Improve this Doc View Source FromMapping(IReadOnlyDictionary<String, String>) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source FromMapping(String, String) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source FromMapping(Type, IReadOnlyDictionary<String, String>) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping(Type type, IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description Type type Type to map. IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source FromMapping(Type, String, String) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping(Type type, string memberName, string mapName) Parameters Type Name Description Type type Type to map. System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source FromMapping<T>(IReadOnlyDictionary<String, String>) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping<T>(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. | Improve this Doc View Source FromMapping<T>(String, String) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping<T>(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. | Improve this Doc View Source GetMapper() Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public Mapper<TFrom, TTo> GetMapper() Returns Type Description Mapper <TFrom, TTo> Mapping expression. | Improve this Doc View Source GetMapperExpression() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Returned expression is compatible to IQueryable. Declaration public Expression<Func<TFrom, TTo>> GetMapperExpression() Returns Type Description Expression < Func <TFrom, TTo>> Mapping expression. | Improve this Doc View Source GetMapperExpressionEx() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Declaration public Expression<Func<TFrom, TTo, IDictionary<object, object>?, TTo>> GetMapperExpressionEx() Returns Type Description Expression < Func <TFrom, TTo, System.Nullable < IDictionary < System.Object , System.Object >>, TTo>> Mapping expression. | Improve this Doc View Source MapMember<T>(Expression<Func<TTo, T>>, Expression<Func<TFrom, T>>) Adds member mapper. Declaration public MapperBuilder<TFrom, TTo> MapMember<T>(Expression<Func<TTo, T>> toMember, Expression<Func<TFrom, T>> setter) Parameters Type Name Description Expression < Func <TTo, T>> toMember Expression that returns a member to map. Expression < Func <TFrom, T>> setter Expression to set the member. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type of the member to map. Examples This example shows how to explicitly convert one value to another. | Improve this Doc View Source Mapping(IReadOnlyDictionary<String, String>) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source Mapping(String, String) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source Mapping(Type, IReadOnlyDictionary<String, String>) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping(Type type, IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description Type type Type to map. IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source Mapping(Type, String, String) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping(Type type, string memberName, string mapName) Parameters Type Name Description Type type Type to map. System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source Mapping<T>(IReadOnlyDictionary<String, String>) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping<T>(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. | Improve this Doc View Source Mapping<T>(String, String) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping<T>(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. | Improve this Doc View Source SetDeepCopy(Nullable<Boolean>) If true, performs deep copy. Declaration public MapperBuilder<TFrom, TTo> SetDeepCopy(bool? deepCopy) Parameters Type Name Description System.Nullable < System.Boolean > deepCopy If true, performs deep copy. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source SetMappingSchema(MappingSchema) Sets mapping schema. Declaration public MapperBuilder<TFrom, TTo> SetMappingSchema(MappingSchema schema) Parameters Type Name Description MappingSchema schema Mapping schema to set. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source SetProcessCrossReferences(Nullable<Boolean>) If true, processes object cross references. Declaration public MapperBuilder<TFrom, TTo> SetProcessCrossReferences(bool? doProcess) Parameters Type Name Description System.Nullable < System.Boolean > doProcess If true, processes object cross references. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source SetToMemberFilter(Func<MemberAccessor, Boolean>) Adds a predicate to filter target members to map. Declaration public MapperBuilder<TFrom, TTo> SetToMemberFilter(Func<MemberAccessor, bool> predicate) Parameters Type Name Description Func < MemberAccessor , System.Boolean > predicate Predicate to filter members to map. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source ToMapping(IReadOnlyDictionary<String, String>) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source ToMapping(String, String) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source ToMapping(Type, IReadOnlyDictionary<String, String>) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping(Type type, IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description Type type Type to map. IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source ToMapping(Type, String, String) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping(Type type, string memberName, string mapName) Parameters Type Name Description Type type Type to map. System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source ToMapping<T>(IReadOnlyDictionary<String, String>) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping<T>(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. | Improve this Doc View Source ToMapping<T>(String, String) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping<T>(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. Explicit Interface Implementations | Improve this Doc View Source IMapperBuilder.GetMapperLambdaExpression() Declaration LambdaExpression IMapperBuilder.GetMapperLambdaExpression() Returns Type Description LambdaExpression | Improve this Doc View Source IMapperBuilder.GetMapperLambdaExpressionEx() Declaration LambdaExpression IMapperBuilder.GetMapperLambdaExpressionEx() Returns Type Description LambdaExpression Implements IMapperBuilder Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Tools.Mapper.MemberMapperInfo.html": {
    "href": "api/LinqToDB.Tools.Mapper.MemberMapperInfo.html",
    "title": "Class MemberMapperInfo | Linq To DB (aka linq2db)",
    "keywords": "Class MemberMapperInfo Inheritance System.Object MemberMapperInfo Namespace : LinqToDB.Tools.Mapper Assembly : linq2db.Tools.dll Syntax public class MemberMapperInfo : object Properties | Improve this Doc View Source Setter Declaration public LambdaExpression Setter { get; set; } Property Value Type Description LambdaExpression | Improve this Doc View Source ToMember Declaration public LambdaExpression ToMember { get; set; } Property Value Type Description LambdaExpression Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.Tools.MappingSchemaExtensions.html": {
    "href": "api/LinqToDB.Tools.MappingSchemaExtensions.html",
    "title": "Class MappingSchemaExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class MappingSchemaExtensions Inheritance System.Object MappingSchemaExtensions Namespace : LinqToDB.Tools Assembly : linq2db.Tools.dll Syntax public static class MappingSchemaExtensions : object Methods | Improve this Doc View Source GetEntityEqualityComparer<T>(IDataContext) Returns implementations of the generic interface based on provided entity columns equality. Declaration public static IEqualityComparer<T> GetEntityEqualityComparer<T>(this IDataContext dataContext) Parameters Type Name Description IDataContext dataContext Instance of IDataContext . Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of entity to compare. | Improve this Doc View Source GetEntityEqualityComparer<T>(ITable<T>) Returns implementations of the generic interface based on provided entity columns equality. Declaration public static IEqualityComparer<T> GetEntityEqualityComparer<T>(this ITable<T> table) Parameters Type Name Description ITable <T> table Instance of ITable<T> . Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of entity to compare. | Improve this Doc View Source GetEntityEqualityComparer<T>(MappingSchema) Returns implementations of the generic interface based on provided entity columns equality. Declaration public static IEqualityComparer<T> GetEntityEqualityComparer<T>(this MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Instance of MappingSchema . Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of entity to compare. | Improve this Doc View Source GetEqualityComparer<T>(IDataContext, Func<ColumnDescriptor, Boolean>) Returns implementations of the generic interface based on provided entity columns equality. Declaration public static IEqualityComparer<T> GetEqualityComparer<T>(this IDataContext dataContext, Func<ColumnDescriptor, bool> columnPredicate) Parameters Type Name Description IDataContext dataContext Instance of IDataContext . Func < ColumnDescriptor , System.Boolean > columnPredicate A function to filter columns to compare. Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of entity to compare. | Improve this Doc View Source GetEqualityComparer<T>(ITable<T>, Func<ColumnDescriptor, Boolean>) Returns implementations of the generic interface based on provided entity columns equality. Declaration public static IEqualityComparer<T> GetEqualityComparer<T>(this ITable<T> table, Func<ColumnDescriptor, bool> columnPredicate) Parameters Type Name Description ITable <T> table Instance of ITable<T> . Func < ColumnDescriptor , System.Boolean > columnPredicate A function to filter columns to compare. Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of entity to compare. | Improve this Doc View Source GetEqualityComparer<T>(MappingSchema, Func<ColumnDescriptor, Boolean>) Returns implementations of the generic interface based on provided entity columns equality. Declaration public static IEqualityComparer<T> GetEqualityComparer<T>(this MappingSchema mappingSchema, Func<ColumnDescriptor, bool> columnPredicate) Parameters Type Name Description MappingSchema mappingSchema Instance of MappingSchema . Func < ColumnDescriptor , System.Boolean > columnPredicate A function to filter columns to compare. Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of entity to compare. | Improve this Doc View Source GetKeyEqualityComparer<T>(IDataContext) Returns implementations of the generic interface based on provided entity primary key columns equality. Declaration public static IEqualityComparer<T> GetKeyEqualityComparer<T>(this IDataContext dataContext) Parameters Type Name Description IDataContext dataContext Instance of IDataContext . Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of entity to compare. | Improve this Doc View Source GetKeyEqualityComparer<T>(ITable<T>) Returns implementations of the generic interface based on provided entity primary key columns equality. Declaration public static IEqualityComparer<T> GetKeyEqualityComparer<T>(this ITable<T> table) Parameters Type Name Description ITable <T> table Instance of ITable<T> . Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of entity to compare. | Improve this Doc View Source GetKeyEqualityComparer<T>(MappingSchema) Returns implementations of the generic interface based on provided entity primary key columns equality. Declaration public static IEqualityComparer<T> GetKeyEqualityComparer<T>(this MappingSchema mappingSchema) Parameters Type Name Description MappingSchema mappingSchema Instance of MappingSchema . Returns Type Description IEqualityComparer <T> Instance of . Type Parameters Name Description T The type of entity to compare."
  },
  "api/LinqToDB.Tools.SqlExtensions.html": {
    "href": "api/LinqToDB.Tools.SqlExtensions.html",
    "title": "Class SqlExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class SqlExtensions Inheritance System.Object SqlExtensions Namespace : LinqToDB.Tools Assembly : linq2db.dll Syntax public static class SqlExtensions : object Methods | Improve this Doc View Source In<T>(T, T, T) Declaration public static bool In<T>(this T value, T cmp1, T cmp2) Parameters Type Name Description T value T cmp1 T cmp2 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source In<T>(T, T, T, T) Declaration public static bool In<T>(this T value, T cmp1, T cmp2, T cmp3) Parameters Type Name Description T value T cmp1 T cmp2 T cmp3 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source In<T>(T, T[]) Declaration public static bool In<T>(this T value, params T[] sequence) Parameters Type Name Description T value T[] sequence Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source In<T>(T, IEnumerable<T>) Declaration public static bool In<T>(this T value, IEnumerable<T> sequence) Parameters Type Name Description T value IEnumerable <T> sequence Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source In<T>(T, IQueryable<T>) Declaration public static bool In<T>(this T value, IQueryable<T> sequence) Parameters Type Name Description T value IQueryable <T> sequence Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source NotIn<T>(T, T, T) Declaration public static bool NotIn<T>(this T value, T cmp1, T cmp2) Parameters Type Name Description T value T cmp1 T cmp2 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source NotIn<T>(T, T, T, T) Declaration public static bool NotIn<T>(this T value, T cmp1, T cmp2, T cmp3) Parameters Type Name Description T value T cmp1 T cmp2 T cmp3 Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source NotIn<T>(T, T[]) Declaration public static bool NotIn<T>(this T value, params T[] sequence) Parameters Type Name Description T value T[] sequence Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source NotIn<T>(T, IEnumerable<T>) Declaration public static bool NotIn<T>(this T value, IEnumerable<T> sequence) Parameters Type Name Description T value IEnumerable <T> sequence Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source NotIn<T>(T, IQueryable<T>) Declaration public static bool NotIn<T>(this T value, IQueryable<T> sequence) Parameters Type Name Description T value IQueryable <T> sequence Returns Type Description System.Boolean Type Parameters Name Description T"
  },
  "api/LinqToDB.UpdateColumnFilter-1.html": {
    "href": "api/LinqToDB.UpdateColumnFilter-1.html",
    "title": "Delegate UpdateColumnFilter<T> | Linq To DB (aka linq2db)",
    "keywords": "Delegate UpdateColumnFilter<T> Defines signature for column filter for update operations. Namespace : LinqToDB Assembly : linq2db.dll Syntax public delegate bool UpdateColumnFilter<T>(T entity, ColumnDescriptor column); Parameters Type Name Description T entity Entity instance. ColumnDescriptor column Descriptor of column. Returns Type Description System.Boolean true , if column should be included in operation and false otherwise. Type Parameters Name Description T Entity type. Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/LinqToDB.UpdateOutput-1.html": {
    "href": "api/LinqToDB.UpdateOutput-1.html",
    "title": "Class UpdateOutput<T> | Linq To DB (aka linq2db)",
    "keywords": "Class UpdateOutput<T> Inheritance System.Object UpdateOutput<T> Namespace : LinqToDB Assembly : linq2db.dll Syntax public class UpdateOutput<T> : object Type Parameters Name Description T Properties | Improve this Doc View Source Deleted Declaration public T Deleted { get; set; } Property Value Type Description T | Improve this Doc View Source Inserted Declaration public T Inserted { get; set; } Property Value Type Description T Extension Methods Map.DeepCopy<T>(T) Sql.IsDistinctFrom<T>(T, T) Sql.IsNotDistinctFrom<T>(T, T) SqlExtensions.In<T>(T, IEnumerable<T>) SqlExtensions.In<T>(T, IQueryable<T>) SqlExtensions.In<T>(T, T[]) SqlExtensions.In<T>(T, T, T) SqlExtensions.In<T>(T, T, T, T) SqlExtensions.NotIn<T>(T, IEnumerable<T>) SqlExtensions.NotIn<T>(T, IQueryable<T>) SqlExtensions.NotIn<T>(T, T[]) SqlExtensions.NotIn<T>(T, T, T) SqlExtensions.NotIn<T>(T, T, T, T)"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Linq To DB (aka linq2db)",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes IdentityLinqToDbBuilderExtensions Contains extension methods to for adding linq2db stores. IdentityServerEntityFrameworkBuilderExtensions"
  },
  "api/Microsoft.Extensions.DependencyInjection.IdentityLinqToDbBuilderExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.IdentityLinqToDbBuilderExtensions.html",
    "title": "Class IdentityLinqToDbBuilderExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityLinqToDbBuilderExtensions Contains extension methods to for adding linq2db stores. Inheritance System.Object IdentityLinqToDbBuilderExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : LinqToDB.Identity.dll Syntax public static class IdentityLinqToDbBuilderExtensions : object Methods | Improve this Doc View Source AddLinqToDBStores(IdentityBuilder, IConnectionFactory) Adds an linq2db plementation of identity information stores. Declaration public static IdentityBuilder AddLinqToDBStores(this IdentityBuilder builder, IConnectionFactory factory) Parameters Type Name Description IdentityBuilder builder The instance this method extends. IConnectionFactory factory IConnectionFactory Returns Type Description IdentityBuilder The instance this method extends. | Improve this Doc View Source AddLinqToDBStores(IdentityBuilder, IConnectionFactory, Type, Type, Type, Type, Type, Type) Adds an linq2db implementation of identity information stores. Declaration public static IdentityBuilder AddLinqToDBStores(this IdentityBuilder builder, IConnectionFactory factory, Type keyType, Type userClaimType, Type userRoleType, Type userLoginType, Type userTokenType, Type roleClaimType) Parameters Type Name Description IdentityBuilder builder The instance this method extends. IConnectionFactory factory IConnectionFactory Type keyType The type of the primary key used for the users and roles. Type userClaimType The type representing a claim. Type userRoleType The type representing a user role. Type userLoginType The type representing a user external login. Type userTokenType The type representing a user token. Type roleClaimType The type of the class representing a role claim. Returns Type Description IdentityBuilder The instance this method extends. | Improve this Doc View Source AddLinqToDBStores<TKey>(IdentityBuilder, IConnectionFactory) Adds an linq2db implementation of identity information stores. Declaration public static IdentityBuilder AddLinqToDBStores<TKey>(this IdentityBuilder builder, IConnectionFactory factory) where TKey : IEquatable<TKey> Parameters Type Name Description IdentityBuilder builder The instance this method extends. IConnectionFactory factory IConnectionFactory Returns Type Description IdentityBuilder The instance this method extends. Type Parameters Name Description TKey The type of the primary key used for the users and roles. | Improve this Doc View Source AddLinqToDBStores<TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim>(IdentityBuilder, IConnectionFactory) Adds an linq2db implementation of identity information stores. Declaration public static IdentityBuilder AddLinqToDBStores<TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim>(this IdentityBuilder builder, IConnectionFactory factory) where TKey : IEquatable<TKey> where TUserClaim : class, IIdentityUserClaim<TKey> where TUserRole : class, IIdentityUserRole<TKey> where TUserLogin : class, IIdentityUserLogin<TKey> where TUserToken : class, IIdentityUserToken<TKey> where TRoleClaim : class, IIdentityRoleClaim<TKey> Parameters Type Name Description IdentityBuilder builder The instance this method extends. IConnectionFactory factory IConnectionFactory Returns Type Description IdentityBuilder The instance this method extends. Type Parameters Name Description TKey The type of the primary key used for the users and roles. TUserClaim The type representing a claim. TUserRole The type representing a user role. TUserLogin The type representing a user external login. TUserToken The type representing a user token. TRoleClaim The type of the class representing a role claim."
  },
  "api/Microsoft.Extensions.DependencyInjection.IdentityServerEntityFrameworkBuilderExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.IdentityServerEntityFrameworkBuilderExtensions.html",
    "title": "Class IdentityServerEntityFrameworkBuilderExtensions | Linq To DB (aka linq2db)",
    "keywords": "Class IdentityServerEntityFrameworkBuilderExtensions Inheritance System.Object IdentityServerEntityFrameworkBuilderExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : IdentityServer4.Contrib.Linq2db.dll Syntax public static class IdentityServerEntityFrameworkBuilderExtensions : object Methods | Improve this Doc View Source AddConfigurationStore(IIdentityServerBuilder, IDataConnectionFactory) Declaration public static IIdentityServerBuilder AddConfigurationStore(this IIdentityServerBuilder builder, IDataConnectionFactory dataConnectionFactory) Parameters Type Name Description IIdentityServerBuilder builder IDataConnectionFactory dataConnectionFactory Returns Type Description IIdentityServerBuilder | Improve this Doc View Source AddConfigurationStoreCache(IIdentityServerBuilder) Declaration public static IIdentityServerBuilder AddConfigurationStoreCache(this IIdentityServerBuilder builder) Parameters Type Name Description IIdentityServerBuilder builder Returns Type Description IIdentityServerBuilder | Improve this Doc View Source AddOperationalStore(IIdentityServerBuilder, IDataConnectionFactory, Action<TokenCleanupOptions>) Declaration public static IIdentityServerBuilder AddOperationalStore(this IIdentityServerBuilder builder, IDataConnectionFactory dataConnectionFactory, Action<TokenCleanupOptions> initTokenCleanUpOptions = null) Parameters Type Name Description IIdentityServerBuilder builder IDataConnectionFactory dataConnectionFactory Action < TokenCleanupOptions > initTokenCleanUpOptions Returns Type Description IIdentityServerBuilder | Improve this Doc View Source UseIdentityServerEfTokenCleanup(IApplicationBuilder, IApplicationLifetime) Declaration public static IApplicationBuilder UseIdentityServerEfTokenCleanup(this IApplicationBuilder app, IApplicationLifetime applicationLifetime) Parameters Type Name Description IApplicationBuilder app IApplicationLifetime applicationLifetime Returns Type Description IApplicationBuilder"
  },
  "articles/FAQ.html": {
    "href": "articles/FAQ.html",
    "title": "Toc | Linq To DB (aka linq2db)",
    "keywords": "Toc General Which async model Linq To DB use? I need to configure connection before or immediately after it opened (e.g. set SQL Server AccessToken or SQLite encryption key) Mapping Do I need to use Attribute and/or Code first Mapping? How can I use calculated fields? How can I use SQL Server spatial types General Which async model Linq To DB use? By default it use await awaitable.ConfigureAwait(true) (same as await awaitable ) mode for internal asyn calls. If you need it to use another mode you can change it by setting following configuration option: // switch to await awaitable.ConfigureAwait(false) Configuration.ContinueOnCapturedContext = false; I need to configure connection before or immediately after it opened (e.g. set SQL Server AccessToken or SQLite encryption key) If you are using DataConnection to access database, you can subscribe to those events (each came in pair of sync and async events) and configure your connection there. Configure connection before it opened (SQL Server AccessToken example): // or do it in constructor of DataConnection-based class public class MyDb : DataConnection { public MyDb() : base(...) { this.OnBeforeConnectionOpen += (db, cn) => ((SqlConnection)cn).AccessToken = GetAccessToken(); // code for this event could be the same, but you still need both // events to handle both sync and async connection open operations this.OnBeforeConnectionOpenAsync += async (db, cn, token) => ((SqlConnection)cn).AccessToken = await GetAccessTokenAsync(token); } } using (var db = new MyDb()) { // queries here will get pre-configured connection } Configure connection immediately after it opened (SQLite encryption example): // or do it in constructor of DataConnection-based class public class MyDb : DataConnection { public MyDb() : base(...) { this.OnConnectionOpened += (db, cn) => db.Execute($\"PRAGMA key = {GetQuotedPassword()}\"); // code for this event could be the same, but you still need both // events to handle both sync and async connection open operations this.OnConnectionOpenedAsync += async (db, cn, token) => await db.ExecuteAsync( $\"PRAGMA key = {await GetQuotedPasswordAsync(token)}\", token); } } using (var db = new MyDb()) { // queries here will get connection with encryption key set } If you need to do it also for other use-cases, e.g. for DataContext , it is not so convenient, but still possible (it will also handle DataConnection case). One option is to derive from your provider and override CreateConnectionInternal method. If you need to perform connection configuration after connection opened, you allowed to open created connection in this method (but you will loose OpenAsync() benefits for providers that support it). public class MySqliteProvider : SQLiteDataProvider { public MySqliteProvider() : base(...) { } protected override IDbConnection CreateConnectionInternal( string connectionString) { var cn = new SqliteConnection(connectionString); cn.Open(); using (var cmd = cn.CreateCommand()) { cmd.CommandText = $\"PRAGMA key = {GetQuotedPassword()}\"; cmd.ExecuteNonQuery(); } return cn; } } Another option if you just need to configure non-opened connection, you can do it by using DataProviderBase.OnConnectionCreated callback: // note that: // - this is not event, so you cannot have multiple subscribers // - it is called for all connection creation operations // for all providers DataProviderBase.OnConnectionCreated = (p, cn) => { // this is global handler, so if you use multiple databases, // you need to check here if you need to handle it if (cn is SqlConnection connection) { connection.AccessToken = GetAccessToken(); } return cn; }; Mapping Do I need to use Attribute and/or Code first Mapping? Not strictly. It is possible to use linq2db with simple, non-attributed POCOs, however there will be specific limitations. The biggest of these is that the string type is nullable by default in .NET, and unlike with int or double there is no way for linq2db to infer nullability. This can cause problems in certain cases, such as if you are ever required to join two VARCHAR fields together. Table and column names will have to match the class and property names. You can get around this for the class itself by using the .TableName() Method after your GetTable<> call (e.x. conn.GetTable<MyCleanClassName>().TableName(\"my_not_so_clean_table_name\") ) Unless using the explicit insert/update syntax (i.e. .Value() / .Set() ), all columns will be written off the supplied POCO. How can I use calculated fields? You need to mark them to be ignored during insert or update operations, e.g. using ColumnAttribute attribute: public class MyEntity { [Column(SkipOnInsert = true, SkipOnUpdate = true)] public int CalculatedField { get; set; } } How can I use SQL Server spatial types Spatial types for SQL Server provided by: Microsoft.SqlServer.Types assembly from Microsoft for .NET Framework dotMorten.Microsoft.SqlServer.Types assembly from Morten Nielsen for .NET Core For .net core we recommend to use at least linq2db 2.9.0 as it contains several important fixes in this area for .net core projects. First of all it is recommended to register types assembly in linq2db using following call: SqlServerTools.ResolveSqlTypes(typeof(SqlGeography).Assembly); Main problem that people hit with SQL Server spatial types is following error on select queries: Can't create '<DB_NAME>.sys.<SPATIAL_TYPE_NAME>' type or '' specific type for <COLUMN_NAME>. This happens due to different versions of Microsoft.SqlServer.Types assembly, requested by SqlClient, and assembly, referenced by your project. How to fix it For .NET Framework you just need to add assembly bindings redirect to your configuration file to redirect all assembly load requests to your version (make sure that newVersion contains proper version of assembly you have): <runtime> <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <dependentAssembly> <assemblyIdentity name=\"Microsoft.SqlServer.Types\" publicKeyToken=\"89845dcd8080cc91\" culture=\"neutral\"/> <bindingRedirect oldVersion=\"0.0.0.0-14.0.0.0\" newVersion=\"14.0.0.0\" /> </dependentAssembly> </assemblyBinding> </runtime> For .NET Core it is a bit tricky because: .NET Core doesn't support binding redirects You need to use 3rd-party assembly with non-Microsoft public key and binding redirects doesn't allow such redirects anyway To workaround it you need to add custom assembly resolver to your code: // subscribe to assembly load request event somewhere in your init code AssemblyLoadContext.Default.Resolving += OnAssemblyResolve; Assembly OnAssemblyResolve(AssemblyLoadContext assemblyLoadContext, AssemblyName assemblyName) { try { // you need to unsubscribe here to avoid StackOverflowException, // as LoadFromAssemblyName will go in recursion here otherwise AssemblyLoadContext.Default.Resolving -= OnAssemblyResolve; // return resolved assembly for cases when it can be resolved return assemblyLoadContext.LoadFromAssemblyName(assemblyName); } catch { // on failue - check if it failed to load our types assembly // and explicitly return it if (assemblyName.Name == \"Microsoft.SqlServer.Types\") return typeof(SqlGeography).Assembly; // if it failed to load some other assembly - just pass exception as-is throw; } finally { // don't forget to restore our load handler AssemblyLoadContext.Default.Resolving += OnAssemblyResolve; } }"
  },
  "articles/general/databases.html": {
    "href": "articles/general/databases.html",
    "title": "Supported Databases | Linq To DB (aka linq2db)",
    "keywords": "Supported Databases Current list . One database may have several providers because of: using different ADO .Net implementations (as for SQLite) SQL compatibility level, that allows using new SQL features of the database engine (as for MS SQL Server) Database Provider name DB2 (LUW, z/OS) DB2 DB2.LUW DB2.z/OS Firebird Firebird Informix Informix Microsoft Access Access Microsoft Sql Azure Microsoft Sql Server SqlServer - default compatibility level SQL Server 2008 SqlServer.2000 SqlServer.2005 SqlServer.2008 SqlServer.2012 SqlServer.2014 SqlServer.2017 Microsoft SqlCe SqlCe MySql MySql MySqlConnector MySql.Official Oracle Oracle Oracle.Managed Oracle.Native PostgreSQL PostgreSQL PostgreSQL.9.2 PostgreSQL.9.3 PostgreSQL.9.5 SQLite SQLite, SQLite.Classic - using System.Data.Sqlite SQLite.MS - using Microsoft.Data.Sqlite SAP HANA SapHana Sybase ASE Sybase - using Native SAP/Sybase ASE provider Sybase.Managed - using Managed Sybase/SAP ASE provider from DataAction DB2 iSeries iSeriesProvider"
  },
  "articles/general/interceptors.html": {
    "href": "articles/general/interceptors.html",
    "title": "Interceptors<!-- omit in toc --> | Linq To DB (aka linq2db)",
    "keywords": "Interceptors <!-- omit in toc --> This API available since Linq To DB 4.0.0 Introduction Interceptors IUnwrapDataObjectInterceptor IEntityServiceInterceptor IDataContextInterceptor ICommandInterceptor IConnectionInterceptor Interceptors Registration Interceptors support per context Migration Introduction Interceptors represent an generic exensibility mechanism that allows users to attach custom logic at different places of Linq To DB execution pipeline. In prior versions Linq To DB used assorted set of events, properties, delegates, virtual methods and interfaces with multiple usability issues: it wasn't an easy task to find specific extension point due to scarse documentation, absense of single extensibility mechanism and lack of common approach some extension points were not synchronized between IDataContext implementations. E.g. you can have some extension point on DataConnection , but not on DataContext and vice versa. New mechanim provides following exensibility infrastructure: set of interceptor interfaces which group extension points logically; base interceptor implementation classes without added functionality. They could be used by user for own interceptor implementation. Just inherit from those classes and override required interceptor methods (also it is possible to implement interceptor interface directly); single mechanism for interceptors registration in IDataContext implementations ( DataConnection , DataContext , RemoteContext ); interceptors registration using LinqToDbConnectionOptions conntection configuration object (including required fluent configuration APIs); single source of documentation (this document). Note that interceptors replace old extensibility mechanims, which means you may need to migrate your existing code to interceptors if you used them. For migration notes check migration notes section below. We can add more interceptors in future (e.g. on user request). Interceptors List of implemented interceptor interfaces: IUnwrapDataObjectInterceptor : provides compatibility layer for connection wrappers, e.g. MiniProfiler IEntityServiceInterceptor : interceptor for entity creation on query materialization IDataContextInterceptor : interceptor for data context services ICommandInterceptor : DbCommand methods calls interceptor IConnectionInterceptor : DbConnection methods calls interceptor IUnwrapDataObjectInterceptor Base abstract class: UnwrapDataObjectInterceptor . This interceptor used by Linq To DB to access underlying ADO.NET provider objects when they are wrapped by non-provider classes. Most know example of such wrapper is MiniProfiler . It wraps native ADO.NET objects with profiling classes and Linq To DB uses this interceptor to access underlying objects to call provider-specific functionality, not awailable on wrapper directly. Interceptor methods: // access underlying connection object DbConnection UnwrapConnection(IDataContext dataContext, DbConnection connection); // access underlying transaction object DbTransaction UnwrapTransaction(IDataContext dataContext, DbTransaction transaction); // access underlying command object DbCommand UnwrapCommand(IDataContext dataContext, DbCommand command); // access underlying data reader object DbDataReader UnwrapDataReader(IDataContext dataContext, DbDataReader dataReader); Example of MiniProfiler -based interceptor implementation: // MiniProfiler unwrap interceptor public class MiniProfilerInterceptor : UnwrapDataObjectInterceptor { // as interceptor is thread-safe, we will create // and use single instance public static readonly IInterceptor Instance = new MiniProfilerInterceptor(); public override DbConnection UnwrapConnection(IDataContext dataContext, DbConnection connection) { return connection is ProfiledDbConnection c ? c.WrappedConnection : connection; } public override DbTransaction UnwrapTransaction(IDataContext dataContext, DbTransaction transaction) { return transaction is ProfiledDbTransaction t ? t.WrappedTransaction : transaction; } public override DbCommand UnwrapCommand(IDataContext dataContext, DbCommand command) { return command is ProfiledDbCommand c ? c.InternalCommand : command; } public override DbDataReader UnwrapDataReader(IDataContext dataContext, DbDataReader dataReader) { return dataReader is ProfiledDbDataReader dr ? dr.WrappedReader : dataReader; } } IEntityServiceInterceptor Base abstract class: UnwrapDataObjectInterceptor . This interceptor provides access to entity materialization event during query execution. Interceptor methods: // triggered for new entity object (only for imlicit record materialization). // // Example 1: // table.ToList(); // No explicit entity constructor call: event will be triggered for each materialized table record // // Example 2: // table.Select(r => new SomeEntity() { Field1 = r.Field1 }).ToList(); // Query contains explicit entity constructor call: no event will be triggered object EntityCreated(EntityCreatedEventData eventData, object entity); // event arguments struct EntityCreatedEventData { public IDataContext Context { get; } public TableOptions TableOptions { get; } public string? TableName { get; } public string? SchemaName { get; } public string? DatabaseName { get; } public string? ServerName { get; } } IDataContextInterceptor Base abstract class: DataContextInterceptor . This interceptor provides access to events and operations associated with database context. Interceptor methods: // triggered before data context instance `Close/CloseAsync` method execution void OnClosing(DataContextEventData eventData); Task OnClosingAsync(DataContextEventData eventData); // triggered after data context instance `Close/CloseAsync` method execution void OnClosed(DataContextEventData eventData); Task OnClosedAsync(DataContextEventData eventData); struct DataContextEventData { public IDataContext Context { get; } } ICommandInterceptor Base abstract class: CommandInterceptor . This interceptor provides access to events and operations associated with database command. // triggered after command initialization but before execution // it provides access to prepared SQL command and parameters DbCommand CommandInitialized(CommandEventData eventData, DbCommand command); // triggered before `ExecuteScalar/ExecuteScalarAsync` call on command // and could replace actual call by returning results from interceptor Option<object?> ExecuteScalar (CommandEventData eventData, DbCommand command, Option<object?> result); Task<Option<object?>> ExecuteScalarAsync(CommandEventData eventData, DbCommand command, Option<object?> result, CancellationToken cancellationToken); // triggered before `ExecuteNonQuery/ExecuteNonQueryAsync` call on command // and could replace actual call by returning results from interceptor Option<int> ExecuteNonQuery (CommandEventData eventData, DbCommand command, Option<int> result); Task<Option<int>> ExecuteNonQueryAsync(CommandEventData eventData, DbCommand command, Option<int> result, CancellationToken cancellationToken); // triggered before `ExecuteReader/ExecuteReaderAsync` call on command // and could replace actual call by returning results from interceptor Option<DbDataReader> ExecuteReader (CommandEventData eventData, DbCommand command, CommandBehavior commandBehavior, Option<DbDataReader> result); Task<Option<DbDataReader>> ExecuteReaderAsync(CommandEventData eventData, DbCommand command, CommandBehavior commandBehavior, Option<DbDataReader> result, CancellationToken cancellationToken); struct CommandEventData { public DataConnection DataConnection { get; } } IConnectionInterceptor Base abstract class: ConnectionInterceptor . This interceptor provides access to events and operations associated with database connection. // triggered before data connection `Open/OpenAsync` method execution void ConnectionOpening(ConnectionEventData eventData, DbConnection connection); Task ConnectionOpeningAsync(ConnectionEventData eventData, DbConnection connection, CancellationToken cancellationToken); // triggered after data connection `Open/OpenAsync` method execution void ConnectionOpened(ConnectionEventData eventData, DbConnection connection); Task ConnectionOpenedAsync(ConnectionEventData eventData, DbConnection connection, CancellationToken cancellationToken); struct ConnectionEventData { public DataConnection DataConnection { get; } } Interceptors Registration Interceptors could be registred using multiple ways: add interceptor instance to existing connection/context object using AddInterceptor method add interceptor to LinqToDbConnectionOptions use single-time interceptor of ICommandInterceptor.CommandInitialized using OnNextCommandInitialized method of context // registration in DataContext using (var ctx = new DataContext(...)) { // add interceptor to current context ctx.AddInterceptor(interceptor); // one-time command prepared interceptor ctx.OnNextCommandInitialized((args, cmd) => { // save next command parameters to external variable parameters = cmd.Parameters.Cast<DbParameter>().ToArray(); return cmd; }); } // registration in DataConnection using (var ctx = new DataConnection(...)) { ctx.AddInterceptor(interceptor); // one-time command prepared interceptor ctx.OnNextCommandInitialized((args, cmd) => { // set oracle-specific command option for next command ((OracleCommand)command).BindByName = false; }); } // registration in DataConnection using fluent options configuration var builder = new LinqToDbConnectionOptionsBuilder() .UseSqlServer(connectionString) .WithInterceptor(interceptor); var dc = new DataConnection(builder.Build()); Interceptors support per context RemoteDataContext : IDataContextInterceptor IEntityServiceInterceptor IUnwrapDataObjectInterceptor DataContext and DataConnection : ICommandInterceptor IConnectionInterceptor IDataContextInterceptor IEntityServiceInterceptor IUnwrapDataObjectInterceptor Migration To see which APIs were replaced with interceptors check migration notes ."
  },
  "articles/general/Managing-data-connection.html": {
    "href": "articles/general/Managing-data-connection.html",
    "title": "Managing Data Connection | Linq To DB (aka linq2db)",
    "keywords": "Managing Data Connection Since connecting to a database is an expensive operation, .NET database providers use connection pools to minimize this cost. They take a connection from the pool, use it, and then release the connection back to the pool so it could be reused. If you don't release database connections back to the pool then: Your application would create more and more connections to the database. This is because from connection pool's point of view there are no available connections to reuse. When the pool size limit is reached then your application would fail to obtain a new connection. To avoid connection leaks you should pay attention to how you are creating and disposing connections. There are two ways to query a database with linq2db: Using the DataConnection class you can make several queries using a single database connection. This way you do not have the overhead of opening and closing database connections for each query. You should follow these simple rules: Always dispose the DataConnection instance. We recommend the C#'s using block. (Please see below for an example.) Your query should be executed before the DataConnection object is disposed. Starting with version 1.8.0 we have added checks to catch improper usages; you will get ObjectDisposedException when trying to perform a query on a disposed DataConnection instance. Using the DataContext class opens and closes an actual connection for each query! Be careful with the DataContext.KeepConnectionAlive property. If you set it to true it would work the same way as DataConnection ! So we do not recommend that you to set this property to true . Done Right using (var db = new DataConnection()) { // your code here } public IEnumerable<Person> GetPersons() { using (var db = new DataConnection()) { // The ToList call sends the query to the database while we are still in the using block return db.GetTable<Person>().ToList(); } } public IEnumerable<Person> GetPersons() { // The ToList call sends the query to the database and then DataContext releases the connection return new DataContext().GetTable<Person>().ToList(); } public IQuerable<Person> GetPersons() { // If this example the query is not sent to the database. It will be executed later // when we enumerate IQuerable. DataContext will handle the connection release properly. return new DataContext().GetTable<Person>(); } public async Task<IEnumerable<Person>> GetPersons() { using (var db = new DataConnection()) { // Here await would suspend the execution inside of the using block while waiting // for the query results from ToListAsync(). After that the execution would // continue and `DataConnection` would be properly disposed. return await db.GetTable<Person>().ToListAsync(); } } Done Wrong public IEnumerable<Person> GetPersons() { using (var db = new DataConnection()) { // The query would be executed only when we enumerate, meaning after this function // exits. By that time DataConnection would have already been disposed and the // database connection returned to the pool. return db.GetTable<Person>(); } } // By the time we call .ToList() the DataConnection would already be disposed. // Starting with version 1.8.0 this would fail with ObjectDisposedException. // Versions prior to 1.8.0 would execute the query (if there are any free connections // left) and leak the connection. var persons = GetPersons().ToList(); public async Task<IEnumerable<Person>> GetPersons() { using (var db = new DataConnection()) { // The awaitable task would be returned immediately creating a race condition. return db.GetTable<Person>().ToListAsync(); } } // The query execution would be called on a disposed DataConnection var persons = await GetPersons();"
  },
  "articles/general/Video.html": {
    "href": "articles/general/Video.html",
    "title": "LINQ Video | Linq To DB (aka linq2db)",
    "keywords": "LINQ Video LINQ to SqlServer LINQ CRUD Operations"
  },
  "articles/get-started/asp-dotnet-core/index.html": {
    "href": "articles/get-started/asp-dotnet-core/index.html",
    "title": "Configuring LINQ To DB for ASP.NET Core | Linq To DB (aka linq2db)",
    "keywords": "Configuring LINQ To DB for ASP.NET Core Available since: 3.0.0-rc.0 In this walkthrough, you will configure an ASP.NET Core application to access a local SQLite Database using LINQ To DB Prerequisites The following will be reuiqred to complete this walkthrough: Latest dotnet core SDK Visual Studio or some other IDE Create a new project First thing we're going to do is create a new ASP.NET Core application using the dotnet CLI dotnet new webapp -o gettingStartedLinqToDbAspNet Install LINQ To DB We can now use the CLI to install LINQ To DB dotnet add package linq2db.SQLite dotnet add package linq2db.AspNet Custom Data Connection We're going to create a custom data connection to use to access LINQ To DB, create a class like this: using LinqToDB.Configuration; using LinqToDB.Data; public class AppDataConnection: DataConnection { public AppDataConnection(LinqToDbConnectionOptions<AppDataConnection> options) :base(options) { } } Tip Note here our AppDataConnection inherits from LinqToDB.Data.DataConnection which is the base class for the Linq2Db connection. Tip a public constructor that accepts LinqToDbConnectionOptions<AppDataConnection> and passes the options on to the base constructor is required. Add Connection String For this example we're going to use SQLite in memory mode, for production you'll want to use something else, but it's pretty easy to change. First you want to add the connection string to appsettings.Development.json , something like this: { \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } }, //add this \"ConnectionStrings\": { \"Default\": \":memory:\" //<-- connection string, used in the next step } } Configure Dependency injection inside Startup.cs you want register the data connection like this: public class Startup { public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { //... //using LinqToDB.AspNet services.AddLinqToDbContext<AppDataConnection>((provider, options) => { options //will configure the AppDataConnection to use //sqite with the provided connection string //there are methods for each supported database .UseSQLite(Configuration.GetConnectionString(\"Default\")) //default logging will log everything using the ILoggerFactory configured in the provider .UseDefaultLogging(provider); }); //... } } Tip There's plenty of other configuration options availble, if you are familiar with LINQ To DB already, you can convert your existing application over to use the new LinqToDbConnectionOptions class as every configuration method is supported Tip Note, only DataConnection supports LinqToDbConnectionOptions . DataContext is not yet supported. Tip Use AddLinqToDbContext<TContext, TContextImplementation> if you would like to resolve an interface or base class instead of the concrete class in your controllers By default this will configure the service provider to create a new AppDataConnection for each HTTP Request, and will dispose of it once the request is finished. This can be configured with the last parameter to AddLinqToDbContext(... ServiceLifetime lifetime) , more information about lifetimes here Simple Entity Configuration Let's create this simple entity in our project using System; using LinqToDB.Mapping; public class Person { [PrimaryKey] public Guid Id { get; set; } = Guid.NewGuid(); public string Name { get; set; } public DateTime Birthday { get; set; } } Add table property to the data connection Open up our AppDataConnection and add this property public class AppDataConnection: DataConnection { //... public ITable<Person> People => GetTable<Person>(); //... } Now we can inject our data connection into a controller and query and insert/update/delete using the ITable<Person> interface. Tip side note, since we don't have anything to create the actual database, we need to add this code into the configure method in Startup.cs public class Startup { //... public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { //... using (var scope = app.ApplicationServices.CreateScope()) { var dataConnection = scope.ServiceProvider.GetService<AppDataConnection>(); dataConnection.CreateTable<Person>(); } //... } } //... Inject the connection into a controller In order to actually access the database we're going to want to use it from a controller, here's a sample controller to get you started with a few examples. public class PeopleController : Controller { private readonly AppDataConnection _connection; public PeopleController(AppDataConnection connection) { _connection = connection; } [HttpGet] public Task<Person[]> ListPeople() { return _connection.People.ToArrayAsync(); } [HttpGet(\"{id}\")] public Task<Person?> GetPerson(Guid id) { return _connection.People.SingleOrDefaultAsync(person => person.Id == id); } [HttpDelete(\"{id}\")] public Task<int> DeletePerson(Guid id) { return _connection.People.Where(person => person.Id == id).DeleteAsync(); } [HttpPatch] public Task<int> UpdatePerson(Person person) { return _connection.UpdateAsync(person); } [HttpPatch(\"{id}/new-name\")] public Task<int> UpdatePersonName(Guid id, string newName) { return _connection.People.Where(person => person.Id == id) .Set(person => person.Name, newName) .UpdateAsync(); } [HttpPut] public Task<int> InsertPerson(Person person) { return _connection.InsertAsync(person); } } Quick start for people already familiar with LINQ To DB LINQ To DB now has support for ASP.NET Dependency injection. Here's a simple example of how to add it to dependancy injection public class Startup { public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { //... //using LinqToDB.AspNet services.AddLinqToDbContext<AppDataConnection>((provider, options) => { options //will configure the AppDataConnection to use //SqlServer with the provided connection string //there are methods for each supported database .UseSqlServer(Configuration.GetConnectionString(\"Default\")) //default logging will log everything using //an ILoggerFactory configured in the provider .UseDefaultLogging(provider); }); //... } } In addition to these configuration options the following are also supported UseOracle(string connectionString) UsePostgreSQL(string connectionString) UseMySql(string connectionString) UseSQLite(string connectionString) UseConnectionString(string providerName, string connectionString) UseConnectionString(IDataProvider dataProvider, string connectionString) UseConfigurationString(string configurationString) UseConnectionFactory(IDataProvider dataProvider, Func<IDbConnection> connectionFactory) UseConnection(IDataProvider dataProvider, IDbConnection connection, bool disposeConnection = false) UseTransaction(IDataProvider dataProvider, IDbTransaction transaction) We've done our best job to allow any existing use case to be migrated to using the new configuration options, please create an issue if something isn't supported. We will add more Use<provider_name> in the future. There's also some methods to setup tracing and mapping schema. You'll need to update your data connection to accept the new options class too. public class AppDataConnection: DataConnection { public AppDataConnection(LinqToDbConnectionOptions<AppDataConnection> options) :base(options) { } } DataConnection will used the options passed into the base constructor to setup the connection. Note DataConnection supports LinqToDbConnectionOptions . However DataContext is not yet supported."
  },
  "articles/get-started/full-dotnet/existing-db.html": {
    "href": "articles/get-started/full-dotnet/existing-db.html",
    "title": "Getting Started on .NET Framework - Existing Database - LINQ To DB | Linq To DB (aka linq2db)",
    "keywords": "Getting started with LINQ To DB on .NET Framework with a Existing Database In this walkthrough, you will build a console application that performs basic data access against a Microsoft SQL Server database using LINQ To DB. You will use existing database to create your model. Tip You can view this article's sample on GitHub. Prerequisites The following prerequisites are needed to complete this walkthrough: Visual Studio 2017 Latest version of NuGet Package Manager Latest version of Windows PowerShell Northwind Database Tip Also there is Northwind Database script file which can be executed using Microsoft SQL Server Management Studio Create a new project Open Visual Studio File > New > Project... From the left menu select Templates > Visual C# > Windows Classic Desktop Select the Console App (.NET Framework) project template Ensure you are targeting .NET Framework 4.5.1 or later Give the project a name and click OK Install LINQ To DB To use LINQ To DB, install the package for the database provider(s) you want to target. This walkthrough uses SQL Server. For a list of available providers see Database Providers . Tools > NuGet Package Manager > Package Manager Console Run Install-Package linq2db.SqlServer Generate model from database Now it's time to generate your model from database. Project > New Folder... Enter DataModels as the name and click OK DataModels > Add Item... and select Text Template Enter Northwind.tt as the name and click OK Copy the content from the file Project > LinqToDB.Templates\\CopyMe.SqlServer.tt.txt Modify host, database name and credentials for your SQL Server in LoadSqlServerMetadata function call Save Northwind.tt - it should invoke model generation Tip There are many ways to customize generation process. Follow this link for details. Use your model You can now use your model to perform data access. Open App.config Replace the contents of the file with the following XML (correct connection string based on your server location and credentials) <!-- [!code-xml[Config](https://github.com/linq2db/examples/blob/master/SqlServer/GetStarted/App.config)] --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <connectionStrings> <add name=\"MyDatabase\" providerName=\"System.Data.SqlClient\" connectionString=\"Data Source=.;Database=Northwind;Integrated Security=SSPI;\" /> </connectionStrings> </configuration> Open Program.cs Replace the contents of the file with the following code <!-- [!code-csharp[Main](https://github.com/linq2db/examples/blob/master/SqlServer/GetStarted/Program.cs)] --> using System; using System.Linq; namespace GetStarted { class Program { static void Main(string[] args) { using (var db = new DataModel.NorthwindDB()) { var q = from c in db.Customers select c; foreach (var c in q) Console.WriteLine(c.ContactName); } } } } Debug > Start Without Debugging You will see list of Contact names."
  },
  "articles/get-started/full-dotnet/index.html": {
    "href": "articles/get-started/full-dotnet/index.html",
    "title": "Getting Started on .NET Framework - LINQ To DB | Linq To DB (aka linq2db)",
    "keywords": "Getting Started with LINQ To DB on .NET Framework These tutorials require no previous knowledge of LINQ To DB or Visual Studio. They will take you step-by-step through creating a simple .NET Framework Console Application that queries and saves data from a database. You can use the techniques learned in these tutorials in any application that targets the .NET Framework, including WPF and WinForms. Note These tutorials and the accompanying samples have been updated to use LINQ To DB 2.1.0. However, in the majority of cases it should be possible to create applications that use previous releases, with minimal modification to the instructions."
  },
  "articles/get-started/index.html": {
    "href": "articles/get-started/index.html",
    "title": "Getting Started - LINQ To DB | Linq To DB (aka linq2db)",
    "keywords": "Getting Started with LINQ To DB Installing LINQ To DB A summary of the steps necessary to add LINQ To DB to your application in different platforms and popular IDEs. Step-by-step Tutorials These introductory tutorials require no previous knowledge of LINQ To DB or a particular IDE. They will take you step-by-step through creating a simple application that queries and saves data from a database. We have provided tutorials to get you started on various operating systems and application types."
  },
  "articles/get-started/install/index.html": {
    "href": "articles/get-started/install/index.html",
    "title": "Installing LINQ To DB | Linq To DB (aka linq2db)",
    "keywords": "Installing LINQ To DB Visual Studio development You can develop many different types of applications that target .NET Core, .NET Framework, or other platforms supported by LINQ To DB using Visual Studio. There are two ways you can install the LINQ To DB database provider in your application from Visual Studio: Using NuGet's Package Manager User Interface Select on the menu Project > Manage NuGet Packages Click on the Browse or the Updates tab Select the linq2db.SqlServer package and the desired version and confirm (see list of supported databases ) Tip linq2db package contains all Data Providers in bundle and loads their libraries dynamically. For simplyfying usage, LINQ To DB has many helper packages linq2db.* that reference required libraries and provide T4 Templates for particular Data Provider. Using NuGet's Package Manager Console (PMC) Select on the menu Tools > NuGet Package Manager > Package Manager Console Type and run the following command in the PMC: Install-Package linq2db.SqlServer You can use the Update-Package command instead to update a package that is already installed to a more recent version To specify a specific version, you can use the -Version modifier. For example, to install LINQ To DB packages, append -Version 2.1.0 to the commands"
  },
  "articles/links.html": {
    "href": "articles/links.html",
    "title": "Links | Linq To DB (aka linq2db)",
    "keywords": "Links Blog LINQ to DB NuGets LINQ to DB pre-release NuGets LINQ to DB on GitHub Source Code Code Examples"
  },
  "articles/project/contrib.html": {
    "href": "articles/project/contrib.html",
    "title": "Contributing guide | Linq To DB (aka linq2db)",
    "keywords": "Contributing guide Development rules and regulations, code style Follow this document Project structure Solution and folder structure Folder Description .\\Build Build and CI files, check readme.md in that folder .\\Data Databases and database creation scripts for tests .\\NuGet LINQ to DB NuGet packages build files .\\Redist Binaries,unavailable officially at NuGet, used by tests and nugets .\\Source\\LinqToDB LINQ to DB source code .\\Source\\LinqToDB.Tools LINQ to DB Tools source code .\\Source\\LinqToDB.AspNet LINQ to DB ASP.NET Core integration library source code .\\Source\\LinqToDB.Templates LINQ to DB t4models source code .\\Tests Unit test projects folder .\\Tests\\Base LINQ to DB testing framework .\\Tests\\FSharp F# models and tests .\\Tests\\Linq Main project for LINQ to DB unit tests .\\Tests\\Model Model classes for tests .\\Tests\\Tests.T4 T4 templates test project .\\Tests\\Tests.Android Xamarin Forms for Android test project .\\Tests\\Tests.Benchmark Benchmarks .\\Tests\\Tests.PLayground Test project for use with linq2db.playground.sln lite test solution Used for work on specific test without full solution load .\\Tests\\VisualBasic Visual Basic models and tests support Solutions: .\\linq2db.sln - full linq2db VS2019 solution .\\linq2db.playground.sln - ligthweight linq2db VS2019 test solution. Used to work on specific test without loading of all payload of full solution Source projects Project \\ Target .NET 4.5 .NET 4.6 .NET 4.7.2 .NET Standard 2.0 .NET Core 2.1 .NET Standard 2.1 .NET Core 3.1 .\\Source\\LinqToDB\\LinqToDB.csproj √ √ √ √ √ √ √ .\\Source\\LinqToDB\\LinqToDB.Tools.csproj √ √ √ .\\Source\\LinqToDB\\LinqToDB.AspNet.csproj √ √ Preferred target defines: NETFRAMEWORK - net45 , net46 and net472 target ifdef !NETFRAMEWORK - netstandard2.0 and newer target ifdef NETCOREAPP - netcoreapp2.1 and netcoreapp3.1 target ifdef NETSTANDARD2_1PLUS - netstandard2.1 and netcoreapp3.1 target ifdef NATIVE_ASYNC - ifdef with native support for ValueTask , IAsyncEnumerable<T> and IAsyncDisposable types Other allowed target defines: NETSTANDARD2_1 - netstandard2.1 target ifdef NETCOREAPP3_1 - netcoreapp3.1 target ifdef NETSTANDARD2_0 - netstandard2.0 target ifdef NETCOREAPP2_1 - netcoreapp2.1 target ifdef NET45 - net45 target ifdef NET46 - net46 target ifdef NET472 - net472 target ifdef Allowed debugging defines: TRACK_BUILD DEBUG - for debug code in debug build. To disable debug code use DEBUG1 rename OVERRIDETOSTRING - enables ToString() overrides for AST model (must be enabled in LinqToDB.csproj by renaming existing OVERRIDETOSTRING1` define) Test projects Project \\ Target .NET 4.7.2 .NET Core 2.1 .NET Core 3.1 .NET 5.0 .\\Tests\\Base\\Tests.Base.csproj √ √ √ √ .\\Tests\\FSharp\\Tests.FSharp.fsproj √ √ √ √ .\\Tests\\Linq\\Tests.csproj √ √ √ √ .\\Tests\\Model\\Tests.Model.csproj √ √ √ √ .\\Tests\\Tests.Benchmarks\\Tests.Benchmarks.csproj √ √ √ √ .\\Tests\\Tests.Playground\\Tests.Playground.csproj √ √ √ √ .\\Tests\\Tests.T4\\Tests.T4.csproj √ √ √ √ .\\Tests\\VisualBasic\\Tests.VisualBasic.vbproj √ √ √ √ Allowed target defines: NETCOREAPP3_1 - netcoreapp3.1 target ifdef NETCOREAPP2_1 - netcoreapp2.1 target ifdef NET5_0 - net5.0 target ifdef NET472 - net472 target ifdef AZURE - for Azure Pipelines CI builds Building You can use the solution to build and run tests. Also you can build whole solution or library using the following batch files: .\\Build.cmd - builds all the projects in the solution for Debug, Release and Azure configurations .\\Compile.cmd - builds LinqToDB project for Debug and Release configurations .\\Clean.cmd - cleanups solution projects for Debug, Release and Azure configurations .\\Test.cmd - build Debug configuration and run tests for net472 , netcoreapp2.1 , netcoreapp3.1 and net5.0 targets. You can set other configuration by passing it as first parameter, disable test targets by passing 0 to second (for net472 ), third (for netcoreapp2.1 ), fourth (for netcoreapp3.1 ) or fifth (for net5.0 ) parameter and format (default:html) as 6th parameter. Example of running Release build tests for netcoreapp2.1 only with trx as output: test.cmd Release 0 1 0 0 0 trx Different platforms support Because of compiling for different platforms we do use: Conditional compilation. See supported defines above Implementing missing classes and enums. There are some under .\\Source\\LinqToDB\\Compatibility folder Branches master - current development branch for next release release - branch with the latest release Run tests NUnit3 is used as unit testing framework. Most of tests are run for all supported databases, and written in same pattern: [TestFixture] public class Test: TestBase // TestBase - base class, provides base methods and object data sources { // DataSourcesAttribute - implements NUnit IParameterDataSource to provide testcases for enabled database providers [Test] public void Test([DataSources] string context) { // TestBase.GetDataContext - creates new IDataContext // also supports creation of remote client and server // for remote contexts using(var db = GetDataContext(context)) { // Here is the most interesting // this.Person - list of persons, corresponding Person table in database (derived from TestBase) // db.Person - database table // So test checks that LINQ to Objects query produces the same result as executed database query AreEqual(this.Person.Where(_ => _.Name == \"John\"), db.Person.Where(_ => _.Name == \"John\")); } } } Configure data providers for tests DataSourcesAttribute generates tests for each enabled data provider. Configuration is taken from .\\Tests\\Linq\\DataProviders.json and .\\Tests\\Linq\\UserDataProviders.json (used first, if exists). Configuration file is used to specify user-specific settings such as connection strings to test databases and list of providers to test. The [User]DataProviders.json is a regular JSON file: UserDataProviders.json example (with description) { // .net framework 4.7.2 test configuration \"NET472\" : { // base configuration to inherit settings from // Inheritance rules: // - DefaultConfiguration, TraceLevel, Providers - use value from base configuration only if it is not defined in current configuration // - Connections - merge current and base connection strings \"BasedOn\" : \"LocalConnectionStrings\", // default provider, used as a source of reference data // LINQ to DB uses SQLite for it and you hardly need to change it \"DefaultConfiguration\" : \"SQLite.Classic\", // (optional) contains full or relative (from test assembly location) path to test baselines directory. // When path is set and specified directory exists - enables baselines generation for tests. \"BaselinesPath\": \"c:\\\\github\\\\linq2db.baselines\", // logging level // Supported values: Off, Error, Warning, Info, Verbose // Default level: Info \"TraceLevel\" : \"Error\", // list of database providers, enabled for current test configuration \"Providers\" : [ \"Access\", \"SqlCe\", \"SQLite.Classic\", \"SQLite.MS\", \"Northwind.SQLite\", \"Northwind.SQLite.MS\", \"SqlServer\", \"SqlServer.2014\", \"SqlServer.2012\", \"SqlServer.2012.1\", \"SqlServer.2008\", \"SqlServer.2008.1\", \"SqlServer.2005\", \"SqlServer.2005.1\", \"SqlAzure\", \"DB2\", \"Firebird\", \"Informix\", \"MySql\", \"MariaDB\", \"Oracle.Native\", \"Oracle.Managed\", \"PostgreSQL\", \"Sybase\", \"Northwind\", \"TestNoopProvider\" ], // list of test skip categories, disabled for current test configuration // to set test skip category, use SkipCategoryAttribute on test method, class or whole assembly \"Skip\" : [ \"Access.12\" ] }, // .net core 2.1 test configuration \"CORE21\" : { \"BasedOn\" : \"LocalConnectionStrings\", \"Providers\" : [ \"SQLite.MS\", \"Northwind.SQLite.MS\", \"SqlServer\", \"SqlServer.2014\", \"SqlServer.2012\", \"SqlServer.2012.1\", \"SqlServer.2008\", \"SqlServer.2008.1\", \"SqlServer.2005\", \"SqlServer.2005.1\", \"SqlAzure\", \"Firebird\", \"MySql\", \"MariaDB\", \"PostgreSQL\", \"Northwind\", \"TestNoopProvider\" ] }, // list of connection strings for all providers \"LocalConnectionStrings\": { \"BasedOn\" : \"CommonConnectionStrings\", \"Connections\" : { // override connection string for SqlAzure provider // all other providers will use default inherited connection strings from CommonConnectionStrings configuration \"SqlAzure\" : { \"Provider\" : \"System.Data.SqlClient\", \"ConnectionString\" : \"Server=tcp:xxxxxxxxx.database.windows.net,1433;Database=TestData;User ID=TestUser@zzzzzzzzz;Password=TestPassword;Trusted_Connection=False;Encrypt=True;\" } } } } To define your own configurations DO NOT EDIT DataProviders.json - create .\\Tests\\Linq\\UserDataProviders.json and define needed configurations. Tests execution depends on _CreateData.* tests executed first. Those tests recreate test databases and populate them with test data, so if you are going to run one test be sure to run _CreateData before it manually. Also - if your test changes database data, be sure to revert those changes (!) to avoid side effects for other tests. Continuous Integration We do run builds and tests with: Azure Pipelines pipelines/default.yml . It builds solution, generate and publish nugets and runs tests for: .Net 4.7.2 .Net Core 2.1 (Windows/Linux and MacOS) .Net Core 3.1 (Windows/Linux and MacOS) (currently for limited set of providers to reduce test time) .Net 5.0 (Windows/Linux and MacOS) (currently for limited set of providers to reduce test time) For more details check readme CI builds are done for all branches and PRs. Tests run for all branches and PRs except release branch Nugets publishing to Azure feeds enabled only for branch Nugets publishing to Nuget.org enabled only for release branch Skip CI build If you want to skip building commit by CI (for example you have changed *.md files only) check this message . Publishing packages \"Nightly\" builds packages are published to Azure feeds for each successful build of master branch. Release packages are published to Nuget.org for each successful build of release branch. Building releases Update Release Notes and create empty entry for vNext release Create PR from master to release branch, in comments add @testers to notify all testers that we are ready to release Wait few days for feedback from testers and approval from contributors Merge PR Tag release Update versions in master branch (this will lead to publish all next master builds as new version RC): in .\\azure-pipelines.yml set assemblyVersion and nugetVersion parameters to next version. Always use next minor version and change it to major only before release, if it should be new major version release Process In general you should follow simple rules: Development rules and regulations, code style Do not add new features without tests Avoid direct pushes to master and release branches To fix some issue or implement new feature create new branch and make pull request after you are ready to merge or create pull request as work-in-progress pull request. Merge your PR only after contributors' review. If you do have repository write access, it is recommended to use central repository instead of fork Do not add new public classes, properties, methods without XML documentation on them Read issues and help users Do not EF :) See also Issue reporting"
  },
  "articles/project/How-can-i-help.html": {
    "href": "articles/project/How-can-i-help.html",
    "title": "How can I help? | Linq To DB (aka linq2db)",
    "keywords": "How can I help? Certainly the best help will be pull requests with fixes (please read this guide before creating PR). If you are not ready to start as developer you can: Write XML documentation. Yes, this thing we do really need - XML documentation with samples. You can take any undocumented public class or method and document it and make pull requests. Stories - you can tell your friends about linq2db, also you can post some samples and guides, it would be really great. Testing! It is really great if you can spent some of your time to run your projects tests with new RC version. Proof-reading. If you are native english speaker, it would be nice if you can spend some time proof-reading documentation. Can run Linq To DB tests on DB2 z/OS database? Ping us here . Testing how to Open new issue \"Invite me to testers team\", we'll send you an invitation. Before each official release new PR would be created with notification to all team members. Next you need to update to the latest RC package from Azure Artifacts feed and run your tests. If something is wrong please report us and if everything is alright just approve PR."
  },
  "articles/project/Issue-reporting.html": {
    "href": "articles/project/Issue-reporting.html",
    "title": "How to report an issue | Linq To DB (aka linq2db)",
    "keywords": "How to report an issue To help you with your problem we need to know: linq2db version you are using Database you are using Code sample, demonstrating the problem & result SQL query (if any) Explain what is wrong Certainly, the best way of reporting an issue would be the Pull Request with test, demonstrating an issue and fix. Or just the test. Please, when making such PR use data model from Tests.Model project. If your query is not obvious and it is not clear how to write minimal reproducing sample, please read above about how to generate test sample. Generating the test This page describes how to generate NUnit test, demonstrating your issue. Cleanup C:\\Users\\[username]\\AppData\\Local\\Temp\\linq2db (if exists) Set LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = true; before your failing query, and LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = false; after. Execute your failing query. ExpressionTest.0.cs file would be generated in C:\\Users\\[username]\\AppData\\Local\\Temp\\linq2db . This would contain unit test with your query and POCO model. Attach this file to the issue. For example: LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = true; // Don't forget to trigger query execution by calling e.g. ToList() var q = db.GetTable<MyTable>().Where(_ => _.Id > 111).ToList(); LinqToDB.Common.Configuration.Linq.GenerateExpressionTest = false;"
  },
  "articles/releasenotes/2.0.0.html": {
    "href": "articles/releasenotes/2.0.0.html",
    "title": "v2.0.0 Release notes | Linq To DB (aka linq2db)",
    "keywords": "v2.0.0 Release notes General Changes Breaking Changes CTE Support Mapping MappingSchema.EntityDescriptorCreatedCallback Fluent Mapping Dynamic Columns Calculated Columns Inheritance Mapping Other Changes and Fixes SQL Generation Extensions Temp Tables API Bulk Copy Merge Schema Provider Other Changes and Fixes Provider-specific changes Access DB2 Firebird Informix MySQL and MariaDB Oracle PostgreSQL SAP HANA SQL CE Sybase/SAP ASE SQLite SQL Server Changes for developers I Use Entity Framework General Changes Please check the provider-specific change log as this section contains only provider-independent changes. Breaking Changes Changes to target frameworks Version 2.0 drops support for legacy frameworks: net4.0, Silverlight, and the Windows 8 Store. List of supported targets now includes: net45 netstandard1.6 netstandard2.0 netcoreapp2.0 The linq2db nuget package supports all of these targets. If you want to target .NET Core you don't need to use the the linq2db.core package. This package is now deprecated and will not be updated anymore. Who would be affected by this change: People who use one of the deprecated frameworks. They should continue to use version 1.x or migrate their projects to 2.0. Users of the linq2db.core package. They should update their Nuget references to use the linq2db package. Default enumeration mapping behavior changes for text columns Starting with version 2.0, LINQ To DB uses the ToString() method to create database values for enums and it is mapping them to text columns ( 1006 , 1071 ). Prior versions used numeric representation of enumeration value, converted to string. How would I know if I'm affected by this change? You are affected if you have text columns mapped to enumeration without explicit field mappings. See the following example: // enums used like this are not affected because they have // explicit mappings from enum fields to database values public enum GoodEnum { [MapValue(\"1\")] First, [MapValue(\"Second\")] Second } // enums used like this would behave differently in version 2.0 public enum BadEnum { // v1.x: \"0\" used as a database value // v2: \"First\" used as a database value First, // v1.x: \"1\" used as a database value // v2: \"Second\" used as a database value Second } We would like to stress that it is generally a bad idea to not have explicit enumeration field mappings as you depend on implicit library behavior. Non-explicit behavior is subject to change in future versions. I'm affected. What should I do? First of all you can re-enable old behavior using following configuration flag: Configuration.UseEnumValueNameForStringColumns = false; But we recommend to add explicit mappings to your enumeration. CTE Support This release adds native support for common table expressions, including recursive CTE ( 534 , 890 ). You can read more about this feature here . Mapping MappingSchema.EntityDescriptorCreatedCallback This new callback could be used to modify entity mapping descriptor after creation (1074) . E.g. you can use it to change columns name notation to snake-case. ms.EntityDescriptorCreatedCallback = (mappingSchema, entityDescriptor) => { // let's imagine we have ToSnakeCase string // extension method somewhere in our project entityDescriptor.TableName = entityDescriptor.TableName.ToSnakeCase(); foreach (var entityDescriptorColumn in entityDescriptor.Columns) { entityDescriptorColumn.ColumnName = entityDescriptorColumn.ColumnName.ToSnakeCase(); } }; Fluent Mapping Custom join predicate expression support for associations 961 fluentBuilder .Entity<Entity>() .Association( e => e.AssociationProperty, (thisSide, otherSide) => thisSide.Id == otherSide.ID1); Other Changes and Fixes complex types mapping fixed (1005) Dynamic Columns This new feature will allow you to use dynamic columns in your queries ( 507 , 744 , 964 , 1083 ). Check this PR for more details. Calculated Columns You can use expressions to define calculated columns using IsColumn property of ExpressionMethodAttribute attribute (1004) . [Table] public class Entity { // normal read/write columns [Column] public string FirstName { get; set; } [Column] public string LastName { get; set; } // read-only expression-based property [ExpressionMethod(nameof(FullNameExpr), IsColumn = true)] public string FullName { get; set; } private static Expression<Fun<Entity, string>> FullNameExpr() { return e => e.LastName + \", \" + e,FirstName; } } Inheritance Mapping fixed incorrect query filter generation for left join associations for entities with inheritance mapping (956) fixed exception when inherited entity selected into property of base type (1046) Update / Delete / Insert / InsertOrReplace extensions will properly recognize inherited values when passed as parameter of base type. Important: entities without inheritance mapping not affected by this change and query generation will use parameter type as before (1017) LoadWith fixed to properly load derived entities (994) fixed several issues with type conversion in expressions between base and derived types ( 1057 , 1065 ) fixed exception when LoadWith called for nullable reference to entity with inheritance mapping (996) Other Changes and Fixes fixed MappingSchema converters were ignored for enums (1006) fixed issue when adding new metadata reader to MappingSchema.Default could result in previously added readers being ignored (1066) default char mapping will now use Length = 1 (1091) improved support of interfaces (1099) SQL Generation CROSS/OUTER APPLY support For databases that support APPLY joins you can disable this functionality using following flag: // set to true by default // v2.0-beta5 has typo in property name : PrefereApply Configuration.PreferApply = false; Other Changes and Fixes fixed exception generated for some cases when joins optimization enabled and table hints used (949) fixed SQL generation regression for some complex subqueries (928) fixed invalid SQL generated for empty select combined with Take / Skip (817) fixed issue when joined subquery condition were moved to outer query condition (922) Extensions New In / NotIn extension methods SqlExtensions class contains new extension methods In / NotIn , applied to a value. In general it is just a reverse Contains methods to better mimic SQL. // filter table by id // old reverse logic approach db.Table.Where(r => ids.Contains(r.Id)); // now it could be written like you do it in raw SQL db.Table.Where(r => r.Id.In(ids)); New *Join extension methods ( 1076 , 1088 ) Additional extension methods added to define join using two queryable sources, join predicate expression and result selector. Following methods added: InnerJoin , LeftJoin , RightJoin , FullJoin and CrossJoin . // left outer join db.Parent.LeftJoin( db.Child, (p, c) => p.ParentID == c.ParentID, (p, c) => new { ParentID = p.ParentID, ChildID = (int?)c.ChildID }); // cross join - note that join condition is not applicable here db.Parent.CrossJoin( db.Child, (p, c) => new { ParentID = (int?)p.ParentID, ChildID = (int?)c.ChildID }); Added missing support for table, schema/owner and database name parameters in some methods Those optional parameters now available also for following IDataContext extension methods: InsertOrReplace* InsertWith*Identity* Update* Delete* Parameters creation in extension builders You can add new query parameters from extension builders (973) . class InWithParametersBuilder : Sql.IExtensionCallBuilder { public void Build(Sql.ISqExtensionBuilder builder) { // get extension parameter var values = builder.GetValue<System.Collections.IEnumerable>(\"values\"); // tell linq2db that query uses non-static parameters builder.Query.IsParameterDependent = true; foreach (var value in values) { // create query parameter var param = new SqlParameter(value?.GetType() ?? typeof(object), \"p\", value); // add parameter (note that we can add multiple parameters for one placeholder) builder.AddParameter(\"values\", param); } } } public static class Extensions { // note that for values we specify comma as parameters delimiter [Sql.Extension(\"{field} IN ({values, ', '})\", IsPredicate = true, BuilderType = typeof(InWithParametersBuilder))] public static bool In<T>(this Sql.ISqlExtension ext, [ExprParameter] T field, params T[] values) { throw new NotImplementedException(); } } New extensibility points LinqExtensions.ProcessSourceQueryable delegate You can use it to preprocess IQueryable sources, passed to other APIs (1116) . E.g. it is used by our other project https://github.com/linq2db/linq2db.EntityFrameworkCore to replace EntityFramework queryable provider with LINQ To DB provider. LinqExtensions.ExtensionsAdapter interface You can override implementation of LINQ To DB async methods using this interface. Note that right now it is all-or-nothing interface, so you need to implement all methods you use, even if you want to change behavior of only one method. In this case you need to call original LINQ To DB method for others. IEntityServices.OnEntityCreated delegate This delegate will be called after entity instantiation for contexts that implement IEntityServices interface (1112) . It allows you to pre-process or even replace created entity. LINQ To DB already implements this interface for default contexts: DataContext , DataConnection and RemoteDataContextBase classes. using (var db = new DataConnection()) { var cnt = 0; // just count how many User entities were instantiated db.OnEntityCreated += e => { if (e.Entity is User) cnt++; } // do some queries } DataContext.OnTraceConnection callback Added trace callback for DataContext class similar to one that already exist on DataConnection class (1131) . Temp Tables API New API to create temporary tables added to IDataContext as a set of CreateTempTable() extension methods. Using this API you can create queryable table, populate it with data, perform queries and then delete by disposing it. Example below shows you how can you use merge with client-side source in more effective way by adding those records into temp table and merge them into main table. public void MergePersons(this IDataContext db, IEnumerable<Person> persons) { // create new table for existing Person mapping and populate it using bulk copy using (var tmp = db.CreateTempTable<Person>(persons, tableName: \"PersonTemp\")) { db.Persons // target table .Merge() .Using(tmp) // use data from temp table .OnTargetKey() .InsertWhenNotMatched() // insert new records .UpdateWhenMatched() // update known records .DeleteWhenNotMatchedBySource() // delete others .Merge(); } // here dispose will delete temp table } API allows you: specify new table, owner/schema, database name using corresponding parameters populate table using data from IQueryable source parameter populate table using bulk copy from IEnumerable source parameter and BulkCopyOptions adjust entity mapping for temporary table using fluent mapping delegate using setTable parameter call some action on created table before populating it with data using action parameter Bulk Copy Documentation New article created for BulkCopy API. It still miss documentation on some options, but most important information is already here. It will be improved in next releases. KeepIdentity option KeepIdentity option were documented and existing implementations tested/fixed to follow it (1037) . Setting this option to true for RowByRow copy mode was never supported and if you have it set to true - starting from version 2.0 it will start throwing exception instead of silently ignoring it. Check copy mode support table to see what mode actually used for your provider, as BulkCopy will downgrade copy mode, if requested one is not supported by provider. Merge Partial projections in source query improvements Now merge will properly detect and throw exception when source query element type contains more fields than query returns. class Person { [PrimaryKey, Column, Identity] public int Id { get; set; } [Column] public string FirstName { get; set; } [Column] public string LastName { get; set; } [Column] public string Title { get; set; } } // bad query db.Persons.Merge() // note that Id and Title columns is not selected by query .Using(db.NewPersons.Select(p => new Person() { FirstName = p.LastName, LastName = p.FirstName })) // will throw exception that Id key field missing in source .OnTargetKey() // will throw exception that Title field missing in source .InsertWhenNotMatched(s => new Person() { Title = s.Title }) .Merge(); Other Changes and Fixes CROSS JOIN and SelectMany support in source query (896) Merge call will not be available anymore if you didn't specified any operations yet fixed exception of empty local source with source type != target type (1153) Schema Provider Requesting schema for procedures and functions will wrap it internally in transaction with rollback, when called without transaction. This is done to avoid situations when some providers execute (sic!) procedures instead of just returning their schema. Taking into account such bugs it is recommended to never wrap schema provider calls into transaction and let LINQ To DB handle it. Other Changes and Fixes errors during mapping of data from database to mapping class field on selects will now be wrapped into LinqToDBException with details what field failed with original error in InnerException (1065) fixed issue when selected of NULL value using SelectMany method could have resulted in default(T) value for value types even with cast to T? (1012) fixed exception passing binary data over WCF (925) spelling error fixed for SchemaProvider.ForeignKeyInfo (941) enforce server-side evaluation of Sql.Lower / Sql.Upper functions (819) fixed case when async code could be blocked on synchronous Connection.Open call (1023) fixed support for type casts in LoadWith expression (1069) fixed issue when insert query with sub-query data source will fail on next calls if it has nullable parameter and first call uses null for parameter value (1098) T4.Models repository was obsolete project and moved to linq2db repo removed use of database object owner name from many APIs to reduce confusion with having owner and schema overrides at the same time, meaning the same concept T4 templates support in .NET Core projects (1067) new DataConnection.GetRegisteredProviders method to return list of all registered data providers Provider-specific changes Access handle exceptions from OleDb provider on schema read calls when ACE provider used (10) schema provider will now return system tables too ( TableInfo.IsProviderSpecific == true ) (1119) DB2 IBM.Data.DB2.Core provider support - .NET Core DB2 provider support was added. schema provider doesn't return procedures and functions if GetTables = false specified (1068) Firebird Default identifier quotation mode change Default identifier quotation mode changed from FirebirdIdentifierQuoteMode.None to FirebirdIdentifierQuoteMode.Auto (1120) . Normally it shouldn't affect anybody, as Auto mode will quote only invalid and reserved identifiers and they will not work anyway in None mode. Still, technically it could be a case for people who used quoted identifier in mappings. This is not something you should do, as mapping should contain raw identifers and quotation should be handled by LINQ To DB. If you did that we want to hear why you need to do it and how we can improve LINQ To DB in this area. If you are affected by this change, just restore old quotation mode using following code: FirebirdSqlBuilder.IdentifierQuoteMode = FirebirdIdentifierQuoteMode.None; Other changes and fixes BulkCopy will throw exception if KeepIdentity = true option specified as this option is not supported for Firebird (1037) . Check BulkCopy documentation for more details DropTable API will check if dropped objects exist before dropping them (1120) fixed support of seconds and milliseconds by Sql.DatePart function (967) detect and escape identifiers that use reserved words in FirebirdIdentifierQuoteMode.Auto mode ( 1095 , 1110 ) CreateTable / DropTable / TruncateTable will respect identifier quotation mode during query generation (1120) FirebirdDataProvider and FirebirdSqlOptimizer classes made public to help users override default implementation (1000) Informix Added delimited identifiers support MySQL and MariaDB Procedures and functions support by schema provider Schema provider for MySQL/MariaDB was updated to return procedures and functions (991) . Requesting procedures and functions from transaction will throw exception because schema provider need to wrap it internally into transaction to avoid procedure execution due to bug in provider (792) Oracle .NET Core provider support Support for beta version of .NET Core provider added. Other changes and fixes date literal generation fixes (969) schema provider doesn't return procedures and functions if GetTables = false specified (1068) detect and escape identifiers that use reserved words ( 1095 , 1110 ) PostgreSQL Native bulk copy support Version 2.0 adds support for native bulk copy method (935) . It is available through existing BulkCopy LINQ To DB API by specifying BulkCopyOptions.BulkCopyType = BulkCopyType.ProviderSpecific . It is a high-level wrapper over COPY command. Note that if you already used this mode for your bulk copy operations it could be a breaking change because now it will use COPY instead of silent fallback to BulkCopyType.MultipleRows in previous versions. Why it could be a breaking change? Because COPY command (we use BINARY mode) demands that proper column types specified and will fail if types doesn't match. You will need to add type information to your mappings or switch to other copy method. You can read about type requirements more in out new article about BulkCopy API here . Implementation supports COPY API from both npgsql 3.x and npgsql 4.x (4.0 brings breaking changes to API). Upsert support InsertOrUpdate API will use INSERT ON CONFLICT UPDATE statement for PostgreSQL 9.5+ instead of several statements on previous versions (948) . You will need to use PostgreSQLVersion.v95 provider version if you don't use version autodetect. Other changes and fixes improved support for some database types as a part of BulkCopy improvements (1091) fixed support for following types in CreateTable API: Int16 / Int64 identity columns, System.Linq.Binary , DataType.VarBinary , DataType.NChar(1) , char (1091) support for interval type mapping to both NpgsqlTimeSpan and NpgsqlInterval types (1091) SAP HANA BulkCopy KeepIdentity option support As a part of KeepIdentity option review, support for it added to SAP HANA provider. Check documentation for more details (1037) . Note that this option requires support from provider, so make sure you use recent provider version with enum HanaBulkCopyOptions having KeepIdentity field and not all versions had it. Otherwise BulkCopy will throw exception. SQL CE BulkCopy KeepIdentity option support As a part of KeepIdentity option review, support for it added to SQL CE provider. Check documentation for more details (1037) . Sybase MERGE insert operation will respect SkipOnInsert on identity fields when InsertWhenNotMatched() without custom setter used and allow database to generate field's value (914) requesting procedures and functions from schema provider will throw exception if called from transaction to avoid database corruction due to bug in provider (792) SQLite DateTime.AddDays() method to SQL conversion fixed (998) SQL Server varchar / nvarchar parameters will use 8000/4000 as length to improve query plans caching (989) MERGE will use parameters instead of literals for binary data in client-side (IEnumerable) source MERGE insert operation will respect SkipOnInsert on identity fields when InsertWhenNotMatched() without custom setter used and allow database to generate field's value (914) legacy MERGE API will not try to update identity columns anymore on update operation anymore (1007) fixed DropTable method not dropping table in another database (1030) fixed DateTime literal generation (1107) fixed incompatibility between BulkCopy and RetryingDbConnection (1135) Changes for developers Query AST was refactored. See SelectQuery class ( 936 , 938 ) Tests configuration changed format and use *DataProviders.json files instead of *DataPRoviders.txt. More details Project migrated to support latest C# version You can use new ActiveIssueAttribute to mark tests for non-fixed issues. This will allow to merge test-only PRs immediately SchemaProviderBase methods ToTypeName and ToValidName made public ( 944 , 963 ) SqlProviderFlags.CustomFlags list added to allow store custom provider flags (1154) expose SqlExtensions class for provider developers I Use Entity Framework (:feelsbadman:) Don't worry, check this new project we created recently. It is still an early prototype so don't expect it to work flawlessly. We will appreciate your feedback!"
  },
  "articles/sql/Bulk-Copy.html": {
    "href": "articles/sql/Bulk-Copy.html",
    "title": "Bulk Copy (Bulk Insert) | Linq To DB (aka linq2db)",
    "keywords": "Bulk Copy (Bulk Insert) Some database servers provide functionality to quickly insert large amounts of data into a table. The downside of this method is that each server has its own view on how this functionality should work; there is no standard interface for it. Overview To leverage the complexity of work with this operation, LINQ To DB provides a BulkCopy method. There are several overrides, but all they do the same thing - take data and operation options, then perform inserts and return operation status. How insert operations are performed internally depends on the level of provider support and the provided options. // DataConnectionExtensions.cs BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source) BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, int maxBatchSize, IEnumerable<T> source) BulkCopyRowsCopied BulkCopy<T>(this DataConnection dataConnection, IEnumerable<T> source) BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, BulkCopyOptions options, IEnumerable<T> source) BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, int maxBatchSize, IEnumerable<T> source) BulkCopyRowsCopied BulkCopy<T>(this ITable<T> table, IEnumerable<T> source) In addition, there are two asynchronous methods for each of the methods listed above; one accepting an IEnumerable<T> , and for .Net Standard, one accepting an IAsyncEnumerable<T> . Each method accepts an optional CancellationToken parameter to cancel the bulk copy operation. A few of the asynchronous signatures are listed below: Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this DataConnection dataConnection, BulkCopyOptions options, IEnumerable<T> source, CancellationToken cancellationToken = default) Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this DataConnection dataConnection, BulkCopyOptions options, IAsyncEnumerable<T> source, CancellationToken cancellationToken = default) Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this ITable<T> table, IEnumerable<T> source, CancellationToken cancellationToken = default) Task<BulkCopyRowsCopied> BulkCopyAsync<T>(this ITable<T> table, IAsyncEnumerable<T> source, CancellationToken cancellationToken = default) Insert methods and support by providers LINQ To DB allows you to specify one of four insert methods (or three, as Default is not an actual method): Default . LINQ To DB will choose the method automatically, based on the provider used. Which method to use for a specific provider can be overriden using the <PROVIDER_NAME>Tools.DefaultBulkCopyType property. RowByRow . This method just iterates over a provided collection and inserts each record using separate SQL INSERT commands. This is the least effective method, but some providers support only this one. MultipleRows . Similar to RowByRow . Inserts multiple records at once using SQL INSERT FROM SELECT or similar batch insert commands. This one is faster than RowByRow , but is only available for providers that support such INSERT operations. If the method is not supported, LINQ To DB will silently fall back to the RowByRow implementation. ProviderSpecific . Most effective method, available only for a few providers. Uses provider specific functionality, usually not based on SQL and could have provider-specific limitations, like transactions support. If the method is not supported, LINQ To DB will silently fall back to the MultipleRows implementation. Provider RowByRow MultipleRows ProviderSpecific Default Notes Microsoft Access Yes No No MultipleRows AccessTools.DefaultBulkCopyType IBM DB2 (LUW, zOS) Yes Yes Yes (will fallback to MultipleRows if called in transaction) MultipleRows DB2Tools.DefaultBulkCopyType Firebird Yes Yes No MultipleRows FirebirdTools.DefaultBulkCopyType IBM Informix Yes No Yes (when using IDS provider for DB2 or Informix. Will fallback to MultipleRows if called in transaction) ProviderSpecific InformixTools.DefaultBulkCopyType MySql / MariaDB Yes Yes Yes MultipleRows MySqlTools.DefaultBulkCopyType Oracle Yes Yes Yes MultipleRows OracleTools.DefaultBulkCopyType PostgreSQL Yes Yes Yes (read important notes below) MultipleRows PostgreSQLTools.DefaultBulkCopyType SAP HANA Yes No Yes MultipleRows SapHanaTools.DefaultBulkCopyType Microsoft SQL CE Yes Yes No MultipleRows SqlCeTools.DefaultBulkCopyType SQLite Yes Yes No MultipleRows SQLiteTools.DefaultBulkCopyType Microsoft SQL Server Yes Yes Yes ProviderSpecific SqlServerTools.DefaultBulkCopyType Sybase ASE Yes Yes Yes (using native provider. Also see ) MultipleRows SybaseTools.DefaultBulkCopyType Note that when using the provider-specific insert method, only MySql, PostgreSQL, SAP HANA, and Microsoft SQL Server support asynchronous operation; other providers will silently fall back to a synchronous operation. PostgreSQL provider-specific bulk copy For PostgreSQL, BulkCopy uses the BINARY COPY operation when the ProviderSpecific method specified. This operation is very sensitive to what types are used. You must always use the proper type that matches the type in target table, or you will receive an error from server (e.g. \"22P03: incorrect binary data format\" ). Below is a list of types that could result in error without an explicit type specification: decimal / numeric vs money . Those are two different types, mapped to System.Decimal . Default mappings will use the numeric type, so if your column is the money type, you should type it in mappings using DataType = DataType.Money or DbType = \"money\" hints. time vs interval . Those are two different types, mapped to System.TimeSpan . Default mappings will use the time type, so if your column is the interval type, you should type it in mappings using a DbType = \"interval\" hint. Or use the NpgsqlTimeSpan type for intervals. any text types/ json vs jsonb . All those types are mapped to System.String (except character which is mapped to System.Char ). Default mappings will not work for jsonb column and you should type it in mappings using DataType = DataType.BinaryJson or DbType = \"jsonb\" hints. inet vs cidr . If you use NpgsqlInet type for the mapping column, it could be mapped to both inet and 'cidr' types. There is no default mapping for this type, so you should explicitly specify it using DbType = \"inet\" or DbType = \"cidr\" hints. Also for inet you can use IPAddress which will be mapped to the inet type. macaddr vs macaddr8 . Both types could be mapped to the same PhysicalAddress / String types, so you should explicitly specify the column type using DbType = \"macaddr\" or DbType = \"macaddr8\" hints. Even if you use a provider version without macaddr8 support, you should specify the hint or it will break after the provider updates to a newer version. date type. You should use the NpgsqlDate type in mappings or specify DataType = DataType.Date or DbType = \"date\" hints. time with time zone type needs the DbType = \"time with time zone\" hint. If you have issues with other types, feel free to create an issue. Options See BulkCopyOptions properties and support per-provider KeepIdentity option (default : false ) This option allows you to insert provided values into the identity column. It is supported by limited set of providers and is not compatible with RowByRow mode. Hence, if the provider doesn't support any other insert mode, the KeepIdentity option is not supported. This option is not supported for RowByRow because corresponding functionality is not implemented by LINQ To DB ; it could be added upon request. If you will set this option to true for an unsupported mode or provider, you will get a LinqToDBException . Provider Support Microsoft Access No IBM DB2 (LUW, zOS) Only for GENERATED BY DEFAULT columns Firebird No (you need to disable triggers manually, if you use generators in triggers) IBM Informix No MySql / MariaDB Yes Oracle Partial. Starting from version 12c it will work for GENERATED BY DEFAULT columns (as DB2), for earlier versions you need to disable triggers with generators (as Firebird). Note that for versions prior to 12c, no exception will be thrown if you will try to use it with KeepIdentity set to true and generated values will be used silently as LINQ To DB don't have Oracle version detection right now. This could be changed in future. PostgreSQL Yes SAP HANA Depends on provider version (HANA 2 only?) Microsoft SQL CE Yes SQLite Yes Microsoft SQL Server Yes Sybase ASE Yes See Also As an alternative to BulkCopy , a Merge operation could be used. It allows more flexibility but is not available for some providers and will be always slower than BulkCopy with native provider support."
  },
  "articles/sql/CTE.html": {
    "href": "articles/sql/CTE.html",
    "title": "Common Table Expression (CTE) | Linq To DB (aka linq2db)",
    "keywords": "Common Table Expression (CTE) Common Table Expression (CTE) support introduced for supporting advanced SQL techniques in LINQ To DB . See documentation for Transact SQL: WITH common_table_expression When CTEs are useful Reusing the same SQL part in complex query Recursive table processing Defining simple CTE CTE in LINQ To DB also implements IQueryable . Any IQueryable can be converted to CTE with the extension method AsCte(\"optional_name\") . var employeeSubordinatesReport = from e in db.Employee select new { e.EmployeeID, e.LastName, e.FirstName, NumberOfSubordinates = db.Employee .Where(e2 => e2.ReportsTo == e.ReportsTo) .Count(), e.ReportsTo }; var employeeSubordinatesReportCte = employeeSubordinatesReport .AsCte(\"EmployeeSubordinatesReport\"); The variable employeeSubordinatesReportCte can now be reused in other parts of linq query. var result = from employee in employeeSubordinatesReportCte from manager in employeeSubordinatesReportCte .LeftJoin(manager => employee.ReportsTo == manager.EmployeeID) select new { employee.LastName, employee.FirstName, employee.NumberOfSubordinates, ManagerLastName = manager.LastName, ManagerFirstName = manager.FirstName, ManagerNumberOfSubordinates = manager.NumberOfSubordinates }; You are not limited in the number of CTEs defined in a query, and they may reference each other. LINQ To DB will put them in the correct order and generate SQL with one limitation - there should be no circular references between CTEs . WITH [EmployeeSubordinatesReport] ( [ReportsTo], [EmployeeID], [LastName], [FirstName], [NumberOfSubordinates] ) AS ( SELECT [t2].[ReportsTo], [t2].[EmployeeID], [t2].[LastName], [t2].[FirstName], ( SELECT Count(*) FROM [Employees] [t1] WHERE [t1].[ReportsTo] IS NULL AND [t2].[ReportsTo] IS NULL OR [t1].[ReportsTo] = [t2].[ReportsTo] ) as [c1] FROM [Employees] [t2] ) SELECT [t3].[LastName] as [LastName1], [t3].[FirstName] as [FirstName1], [t3].[NumberOfSubordinates], [manager].[LastName] as [LastName2], [manager].[FirstName] as [FirstName2], [manager].[NumberOfSubordinates] as [NumberOfSubordinates1] FROM [EmployeeSubordinatesReport] [t3] LEFT JOIN [EmployeeSubordinatesReport] [manager] ON [t3].[ReportsTo] = [manager].[EmployeeID] Defining recursive CTE Recursive CTEs are special because they are allowed to reference themselves! Because of this special ability, you can use recursive CTEs to solve problems other queries cannot. As an example, recursive CTEs are really good at working with hierarchical data such as org charts for bill of materials. (Further reading: Recursive CTEs Explained ) CTEs have limitations that are not handled by LINQ To DB , so you have to be aware of them before start of usage - Guidelines for Defining and Using Recursive Common Table Expressions Since in the C# language we can not use a variable's reference in its own initialization expression, we have created a function that helps in defining such queries: GetCte<TCteProjection>(cte => ...) . TCteProjection is a required generic parameter that is needed for resolving the type of the lambda parameter. The following example shows how to define a CTE to calculate the employee level in the hierarchy: // defining class for representing Recursive CTE class EmployeeHierarchyCTE { public int EmployeeID; public string LastName; public string FirstName; public int? ReportsTo; public int HierarchyLevel; } using (var db = new NorthwindDB(context)) { var employeeHierarchyCte = db.GetCte<EmployeeHierarchyCTE>(employeeHierarchy => { return ( from e in db.Employee where e.ReportsTo == null select new EmployeeHierarchyCTE { EmployeeID = e.EmployeeID, LastName = e.LastName, FirstName = e.FirstName, ReportsTo = e.ReportsTo, HierarchyLevel = 1 } ) .Concat ( from e in db.Employee from eh in employeeHierarchy .InnerJoin(eh => e.ReportsTo == eh.EmployeeID) select new EmployeeHierarchyCTE { EmployeeID = e.EmployeeID, LastName = e.LastName, FirstName = e.FirstName, ReportsTo = e.ReportsTo, HierarchyLevel = eh.HierarchyLevel + 1 } ); }); var result = from eh in employeeHierarchyCte orderby eh.HierarchyLevel, eh.LastName, eh.FirstName select eh; var data = result.ToArray(); } Resulting SQL: WITH [employeeHierarchy] ( [EmployeeID], [LastName], [FirstName], [ReportsTo], [HierarchyLevel] ) AS ( SELECT [t1].[EmployeeID], [t1].[LastName], [t1].[FirstName], [t1].[ReportsTo], 1 as [c1] FROM [Employees] [t1] WHERE [t1].[ReportsTo] IS NULL UNION ALL SELECT [t2].[EmployeeID], [t2].[LastName], [t2].[FirstName], [t2].[ReportsTo], [eh].[HierarchyLevel] + 1 as [c1] FROM [Employees] [t2] INNER JOIN [employeeHierarchy] [eh] ON [t2].[ReportsTo] = [eh].[EmployeeID] ) SELECT [t3].[EmployeeID] as [EmployeeID2], [t3].[LastName] as [LastName2], [t3].[FirstName] as [FirstName2], [t3].[ReportsTo] as [ReportsTo2], [t3].[HierarchyLevel] FROM [employeeHierarchy] [t3] ORDER BY [t3].[HierarchyLevel], [t3].[LastName], [t3].[FirstName] Database engines that support CTE Database Engine Minimal version Firebird 2.1 MS SQL 2008 MySQL 8.0.1 Oracle 11g Release 2 PostgreSQL 8.4 SQLite 3.8.3 IBM DB2 8 IBM Informix 14.10 Known limitations Oracle and Firebird DML operations that use CTE are not completely implemented. Informix CTE are not yet implemented"
  },
  "articles/sql/Join-Operators.html": {
    "href": "articles/sql/Join-Operators.html",
    "title": "Joins | Linq To DB (aka linq2db)",
    "keywords": "Joins LINQ To DB supports all standard SQL join types: INNER, LEFT, FULL, RIGHT, CROSS JOIN. For join types that do not have a direct LINQ equivalent, such as a left join, we have a few examples further down of methods that are provided to cleanly write such joins. INNER JOIN Join operator on single column var query = from c in db.Category join p in db.Product on c.CategoryID equals p.CategoryID where !p.Discontinued select c; Using \"Where\" condition var query = from c in db.Category from p in db.Product.Where(pr => pr.CategoryID == c.CategoryID) where !p.Discontinued select c; Using \"InnerJoin\" function var query = from c in db.Category from p in db.Product.InnerJoin(pr => pr.CategoryID == c.CategoryID) where !p.Discontinued select c; Resulting SQL SELECT [c].[CategoryID], [c].[CategoryName], [c].[Description], [c].[Picture] FROM [Categories] [c] INNER JOIN [Products] [p] ON [c].[CategoryID] = [p].[CategoryID] WHERE [p].[Discontinued] <> 1 Join operator on multiple columns var query = from p in db.Product from o in db.Order join d in db.OrderDetail on new { p.ProductID, o.OrderID } equals new { d.ProductID, d.OrderID } where !p.Discontinued select new { p.ProductID, o.OrderID, }; Resulting SQL SELECT [t3].[ProductID] as [ProductID1], [t3].[OrderID] as [OrderID1] FROM ( SELECT [t1].[ProductID], [t2].[OrderID], [t1].[Discontinued] FROM [Products] [t1], [Orders] [t2] ) [t3] INNER JOIN [Order Details] [d] ON [t3].[ProductID] = [d].[ProductID] AND [t3].[OrderID] = [d].[OrderID] WHERE [t3].[Discontinued] <> 1 LEFT JOIN Join operator on single column var query = from c in db.Category join p in db.Product on c.CategoryID equals p.CategoryID into lj from lp in lj.DefaultIfEmpty() where !lp.Discontinued select c; Using \"Where\" condition var query = from c in db.Category from lp in db.Product.Where(p => p.CategoryID == c.CategoryID).DefaultIfEmpty() where !lp.Discontinued select c; Using \"LeftJoin\" function var query = from c in db.Category from p in db.Product.LeftJoin(pr => pr.CategoryID == c.CategoryID) where !p.Discontinued select c; Resulting SQL SELECT [c1].[CategoryID], [c1].[CategoryName], [c1].[Description], [c1].[Picture] FROM [Categories] [c1] LEFT JOIN [Products] [lj] ON [c1].[CategoryID] = [lj].[CategoryID] WHERE 1 <> [lj].[Discontinued] RIGHT JOIN Using \"RightJoin\" function var query = from c in db.Category from p in db.Product.RightJoin(pr => pr.CategoryID == c.CategoryID) where !p.Discontinued select c; Resulting SQL SELECT [t2].[CategoryID], [t2].[CategoryName], [t2].[Description], [t2].[Picture] FROM [Categories] [t2] RIGHT JOIN [Products] [t1] ON [t1].[CategoryID] = [t2].[CategoryID] WHERE 1 <> [t1].[Discontinued] FULL JOIN Using \"FullJoin\" function var query = from c in db.Category from p in db.Product.FullJoin(pr => pr.CategoryID == c.CategoryID) where !p.Discontinued select c; Resulting SQL SELECT [t2].[CategoryID], [t2].[CategoryName], [t2].[Description], [t2].[Picture] FROM [Categories] [t2] FULL JOIN [Products] [t1] ON [t1].[CategoryID] = [t2].[CategoryID] WHERE 1 <> [t1].[Discontinued] CROSS JOIN Using SelectMany var query = from c in db.Category from p in db.Product where !p.Discontinued select new {c, p}; Resulting SQL SELECT [t1].[CategoryID], [t1].[CategoryName], [t1].[Description], [t1].[Picture], [t2].[ProductID], [t2].[ProductName], [t2].[SupplierID], [t2].[CategoryID] as [CategoryID1], [t2].[QuantityPerUnit], [t2].[UnitPrice], [t2].[UnitsInStock], [t2].[UnitsOnOrder], [t2].[ReorderLevel], [t2].[Discontinued] FROM [Categories] [t1], [Products] [t2] WHERE 1 <> [t2].[Discontinued]"
  },
  "articles/sql/merge/Merge-API.html": {
    "href": "articles/sql/merge/Merge-API.html",
    "title": "Merge API | Linq To DB (aka linq2db)",
    "keywords": "Merge API This API available since linq2db 1.9.0. It superseeds previous version of API with very limited functionality. For migration from old API check link below. Supported Databases Microsoft SQL Server IBM DB2 Firebird Oracle Database Sybase/SAP ASE IBM Informix SAP HANA 2 Related Pages Background API Description Migration from old API guide Introduction Merge is an atomic operation to update table (target) content using other table (source). Merge API provides methods to build Merge command and execute it. Command could have following elements (availability depends on database engine, see [[support table|Merge-API-:-Background-Information-and-Providers-Support]] for more details): target. Required element. Could be a table or updateable view source. Required element. Could be a table, query or client-side collection match/on rule. Optional element. Defines rule to match target and source records. By default we match target and source by primary key columns ordered list of operations to perform for each match. At least one operation required operation condition. Optional element. Specify additional condition for operation execution. Merge Operations Merge operations could be splitted into three groups: Matched operations. Operations, executed for records, present in both target and source according to match rule. Not matched operations. Operations, executed for records, present only in source according to match rule. Not matched by source. Operations, executed for records, present only in target according to match rule. Each group of operations work with their own set of source and target records and could contain more than one operation. In this case each operation must have operation condition except last one, which could omit it and be applied to all remaining records. Operations within group must be ordered properly. Example You want to do following: update status of all orders in AwaitingConfirmation status to Confirmed and delete all orders with amount equal to 0 . Your merge operation will look like: db.Orders // start merge command .Merge() // use the same table for source .UsingTarget() // match on primary key columns .OnTargetKey() // first delete all records with 0 amount // we also can use source in condition because they reference the same record in our case .DeleteWhenMatchedAnd((target, source) => target.amount == 0) // for records, not handled by previous command, update records in AwaitingConfirmation status .UpdateWhenMatchedAnd( (target, source) => target.status == Status.AwaitingConfirmation, (target, source) => new Order() { status = Status.Confirmed }) // send merge command to database .Merge(); In example above, delete and update operations belong to the same match group so their order is important. If you will put Update before Delete your merge command will do something else: it will update all orders in AwaitingConfirmation status and for remaining orders will remove those with 0 amount. After merge execution you could receive confirmed orders with 0 amount in Orders table. Matched operations Because those operations executed for records, present in both target and source, they have access to both records. There are two operations in this group (plus one non-standard operation for Oracle): Update operation. This operation allows to update target record fields. Delete operation. This operation allows to delete target record. Update Then Delete operation. This is Oracle-only operation, which updates target record and then delete updated records (usually using delete predicate). Not matched operations Those operations executed for records, present only in source table, so they could access only target table properties. This group contains only one operation - Insert operation, which adds new record to target table. Not matched by source operations This is SQL Server-only extension, that allows to perform operations for records, present only in target table. This group contains same operations as Matched group with one distinction - operations could access only target record: Update By Source operation. Allows to update target table record. Delete By Source operation. Allows to delete target table record."
  },
  "articles/sql/merge/Merge-API-Background.html": {
    "href": "articles/sql/merge/Merge-API-Background.html",
    "title": "Merge API Background Information | Linq To DB (aka linq2db)",
    "keywords": "Merge API Background Information Merge API uses MERGE INTO command defined by SQL:2003 standard with updates in SQL:2008 . Additionally we support some non-standard extensions to this command. See specific database engine support information below. Later we plan to extend providers support by adding support for UPSERT -like commands. Basic syntax (SQL:2003) MERGE INTO <target_table> [[AS] <alias>] USING <source_data_set> [[AS] <alias>] ON <match_condition> -* one or both cases could be specified WHEN MATCHED THEN <update_operation> WHEN NOT MATCHED THEN <insert_operation> <update_operation> := UPDATE SET <column> = <value> [, <column> = <value>] <insert_operation> := INSERT (<column_list>) VALUES(<values_list>) Advanced syntax (SQL:2008 extensions) Multiple MATCH cases It is possible to perform different operations for records, matched by ON match condition by specifying extra conditions on WHEN statement: WHEN [NOT] MATCHED [AND <extra_condition>] THEN <match_specific_operation> DELETE operation DELETE operation could be used for WHEN MATCHED case. WHEN MATCHED [AND <extra condition>] THEN DELETE Links MERGE on wikibooks SQL grammar see SQL:2003 and SQL:2011 (sic! grammars) Supported Databases Microsoft SQL Server IBM DB2 Firebird Oracle Database Sybase/SAP ASE IBM Informix SAP HANA 2 General considerations Not all data types supported or have limited support for some providers right now if you use client-side source. Usually it will be binary types. Check notes for specific provider below. Microsoft SQL Server 2008+ Microsoft SQL Server supports Merge API starting from SQL Server 2008 release. It supports all features from SQL:2008 standard and adds support for two new operations, not available for other providers: Update by source operation Delete by source operation Those two operations allow to update or delete target record when no matching record found in source. Of course it means that only target record available in context of those two operations. Limitations: operation of each type can be used only once in merge command even with different predicates only up to three operations supported in single command Other notes: identity insert enabled for insert operation Links: MERGE INTO command IBM DB2 Note: merge implementation was tested only on DB2 LUW. DB2 supports all features from SQL:2008 standard. Limitations: doesn't support associations (joins) in match predicate Links: MERGE INTO DB2 z/OS 12 MERGE INTO DB2 iSeries 7.3 MERGE INTO DB2 LUW 11.1 Firebird Firebird 2.1-2.5 supports all features from SQL:2003 standard. Firebird 3.0 supports all features from SQL:2008 standard. Limitations: update of fields, used in match condition could lead to unexpected results in Firebird 2.5 very small double values in client-side source could fail BLOB and TIMESTAMP mapped to TimeSpan will not work with client-side source if null values mixed with non-null values Links: Firebird 2.5 MERGE INTO Firebird 3.0 MERGE INTO (PDF;Russian) Oracle Database Oracle supports SQL:2003 features and operation conditions from SQL:2008 . Instead of independent Delete operation it supports delete condition for Update operation, which will be applied only to updated records and work with updated values. To support this behavior, merge API supports Update Then Delete operation, that works only for Oracle. You also can use regular Update operation, but not Delete . For Delete operation you can use `UpdateWithDelete' with the same condition for update and delete. Limitations: Only two operations per command supported, where one of them should be Insert and second should be Update or UpdateWithDelete Delete operation not supported Associations in `Insert' setters not supported fields, used in match condition, cannot be updated command with empty enumerable source will not send command to database and return 0 immediately mixing nulls and non-null values for binary column for client-side source doesn't work Links: MERGE INTO Sybase/SAP ASE ASE supports all features from SQL:2008 standard Limitations: it is hard to name it just a limitation * server could crash on some merge queries associations in match condition not supported (undocumented) returned number of affected records could be (and usually is) more than expected Merge only with Delete operations doesn't work (undocumented) Some combinations of operations rise error with text that doesn't make any sense (undocumented): \" MERGE is not allowed because different MERGE actions are referenced in the same WHEN [NOT] MATCHED clause \", which is not true, because other commands with same set of operations just work command with empty enumerable source will not send command to database and return 0 immediately Other notes: identity insert enabled for insert operation Links: MERGE INTO ASE 15.7 MERGE INTO ASE 16 IBM Informix Informix supports all features from SQL:2003 standard and Delete operation from SQL:2008 . Limitations: associations not supported BYTE type (C# byte[] binary type) in client-side source leads to unexpected results for unknown reason Other notes: for enumerable source it could be required to specify database types on columns that contain null values if provider cannot infer them properly Links: MERGE INTO SAP HANA 2 SAP HANA 2 supports all features from SQL:2003 standard. Limitations: Update operation must be first if both Update and Insert operations used in command associations in Insert operation not supported command with empty enumerable source will not send command to database and return 0 immediately Links: MERGE INTO"
  },
  "articles/sql/merge/Merge-API-Description.html": {
    "href": "articles/sql/merge/Merge-API-Description.html",
    "title": "Merge API Description | Linq To DB (aka linq2db)",
    "keywords": "Merge API Description Merge API contains four groups of methods: Merge , MergeInto , Using , UsingTarget methods to configure merge command's source and target On , OnTargetKey methods to configure merge command's match condition InsertWhenNotMatched* , UpdateWhenMatched* , DeleteWhenMatched* , UpdateWhenNotMatchedBySource* , DeleteWhenNotMatchedBySource* , UpdateWhenMatched*ThenDelete methods to add operations to merge command Merge and MergeAsync methods to execute command against database To create and execute merge command you should first configure target, source and match conditions. Then you must add at least one operation to merge builder. After that you should call Merge method to execute command. Note that all operation methods returns new merge builder, so code like that: // WRONG var db.Table.Merge().UsingTarget().OnTargetKey().DeleteWhenMatched(); // wrong, it will not modify merge object, but will create new one merge.InsertWhenNotMatched(); // execute merge with only one command - Delete merge.Merge(); // CORRECT db.Table.Merge().UsingTarget().OnTargetKey().DeleteWhenMatched().InsertWhenNotMatched().Merge(); General notes on API All API parameters are required and cannot be null. If you what to skip some parameter, check for a method without it. If there is no such method - this parameter cannot be ommited. Validation Before command execution, linq2db will try to validate your command and throw LinqToDBException if it detects use of feature, unsupported by provider or general misconfiguration. It will not detect all issues, but will greatly reduce number of errors from user side. Also validation error contains message that points to error in your command. Database engine errors sometimes require research to understand what they mean in current specific context. Operations API Merge operations will be added to generated query in the same order as they were called on command builder, because it is possible to specify several operations that could match the same record using operation conditions. In such cases database engine choose first matching operation as a winner. Also dont forget to check what your database engine could [[support|Merge-API-:-Background-Information-and-Providers-Support]] to understand what API you can use. Methods Target and Source Configuration Methods Match Configuration Methods InsertWhenNotMatched* UpdateWhenMatched* DeleteWhenMatched* UpdateWhenNotMatchedBySource* DeleteWhenNotMatchedBySource* UpdateWhenMatched*ThenDelete Merge and MergeAsync Target and Source Configuration Methods // starts merge command and use table parameter as target IMergeableUsing<TTarget> Merge<TTarget>(this ITable<TTarget> target); // adds source query to merge, started by Merge() method IMergeableOn<TTarget, TSource> Using<TTarget, TSource>(this IMergeableUsing<TTarget> merge, IQueryable<TSource> source); // adds source collection to merge, started by Merge() method IMergeableOn<TTarget, TSource> Using<TTarget, TSource>(this IMergeableUsing<TTarget> merge, IEnumerable<TSource> source); // adds target as source to merge, started by Merge() method IMergeableOn<TTarget, TTarget> UsingTarget<TTarget>(this IMergeableUsing<TTarget> merge); // starts merge command using source query and target table IMergeableOn<TTarget, TSource> MergeInto<TTarget, TSource>(this IQueryable<TSource> source, ITable<TTarget> target); Those methods allow you to create merge builder and specify source and target. To do it you can use: MergeInto method, which setups both source and target Merge + Using `UsingTarget` method sequence, where target and source specified by separate method. Methods could accept following parameters: target Target table, that should be modified by merge command. source Source data set, that should be merged into target table. Could be a client-side collection, table or query. Match Configuration Methods // adds match condition using specified key from target and source record // Examples: // merge.On(target => new { target.Field1, target.Field2 }, source => new { source.Field1, source.Field2 }) // merge.On(target => target.Id, source => source.Id) IMergeable<TTarget, TSource> On<TTarget, TSource, TKey>(this IMergeableOn<TTarget, TSource> merge, Expression<Func<TTarget, TKey>> targetKey, Expression<Func<TSource, TKey>> sourceKey); // add match condition using boolean expression over target and source record IMergeable<TTarget, TSource> On<TTarget, TSource>(this IMergeableOn<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> matchCondition); // adds match condition using primary key columns IMergeable<TTarget, TTarget> OnTargetKey<TTarget>(this IMergeableOn<TTarget, TTarget> merge); On `OnTargetKey` adds match condition to merge command builder. Notes matchCondition should be used only for rows matching. Any source filters must be applied to source directly to avoid database engine-specific side-effects (e.g. see Oracle limitations). matchCondition or match using keys shouldn't match more than one source record to one target record. InsertWhenNotMatched IMergeable<TTarget, TTarget> InsertWhenNotMatched<TTarget>(this IMergeableSource<TTarget, TTarget> merge); IMergeable<TTarget, TTarget> InsertWhenNotMatchedAnd<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, bool>> searchCondition); IMergeable<TTarget, TSource> InsertWhenNotMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TSource, TTarget>> setter); IMergeable<TTarget, TSource> InsertWhenNotMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TSource, bool>> searchCondition, Expression<Func<TSource, TTarget>> setter) InsertWhenNotMatched takes insert operation options and returns new merge command builder with new operation. InsertWhenNotMatchedAnd method additionally takes operation condition expression. merge Merge command builder. Method will return new builder with new insert operation. It will not modify original object. searchCondition Operation execution condition. Operation without condition will be applied to all matching records. If there are multiple operations within same group - only last one allowed to have no condition. WhenNotMatched match group could contain only Insert operations. setter Record creation expression. Defines set ex InsertWhenNotMatched takes insert operation options and returns new merge command builder with new operation. InsertWhenNotMatchedAnd method additionally takes operation condition expression. pressions for values in new record. For methods without this parameters source record inserted into target (except fields marked with SkipOnInsert attribute or IsIdentity for provider without identity insert support). db.Table .Merge() .Using(source) .OnTargetKey() .InsertWhenNotMatched(source => new TargetRecord() { Field1 = 10, Field2 = source.Field2, Field3 = source.Field1 + source.Field2 }) .Merge(); UpdateWhenMatched IMergeable<TTarget, TTarget> UpdateWhenMatched<TTarget>(this IMergeableSource<TTarget, TTarget> merge); IMergeable<TTarget, TTarget> UpdateWhenMatchedAnd<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> searchCondition) IMergeable<TTarget, TSource> UpdateWhenMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, TTarget>> setter); IMergeable<TTarget, TSource> UpdateWhenMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition, Expression<Func<TTarget, TSource, TTarget>> setter); UpdateWhenMatched takes update operation options and returns new merge command builder with new operation. UpdateWhenMatchedAnd method additionally takes operation condition expression. merge Merge command builder. UpdateWhenMatched method will return new builder with new update operation. It will not modify original object. searchCondition Operation execution condition. Operation without condition will be applied to all matching records. If there are multiple operations within same group - only last one could omit condition. WhenMatched match group could contain only Update and Delete operations. setter Record update expression. Defines update expressions for values in target record. When not specified, source record values used to update target record (except fields marked with SkipOnUpdate or IsIdentity attributes). db.Table .Merge() .Using(source) .OnTargetKey() .UpdateWhenMatched((target, source) => new TargetRecord() { Field1 = target.Field10, Field2 = source.Field2, Field3 = source.Field1 + target.Field2 }) .Merge(); DeleteWhenMatched IMergeable<TTarget, TSource> DeleteWhenMatched<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge); IMergeable<TTarget, TSource> DeleteWhenMatchedAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition); DeleteWhenMatched takes delete operation options and returns new merge command builder with new operation. merge Merge command builder. DeleteWhenMatched method will return new builder with new delete operation. It will not modify original object. searchCondition Operation execution condition. Operation without condition will be applied to all matching records. If there are multiple operations within same match group - only last one could omit condition. WhenMatched match group could contain only Update and Delete operations. UpdateWhenNotMatchedBySource IMergeable<TTarget, TSource> UpdateWhenNotMatchedBySource<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TTarget>> setter); IMergeable<TTarget, TSource> UpdateWhenNotMatchedBySourceAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, bool>> searchCondition, Expression<Func<TTarget, TTarget>> setter); IMPORTANT: This method could be used only with SQL Server. UpdateWhenNotMatchedBySource takes update operation options and returns new merge command builder with new operation. merge Merge command builder. UpdateWhenNotMatchedBySource method will return new builder with new update operation. It will not modify original object. searchCondition Operation execution condition. Operation without condition will be applied to all matching records. If there are multiple operations within same group - only last one could omit condition. WhenNotMatchedBySource match group could contain only UpdateWhenNotMatchedBySource and DeleteWhenNotMatchedBySource operations. But due to SQL Server limitations you can use only one UpdateWhenNotMatchedBySource and DeleteWhenNotMatchedBySource operation in single command. setter Record update expression. Defines update expressions for values in target record. db.Table .Merge() .Using(source) .OnTargetKey() .UpdateWhenNotMatchedBySource(target => new TargetRecord() { Field1 = target.Field10, Field2 = target.Field2, Field3 = target.Field3 + 10 }) .Merge(); DeleteWhenNotMatchedBySource IMergeable<TTarget, TSource> DeleteWhenNotMatchedBySource<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge); IMergeable<TTarget, TSource> DeleteWhenNotMatchedBySourceAnd<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, bool>> searchCondition); IMPORTANT: This method could be used only with SQL Server. DeleteWhenNotMatchedBySource takes delete operation options and returns new merge command builder with new operation. merge Merge command builder. DeleteWhenNotMatchedBySource method will return new builder with new delete operation. It will not modify original object. searchCondition Operation execution condition. Operation without condition will be applied to all matching records. If there are multiple operations within same group - only last one could omit condition. WhenNotMatchedBySource match group could contain only UpdateWhenNotMatchedBySource and DeleteWhenNotMatchedBySource operations. But due to SQL Server limitations you can use only one UpdateWhenNotMatchedBySource and DeleteWhenNotMatchedBySource operation in single command. UpdateWhenMatchedThenDelete IMergeable<TTarget, TTarget> UpdateWhenMatchedThenDelete<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> deleteCondition); IMergeable<TTarget, TTarget> UpdateWhenMatchedAndThenDelete<TTarget>(this IMergeableSource<TTarget, TTarget> merge, Expression<Func<TTarget, TTarget, bool>> searchCondition, Expression<Func<TTarget, TTarget, bool>> deleteCondition); IMergeable<TTarget, TSource> UpdateWhenMatchedThenDelete<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, TTarget>> setter, Expression<Func<TTarget, TSource, bool>> deleteCondition); IMergeable<TTarget, TSource> UpdateWhenMatchedAndThenDelete<TTarget, TSource>(this IMergeableSource<TTarget, TSource> merge, Expression<Func<TTarget, TSource, bool>> searchCondition, Expression<Func<TTarget, TSource, TTarget>> setter, Expression<Func<TTarget, TSource, bool>> deleteCondition); IMPORTANT: This method could be used only with Oracle Database. UpdateWhenMatchedThenDelete method takes update and delete operation options and returns new merge command builder with new operation. merge Merge command builder. UpdateWhenMatchedThenDelete method will return new builder with new update with delete operation. It will not modify original object. searchCondition Update operation execution condition. Operation without condition will be applied to all matching records. Oracle doesn't support multiple commands in current match group. You can use only UpdateWhenMatchedThenDelete or UpdateWhenMatched in single command. setter Record update expression. Optional. Defines update expressions for values in target record. db.Table .Merge() .From(source) .OnTargetKey() .UpdateWhenMatchedThenDelete((target, source) => new TargetRecord() { Field1 = target.Field10, Field2 = source.Field2, Field3 = source.Field1 + target.Field2 }, (updatedTarget, source) => updatedTarget.Field3 > 100) .Merge(); deleteCondition Delete operation execution condition. Identifies updated records that should be deleted. Note that this condition applied to updated target record with new field values. Merge int Merge<TTarget, TSource>(this IMergeable<TTarget, TSource> merge); Task<int> MergeAsync<TTarget, TSource>(this IMergeable<TTarget, TSource> merge, CancellationToken token = default); Merge method builds and executes merge command against database and returns number of affected records. MergeAsync does the same job asynchronously. merge Merge command builder. Notes Merge returns number of affected records. Consult your database documentation for more details, but in general except SAP/Sybase ASE it is the same for all databases."
  },
  "articles/sql/merge/Merge-API-Migration.html": {
    "href": "articles/sql/merge/Merge-API-Migration.html",
    "title": "Migrating from old Merge API to new | Linq To DB (aka linq2db)",
    "keywords": "Migrating from old Merge API to new This page contains information how to replace old Merge API calls with new API calls. Breaking changes Old API consider empty source list as noop operation and returns 0 without request to database. New version allways send command to database because: it will help to find errors in your command it will fix by source operations for SQL Server, which make sense for empty source Exception: Oracle, Sybase and SAP HANA implementations still use noop approach due to too aggressive type checking. Code migration Old API has 4x2 Merge methods. One method accepts target table as first parameter, another - DataConnection instance. New API works only with tables as target so you will need to get table from data connection using following code: dataConnection.GetTable<TTable>() If you used tableName , databaseName or schemaName parameters, replace them with follwing calls on table: db.GetTable<T>() .TableName(tableName) .DatabaseName(databaseName) .SchemaName(schemaName); Method 1 Parameters tableName , databaseName and schemaName omitted. // Old API int Merge<T>(this DataConnection dataConnection, IQueryable<T> source, Expression<Func<T,bool>> predicate); int Merge<T>(this ITable<T> table, IQueryable<T> source, Expression<Func<T,bool>> predicate); // New API // You can (and should) remove .AsEnumerable() - it was added to copy old behavior db.GetTable<T>() .Merge() .Using(source.Where(predicate).AsEnumerable()) .OnTargetKey() .UpdateWhenMatched() .InsertWhenNotMatched() .DeleteWhenNotMatchedBySourceAnd(predicate) .Merge(); Method 2 Parameters tableName , databaseName and schemaName omitted. // Old API int Merge<T>(this DataConnection dataConnection, Expression<Func<T,bool>> predicate, IEnumerable<T> source) int Merge<T>(this ITable<T> table, Expression<Func<T,bool>> predicate, IEnumerable<T> source); // New API db.GetTable<T>() .Merge() .Using(source) .OnTargetKey() .UpdateWhenMatched() .InsertWhenNotMatched() .DeleteWhenNotMatchedBySourceAnd(predicate) .Merge(); Method 3 Parameters tableName , databaseName and schemaName omitted. // Old API int Merge<T>(this DataConnection dataConnection, bool delete, IEnumerable<T> source); int Merge<T>(this ITable<T> table, bool delete, IEnumerable<T> source); // New API // (delete = true) db.GetTable<T>() .Merge() .Using(source) .OnTargetKey() .UpdateWhenMatched() .InsertWhenNotMatched() .DeleteWhenNotMatchedBySource() .Merge(); // (delete = false) db.GetTable<T>() .Merge() .Using(source) .OnTargetKey() .UpdateWhenMatched() .InsertWhenNotMatched() .Merge(); Method 4 Parameters tableName , databaseName and schemaName omitted. // Old API int Merge<T>(this DataConnection dataConnection, IEnumerable<T> source); int Merge<T>(this ITable<T> table, IEnumerable<T> source); // New API db.GetTable<T>() .Merge() .Using(source) .OnTargetKey() .UpdateWhenMatched() .InsertWhenNotMatched() .Merge();"
  },
  "articles/sql/Query-Extensions.html": {
    "href": "articles/sql/Query-Extensions.html",
    "title": "Query Extensions | Linq To DB (aka linq2db)",
    "keywords": "Query Extensions LinqToDB contains different mechanisms to extend and customize generated SQL. Query Extensions are designed to extend SQL on clause and statement level such as table, join, query hints, etc. Common Hint Extensions The QueryExtensionScope enumeration defines a scope where this extension is applied to. Value Method Applied to Description None Path through methods IQueryable This type of extension should not generate SQL and can be used to implement path through methods such as AsSqlServer() that converts IQueryable sequence to ISqlServerSpecificQueryable . TableHint TableHint , With ITable Generates table hints. TablesInScopeHint TablesInScopeHint IQueryable This method applies provided hint to all the tables in scope of this method. It is supported by the same database providers as TableHint. IndexHint IndexHint ITable MySql supports both hint styles: Oracle Optimizer Hints and SqlServer Table Hints. The TableHint extension generates Oracle hints, whereas this extension supports SqlServer hint style. JoinHint JoinHint IQueryable Generates join hints. SubQueryHint SubQueryHint IQueryable Generates subquery or statement hints. Supported by PostgreSQL. QueryHint QueryHint IQueryable Generates statement hints. TableID method and Sql.SqlID class Some hints require references to table specifications or aliases. LinqToDB automatically generates table and subquery aliases, so the idea to use generated names for hints is definitely not the best. The TableID method assigns provided identifier to a table and this ID can be used later to generate references to the table. The following methods can be used as hint parameters to generate table references: Method Description Sql.TableAlias(\"id\") Generates table alias. Sql.TableName(\"id\") Generates table name. Sql.TableSpec(\"id\") Generates table specification. May include query block name. Naming Query Blocks Oracle and MySql table-level, index-level, and subquery optimizer hints permit specific query blocks to be named as part of their argument syntax. To create these names, use the following methods: AsSubQuery(\"qb_name\") QueryName(\"qb_name\") Examples Access var q = ( from p in db.Parent select p ) .QueryHint(AccessHints.Query.WithOwnerAccessOption); SELECT [p].[ParentID], [p].[Value1] FROM [Parent] [p] WITH OWNERACCESS OPTION MySql var q = ( from p in ( from p in db.Parent.TableID(\"Pr\") .TableHint(MySqlHints.Table.NoBka) .TableHint(MySqlHints.Table.Index, \"PK_Parent\") from c in db.Child.TableID(\"Ch\") .IndexHint(MySqlHints.Table.UseKeyForOrderBy, \"IX_ChildIndex\", \"IX_ChildIndex2\") select p ) .AsSubQuery(\"qq\") select p ) .QueryHint(MySqlHints.Query.NoBka, Sql.TableSpec(\"Pr\"), Sql.TableSpec(\"Ch\")) .QueryHint(MySqlHints.Query.SetVar, \"sort_buffer_size=16M\"); SELECT /*+ NO_BKA(p@qq) INDEX(p@qq PK_Parent) NO_BKA(p@qq, c_1@qq) SET_VAR(sort_buffer_size=16M) */ `p_1`.`ParentID`, `p_1`.`Value1` FROM ( SELECT /*+ QB_NAME(qq) */ `p`.`ParentID`, `p`.`Value1` FROM `Parent` `p`, `Child` `c_1` USE KEY FOR ORDER BY(IX_ChildIndex, IX_ChildIndex2) ) `p_1` Oracle var q = ( from p in ( from c in db.Child .TableHint(OracleHints.Hint.Full) .TableHint(OracleHints.Hint.Parallel, \"DEFAULT\") join p in db.Parent .TableHint(OracleHints.Hint.DynamicSampling, 1) .TableHint(OracleHints.Hint.Index, \"parent_ix\") .AsSubQuery(\"Parent\") on c.ParentID equals p.ParentID select p ) .AsSubQuery() select p ) .QueryHint(OracleHints.Hint.NoUnnest, \"@Parent\"); SELECT /*+ FULL(p_1.c_1) PARALLEL(p_1.c_1 DEFAULT) DYNAMIC_SAMPLING(t1@Parent 1) INDEX(t1@Parent parent_ix) NO_UNNEST(@Parent) */ p_1.\"ParentID\", p_1.\"Value1\" FROM ( SELECT p.\"ParentID\", p.\"Value1\" FROM \"Child\" c_1 INNER JOIN ( SELECT /*+ QB_NAME(Parent) */ t1.\"ParentID\", t1.\"Value1\" FROM \"Parent\" t1 ) p ON c_1.\"ParentID\" = p.\"ParentID\" ) p_1 PostgreSQL var q = ( from p in ( from p in ( from p in db.Parent from c in db.Child where c.ParentID == p.ParentID select p ) .SubQueryHint(PostgreSQLHints.ForUpdate) .AsSubQuery() where p.ParentID < -100 select p ) .SubQueryHint(PostgreSQLHints.ForShare) select p ) .SubQueryHint(PostgreSQLHints.ForKeyShare + \" \" + PostgreSQLHints.SkipLocked); SELECT p_1.\"ParentID\", p_1.\"Value1\" FROM ( SELECT p.\"ParentID\", p.\"Value1\" FROM \"Parent\" p, \"Child\" c_1 WHERE c_1.\"ParentID\" = p.\"ParentID\" FOR UPDATE ) p_1 WHERE p_1.\"ParentID\" < -100 FOR SHARE FOR KEY SHARE SKIP LOCKED SqlCe from p in db.Person .TableHint(SqlCeHints.Table.Index, \"PK_Person\") .With(SqlCeHints.Table.NoLock) select p; SELECT [p].[FirstName], [p].[PersonID], [p].[LastName], [p].[MiddleName], [p].[Gender] FROM [Person] [p] WITH (Index(PK_Person), NoLock) SQLite from p in db.Person.TableHint(SQLiteHints.Hint.IndexedBy(\"IX_PersonDesc\")) where p.ID > 0 select p; SELECT [p].[FirstName], [p].[PersonID], [p].[LastName], [p].[MiddleName], [p].[Gender] FROM [Person] [p] INDEXED BY IX_PersonDesc WHERE [p].[PersonID] > 0 SqlServer var q = ( from c in db.Child .TableHint(SqlServerHints.Table.SpatialWindowMaxCells(10)) .IndexHint(SqlServerHints.Table.Index, \"IX_ChildIndex\") join p in ( from t in db.Parent.With(SqlServerHints.Table.NoLock) where t.Children.Any() select new { t.ParentID, t.Children.Count } ) .JoinHint(SqlServerHints.Join.Hash) on c.ParentID equals p.ParentID select p ) .QueryHint(SqlServerHints.Query.Recompile) .QueryHint(SqlServerHints.Query.Fast(10)) .QueryHint(SqlServerHints.Query.MaxGrantPercent(25)); SELECT [p].[ParentID], [p].[Count_1] FROM [Child] [c_1] WITH (SPATIAL_WINDOW_MAX_CELLS=10, Index(IX_ChildIndex)) INNER HASH JOIN ( SELECT [t].[ParentID], ( SELECT Count(*) FROM [Child] [t1] WHERE [t].[ParentID] = [t1].[ParentID] ) as [Count_1] FROM [Parent] [t] WITH (NoLock) WHERE EXISTS( SELECT * FROM [Child] [t2] WHERE [t].[ParentID] = [t2].[ParentID] ) ) [p] ON [c_1].[ParentID] = [p].[ParentID] OPTION (RECOMPILE, FAST 10, MAX_GRANT_PERCENT=25) Database Specific Hint Extensions The extension methods above are common and can be used to generate SQL for all database providers. You will be responsible for generated SQL as LinqToDB will generate SQL based on what you pass as parameters. Besides, LinqToDB implements database specific hint extensions. These extensions are designed specially for specific providers in the type-safe way and are “provider friendly” (which means you can use different specific database hints applied for the same LINQ query and they will not conflict). C# var q = ( from p in db.Parent.TableID(\"pr\") .AsMySql() .NoBatchedKeyAccessHint() .IndexHint(\"PK_Parent\") from c in db.Child.TableID(\"ch\") .AsMySql() .UseIndexHint(\"IX_ChildIndex\") .AsOracle() .FullHint() .HashHint() .AsSqlCe() .WithNoLock() .AsSQLite() .NotIndexedHint() .AsSqlServer() .WithNoLock() .WithNoWait() join t in db.Patient.TableID(\"pt\") .AsSqlServer() .JoinLoopHint() on c.ParentID equals t.PersonID select t ) .QueryName(\"qb\") .AsAccess() .WithOwnerAccessOption() .AsMySql() .MaxExecutionTimeHint(1000) .BatchedKeyAccessHint(Sql.TableSpec(\"ch\")) .AsOracle() .ParallelHint(2) .NoUnnestHint(\"qb\") .AsPostgreSQL() .ForShareHint(Sql.TableAlias(\"pt\")) .AsSqlServer() .WithReadUncommittedInScope() .OptionRecompile() .OptionTableHint(Sql.TableAlias(\"pr\"), SqlServerHints.Table.ReadUncommitted) .OptionNoPerformanceSpool() ; SQL Access SELECT [t].[PersonID], [t].[Diagnosis] FROM ( SELECT [c_1].[ParentID] FROM [Parent] [p], [Child] [c_1] ) [t1] INNER JOIN [Patient] [t] ON ([t1].[ParentID] = [t].[PersonID]) WITH OWNERACCESS OPTION MySql SELECT /*+ QB_NAME(qb) NO_BKA(t1.p@qb) INDEX(t1.p@qb PK_Parent) MAX_EXECUTION_TIME(1000) BKA(t1.c_1@qb) */ `t`.`PersonID`, `t`.`Diagnosis` FROM ( SELECT `c_1`.`ParentID` FROM `Parent` `p`, `Child` `c_1` USE INDEX(IX_ChildIndex) ) `t1` INNER JOIN `Patient` `t` ON `t1`.`ParentID` = `t`.`PersonID` Oracle SELECT /*+ QB_NAME(qb) FULL(t1.c_1@qb) HASH(t1.c_1@qb) PARALLEL(2) NO_UNNEST(qb) */ t.\"PersonID\", t.\"Diagnosis\" FROM ( SELECT c_1.\"ParentID\" FROM \"Parent\" p, \"Child\" c_1 ) t1 INNER JOIN \"Patient\" t ON t1.\"ParentID\" = t.\"PersonID\" PostgreSQL SELECT /* qb */ t.\"PersonID\", t.\"Diagnosis\" FROM ( SELECT c_1.\"ParentID\" FROM \"Parent\" p, \"Child\" c_1 ) t1 INNER JOIN \"Patient\" t ON t1.\"ParentID\" = t.\"PersonID\" FOR SHARE OF t SqlCe SELECT /* qb */ [t].[PersonID], [t].[Diagnosis] FROM ( SELECT [c_1].[ParentID] FROM [Parent] [p], [Child] [c_1] WITH (NoLock) ) [t1] INNER JOIN [Patient] [t] ON [t1].[ParentID] = [t].[PersonID] SQLite SELECT /* qb */ [t].[PersonID], [t].[Diagnosis] FROM ( SELECT [c_1].[ParentID] FROM [Parent] [p], [Child] [c_1] NOT INDEXED ) [t1] INNER JOIN [Patient] [t] ON [t1].[ParentID] = [t].[PersonID] SqlServer 2005 SELECT /* qb */ [t].[PersonID], [t].[Diagnosis] FROM ( SELECT [c_1].[ParentID] FROM [Parent] [p] WITH (ReadUncommitted), [Child] [c_1] WITH (NoLock, NoWait, ReadUncommitted) ) [t1] INNER LOOP JOIN [Patient] [t] WITH (ReadUncommitted) ON [t1].[ParentID] = [t].[PersonID] OPTION (RECOMPILE) SqlServer 2008 SELECT /* qb */ [t].[PersonID], [t].[Diagnosis] FROM ( SELECT [c_1].[ParentID] FROM [Parent] [p] WITH (ReadUncommitted), [Child] [c_1] WITH (NoLock, NoWait, ReadUncommitted) ) [t1] INNER LOOP JOIN [Patient] [t] WITH (ReadUncommitted) ON [t1].[ParentID] = [t].[PersonID] OPTION (RECOMPILE, TABLE HINT(p, ReadUncommitted)) SqlServer 2019 SELECT /* qb */ [t].[PersonID], [t].[Diagnosis] FROM ( SELECT [c_1].[ParentID] FROM [Parent] [p] WITH (ReadUncommitted), [Child] [c_1] WITH (NoLock, NoWait, ReadUncommitted) ) [t1] INNER LOOP JOIN [Patient] [t] WITH (ReadUncommitted) ON [t1].[ParentID] = [t].[PersonID] OPTION (RECOMPILE, TABLE HINT(p, ReadUncommitted), NO_PERFORMANCE_SPOOL)"
  },
  "articles/sql/Window-Functions-(Analytic-Functions).html": {
    "href": "articles/sql/Window-Functions-(Analytic-Functions).html",
    "title": "| Linq To DB (aka linq2db)",
    "keywords": "Support of Window Functions also known as Analytic Functions in LINQ To DB is based on Oracle's Documentation and all mentioned functions are supported. Window functions are implemented as extension methods for static Sql.Ext property. For defining Partitioning and Ordering fluent syntax is used and it is closest as possible to original SQL syntax. C# Syntax: Sql.Ext.[Function]([Parameters]) .Over() .[PartitionPart] .[OrderByPart] .[WindowingPart] .ToValue(); Last function in method chain must be function ToValue() - it is a mark that method chain is finished and provides correct DataType for resulting columns. Example: var q = from p in db.Parent join c in db.Child on p.ParentID equals c.ParentID select new { Rank = Sql.Ext.Rank() .Over() .PartitionBy(p.Value1, c.ChildID) .OrderBy(p.Value1) .ThenBy(c.ChildID) .ThenBy(c.ParentID) .ToValue(), RowNumber = Sql.Ext.RowNumber() .Over() .PartitionBy(p.Value1, c.ChildID) .OrderByDesc(p.Value1) .ThenBy(c.ChildID) .ThenByDesc(c.ParentID) .ToValue(), DenseRank = Sql.Ext.DenseRank() .Over() .PartitionBy(p.Value1, c.ChildID) .OrderBy(p.Value1) .ToValue(), Sum = Sql.Ext.Sum(p.Value1) .Over() .PartitionBy(p.Value1, c.ChildID) .OrderBy(p.Value1) .ToValue(), Avg = Sql.Ext.Average<double>(p.Value1) .Over() .PartitionBy(p.Value1, c.ChildID) .OrderBy(p.Value1) .ToValue(), Count = Sql.Ext.Count(p.ParentID, Sql.AggregateModifier.All) .Over() .PartitionBy(p.Value1) .OrderBy(p.Value1) .Range.Between.UnboundedPreceding.And.CurrentRow .ToValue(), }; var res = q.ToArray(); Resulting SQL: SELECT RANK() OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1], [c7].[ChildID], [c7].[ParentID]) as [c1], ROW_NUMBER() OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1] DESC, [c7].[ChildID], [c7].[ParentID] DESC) as [c2], DENSE_RANK() OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1]) as [c3], SUM([p].[Value1]) OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1]) as [c4], AVG([p].[Value1]) OVER(PARTITION BY [p].[Value1], [c7].[ChildID] ORDER BY [p].[Value1]) as [c5], COUNT(ALL [p].[ParentID]) OVER(PARTITION BY [p].[Value1] ORDER BY [p].[Value1] RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as [c6] FROM [Parent] [p] INNER JOIN [Child] [c7] ON [p].[ParentID] = [c7].[ParentID] Note There is no limitation in window functions usage. LINQ To DB will create SQL and run query, if function is not supported or some part of function is limited in particular Database - error will be thrown on database side. Functions mapping The following table contains list of supported Window Functions and LINQ To DB representation of these functions. Some functions have overloads for supporting full Window Functions syntax. SQL Function Name Linq2db Function Name AVG Sql.Ext.Average() CORR Sql.Ext.Corr() COUNT Sql.Ext.Count() COVAR_POP Sql.Ext.CovarPop() COVAR_SAMP Sql.Ext.CovarSamp() CUME_DIST Sql.Ext.CumeDist() DENSE_RANK Sql.Ext.DenseRank() FIRST Sql.Ext.[AggregateFunction].KeepFirst() FIRST_VALUE Sql.Ext.FirstValue() LAG Sql.Ext.Lag() LAST Sql.Ext.[AggregateFunction].KeepLast() LAST_VALUE Sql.Ext.LastValue() LEAD Sql.Ext.Lead() LISTAGG Sql.Ext.ListAgg() MAX Sql.Ext.Max() MEDIAN Sql.Ext.Median() MIN Sql.Ext.Min() NTH_VALUE Sql.Ext.NthValue() NTILE Sql.Ext.NTile() PERCENT_RANK Sql.Ext.PercentRank() PERCENTILE_CONT Sql.Ext.PercentileCont() PERCENTILE_DISC Sql.Ext.PercentileDisc() RANK Sql.Ext.Rank() RATIO_TO_REPORT Sql.Ext.RatioToReport() REGR_ (Linear Regression) Functions REGR_SLOPE Sql.Ext.RegrSlope() REGR_INTERCEPT Sql.Ext.RegrIntercept() REGR_COUNT Sql.Ext.RegrCount() REGR_R2 Sql.Ext.RegrR2() REGR_AVGX Sql.Ext.RegrAvgX() REGR_AVGY Sql.Ext.RegrAvgY() REGR_SXX Sql.Ext.RegrSXX() REGR_SYY Sql.Ext.RegrSYY() REGR_SXY Sql.Ext.RegrSXY() ROW_NUMBER Sql.Ext.RowNumber() STDDEV Sql.Ext.StdDev() STDDEV_POP Sql.Ext.StdDevPop() STDDEV_SAMP Sql.Ext.StdDevSamp() SUM Sql.Ext.Sum() VAR_POP Sql.Ext.VarPop() VAR_SAMP Sql.Ext.VarSamp() VARIANCE Sql.Ext.Variance() If you have found that your database supports function that is not listed in table above, you can easily create your own extension. Code samples are located in Sql.Analytic.cs Engines that support Window Functions Oracle MSSQL SQLite Postresql MariaDB MySQL 8 DB2 z/OS DB2 LUW DB2 iSeries Informix SAP HANA SAP ASE Firebird 3"
  },
  "articles/T4.html": {
    "href": "articles/T4.html",
    "title": "T4 Models | Linq To DB (aka linq2db)",
    "keywords": "T4 Models T4 models are used to generate POCO's C# code using your database structure. Installation First you should install one of packages with T4 templates into your project: Install-Package linq2db.<PROVIDER_NAME> Where <PROVIDER_NAME> is one of supported databases, for example: Install-Package linq2db.SqlServer This also will install: linq2db package T4 templates Example of model generation T4 template ( CopyMe.<DB_NAME>.tt.txt ) provider package (if it is available on nuget). Running After package installing you will see new LinqToDB.Templates folder in your project, this folder contains all needed T4 stuff to generate your model. To create a data model template copy CopyMe.<DB_NAME>.tt.txt file from LinqToDB.Templates project folder to desired location and rename it to file with .tt extension, e.g. MyModel.tt . For SDK projects see important notes below. Make sure that custom tool for your tt file set to TextTemplatingFileGenerator , otherwise it will not run or will give you error like error : Failed to resolve include text for file ...ttinclude Next you need to edit content of your .tt file. It contains following main sections: Configuration of database structure load process ( GetSchemaOptions object properties, read more about it below) Database structure load call - this is a call to LoadMetadata() function - it connects to your database and fetches all needed metadata (table structure, views, procedures and so on). Here you need to specify connection options for your database Customization of model generation process (read below) Call to GenerateModel() method to generate C# file with data model classes SDK project specifics Because SDK projects install nuget content files as references to files in nuget cache instead of copying them into project's folder, to run T4 templates you'll need create empty <choose_your_name>.tt file manually and paste content of CopyMe.<DB_NAME>.tt.txt to it. Also it is not recommended to alter *.ttinclude files directly as you will alter nuget cache content, which will affect any other SDK projects that use that package. Configuring schema load process Use the following initialization before you call the LoadMetadata() method. All schema load functionality configured using GetSchemaOptions property of LinqToDB.SchemaProvider.GetSchemaOptions type. Check this class for all available options. All loaded schema information is used for mappings generation, so if you want to limit generated mappings, it is the best place to do it. // Enables loading of tables and views information GetSchemaOptions.GetTables = true; // Enables loading of foreign key relations for associations GetSchemaOptions.GetForeignKeys = true; // Enables loading of functions and procedures information GetSchemaOptions.GetProcedures = true; // Enables use of System.Char type in generated model for text types // with length 1 instead of System.String GetSchemaOptions.GenerateChar1AsString = false; // Enables generation of provider-specific type for column or parameter mapping // when both common .net type and provider-specific type supported. GetSchemaOptions.PreferProviderSpecificTypes = false; // (string[]) List of schemas to select. // Option applied only if is is not empty GetSchemaOptions.IncludedSchemas = null; // (string[]) List of schemas to exclude from select. // Option applied only if is is not empty GetSchemaOptions.ExcludedSchemas = null; // (string) explicit name of default schema. // If not specified, use default schema for current connection. GetSchemaOptions.DefaultSchema = null; // Option makes sense only for providers that return schema for several databases // (string[]) List of databases/catalogs to select. // Option applied only if is is not empty GetSchemaOptions.IncludedCatalogs = null; // Option makes sense only for providers that return schema for several databases // (string[]) List of databases/catalogs to exclude from select. // Option applied only if is is not empty GetSchemaOptions.ExcludedCatalogs = null; // Custom filter for table/view schema load // Can be used to exclude views or tables from generation based in their descriptor. // This filter especially usefull, when you wan't to exclude table, referenced by other generated // tables using associations, or by procedures using excluded table as result. Doing it in filter // will automatically prevent associations generation and will trigger generation of procedure-specific // result classes. // LoadTableData type: // https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/SchemaProvider/LoadTableData.cs Func<LoadTableData, bool> GetSchemaOptions.LoadTable = null; // Comparer, used for IncludedSchemas/ExcludedSchemas/IncludedCatalogs/ExcludedCatalogs lookups StringComparer = StringComparer.OrdinalIgnoreCase; // Custom filter for procedure/function result schema loader. // Can be used to exclude schema load for functions, that generate error during schema load // Also check GenerateProcedureErrors option below // ProcedureSchema type: // https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/SchemaProvider/ProcedureSchema.cs GetSchemaOptions.LoadProcedure = (ProcedureSchema p) => true; // SQL Server 2012+ only // true: use sp_describe_first_result_set procedure to load procedure schema // false: use CommandBehavior.SchemaOnly to load procedure schema GetSchemaOptions.UseSchemaOnly = Common.Configuration.SqlServer.UseSchemaOnlyToGetSchema = false; // type: Func<ForeignKeySchema, string> // Defines custom association naming logic // https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/SchemaProvider/ForeignKeySchema.cs GetSchemaOptions.GetAssociationMemberName = null; // Procedures load progress reporting callback // Not applicable for T4 templates GetSchemaOptions.ProcedureLoadingProgress = (int total, int current) => {}; Configuring generation process Use the following initialization before you call the LoadMetadata() method. /* Global/generic options */ // Namespace to use for generated model NamespaceName = \"DataModels\"; // Enables generation of nullable reference type annotations EnableNullableReferenceTypes = false; // Disable CS8618 for uninitialized model columns and references of non-nullable reference type EnforceModelNullability = true; // Defines method to distinguish value types from reference types by type name // used by nullable reference types feature to detect reference types, when only type name available // If EnableNullableReferenceTypes enabled, but value type not recognized properly // you must provide your own resolver for unresolved types // IsValueType = typeName => { // switch (typeName) // { // case \"unresolved type name\": return true; // or false for reference type // default: return IsValueTypeDefault(typeName); // } // }; // by default resolve unknown types, ending with ? as value types and other types as reference types Func<string, boolean> IsValueType = IsValueTypeDefault; /* Data context configuration */ // (string) Name of base class for generated data context class. // Default: LinqToDB.Data.DataConnection. BaseDataContextClass = null; // (string) Name of data context class. // Default: <DATABASE_NAME> + \"DB\" DataContextName = null; // Enables generation of constructors for data context class. // Disabling could be usefull if you need to have custom implementation // of constructors in partial class GenerateConstructors = true; // Enforce generating DataContext constructors. // (string) Defines name of default configuration to use with default data context constructor DefaultConfiguration = null; // Enables generation of data context comment with database name, data source and database version GenerateDatabaseInfo = true; /* Schemas configuration */ // Enables generation of mappings for each schema in separate type GenerateSchemaAsType = false; // Contains mapping of schema name to corresponding schema class name // By default is empty and class name generated from schema name // Requires GenerateSchemaAsType=true set SchemaNameMapping = Dictionary<string,string>(); // Suffix, added to schema class name // Requires GenerateSchemaAsType=true set SchemaNameSuffix = \"Schema\" // Name of data context class for schema. // Requires GenerateSchemaAsType=true set SchemaDataContextTypeName = \"DataContext\" /* Table mappings configuration */ // (string) Specify base class (or comma-separated list of class and/or interfaces) for table mappings BaseEntityClass = null; // Enables generation of TableAttribute.Database property using database name, returned by schema loader GenerateDatabaseName = false; // Enables generation of TableAttribute.Database property with provided name value. // (string) If set, overrides GenerateDatabaseName behavior DatabaseName = null; // Enables generation of TableAttribute.Server property with provided name value. ServerName = null; // Enables generation of TableAttribute.Schema property for default schema IncludeDefaultSchema = true; // Enables generation of mappings for views GenerateViews = true; // Enables prefixing mapping classes for tables in non-default schema with schema name // E.g. MySchema.MyTable -> MySchema_MyTable // Applicable only if GenerateSchemaAsType = false PrefixTableMappingWithSchema = true; // Enables prefixing mapping classes for tables in default schema with schema name // E.g. dbo.MyTable -> dbo_MyTable // Applicable only if IncludeDefaultSchema = true && GenerateSchemaAsType = false && PrefixTableMappingWithSchema = true PrefixTableMappingForDefaultSchema = false; /* Columns comfiguration */ // Enables compact generation of column properties IsCompactColumns = true; // Enables compact generation of aliased column properties IsCompactColumnAliases = true; // Enables generation of DataType, Length, Precision and Scale properties of ColumnAttribute. // Could be overriden (except DataType) by options below GenerateDataTypes = false; // (boolean) Enables or disables generation of ColumnAttribute.Length property. // If null, GenerateDataTypes value is used GenerateLengthProperty = null; // (boolean) Enables or disables generation of ColumnAttribute.Precision property. // If null, GenerateDataTypes value is used GeneratePrecisionProperty = null; // (boolean) Enables or disables generation of ColumnAttribute.Scale property. // If null, GenerateDataTypes value is used GenerateScaleProperty = null; // Enables generation of ColumnAttribute.DbType property. GenerateDbTypes = false; // Enables generation of ObsoleteAttribute for column aliases GenerateObsoleteAttributeForAliases = false; /* Associations configuration */ // Defines type template for one-to-many association, when it is generated as a member of table mapping. // Some other options: \"{0}[]\", \"List<{0}>\". OneToManyAssociationType = \"IEnumerable<{0}>\"; // Enables generation of associations in table mappings GenerateAssociations = true; // Enables generation of back side of association. Applies to both table mapping members and extension // associations GenerateBackReferences = true; // Enables generation of associations as extension methods for related table mapping classes GenerateAssociationExtensions = false; // Defines method to generate name for \"one\" side of association Func<ForeignKey, string> GetAssociationExtensionSingularName = GetAssociationExtensionSingularNameDefault; // Defines method to generate name for \"many\" side of association Func<ForeignKey, string> GetAssociationExtensionPluralName = GetAssociationExtensionPluralNameDefault; /* Procedures and functions configuration */ // Enables use of existing table mappings for procedures and functions that return same results as // defined by mapping ReplaceSimilarTables = true; // If enabled, procedure schema load error will be generated as #error directive and fail build // of output file. Useful for initial generation to highlight places, that require review or // additional hints for schema loader // Also check GetSchemaOptions.LoadProcedure option above GenerateProcedureErrors = true; // If enabled, methods for procedures that return table will be generated with List<T> return type and // IMPORTANT: this will lead to load of all procedure results into list and could lead // to performance issues on big results GenerateProcedureResultAsList = false; // Enables stored procedure methods to accept generated context object or DataConnection type GenerateProceduresOnTypedContext = true; /* Other generated functionality */ // Enables generation of Find(pk fields) extension methods for record selection by primary key value GenerateFindExtensions = true; /* Pluralization services */ // Enables pluralization of table mapping classes PluralizeClassNames = false; // Enables singularization of table mapping classes SingularizeClassNames = true; // Enables pluralization of ITable<> properties in data context PluralizeDataContextPropertyNames = true; // Enables singularization of ITable<> properties in data context SingularizeDataContextPropertyNames = false; /* Naming configuration */ // Enables normalization of of type and member names. // Default normalization removes underscores and capitalize first letter. // Could be overriden using ToValidName option below. // By default doesn't normalize names without underscores. // see NormalizeNamesWithoutUnderscores setting NormalizeNames = true; // enables normalization of names without underscores. NormalizeNamesWithoutUnderscores = false; // Defines logic to convert type/member name, derived from database object name, to C# identifier. Func<string, bool, string> ToValidName = ToValidNameDefault; // Makes C# identifier valid by removing unsupported symbols and calling ToValidName Func<string, bool, string> ConvertToCompilable = ConvertToCompilableDefault; Provider specific options SQL Server // Enables generation of extensions for Free Text Search // // NOTE: this option is not needed anymore, as it generates old-style FTS support code and not recommeded for use // use new extesions from this PR: https://github.com/linq2db/linq2db/pull/1649 bool GenerateSqlServerFreeText = false; // Enables return value parameter generation for procedure. // By default generation of this parameter is disabled, because it is not possible to say (except examining // procedure code) if procedure uses this parameter or it always returns default value (0). // Usefull for procedures, that use \"RETURN code\" statements to returns integer values from procedure. void AddReturnParameter(string procedureName, string parameterName = \"@return\"); PostgreSQL // Enables generation of case-sensitive names of database objects bool GenerateCaseSensitiveNames = false; Sybase // Enables generation of Sybase sysobjects tables bool GenerateSybaseSystemTables = false; Example of generation process customization Use the following code to modify your model before you call the GenerateModel() method. // Replaces table mapping class name GetTable(\"Person\").TypeName = \"MyName\"; // Sets base class & interface for mapping class GetTable(\"Person\").BaseClass = \"PersonBase, IId\"; // Replaces property name for column PersonID of Person table with ID. GetColumn(\"Person\", \"PersonID\") .MemberName = \"ID\"; // Sets [Column(SkipOnUpdate=true)]. // Same logic can be used for other column options GetColumn(\"Person\", \"PasswordHash\").SkipOnUpdate = true; // Change column property type GetColumn(\"Person\", \"Gender\") .Type = \"global::Model.Gender\"; // or // TypeBuilder usually used when type name depends on name from model and could change before // code generation GetColumn(\"Person\", \"Gender\") .TypeBuilder = () => \"global::Model.Gender\"; // Replaces association property name GetFK(\"Orders\", \"FK_Orders_Customers\").MemberName = \"Customers\"; // Changes association type GetFK(\"Orders\", \"FK_Orders_Customers\").AssociationType = AssociationType.OneToMany; SetTable(string tableName, string TypeName = null, string DataContextPropertyName = null) .Column(string columnName, string MemberName = null, string Type = null, bool? IsNullable = null) .FK (string fkName, string MemberName = null, AssociationType? AssociationType = null) ; // Adds extra namespace to usings Model.Usings.Add(\"MyNamespace\"); // Replaces all property names for columns where name is '<TableName>' + 'ID' with 'ID'. foreach (var t in Tables.Values) foreach (var c in t.Columns.Values) if (c.IsPrimaryKey && c.MemberName == t.TypeName + \"ID\") c.MemberName = \"ID\"; Useful members and data structures Dictionary<string,Table> Tables = new Dictionary<string,Table> (); Dictionary<string,Procedure> Procedures = new Dictionary<string,Procedure>(); Table GetTable (string name); Procedure GetProcedure (string name); Column GetColumn (string tableName, string columnName); ForeignKey GetFK (string tableName, string fkName); ForeignKey GetForeignKey(string tableName, string fkName); public class Table { public string Schema; public string TableName; public string DataContextPropertyName; public bool IsView; public string Description; public string AliasPropertyName; public string AliasTypeName; public string TypeName; public Dictionary<string,Column> Columns; public Dictionary<string,ForeignKey> ForeignKeys; } public partial class Column : Property { public string ColumnName; // Column name in database public bool IsNullable; public bool IsIdentity; public string ColumnType; // Type of the column in database public DbType DbType; public string Description; public bool IsPrimaryKey; public int PrimaryKeyOrder; public bool SkipOnUpdate; public bool SkipOnInsert; public bool IsDuplicateOrEmpty; public string AliasName; public string MemberName; } public enum AssociationType { Auto, OneToOne, OneToMany, ManyToOne, } public partial class ForeignKey : Property { public string KeyName; public Table OtherTable; public List<Column> ThisColumns; public List<Column> OtherColumns; public bool CanBeNull; public ForeignKey BackReference; public string MemberName; public AssociationType AssociationType; } public partial class Procedure : Method { public string Schema; public string ProcedureName; public bool IsFunction; public bool IsTableFunction; public bool IsDefaultSchema; public Table ResultTable; public Exception ResultException; public List<Table> SimilarTables; public List<Parameter> ProcParameters; } public class Parameter { public string SchemaName; public string SchemaType; public bool IsIn; public bool IsOut; public bool IsResult; public int? Size; public string ParameterName; public string ParameterType; public Type SystemType; public string DataType; } IEquatable interface implementation (Equatable.ttinclude) There is Equatable.ttinclude template that could be used to implement IEquatable<T> interface. This template has following options: partial class Class { // Determines whether need to implement IEquatable interface for this class public bool IsEquatable = DefaultEquatable; } // Default value for Class.IsEquatable property bool DefaultEquatable = true; // Default field name for equality comparer implementation string EqualityComparerFieldName = \"_comparer\"; // Properties filter option to select equality members Func<Class, Property, bool> EqualityPropertiesFilter = EqualityPropertiesFilterDefault; // Default implementation of the EqualityPropertiesFilter option static bool EqualityPropertiesFilterDefault(Class cl, Property prop) { // Don't generate equality for non-table classes (e.g. data manager class) and associations // Compare only by primary keys return cl is Table && prop is Column col && col.IsPrimaryKey; }"
  },
  "index.html": {
    "href": "index.html",
    "title": "LINQ to DB | Linq To DB (aka linq2db)",
    "keywords": "LINQ to DB LINQ to DB is the fastest LINQ database access library offering a simple, light, fast, and type-safe layer between your POCO objects and your database. Architecturally it is one step above micro-ORMs like Dapper, Massive, or PetaPoco, in that you work with LINQ expressions, not with magic strings, while maintaining a thin abstraction layer between your code and the database. Your queries are checked by the C# compiler and allow for easy refactoring. However, it's not as heavy as LINQ to SQL or Entity Framework. There is no change-tracking, so you have to manage that yourself, but on the positive side you get more control and faster access to your data. In other words LINQ to DB is type-safe SQL . Development version nuget feed ( how to use ) Standout Features Rich Querying API: Explicit Join Syntax (In addition to standard LINQ join syntax.) CTE Support Bulk Copy/Insert Window/Analytic Functions Merge API Extensibility: Ability to Map Custom SQL to Static Functions Visit our blog and see Github.io documentation for more details. Code examples and demos can be found here or in tests . Release Notes page. Related linq2db and 3rd-party projects linq2db.EntityFrameworkCore (adds support for linq2db functionality in EF.Core projects) LINQPad Driver DB2 iSeries Provider ASP.NET CORE 2 Template ASP.NET CORE 3 Template with Angular ASP.NET CORE 5 Template PostGIS extensions for linq2db Notable open-source users: nopCommerce (starting from v4.30) - popular open-source e-commerce solution OdataToEntity - library to create OData service from database context SunEngine - site, blog and forum engine Unmantained projects: LinqToDB.Identity - ASP.NET Core Identity provider using linq2db IdentityServer4.LinqToDB - IdentityServer4 persistence layer using linq2db How to help the project No, this is not the donate link. We do need something really more valuable - your time . If you really want to help us please read this post . Let's get started From NuGet : Install-Package linq2db Configuring connection strings Passing Into Constructor You can simply pass provider name and connection string into DataConnection constructor: var db = new LinqToDB.Data.DataConnection( LinqToDB.ProviderName.SqlServer2012, \"Server=.\\;Database=Northwind;Trusted_Connection=True;Enlist=False;\"); Using Connection Options Builder You can configure connection options from code using LinqToDbConnectionOptionsBuilder class (check class for available options): // create options builder var builder = new LinqToDbConnectionOptionsBuilder(); // configure connection string builder.UseSqlServer(connectionString); // or using custom connection factory b.UseConnectionFactory( SqlServerTools.GetDataProvider( SqlServerVersion.v2017, SqlServerProvider.MicrosoftDataSqlClient), () => { var cn = new SqlConnection(connectionString); cn.AccessToken = accessToken; return cn; }); // pass configured options to data connection constructor var dc = new DataConnection(builder.Build()); Using Config File (.NET Framework) In your web.config or app.config make sure you have a connection string (check this file for supported providers): <connectionStrings> <add name=\"Northwind\" connectionString = \"Server=.\\;Database=Northwind;Trusted_Connection=True;Enlist=False;\" providerName = \"SqlServer\" /> </connectionStrings> Using Connection String Settings Provider Alternatively, you can implement custom settings provider with ILinqToDBSettings interface, for example: public class ConnectionStringSettings : IConnectionStringSettings { public string ConnectionString { get; set; } public string Name { get; set; } public string ProviderName { get; set; } public bool IsGlobal => false; } public class MySettings : ILinqToDBSettings { public IEnumerable<IDataProviderSettings> DataProviders => Enumerable.Empty<IDataProviderSettings>(); public string DefaultConfiguration => \"SqlServer\"; public string DefaultDataProvider => \"SqlServer\"; public IEnumerable<IConnectionStringSettings> ConnectionStrings { get { yield return new ConnectionStringSettings { Name = \"Northwind\", ProviderName = ProviderName.SqlServer, ConnectionString = @\"Server=.\\;Database=Northwind;Trusted_Connection=True;Enlist=False;\" }; } } } And later just set on program startup before the first query is done (Startup.cs for example): DataConnection.DefaultSettings = new MySettings(); ASP.NET Core See article . Now let's create a POCO class You can generate POCO classes from your database using T4 templates . These classes will be generated using the Attribute configuration . Demonstration video could be found here . Alternatively, you can write them manually, using Attribute configuration , Fluent configuration , or inferring. Attribute configuration using System; using LinqToDB.Mapping; [Table(Name = \"Products\")] public class Product { [PrimaryKey, Identity] public int ProductID { get; set; } [Column(Name = \"ProductName\"), NotNull] public string Name { get; set; } [Column] public int VendorID { get; set; } [Association(ThisKey = nameof(VendorID), OtherKey=nameof(Vendor.ID))] public Vendor Vendor { get; set; } // ... other columns ... } This approach involves attributes on all properties that should be mapped. This way lets you to configure all possible things linq2db ever supports. There one thing to mention: if you add at least one attribute into POCO, all other properties should also have attributes, otherwise they will be ignored: using System; using LinqToDB.Mapping; [Table(Name = \"Products\")] public class Product { [PrimaryKey, Identity] public int ProductID { get; set; } public string Name { get; set; } } Property Name will be ignored as it lacks Column attibute. Fluent Configuration This method lets you configure your mapping dynamically at runtime. Furthermore, it lets you to have several different configurations if you need so. You will get all configuration abilities available with attribute configuration. These two approaches are interchangeable in its abilities. This kind of configuration is done through the class MappingSchema . With Fluent approach you can configure only things that require it explicitly. All other properties will be inferred by linq2db: // IMPORTANT: configure mapping schema instance only once // and use it with all your connections that need those mappings // Never create new mapping schema for each connection as // it will seriously harm performance var mappingSchema = new MappingSchema(); var builder = mappingSchema.GetFluentMappingBuilder(); builder.Entity<Product>() .HasTableName(\"Products\") .HasSchemaName(\"dbo\") .HasIdentity(x => x.ProductID) .HasPrimaryKey(x => x.ProductID) .Ignore(x => x.SomeNonDbProperty) .Property(x => x.TimeStamp) .HasSkipOnInsert() .HasSkipOnUpdate() .Association(x => x.Vendor, x => x.VendorID, x => x.VendorID, canBeNull: false) ; //... other mapping configurations In this example we configured only three properties and one association. We let linq2db to infer all other properties which have to match with column names. However, other associations will not get configured automatically. There is a static property LinqToDB.Mapping.MappingSchema.Default which may be used to define a global configuration. This mapping is used by default if no mapping schema provided explicitly. The other way is to pass instance of MappingSchema into constructor alongside with connection string. Inferred Configuration This approach involves no attributes at all. In this case linq2db will use POCO's name as table name and property names as column names (with exact same casing, which could be important for case-sensitive databases). This might seem to be convenient, but there are some restrictions: linq2db will not infer primary key even if class has property called \"ID\"; it will not infer nullability of string properties as there is no way to do so; and associations will not be automatically configured. using System; using LinqToDB.Mapping; public class Product { public int ProductID { get; set; } public string Name { get; set; } public int VendorID { get; set; } public Vendor Vendor { get; set; } // ... other columns ... } This way linq2db will auto-configure Product class to map to Product table with fields ProductID , Name , and VendorID . POCO will not get ProductID property treated as primary key. And there will be no association with Vendor . This approach is not generally recommended. DataConnection class At this point LINQ to DB doesn't know how to connect to our database or which POCOs go with what database. All this mapping is done through a DataConnection class: public class DbNorthwind : LinqToDB.Data.DataConnection { public DbNorthwind() : base(\"Northwind\") { } public ITable<Product> Product => GetTable<Product>(); public ITable<Category> Category => GetTable<Category>(); // ... other tables ... } We call the base constructor with the \"Northwind\" parameter. This parameter (called configuration name ) has to match the name=\"Northwind\" we defined above in our connection string. We also have to register our Product class we defined above to allow us to write LINQ queries. And now let's get some data: using LinqToDB; using LinqToDB.Common; public static List<Product> All() { using (var db = new DbNorthwind()) { var query = from p in db.Product where p.ProductID > 25 orderby p.Name descending select p; return query.ToList(); } } Make sure you always wrap your DataConnection class (in our case DbNorthwind ) in a using statement. This is required for proper resource management, like releasing the database connections back into the pool. More details Selecting Columns Most times we get the entire row from the database: from p in db.Product where p.ProductID == 5 select p; However, sometimes getting all the fields is too wasteful so we want only certain fields, but still use our POCOs; something that is challenging for libraries that rely on object tracking, like LINQ to SQL. from p in db.Product orderby p.Name descending select new Product { Name = p.Name }; Composing queries Rather than concatenating strings we can 'compose' LINQ expressions. In the example below the final SQL will be different if onlyActive is true or false, or if searchFor is not null. public static List<Product> All(bool onlyActive, string searchFor) { using (var db = new DbNorthwind()) { var products = from p in db.Product select p; if (onlyActive) { products = from p in products where !p.Discontinued select p; } if (searchFor != null) { products = from p in products where p.Name.Contains(searchFor) select p; } return products.ToList(); } } Paging A lot of times we need to write code that returns only a subset of the entire dataset. We expand on the previous example to show what a product search function could look like. Keep in mind that the code below will query the database twice. Once to find out the total number of records, something that is required by many paging controls, and once to return the actual data. public static List<Product> Search( string searchFor, int currentPage, int pageSize, out int totalRecords) { using (var db = new DbNorthwind()) { var products = from p in db.Product select p; if (searchFor != null) { products = from p in products where p.Name.Contains(searchFor) select p; } totalRecords = products.Count(); return products.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList(); } } Joins This assumes we added a Category class, just like we did with the Product class, defined all the fields, and registered it in our DbNorthwind data access class. We can now write an INNER JOIN query like this: from p in db.Product join c in db.Category on p.CategoryID equals c.CategoryID select new Product { Name = p.Name, Category = c }; and a LEFT JOIN query like this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product { Name = p.Name, Category = c }; More samples are here Creating your POCOs In the previous example we assign an entire Category object to our product, but what if we want all the fields in our Product class, but we don't want to specify every field by hand? Unfortunately, we cannot write this: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select new Product(c); The query above assumes the Product class has a constructor that takes in a Category object. The query above won't work, but we can work around that with the following query: from p in db.Product from c in db.Category.Where(q => q.CategoryID == p.CategoryID).DefaultIfEmpty() select Product.Build(p, c); For this to work, we need a function in the Product class that looks like this: public static Product Build(Product product, Category category) { if (product != null) { product.Category = category; } return product; } One caveat with this approach is that if you're using it with composed queries (see example above) the select Build part has to come only in the final select. Insert At some point we will need to add a new Product to the database. One way would be to call the Insert extension method found in the LinqToDB namespace; so make sure you import that. using LinqToDB; using (var db = new DbNorthwind()) { db.Insert(product); } This inserts all the columns from our Product class, but without retrieving the generated identity value. To do that we can use InsertWith*Identity methods, like this: using LinqToDB; using (var db = new DbNorthwind()) { product.ProductID = db.InsertWithInt32Identity(product); } There is also InsertOrReplace that updates a database record if it was found by primary key or adds it otherwise. If you need to insert only certain fields, or use values generated by the database, you could write: using LinqToDB; using (var db = new DbNorthwind()) { db.Product .Value(p => p.Name, product.Name) .Value(p => p.UnitPrice, 10.2m) .Value(p => p.Added, () => Sql.CurrentTimestamp) .Insert(); } Use of this method also allows us to build insert statements like this: using LinqToDB; using (var db = new DbNorthwind()) { var statement = db.Product .Value(p => p.Name, product.Name) .Value(p => p.UnitPrice, 10.2m); if (storeAdded) statement.Value(p => p.Added, () => Sql.CurrentTimestamp); statement.Insert(); } Update Updating records follows similar pattern to Insert. We have an extension method that updates all the columns in the database: using LinqToDB; using (var db = new DbNorthwind()) { db.Update(product); } And we also have a lower level update mechanism: using LinqToDB; using (var db = new DbNorthwind()) { db.Product .Where(p => p.ProductID == product.ProductID) .Set(p => p.Name, product.Name) .Set(p => p.UnitPrice, product.UnitPrice) .Update(); } Similarly, we can break an update query into multiple pieces if needed: using LinqToDB; using (var db = new DbNorthwind()) { var statement = db.Product .Where(p => p.ProductID == product.ProductID) .Set(p => p.Name, product.Name); if (updatePrice) statement = statement.Set(p => p.UnitPrice, product.UnitPrice); statement.Update(); } You're not limited to updating a single record. For example, we could discontinue all the products that are no longer in stock: using LinqToDB; using (var db = new DbNorthwind()) { db.Product .Where(p => p.UnitsInStock == 0) .Set(p => p.Discontinued, true) .Update(); } Delete Similar to how you update records, you can also delete records: using LinqToDB; using (var db = new DbNorthwind()) { db.Product .Where(p => p.Discontinued) .Delete(); } Bulk Copy Bulk copy feature supports the transfer of large amounts of data into a table from another data source. For more details read this article . using LinqToDB.Data; [Table(Name = \"ProductsTemp\")] public class ProductTemp { [PrimaryKey] public int ProductID { get; set; } [Column(Name = \"ProductName\"), NotNull] public string Name { get; set; } // ... other columns ... } var list = new List<ProductTemp>(); // populate list using (var db = new DbNorthwind()) { db.BulkCopy(list); } Transactions Using database transactions is easy. All you have to do is call BeginTransaction() on your DataConnection, run one or more queries, and then commit the changes by calling CommitTransaction(). If something happened and you need to roll back your changes you can either call RollbackTransaction() or throw an exception. using (var db = new DbNorthwind()) { db.BeginTransaction(); // ... select / insert / update / delete ... if (somethingIsNotRight) { db.RollbackTransaction(); } else { db.CommitTransaction(); } } Also, you can use .NET built-in TransactionScope class: // don't forget that isolation level is serializable by default using (var transaction = new TransactionScope()) // or for async code // using (var transaction = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled)) { using (var db = new DbNorthwind()) { ... } transaction.Complete(); } It should be noted that there are two base classes for your \"context\" class: LinqToDB.Data.DataConnection and LinqToDB.DataContext . The key difference between them is in connection retention behaviour. DataConnection opens connection with first query and holds it open until dispose happens. DataContext behaves the way you might used to with Entity Framework: it opens connection per query and closes it right after query is done. This difference in behavior matters when used with TransactionScope : using var db = new LinqToDB.Data.DataConnection(\"provider name\", \"connection string\"); var product = db.GetTable<Product>() .FirstOrDefault(); // connection opened here var scope = new TransactionScope(); // this transaction was not attached to connection // because it was opened earlier product.Name = \"Lollipop\"; db.Update(product); scope.Dispose(); // no transaction rollback happed, \"Lollipop\" has been saved A DataConnection is attached with ambient transaction in moment it is opened. Any TransactionScope s created after the connection is created will no effect on that connection. Replacing DataConnection with DataContext in code shown earlier will make transaction scope work as expected: the created record will be discarded with the transaction. Although, DataContext appears to be the right class to choose, it is strongly recommended to use DataConnection instead. It's default behaviour might be changed with setting CloseAfterUse property to true : public class DbNorthwind : LinqToDB.Data.DataConnection { public DbNorthwind() : base(\"Northwind\") { (this as IDataContext).CloseAfterUse = true; } } Merge Here you can read about MERGE support. Window (Analytic) Functions Here you can read about Window (Analytic) Functions support. MiniProfiler If you would like to use MiniProfiler or other profiling tool that wraps ADO.NET provider classes, you need to configure our regular DataConnection to use wrapped connection. // example of SQL Server-backed data connection with MiniProfiler enabled for debug builds public class DbDataContext : DataConnection { // let's use profiler only for debug builds #if !DEBUG // regular non-profiled constructor public DbDataContext() : base(\"Northwind\") {} #else // use static instance of mapping schema // never create mapping schema per-connection // or it will seriously affect performance private static readonly MappingSchema _miniProfilerMappings = new (); static DbDataContext() { // this is important part: // here we tell linq2db how to access underlying ADO.NET classes of used provider // if you don't configure those mappings, linq2db will be unable to use // provider-specific functionality which could lead to loss or unavailability //of some functionality when profiled connection enabled _miniProfilerMappings.SetConvertExpression<ProfiledDbConnection, IDbConnection> ( db => db.WrappedConnection); _miniProfilerMappings.SetConvertExpression<ProfiledDbDataReader, IDataReader> ( db => db.WrappedReader); _miniProfilerMappings.SetConvertExpression<ProfiledDbTransaction, IDbTransaction>( db => db.WrappedTransaction); _miniProfilerMappings.SetConvertExpression<ProfiledDbCommand, IDbCommand> ( db => db.InternalCommand); } public DbDataContext() : base( // get data provider instance using // <DB_NAME>Tools.GetDataProvider() // helpers // In this case we use SQL Server provider SqlServerTools.GetDataProvider(SqlServerVersion.v2012), GetConnection(), _miniProfilerMappings) { } // wrap connection into profiler wrapper private static IDbConnection GetConnection() { // create provider-specific connection instance. SqlConnection in our case var dbConnection = new SqlConnection( @\"Server=.\\SQL;Database=Northwind;Trusted_Connection=True;Enlist=False;\"); // wrap it by profiler's connection implementation return new StackExchange.Profiling.Data.ProfiledDbConnection( dbConnection, MiniProfiler.Current); } #endif } More Still have questions left? Check out our documentation site and FAQ"
  },
  "README.html": {
    "href": "README.html",
    "title": "Documentation | Linq To DB (aka linq2db)",
    "keywords": "Documentation The LINQ to DB documentation uses DocFX to generate the doc site: https://linq2db.github.io Getting Started Run local.cmd build script The previous step builds the site under _site folder. If you open the index.html from that folder you'll see a few CORS errors. To work around this issue, one possible solution is to access the site through a local web server like IIS (see steps below). Edit your hosts file (c:\\Windows\\System32\\drivers\\etc\\hosts) and add new line: 127.0.0.1 linq2dbdocs.local From IIS Manager -> Site -> (right click) Add Website -> point path to the \"_site\" folder above and the host name to what you added to your hosts file (linq2dbdocs.local). You should now be able to access the site via http://linq2dbdocs.local"
  }
}